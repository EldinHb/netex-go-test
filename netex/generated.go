// Package netex was auto-generated from XML Schema definitions.
package netex

import (
	"time"
)

// EmptyType represents the EmptyType enumeration
// A type with no allowed content, used when simply the presence of an element is significant.
type EmptyType string

const (
	// EmptyTypeEmpty represents 
	EmptyTypeEmpty EmptyType = ""
)

// ExtensionsStructure represents the ExtensionsStructure element
// Type for Extensions to schema. Wraps an 'any' tag to ensure decidability.
type ExtensionsStructure struct {
	// Placeholder for user extensions.
	AnyElement *interface{} `xml:"@any_element,omitempty" json:"@any_element,omitempty"`
}

// Extensions represents the Extensions element
// Extensions to schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
type Extensions struct {
	ExtensionsStructure
}

// CoordinatesStructure represents the CoordinatesStructure element
// Type for GM Coordinates.
type CoordinatesStructure struct {
	Value []string `xml:",chardata" json:"value"`
}

// LocationStructure represents the LocationStructure element
// Type for gepspatial Position of a point. May be expressed in concrete WGS 84 Coordinates or any gml compatible point coordinates format.
type LocationStructure struct {
	// Longitude from Greenwich Meridian. -180 (West) to +180 (East). Decimal degrees. eg 2.356
	Longitude *float64 `xml:"Longitude,omitempty" json:"Longitude,omitempty"`
	// Latitude from equator. -90 (South) to +90 (North). Decimal degrees. eg 56.356
	Latitude *float64 `xml:"Latitude,omitempty" json:"Latitude,omitempty"`
	// Coordinates of points in a GML compatibe format, as indicated by srsName attribute.
	Coordinates *CoordinatesStructure `xml:"Coordinates,omitempty" json:"Coordinates,omitempty"`
	// Precision for point measurement. In meters.
	Precision *int `xml:"Precision,omitempty" json:"Precision,omitempty"`
	// Identifier of POINT.
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// identifier of data reference system for geocodes if point is specified as gml compatible Coordinates. A gml value. If not specified taken from system configuration.
	SrsName *string `xml:"srsName,attr,omitempty" json:"srsName,omitempty"`
}

// BoundingBoxStructure represents the BoundingBoxStructure element
// Defines a bounding box using two corner points. GML terminology.  +SIRI v2.0
type BoundingBoxStructure struct {
	// A geospatial point. 
	// Upper Left corner.
	// .
	UpperLeft LocationStructure `xml:"UpperLeft" json:"UpperLeft"`
	// A geospatial point. 
	// Lower right corner.
	// .
	LowerRight LocationStructure `xml:"LowerRight" json:"LowerRight"`
}

// LineShapeStructure represents the LineShapeStructure element
// Defines a line shape +SIRI v2.0
type LineShapeStructure struct {
	// A geospatial point. +SIRI v2.0 
	// 
	// .
	Point []LocationStructure `xml:"Point" json:"Point"`
}

// SrsName represents the SrsName element
// GML Spatial coordinate reference system.
type SrsName struct {
	Value string `xml:",chardata" json:"value"`
}

// NaturalLanguageStringStructure represents the NaturalLanguageStringStructure element
// Tyoe for a string in a specified language.
type NaturalLanguageStringStructure struct {
	Value string `xml:",chardata" json:"value"`
	Lang *string `xml:"lang,attr,omitempty" json:"lang,omitempty"`
}

// NaturalLanguagePlaceNameStructure represents the NaturalLanguagePlaceNameStructure element
// @lang. ISO language code (default is 'en')
// A string containing a phrase in a natural language name that requires at least one character of text and forbids certain reserved characters.
type NaturalLanguagePlaceNameStructure struct {
	Value string `xml:",chardata" json:"value"`
	Lang *string `xml:"lang,attr,omitempty" json:"lang,omitempty"`
}

// ParticipantRefStructure represents the ParticipantRefStructure element
// Reference to Unique identifier of participant.
type ParticipantRefStructure struct {
	Value string `xml:",chardata" json:"value"`
}

// CommunicationsTransportMethodEnumeration represents the CommunicationsTransportMethodEnumeration enumeration
// Enumeration of communications transport method usage.
type CommunicationsTransportMethodEnumeration string

const (
	// CommunicationsTransportMethodEnumerationHttpPost represents httpPost
	CommunicationsTransportMethodEnumerationHttpPost CommunicationsTransportMethodEnumeration = "httpPost"
	// CommunicationsTransportMethodEnumerationOther represents other
	CommunicationsTransportMethodEnumerationOther CommunicationsTransportMethodEnumeration = "other"
	// CommunicationsTransportMethodEnumerationWsdlSoap represents wsdlSoap
	CommunicationsTransportMethodEnumerationWsdlSoap CommunicationsTransportMethodEnumeration = "wsdlSoap"
	// CommunicationsTransportMethodEnumerationWsdlSoapDocumentLiteral represents wsdlSoapDocumentLiteral
	CommunicationsTransportMethodEnumerationWsdlSoapDocumentLiteral CommunicationsTransportMethodEnumeration = "wsdlSoapDocumentLiteral"
	// CommunicationsTransportMethodEnumerationHttpUrlJson represents httpUrlJSON
	CommunicationsTransportMethodEnumerationHttpUrlJson CommunicationsTransportMethodEnumeration = "httpUrlJSON"
	// CommunicationsTransportMethodEnumerationHttpUrlProtoBuffers represents httpUrlProtoBuffers
	CommunicationsTransportMethodEnumerationHttpUrlProtoBuffers CommunicationsTransportMethodEnumeration = "httpUrlProtoBuffers"
)

// CompressionMethodEnumeration represents the CompressionMethodEnumeration enumeration
// Enumeration of compression usage.
type CompressionMethodEnumeration string

const (
	// CompressionMethodEnumerationGzip represents gzip
	CompressionMethodEnumerationGzip CompressionMethodEnumeration = "gzip"
	// CompressionMethodEnumerationNone represents none
	CompressionMethodEnumerationNone CompressionMethodEnumeration = "none"
	// CompressionMethodEnumerationOther represents other
	CompressionMethodEnumerationOther CompressionMethodEnumeration = "other"
)

// MessageQualifierStructure represents the MessageQualifierStructure element
// Unique identifier of a message within SIRI functional service type and participant.
type MessageQualifierStructure struct {
	Value string `xml:",chardata" json:"value"`
}

// MessageRefStructure represents the MessageRefStructure element
// Type for message ref.
type MessageRefStructure struct {
	MessageQualifierStructure
}

// SubscriptionQualifierStructure represents the SubscriptionQualifierStructure element
// Type Unique identifier of Subscription within Participant.
type SubscriptionQualifierStructure struct {
	Value string `xml:",chardata" json:"value"`
}

// SubscriptionFilterStructure represents the SubscriptionFilterStructure element
// Type Unique identifier of Subscription Filter within Participant.
type SubscriptionFilterStructure struct {
	Value string `xml:",chardata" json:"value"`
}

// SubscriptionFilterRefStructure represents the SubscriptionFilterRefStructure element
// Type Unique identifier of Subscription Filter within Participant.
type SubscriptionFilterRefStructure struct {
	Value string `xml:",chardata" json:"value"`
}

// ItemRefStructure represents the ItemRefStructure element
// Type for reference to an Item.
type ItemRefStructure struct {
	Value string `xml:",chardata" json:"value"`
}

// CapabilityRefStructure represents the CapabilityRefStructure element
// Type for capability ref.
type CapabilityRefStructure struct {
	Value string `xml:",chardata" json:"value"`
}

// RequestTimestamp represents the RequestTimestamp element
// Timestamp on request.
type RequestTimestamp struct {
	Value time.Time `xml:",chardata" json:"value"`
}

// RequestorRef represents the RequestorRef element
// Reference to a requestor - Participant Code.
type RequestorRef struct {
	ParticipantRefStructure
}

// ResponseTimestamp represents the ResponseTimestamp element
// Time individual response element was created.
type ResponseTimestamp struct {
	Value time.Time `xml:",chardata" json:"value"`
}

// IncludeTranslations represents the IncludeTranslations element
// Whether additional translations of text names are to be included in elements. If false, then only one element should be returned.  Default is false.
// 
// Where multiple values are returned The first element returned ill be used as the default value.
type IncludeTranslations struct {
	Value bool `xml:",chardata" json:"value"`
}

// ErrorConditionStructure represents the ErrorConditionStructure element
// Type for RequestErrorCondition.
type ErrorConditionStructure struct {
	ServiceNotAvailableError *ServiceNotAvailableError `xml:"ServiceNotAvailableError,omitempty" json:"ServiceNotAvailableError,omitempty"`
	CapabilityNotSupportedError *CapabilityNotSupportedError `xml:"CapabilityNotSupportedError,omitempty" json:"CapabilityNotSupportedError,omitempty"`
	AccessNotAllowedError *AccessNotAllowedError `xml:"AccessNotAllowedError,omitempty" json:"AccessNotAllowedError,omitempty"`
	InvalidDataReferencesError *InvalidDataReferencesError `xml:"InvalidDataReferencesError,omitempty" json:"InvalidDataReferencesError,omitempty"`
	// Error: Data period or subscription period is outside of period covered by service.   +SIRI v2.0.
	BeyondDataHorizon *BeyondDataHorizon `xml:"BeyondDataHorizon,omitempty" json:"BeyondDataHorizon,omitempty"`
	NoInfoForTopicError *NoInfoForTopicError `xml:"NoInfoForTopicError,omitempty" json:"NoInfoForTopicError,omitempty"`
	ParametersIgnoredError *ParametersIgnoredError `xml:"ParametersIgnoredError,omitempty" json:"ParametersIgnoredError,omitempty"`
	// Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored.  +SIRI v2.0.
	UnknownExtensionsError *UnknownExtensionsError `xml:"UnknownExtensionsError,omitempty" json:"UnknownExtensionsError,omitempty"`
	AllowedResourceUsageExceededError *AllowedResourceUsageExceededError `xml:"AllowedResourceUsageExceededError,omitempty" json:"AllowedResourceUsageExceededError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *NaturalLanguageStringStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// ErrorConditionElementStructure represents the ErrorConditionElementStructure element
// Type for Standard ErrorConditions for Service request.
type ErrorConditionElementStructure struct {
	UnapprovedKeyAccessError *UnapprovedKeyAccessError `xml:"UnapprovedKeyAccessError,omitempty" json:"UnapprovedKeyAccessError,omitempty"`
	// Error: Recipient for a message to be distributed is unknown. I.e. delegatior is found, but  +SIRI v2.0
	UnknownParticipantError *UnknownParticipantError `xml:"UnknownParticipantError,omitempty" json:"UnknownParticipantError,omitempty"`
	UnknownEndpointError *UnknownEndpointError `xml:"UnknownEndpointError,omitempty" json:"UnknownEndpointError,omitempty"`
	EndpointDeniedAccessError *EndpointDeniedAccessError `xml:"EndpointDeniedAccessError,omitempty" json:"EndpointDeniedAccessError,omitempty"`
	EndpointNotAvailableAccessError *EndpointNotAvailableAccessError `xml:"EndpointNotAvailableAccessError,omitempty" json:"EndpointNotAvailableAccessError,omitempty"`
	ServiceNotAvailableError *ServiceNotAvailableError `xml:"ServiceNotAvailableError,omitempty" json:"ServiceNotAvailableError,omitempty"`
	CapabilityNotSupportedError *CapabilityNotSupportedError `xml:"CapabilityNotSupportedError,omitempty" json:"CapabilityNotSupportedError,omitempty"`
	AccessNotAllowedError *AccessNotAllowedError `xml:"AccessNotAllowedError,omitempty" json:"AccessNotAllowedError,omitempty"`
	InvalidDataReferencesError *InvalidDataReferencesError `xml:"InvalidDataReferencesError,omitempty" json:"InvalidDataReferencesError,omitempty"`
	// Error: Data period or subscription period is outside of period covered by service.   +SIRI v2.0.
	BeyondDataHorizon *BeyondDataHorizon `xml:"BeyondDataHorizon,omitempty" json:"BeyondDataHorizon,omitempty"`
	NoInfoForTopicError *NoInfoForTopicError `xml:"NoInfoForTopicError,omitempty" json:"NoInfoForTopicError,omitempty"`
	ParametersIgnoredError *ParametersIgnoredError `xml:"ParametersIgnoredError,omitempty" json:"ParametersIgnoredError,omitempty"`
	// Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored.  +SIRI v2.0.
	UnknownExtensionsError *UnknownExtensionsError `xml:"UnknownExtensionsError,omitempty" json:"UnknownExtensionsError,omitempty"`
	AllowedResourceUsageExceededError *AllowedResourceUsageExceededError `xml:"AllowedResourceUsageExceededError,omitempty" json:"AllowedResourceUsageExceededError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	UnknownSubscriptionError *UnknownSubscriptionError `xml:"UnknownSubscriptionError,omitempty" json:"UnknownSubscriptionError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// ErrorDescriptionStructure represents the ErrorDescriptionStructure element
// Type for Description of an error.
type ErrorDescriptionStructure struct {
	Value string `xml:",chardata" json:"value"`
}

// ErrorCodeStructure represents the ErrorCodeStructure element
// Type for Error Code.
type ErrorCodeStructure struct {
	// Addtional Description of error. This allows a descripotion to be supplied when the Error code is used in a specific WSDL fault, rather than within a general error condition.
	ErrorText *string `xml:"ErrorText,omitempty" json:"ErrorText,omitempty"`
	// Error code number associated with error.
	Number *int `xml:"number,attr,omitempty" json:"number,omitempty"`
}

// ServiceDeliveryErrorConditionStructure represents the ServiceDeliveryErrorConditionStructure element
// Type for Standard ErrorConditiosn for Service request.
type ServiceDeliveryErrorConditionStructure struct {
	UnapprovedKeyAccessError *UnapprovedKeyAccessError `xml:"UnapprovedKeyAccessError,omitempty" json:"UnapprovedKeyAccessError,omitempty"`
	// Error: Recipient for a message to be distributed is unknown. I.e. delegatior is found, but  +SIRI v2.0
	UnknownParticipantError *UnknownParticipantError `xml:"UnknownParticipantError,omitempty" json:"UnknownParticipantError,omitempty"`
	UnknownEndpointError *UnknownEndpointError `xml:"UnknownEndpointError,omitempty" json:"UnknownEndpointError,omitempty"`
	EndpointDeniedAccessError *EndpointDeniedAccessError `xml:"EndpointDeniedAccessError,omitempty" json:"EndpointDeniedAccessError,omitempty"`
	EndpointNotAvailableAccessError *EndpointNotAvailableAccessError `xml:"EndpointNotAvailableAccessError,omitempty" json:"EndpointNotAvailableAccessError,omitempty"`
	ServiceNotAvailableError *ServiceNotAvailableError `xml:"ServiceNotAvailableError,omitempty" json:"ServiceNotAvailableError,omitempty"`
	CapabilityNotSupportedError *CapabilityNotSupportedError `xml:"CapabilityNotSupportedError,omitempty" json:"CapabilityNotSupportedError,omitempty"`
	AccessNotAllowedError *AccessNotAllowedError `xml:"AccessNotAllowedError,omitempty" json:"AccessNotAllowedError,omitempty"`
	InvalidDataReferencesError *InvalidDataReferencesError `xml:"InvalidDataReferencesError,omitempty" json:"InvalidDataReferencesError,omitempty"`
	// Error: Data period or subscription period is outside of period covered by service.   +SIRI v2.0.
	BeyondDataHorizon *BeyondDataHorizon `xml:"BeyondDataHorizon,omitempty" json:"BeyondDataHorizon,omitempty"`
	NoInfoForTopicError *NoInfoForTopicError `xml:"NoInfoForTopicError,omitempty" json:"NoInfoForTopicError,omitempty"`
	ParametersIgnoredError *ParametersIgnoredError `xml:"ParametersIgnoredError,omitempty" json:"ParametersIgnoredError,omitempty"`
	// Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored.  +SIRI v2.0.
	UnknownExtensionsError *UnknownExtensionsError `xml:"UnknownExtensionsError,omitempty" json:"UnknownExtensionsError,omitempty"`
	AllowedResourceUsageExceededError *AllowedResourceUsageExceededError `xml:"AllowedResourceUsageExceededError,omitempty" json:"AllowedResourceUsageExceededError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// UnapprovedKeyAccessStructure represents the UnapprovedKeyAccessStructure element
// Type for Error: UnapprovedKey +SIRI v2.0
type UnapprovedKeyAccessStructure struct {
	ErrorCodeStructure
	// User key.
	Key *string `xml:"Key,omitempty" json:"Key,omitempty"`
}

// UnknownParticipantErrorStructure represents the UnknownParticipantErrorStructure element
// Type for Error: Unknown Participant. +SIRI v2.0
type UnknownParticipantErrorStructure struct {
	ErrorCodeStructure
	// Reference to  Participant who is unknown. + SIRI v2.0
	ParticipantRef *ParticipantRefStructure `xml:"ParticipantRef,omitempty" json:"ParticipantRef,omitempty"`
}

// UnknownEndpointErrorStructure represents the UnknownEndpointErrorStructure element
// Type for Error: Unknown Endpoint +SIRI v2.0
type UnknownEndpointErrorStructure struct {
	ErrorCodeStructure
	// Endpoint that is not known. + SIRI v2.0
	Endpoint *string `xml:"Endpoint,omitempty" json:"Endpoint,omitempty"`
}

// EndpointDeniedAccessStructure represents the EndpointDeniedAccessStructure element
// Type for Error: EndpointDeniedAccess +SIRI v2.0
type EndpointDeniedAccessStructure struct {
	ErrorCodeStructure
	// Endpoint that was denied access  + SIRI v2.0
	Endpoint *string `xml:"Endpoint,omitempty" json:"Endpoint,omitempty"`
}

// EndpointNotAvailableAccessStructure represents the EndpointNotAvailableAccessStructure element
// Type for Error: EndpointNotAvailable +SIRI v2.0
type EndpointNotAvailableAccessStructure struct {
	ErrorCodeStructure
	// Endpoint that is noit available. + SIRI v2.0
	Endpoint *string `xml:"Endpoint,omitempty" json:"Endpoint,omitempty"`
}

// ServiceNotAvailableErrorStructure represents the ServiceNotAvailableErrorStructure element
// Type for Service Not Available error.
type ServiceNotAvailableErrorStructure struct {
	ErrorCodeStructure
	// Expected time for reavailability of service.  +SIRI v2.0
	ExpectedRestartTime *time.Time `xml:"ExpectedRestartTime,omitempty" json:"ExpectedRestartTime,omitempty"`
}

// CapabilityNotSupportedErrorStructure represents the CapabilityNotSupportedErrorStructure element
// Type for Error: Service does not support requested capability.
type CapabilityNotSupportedErrorStructure struct {
	ErrorCodeStructure
	// Id of capabiliuty that is not supported.
	CapabilityRef *string `xml:"CapabilityRef,omitempty" json:"CapabilityRef,omitempty"`
}

// BeyondDataHorizonErrorStructure represents the BeyondDataHorizonErrorStructure element
// Type for error.
type BeyondDataHorizonErrorStructure struct {
	ErrorCodeStructure
}

// AccessNotAllowedErrorStructure represents the AccessNotAllowedErrorStructure element
// Type forError:Access Not Allowed.
type AccessNotAllowedErrorStructure struct {
	ErrorCodeStructure
}

// NoInfoForTopicErrorStructure represents the NoInfoForTopicErrorStructure element
// Type for Error: No Info for Topic
type NoInfoForTopicErrorStructure struct {
	ErrorCodeStructure
}

// InvalidDataReferencesErrorStructure represents the InvalidDataReferencesErrorStructure element
// Type for InvalidDataReferencesError:. +SIRI v2.0.
type InvalidDataReferencesErrorStructure struct {
	ErrorCodeStructure
	// Invalid reference values encoountered.
	InvalidRef []string `xml:"InvalidRef,omitempty" json:"InvalidRef,omitempty"`
}

// ParametersIgnoredErrorStructure represents the ParametersIgnoredErrorStructure element
// Type for Parameters Ignored Error:. +SIRI v2.0.
type ParametersIgnoredErrorStructure struct {
	ErrorCodeStructure
	// Name of the unsupported parameter.
	ParameterName []string `xml:"ParameterName,omitempty" json:"ParameterName,omitempty"`
}

// UnknownExtensionsErrorStructure represents the UnknownExtensionsErrorStructure element
// Type for Unknown Extensions Error:. +SIRI v2.0.
type UnknownExtensionsErrorStructure struct {
	ErrorCodeStructure
	// Name of the unknown encountered extensions.
	ExtensionName []string `xml:"ExtensionName,omitempty" json:"ExtensionName,omitempty"`
}

// AllowedResourceUsageExceededErrorStructure represents the AllowedResourceUsageExceededErrorStructure element
// Type for error. AllowedResourceUsageExceeded.
type AllowedResourceUsageExceededErrorStructure struct {
	ErrorCodeStructure
}

// UnknownSubscriberErrorStructure represents the UnknownSubscriberErrorStructure element
// Type for Error: Subscriber not found.
type UnknownSubscriberErrorStructure struct {
	ErrorCodeStructure
	// Id of subscriber that was not found + SIRI v2.0
	SubscriberRef *ParticipantRefStructure `xml:"SubscriberRef,omitempty" json:"SubscriberRef,omitempty"`
}

// UnknownSubscriptionErrorStructure represents the UnknownSubscriptionErrorStructure element
// Type for Error: Subscription not found.
type UnknownSubscriptionErrorStructure struct {
	ErrorCodeStructure
	// Ubscription code that could not be found. + SIRI v2.0
	SubscriptionCode *SubscriptionQualifierStructure `xml:"SubscriptionCode,omitempty" json:"SubscriptionCode,omitempty"`
}

// OtherErrorStructure represents the OtherErrorStructure element
// Type for error.
type OtherErrorStructure struct {
	ErrorCodeStructure
}

// ErrorCondition represents the ErrorCondition element
// Description of error or warning condition associated with response.
type ErrorCondition struct {
	ErrorConditionStructure
}

// ErrorConditionElement represents the ErrorConditionElement element
// Element fror an erroc condition  (for use in WSDL.)
type ErrorConditionElement struct {
	ErrorConditionElementStructure
}

// ErrorCode represents the ErrorCode element
// Subsititutable type for a SIRI Error code.
type ErrorCode struct {
	ErrorCodeStructure
}

// ServiceDeliveryErrorConditionElement represents the ServiceDeliveryErrorConditionElement element
// Element fror an erroc condition for use in WSDL.
type ServiceDeliveryErrorConditionElement struct {
	ServiceDeliveryErrorConditionStructure
}

// UnapprovedKeyAccessError represents the UnapprovedKeyAccessError element
// Error: Recipient of a message to be distributed is not available. +SIRI v2.0
type UnapprovedKeyAccessError struct {
	UnapprovedKeyAccessStructure
}

// UnknownParticipantError represents the UnknownParticipantError element
// Error: Recipient for a message to be distributed is unknown. +SIRI v2.0
type UnknownParticipantError struct {
	UnknownParticipantErrorStructure
}

// UnknownEndpointError represents the UnknownEndpointError element
// Error: Recipient for a message to be distributed is unknown. +SIRI v2.0
type UnknownEndpointError struct {
	UnknownEndpointErrorStructure
}

// EndpointDeniedAccessError represents the EndpointDeniedAccessError element
// Error:Endpoint to which a message is to be distributed did not allow access by the cloient. +SIRI v2.0
type EndpointDeniedAccessError struct {
	EndpointDeniedAccessStructure
}

// EndpointNotAvailableAccessError represents the EndpointNotAvailableAccessError element
// Error:Recipient of a message to be distributed is not available. +SIRI v2.0
type EndpointNotAvailableAccessError struct {
	EndpointNotAvailableAccessStructure
}

// ServiceNotAvailableError represents the ServiceNotAvailableError element
// Error: Functional service is not available to use (but it is still capable of giving this response).
type ServiceNotAvailableError struct {
	ServiceNotAvailableErrorStructure
}

// CapabilityNotSupportedError represents the CapabilityNotSupportedError element
// Error: Service does not support the requested capability.
type CapabilityNotSupportedError struct {
	CapabilityNotSupportedErrorStructure
}

// BeyondDataHorizon represents the BeyondDataHorizon element
// Error: Data period or subscription period is outside of period covered by service.
type BeyondDataHorizon struct {
	BeyondDataHorizonErrorStructure
}

// AccessNotAllowedError represents the AccessNotAllowedError element
// Error: Requestor is not authorised to the service or data requested.
type AccessNotAllowedError struct {
	AccessNotAllowedErrorStructure
}

// NoInfoForTopicError represents the NoInfoForTopicError element
// Error: Valid request was made but service does not hold any data for the requested topic. expression.
type NoInfoForTopicError struct {
	NoInfoForTopicErrorStructure
}

// InvalidDataReferencesError represents the InvalidDataReferencesError element
// Error: Request contains references to  identifiers that are not known.  +SIRI v2.0.
type InvalidDataReferencesError struct {
	InvalidDataReferencesErrorStructure
}

// ParametersIgnoredError represents the ParametersIgnoredError element
// Error: Request contained parameters that were not supported by the producer. A response has been provided but some parameters have been ignored. +SIRI v2.0.
type ParametersIgnoredError struct {
	ParametersIgnoredErrorStructure
}

// UnknownExtensionsError represents the UnknownExtensionsError element
// Error: Request contained extensions that were not supported by the producer. A response has been provided but some or all extensions have been ignored..  +SIRI v2.0.
type UnknownExtensionsError struct {
	UnknownExtensionsErrorStructure
}

// AllowedResourceUsageExceededError represents the AllowedResourceUsageExceededError element
// Error: Valid request was made but request would exceed the permitted resource usage of the client.
type AllowedResourceUsageExceededError struct {
	AllowedResourceUsageExceededErrorStructure
}

// UnknownSubscriberError represents the UnknownSubscriberError element
// Error: Subscriber not found.
type UnknownSubscriberError struct {
	UnknownSubscriberErrorStructure
}

// UnknownSubscriptionError represents the UnknownSubscriptionError element
// Error: Subscription not found.
type UnknownSubscriptionError struct {
	UnknownSubscriptionErrorStructure
}

// OtherError represents the OtherError element
// Error: Error type other than the well defined codes.
type OtherError struct {
	OtherErrorStructure
}

// AbstractRequestStructure represents the AbstractRequestStructure element
// Type for General SIRI Request.
type AbstractRequestStructure struct {
	RequestTimestamp RequestTimestamp `xml:"RequestTimestamp" json:"RequestTimestamp"`
}

// AuthenticatedRequestStructure represents the AuthenticatedRequestStructure element
// Type for Authticated SIRI Request.
type AuthenticatedRequestStructure struct {
	AbstractRequestStructure
	// Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account  may be common to all users of an application, or to an individual user. Note that to identify an individual user the  RequestorRef can be used with an anonymised token.  .     +SIRI v2.0
	AccountId *string `xml:"AccountId,omitempty" json:"AccountId,omitempty"`
	// Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
	AccountKey *string `xml:"AccountKey,omitempty" json:"AccountKey,omitempty"`
}

// RequestStructure represents the RequestStructure element
// Type for General SIRI Request.
type RequestStructure struct {
	AuthenticatedRequestStructure
	// Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
	Address *string `xml:"Address,omitempty" json:"Address,omitempty"`
	RequestorRef RequestorRef `xml:"RequestorRef" json:"RequestorRef"`
	// Arbitrary unique identifier that can be used to reference this message in subsequent interactions.
	MessageIdentifier *MessageQualifierStructure `xml:"MessageIdentifier,omitempty" json:"MessageIdentifier,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
}

// AbstractServiceRequestStructure represents the AbstractServiceRequestStructure element
// Abstract Service Request for SIRI Service request.
type AbstractServiceRequestStructure struct {
	AbstractRequestStructure
	// Arbitrary unique reference to this message.
	MessageIdentifier *MessageQualifierStructure `xml:"MessageIdentifier,omitempty" json:"MessageIdentifier,omitempty"`
}

// AbstractFunctionalServiceRequestStructure represents the AbstractFunctionalServiceRequestStructure element
// Abstract Service Request for SIRI Service request.
type AbstractFunctionalServiceRequestStructure struct {
	AbstractServiceRequestStructure
}

// AbstractSubscriptionStructure represents the AbstractSubscriptionStructure element
// Type for SIRI Service subscriptions.
type AbstractSubscriptionStructure struct {
	// Participant identifier of Subscriber. Normally this will be given by context, i.e. be the same as on the Subscription Request.
	SubscriberRef *ParticipantRefStructure `xml:"SubscriberRef,omitempty" json:"SubscriberRef,omitempty"`
	// Identifier to be given to Subscription.
	SubscriptionIdentifier SubscriptionQualifierStructure `xml:"SubscriptionIdentifier" json:"SubscriptionIdentifier"`
	// Requested end time for subscription.
	InitialTerminationTime time.Time `xml:"InitialTerminationTime" json:"InitialTerminationTime"`
}

// SubscriptionContextStructure represents the SubscriptionContextStructure element
// Type for Subscription context - Configuration parameters which may be evrriden.
type SubscriptionContextStructure struct {
	// Interval for heartbeat.
	HeartbeatInterval *string `xml:"HeartbeatInterval,omitempty" json:"HeartbeatInterval,omitempty"`
}

// AbstractSubscriptionRequestStructure represents the AbstractSubscriptionRequestStructure element
// Type for COmmon Subscription Request.
type AbstractSubscriptionRequestStructure struct {
	RequestStructure
	// Address to which data is to be sent, if different from Address. This may also be determined from RequestorRef and preconfigured data.
	ConsumerAddress *string `xml:"ConsumerAddress,omitempty" json:"ConsumerAddress,omitempty"`
	// Reference to a Subscription Filter with which this subscription is to be aggregated for purposes of notification and delivery. If absent, use the default filter. If present, use any existing filter with that identifier, if none found, create a new one. Optional SIRI feature.
	SubscriptionFilterIdentifier *string `xml:"SubscriptionFilterIdentifier,omitempty" json:"SubscriptionFilterIdentifier,omitempty"`
	// General values that apply to subscription. Usually set by configuration.
	SubscriptionContext *SubscriptionContextStructure `xml:"SubscriptionContext,omitempty" json:"SubscriptionContext,omitempty"`
}

// ResponseStructure represents the ResponseStructure element
// General Type for General SIRI Response.
type ResponseStructure struct {
	ResponseTimestamp ResponseTimestamp `xml:"ResponseTimestamp" json:"ResponseTimestamp"`
}

// ProducerResponseStructure represents the ProducerResponseStructure element
// Type for General SIRI Producer Response.
type ProducerResponseStructure struct {
	ResponseStructure
	// Unique identifier of Producer - Participant reference.
	ProducerRef *ParticipantRefStructure `xml:"ProducerRef,omitempty" json:"ProducerRef,omitempty"`
	// Endpoint Address to which acknowledgements to confirm delivery are to be sent.
	Address *string `xml:"Address,omitempty" json:"Address,omitempty"`
	// An arbitrary unique reference associated with the response which may be used to reference it.
	ResponseMessageIdentifier *MessageQualifierStructure `xml:"ResponseMessageIdentifier,omitempty" json:"ResponseMessageIdentifier,omitempty"`
	// Reference to an arbitrary unique identifier associated with the request which gave rise to this response.
	RequestMessageRef *MessageRefStructure `xml:"RequestMessageRef,omitempty" json:"RequestMessageRef,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
}

// AbstractNotificationStructure represents the AbstractNotificationStructure element
// Type for Notification Request.
type AbstractNotificationStructure struct {
	ProducerRequestEndpointStructure
}

// AbstractServiceDeliveryStructure represents the AbstractServiceDeliveryStructure element
// Type for Common elementd for a SIRI service delivery of the Form xxxDelivery.
type AbstractServiceDeliveryStructure struct {
	ResponseStructure
	// Arbitrary unique reference to the request which gave rise to this message.
	RequestMessageRef *MessageQualifierStructure `xml:"RequestMessageRef,omitempty" json:"RequestMessageRef,omitempty"`
	// Unique identifier of Subscriber - reference to a Participant.
	SubscriberRef *ParticipantRefStructure `xml:"SubscriberRef,omitempty" json:"SubscriberRef,omitempty"`
	// Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
	SubscriptionFilterRef *SubscriptionFilterRefStructure `xml:"SubscriptionFilterRef,omitempty" json:"SubscriptionFilterRef,omitempty"`
	// Reference to a service subscription: unique within Service and Subscriber.
	SubscriptionRef *SubscriptionQualifierStructure `xml:"SubscriptionRef,omitempty" json:"SubscriptionRef,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
	Status *Status `xml:"Status,omitempty" json:"Status,omitempty"`
	// Description of any error or warning condition.
	ErrorCondition *ServiceDeliveryErrorConditionStructure `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
	// End of data horizon of the data producer.
	ValidUntil *time.Time `xml:"ValidUntil,omitempty" json:"ValidUntil,omitempty"`
	// Minimum interval at which updates can be sent.
	ShortestPossibleCycle *string `xml:"ShortestPossibleCycle,omitempty" json:"ShortestPossibleCycle,omitempty"`
	// Default language for text elements.
	DefaultLanguage *string `xml:"DefaultLanguage,omitempty" json:"DefaultLanguage,omitempty"`
}

// ConsumerRequestEndpointStructure represents the ConsumerRequestEndpointStructure element
// Type for Unique reference to this request, created by Consumer. May be used to reference the request in subsequent interactions. Used by WSDL.
type ConsumerRequestEndpointStructure struct {
	AuthenticatedRequestStructure
	// Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
	Address *string `xml:"Address,omitempty" json:"Address,omitempty"`
	// Unique identifier of Consumer - a Participant reference.
	ConsumerRef *ParticipantRefStructure `xml:"ConsumerRef,omitempty" json:"ConsumerRef,omitempty"`
	// Arbitrary unique reference to this message. Some systems may use just timestamp for this.
	MessageIdentifier *MessageQualifierStructure `xml:"MessageIdentifier,omitempty" json:"MessageIdentifier,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
}

// ConsumerResponseEndpointStructure represents the ConsumerResponseEndpointStructure element
// Type for Unique reference to this response created by Consumer. May be used to reference the request in subsequent interactions. Used by WSDL.
type ConsumerResponseEndpointStructure struct {
	ResponseStructure
	// Unique identifier of Consumer - a Participant reference.
	ConsumerRef *ParticipantRefStructure `xml:"ConsumerRef,omitempty" json:"ConsumerRef,omitempty"`
	// Reference to an arbitrary unique idenitifer associated with the request which gave rise to this response.
	RequestMessageRef *MessageRefStructure `xml:"RequestMessageRef,omitempty" json:"RequestMessageRef,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
}

// ProducerRequestEndpointStructure represents the ProducerRequestEndpointStructure element
// Type for Unique reference to request to the producer. May be used to reference request in subsequent interactions. Used for WSDL.
type ProducerRequestEndpointStructure struct {
	AuthenticatedRequestStructure
	// Address to which response is to be sent. This may also be determined from ProducerRef and preconfigured data.
	Address *string `xml:"Address,omitempty" json:"Address,omitempty"`
	// Unique identifier of Producer - Participant reference.
	ProducerRef *ParticipantRefStructure `xml:"ProducerRef,omitempty" json:"ProducerRef,omitempty"`
	// Arbitrary unique reference to this message. Some systems may use just timestamp for this. Where there are multiple SubscriptionFilters, this can be used to distinguish between different notifications for different filters.
	MessageIdentifier *MessageQualifierStructure `xml:"MessageIdentifier,omitempty" json:"MessageIdentifier,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
}

// ResponseEndpointStructure represents the ResponseEndpointStructure element
// Type for Unique reference to reponse. May be used to reference request in subsequent interactions. Used for WSDL 
// 
//  .
type ResponseEndpointStructure struct {
	ResponseStructure
	// Address for further interaction.
	Address *string `xml:"Address,omitempty" json:"Address,omitempty"`
	// Participant reference that identifies responder.
	ResponderRef *ParticipantRefStructure `xml:"ResponderRef,omitempty" json:"ResponderRef,omitempty"`
	// Reference to an arbitrary unique reference associated with the request which gave rise to this response.
	RequestMessageRef *MessageQualifierStructure `xml:"RequestMessageRef,omitempty" json:"RequestMessageRef,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
}

// ProducerResponseEndpointStructure represents the ProducerResponseEndpointStructure element
// Type for Unique reference to reponse from producer. May be used to reference request in subsequent interactions. Used for WSDL.
type ProducerResponseEndpointStructure struct {
	ResponseStructure
	// Unique identifier of Producer - Participant reference.
	ProducerRef *ParticipantRefStructure `xml:"ProducerRef,omitempty" json:"ProducerRef,omitempty"`
	// Endpoint Address to which acknowledgements to confirm delivery are to be sent.
	Address *string `xml:"Address,omitempty" json:"Address,omitempty"`
	// An arbitrary unique reference associated with the response which may be used to reference it.
	ResponseMessageIdentifier *MessageQualifierStructure `xml:"ResponseMessageIdentifier,omitempty" json:"ResponseMessageIdentifier,omitempty"`
	// Reference to an arbitrary unique identifier associated with the request which gave rise to this response.
	RequestMessageRef *MessageRefStructure `xml:"RequestMessageRef,omitempty" json:"RequestMessageRef,omitempty"`
}

// AbstractItemStructure represents the AbstractItemStructure element
// Type for an Activity.
type AbstractItemStructure struct {
	// Time at which data was recorded.
	RecordedAtTime time.Time `xml:"RecordedAtTime" json:"RecordedAtTime"`
}

// AbstractIdentifiedItemStructure represents the AbstractIdentifiedItemStructure element
// Type for an Activity that can be referenced.
type AbstractIdentifiedItemStructure struct {
	AbstractItemStructure
	// Identifier of item.
	ItemIdentifier *string `xml:"ItemIdentifier,omitempty" json:"ItemIdentifier,omitempty"`
}

// AbstractRequiredIdentifiedItemStructure represents the AbstractRequiredIdentifiedItemStructure element
// Type for an Activity that can be referenced.
type AbstractRequiredIdentifiedItemStructure struct {
	AbstractItemStructure
	// Identifier of item.
	ItemIdentifier string `xml:"ItemIdentifier" json:"ItemIdentifier"`
}

// AbstractReferencingItemStructure represents the AbstractReferencingItemStructure element
// Type for an Activity that references a previous Activity.
type AbstractReferencingItemStructure struct {
	AbstractItemStructure
	// Reference to an Activity Element of  a delivery.
	ItemRef *ItemRefStructure `xml:"ItemRef,omitempty" json:"ItemRef,omitempty"`
}

// AbstractRequiredReferencingItemStructure represents the AbstractRequiredReferencingItemStructure element
// Type for an Activity that references a previous Activity.
type AbstractRequiredReferencingItemStructure struct {
	AbstractItemStructure
	// Reference to an Activity Element of  a delivery.
	ItemRef ItemRefStructure `xml:"ItemRef" json:"ItemRef"`
}

// ServiceCapabilitiesRequestStructure represents the ServiceCapabilitiesRequestStructure element
// Type for ServcieCapabilities request.
type ServiceCapabilitiesRequestStructure struct {
	AbstractServiceRequestStructure
	// Whether to include the requestors permissions in the response. Only applies if Access control capability supported. Default is 'false'.
	ParticipantPermissions *bool `xml:"ParticipantPermissions,omitempty" json:"ParticipantPermissions,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	// Version number of request. Fixed.
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
}

// AbstractServiceCapabilitiesResponseStructure represents the AbstractServiceCapabilitiesResponseStructure element
// Type for capabilities response.
type AbstractServiceCapabilitiesResponseStructure struct {
	ResponseStructure
	// Arbitrary unique reference to the request which gave rise to this message.
	RequestMessageRef *MessageQualifierStructure `xml:"RequestMessageRef,omitempty" json:"RequestMessageRef,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
	Status *Status `xml:"Status,omitempty" json:"Status,omitempty"`
	// Description of any error or warning condition.
	ErrorCondition *ServiceDeliveryErrorConditionStructure `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
}

// AbstractCapabilitiesStructure represents the AbstractCapabilitiesStructure element
// Type for Capabilities of StopMonitopring Service.
type AbstractCapabilitiesStructure struct {
	// General capabilities common to all SIRI service request types.
	GeneralInteraction *CapabilityGeneralInteractionStructure `xml:"GeneralInteraction,omitempty" json:"GeneralInteraction,omitempty"`
	// Implementation properties common to all request types.
	TransportDescription *TransportDescriptionStructure `xml:"TransportDescription,omitempty" json:"TransportDescription,omitempty"`
}

// CapabilityGeneralInteractionStructure represents the CapabilityGeneralInteractionStructure element
// Type for Common Request Policy capabilities.
type CapabilityGeneralInteractionStructure struct {
	// Interaction capabilities.
	Interaction Interaction `xml:"Interaction" json:"Interaction"`
	// Delivery capabilities.
	Delivery Delivery `xml:"Delivery" json:"Delivery"`
	// Whether the service supports multiple part despatch with MoreData flag. Default is 'true'.
	MultipartDespatch bool `xml:"MultipartDespatch" json:"MultipartDespatch"`
	// Whether the service supports multiple Subscriber Filters. Default is ' false'.
	MultipleSubscriberFilter bool `xml:"MultipleSubscriberFilter" json:"MultipleSubscriberFilter"`
	// Whether the service supports Delivery confirm.
	HasConfirmDelivery bool `xml:"HasConfirmDelivery" json:"HasConfirmDelivery"`
	// Whether the service has a heartbeat message. Default is 'false'.
	HasHeartbeat bool `xml:"HasHeartbeat" json:"HasHeartbeat"`
	// Whether VisitNumber can be used as a strict order number within JOURNEY PATTERN. Default is 'false'.
	VisitNumberisOrder *bool `xml:"VisitNumberisOrder,omitempty" json:"VisitNumberisOrder,omitempty"`
}

// Interaction represents the Interaction element
type Interaction struct {
	// Whether the service supports Request Response Interaction. Default is 'true'.
	RequestResponse bool `xml:"RequestResponse" json:"RequestResponse"`
	// Whether the service supports Publish Subscribe Interaction. Default is 'true'.
	PublishSubscribe bool `xml:"PublishSubscribe" json:"PublishSubscribe"`
}

// Delivery represents the Delivery element
type Delivery struct {
	// Whether the service supports Direct delivery.
	DirectDelivery bool `xml:"DirectDelivery" json:"DirectDelivery"`
	// Whether the service supports Fetched delivery (VDV Style)
	FetchedDelivery bool `xml:"FetchedDelivery" json:"FetchedDelivery"`
}

// CapabilityRequestPolicyStructure represents the CapabilityRequestPolicyStructure element
// Type for Common Request Policy capabilities.
type CapabilityRequestPolicyStructure struct {
	// National languages supported by service.
	NationalLanguage []string `xml:"NationalLanguage" json:"NationalLanguage"`
	// Whether producer can provide multiple  translations of NL text elements  +SIRI 2.0
	Translations *bool `xml:"Translations,omitempty" json:"Translations,omitempty"`
	// Name of GML Coordinate format used for Geospatial points in responses.
	GmlCoordinateFormat *string `xml:"GmlCoordinateFormat,omitempty" json:"GmlCoordinateFormat,omitempty"`
	// Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
	WgsDecimalDegrees *EmptyType `xml:"WgsDecimalDegrees,omitempty" json:"WgsDecimalDegrees,omitempty"`
}

// CapabilitySubscriptionPolicyStructure represents the CapabilitySubscriptionPolicyStructure element
// Type for Common Subscription capabilities.
type CapabilitySubscriptionPolicyStructure struct {
	// Whether incremental updates can be specified for updates Default is ' true'.
	HasIncrementalUpdates *bool `xml:"HasIncrementalUpdates,omitempty" json:"HasIncrementalUpdates,omitempty"`
	// Whether change threshold can be specified for updates. Default is 'true'.
	HasChangeSensitivity *bool `xml:"HasChangeSensitivity,omitempty" json:"HasChangeSensitivity,omitempty"`
}

// TransportDescriptionStructure represents the TransportDescriptionStructure element
// Type for implementation structure.
type TransportDescriptionStructure struct {
	// Communications Transport method used to exchange messages. Default is 'httpPost'.
	CommunicationsTransportMethod CommunicationsTransportMethodEnumeration `xml:"CommunicationsTransportMethod" json:"CommunicationsTransportMethod"`
	// Compression method used to compress messages for transmission. Default is 'none'.
	CompressionMethod CompressionMethodEnumeration `xml:"CompressionMethod" json:"CompressionMethod"`
}

// AbstractDiscoveryRequestStructure represents the AbstractDiscoveryRequestStructure element
// Requests for stop reference data for use in service requests.
type AbstractDiscoveryRequestStructure struct {
	AuthenticatedRequestStructure
	// Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
	Address *string `xml:"Address,omitempty" json:"Address,omitempty"`
	RequestorRef RequestorRef `xml:"RequestorRef" json:"RequestorRef"`
	// Arbitrary unique identifier that can be used to reference this message in subsequent interactions.
	MessageIdentifier *MessageQualifierStructure `xml:"MessageIdentifier,omitempty" json:"MessageIdentifier,omitempty"`
}

// AbstractDiscoveryDeliveryStructure represents the AbstractDiscoveryDeliveryStructure element
// Abstract supertype fro discovery responses.
type AbstractDiscoveryDeliveryStructure struct {
	ResponseStructure
	Status *Status `xml:"Status,omitempty" json:"Status,omitempty"`
	// Description of any error or warning condition.
	ErrorCondition *ServiceDeliveryErrorConditionStructure `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
	// End of data horizon of the data producer.
	ValidUntil *time.Time `xml:"ValidUntil,omitempty" json:"ValidUntil,omitempty"`
	// Minimum interval at which updates can be sent.
	ShortestPossibleCycle *string `xml:"ShortestPossibleCycle,omitempty" json:"ShortestPossibleCycle,omitempty"`
}

// AbstractRequest represents the AbstractRequest element
// Subsititutable type for a timestamped SIRI request.
type AbstractRequest struct {
	AbstractRequestStructure
}

// AuthenticatedRequest represents the AuthenticatedRequest element
// Subsititutable type for an authenticated request Authenticated.
type AuthenticatedRequest struct {
	AuthenticatedRequestStructure
}

// AbstractTrackedRequest represents the AbstractTrackedRequest element
// Subsititutable type for a SIRI request with requestor dteials tracked.
type AbstractTrackedRequest struct {
	RequestStructure
}

// AbstractServiceRequest represents the AbstractServiceRequest element
// Substitutable type for a SIRI Functional Service request.
type AbstractServiceRequest struct {
	AbstractServiceRequestStructure
}

// AbstractFunctionalServiceRequest represents the AbstractFunctionalServiceRequest element
// Subsititutable type for a SIRI Functional Service request.
type AbstractFunctionalServiceRequest struct {
	AbstractFunctionalServiceRequestStructure
}

// AbstractFunctionalServiceSubscriptionRequest represents the AbstractFunctionalServiceSubscriptionRequest element
// Subsititutable type for a SIRI Functional Service subscription request.
type AbstractFunctionalServiceSubscriptionRequest struct {
	AbstractSubscriptionStructure
}

// AbstractResponse represents the AbstractResponse element
// Subsititutable type for a SIRI response.
type AbstractResponse struct {
	ResponseStructure
}

// ProducerResponse represents the ProducerResponse element
// Subsititutable type for a SIRI r Producer esponse.
type ProducerResponse struct {
	ProducerResponseStructure
}

// AbstractFunctionalServiceDelivery represents the AbstractFunctionalServiceDelivery element
// Subsititutable type for a SIRI Functional Service Deivery.
type AbstractFunctionalServiceDelivery struct {
	AbstractServiceDeliveryStructure
}

// Status represents the Status element
// Whether the request was processed successfully or not. Default is 'true'.
type Status struct {
	Value bool `xml:",chardata" json:"value"`
}

// ProducerRequest represents the ProducerRequest element
type ProducerRequest struct {
	ProducerRequestEndpointStructure
}

// AbstractFunctionalServiceCapabilitiesRequest represents the AbstractFunctionalServiceCapabilitiesRequest element
// Subsititutable type for a SIRI Functional Service Capabiloities equest.
type AbstractFunctionalServiceCapabilitiesRequest struct {
	AbstractServiceRequestStructure
}

// AbstractFunctionalServiceCapabilitiesResponse represents the AbstractFunctionalServiceCapabilitiesResponse element
// Subsititutable type for a SIRI Functional Service Capabilities Response.
type AbstractFunctionalServiceCapabilitiesResponse struct {
	AbstractServiceCapabilitiesResponseStructure
}

// AbstractDiscoveryRequest represents the AbstractDiscoveryRequest element
// Abstract Discovery request.
type AbstractDiscoveryRequest struct {
	AbstractDiscoveryRequestStructure
}

// AbstractDiscoveryDelivery represents the AbstractDiscoveryDelivery element
// Abstract type for a discovery delivery.
type AbstractDiscoveryDelivery struct {
	AbstractDiscoveryDeliveryStructure
}

// DeliveryMethodEnumeration represents the DeliveryMethodEnumeration enumeration
// Delivery Method: Fetched or Direct Delivery.
type DeliveryMethodEnumeration string

const (
	// DeliveryMethodEnumerationDirect represents direct
	DeliveryMethodEnumerationDirect DeliveryMethodEnumeration = "direct"
	// DeliveryMethodEnumerationFetched represents fetched
	DeliveryMethodEnumerationFetched DeliveryMethodEnumeration = "fetched"
)

// PredictorsEnumeration represents the PredictorsEnumeration enumeration
// Allowed values for predictors.
type PredictorsEnumeration string

const (
	// PredictorsEnumerationAvmsOnly represents avmsOnly
	PredictorsEnumerationAvmsOnly PredictorsEnumeration = "avmsOnly"
	// PredictorsEnumerationAnyone represents anyone
	PredictorsEnumerationAnyone PredictorsEnumeration = "anyone"
)

// ContextualisedRequestStructure represents the ContextualisedRequestStructure element
// Type for General SIRI Request.
type ContextualisedRequestStructure struct {
	// General request properties - typically configured rather than repeated on request.
	ServiceRequestContext *ServiceRequestContextStructure `xml:"ServiceRequestContext,omitempty" json:"ServiceRequestContext,omitempty"`
	RequestTimestamp RequestTimestamp `xml:"RequestTimestamp" json:"RequestTimestamp"`
	// Account Identifier. May be used to attribute requests to a particular application provider and authentication key. The account  may be common to all users of an application, or to an individual user. Note that to identify an individual user the  RequestorRef can be used with an anonymised token.  .     +SIRI v2.0
	AccountId *string `xml:"AccountId,omitempty" json:"AccountId,omitempty"`
	// Authentication key for request. May be used to authenticate requests from a particular account. +SIRI v2.0
	AccountKey *string `xml:"AccountKey,omitempty" json:"AccountKey,omitempty"`
	// Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
	Address *string `xml:"Address,omitempty" json:"Address,omitempty"`
	RequestorRef RequestorRef `xml:"RequestorRef" json:"RequestorRef"`
	// Arbitrary unique identifier that can be used to reference this message in subsequent interactions.
	MessageIdentifier *MessageQualifierStructure `xml:"MessageIdentifier,omitempty" json:"MessageIdentifier,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
}

// ServiceRequestContextStructure represents the ServiceRequestContextStructure element
// Configurable context for requests. Intended Primarily as a documentation mechanism.
type ServiceRequestContextStructure struct {
	// Address to which CheckStatus requests are to be sent.
	CheckStatusAddress *string `xml:"CheckStatusAddress,omitempty" json:"CheckStatusAddress,omitempty"`
	// Address to which subscription requests are to be sent.
	SubscribeAddress *string `xml:"SubscribeAddress,omitempty" json:"SubscribeAddress,omitempty"`
	// Address to which subscription requests are to be sent. If absent, same as SubscribeAddress.
	ManageSubscriptionAddress *string `xml:"ManageSubscriptionAddress,omitempty" json:"ManageSubscriptionAddress,omitempty"`
	// Address to which requests are to return data.
	GetDataAddress *string `xml:"GetDataAddress,omitempty" json:"GetDataAddress,omitempty"`
	// Address to which CheckStatus responses and heartbeats are to be sent. If absent, same as SubscriberAddress.
	StatusResponseAddress *string `xml:"StatusResponseAddress,omitempty" json:"StatusResponseAddress,omitempty"`
	// Address to which subscription responses are to be sent.
	SubscriberAddress *string `xml:"SubscriberAddress,omitempty" json:"SubscriberAddress,omitempty"`
	// Address to which notifcations requests are to be sent. If absent, same as SubscriberAddress.
	NotifyAddress *string `xml:"NotifyAddress,omitempty" json:"NotifyAddress,omitempty"`
	// Address to which data is to be sent. If absent, same as NotifyAddress.
	ConsumerAddress *string `xml:"ConsumerAddress,omitempty" json:"ConsumerAddress,omitempty"`
	// Default names pace used to scope data identifiers.
	DataNameSpaces *DataNameSpacesStructure `xml:"DataNameSpaces,omitempty" json:"DataNameSpaces,omitempty"`
	// Preferred language in which to return text values.
	Language *string `xml:"Language,omitempty" json:"Language,omitempty"`
	// Geospatial coordinates are given as Wgs 84 Latiude and longitude, decimial degrees of arc.
	WgsDecimalDegrees *EmptyType `xml:"WgsDecimalDegrees,omitempty" json:"WgsDecimalDegrees,omitempty"`
	// Name of GML Coordinate format used for Geospatial points in responses.
	GmlCoordinateFormat *string `xml:"GmlCoordinateFormat,omitempty" json:"GmlCoordinateFormat,omitempty"`
	// Units for Distance Type. Default is metres. +SIRI v2.0
	DistanceUnits *string `xml:"DistanceUnits,omitempty" json:"DistanceUnits,omitempty"`
	// Units for Distance Type. Default is metres per second. +SIRI v2.0
	VelocityUnits *string `xml:"VelocityUnits,omitempty" json:"VelocityUnits,omitempty"`
	// Maximum data horizon for requests.
	DataHorizon *string `xml:"DataHorizon,omitempty" json:"DataHorizon,omitempty"`
	// Timeout for requests. [Should this be separate for each type?]
	RequestTimeout *string `xml:"RequestTimeout,omitempty" json:"RequestTimeout,omitempty"`
	// Whether Delivery is fetched or retrieved.
	DeliveryMethod *DeliveryMethodEnumeration `xml:"DeliveryMethod,omitempty" json:"DeliveryMethod,omitempty"`
	// Whether multi-part delivery is allowed, i.e. the breaking up of updates into more than one delivery messages with a MoreData flag,
	MultipartDespatch *bool `xml:"MultipartDespatch,omitempty" json:"MultipartDespatch,omitempty"`
	// Whether Consumers should issue an acknowledgement on successful receipt of a delivery. Default is ' false'.
	ConfirmDelivery *bool `xml:"ConfirmDelivery,omitempty" json:"ConfirmDelivery,omitempty"`
	// Maximum Number of subscriptions that can be sustained by the subscriber. If absent no limit.
	MaximimumNumberOfSubscriptions *int `xml:"MaximimumNumberOfSubscriptions,omitempty" json:"MaximimumNumberOfSubscriptions,omitempty"`
	// Who may make a prediction.
	AllowedPredictors *PredictorsEnumeration `xml:"AllowedPredictors,omitempty" json:"AllowedPredictors,omitempty"`
	// Name of prediction method used.
	PredictionFunction *string `xml:"PredictionFunction,omitempty" json:"PredictionFunction,omitempty"`
}

// DataNameSpacesStructure represents the DataNameSpacesStructure element
// Name spaces.
type DataNameSpacesStructure struct {
	// Name space for STOP POINTs.
	StopPointNameSpace *string `xml:"StopPointNameSpace,omitempty" json:"StopPointNameSpace,omitempty"`
	// Name space for LINE names and DIRECTIONss.
	LineNameSpace *string `xml:"LineNameSpace,omitempty" json:"LineNameSpace,omitempty"`
	// Name space for Product Categories.
	ProductCategoryNameSpace *string `xml:"ProductCategoryNameSpace,omitempty" json:"ProductCategoryNameSpace,omitempty"`
	// Name space for service features.
	ServiceFeatureNameSpace *string `xml:"ServiceFeatureNameSpace,omitempty" json:"ServiceFeatureNameSpace,omitempty"`
	// Name space for VEHICLE features.
	VehicleFeatureNameSpace *string `xml:"VehicleFeatureNameSpace,omitempty" json:"VehicleFeatureNameSpace,omitempty"`
}

// TerminateSubscriptionRequestStructure represents the TerminateSubscriptionRequestStructure element
// Type for request to terminate a subscription or subscriptions.
type TerminateSubscriptionRequestStructure struct {
	AuthenticatedRequestStructure
	// Address to which response is to be sent. This may also be determined from RequestorRef and preconfigured data.
	Address *string `xml:"Address,omitempty" json:"Address,omitempty"`
	RequestorRef RequestorRef `xml:"RequestorRef" json:"RequestorRef"`
	// Arbitrary unique identifier that can be used to reference this message in subsequent interactions.
	MessageIdentifier *MessageQualifierStructure `xml:"MessageIdentifier,omitempty" json:"MessageIdentifier,omitempty"`
	// Address of original Consumer, i.e. requesting system to which delegating response is to be  returned. +SIRI 2.0
	DelegatorAddress *string `xml:"DelegatorAddress,omitempty" json:"DelegatorAddress,omitempty"`
	// Identifier of delegating system that originated message. +SIRI 2.0
	DelegatorRef *ParticipantRefStructure `xml:"DelegatorRef,omitempty" json:"DelegatorRef,omitempty"`
	// Participant identifier of Subscriber. Subscription ref will be unique within this.
	SubscriberRef *ParticipantRefStructure `xml:"SubscriberRef,omitempty" json:"SubscriberRef,omitempty"`
	// Terminate all subscriptions for the requestor.
	All *EmptyType `xml:"All,omitempty" json:"All,omitempty"`
	// Terminate the subscription identfiied by the reference.
	SubscriptionRef []SubscriptionQualifierStructure `xml:"SubscriptionRef,omitempty" json:"SubscriptionRef,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
}

// TerminateSubscriptionResponseStructure represents the TerminateSubscriptionResponseStructure element
// Type for Response to a request to terminate a subscription or subscriptions.
type TerminateSubscriptionResponseStructure struct {
	ResponseEndpointStructure
	// Status of each subscription termnination response.
	TerminationResponseStatus []TerminationResponseStatusStructure `xml:"TerminationResponseStatus,omitempty" json:"TerminationResponseStatus,omitempty"`
}

// TerminationResponseStatusStructure represents the TerminationResponseStatusStructure element
// Type for Status of termination response.
type TerminationResponseStatusStructure struct {
	ResponseTimestamp *ResponseTimestamp `xml:"ResponseTimestamp,omitempty" json:"ResponseTimestamp,omitempty"`
	// Arbitrary unique reference to the request which gave rise to this message.
	RequestMessageRef *MessageQualifierStructure `xml:"RequestMessageRef,omitempty" json:"RequestMessageRef,omitempty"`
	// Unique identifier of Subscriber - reference to a Participant.
	SubscriberRef *ParticipantRefStructure `xml:"SubscriberRef,omitempty" json:"SubscriberRef,omitempty"`
	// Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
	SubscriptionFilterRef *SubscriptionFilterRefStructure `xml:"SubscriptionFilterRef,omitempty" json:"SubscriptionFilterRef,omitempty"`
	// Reference to a service subscription: unique within Service and Subscriber.
	SubscriptionRef *SubscriptionQualifierStructure `xml:"SubscriptionRef,omitempty" json:"SubscriptionRef,omitempty"`
	Status Status `xml:"Status" json:"Status"`
	// Description of any error or warning condition.
	ErrorCondition *ErrorCondition `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
}

// ErrorCondition2 represents the ErrorCondition2 element
type ErrorCondition2 struct {
	CapabilityNotSupportedError *CapabilityNotSupportedError `xml:"CapabilityNotSupportedError,omitempty" json:"CapabilityNotSupportedError,omitempty"`
	UnknownSubscriberError *UnknownSubscriberError `xml:"UnknownSubscriberError,omitempty" json:"UnknownSubscriberError,omitempty"`
	UnknownSubscriptionError *UnknownSubscriptionError `xml:"UnknownSubscriptionError,omitempty" json:"UnknownSubscriptionError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// SubscriptionTerminatedNotificationStructure represents the SubscriptionTerminatedNotificationStructure element
// Type for Notification to terminate a subscription or subscriptions.
type SubscriptionTerminatedNotificationStructure struct {
	ProducerResponseStructure
	// Unique identifier of Subscriber - reference to a Participant.
	SubscriberRef []ParticipantRefStructure `xml:"SubscriberRef,omitempty" json:"SubscriberRef,omitempty"`
	// Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
	SubscriptionFilterRef []SubscriptionFilterRefStructure `xml:"SubscriptionFilterRef,omitempty" json:"SubscriptionFilterRef,omitempty"`
	// Reference to a service subscription: unique within Service and Subscriber.
	SubscriptionRef []SubscriptionQualifierStructure `xml:"SubscriptionRef" json:"SubscriptionRef"`
	// Text description providing additional information about the reason for the subscription termination.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
}

// StatusResponseStructure represents the StatusResponseStructure element
// Type for Response Status.
type StatusResponseStructure struct {
	ResponseStructure
	// Arbitrary unique reference to the request which gave rise to this message.
	RequestMessageRef *MessageQualifierStructure `xml:"RequestMessageRef,omitempty" json:"RequestMessageRef,omitempty"`
	// Unique identifier of Subscriber - reference to a Participant.
	SubscriberRef *ParticipantRefStructure `xml:"SubscriberRef,omitempty" json:"SubscriberRef,omitempty"`
	// Unique identifier of Subscription filter to which this subscription is assigned. If there is onlya single filter, then can be omitted.
	SubscriptionFilterRef *SubscriptionFilterRefStructure `xml:"SubscriptionFilterRef,omitempty" json:"SubscriptionFilterRef,omitempty"`
	// Reference to a service subscription: unique within Service and Subscriber.
	SubscriptionRef *SubscriptionQualifierStructure `xml:"SubscriptionRef,omitempty" json:"SubscriptionRef,omitempty"`
	Status *Status `xml:"Status,omitempty" json:"Status,omitempty"`
	// Description of any error or warning condition.
	ErrorCondition *ServiceDeliveryErrorConditionStructure `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
	// End of data horizon of the data producer.
	ValidUntil *time.Time `xml:"ValidUntil,omitempty" json:"ValidUntil,omitempty"`
	// Minimum interval at which updates can be sent.
	ShortestPossibleCycle *string `xml:"ShortestPossibleCycle,omitempty" json:"ShortestPossibleCycle,omitempty"`
}

// SubscriptionResponseStructure represents the SubscriptionResponseStructure element
// Type for Subscription Response.
type SubscriptionResponseStructure struct {
	ResponseEndpointStructure
	ResponseStatus []ResponseStatus `xml:"ResponseStatus" json:"ResponseStatus"`
	// Endpoint address of subscription manager if different from that of the Producer or known default.
	SubscriptionManagerAddress *string `xml:"SubscriptionManagerAddress,omitempty" json:"SubscriptionManagerAddress,omitempty"`
	// Time at which service providing the subscription was last started. Can be used to detect restarts. If absent, unknown.
	ServiceStartedTime *time.Time `xml:"ServiceStartedTime,omitempty" json:"ServiceStartedTime,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
}

// DataReadyRequestStructure represents the DataReadyRequestStructure element
// Type for Request from Producer to Consumer to notify that data update is ready to fetch. Answered with a DataReadyResponse.
type DataReadyRequestStructure struct {
	AbstractNotificationStructure
}

// DataReadyResponseStructure represents the DataReadyResponseStructure element
// Type for Data ready Acknowledgement Response.
type DataReadyResponseStructure struct {
	ConsumerResponseEndpointStructure
	Status *Status `xml:"Status,omitempty" json:"Status,omitempty"`
	// Description of any error or warning condition as to why Consumer cannot fetch data.
	ErrorCondition *ErrorCondition `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
}

// ErrorCondition3 represents the ErrorCondition3 element
type ErrorCondition3 struct {
	UnknownSubscriptionError *UnknownSubscriptionError `xml:"UnknownSubscriptionError,omitempty" json:"UnknownSubscriptionError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// DataSupplyRequestStructure represents the DataSupplyRequestStructure element
// Type for Data supply Request.
type DataSupplyRequestStructure struct {
	ConsumerRequestEndpointStructure
	// Reference to a specific notification message for which data is to be fetched. Can be used to distinguish between notfcatiosn for the same service and subscriber but for different filters.If none specified,
	NotificationRef *MessageRefStructure `xml:"NotificationRef,omitempty" json:"NotificationRef,omitempty"`
	// Whether to return all data, or just new updates since the last delivery. Default false, i.e. just updates.
	AllData *bool `xml:"AllData,omitempty" json:"AllData,omitempty"`
}

// DataReceivedResponseStructure represents the DataReceivedResponseStructure element
// Type for Data received Acknowledgement Response.
type DataReceivedResponseStructure struct {
	ConsumerResponseEndpointStructure
	Status Status `xml:"Status" json:"Status"`
	// Description of any error or warning condition.
	ErrorCondition *ErrorCondition `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
}

// ErrorCondition4 represents the ErrorCondition4 element
type ErrorCondition4 struct {
	UnknownSubscriptionError *UnknownSubscriptionError `xml:"UnknownSubscriptionError,omitempty" json:"UnknownSubscriptionError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// CheckStatusRequestStructure represents the CheckStatusRequestStructure element
// Type for check status request.
type CheckStatusRequestStructure struct {
	RequestStructure
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	// Version number of request.
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
}

// CheckStatusResponseStructure represents the CheckStatusResponseStructure element
// Type for Service Status Check Response.
type CheckStatusResponseStructure struct {
	ProducerResponseStructure
	Status *Status `xml:"Status,omitempty" json:"Status,omitempty"`
	// Whether data delivery is ready to be fetched SIRI v 2.0
	DataReady *bool `xml:"DataReady,omitempty" json:"DataReady,omitempty"`
	// Description of any error or warning condition that applies to the status check.
	ErrorCondition *ErrorCondition `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
	// End of data horizon of the data producer.
	ValidUntil *time.Time `xml:"ValidUntil,omitempty" json:"ValidUntil,omitempty"`
	// Minimum interval at which updates can be sent.
	ShortestPossibleCycle *string `xml:"ShortestPossibleCycle,omitempty" json:"ShortestPossibleCycle,omitempty"`
	// Time at which current instantiation of service started.
	ServiceStartedTime *time.Time `xml:"ServiceStartedTime,omitempty" json:"ServiceStartedTime,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
}

// ErrorCondition5 represents the ErrorCondition5 element
type ErrorCondition5 struct {
	ServiceNotAvailableError *ServiceNotAvailableError `xml:"ServiceNotAvailableError,omitempty" json:"ServiceNotAvailableError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// HeartbeatNotificationStructure represents the HeartbeatNotificationStructure element
// Type for Service Heartbeat Notification.
type HeartbeatNotificationStructure struct {
	ProducerRequestEndpointStructure
	Status *Status `xml:"Status,omitempty" json:"Status,omitempty"`
	// Whether data delivery is ready to be fetched SIRI v 2.0
	DataReady *bool `xml:"DataReady,omitempty" json:"DataReady,omitempty"`
	// Description of any error or warning condition that applies to the status check.
	ErrorCondition *ErrorCondition `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
	// End of data horizon of the data producer.
	ValidUntil *time.Time `xml:"ValidUntil,omitempty" json:"ValidUntil,omitempty"`
	// Minimum interval at which updates can be sent.
	ShortestPossibleCycle *string `xml:"ShortestPossibleCycle,omitempty" json:"ShortestPossibleCycle,omitempty"`
	// Time at which current instantiation of service started.
	ServiceStartedTime *time.Time `xml:"ServiceStartedTime,omitempty" json:"ServiceStartedTime,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
}

// ErrorCondition6 represents the ErrorCondition6 element
type ErrorCondition6 struct {
	ServiceNotAvailableError *ServiceNotAvailableError `xml:"ServiceNotAvailableError,omitempty" json:"ServiceNotAvailableError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// TerminateSubscriptionRequestBodyStructure represents the TerminateSubscriptionRequestBodyStructure element
// Type for Body of Terminate Subscription Request content. Used in WSDL.
type TerminateSubscriptionRequestBodyStructure struct {
	// Participant identifier of Subscriber. Subscription ref will be unique within this.
	SubscriberRef *ParticipantRefStructure `xml:"SubscriberRef,omitempty" json:"SubscriberRef,omitempty"`
	// Terminate all subscriptions for the requestor.
	All *EmptyType `xml:"All,omitempty" json:"All,omitempty"`
	// Terminate the subscription identfiied by the reference.
	SubscriptionRef []SubscriptionQualifierStructure `xml:"SubscriptionRef,omitempty" json:"SubscriptionRef,omitempty"`
}

// SubscriptionResponseBodyStructure represents the SubscriptionResponseBodyStructure element
// Type for Body of Subscription Response. Used in WSDL.
type SubscriptionResponseBodyStructure struct {
	ResponseStatus []ResponseStatus `xml:"ResponseStatus" json:"ResponseStatus"`
	// Endpoint address of subscription manager if different from that of the Producer or known default.
	SubscriptionManagerAddress *string `xml:"SubscriptionManagerAddress,omitempty" json:"SubscriptionManagerAddress,omitempty"`
	// Time at which service providing the subscription was last started. Can be used to detect restarts. If absent, unknown.
	ServiceStartedTime *time.Time `xml:"ServiceStartedTime,omitempty" json:"ServiceStartedTime,omitempty"`
}

// DataSupplyRequestBodyStructure represents the DataSupplyRequestBodyStructure element
// Type for Body of Data Supply Request. Used in WSDL.
type DataSupplyRequestBodyStructure struct {
	// Reference to a specific notification message for which data is to be fetched. Can be used to distinguish between notfcatiosn for the same service and subscriber but for different filters.If none specified,
	NotificationRef *MessageRefStructure `xml:"NotificationRef,omitempty" json:"NotificationRef,omitempty"`
	// Whether to return all data, or just new updates since the last delivery. Default false, i.e. just updates.
	AllData *bool `xml:"AllData,omitempty" json:"AllData,omitempty"`
}

// CheckStatusResponseBodyStructure represents the CheckStatusResponseBodyStructure element
// Type for Body of Service Status Check Response. Used in WSDL.
// Same as CheckStatusResponseStructure, but without extension to be consistent with the other operation definition.
type CheckStatusResponseBodyStructure struct {
	Status *Status `xml:"Status,omitempty" json:"Status,omitempty"`
	// Whether data delivery is ready to be fetched SIRI v 2.0
	DataReady *bool `xml:"DataReady,omitempty" json:"DataReady,omitempty"`
	// Description of any error or warning condition that applies to the status check.
	ErrorCondition *ErrorCondition `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
	// End of data horizon of the data producer.
	ValidUntil *time.Time `xml:"ValidUntil,omitempty" json:"ValidUntil,omitempty"`
	// Minimum interval at which updates can be sent.
	ShortestPossibleCycle *string `xml:"ShortestPossibleCycle,omitempty" json:"ShortestPossibleCycle,omitempty"`
	// Time at which current instantiation of service started.
	ServiceStartedTime *time.Time `xml:"ServiceStartedTime,omitempty" json:"ServiceStartedTime,omitempty"`
}

// ErrorCondition7 represents the ErrorCondition7 element
type ErrorCondition7 struct {
	ServiceNotAvailableError *ServiceNotAvailableError `xml:"ServiceNotAvailableError,omitempty" json:"ServiceNotAvailableError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// TerminateSubscriptionRequest represents the TerminateSubscriptionRequest element
// Request from Subscriber to Subscription Manager to terminate a subscription. Answered with a TerminateSubscriptionResponse.
type TerminateSubscriptionRequest struct {
	TerminateSubscriptionRequestStructure
}

// TerminateSubscriptionResponse represents the TerminateSubscriptionResponse element
// Request from Subscriber to Subscription Manager to terminate a subscription. Answered with a TerminateSubscriptionResponse.
type TerminateSubscriptionResponse struct {
	TerminateSubscriptionResponseStructure
}

// SubscriptionTerminatedNotification represents the SubscriptionTerminatedNotification element
// Notification from Subscriber to Subscription Manager to terminate a subscription.
type SubscriptionTerminatedNotification struct {
	SubscriptionTerminatedNotificationStructure
}

// ResponseStatus represents the ResponseStatus element
// Contains infromation about the processing of a an individual service subscription - either success info or an error condition. (VDV Acknowledgement).
type ResponseStatus struct {
	StatusResponseStructure
}

// SubscriptionResponse represents the SubscriptionResponse element
// Response from Producer to Consumer to inform whether subscriptions have been created. Answers a previous SubscriptionRequest.
type SubscriptionResponse struct {
	SubscriptionResponseStructure
}

// DataReadyNotification represents the DataReadyNotification element
// Request from Producer to Consumer to notify that data update is ready to fetch. Answered with a DataReadyResponse.
type DataReadyNotification struct {
	DataReadyRequestStructure
}

// DataReadyAcknowledgement represents the DataReadyAcknowledgement element
// Response from Consumer to Producer to acknowledge to Producer that a DataReadyRequest has been received.
type DataReadyAcknowledgement struct {
	DataReadyResponseStructure
}

// DataSupplyRequest represents the DataSupplyRequest element
// Request from Consumer to Producer to fetch update previously notified by a Data ready message. Answered with a Service Delivery.
type DataSupplyRequest struct {
	DataSupplyRequestStructure
}

// DataReceivedAcknowledgement represents the DataReceivedAcknowledgement element
// Response from Consumer to Producer to acknowledge that data hase been received. Used as optioanl extra step if reliable delivery is needed. Answers a ServiceDelivery.
type DataReceivedAcknowledgement struct {
	DataReceivedResponseStructure
}

// CheckStatusRequest represents the CheckStatusRequest element
// Request from Consumer to Producer to check whether services is working. Answers a CheckStatusRequest.
type CheckStatusRequest struct {
	CheckStatusRequestStructure
}

// CheckStatusResponse represents the CheckStatusResponse element
// Response from Producer to Consumer to inform whether services is working. Answers a CheckStatusRequest.
type CheckStatusResponse struct {
	CheckStatusResponseStructure
}

// HeartbeatNotification represents the HeartbeatNotification element
// Notification from Producer to Consumer to indicate that the service is running normally.
type HeartbeatNotification struct {
	HeartbeatNotificationStructure
}

// SiriSchema represents the SiriSchema element
type SiriSchema struct {
	ServiceRequest *ServiceRequest `xml:"ServiceRequest,omitempty" json:"ServiceRequest,omitempty"`
	SubscriptionRequest *SubscriptionRequest `xml:"SubscriptionRequest,omitempty" json:"SubscriptionRequest,omitempty"`
	TerminateSubscriptionRequest *TerminateSubscriptionRequest `xml:"TerminateSubscriptionRequest,omitempty" json:"TerminateSubscriptionRequest,omitempty"`
	DataReadyNotification *DataReadyNotification `xml:"DataReadyNotification,omitempty" json:"DataReadyNotification,omitempty"`
	DataSupplyRequest *DataSupplyRequest `xml:"DataSupplyRequest,omitempty" json:"DataSupplyRequest,omitempty"`
	CheckStatusRequest *CheckStatusRequest `xml:"CheckStatusRequest,omitempty" json:"CheckStatusRequest,omitempty"`
	HeartbeatNotification *HeartbeatNotification `xml:"HeartbeatNotification,omitempty" json:"HeartbeatNotification,omitempty"`
	CapabilitiesRequest *CapabilitiesRequest `xml:"CapabilitiesRequest,omitempty" json:"CapabilitiesRequest,omitempty"`
	SubscriptionResponse *SubscriptionResponse `xml:"SubscriptionResponse,omitempty" json:"SubscriptionResponse,omitempty"`
	TerminateSubscriptionResponse *TerminateSubscriptionResponse `xml:"TerminateSubscriptionResponse,omitempty" json:"TerminateSubscriptionResponse,omitempty"`
	DataReadyAcknowledgement *DataReadyAcknowledgement `xml:"DataReadyAcknowledgement,omitempty" json:"DataReadyAcknowledgement,omitempty"`
	ServiceDelivery *ServiceDelivery `xml:"ServiceDelivery,omitempty" json:"ServiceDelivery,omitempty"`
	DataReceivedAcknowledgement *DataReceivedAcknowledgement `xml:"DataReceivedAcknowledgement,omitempty" json:"DataReceivedAcknowledgement,omitempty"`
	CheckStatusResponse *CheckStatusResponse `xml:"CheckStatusResponse,omitempty" json:"CheckStatusResponse,omitempty"`
	// Responses with the capabilities of an implementation. Answers a CapabilityRequest.
	CapabilitiesResponse *CapabilitiesResponse `xml:"CapabilitiesResponse,omitempty" json:"CapabilitiesResponse,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
}

// ServiceRequestStructure represents the ServiceRequestStructure element
// SIRI Service Request.
type ServiceRequestStructure struct {
	ContextualisedRequestStructure
}

// SubscriptionRequestStructure represents the SubscriptionRequestStructure element
// Type for SIRI Subscription Request.
type SubscriptionRequestStructure struct {
	AbstractSubscriptionRequestStructure
	DataObjectSubscriptionRequest []DataObjectSubscriptionRequest `xml:"DataObjectSubscriptionRequest,omitempty" json:"DataObjectSubscriptionRequest,omitempty"`
}

// ServiceDeliveryStructure represents the ServiceDeliveryStructure element
// Type for SIRI Service Delivery.
type ServiceDeliveryStructure struct {
	ProducerResponseStructure
	// Whether the complerte request could be processed successfully or not. Default is 'true'. If any of the individual requests within the delivery failed, should be set to ' false'.
	Status *bool `xml:"Status,omitempty" json:"Status,omitempty"`
	// Description of any error or warning conditions that appluy to the overall request. More Specific error conditions should be included on each request that fails.
	ErrorCondition *ErrorCondition `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
	// Whether there is a further delvery message with more current updates that follows this one. Default is 'false'.
	MoreData *bool `xml:"MoreData,omitempty" json:"MoreData,omitempty"`
	DataObjectDelivery []DataObjectDelivery `xml:"DataObjectDelivery,omitempty" json:"DataObjectDelivery,omitempty"`
	// Default gml coordinate format for eny location elements in response; applies if Coordinates element is used to specify points. May be overridden on individual points.
	SrsName *string `xml:"srsName,attr,omitempty" json:"srsName,omitempty"`
}

// ErrorCondition8 represents the ErrorCondition8 element
type ErrorCondition8 struct {
	CapabilityNotSupportedError *CapabilityNotSupportedError `xml:"CapabilityNotSupportedError,omitempty" json:"CapabilityNotSupportedError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// ServiceDeliveryBodyStructure represents the ServiceDeliveryBodyStructure element
// Type for SIRI Service Delivery type.
type ServiceDeliveryBodyStructure struct {
	// Whether the complerte request could be processed successfully or not. Default is 'true'. If any of the individual requests within the delivery failed, should be set to ' false'.
	Status *bool `xml:"Status,omitempty" json:"Status,omitempty"`
	// Description of any error or warning conditions that appluy to the overall request. More Specific error conditions should be included on each request that fails.
	ErrorCondition *ErrorCondition `xml:"ErrorCondition,omitempty" json:"ErrorCondition,omitempty"`
	// Whether there is a further delvery message with more current updates that follows this one. Default is 'false'.
	MoreData *bool `xml:"MoreData,omitempty" json:"MoreData,omitempty"`
	DataObjectDelivery []DataObjectDelivery `xml:"DataObjectDelivery,omitempty" json:"DataObjectDelivery,omitempty"`
	// Default gml coordinate format for eny location elements in response; applies if Coordinates element is used to specify points. May be overridden on individual points.
	SrsName *string `xml:"srsName,attr,omitempty" json:"srsName,omitempty"`
}

// ErrorCondition9 represents the ErrorCondition9 element
type ErrorCondition9 struct {
	CapabilityNotSupportedError *CapabilityNotSupportedError `xml:"CapabilityNotSupportedError,omitempty" json:"CapabilityNotSupportedError,omitempty"`
	OtherError *OtherError `xml:"OtherError,omitempty" json:"OtherError,omitempty"`
	// Text description of error.
	Description *ErrorDescriptionStructure `xml:"Description,omitempty" json:"Description,omitempty"`
}

// CapabilitiesRequestStructure represents the CapabilitiesRequestStructure element
// Type for Requests for capabilities of the current system.
type CapabilitiesRequestStructure struct {
	RequestStructure
	DataObjectCapabilitiesRequest *DataObjectCapabilitiesRequest `xml:"DataObjectCapabilitiesRequest,omitempty" json:"DataObjectCapabilitiesRequest,omitempty"`
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
}

// CapabilitiesResponseStructure represents the CapabilitiesResponseStructure element
// Type for the capabilities of an implementation.
type CapabilitiesResponseStructure struct {
	ProducerResponseStructure
	DataObjectCapabilitiesResponse *DataObjectCapabilitiesResponse `xml:"DataObjectCapabilitiesResponse,omitempty" json:"DataObjectCapabilitiesResponse,omitempty"`
}

// ServiceRequest represents the ServiceRequest element
// Request from Consumer to Producer for immediate delivery of data. Answered with a ServiceDelivery (or a DataReadyRequest)
type ServiceRequest struct {
	ServiceRequestStructure
	DataObjectRequest []DataObjectRequest `xml:"DataObjectRequest,omitempty" json:"DataObjectRequest,omitempty"`
}

// SubscriptionRequest represents the SubscriptionRequest element
// Request from Subscriber to Producer for a subscription. Answered with a SubscriptionResponse.
type SubscriptionRequest struct {
	SubscriptionRequestStructure
}

// ServiceDelivery represents the ServiceDelivery element
// Response from Producer to Consumer to deliver payload data. Either answers a direct ServiceRequest, or asynchronously satisfies a subscription. May be sent directly in one step, or fetched in response to a DataSupply Request.
type ServiceDelivery struct {
	ServiceDeliveryStructure
}

// CapabilitiesRequest represents the CapabilitiesRequest element
// Requests a the current capabilities of the server. Answred with a CpabailitiesResponse.
type CapabilitiesRequest struct {
	CapabilitiesRequestStructure
}

// CapabilitiesResponse represents the CapabilitiesResponse element
// Responses with the capabilities of an implementation.
type CapabilitiesResponse struct {
	CapabilitiesResponseStructure
}

// ClassRefTypeEnumeration represents the ClassRefTypeEnumeration enumeration
// Allowed values for nature of reference.
type ClassRefTypeEnumeration string

const (
	// ClassRefTypeEnumerationMembers represents members
	// Include elements that meet selection criteria (e.g. validity condition).
	ClassRefTypeEnumerationMembers ClassRefTypeEnumeration = "members"
	// ClassRefTypeEnumerationMemberReferences represents memberReferences
	// Include elements that are referenced by primary element. E.g. TYPES OF VALUE, OPERATOR etc.
	ClassRefTypeEnumerationMemberReferences ClassRefTypeEnumeration = "memberReferences"
	// ClassRefTypeEnumerationAll represents all
	// Include all elements.
	ClassRefTypeEnumerationAll ClassRefTypeEnumeration = "all"
)

// MandatoryEnumeration represents the MandatoryEnumeration enumeration
// Allowed values for Mandatory.
type MandatoryEnumeration string

const (
	// MandatoryEnumerationRequired represents required
	// Include elements that meet selection criteria (e.g. validity condition).
	MandatoryEnumerationRequired MandatoryEnumeration = "required"
	// MandatoryEnumerationOptional represents optional
	// Include elements that are referenced by primary element. E.g. TYPES OF VALUE, OPERATOR etc.
	MandatoryEnumerationOptional MandatoryEnumeration = "optional"
	// MandatoryEnumerationNotAllowed represents notAllowed
	// Must not be included.
	MandatoryEnumerationNotAllowed MandatoryEnumeration = "notAllowed"
)

// CodespaceRefStructure represents the CodespaceRefStructure element
// Type for a reference to a CODESPACE.
type CodespaceRefStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Identifier of CODESPACE i.e. namespace of identifiers.
	Ref string `xml:"ref,attr" json:"ref"`
}

// ClassRefStructure represents the ClassRefStructure element
// Type for a reference to the Class of a ENTITY.
type ClassRefStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Name of referenced Class.
	NameOfClass string `xml:"nameOfClass,attr" json:"nameOfClass"`
}

// ClassInFrameRefStructure represents the ClassInFrameRefStructure element
// Type for a reference to the Class of a ENTITY for use in filters.
type ClassInFrameRefStructure struct {
	ClassRefStructure
	// Nature of reference: Members | Member References | All.
	ClassRefType *ClassRefTypeEnumeration `xml:"classRefType,attr,omitempty" json:"classRefType,omitempty"`
}

// CodespaceRef represents the CodespaceRef element
// Reference to a CODESPACE.
type CodespaceRef struct {
	CodespaceRefStructure
}

// ClassRef represents the ClassRef element
// Reference to a Type of an ENTITY.
type ClassRef struct {
	ClassRefStructure
}

// ClassInFrameRef represents the ClassInFrameRef element
// Class and nature of data inclusion.
type ClassInFrameRef struct {
	ClassInFrameRefStructure
}

// StatusEnumeration represents the StatusEnumeration enumeration
// Indicates whether the ENTITY this annotates is available for use. Use of this attribute allows entities to be retired without deleting the details from the dataset.
type StatusEnumeration string

const (
	// StatusEnumerationActive represents active
	// Entity is active.
	StatusEnumerationActive StatusEnumeration = "active"
	// StatusEnumerationInactive represents inactive
	// Entity is inactive.
	StatusEnumerationInactive StatusEnumeration = "inactive"
	// StatusEnumerationOther represents other
	// Entity is still active but is in the process of being made inactive.
	StatusEnumerationOther StatusEnumeration = "other"
)

// ModificationEnumeration represents the ModificationEnumeration enumeration
// Classification of modification as addition, deletion or revision. Enumerated value.
type ModificationEnumeration string

const (
	// ModificationEnumerationModificationEnumerationNew represents new
	// This is a definition of a new entity.
	ModificationEnumerationModificationEnumerationNew ModificationEnumeration = "new"
	// ModificationEnumerationModificationEnumerationRevise represents revise
	// This is a revision to an existing entity. All values are replaced.
	ModificationEnumerationModificationEnumerationRevise ModificationEnumeration = "revise"
	// ModificationEnumerationModificationEnumerationDelete represents delete
	// This is a deletion of an existing entity.
	ModificationEnumerationModificationEnumerationDelete ModificationEnumeration = "delete"
	// ModificationEnumerationModificationEnumerationUnchanged represents unchanged
	// This is a repeat of the values to an entity that has not change since the previous version. All values are replaced.
	ModificationEnumerationModificationEnumerationUnchanged ModificationEnumeration = "unchanged"
	// ModificationEnumerationModificationEnumerationDelta represents delta
	// This is just the changes to a previous version of an entity. Optional values are only provided if they have changed.
	ModificationEnumerationModificationEnumerationDelta ModificationEnumeration = "delta"
)

// VersionStatusEnumeration represents the VersionStatusEnumeration enumeration
// Allowed values for Statuses of VERSION.
type VersionStatusEnumeration string

const (
	// VersionStatusEnumerationDraft represents draft
	// This version is a draft: it is currently under construction and should not be used for operational purposes.
	VersionStatusEnumerationDraft VersionStatusEnumeration = "draft"
	// VersionStatusEnumerationProposed represents proposed
	// This version is comprehensive but not yet validated.
	VersionStatusEnumerationProposed VersionStatusEnumeration = "proposed"
	// VersionStatusEnumerationVersioned represents versioned
	// This is a finalised version frozen from further modifications.
	VersionStatusEnumerationVersioned VersionStatusEnumeration = "versioned"
	// VersionStatusEnumerationDeprecated represents deprecated
	// This is an old version: it should not be used for operational purposes any more.
	VersionStatusEnumerationDeprecated VersionStatusEnumeration = "deprecated"
	// VersionStatusEnumerationOther represents other
	// Like draft, proposed, and deprecated, this version should not be used for operational purposes (for other reasons, however).
	VersionStatusEnumerationOther VersionStatusEnumeration = "other"
)

// VersionTypeEnumeration represents the VersionTypeEnumeration enumeration
// Allowed values for Types of VERSION.
type VersionTypeEnumeration string

const (
	// VersionTypeEnumerationVersionTypeEnumerationPoint represents point
	VersionTypeEnumerationVersionTypeEnumerationPoint VersionTypeEnumeration = "point"
	// VersionTypeEnumerationVersionTypeEnumerationBaseline represents baseline
	VersionTypeEnumerationVersionTypeEnumerationBaseline VersionTypeEnumeration = "baseline"
)

// SimpleObjectRefStructure represents the SimpleObjectRefStructure element
// Type for a simple object reference.
type SimpleObjectRefStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Identifier of referenced entity.
	Ref string `xml:"ref,attr" json:"ref"`
}

// VersionOfObjectRefStructure represents the VersionOfObjectRefStructure element
// Type for a versioned reference to a NeTEx Object.
type VersionOfObjectRefStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.
	NameOfRefClass *string `xml:"nameOfRefClass,attr,omitempty" json:"nameOfRefClass,omitempty"`
	// Date reference was first created.
	Created *time.Time `xml:"created,attr,omitempty" json:"created,omitempty"`
	// Date reference was last changed.
	Changed *time.Time `xml:"changed,attr,omitempty" json:"changed,omitempty"`
	// Version number of referenced entity.
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
	// Nature of last modification: new, revise, delete, unchanged;
	Modification *ModificationEnumeration `xml:"modification,attr,omitempty" json:"modification,omitempty"`
	// Identifier of referenced entity.
	Ref string `xml:"ref,attr" json:"ref"`
	// Identifier of version of referenced entity. For use when reference is External and a specific version is required. Mutually exclusive with version
	VersionRef *string `xml:"versionRef,attr,omitempty" json:"versionRef,omitempty"`
}

// OrderedVersionOfObjectRefStructure represents the OrderedVersionOfObjectRefStructure element
// Type for a versioned reference to a NeTEx Object.
type OrderedVersionOfObjectRefStructure struct {
	VersionOfObjectRefStructure
	// Order of element.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// VersionRefStructure represents the VersionRefStructure element
// Type for a VERSION reference.
type VersionRefStructure struct {
	VersionOfObjectRefStructure
}

// DataSourceRefStructure represents the DataSourceRefStructure element
// Type for a Reference  to a DATA SOURCE.
type DataSourceRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfVersionRefStructure represents the TypeOfVersionRefStructure element
// Type for a TYPE OF VERSION.
type TypeOfVersionRefStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Name of Class of the referenced entity. Allows reflection. Fixed for each entity type.
	NameOfRefClass *string `xml:"nameOfRefClass,attr,omitempty" json:"nameOfRefClass,omitempty"`
	// Date reference was first created.
	Created *time.Time `xml:"created,attr,omitempty" json:"created,omitempty"`
	// Date reference was last changed.
	Changed *time.Time `xml:"changed,attr,omitempty" json:"changed,omitempty"`
	// Version number of referenced entity.
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
	// Nature of last modification: new, revise, delete, unchanged;
	Modification *ModificationEnumeration `xml:"modification,attr,omitempty" json:"modification,omitempty"`
	// Identifier of referenced entity.
	Ref string `xml:"ref,attr" json:"ref"`
	// Identifier of version of referenced entity. For use when reference is External and a specific version is required. Mutually exclusive with version
	VersionRef *string `xml:"versionRef,attr,omitempty" json:"versionRef,omitempty"`
}

// ExternalObjectRefStructure represents the ExternalObjectRefStructure element
// Type for a reference.to an external object.
type ExternalObjectRefStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Type of reference.
	Type *string `xml:"type,attr,omitempty" json:"type,omitempty"`
	// Reference to an entity in an external system.
	Ref string `xml:"ref,attr" json:"ref"`
}

// SimpleObjectRef represents the SimpleObjectRef element
// Simple unversioned reference to a NeTEx ENTITY.
type SimpleObjectRef struct {
	SimpleObjectRefStructure
}

// VersionOfObjectRef represents the VersionOfObjectRef element
// Reference to a NeTEx Object .  i.e. concrete instance of an ENTITY  may include a version. Implements a one to one relationship by reference.
type VersionOfObjectRef struct {
	VersionOfObjectRefStructure
}

// OrderedVersionOfObjectRef represents the OrderedVersionOfObjectRef element
// Reference to a NeTEx Object i.e. concrete instance of an ENTITY may include a version. Implements a one to one relationship by reference.
type OrderedVersionOfObjectRef struct {
	OrderedVersionOfObjectRefStructure
}

// VersionRef represents the VersionRef element
// Reference to a VERSION.
type VersionRef struct {
	VersionRefStructure
}

// DataSourceRef represents the DataSourceRef element
// Reference  to a DATA SOURCE.
type DataSourceRef struct {
	DataSourceRefStructure
}

// TypeOfVersionRef represents the TypeOfVersionRef element
// Reference to a TYPE OF VERSION. +v1.1
type TypeOfVersionRef struct {
	TypeOfVersionRefStructure
}

// ModificationSetEnumeration represents the ModificationSetEnumeration enumeration
// Classification of modification as addition, deletion, revision or delta only. Enumerated value.
type ModificationSetEnumeration string

const (
	// ModificationSetEnumerationAll represents all
	// This  incldues definitions of  one ore more new entities.
	ModificationSetEnumerationAll ModificationSetEnumeration = "all"
	// ModificationSetEnumerationChangesOnly represents changesOnly
	// This is just the modifications (addition, revision, deletion); entities which are unchanged are omitted.
	ModificationSetEnumerationChangesOnly ModificationSetEnumeration = "changesOnly"
)

// ContainmentEnumeration represents the ContainmentEnumeration enumeration
// Classification of containment.
type ContainmentEnumeration string

const (
	// ContainmentEnumerationInline represents inline
	// This is a definition of a new entity.
	ContainmentEnumerationInline ContainmentEnumeration = "inline"
	// ContainmentEnumerationByReference represents byReference
	// This is a deletion of an existing entity.
	ContainmentEnumerationByReference ContainmentEnumeration = "byReference"
	// ContainmentEnumerationByVersionedReference represents byVersionedReference
	ContainmentEnumerationByVersionedReference ContainmentEnumeration = "byVersionedReference"
	// ContainmentEnumerationBoth represents both
	ContainmentEnumerationBoth ContainmentEnumeration = "both"
)

// ObjectRefsRelStructure represents the objectRefs_RelStructure element
// Type for a list of references to an  NeTEx Object.
type ObjectRefsRelStructure struct {
	OneToManyRelationshipStructure
	TripLegRef []TripLegRef `xml:"TripLegRef,omitempty" json:"TripLegRef,omitempty"`
	IndividualPassengerInfoRef []IndividualPassengerInfoRef `xml:"IndividualPassengerInfoRef,omitempty" json:"IndividualPassengerInfoRef,omitempty"`
	VehiclePoolingDriverInfoRef []VehiclePoolingDriverInfoRef `xml:"VehiclePoolingDriverInfoRef,omitempty" json:"VehiclePoolingDriverInfoRef,omitempty"`
	IndividualTravellerRef []IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	ServiceAccessCodeRef []ServiceAccessCodeRef `xml:"ServiceAccessCodeRef,omitempty" json:"ServiceAccessCodeRef,omitempty"`
	TravelDocumentRef []TravelDocumentRef `xml:"TravelDocumentRef,omitempty" json:"TravelDocumentRef,omitempty"`
	RepeatedTripFareRequestRef []RepeatedTripFareRequestRef `xml:"RepeatedTripFareRequestRef,omitempty" json:"RepeatedTripFareRequestRef,omitempty"`
	SingleTripFareRequestRef []SingleTripFareRequestRef `xml:"SingleTripFareRequestRef,omitempty" json:"SingleTripFareRequestRef,omitempty"`
	FareRequestRef []FareRequestRef `xml:"FareRequestRef,omitempty" json:"FareRequestRef,omitempty"`
	StopFinderRequestRef []StopFinderRequestRef `xml:"StopFinderRequestRef,omitempty" json:"StopFinderRequestRef,omitempty"`
	StopEventRequestRef []StopEventRequestRef `xml:"StopEventRequestRef,omitempty" json:"StopEventRequestRef,omitempty"`
	ScheduleRequestRef []ScheduleRequestRef `xml:"ScheduleRequestRef,omitempty" json:"ScheduleRequestRef,omitempty"`
	TripPlanRequestRef []TripPlanRequestRef `xml:"TripPlanRequestRef,omitempty" json:"TripPlanRequestRef,omitempty"`
	CustomerPaymentMeansRef []CustomerPaymentMeansRef `xml:"CustomerPaymentMeansRef,omitempty" json:"CustomerPaymentMeansRef,omitempty"`
	MediumApplicationInstanceRef []MediumApplicationInstanceRef `xml:"MediumApplicationInstanceRef,omitempty" json:"MediumApplicationInstanceRef,omitempty"`
	MobileDeviceRef []MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef []EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef []SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	ResidentialQualificationEligibilityRef []ResidentialQualificationEligibilityRef `xml:"ResidentialQualificationEligibilityRef,omitempty" json:"ResidentialQualificationEligibilityRef,omitempty"`
	CommercialProfileEligibilityRef []CommercialProfileEligibilityRef `xml:"CommercialProfileEligibilityRef,omitempty" json:"CommercialProfileEligibilityRef,omitempty"`
	UserProfileEligibilityRef []UserProfileEligibilityRef `xml:"UserProfileEligibilityRef,omitempty" json:"UserProfileEligibilityRef,omitempty"`
	CustomerAccountRef []CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	FareContractRef []FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
	CustomerRef []CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	VehicleTypeZoneRestrictionRef []VehicleTypeZoneRestrictionRef `xml:"VehicleTypeZoneRestrictionRef,omitempty" json:"VehicleTypeZoneRestrictionRef,omitempty"`
	StartTimeAtStopPointRef []StartTimeAtStopPointRef `xml:"StartTimeAtStopPointRef,omitempty" json:"StartTimeAtStopPointRef,omitempty"`
	ResidentialQualificationRef []ResidentialQualificationRef `xml:"ResidentialQualificationRef,omitempty" json:"ResidentialQualificationRef,omitempty"`
	TypeOfConcessionRef []TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	TypeOfUsageParameterRef []TypeOfUsageParameterRef `xml:"TypeOfUsageParameterRef,omitempty" json:"TypeOfUsageParameterRef,omitempty"`
	TariffObjectRef []TariffObjectRef `xml:"TariffObjectRef,omitempty" json:"TariffObjectRef,omitempty"`
	ParkingTariffRef []ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef []TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	TypeOfFareTableRef []TypeOfFareTableRef `xml:"TypeOfFareTableRef,omitempty" json:"TypeOfFareTableRef,omitempty"`
	FareTableRowRef []FareTableRowRef `xml:"FareTableRowRef,omitempty" json:"FareTableRowRef,omitempty"`
	FareTableColumnRef []FareTableColumnRef `xml:"FareTableColumnRef,omitempty" json:"FareTableColumnRef,omitempty"`
	TimeUnitRef []TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	GeographicalUnitRef []GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	ControllableElementInSequenceRef []ControllableElementInSequenceRef `xml:"ControllableElementInSequenceRef,omitempty" json:"ControllableElementInSequenceRef,omitempty"`
	FareStructureElementInSequenceRef []FareStructureElementInSequenceRef `xml:"FareStructureElementInSequenceRef,omitempty" json:"FareStructureElementInSequenceRef,omitempty"`
	AccessRightInProductRef []AccessRightInProductRef `xml:"AccessRightInProductRef,omitempty" json:"AccessRightInProductRef,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	CustomerPurchasePackagePriceRef []CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef []ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef []TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef []TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef []QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef []ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef []ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef []GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef []GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef []UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef []SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef []SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef []DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef []FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef []FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef []CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef []FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef []FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CustomerPurchasePackageElementRef []CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
	CustomerPurchasePackageRef []CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	ControllableElementRef []ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	ValidableElementRef []ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	AdditionalDriverOptionRef []AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef []RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef []RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef []SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef []SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef []MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef []InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef []FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef []SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef []UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef []StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef []RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef []RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef []LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef []EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef []EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef []EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef []GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef []CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef []VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef []CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef []UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef []ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef []SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef []PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef []ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef []TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef []ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef []RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef []ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef []ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef []CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef []ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef []BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef []PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
	SeriesConstraintRef []SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	SalesOfferPackageElementRef []SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	SalesOfferPackageRef []SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	DistanceMatrixElementInverseRef []DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
	DistanceMatrixElementRef []DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	FareStructureElementRef []FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	FulfilmentMethodRef []FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	CappingRuleRef []CappingRuleRef `xml:"CappingRuleRef,omitempty" json:"CappingRuleRef,omitempty"`
	EntitlementProductRef []EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef []SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef []PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef []AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef []UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef []ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef []CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef []SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef []FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef []ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	TimeIntervalRef []TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	GeographicalIntervalRef []GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	ParkingChargeBandRef []ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef []TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	FareQuotaFactorRef []FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef []FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef []QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	GeographicalStructureFactorRef []GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	PriceableObjectRef []PriceableObjectRef `xml:"PriceableObjectRef,omitempty" json:"PriceableObjectRef,omitempty"`
	MonthValidityOffsetRef []MonthValidityOffsetRef `xml:"MonthValidityOffsetRef,omitempty" json:"MonthValidityOffsetRef,omitempty"`
	LimitingRuleRef []LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef []DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef []PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	PricingServiceRef []PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	RoundingStepRef []RoundingStepRef `xml:"RoundingStepRef,omitempty" json:"RoundingStepRef,omitempty"`
	RoundingRef []RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	PricingParameterSetRef []PricingParameterSetRef `xml:"PricingParameterSetRef,omitempty" json:"PricingParameterSetRef,omitempty"`
	FlexibleServicePropertiesRef []FlexibleServicePropertiesRef `xml:"FlexibleServicePropertiesRef,omitempty" json:"FlexibleServicePropertiesRef,omitempty"`
	DriverTripTimeRef []DriverTripTimeRef `xml:"DriverTripTimeRef,omitempty" json:"DriverTripTimeRef,omitempty"`
	DriverTripRef []DriverTripRef `xml:"DriverTripRef,omitempty" json:"DriverTripRef,omitempty"`
	DutyPartRef []DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
	AccountableElementRef []AccountableElementRef `xml:"AccountableElementRef,omitempty" json:"AccountableElementRef,omitempty"`
	DutyRef []DutyRef `xml:"DutyRef,omitempty" json:"DutyRef,omitempty"`
	ReliefOpportunityRef []ReliefOpportunityRef `xml:"ReliefOpportunityRef,omitempty" json:"ReliefOpportunityRef,omitempty"`
	CourseOfJourneysRef []CourseOfJourneysRef `xml:"CourseOfJourneysRef,omitempty" json:"CourseOfJourneysRef,omitempty"`
	DriverRef []DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
	VehicleServicePartRef []VehicleServicePartRef `xml:"VehicleServicePartRef,omitempty" json:"VehicleServicePartRef,omitempty"`
	VehicleServiceRef []VehicleServiceRef `xml:"VehicleServiceRef,omitempty" json:"VehicleServiceRef,omitempty"`
	CompoundBlockRef []CompoundBlockRef `xml:"CompoundBlockRef,omitempty" json:"CompoundBlockRef,omitempty"`
	TrainBlockPartRef []TrainBlockPartRef `xml:"TrainBlockPartRef,omitempty" json:"TrainBlockPartRef,omitempty"`
	BlockPartRef []BlockPartRef `xml:"BlockPartRef,omitempty" json:"BlockPartRef,omitempty"`
	TrainBlockRef []TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef []BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	JourneyPartCoupleRef []JourneyPartCoupleRef `xml:"JourneyPartCoupleRef,omitempty" json:"JourneyPartCoupleRef,omitempty"`
	CoupledJourneyRef []CoupledJourneyRef `xml:"CoupledJourneyRef,omitempty" json:"CoupledJourneyRef,omitempty"`
	JourneyPartRef []JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	TimetabledPassingTimeRef []TimetabledPassingTimeRef `xml:"TimetabledPassingTimeRef,omitempty" json:"TimetabledPassingTimeRef,omitempty"`
	EstimatedPassingTimeRef []EstimatedPassingTimeRef `xml:"EstimatedPassingTimeRef,omitempty" json:"EstimatedPassingTimeRef,omitempty"`
	ObservedPassingTimeRef []ObservedPassingTimeRef `xml:"ObservedPassingTimeRef,omitempty" json:"ObservedPassingTimeRef,omitempty"`
	TargetPassingTimeRef []TargetPassingTimeRef `xml:"TargetPassingTimeRef,omitempty" json:"TargetPassingTimeRef,omitempty"`
	PassingTimeRef []PassingTimeRef `xml:"PassingTimeRef,omitempty" json:"PassingTimeRef,omitempty"`
	InterchangeRuleTimingRef []InterchangeRuleTimingRef `xml:"InterchangeRuleTimingRef,omitempty" json:"InterchangeRuleTimingRef,omitempty"`
	InterchangeRuleRef []InterchangeRuleRef `xml:"InterchangeRuleRef,omitempty" json:"InterchangeRuleRef,omitempty"`
	ServiceJourneyPatternInterchangeRef []ServiceJourneyPatternInterchangeRef `xml:"ServiceJourneyPatternInterchangeRef,omitempty" json:"ServiceJourneyPatternInterchangeRef,omitempty"`
	ServiceJourneyInterchangeRef []ServiceJourneyInterchangeRef `xml:"ServiceJourneyInterchangeRef,omitempty" json:"ServiceJourneyInterchangeRef,omitempty"`
	DefaultInterchangeRef []DefaultInterchangeRef `xml:"DefaultInterchangeRef,omitempty" json:"DefaultInterchangeRef,omitempty"`
	InterchangeRef []InterchangeRef `xml:"InterchangeRef,omitempty" json:"InterchangeRef,omitempty"`
	JourneyMeetingRef []JourneyMeetingRef `xml:"JourneyMeetingRef,omitempty" json:"JourneyMeetingRef,omitempty"`
	SupplyContractRef []SupplyContractRef `xml:"SupplyContractRef,omitempty" json:"SupplyContractRef,omitempty"`
	TrainNumberRef []TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	RoutingConstraintZoneRef []RoutingConstraintZoneRef `xml:"RoutingConstraintZoneRef,omitempty" json:"RoutingConstraintZoneRef,omitempty"`
	VehiclePositionAlignmentRef []VehiclePositionAlignmentRef `xml:"VehiclePositionAlignmentRef,omitempty" json:"VehiclePositionAlignmentRef,omitempty"`
	VehicleQuayAlignmentRef []VehicleQuayAlignmentRef `xml:"VehicleQuayAlignmentRef,omitempty" json:"VehicleQuayAlignmentRef,omitempty"`
	LogicalDisplayRef []LogicalDisplayRef `xml:"LogicalDisplayRef,omitempty" json:"LogicalDisplayRef,omitempty"`
	ParkingPropertiesRef []ParkingPropertiesRef `xml:"ParkingPropertiesRef,omitempty" json:"ParkingPropertiesRef,omitempty"`
	ParkingCapacityRef []ParkingCapacityRef `xml:"ParkingCapacityRef,omitempty" json:"ParkingCapacityRef,omitempty"`
	LineNetworkRef []LineNetworkRef `xml:"LineNetworkRef,omitempty" json:"LineNetworkRef,omitempty"`
	RouteInstructionRef []RouteInstructionRef `xml:"RouteInstructionRef,omitempty" json:"RouteInstructionRef,omitempty"`
	FlexiblePointPropertiesRef []FlexiblePointPropertiesRef `xml:"FlexiblePointPropertiesRef,omitempty" json:"FlexiblePointPropertiesRef,omitempty"`
	FlexibleLinkPropertiesRef []FlexibleLinkPropertiesRef `xml:"FlexibleLinkPropertiesRef,omitempty" json:"FlexibleLinkPropertiesRef,omitempty"`
	TimeDemandProfileRef []TimeDemandProfileRef `xml:"TimeDemandProfileRef,omitempty" json:"TimeDemandProfileRef,omitempty"`
	TimeDemandTypeRef []TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	VehicleTypePreferenceRef []VehicleTypePreferenceRef `xml:"VehicleTypePreferenceRef,omitempty" json:"VehicleTypePreferenceRef,omitempty"`
	JourneyPatternHeadwayRef []JourneyPatternHeadwayRef `xml:"JourneyPatternHeadwayRef,omitempty" json:"JourneyPatternHeadwayRef,omitempty"`
	JourneyPatternLayoverRef []JourneyPatternLayoverRef `xml:"JourneyPatternLayoverRef,omitempty" json:"JourneyPatternLayoverRef,omitempty"`
	JourneyPatternRunTimeRef []JourneyPatternRunTimeRef `xml:"JourneyPatternRunTimeRef,omitempty" json:"JourneyPatternRunTimeRef,omitempty"`
	JourneyPatternWaitTimeRef []JourneyPatternWaitTimeRef `xml:"JourneyPatternWaitTimeRef,omitempty" json:"JourneyPatternWaitTimeRef,omitempty"`
	DefaultServiceJourneyTimeRef []DefaultServiceJourneyTimeRef `xml:"DefaultServiceJourneyTimeRef,omitempty" json:"DefaultServiceJourneyTimeRef,omitempty"`
	DefaultDeadRunRunTimeRef []DefaultDeadRunRunTimeRef `xml:"DefaultDeadRunRunTimeRef,omitempty" json:"DefaultDeadRunRunTimeRef,omitempty"`
	TurnaroundTimeLimitTimeRef []TurnaroundTimeLimitTimeRef `xml:"TurnaroundTimeLimitTimeRef,omitempty" json:"TurnaroundTimeLimitTimeRef,omitempty"`
	JourneyTimingRef []JourneyTimingRef `xml:"JourneyTimingRef,omitempty" json:"JourneyTimingRef,omitempty"`
	CrewBaseRef []CrewBaseRef `xml:"CrewBaseRef,omitempty" json:"CrewBaseRef,omitempty"`
	TrainComponentRef []TrainComponentRef `xml:"TrainComponentRef,omitempty" json:"TrainComponentRef,omitempty"`
	TrainElementRef []TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	TrainInCompoundTrainRef []TrainInCompoundTrainRef `xml:"TrainInCompoundTrainRef,omitempty" json:"TrainInCompoundTrainRef,omitempty"`
	PassengerSeatRef []PassengerSeatRef `xml:"PassengerSeatRef,omitempty" json:"PassengerSeatRef,omitempty"`
	TravelDocumentSecurityListingRef []TravelDocumentSecurityListingRef `xml:"TravelDocumentSecurityListingRef,omitempty" json:"TravelDocumentSecurityListingRef,omitempty"`
	MediumAccessDeviceSecurityListingRef []MediumAccessDeviceSecurityListingRef `xml:"MediumAccessDeviceSecurityListingRef,omitempty" json:"MediumAccessDeviceSecurityListingRef,omitempty"`
	RetailDeviceSecurityListingRef []RetailDeviceSecurityListingRef `xml:"RetailDeviceSecurityListingRef,omitempty" json:"RetailDeviceSecurityListingRef,omitempty"`
	CustomerAccountSecurityListingRef []CustomerAccountSecurityListingRef `xml:"CustomerAccountSecurityListingRef,omitempty" json:"CustomerAccountSecurityListingRef,omitempty"`
	FareContractSecurityListingRef []FareContractSecurityListingRef `xml:"FareContractSecurityListingRef,omitempty" json:"FareContractSecurityListingRef,omitempty"`
	CustomerSecurityListingRef []CustomerSecurityListingRef `xml:"CustomerSecurityListingRef,omitempty" json:"CustomerSecurityListingRef,omitempty"`
	WhitelistRef []WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	BlacklistRef []BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
	SchematicMapMemberRef []SchematicMapMemberRef `xml:"SchematicMapMemberRef,omitempty" json:"SchematicMapMemberRef,omitempty"`
	SchematicMapRef []SchematicMapRef `xml:"SchematicMapRef,omitempty" json:"SchematicMapRef,omitempty"`
	CycleModelProfileRef []CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef []CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
	ModeRestrictionAssessmentRef []ModeRestrictionAssessmentRef `xml:"ModeRestrictionAssessmentRef,omitempty" json:"ModeRestrictionAssessmentRef,omitempty"`
	DeliveryVariantRef []DeliveryVariantRef `xml:"DeliveryVariantRef,omitempty" json:"DeliveryVariantRef,omitempty"`
	NoticeRef []NoticeRef `xml:"NoticeRef,omitempty" json:"NoticeRef,omitempty"`
	VehicleProfileRef []VehicleProfileRef `xml:"VehicleProfileRef,omitempty" json:"VehicleProfileRef,omitempty"`
	VehicleEquipmentProfileMemberRef []VehicleEquipmentProfileMemberRef `xml:"VehicleEquipmentProfileMemberRef,omitempty" json:"VehicleEquipmentProfileMemberRef,omitempty"`
	ChargingEquipmentProfileRef []ChargingEquipmentProfileRef `xml:"ChargingEquipmentProfileRef,omitempty" json:"ChargingEquipmentProfileRef,omitempty"`
	VehicleEquipmentProfileRef []VehicleEquipmentProfileRef `xml:"VehicleEquipmentProfileRef,omitempty" json:"VehicleEquipmentProfileRef,omitempty"`
	VehicleModelRef []VehicleModelRef `xml:"VehicleModelRef,omitempty" json:"VehicleModelRef,omitempty"`
	VehicleRef []VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	PassengerCapacityRef []PassengerCapacityRef `xml:"PassengerCapacityRef,omitempty" json:"PassengerCapacityRef,omitempty"`
	FacilityRequirementRef []FacilityRequirementRef `xml:"FacilityRequirementRef,omitempty" json:"FacilityRequirementRef,omitempty"`
	VehicleManoeuvringRequirementRef []VehicleManoeuvringRequirementRef `xml:"VehicleManoeuvringRequirementRef,omitempty" json:"VehicleManoeuvringRequirementRef,omitempty"`
	PassengerCarryingRequirementRef []PassengerCarryingRequirementRef `xml:"PassengerCarryingRequirementRef,omitempty" json:"PassengerCarryingRequirementRef,omitempty"`
	VehicleRequirementRef []VehicleRequirementRef `xml:"VehicleRequirementRef,omitempty" json:"VehicleRequirementRef,omitempty"`
	SimpleVehicleTypeRef []SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef []CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef []TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef []VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef []TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	OnboardStayRef []OnboardStayRef `xml:"OnboardStayRef,omitempty" json:"OnboardStayRef,omitempty"`
	AccommodationRef []AccommodationRef `xml:"AccommodationRef,omitempty" json:"AccommodationRef,omitempty"`
	ServiceFacilitySetRef []ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	SiteFacilitySetRef []SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	FacilitySetRef []FacilitySetRef `xml:"FacilitySetRef,omitempty" json:"FacilitySetRef,omitempty"`
	FacilityRef []FacilityRef `xml:"FacilityRef,omitempty" json:"FacilityRef,omitempty"`
	OperatingDepartmentRef []OperatingDepartmentRef `xml:"OperatingDepartmentRef,omitempty" json:"OperatingDepartmentRef,omitempty"`
	OperationalContextRef []OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	LevelRef []LevelRef `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	ModeRef []ModeRef `xml:"ModeRef,omitempty" json:"ModeRef,omitempty"`
	SubmodeRef []SubmodeRef `xml:"SubmodeRef,omitempty" json:"SubmodeRef,omitempty"`
	OpenTransportModeRef []OpenTransportModeRef `xml:"OpenTransportModeRef,omitempty" json:"OpenTransportModeRef,omitempty"`
	TopographicProjectionRef []TopographicProjectionRef `xml:"TopographicProjectionRef,omitempty" json:"TopographicProjectionRef,omitempty"`
	ComplexFeatureProjectionRef []ComplexFeatureProjectionRef `xml:"ComplexFeatureProjectionRef,omitempty" json:"ComplexFeatureProjectionRef,omitempty"`
	LinkSequenceProjectionRef []LinkSequenceProjectionRef `xml:"LinkSequenceProjectionRef,omitempty" json:"LinkSequenceProjectionRef,omitempty"`
	ZoneProjectionRef []ZoneProjectionRef `xml:"ZoneProjectionRef,omitempty" json:"ZoneProjectionRef,omitempty"`
	LinkProjectionRef []LinkProjectionRef `xml:"LinkProjectionRef,omitempty" json:"LinkProjectionRef,omitempty"`
	PointProjectionRef []PointProjectionRef `xml:"PointProjectionRef,omitempty" json:"PointProjectionRef,omitempty"`
	TripRef []TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef []TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef []SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef []SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef []DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef []DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef []SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef []TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef []ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef []DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef []VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef []ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef []ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef []DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef []JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef []TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef []NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef []RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	LinkSequenceRef []LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
	ContactRef []ContactRef `xml:"ContactRef,omitempty" json:"ContactRef,omitempty"`
	SalesTransactionRef []SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	OfferedTravelSpecificationRef []OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	RequestedTravelSpecificationRef []RequestedTravelSpecificationRef `xml:"RequestedTravelSpecificationRef,omitempty" json:"RequestedTravelSpecificationRef,omitempty"`
	TravelSpecificationRef []TravelSpecificationRef `xml:"TravelSpecificationRef,omitempty" json:"TravelSpecificationRef,omitempty"`
	FareContractEntryRef []FareContractEntryRef `xml:"FareContractEntryRef,omitempty" json:"FareContractEntryRef,omitempty"`
	LogEntryRef []LogEntryRef `xml:"LogEntryRef,omitempty" json:"LogEntryRef,omitempty"`
	AlternativeNameRef []AlternativeNameRef `xml:"AlternativeNameRef,omitempty" json:"AlternativeNameRef,omitempty"`
	TimebandRef []TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	FareDayTypeRef []FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef []DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	DefaultConnectionRef []DefaultConnectionRef `xml:"DefaultConnectionRef,omitempty" json:"DefaultConnectionRef,omitempty"`
	SiteConnectionRef []SiteConnectionRef `xml:"SiteConnectionRef,omitempty" json:"SiteConnectionRef,omitempty"`
	ConnectionRef []ConnectionRef `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	AccessRef []AccessRef `xml:"AccessRef,omitempty" json:"AccessRef,omitempty"`
	HailAndRideAreaRef []HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef []FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef []FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
	FlexibleStopPlaceRef []FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	PathJunctionRef []PathJunctionRef `xml:"PathJunctionRef,omitempty" json:"PathJunctionRef,omitempty"`
	EquipmentPlaceRef []EquipmentPlaceRef `xml:"EquipmentPlaceRef,omitempty" json:"EquipmentPlaceRef,omitempty"`
	EquipmentPositionRef []EquipmentPositionRef `xml:"EquipmentPositionRef,omitempty" json:"EquipmentPositionRef,omitempty"`
	TopographicPlaceRef []TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	VehiclePoolingMeetingPlaceRef []VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef []VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	GarageRef []GarageRef `xml:"GarageRef,omitempty" json:"GarageRef,omitempty"`
	VehicleStoppingPositionRef []VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef []VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef []BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef []AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef []TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef []QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef []StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef []VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef []MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef []VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef []ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef []VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef []VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef []TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef []ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef []PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef []StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef []StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef []ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef []ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef []ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef []PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef []PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef []EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef []SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef []TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef []StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef []ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef []PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef []ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef []SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef []SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	AddressablePlaceRef []AddressablePlaceRef `xml:"AddressablePlaceRef,omitempty" json:"AddressablePlaceRef,omitempty"`
	PostalAddressRef []PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef []RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef []AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
	OnwardVehicleMeetingLinkRef []OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef []VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef []ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef []LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef []TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef []WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef []RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef []RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef []ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef []PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef []RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	VehicleMeetingPointRef []VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef []WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef []RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef []RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef []TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef []BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef []ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef []BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef []FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef []ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef []GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef []ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef []ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef []TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef []RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef []PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	UicOperatingPeriodRef []UicOperatingPeriodRef `xml:"UicOperatingPeriodRef,omitempty" json:"UicOperatingPeriodRef,omitempty"`
	OperatingPeriodRef []OperatingPeriodRef `xml:"OperatingPeriodRef,omitempty" json:"OperatingPeriodRef,omitempty"`
	OperatingDayRef []OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	ServiceCalendarRef []ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	AlternativeTextRef []AlternativeTextRef `xml:"AlternativeTextRef,omitempty" json:"AlternativeTextRef,omitempty"`
	AvailabilityConditionRef []AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	ValidityRuleParameterRef []ValidityRuleParameterRef `xml:"ValidityRuleParameterRef,omitempty" json:"ValidityRuleParameterRef,omitempty"`
	ValidityTriggerRef []ValidityTriggerRef `xml:"ValidityTriggerRef,omitempty" json:"ValidityTriggerRef,omitempty"`
	ValidityConditionRef []ValidityConditionRef `xml:"ValidityConditionRef,omitempty" json:"ValidityConditionRef,omitempty"`
	ResponsibilityRoleRef []ResponsibilityRoleRef `xml:"ResponsibilityRoleRef,omitempty" json:"ResponsibilityRoleRef,omitempty"`
	ControlCentreRef []ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	OrganisationalUnitRef []OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	DepartmentRef []DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
	OrganisationPartRef []OrganisationPartRef `xml:"OrganisationPartRef,omitempty" json:"OrganisationPartRef,omitempty"`
	AllAuthoritiesRef []AllAuthoritiesRef `xml:"AllAuthoritiesRef,omitempty" json:"AllAuthoritiesRef,omitempty"`
	AllOperatorsRef []AllOperatorsRef `xml:"AllOperatorsRef,omitempty" json:"AllOperatorsRef,omitempty"`
	AllPublicTransportOrganisationsRef []AllPublicTransportOrganisationsRef `xml:"AllPublicTransportOrganisationsRef,omitempty" json:"AllPublicTransportOrganisationsRef,omitempty"`
	AllTransportOrganisationsRef []AllTransportOrganisationsRef `xml:"AllTransportOrganisationsRef,omitempty" json:"AllTransportOrganisationsRef,omitempty"`
	AllOrganisationsRef []AllOrganisationsRef `xml:"AllOrganisationsRef,omitempty" json:"AllOrganisationsRef,omitempty"`
	RetailConsortiumRef []RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef []OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef []GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef []ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef []ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef []TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef []OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef []AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef []OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef []OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	ResponsibilitySetRef []ResponsibilitySetRef `xml:"ResponsibilitySetRef,omitempty" json:"ResponsibilitySetRef,omitempty"`
	DestinationDisplayVariantRef []DestinationDisplayVariantRef `xml:"DestinationDisplayVariantRef,omitempty" json:"DestinationDisplayVariantRef,omitempty"`
	DestinationDisplayRef []DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	AllowedLineDirectionRef []AllowedLineDirectionRef `xml:"AllowedLineDirectionRef,omitempty" json:"AllowedLineDirectionRef,omitempty"`
	FlexibleLineRef []FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef []LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	GroupOfCustomerPurchasePackagesRef []GroupOfCustomerPurchasePackagesRef `xml:"GroupOfCustomerPurchasePackagesRef,omitempty" json:"GroupOfCustomerPurchasePackagesRef,omitempty"`
	PoolOfVehiclesRef []PoolOfVehiclesRef `xml:"PoolOfVehiclesRef,omitempty" json:"PoolOfVehiclesRef,omitempty"`
	GroupOfSalesOfferPackagesRef []GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
	GroupOfDistanceMatrixElementsRef []GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfDistributionChannelsRef []GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	GroupOfSingleJourneysRef []GroupOfSingleJourneysRef `xml:"GroupOfSingleJourneysRef,omitempty" json:"GroupOfSingleJourneysRef,omitempty"`
	StandardFareTableRef []StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef []FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	PriceGroupRef []PriceGroupRef `xml:"PriceGroupRef,omitempty" json:"PriceGroupRef,omitempty"`
	RhythmicalJourneyGroupRef []RhythmicalJourneyGroupRef `xml:"RhythmicalJourneyGroupRef,omitempty" json:"RhythmicalJourneyGroupRef,omitempty"`
	HeadwayJourneyGroupRef []HeadwayJourneyGroupRef `xml:"HeadwayJourneyGroupRef,omitempty" json:"HeadwayJourneyGroupRef,omitempty"`
	JourneyFrequencyGroupRef []JourneyFrequencyGroupRef `xml:"JourneyFrequencyGroupRef,omitempty" json:"JourneyFrequencyGroupRef,omitempty"`
	GroupOfServicesRef []GroupOfServicesRef `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	GroupOfStopPlacesRef []GroupOfStopPlacesRef `xml:"GroupOfStopPlacesRef,omitempty" json:"GroupOfStopPlacesRef,omitempty"`
	PointOfInterestHierarchyRef []PointOfInterestHierarchyRef `xml:"PointOfInterestHierarchyRef,omitempty" json:"PointOfInterestHierarchyRef,omitempty"`
	GroupOfTimingLinksRef []GroupOfTimingLinksRef `xml:"GroupOfTimingLinksRef,omitempty" json:"GroupOfTimingLinksRef,omitempty"`
	FleetRef []FleetRef `xml:"FleetRef,omitempty" json:"FleetRef,omitempty"`
	GroupOfOperatorsRef []GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	GroupOfPlacesRef []GroupOfPlacesRef `xml:"GroupOfPlacesRef,omitempty" json:"GroupOfPlacesRef,omitempty"`
	ParentSectionRef []ParentSectionRef `xml:"ParentSectionRef,omitempty" json:"ParentSectionRef,omitempty"`
	ParentCommonSectionRef []ParentCommonSectionRef `xml:"ParentCommonSectionRef,omitempty" json:"ParentCommonSectionRef,omitempty"`
	CommonSectionRef []CommonSectionRef `xml:"CommonSectionRef,omitempty" json:"CommonSectionRef,omitempty"`
	LineSectionRef []LineSectionRef `xml:"LineSectionRef,omitempty" json:"LineSectionRef,omitempty"`
	FareSectionRef []FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	GeneralSectionRef []GeneralSectionRef `xml:"GeneralSectionRef,omitempty" json:"GeneralSectionRef,omitempty"`
	SectionRef []SectionRef `xml:"SectionRef,omitempty" json:"SectionRef,omitempty"`
	GroupOfTariffZonesRef []GroupOfTariffZonesRef `xml:"GroupOfTariffZonesRef,omitempty" json:"GroupOfTariffZonesRef,omitempty"`
	LogRef []LogRef `xml:"LogRef,omitempty" json:"LogRef,omitempty"`
	GroupOfTimebandsRef []GroupOfTimebandsRef `xml:"GroupOfTimebandsRef,omitempty" json:"GroupOfTimebandsRef,omitempty"`
	PlaceRef []PlaceRef `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
	MobilityServiceConstraintZoneRef []MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef []StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef []TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef []AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef []AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef []FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef []TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef []ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
	LayerRef []LayerRef `xml:"LayerRef,omitempty" json:"LayerRef,omitempty"`
	NetworkRef []NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef []GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	GeneralGroupOfEntitiesRef []GeneralGroupOfEntitiesRef `xml:"GeneralGroupOfEntitiesRef,omitempty" json:"GeneralGroupOfEntitiesRef,omitempty"`
	MobilityJourneyFrameRef []MobilityJourneyFrameRef `xml:"MobilityJourneyFrameRef,omitempty" json:"MobilityJourneyFrameRef,omitempty"`
	MobilityServiceFrameRef []MobilityServiceFrameRef `xml:"MobilityServiceFrameRef,omitempty" json:"MobilityServiceFrameRef,omitempty"`
	SalesTransactionFrameRef []SalesTransactionFrameRef `xml:"SalesTransactionFrameRef,omitempty" json:"SalesTransactionFrameRef,omitempty"`
	FareFrameRef []FareFrameRef `xml:"FareFrameRef,omitempty" json:"FareFrameRef,omitempty"`
	ServiceFrameRef []ServiceFrameRef `xml:"ServiceFrameRef,omitempty" json:"ServiceFrameRef,omitempty"`
	DriverScheduleFrameRef []DriverScheduleFrameRef `xml:"DriverScheduleFrameRef,omitempty" json:"DriverScheduleFrameRef,omitempty"`
	VehicleScheduleFrameRef []VehicleScheduleFrameRef `xml:"VehicleScheduleFrameRef,omitempty" json:"VehicleScheduleFrameRef,omitempty"`
	TimetableFrameRef []TimetableFrameRef `xml:"TimetableFrameRef,omitempty" json:"TimetableFrameRef,omitempty"`
	SiteFrameRef []SiteFrameRef `xml:"SiteFrameRef,omitempty" json:"SiteFrameRef,omitempty"`
	InfrastructureFrameRef []InfrastructureFrameRef `xml:"InfrastructureFrameRef,omitempty" json:"InfrastructureFrameRef,omitempty"`
	GeneralFrameRef []GeneralFrameRef `xml:"GeneralFrameRef,omitempty" json:"GeneralFrameRef,omitempty"`
	ResourceFrameRef []ResourceFrameRef `xml:"ResourceFrameRef,omitempty" json:"ResourceFrameRef,omitempty"`
	ServiceCalendarFrameRef []ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	CompositeFrameRef []CompositeFrameRef `xml:"CompositeFrameRef,omitempty" json:"CompositeFrameRef,omitempty"`
	ParkingBayConditionRef []ParkingBayConditionRef `xml:"ParkingBayConditionRef,omitempty" json:"ParkingBayConditionRef,omitempty"`
	RentalAvailabilityRef []RentalAvailabilityRef `xml:"RentalAvailabilityRef,omitempty" json:"RentalAvailabilityRef,omitempty"`
	ParkingBayStatusRef []ParkingBayStatusRef `xml:"ParkingBayStatusRef,omitempty" json:"ParkingBayStatusRef,omitempty"`
	TypeOfMediumAccessDeviceRef []TypeOfMediumAccessDeviceRef `xml:"TypeOfMediumAccessDeviceRef,omitempty" json:"TypeOfMediumAccessDeviceRef,omitempty"`
	TypeOfProofRef []TypeOfProofRef `xml:"TypeOfProofRef,omitempty" json:"TypeOfProofRef,omitempty"`
	DistributionChannelRef []DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	ChargingMomentRef []ChargingMomentRef `xml:"ChargingMomentRef,omitempty" json:"ChargingMomentRef,omitempty"`
	PriceUnitRef []PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	PurposeOfJourneyPartitionRef []PurposeOfJourneyPartitionRef `xml:"PurposeOfJourneyPartitionRef,omitempty" json:"PurposeOfJourneyPartitionRef,omitempty"`
	TimingAlgorithmTypeRef []TimingAlgorithmTypeRef `xml:"TimingAlgorithmTypeRef,omitempty" json:"TimingAlgorithmTypeRef,omitempty"`
	TypeOfParkingRef []TypeOfParkingRef `xml:"TypeOfParkingRef,omitempty" json:"TypeOfParkingRef,omitempty"`
	PointOfInterestClassificationRef []PointOfInterestClassificationRef `xml:"PointOfInterestClassificationRef,omitempty" json:"PointOfInterestClassificationRef,omitempty"`
	TypeOfActivationRef []TypeOfActivationRef `xml:"TypeOfActivationRef,omitempty" json:"TypeOfActivationRef,omitempty"`
	TypeOfFleetRef []TypeOfFleetRef `xml:"TypeOfFleetRef,omitempty" json:"TypeOfFleetRef,omitempty"`
	DirectionRef []DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	TypeOfDriverPermitRef []TypeOfDriverPermitRef `xml:"TypeOfDriverPermitRef,omitempty" json:"TypeOfDriverPermitRef,omitempty"`
	AcceptedDriverPermitRef []AcceptedDriverPermitRef `xml:"AcceptedDriverPermitRef,omitempty" json:"AcceptedDriverPermitRef,omitempty"`
	PurposeOfEquipmentProfileRef []PurposeOfEquipmentProfileRef `xml:"PurposeOfEquipmentProfileRef,omitempty" json:"PurposeOfEquipmentProfileRef,omitempty"`
	TypeOfProductCategoryRef []TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfPaymentMethodRef []TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	ClassOfUseRef []ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	TypeOfOperationRef []TypeOfOperationRef `xml:"TypeOfOperationRef,omitempty" json:"TypeOfOperationRef,omitempty"`
	TypeOfCodespaceAssignmentRef []TypeOfCodespaceAssignmentRef `xml:"TypeOfCodespaceAssignmentRef,omitempty" json:"TypeOfCodespaceAssignmentRef,omitempty"`
	BrandingRef []BrandingRef `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	TypeOfResponsibilityRoleRef []TypeOfResponsibilityRoleRef `xml:"TypeOfResponsibilityRoleRef,omitempty" json:"TypeOfResponsibilityRoleRef,omitempty"`
	PurposeOfGroupingRef []PurposeOfGroupingRef `xml:"PurposeOfGroupingRef,omitempty" json:"PurposeOfGroupingRef,omitempty"`
	TypeOfRetailDeviceRef []TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef,omitempty" json:"TypeOfRetailDeviceRef,omitempty"`
	CustomerAccountStatusRef []CustomerAccountStatusRef `xml:"CustomerAccountStatusRef,omitempty" json:"CustomerAccountStatusRef,omitempty"`
	TypeOfCustomerAccountRef []TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef,omitempty" json:"TypeOfCustomerAccountRef,omitempty"`
	TypeOfFareContractEntryRef []TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef,omitempty" json:"TypeOfFareContractEntryRef,omitempty"`
	TypeOfFareContractRef []TypeOfFareContractRef `xml:"TypeOfFareContractRef,omitempty" json:"TypeOfFareContractRef,omitempty"`
	TypeOfAccessRightAssignmentRef []TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef,omitempty" json:"TypeOfAccessRightAssignmentRef,omitempty"`
	TypeOfSalesOfferPackageRef []TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	TypeOfFareStructureElementRef []TypeOfFareStructureElementRef `xml:"TypeOfFareStructureElementRef,omitempty" json:"TypeOfFareStructureElementRef,omitempty"`
	TypeOfTariffRef []TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	AllDistributionChannelsRef []AllDistributionChannelsRef `xml:"AllDistributionChannelsRef,omitempty" json:"AllDistributionChannelsRef,omitempty"`
	TypeOfMachineReadabilityRef []TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef,omitempty" json:"TypeOfMachineReadabilityRef,omitempty"`
	TypeOfTravelDocumentRef []TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	TypeOfMobilityServiceRef []TypeOfMobilityServiceRef `xml:"TypeOfMobilityServiceRef,omitempty" json:"TypeOfMobilityServiceRef,omitempty"`
	TypeOfFareProductRef []TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	TypeOfFareStructureFactorRef []TypeOfFareStructureFactorRef `xml:"TypeOfFareStructureFactorRef,omitempty" json:"TypeOfFareStructureFactorRef,omitempty"`
	TypeOfPricingRuleRef []TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef,omitempty" json:"TypeOfPricingRuleRef,omitempty"`
	TypeOfFlexibleServiceRef []TypeOfFlexibleServiceRef `xml:"TypeOfFlexibleServiceRef,omitempty" json:"TypeOfFlexibleServiceRef,omitempty"`
	TypeOfPassengerInformationEquipmentRef []TypeOfPassengerInformationEquipmentRef `xml:"TypeOfPassengerInformationEquipmentRef,omitempty" json:"TypeOfPassengerInformationEquipmentRef,omitempty"`
	TypeOfTimeDemandTypeRef []TypeOfTimeDemandTypeRef `xml:"TypeOfTimeDemandTypeRef,omitempty" json:"TypeOfTimeDemandTypeRef,omitempty"`
	TypeOfJourneyPatternRef []TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	TypeOfSecurityListRef []TypeOfSecurityListRef `xml:"TypeOfSecurityListRef,omitempty" json:"TypeOfSecurityListRef,omitempty"`
	TypeOfPlugRef []TypeOfPlugRef `xml:"TypeOfPlugRef,omitempty" json:"TypeOfPlugRef,omitempty"`
	TypeOfBatteryChemistryRef []TypeOfBatteryChemistryRef `xml:"TypeOfBatteryChemistryRef,omitempty" json:"TypeOfBatteryChemistryRef,omitempty"`
	TypeOfServiceFeatureRef []TypeOfServiceFeatureRef `xml:"TypeOfServiceFeatureRef,omitempty" json:"TypeOfServiceFeatureRef,omitempty"`
	TypeOfDeliveryVariantRef []TypeOfDeliveryVariantRef `xml:"TypeOfDeliveryVariantRef,omitempty" json:"TypeOfDeliveryVariantRef,omitempty"`
	TypeOfNoticeRef []TypeOfNoticeRef `xml:"TypeOfNoticeRef,omitempty" json:"TypeOfNoticeRef,omitempty"`
	TypeOfCongestionRef []TypeOfCongestionRef `xml:"TypeOfCongestionRef,omitempty" json:"TypeOfCongestionRef,omitempty"`
	TypeOfServiceRef []TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	TypeOfFacilityRef []TypeOfFacilityRef `xml:"TypeOfFacilityRef,omitempty" json:"TypeOfFacilityRef,omitempty"`
	TypeOfModeOfOperationRef []TypeOfModeOfOperationRef `xml:"TypeOfModeOfOperationRef,omitempty" json:"TypeOfModeOfOperationRef,omitempty"`
	PersonalModeOfOperationRef []PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef []VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef []VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef []VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef []FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef []ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	TypeOfEquipmentRef []TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	TypeOfProjectionRef []TypeOfProjectionRef `xml:"TypeOfProjectionRef,omitempty" json:"TypeOfProjectionRef,omitempty"`
	TypeOfFeatureRef []TypeOfFeatureRef `xml:"TypeOfFeatureRef,omitempty" json:"TypeOfFeatureRef,omitempty"`
	TypeOfLinkSequenceRef []TypeOfLinkSequenceRef `xml:"TypeOfLinkSequenceRef,omitempty" json:"TypeOfLinkSequenceRef,omitempty"`
	TypeOfOrganisationPartRef []TypeOfOrganisationPartRef `xml:"TypeOfOrganisationPartRef,omitempty" json:"TypeOfOrganisationPartRef,omitempty"`
	TypeOfOrganisationRef []TypeOfOrganisationRef `xml:"TypeOfOrganisationRef,omitempty" json:"TypeOfOrganisationRef,omitempty"`
	TypeOfPlaceRef []TypeOfPlaceRef `xml:"TypeOfPlaceRef,omitempty" json:"TypeOfPlaceRef,omitempty"`
	TypeOfTransferRef []TypeOfTransferRef `xml:"TypeOfTransferRef,omitempty" json:"TypeOfTransferRef,omitempty"`
	TypeOfZoneRef []TypeOfZoneRef `xml:"TypeOfZoneRef,omitempty" json:"TypeOfZoneRef,omitempty"`
	TypeOfLinkRef []TypeOfLinkRef `xml:"TypeOfLinkRef,omitempty" json:"TypeOfLinkRef,omitempty"`
	TypeOfPointRef []TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
	TypeOfLineRef []TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
	TypeOfValidityRef []TypeOfValidityRef `xml:"TypeOfValidityRef,omitempty" json:"TypeOfValidityRef,omitempty"`
	TypeOfFrameRef []TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	DataSourceRef []DataSourceRef `xml:"DataSourceRef,omitempty" json:"DataSourceRef,omitempty"`
	VersionRef []VersionRef `xml:"VersionRef,omitempty" json:"VersionRef,omitempty"`
	VersionOfObjectRef []VersionOfObjectRef `xml:"VersionOfObjectRef,omitempty" json:"VersionOfObjectRef,omitempty"`
}

// TypeOfValueRefStructure represents the TypeOfValueRefStructure element
// Type for a reference to a TYPE OF VALUE.
type TypeOfValueRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfEntityRefsRelStructure represents the typeOfEntityRefs_RelStructure element
// Type for a list of references to a TYPE OF VALUE
type TypeOfEntityRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfRetailDeviceRef []TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef,omitempty" json:"TypeOfRetailDeviceRef,omitempty"`
	CustomerAccountStatusRef []CustomerAccountStatusRef `xml:"CustomerAccountStatusRef,omitempty" json:"CustomerAccountStatusRef,omitempty"`
	TypeOfCustomerAccountRef []TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef,omitempty" json:"TypeOfCustomerAccountRef,omitempty"`
	TypeOfFareContractEntryRef []TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef,omitempty" json:"TypeOfFareContractEntryRef,omitempty"`
	TypeOfFareContractRef []TypeOfFareContractRef `xml:"TypeOfFareContractRef,omitempty" json:"TypeOfFareContractRef,omitempty"`
	TypeOfAccessRightAssignmentRef []TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef,omitempty" json:"TypeOfAccessRightAssignmentRef,omitempty"`
	TypeOfSalesOfferPackageRef []TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	TypeOfFareStructureElementRef []TypeOfFareStructureElementRef `xml:"TypeOfFareStructureElementRef,omitempty" json:"TypeOfFareStructureElementRef,omitempty"`
	TypeOfTariffRef []TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	AllDistributionChannelsRef []AllDistributionChannelsRef `xml:"AllDistributionChannelsRef,omitempty" json:"AllDistributionChannelsRef,omitempty"`
	TypeOfMachineReadabilityRef []TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef,omitempty" json:"TypeOfMachineReadabilityRef,omitempty"`
	TypeOfTravelDocumentRef []TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	TypeOfMobilityServiceRef []TypeOfMobilityServiceRef `xml:"TypeOfMobilityServiceRef,omitempty" json:"TypeOfMobilityServiceRef,omitempty"`
	TypeOfFareProductRef []TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	TypeOfFareStructureFactorRef []TypeOfFareStructureFactorRef `xml:"TypeOfFareStructureFactorRef,omitempty" json:"TypeOfFareStructureFactorRef,omitempty"`
	TypeOfPricingRuleRef []TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef,omitempty" json:"TypeOfPricingRuleRef,omitempty"`
	TypeOfFlexibleServiceRef []TypeOfFlexibleServiceRef `xml:"TypeOfFlexibleServiceRef,omitempty" json:"TypeOfFlexibleServiceRef,omitempty"`
	TypeOfPassengerInformationEquipmentRef []TypeOfPassengerInformationEquipmentRef `xml:"TypeOfPassengerInformationEquipmentRef,omitempty" json:"TypeOfPassengerInformationEquipmentRef,omitempty"`
	TypeOfTimeDemandTypeRef []TypeOfTimeDemandTypeRef `xml:"TypeOfTimeDemandTypeRef,omitempty" json:"TypeOfTimeDemandTypeRef,omitempty"`
	TypeOfJourneyPatternRef []TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	TypeOfSecurityListRef []TypeOfSecurityListRef `xml:"TypeOfSecurityListRef,omitempty" json:"TypeOfSecurityListRef,omitempty"`
	TypeOfPlugRef []TypeOfPlugRef `xml:"TypeOfPlugRef,omitempty" json:"TypeOfPlugRef,omitempty"`
	TypeOfBatteryChemistryRef []TypeOfBatteryChemistryRef `xml:"TypeOfBatteryChemistryRef,omitempty" json:"TypeOfBatteryChemistryRef,omitempty"`
	TypeOfServiceFeatureRef []TypeOfServiceFeatureRef `xml:"TypeOfServiceFeatureRef,omitempty" json:"TypeOfServiceFeatureRef,omitempty"`
	TypeOfDeliveryVariantRef []TypeOfDeliveryVariantRef `xml:"TypeOfDeliveryVariantRef,omitempty" json:"TypeOfDeliveryVariantRef,omitempty"`
	TypeOfNoticeRef []TypeOfNoticeRef `xml:"TypeOfNoticeRef,omitempty" json:"TypeOfNoticeRef,omitempty"`
	TypeOfCongestionRef []TypeOfCongestionRef `xml:"TypeOfCongestionRef,omitempty" json:"TypeOfCongestionRef,omitempty"`
	TypeOfServiceRef []TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	TypeOfFacilityRef []TypeOfFacilityRef `xml:"TypeOfFacilityRef,omitempty" json:"TypeOfFacilityRef,omitempty"`
	TypeOfModeOfOperationRef []TypeOfModeOfOperationRef `xml:"TypeOfModeOfOperationRef,omitempty" json:"TypeOfModeOfOperationRef,omitempty"`
	PersonalModeOfOperationRef []PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef []VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef []VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef []VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef []FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef []ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	TypeOfEquipmentRef []TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	TypeOfProjectionRef []TypeOfProjectionRef `xml:"TypeOfProjectionRef,omitempty" json:"TypeOfProjectionRef,omitempty"`
	TypeOfFeatureRef []TypeOfFeatureRef `xml:"TypeOfFeatureRef,omitempty" json:"TypeOfFeatureRef,omitempty"`
	TypeOfLinkSequenceRef []TypeOfLinkSequenceRef `xml:"TypeOfLinkSequenceRef,omitempty" json:"TypeOfLinkSequenceRef,omitempty"`
	TypeOfOrganisationPartRef []TypeOfOrganisationPartRef `xml:"TypeOfOrganisationPartRef,omitempty" json:"TypeOfOrganisationPartRef,omitempty"`
	TypeOfOrganisationRef []TypeOfOrganisationRef `xml:"TypeOfOrganisationRef,omitempty" json:"TypeOfOrganisationRef,omitempty"`
	TypeOfPlaceRef []TypeOfPlaceRef `xml:"TypeOfPlaceRef,omitempty" json:"TypeOfPlaceRef,omitempty"`
	TypeOfTransferRef []TypeOfTransferRef `xml:"TypeOfTransferRef,omitempty" json:"TypeOfTransferRef,omitempty"`
	TypeOfZoneRef []TypeOfZoneRef `xml:"TypeOfZoneRef,omitempty" json:"TypeOfZoneRef,omitempty"`
	TypeOfLinkRef []TypeOfLinkRef `xml:"TypeOfLinkRef,omitempty" json:"TypeOfLinkRef,omitempty"`
	TypeOfPointRef []TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
	TypeOfLineRef []TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
	TypeOfValidityRef []TypeOfValidityRef `xml:"TypeOfValidityRef,omitempty" json:"TypeOfValidityRef,omitempty"`
	TypeOfFrameRef []TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
}

// RelationshipRefStructure represents the RelationshipRefStructure element
// Type for a reference to a Relationship.
type RelationshipRefStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Name of referenced Class.
	NameOfClass string `xml:"nameOfClass,attr" json:"nameOfClass"`
}

// RelationshipStructure represents the relationshipStructure element
// Abstract Type for a serialisation of a NeTEx relationship.
type RelationshipStructure struct {
	// Identifier of the relationship.
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
}

// OneToManyRelationshipStructure represents the oneToManyRelationshipStructure element
// Type for an Implementation of a one to many relationship . A one to many relationship from the source (one) to the target (many)
type OneToManyRelationshipStructure struct {
	RelationshipStructure
	// Whether this is a list of all (revise) or just changes.
	ModificationSet *ModificationSetEnumeration `xml:"modificationSet,attr,omitempty" json:"modificationSet,omitempty"`
}

// ContainmentAggregationStructure represents the containmentAggregationStructure element
// Type for an Implementation of an aggregate  relationship by reference or value, where the contained element or reference  is included in the XML as  a child of the parent.
type ContainmentAggregationStructure struct {
	RelationshipStructure
	// Whether this is a list of all (revise) or just changes.
	ModificationSet *ModificationSetEnumeration `xml:"modificationSet,attr,omitempty" json:"modificationSet,omitempty"`
}

// StrictContainmentAggregationStructure represents the strictContainmentAggregationStructure element
// Type for an Implementation of a strict aggregate  relationship by value, where the contained element is a child of the parent. A one to many relationship from the source, the containing parent, to the child instance.
type StrictContainmentAggregationStructure struct {
	RelationshipStructure
}

// FrameContainmentStructure represents the frameContainmentStructure element
// Type for an implementation of a frame containment relationship  (ENTITY IN FRAME IN VERSION) A one to many relationship from the containing parent (one) to the contained child (many)
type FrameContainmentStructure struct {
	RelationshipStructure
}

// ClassRefsRelStructure represents the classRefs_RelStructure element
// Type for a list of Classes.
type ClassRefsRelStructure struct {
	OneToManyRelationshipStructure
	ClassInFrameRef []ClassInFrameRef `xml:"ClassInFrameRef,omitempty" json:"ClassInFrameRef,omitempty"`
	ClassRef []ClassRef `xml:"ClassRef,omitempty" json:"ClassRef,omitempty"`
}

// ClassInFrameRefsRelStructure represents the ClassInFrameRefs_RelStructure element
// Type for a list of Class Filter references.
type ClassInFrameRefsRelStructure struct {
	OneToManyRelationshipStructure
	ClassInFrameRef []ClassInFrameRef `xml:"ClassInFrameRef" json:"ClassInFrameRef"`
}

// TypeOfValueRef represents the TypeOfValueRef element
// Reference to a TYPE OF VALUE. Implementation of a one to one relationship by reference to  TYPE OF VALUE.
type TypeOfValueRef struct {
	TypeOfValueRefStructure
}

// TypeOfEntityRef represents the TypeOfEntityRef element
// Reference to a TYPE OF ENTITY.
type TypeOfEntityRef struct {
	TypeOfValueRefStructure
}

// RelationshipRef represents the RelationshipRef element
// Reference to a Relationship.
type RelationshipRef struct {
	RelationshipRefStructure
}

// FrameNatureEnumeration represents the FrameNatureEnumeration enumeration
// Allowed values for Nature of data  in frame.
type FrameNatureEnumeration string

const (
	// FrameNatureEnumerationPlanned represents planned
	FrameNatureEnumerationPlanned FrameNatureEnumeration = "planned"
	// FrameNatureEnumerationOperational represents operational
	FrameNatureEnumerationOperational FrameNatureEnumeration = "operational"
	// FrameNatureEnumerationContingencyPlan represents contingencyPlan
	FrameNatureEnumerationContingencyPlan FrameNatureEnumeration = "contingencyPlan"
	// FrameNatureEnumerationOther represents other
	FrameNatureEnumerationOther FrameNatureEnumeration = "other"
)

// VersionFrameRefStructure represents the VersionFrameRefStructure element
// Type for a reference to a  VERSION FRAME.
type VersionFrameRefStructure struct {
	VersionOfObjectRefStructure
}

// VersionFrameRefsRelStructure represents the versionFrameRefs_RelStructure element
// Type for a list of references to a VERSION FRAME.
type VersionFrameRefsRelStructure struct {
	OneToManyRelationshipStructure
	MobilityJourneyFrameRef []MobilityJourneyFrameRef `xml:"MobilityJourneyFrameRef,omitempty" json:"MobilityJourneyFrameRef,omitempty"`
	MobilityServiceFrameRef []MobilityServiceFrameRef `xml:"MobilityServiceFrameRef,omitempty" json:"MobilityServiceFrameRef,omitempty"`
	SalesTransactionFrameRef []SalesTransactionFrameRef `xml:"SalesTransactionFrameRef,omitempty" json:"SalesTransactionFrameRef,omitempty"`
	FareFrameRef []FareFrameRef `xml:"FareFrameRef,omitempty" json:"FareFrameRef,omitempty"`
	ServiceFrameRef []ServiceFrameRef `xml:"ServiceFrameRef,omitempty" json:"ServiceFrameRef,omitempty"`
	DriverScheduleFrameRef []DriverScheduleFrameRef `xml:"DriverScheduleFrameRef,omitempty" json:"DriverScheduleFrameRef,omitempty"`
	VehicleScheduleFrameRef []VehicleScheduleFrameRef `xml:"VehicleScheduleFrameRef,omitempty" json:"VehicleScheduleFrameRef,omitempty"`
	TimetableFrameRef []TimetableFrameRef `xml:"TimetableFrameRef,omitempty" json:"TimetableFrameRef,omitempty"`
	SiteFrameRef []SiteFrameRef `xml:"SiteFrameRef,omitempty" json:"SiteFrameRef,omitempty"`
	InfrastructureFrameRef []InfrastructureFrameRef `xml:"InfrastructureFrameRef,omitempty" json:"InfrastructureFrameRef,omitempty"`
	GeneralFrameRef []GeneralFrameRef `xml:"GeneralFrameRef,omitempty" json:"GeneralFrameRef,omitempty"`
	ResourceFrameRef []ResourceFrameRef `xml:"ResourceFrameRef,omitempty" json:"ResourceFrameRef,omitempty"`
	ServiceCalendarFrameRef []ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	CompositeFrameRef []CompositeFrameRef `xml:"CompositeFrameRef,omitempty" json:"CompositeFrameRef,omitempty"`
}

// EntityInVersionInFrameRefStructure represents the EntityInVersionInFrameRefStructure element
// Type for a VERSION FRAME MEMBER.
type EntityInVersionInFrameRefStructure struct {
	VersionOfObjectRefStructure
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
}

// TypeOfFrameRefsRelStructure represents the typeOfFrameRefs_RelStructure element
// A collection of one or more TYPEs OF VERSION FRAME.
type TypeOfFrameRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfFrameRef []TypeOfFrameRef `xml:"TypeOfFrameRef" json:"TypeOfFrameRef"`
}

// TypeOfFrameRefStructure represents the TypeOfFrameRefStructure element
// Type for a reference to a TYPE OF VERSION FRAME.
type TypeOfFrameRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfValidityRefStructure represents the TypeOfValidityRefStructure element
// Type for a reference to a TYPE OF VALIDITY.
type TypeOfValidityRefStructure struct {
	TypeOfValueRefStructure
}

// VersionFrameRef represents the VersionFrameRef element
// Reference to a VERSION FRAME.
type VersionFrameRef struct {
	VersionFrameRefStructure
}

// TypeOfFrameRef represents the TypeOfFrameRef element
// Reference to a TYPE OF VERSION FRAME.
type TypeOfFrameRef struct {
	TypeOfFrameRefStructure
}

// TypeOfValidityRef represents the TypeOfValidityRef element
// Reference to a TYPE OF VALIDITY.
type TypeOfValidityRef struct {
	TypeOfValidityRefStructure
}

// PurposeOfGroupingRefStructure represents the PurposeOfGroupingRefStructure element
// Type for a reference to a PURPOSE OF GROUPING.
type PurposeOfGroupingRefStructure struct {
	TypeOfValueRefStructure
}

// GeneralGroupOfEntitiesRefStructure represents the GeneralGroupOfEntitiesRefStructure element
// Type for a reference to a GENERAL GROUP OF ENTITies.
type GeneralGroupOfEntitiesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// PurposeOfGroupingRef represents the PurposeOfGroupingRef element
// Reference to a PURPOSE OF GROUPING.
type PurposeOfGroupingRef struct {
	PurposeOfGroupingRefStructure
}

// GeneralGroupOfEntitiesRef represents the GeneralGroupOfEntitiesRef element
// Reference to a GENERAL GROUP OF ENTITies.
type GeneralGroupOfEntitiesRef struct {
	GeneralGroupOfEntitiesRefStructure
}

// GroupOfLinesTypeEnumeration represents the GroupOfLinesTypeEnumeration enumeration
// Allowed values Classification of GROUP of  LINEs. +v1.1
type GroupOfLinesTypeEnumeration string

const (
	// GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationMarketing represents marketing
	// Grouping is primarily for marketing purposes.
	GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationMarketing GroupOfLinesTypeEnumeration = "marketing"
	// GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationAdministrative represents administrative
	// Grouping is primarily for administrative purposes..
	GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationAdministrative GroupOfLinesTypeEnumeration = "administrative"
	// GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationScheduling represents scheduling
	// Grouping is primarily for creating schedules purposes.
	GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationScheduling GroupOfLinesTypeEnumeration = "scheduling"
	// GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationControl represents control
	// Grouping is primarily for defining tariff scope.
	GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationControl GroupOfLinesTypeEnumeration = "control"
	// GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationTariff represents tariff
	// Grouping is primarily for defining tariff scope.
	GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationTariff GroupOfLinesTypeEnumeration = "tariff"
	// GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationOther represents other
	GroupOfLinesTypeEnumerationGroupOfLinesTypeEnumerationOther GroupOfLinesTypeEnumeration = "other"
)

// LineTypeEnumeration represents the LineTypeEnumeration enumeration
// Allowed values Classification of  LINE. +v1.1
type LineTypeEnumeration string

const (
	// LineTypeEnumerationLocal represents local
	LineTypeEnumerationLocal LineTypeEnumeration = "local"
	// LineTypeEnumerationUrban represents urban
	LineTypeEnumerationUrban LineTypeEnumeration = "urban"
	// LineTypeEnumerationLongDistance represents longDistance
	LineTypeEnumerationLongDistance LineTypeEnumeration = "longDistance"
	// LineTypeEnumerationExpress represents express
	LineTypeEnumerationExpress LineTypeEnumeration = "express"
	// LineTypeEnumerationSeasonal represents seasonal
	LineTypeEnumerationSeasonal LineTypeEnumeration = "seasonal"
	// LineTypeEnumerationReplacement represents replacement
	LineTypeEnumerationReplacement LineTypeEnumeration = "replacement"
	// LineTypeEnumerationFlexible represents flexible
	LineTypeEnumerationFlexible LineTypeEnumeration = "flexible"
	// LineTypeEnumerationOther represents other
	LineTypeEnumerationOther LineTypeEnumeration = "other"
)

// ViaTypeEnumeration represents the ViaTypeEnumeration enumeration
// Allowed values Classification of Via.
type ViaTypeEnumeration string

const (
	// ViaTypeEnumerationViaTypeEnumerationStopPoint represents stopPoint
	ViaTypeEnumerationViaTypeEnumerationStopPoint ViaTypeEnumeration = "stopPoint"
	// ViaTypeEnumerationViaTypeEnumerationName represents name
	ViaTypeEnumerationViaTypeEnumerationName ViaTypeEnumeration = "name"
	// ViaTypeEnumerationViaTypeEnumerationOther represents other
	ViaTypeEnumerationViaTypeEnumerationOther ViaTypeEnumeration = "other"
)

// DestinationDisplayContextEnumeration represents the DestinationDisplayContextEnumeration enumeration
// Allowed values forr Destination Display Context. +v1.1.
type DestinationDisplayContextEnumeration string

const (
	// DestinationDisplayContextEnumerationAny represents any
	DestinationDisplayContextEnumerationAny DestinationDisplayContextEnumeration = "any"
	// DestinationDisplayContextEnumerationContinueTo represents continueTo
	DestinationDisplayContextEnumerationContinueTo DestinationDisplayContextEnumeration = "continueTo"
	// DestinationDisplayContextEnumerationEndsAt represents endsAt
	DestinationDisplayContextEnumerationEndsAt DestinationDisplayContextEnumeration = "endsAt"
	// DestinationDisplayContextEnumerationTransferAt represents transferAt
	DestinationDisplayContextEnumerationTransferAt DestinationDisplayContextEnumeration = "transferAt"
	// DestinationDisplayContextEnumerationVia represents via
	DestinationDisplayContextEnumerationVia DestinationDisplayContextEnumeration = "via"
	// DestinationDisplayContextEnumerationInMessage represents inMessage
	DestinationDisplayContextEnumerationInMessage DestinationDisplayContextEnumeration = "inMessage"
	// DestinationDisplayContextEnumerationUnknown represents unknown
	DestinationDisplayContextEnumerationUnknown DestinationDisplayContextEnumeration = "unknown"
)

// GroupOfLinesRefStructure represents the GroupOfLinesRefStructure element
// Type for a GROUP OF LINEs.
type GroupOfLinesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// LineRefsRelStructure represents the lineRefs_RelStructure element
// Type for a list of references to a LINE.
type LineRefsRelStructure struct {
	OneToManyRelationshipStructure
	FlexibleLineRef []FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef []LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
}

// LineRefStructure represents the LineRefStructure element
// Type for a LINE.
type LineRefStructure struct {
	VersionOfObjectRefStructure
}

// AllowedLineDirectionRefsRelStructure represents the allowedLineDirectionRefs_RelStructure element
// Type for a list of references to an ALLOWED LINE DIRECTION.
type AllowedLineDirectionRefsRelStructure struct {
	OneToManyRelationshipStructure
	AllowedLineDirectionRef []AllowedLineDirectionRef `xml:"AllowedLineDirectionRef" json:"AllowedLineDirectionRef"`
}

// AllowedLineDirectionRefStructure represents the AllowedLineDirectionRefStructure element
// Type for an ALLOWED LINE DIRECTION.
type AllowedLineDirectionRefStructure struct {
	VersionOfObjectRefStructure
}

// NetworkRefStructure represents the NetworkRefStructure element
// Type for a reference to a NETWORK.
type NetworkRefStructure struct {
	GroupOfLinesRefStructure
}

// DestinationDisplayRefsRelStructure represents the destinationDisplayRefs_RelStructure element
// Type for a list of references to a DESTINATION DISPLAY.
type DestinationDisplayRefsRelStructure struct {
	OneToManyRelationshipStructure
	DestinationDisplayRef []DestinationDisplayRef `xml:"DestinationDisplayRef" json:"DestinationDisplayRef"`
}

// DestinationDisplayRefStructure represents the DestinationDisplayRefStructure element
// Type for a reference to a DESTINATION DISPLAY.
type DestinationDisplayRefStructure struct {
	VersionOfObjectRefStructure
}

// DestinationDisplayVariantRefsRelStructure represents the destinationDisplayVariantRefs_RelStructure element
// Type for a list of references to a DESTINATION DISPLAY VARIANT.
type DestinationDisplayVariantRefsRelStructure struct {
	OneToManyRelationshipStructure
	DestinationDisplayVariantRef []DestinationDisplayVariantRef `xml:"DestinationDisplayVariantRef" json:"DestinationDisplayVariantRef"`
}

// DestinationDisplayVariantRefStructure represents the DestinationDisplayVariantRefStructure element
// Type for a reference to a DESTINATION DISPLAY VARIANT.
type DestinationDisplayVariantRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfLineRefStructure represents the TypeOfLineRefStructure element
// Type for a TYPE OF LINE.
type TypeOfLineRefStructure struct {
	TypeOfValueRefStructure
}

// GroupOfLinesRef represents the GroupOfLinesRef element
// Reference to a GROUP OF LINEs.
type GroupOfLinesRef struct {
	GroupOfLinesRefStructure
}

// LineRef represents the LineRef element
// Reference to a LINE.
type LineRef struct {
	LineRefStructure
}

// AllowedLineDirectionRef represents the AllowedLineDirectionRef element
// Reference to an ALLOWED LINE DIRECTION.
type AllowedLineDirectionRef struct {
	AllowedLineDirectionRefStructure
}

// NetworkRef represents the NetworkRef element
// Reference to a NETWORK.
type NetworkRef struct {
	NetworkRefStructure
}

// DestinationDisplayRef represents the DestinationDisplayRef element
// Reference to a DESTINATION DISPLAY.
type DestinationDisplayRef struct {
	DestinationDisplayRefStructure
}

// DestinationDisplayVariantRef represents the DestinationDisplayVariantRef element
// Reference to a DESTINATION DISPLAY VARIANT.
type DestinationDisplayVariantRef struct {
	DestinationDisplayVariantRefStructure
}

// TypeOfLineRef represents the TypeOfLineRef element
// Reference to a TYPE OF LINE.
type TypeOfLineRef struct {
	TypeOfLineRefStructure
}

// LanguageUseEnumeration represents the LanguageUseEnumeration enumeration
// Enumeration of Uses of language.
type LanguageUseEnumeration string

const (
	// LanguageUseEnumerationNormallyUsed represents normallyUsed
	LanguageUseEnumerationNormallyUsed LanguageUseEnumeration = "normallyUsed"
	// LanguageUseEnumerationUnderstood represents understood
	LanguageUseEnumerationUnderstood LanguageUseEnumeration = "understood"
	// LanguageUseEnumerationNative represents native
	LanguageUseEnumerationNative LanguageUseEnumeration = "native"
	// LanguageUseEnumerationSpoken represents spoken
	LanguageUseEnumerationSpoken LanguageUseEnumeration = "spoken"
	// LanguageUseEnumerationWritten represents written
	LanguageUseEnumerationWritten LanguageUseEnumeration = "written"
	// LanguageUseEnumerationRead represents read
	LanguageUseEnumerationRead LanguageUseEnumeration = "read"
	// LanguageUseEnumerationOther represents other
	LanguageUseEnumerationOther LanguageUseEnumeration = "other"
	// LanguageUseEnumerationAllUses represents allUses
	LanguageUseEnumerationAllUses LanguageUseEnumeration = "allUses"
)

// FontSizeEnumeration represents the FontSizeEnumeration enumeration
// Allowed values for size of font. +v1.1
type FontSizeEnumeration string

const (
	// FontSizeEnumerationVerySmall represents verySmall
	FontSizeEnumerationVerySmall FontSizeEnumeration = "verySmall"
	// FontSizeEnumerationSmall represents small
	FontSizeEnumerationSmall FontSizeEnumeration = "small"
	// FontSizeEnumerationMedium represents medium
	FontSizeEnumerationMedium FontSizeEnumeration = "medium"
	// FontSizeEnumerationLarge represents large
	FontSizeEnumerationLarge FontSizeEnumeration = "large"
	// FontSizeEnumerationVeryLarge represents veryLarge
	FontSizeEnumerationVeryLarge FontSizeEnumeration = "veryLarge"
)

// TypeOfInfoLinkEnumeration represents the TypeOfInfoLinkEnumeration enumeration
// Enumeration of functional classification of an info link.
type TypeOfInfoLinkEnumeration string

const (
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationContact represents contact
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationContact TypeOfInfoLinkEnumeration = "contact"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationResource represents resource
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationResource TypeOfInfoLinkEnumeration = "resource"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationInfo represents info
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationInfo TypeOfInfoLinkEnumeration = "info"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationImage represents image
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationImage TypeOfInfoLinkEnumeration = "image"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationDocument represents document
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationDocument TypeOfInfoLinkEnumeration = "document"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationTimetableDocument represents timetableDocument
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationTimetableDocument TypeOfInfoLinkEnumeration = "timetableDocument"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationFareSheet represents fareSheet
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationFareSheet TypeOfInfoLinkEnumeration = "fareSheet"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationDataLicence represents dataLicence
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationDataLicence TypeOfInfoLinkEnumeration = "dataLicence"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationMobileAppDownload represents mobileAppDownload
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationMobileAppDownload TypeOfInfoLinkEnumeration = "mobileAppDownload"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationMobileAppInstallCheck represents mobileAppInstallCheck
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationMobileAppInstallCheck TypeOfInfoLinkEnumeration = "mobileAppInstallCheck"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationMap represents map
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationMap TypeOfInfoLinkEnumeration = "map"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationIcon represents icon
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationIcon TypeOfInfoLinkEnumeration = "icon"
	// TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationOther represents other
	TypeOfInfoLinkEnumerationTypeOfInfoLinkEnumerationOther TypeOfInfoLinkEnumeration = "other"
)

// PrivateCodeStructure represents the PrivateCodeStructure element
// Type describing a private code.
type PrivateCodeStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Nature of code.
	Type *string `xml:"type,attr,omitempty" json:"type,omitempty"`
}

// LocaleStructure represents the LocaleStructure element
// Type describing common locale dependent properties.
type LocaleStructure struct {
	// Timezone offset from Greenwich at LOCALE.
	TimeZoneOffset *float64 `xml:"TimeZoneOffset,omitempty" json:"TimeZoneOffset,omitempty"`
	// Timezone name at LOCALE.
	TimeZone *string `xml:"TimeZone,omitempty" json:"TimeZone,omitempty"`
	// Summer timezone offset if different from Time zone offset.
	SummerTimeZoneOffset *float64 `xml:"SummerTimeZoneOffset,omitempty" json:"SummerTimeZoneOffset,omitempty"`
	// Summer Time zone name at LOCALE.
	SummerTimeZone *string `xml:"SummerTimeZone,omitempty" json:"SummerTimeZone,omitempty"`
	// Default Language for LOCALE. Assume language use is "normally used"
	DefaultLanguage *string `xml:"DefaultLanguage,omitempty" json:"DefaultLanguage,omitempty"`
	// Languages supported at LOCALE.
	Languages *Languages `xml:"languages,omitempty" json:"languages,omitempty"`
}

// Languages represents the languages element
type Languages struct {
	// Language usage.
	LanguageUsage []LanguageUsageStructure `xml:"LanguageUsage,omitempty" json:"LanguageUsage,omitempty"`
}

// LanguageUsageStructure represents the LanguageUsageStructure element
// Type describing language usage properties.
type LanguageUsageStructure struct {
	// Language whose usage is described.
	Language string `xml:"Language" json:"Language"`
	// Usages of language supported. Based on UN terms.
	LanguageUse LanguageUseEnumeration `xml:"LanguageUse" json:"LanguageUse"`
}

// PresentationStructure represents the PresentationStructure element
// Types describing common presentation properties for Display.
type PresentationStructure struct {
	// Default RGB colour value for graphics associated with ENTITY - e.g. for a LINE.
	Colour *[]byte `xml:"Colour,omitempty" json:"Colour,omitempty"`
	// Name of default colour value for graphics associated with ENTITY.
	ColourName *string `xml:"ColourName,omitempty" json:"ColourName,omitempty"`
	// Name of colour system used for ColourName and TextColourName: for example, 
	// 					- RAL, https://en.wikipedia.org/wiki/RAL_colour_standard;
	// 					- DIN 6164 http://www.dtpstudio.de/atlas/farbsysteme/DIN%206164_bs00_3.htm; 
	// 					- Pantone (be aware that Pantone is proprietary), etc.
	ColourSystem *string `xml:"ColourSystem,omitempty" json:"ColourSystem,omitempty"`
	// Default RGB background colour value for text and graphics associated with ENTITY - e.g. of a LINE.
	BackgroundColour *[]byte `xml:"BackgroundColour,omitempty" json:"BackgroundColour,omitempty"`
	// Name of the background colour (in ColourSystem) for text and graphics associated with entity.
	BackgroundColourName *string `xml:"BackgroundColourName,omitempty" json:"BackgroundColourName,omitempty"`
	// Default colour value for text associated with ENTITY.
	TextColour *[]byte `xml:"TextColour,omitempty" json:"TextColour,omitempty"`
	// Name of default colour value (in ColourSystem) for text associated with ENTITY.
	TextColourName *string `xml:"TextColourName,omitempty" json:"TextColourName,omitempty"`
	// Identifier of font for text.
	TextFont *string `xml:"TextFont,omitempty" json:"TextFont,omitempty"`
	// Name of font for text.
	TextFontName *string `xml:"TextFontName,omitempty" json:"TextFontName,omitempty"`
	// Default language for text.
	TextLanguage *string `xml:"TextLanguage,omitempty" json:"TextLanguage,omitempty"`
	// Hyperlinks associated with presentation.
	InfoLinks *InfoLinksRelStructure `xml:"infoLinks,omitempty" json:"infoLinks,omitempty"`
}

// PrintPresentationStructure represents the PrintPresentationStructure element
// Types describing common presentation properties for Print.
type PrintPresentationStructure struct {
	// Default colour value for printed  graphics associated with ENTITY - e.g. of a LINE, e.g. CMYK.
	Colour *string `xml:"Colour,omitempty" json:"Colour,omitempty"`
	// Name of default colour value for printed graphics associated with entity., eg Pentone name
	ColourName *string `xml:"ColourName,omitempty" json:"ColourName,omitempty"`
	// Name of colour system used for printed ColourName and TextColourName: for example, 
	// 					- RAL, https://en.wikipedia.org/wiki/RAL_colour_standard;
	// 					- DIN 6164 http://www.dtpstudio.de/atlas/farbsysteme/DIN%206164_bs00_3.htm; 
	// 					- Pantone (be aware that Pantone is proprietary), etc.
	ColourSystem *string `xml:"ColourSystem,omitempty" json:"ColourSystem,omitempty"`
	// Default RGB background colour value for printed text and graphics associated with ENTITY - e.g. of a LINE.
	BackgroundColour *[]byte `xml:"BackgroundColour,omitempty" json:"BackgroundColour,omitempty"`
	// Name of the backgropund colour value (in ColourSystem) for printed text and graphics associated with entity.
	BackgroundColourName *string `xml:"BackgroundColourName,omitempty" json:"BackgroundColourName,omitempty"`
	// Default colour value for printed text associated with entity. CMYK.
	TextColour *string `xml:"TextColour,omitempty" json:"TextColour,omitempty"`
	// Name of default colour value for printed text associated with entity, in specified ColourSystem.
	TextColourName *string `xml:"TextColourName,omitempty" json:"TextColourName,omitempty"`
	// Identifier of font for printed text.
	TextFont *string `xml:"TextFont,omitempty" json:"TextFont,omitempty"`
	// Name of font for printed text.
	TextFontName *string `xml:"TextFontName,omitempty" json:"TextFontName,omitempty"`
	// Default language for printed text.
	TextLanguage *string `xml:"TextLanguage,omitempty" json:"TextLanguage,omitempty"`
	// Default language for printed text +v1.1.
	FontSize *FontSizeEnumeration `xml:"FontSize,omitempty" json:"FontSize,omitempty"`
}

// InfoLinksRelStructure represents the infoLinks_RelStructure element
// Type for collection of info links.
type InfoLinksRelStructure struct {
	InfoLink []InfoLink `xml:"InfoLink" json:"InfoLink"`
}

// InfoLinkStructure represents the InfoLinkStructure element
// Type for Info Link.
type InfoLinkStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Functional classifcation of an info link.
	TypeOfInfoLink *TypeOfInfoLinkEnumeration `xml:"typeOfInfoLink,attr,omitempty" json:"typeOfInfoLink,omitempty"`
	// Software platform for which link is targeted, e.g. iOS, Android.
	TargetPlatform *interface{} `xml:"targetPlatform,attr,omitempty" json:"targetPlatform,omitempty"`
}

// PrivateCode represents the PrivateCode element
// A private code that uniquely identifies the element.  May be used for inter-operating with other (legacy) systems.
type PrivateCode struct {
	PrivateCodeStructure
}

// AccountingCode represents the AccountingCode element
// An Accounting code assigned to the Element (TAP TSI)
type AccountingCode struct {
	PrivateCodeStructure
}

// Locale represents the Locale element
// Common LOCALE dependent properties.
type Locale struct {
	LocaleStructure
}

// InfoLink represents the InfoLink element
// A hyperlink to an external web resource.
type InfoLink struct {
	InfoLinkStructure
}

// ClosedTimestampRangeStructure represents the ClosedTimestampRangeStructure element
// Data Type for a range of date and times. Both start and end time are required.
type ClosedTimestampRangeStructure struct {
	// The (inclusive) start date and time.
	StartTime time.Time `xml:"StartTime" json:"StartTime"`
	// The (inclusive) end date and time.
	EndTime time.Time `xml:"EndTime" json:"EndTime"`
}

// ClosedTimeRangeStructure represents the ClosedTimeRangeStructure element
// Data Type for a range of times. Both start and end time are required.
type ClosedTimeRangeStructure struct {
	// The (inclusive) start time.
	StartTime string `xml:"StartTime" json:"StartTime"`
	// The (inclusive) end time.
	EndTime string `xml:"EndTime" json:"EndTime"`
}

// HalfOpenTimeRangeStructure represents the HalfOpenTimeRangeStructure element
// Data Type for a range of times. Start time must be specified, end time is optional.
type HalfOpenTimeRangeStructure struct {
	// The (inclusive) start time.
	StartTime string `xml:"StartTime" json:"StartTime"`
	// The (inclusive) end time. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
	EndTime *string `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
}

// HalfOpenTimestampRangeStructure represents the HalfOpenTimestampRangeStructure element
// Data Type for a range of date times. Start time must be specified, end time is optional.
type HalfOpenTimestampRangeStructure struct {
	// The (inclusive) start time stamp.
	StartTime time.Time `xml:"StartTime" json:"StartTime"`
	// The (inclusive) end time stamp. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
	EndTime *time.Time `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
}

// OpenTimeRangeStructure represents the OpenTimeRangeStructure element
// Data Type for a range of times. Start time must be specified, end time is optional.
type OpenTimeRangeStructure struct {
	// The (inclusive) start time.
	StartTime *string `xml:"StartTime,omitempty" json:"StartTime,omitempty"`
	// The (inclusive) end time. If omitted, the range end is open-ended, that is, it should be interpreted as "forever".
	EndTime *string `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
}

// OpenTimestampRangeStructure represents the OpenTimestampRangeStructure element
// Data Type for a range of date times. Start time must be specified, end time is optional.
type OpenTimestampRangeStructure struct {
	// The (inclusive) start time stamp.
	StartTime *time.Time `xml:"StartTime,omitempty" json:"StartTime,omitempty"`
	// The (inclusive) end time stamp. If omitted, the range end is open-ended; that is, it should be interpreted as "forever".
	EndTime *time.Time `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
}

// CodeType represents the CodeType element
// gml:CodeType is a generalized type to be used for a term, keyword or name.
// It adds a XML attribute codeSpace to a term, where the value of the codeSpace attribute (if present) shall indicate a dictionary, thesaurus, classification scheme, authority, or pattern for the term.
type CodeType struct {
	Value string `xml:",chardata" json:"value"`
	CodeSpace *string `xml:"codeSpace,attr,omitempty" json:"codeSpace,omitempty"`
}

// CodeWithAuthorityType represents the CodeWithAuthorityType element
// gml:CodeWithAuthorityType requires that the codeSpace attribute is provided in an instance.
type CodeWithAuthorityType struct {
	CodeType
	CodeSpace string `xml:"codeSpace,attr" json:"codeSpace"`
}

// MeasureType represents the MeasureType element
// gml:MeasureType supports recording an amount encoded as a value of XML Schema double, together with a units of measure indicated by an attribute uom, short for "units of measure". The value of the uom attribute identifies a reference system for the amount, usually a ratio or interval scale.
type MeasureType struct {
	Value float64 `xml:",chardata" json:"value"`
	Uom string `xml:"uom,attr" json:"uom"`
}

// CoordinatesType represents the CoordinatesType element
// This type is deprecated for tuples with ordinate values that are numbers.
// CoordinatesType is a text string, intended to be used to record an array of tuples or coordinates. 
// While it is not possible to enforce the internal structure of the string through schema validation, some optional attributes have been provided in previous versions of GML to support a description of the internal structure. These attributes are deprecated. The attributes were intended to be used as follows:
// Decimal	symbol used for a decimal point (default="." a stop or period)
// cs        	symbol used to separate components within a tuple or coordinate string (default="," a comma)
// ts        	symbol used to separate tuples or coordinate strings (default=" " a space)
// Since it is based on the XML Schema string type, CoordinatesType may be used in the construction of tables of tuples or arrays of tuples, including ones that contain mixed text and numeric values.
type CoordinatesType struct {
	Value string `xml:",chardata" json:"value"`
	Decimal *string `xml:"decimal,attr,omitempty" json:"decimal,omitempty"`
	Cs *string `xml:"cs,attr,omitempty" json:"cs,omitempty"`
	Ts *string `xml:"ts,attr,omitempty" json:"ts,omitempty"`
}

// CodeListType represents the CodeListType element
// gml:CodeListType provides for lists of terms. The values in an instance element shall all be valid according to the rules of the dictionary, classification scheme, or authority identified by the value of its codeSpace attribute.
type CodeListType struct {
	Value string `xml:"value" json:"value"`
	CodeSpace *string `xml:"codeSpace,attr,omitempty" json:"codeSpace,omitempty"`
}

// CodeOrNilReasonListType represents the CodeOrNilReasonListType element
// gml:CodeOrNilReasonListType provides for lists of terms. The values in an instance element shall all be valid according to the rules of the dictionary, classification scheme, or authority identified by the value of its codeSpace attribute. An instance element may also include embedded values from NilReasonType. It is intended to be used in situations where a term or classification is expected, but the value may be absent for some reason.
type CodeOrNilReasonListType struct {
	Value string `xml:"value" json:"value"`
	CodeSpace *string `xml:"codeSpace,attr,omitempty" json:"codeSpace,omitempty"`
}

// MeasureListType represents the MeasureListType element
// gml:MeasureListType provides for a list of quantities.
type MeasureListType struct {
	Value float64 `xml:"value" json:"value"`
	Uom string `xml:"uom,attr" json:"uom"`
}

// MeasureOrNilReasonListType represents the MeasureOrNilReasonListType element
// gml:MeasureOrNilReasonListType provides for a list of quantities. An instance element may also include embedded values from NilReasonType. It is intended to be used in situations where a value is expected, but the value may be absent for some reason.
type MeasureOrNilReasonListType struct {
	Value string `xml:"value" json:"value"`
	Uom string `xml:"uom,attr" json:"uom"`
}

// AggregationType represents the AggregationType enumeration
type AggregationType string

const (
	// AggregationTypeSet represents set
	AggregationTypeSet AggregationType = "set"
	// AggregationTypeBag represents bag
	AggregationTypeBag AggregationType = "bag"
	// AggregationTypeSequence represents sequence
	AggregationTypeSequence AggregationType = "sequence"
	// AggregationTypeArray represents array
	AggregationTypeArray AggregationType = "array"
	// AggregationTypeRecord represents record
	AggregationTypeRecord AggregationType = "record"
	// AggregationTypeTable represents table
	AggregationTypeTable AggregationType = "table"
)

// AbstractGmltype represents the AbstractGMLType element
type AbstractGmltype struct {
	DescriptionReference *DescriptionReference `xml:"descriptionReference,omitempty" json:"descriptionReference,omitempty"`
	Identifier *Identifier `xml:"identifier,omitempty" json:"identifier,omitempty"`
	Name []Name `xml:"name,omitempty" json:"name,omitempty"`
	Id string `xml:"id,attr" json:"id"`
}

// AssociationRoleType represents the AssociationRoleType element
type AssociationRoleType struct {
	AnyElement *interface{} `xml:"@any_element,omitempty" json:"@any_element,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
	NilReason *string `xml:"nilReason,attr,omitempty" json:"nilReason,omitempty"`
}

// ReferenceType represents the ReferenceType element
// gml:ReferenceType is intended to be used in application schemas directly, if a property element shall use a "by-reference only" encoding.
type ReferenceType struct {
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
	NilReason *string `xml:"nilReason,attr,omitempty" json:"nilReason,omitempty"`
}

// InlinePropertyType represents the InlinePropertyType element
type InlinePropertyType struct {
	AnyElement *interface{} `xml:"@any_element,omitempty" json:"@any_element,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// AbstractMemberType represents the AbstractMemberType element
// To create a collection of GML Objects that are not all features, a property type shall be derived by extension from gml:AbstractMemberType.
// This abstract property type is intended to be used only in object types where software shall be able to identify that an instance of such an object type is to be interpreted as a collection of objects.
// By default, this abstract property type does not imply any ownership of the objects in the collection. The owns attribute of gml:OwnershipAttributeGroup may be used on a property element instance to assert ownership of an object in the collection. A collection shall not own an object already owned by another object.
type AbstractMemberType struct {
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// AbstractMetadataPropertyType represents the AbstractMetadataPropertyType element
// To associate metadata described by any XML Schema with a GML object, a property element shall be defined whose content model is derived by extension from gml:AbstractMetadataPropertyType. 
// The value of such a property shall be metadata. The content model of such a property type, i.e. the metadata application schema shall be specified by the GML Application Schema.
// By default, this abstract property type does not imply any ownership of the metadata. The owns attribute of gml:OwnershipAttributeGroup may be used on a metadata property element instance to assert ownership of the metadata. 
// If metadata following the conceptual model of ISO 19115 is to be encoded in a GML document, the corresponding Implementation Specification specified in ISO/TS 19139 shall be used to encode the metadata information.
type AbstractMetadataPropertyType struct {
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// AbstractObject represents the AbstractObject element
// This element has no type defined, and is therefore implicitly (according to the rules of W3C XML Schema) an XML Schema anyType. It is used as the head of an XML Schema substitution group which unifies complex content and certain simple content elements used for datatypes in GML, including the gml:AbstractGML substitution group.
type AbstractObject struct {
}

// AbstractGml represents the AbstractGML element
// The abstract element gml:AbstractGML is "any GML object having identity".   It acts as the head of an XML Schema substitution group, which may include any element which is a GML feature, or other object, with identity.  This is used as a variable in content models in GML core and application schemas.  It is effectively an abstract superclass for all GML objects.
type AbstractGml struct {
	AbstractGmltype
}

// AbstractAssociationRole represents the abstractAssociationRole element
// Applying this pattern shall restrict the multiplicity of objects in a property element using this content model to exactly one. An instance of this type shall contain an element representing an object, or serve as a pointer to a remote object.
// Applying the pattern to define an application schema specific property type allows to restrict
// -	the inline object to specified object types, 
// -	the encoding to "by-reference only" (see 7.2.3.7),
// -	the encoding to "inline only" (see 7.2.3.8).
type AbstractAssociationRole struct {
	AssociationRoleType
}

// AbstractStrictAssociationRole represents the abstractStrictAssociationRole element
// This element shows how an element 
// 	declaration may include a Schematron constraint to limit the property to act 
// 	in either inline or by-reference mode, but not both.
type AbstractStrictAssociationRole struct {
	AssociationRoleType
}

// AbstractReference represents the abstractReference element
// gml:abstractReference may be used as the head of a subtitution group of more specific elements providing a value by-reference.
type AbstractReference struct {
	ReferenceType
}

// AbstractInlineProperty represents the abstractInlineProperty element
// gml:abstractInlineProperty may be used as the head of a subtitution group of more specific elements providing a value inline.
type AbstractInlineProperty struct {
	InlinePropertyType
}

// ReversePropertyName represents the reversePropertyName element
// If the value of an object property is another object and that object contains also a property for the association between the two objects, then this name of the reverse property may be encoded in a gml:reversePropertyName element in an appinfo annotation of the property element to document the constraint between the two properties. The value of the element shall contain the qualified name of the property element.
type ReversePropertyName struct {
	Value string `xml:",chardata" json:"value"`
}

// DescriptionReference represents the descriptionReference element
// The value of this property is a remote text description of the object. The xlink:href attribute of the gml:descriptionReference property references the external description.
type DescriptionReference struct {
	ReferenceType
}

// Name represents the name element
// The gml:name property provides a label or identifier for the object, commonly a descriptive name. An object may have several names, typically assigned by different authorities. gml:name uses the gml:CodeType content model.  The authority for a name is indicated by the value of its (optional) codeSpace attribute.  The name may or may not be unique, as determined by the rules of the organization responsible for the codeSpace.  In common usage there will be one name per authority, so a processing application may select the name from its preferred codeSpace.
type Name struct {
	CodeType
}

// Identifier represents the identifier element
// Often, a special identifier is assigned to an object by the maintaining authority with the intention that it is used in references to the object For such cases, the codeSpace shall be provided. That identifier is usually unique either globally or within an application domain. gml:identifier is a pre-defined property for such identifiers.
type Identifier struct {
	CodeWithAuthorityType
}

// TargetElement represents the targetElement element
type TargetElement struct {
	Value string `xml:",chardata" json:"value"`
}

// AssociationName represents the associationName element
type AssociationName struct {
	Value string `xml:",chardata" json:"value"`
}

// DefaultCodeSpace represents the defaultCodeSpace element
type DefaultCodeSpace struct {
	Value string `xml:",chardata" json:"value"`
}

// GmlProfileSchema represents the gmlProfileSchema element
type GmlProfileSchema struct {
	Value string `xml:",chardata" json:"value"`
}

// AbstractGeometryType represents the AbstractGeometryType element
// All geometry elements are derived directly or indirectly from this abstract supertype. A geometry element may have an identifying attribute (gml:id), one or more names (elements identifier and name) and a description (elements description and descriptionReference) . It may be associated with a spatial reference system (attribute group gml:SRSReferenceGroup).
// The following rules shall be adhered to:
// -	Every geometry type shall derive from this abstract type.
// -	Every geometry element (i.e. an element of a geometry type) shall be directly or indirectly in the substitution group of AbstractGeometry.
type AbstractGeometryType struct {
	AbstractGmltype
	SrsName *string `xml:"srsName,attr,omitempty" json:"srsName,omitempty"`
	SrsDimension *int `xml:"srsDimension,attr,omitempty" json:"srsDimension,omitempty"`
}

// GeometryPropertyType represents the GeometryPropertyType element
// A geometric property may either be any geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same or another document). Note that either the reference or the contained element shall be given, but not both or none.
// If a feature has a property that takes a geometry element as its value, this is called a geometry property. A generic type for such a geometry property is GeometryPropertyType.
type GeometryPropertyType struct {
	MultiSurface *MultiSurface `xml:"MultiSurface,omitempty" json:"MultiSurface,omitempty"`
	Polygon *Polygon `xml:"Polygon,omitempty" json:"Polygon,omitempty"`
	LineString *LineString `xml:"LineString,omitempty" json:"LineString,omitempty"`
	Point *Point `xml:"Point,omitempty" json:"Point,omitempty"`
	NilReason *string `xml:"nilReason,attr,omitempty" json:"nilReason,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// GeometryArrayPropertyType represents the GeometryArrayPropertyType element
// If a feature has a property which takes an array of geometry elements as its value, this is called a geometry array property. A generic type for such a geometry property is GeometryArrayPropertyType. 
// The elements are always contained inline in the array property, referencing geometry elements or arrays of geometry elements via XLinks is not supported.
type GeometryArrayPropertyType struct {
	MultiSurface []MultiSurface `xml:"MultiSurface,omitempty" json:"MultiSurface,omitempty"`
	Polygon []Polygon `xml:"Polygon,omitempty" json:"Polygon,omitempty"`
	LineString []LineString `xml:"LineString,omitempty" json:"LineString,omitempty"`
	Point []Point `xml:"Point,omitempty" json:"Point,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// DirectPositionType represents the DirectPositionType element
// Direct position instances hold the coordinates for a position within some coordinate reference system (CRS). Since direct positions, as data types, will often be included in larger objects (such as geometry elements) that have references to CRS, the srsName attribute will in general be missing, if this particular direct position is included in a larger element with such a reference to a CRS. In this case, the CRS is implicitly assumed to take on the value of the containing object's CRS.
// if no srsName attribute is given, the CRS shall be specified as part of the larger context this geometry element is part of, typically a geometric object like a point, curve, etc.
type DirectPositionType struct {
	Value float64 `xml:"value" json:"value"`
	SrsName *string `xml:"srsName,attr,omitempty" json:"srsName,omitempty"`
	SrsDimension *int `xml:"srsDimension,attr,omitempty" json:"srsDimension,omitempty"`
}

// DirectPositionListType represents the DirectPositionListType element
// posList instances (and other instances with the content model specified by DirectPositionListType) hold the coordinates for a sequence of direct positions within the same coordinate reference system (CRS).
// if no srsName attribute is given, the CRS shall be specified as part of the larger context this geometry element is part of, typically a geometric object like a point, curve, etc. 
// The optional attribute count specifies the number of direct positions in the list. If the attribute count is present then the attribute srsDimension shall be present, too.
// The number of entries in the list is equal to the product of the dimensionality of the coordinate reference system (i.e. it is a derived value of the coordinate reference system definition) and the number of direct positions.
type DirectPositionListType struct {
	Value float64 `xml:"value" json:"value"`
	SrsName *string `xml:"srsName,attr,omitempty" json:"srsName,omitempty"`
	SrsDimension *int `xml:"srsDimension,attr,omitempty" json:"srsDimension,omitempty"`
	Count *int `xml:"count,attr,omitempty" json:"count,omitempty"`
}

// VectorType represents the VectorType element
// For some applications the components of the position may be adjusted to yield a unit vector.
type VectorType struct {
	DirectPositionType
}

// EnvelopeType represents the EnvelopeType element
type EnvelopeType struct {
	LowerCorner *DirectPositionType `xml:"lowerCorner,omitempty" json:"lowerCorner,omitempty"`
	UpperCorner *DirectPositionType `xml:"upperCorner,omitempty" json:"upperCorner,omitempty"`
	Pos []Pos `xml:"pos,omitempty" json:"pos,omitempty"`
	SrsName *string `xml:"srsName,attr,omitempty" json:"srsName,omitempty"`
	SrsDimension *int `xml:"srsDimension,attr,omitempty" json:"srsDimension,omitempty"`
}

// AbstractGeometricPrimitiveType represents the AbstractGeometricPrimitiveType element
// gml:AbstractGeometricPrimitiveType is the abstract root type of the geometric primitives. A geometric primitive is a geometric object that is not decomposed further into other primitives in the system. All primitives are oriented in the direction implied by the sequence of their coordinate tuples.
type AbstractGeometricPrimitiveType struct {
	AbstractGeometryType
}

// GeometricPrimitivePropertyType represents the GeometricPrimitivePropertyType element
// A property that has a geometric primitive as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
type GeometricPrimitivePropertyType struct {
	Polygon *Polygon `xml:"Polygon,omitempty" json:"Polygon,omitempty"`
	LineString *LineString `xml:"LineString,omitempty" json:"LineString,omitempty"`
	Point *Point `xml:"Point,omitempty" json:"Point,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
	NilReason *string `xml:"nilReason,attr,omitempty" json:"nilReason,omitempty"`
}

// PointType represents the PointType element
type PointType struct {
	AbstractGeometricPrimitiveType
	Pos Pos `xml:"pos" json:"pos"`
}

// PointPropertyType represents the PointPropertyType element
// A property that has a point as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
type PointPropertyType struct {
	Point *Point `xml:"Point,omitempty" json:"Point,omitempty"`
	NilReason *string `xml:"nilReason,attr,omitempty" json:"nilReason,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// PointArrayPropertyType represents the PointArrayPropertyType element
// gml:PointArrayPropertyType is a container for an array of points. The elements are always contained inline in the array property, referencing geometry elements or arrays of geometry elements via XLinks is not supported.
type PointArrayPropertyType struct {
	Point []Point `xml:"Point,omitempty" json:"Point,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// AbstractCurveType represents the AbstractCurveType element
// gml:AbstractCurveType is an abstraction of a curve to support the different levels of complexity. The curve may always be viewed as a geometric primitive, i.e. is continuous.
type AbstractCurveType struct {
	AbstractGeometricPrimitiveType
}

// CurvePropertyType represents the CurvePropertyType element
// A property that has a curve as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
type CurvePropertyType struct {
	LineString *LineString `xml:"LineString,omitempty" json:"LineString,omitempty"`
	NilReason *string `xml:"nilReason,attr,omitempty" json:"nilReason,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// CurveArrayPropertyType represents the CurveArrayPropertyType element
// A container for an array of curves. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements via XLinks is not supported.
type CurveArrayPropertyType struct {
	LineString []LineString `xml:"LineString,omitempty" json:"LineString,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// LineStringType represents the LineStringType element
type LineStringType struct {
	AbstractCurveType
	Pos []Pos `xml:"pos,omitempty" json:"pos,omitempty"`
	PointProperty []PointProperty `xml:"pointProperty,omitempty" json:"pointProperty,omitempty"`
	PosList *PosList `xml:"posList,omitempty" json:"posList,omitempty"`
}

// AbstractGeometry represents the AbstractGeometry element
// The AbstractGeometry element is the abstract head of the substitution group for all geometry elements of GML. This includes pre-defined and user-defined geometry elements. Any geometry element shall be a direct or indirect extension/restriction of AbstractGeometryType and shall be directly or indirectly in the substitution group of AbstractGeometry.
type AbstractGeometry struct {
	AbstractGeometryType
}

// Pos represents the pos element
type Pos struct {
	DirectPositionType
}

// PosList represents the posList element
type PosList struct {
	DirectPositionListType
}

// Vector represents the vector element
type Vector struct {
	VectorType
}

// Envelope represents the Envelope element
// Envelope defines an extent using a pair of positions defining opposite corners in arbitrary dimensions. The first direct position is the "lower corner" (a coordinate position consisting of all the minimal ordinates for each dimension for all points within the envelope), the second one the "upper corner" (a coordinate position consisting of all the maximal ordinates for each dimension for all points within the envelope).
// The use of the properties "coordinates" and "pos" has been deprecated. The explicitly named properties "lowerCorner" and "upperCorner" shall be used instead.
type Envelope struct {
	EnvelopeType
}

// AbstractGeometricPrimitive represents the AbstractGeometricPrimitive element
// The AbstractGeometricPrimitive element is the abstract head of the substitution group for all (pre- and user-defined) geometric primitives.
type AbstractGeometricPrimitive struct {
	AbstractGeometricPrimitiveType
}

// Point represents the Point element
// A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.
type Point struct {
	PointType
}

// PointProperty represents the pointProperty element
// This property element either references a point via the XLink-attributes or contains the point element. pointProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for Point.
type PointProperty struct {
	PointPropertyType
}

// AbstractCurve represents the AbstractCurve element
// The AbstractCurve element is the abstract head of the substitution group for all (continuous) curve elements.
type AbstractCurve struct {
	AbstractCurveType
}

// CurveProperty represents the curveProperty element
// This property element either references a curve via the XLink-attributes or contains the curve element. curveProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractCurve.
type CurveProperty struct {
	CurvePropertyType
}

// LineString represents the LineString element
// A LineString is a special curve that consists of a single segment with linear interpolation. It is defined by two or more coordinate tuples, with linear interpolation between them. The number of direct positions in the list shall be at least two.
type LineString struct {
	LineStringType
}

// AbstractSurfaceType represents the AbstractSurfaceType element
// gml:AbstractSurfaceType is an abstraction of a surface to support the different levels of complexity. A surface is always a continuous region of a plane.
type AbstractSurfaceType struct {
	AbstractGeometricPrimitiveType
}

// SurfacePropertyType represents the SurfacePropertyType element
// A property that has a surface as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
type SurfacePropertyType struct {
	Polygon *Polygon `xml:"Polygon,omitempty" json:"Polygon,omitempty"`
	NilReason *string `xml:"nilReason,attr,omitempty" json:"nilReason,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// SurfaceArrayPropertyType represents the SurfaceArrayPropertyType element
// gml:SurfaceArrayPropertyType is a container for an array of surfaces. The elements are always contained in the array property, referencing geometry elements or arrays of geometry elements via XLinks is not supported.
type SurfaceArrayPropertyType struct {
	Polygon []Polygon `xml:"Polygon,omitempty" json:"Polygon,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// PolygonType represents the PolygonType element
type PolygonType struct {
	AbstractSurfaceType
	Exterior *Exterior `xml:"exterior,omitempty" json:"exterior,omitempty"`
	Interior []Interior `xml:"interior,omitempty" json:"interior,omitempty"`
}

// AbstractRingType represents the AbstractRingType element
type AbstractRingType struct {
}

// AbstractRingPropertyType represents the AbstractRingPropertyType element
// A property with the content model of gml:AbstractRingPropertyType encapsulates a ring to represent the surface boundary property of a surface.
type AbstractRingPropertyType struct {
	LinearRing *LinearRing `xml:"LinearRing,omitempty" json:"LinearRing,omitempty"`
}

// LinearRingType represents the LinearRingType element
type LinearRingType struct {
	AbstractRingType
	Pos []Pos `xml:"pos,omitempty" json:"pos,omitempty"`
	PointProperty []PointProperty `xml:"pointProperty,omitempty" json:"pointProperty,omitempty"`
	PosList *PosList `xml:"posList,omitempty" json:"posList,omitempty"`
}

// LinearRingPropertyType represents the LinearRingPropertyType element
// A property with the content model of gml:LinearRingPropertyType encapsulates a linear ring to represent a component of a surface boundary.
type LinearRingPropertyType struct {
	LinearRing LinearRing `xml:"LinearRing" json:"LinearRing"`
}

// AbstractSurface represents the AbstractSurface element
// The AbstractSurface element is the abstract head of the substitution group for all (continuous) surface elements.
type AbstractSurface struct {
	AbstractSurfaceType
}

// SurfaceProperty represents the surfaceProperty element
// This property element either references a surface via the XLink-attributes or contains the surface element. surfaceProperty is the predefined property which may be used by GML Application Schemas whenever a GML feature has a property with a value that is substitutable for AbstractSurface.
type SurfaceProperty struct {
	SurfacePropertyType
}

// Polygon represents the Polygon element
// A Polygon is a special surface that is defined by a single surface patch (see D.3.6). The boundary of this patch is coplanar and the polygon uses planar interpolation in its interior. 
// The elements exterior and interior describe the surface boundary of the polygon.
type Polygon struct {
	PolygonType
}

// Exterior represents the exterior element
// A boundary of a surface consists of a number of rings. In the normal 2D case, one of these rings is distinguished as being the exterior boundary. In a general manifold this is not always possible, in which case all boundaries shall be listed as interior boundaries, and the exterior will be empty.
type Exterior struct {
	AbstractRingPropertyType
}

// Interior represents the interior element
// A boundary of a surface consists of a number of rings. The "interior" rings separate the surface / surface patch from the area enclosed by the rings.
type Interior struct {
	AbstractRingPropertyType
}

// AbstractRing represents the AbstractRing element
// An abstraction of a ring to support surface boundaries of different complexity.
// The AbstractRing element is the abstract head of the substituition group for all closed boundaries of a surface patch.
type AbstractRing struct {
	AbstractRingType
}

// LinearRing represents the LinearRing element
// A LinearRing is defined by four or more coordinate tuples, with linear interpolation between them; the first and last coordinates shall be coincident. The number of direct positions in the list shall be at least four.
type LinearRing struct {
	LinearRingType
}

// SurfaceMember represents the surfaceMember element
// This property element either references a surface via the XLink-attributes or contains the surface element. A surface element is any element, which is substitutable for gml:AbstractSurface.
type SurfaceMember struct {
	SurfacePropertyType
}

// AbstractGeometricAggregateType represents the AbstractGeometricAggregateType element
type AbstractGeometricAggregateType struct {
	AbstractGeometryType
	AggregationType *AggregationType `xml:"aggregationType,attr,omitempty" json:"aggregationType,omitempty"`
}

// MultiSurfaceType represents the MultiSurfaceType element
type MultiSurfaceType struct {
	AbstractGeometricAggregateType
	SurfaceMember []SurfaceMember `xml:"surfaceMember,omitempty" json:"surfaceMember,omitempty"`
	SurfaceMembers *SurfaceMembers `xml:"surfaceMembers,omitempty" json:"surfaceMembers,omitempty"`
}

// MultiSurfacePropertyType represents the MultiSurfacePropertyType element
// A property that has a collection of surfaces as its value domain may either be an appropriate geometry element encapsulated in an element of this type or an XLink reference to a remote geometry element (where remote includes geometry elements located elsewhere in the same document). Either the reference or the contained element shall be given, but neither both nor none.
type MultiSurfacePropertyType struct {
	MultiSurface *MultiSurface `xml:"MultiSurface,omitempty" json:"MultiSurface,omitempty"`
	NilReason *string `xml:"nilReason,attr,omitempty" json:"nilReason,omitempty"`
	Owns *bool `xml:"owns,attr,omitempty" json:"owns,omitempty"`
}

// AbstractGeometricAggregate represents the AbstractGeometricAggregate element
// gml:AbstractGeometricAggregate is the abstract head of the substitution group for all geometric aggregates.
type AbstractGeometricAggregate struct {
	AbstractGeometricAggregateType
}

// MultiSurface represents the MultiSurface element
// A gml:MultiSurface is defined by one or more gml:AbstractSurfaces.
// The members of the geometric aggregate may be specified either using the "standard" property (gml:surfaceMember) or the array property (gml:surfaceMembers). It is also valid to use both the "standard" and the array properties in the same collection.
type MultiSurface struct {
	MultiSurfaceType
}

// SurfaceMembers represents the surfaceMembers element
// This property element contains a list of surfaces. The order of the elements is significant and shall be preserved when processing the array.
type SurfaceMembers struct {
	SurfaceArrayPropertyType
}

// SystemOfUnits represents the SystemOfUnits enumeration
// System of units.
type SystemOfUnits string

const (
	// SystemOfUnitsSiMetres represents SiMetres
	// All measurements are SI metric. 
	// Distance = Metres
	// Length = Metres
	// Weight = Kilos
	// Speed = Metres per second.
	SystemOfUnitsSiMetres SystemOfUnits = "SiMetres"
	// SystemOfUnitsSiKilometresAndMetres represents SiKilometresAndMetres
	// All measurements are SI 
	// Distance = Kilometres
	// Length = Metres
	// Weight = Kilos
	// Speed = Metres per second.
	SystemOfUnitsSiKilometresAndMetres SystemOfUnits = "SiKilometresAndMetres"
	// SystemOfUnitsOther represents Other
	SystemOfUnitsOther SystemOfUnits = "Other"
)

// CompassBearing16Enumeration represents the CompassBearing16Enumeration enumeration
// 16 point compass.
type CompassBearing16Enumeration string

const (
	// CompassBearing16EnumerationSw represents SW
	CompassBearing16EnumerationSw CompassBearing16Enumeration = "SW"
	// CompassBearing16EnumerationSe represents SE
	CompassBearing16EnumerationSe CompassBearing16Enumeration = "SE"
	// CompassBearing16EnumerationNw represents NW
	CompassBearing16EnumerationNw CompassBearing16Enumeration = "NW"
	// CompassBearing16EnumerationNe represents NE
	CompassBearing16EnumerationNe CompassBearing16Enumeration = "NE"
	// CompassBearing16EnumerationW represents W
	CompassBearing16EnumerationW CompassBearing16Enumeration = "W"
	// CompassBearing16EnumerationE represents E
	CompassBearing16EnumerationE CompassBearing16Enumeration = "E"
	// CompassBearing16EnumerationS represents S
	CompassBearing16EnumerationS CompassBearing16Enumeration = "S"
	// CompassBearing16EnumerationN represents N
	CompassBearing16EnumerationN CompassBearing16Enumeration = "N"
)

// CompassBearing8Enumeration represents the CompassBearing8Enumeration enumeration
// 8 point compass.
type CompassBearing8Enumeration string

const (
	// CompassBearing8EnumerationSw represents SW
	CompassBearing8EnumerationSw CompassBearing8Enumeration = "SW"
	// CompassBearing8EnumerationSe represents SE
	CompassBearing8EnumerationSe CompassBearing8Enumeration = "SE"
	// CompassBearing8EnumerationNw represents NW
	CompassBearing8EnumerationNw CompassBearing8Enumeration = "NW"
	// CompassBearing8EnumerationNe represents NE
	CompassBearing8EnumerationNe CompassBearing8Enumeration = "NE"
	// CompassBearing8EnumerationW represents W
	CompassBearing8EnumerationW CompassBearing8Enumeration = "W"
	// CompassBearing8EnumerationE represents E
	CompassBearing8EnumerationE CompassBearing8Enumeration = "E"
	// CompassBearing8EnumerationS represents S
	CompassBearing8EnumerationS CompassBearing8Enumeration = "S"
	// CompassBearing8EnumerationN represents N
	CompassBearing8EnumerationN CompassBearing8Enumeration = "N"
)

// LocationStructure2 represents the LocationStructure2 element
// Type for geospatial Position of a point. May be expressed in concrete WGS 84 Coordinates or any gml compatible point coordinates format.
type LocationStructure2 struct {
	// Longitude from Greenwich Meridian. -180 (East) to +180 (West). Decimal degrees. e.g. 2.356
	Longitude *float64 `xml:"Longitude,omitempty" json:"Longitude,omitempty"`
	// Latitude from equator. -90 (South) to +90 (North). Decimal degrees. e.g. 56.356
	Latitude *float64 `xml:"Latitude,omitempty" json:"Latitude,omitempty"`
	// Altitude (metres) Above sea level.
	Altitude *float64 `xml:"Altitude,omitempty" json:"Altitude,omitempty"`
	Pos *Pos `xml:"pos,omitempty" json:"pos,omitempty"`
	// Precision for point measurement. In meters.
	Precision *float64 `xml:"Precision,omitempty" json:"Precision,omitempty"`
	// Identifier of point.
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// identifier of data Reference system for geocodes if point is specified as gml compatible Coordinates. A gml value. If not specified taken from system configuration.
	SrsName *string `xml:"srsName,attr,omitempty" json:"srsName,omitempty"`
}

// BoundingBoxStructure2 represents the BoundingBoxStructure2 element
// Defines a bounding box using two corner points. GML terminology.
type BoundingBoxStructure2 struct {
	// A geospatial point. 
	// Upper Left corner.
	// .
	UpperLeft LocationStructure `xml:"UpperLeft" json:"UpperLeft"`
	// A geospatial point. 
	// Lower right corner.
	// .
	LowerRight LocationStructure `xml:"LowerRight" json:"LowerRight"`
}

// SrsName2 represents the SrsName2 element
// Name of GML Spatial coordinate Reference system.
type SrsName2 struct {
	Value string `xml:",chardata" json:"value"`
}

// EmptyType2 represents the EmptyType2 enumeration
// A type with no allowed content, used when simply the presence of an element is significant.
type EmptyType2 string

const (
	// EmptyType2Empty represents 
	EmptyType2Empty EmptyType2 = ""
)

// MultilingualString represents the MultilingualString element
// Type for a string in a specified language.
type MultilingualString struct {
	Value string `xml:",chardata" json:"value"`
	// Language of string contents.
	Lang *string `xml:"lang,attr,omitempty" json:"lang,omitempty"`
	// Resource id of string.
	TextIdType *string `xml:"textIdType,attr,omitempty" json:"textIdType,omitempty"`
}

// ExtensionsStructure2 represents the ExtensionsStructure2 element
// Type for Extensions to schema. Wraps an 'any' tag to ensure decidability.
type ExtensionsStructure2 struct {
	// Placeholder for user extensions.
	AnyElement []interface{} `xml:"@any_element,omitempty" json:"@any_element,omitempty"`
}

// Extensions2 represents the Extensions2 element
// User defined Extensions to ENTITY in schema. (Wrapper tag used to avoid problems with handling of optional 'any' by some validators).
type Extensions2 struct {
	ExtensionsStructure
}

// ContactDetailsStructure represents the ContactDetailsStructure element
// Type for contact details.
type ContactDetailsStructure struct {
	// Name of contact person.
	ContactPerson *MultilingualString `xml:"ContactPerson,omitempty" json:"ContactPerson,omitempty"`
	// The email address of the contact.
	Email *string `xml:"Email,omitempty" json:"Email,omitempty"`
	// Contact telephone number.
	Phone *string `xml:"Phone,omitempty" json:"Phone,omitempty"`
	// Contact fax number.
	Fax *string `xml:"Fax,omitempty" json:"Fax,omitempty"`
	// The web site address of the contact.
	Url *string `xml:"Url,omitempty" json:"Url,omitempty"`
	// Further details about contact process.
	FurtherDetails *MultilingualString `xml:"FurtherDetails,omitempty" json:"FurtherDetails,omitempty"`
}

// TelephoneContactStructure represents the TelephoneContactStructure element
// A telephone number, using GovTalk constructs.
type TelephoneContactStructure struct {
	// Full telephone number including STD prefix.
	TelNationalNumber string `xml:"TelNationalNumber" json:"TelNationalNumber"`
	// Any additional extension number.
	TelExtensionNumber *string `xml:"TelExtensionNumber,omitempty" json:"TelExtensionNumber,omitempty"`
	// Two character country prefix, e.g. 44 for UK.
	TelCountryCode *string `xml:"TelCountryCode,omitempty" json:"TelCountryCode,omitempty"`
}

// EntityStructure represents the EntityStructure element
// Type for ENTITY.
type EntityStructure struct {
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassAttribute *string `xml:"nameOfClass,attr,omitempty" json:"nameOfClass,omitempty"`
	// Identifier of ENTITY.
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
}

// CodespaceStructure represents the CodespaceStructure element
// Type for CODESPACE.
type CodespaceStructure struct {
	EntityStructure
	// Prefix used to identify CODESPACE, e.g. 'napt', 'oda', 'ratp' etc.
	Xmlns string `xml:"Xmlns" json:"Xmlns"`
	// CODESPACE path. The URL associated which with the CODESPACE defines a unique system for identifying objects within the CODESPACE.
	XmlnsUrl *string `xml:"XmlnsUrl,omitempty" json:"XmlnsUrl,omitempty"`
	// Description of CODESPACE.
	Description *string `xml:"Description,omitempty" json:"Description,omitempty"`
	// Data Source of ENTITY.
	DataSourceRef *string `xml:"dataSourceRef,attr,omitempty" json:"dataSourceRef,omitempty"`
}

// Entity represents the Entity element
// Any data instance to be managed in an operational Version Management System. When several DATA SOURCEs coexist (multimodality and/or interoperability), an ENTITY has to be related to a given DATA SYSTEM in which it is defined.
type Entity struct {
	EntityStructure
}

// Codespace represents the Codespace element
// A system for uniquely identifying objects of a given type. Used for the distributed management of objects from many different sources. For example eachregion of a country may be given a different codespace to use when allocating stop identifieres which will be unique within a country.
type Codespace struct {
	CodespaceStructure
}

// VersionsInFrameRelStructure represents the versionsInFrame_RelStructure element
// Type for containment in frame of VERSION.
type VersionsInFrameRelStructure struct {
	ContainmentAggregationStructure
	Version []Version `xml:"Version" json:"Version"`
}

// EntitiesInVersionRelStructure represents the entitiesInVersion_RelStructure element
// Type for containment in ENTITY of ENTITY In VERSION.
type EntitiesInVersionRelStructure struct {
	ContainmentAggregationStructure
	VehicleTypeZoneRestriction []VehicleTypeZoneRestriction `xml:"VehicleTypeZoneRestriction,omitempty" json:"VehicleTypeZoneRestriction,omitempty"`
	MediumApplicationInstance []MediumApplicationInstance `xml:"MediumApplicationInstance,omitempty" json:"MediumApplicationInstance,omitempty"`
	CustomerPaymentMeans []CustomerPaymentMeans `xml:"CustomerPaymentMeans,omitempty" json:"CustomerPaymentMeans,omitempty"`
	ResidentialQualificationEligibility []ResidentialQualificationEligibility `xml:"ResidentialQualificationEligibility,omitempty" json:"ResidentialQualificationEligibility,omitempty"`
	CommercialProfileEligibility []CommercialProfileEligibility `xml:"CommercialProfileEligibility,omitempty" json:"CommercialProfileEligibility,omitempty"`
	UserProfileEligibility []UserProfileEligibility `xml:"UserProfileEligibility,omitempty" json:"UserProfileEligibility,omitempty"`
	ResidentialQualification []ResidentialQualification `xml:"ResidentialQualification,omitempty" json:"ResidentialQualification,omitempty"`
	AccessRightInProduct []AccessRightInProduct `xml:"AccessRightInProduct,omitempty" json:"AccessRightInProduct,omitempty"`
	FareStructureElementInSequence []FareStructureElementInSequence `xml:"FareStructureElementInSequence,omitempty" json:"FareStructureElementInSequence,omitempty"`
	StartTimeAtStopPoint []StartTimeAtStopPoint `xml:"StartTimeAtStopPoint,omitempty" json:"StartTimeAtStopPoint,omitempty"`
	ControllableElementInSequence []ControllableElementInSequence `xml:"ControllableElementInSequence,omitempty" json:"ControllableElementInSequence,omitempty"`
	FareElementInSequence []FareElementInSequence `xml:"FareElementInSequence,omitempty" json:"FareElementInSequence,omitempty"`
	Cell []Cell `xml:"Cell,omitempty" json:"Cell,omitempty"`
	CustomerPurchasePackagePrice []CustomerPurchasePackagePrice `xml:"CustomerPurchasePackagePrice,omitempty" json:"CustomerPurchasePackagePrice,omitempty"`
	ParkingPrice []ParkingPrice `xml:"ParkingPrice,omitempty" json:"ParkingPrice,omitempty"`
	SalesOfferPackagePrice []SalesOfferPackagePrice `xml:"SalesOfferPackagePrice,omitempty" json:"SalesOfferPackagePrice,omitempty"`
	FulfilmentMethodPrice []FulfilmentMethodPrice `xml:"FulfilmentMethodPrice,omitempty" json:"FulfilmentMethodPrice,omitempty"`
	CappingRulePrice []CappingRulePrice `xml:"CappingRulePrice,omitempty" json:"CappingRulePrice,omitempty"`
	FareProductPrice []FareProductPrice `xml:"FareProductPrice,omitempty" json:"FareProductPrice,omitempty"`
	FareStructureElementPrice []FareStructureElementPrice `xml:"FareStructureElementPrice,omitempty" json:"FareStructureElementPrice,omitempty"`
	TimeIntervalPrice []TimeIntervalPrice `xml:"TimeIntervalPrice,omitempty" json:"TimeIntervalPrice,omitempty"`
	TimeUnitPrice []TimeUnitPrice `xml:"TimeUnitPrice,omitempty" json:"TimeUnitPrice,omitempty"`
	QualityStructureFactorPrice []QualityStructureFactorPrice `xml:"QualityStructureFactorPrice,omitempty" json:"QualityStructureFactorPrice,omitempty"`
	ControllableElementPrice []ControllableElementPrice `xml:"ControllableElementPrice,omitempty" json:"ControllableElementPrice,omitempty"`
	ValidableElementPrice []ValidableElementPrice `xml:"ValidableElementPrice,omitempty" json:"ValidableElementPrice,omitempty"`
	UsageParameterPrice []UsageParameterPrice `xml:"UsageParameterPrice,omitempty" json:"UsageParameterPrice,omitempty"`
	DistanceMatrixElementPrice []DistanceMatrixElementPrice `xml:"DistanceMatrixElementPrice,omitempty" json:"DistanceMatrixElementPrice,omitempty"`
	GeographicalIntervalPrice []GeographicalIntervalPrice `xml:"GeographicalIntervalPrice,omitempty" json:"GeographicalIntervalPrice,omitempty"`
	GeographicalUnitPrice []GeographicalUnitPrice `xml:"GeographicalUnitPrice,omitempty" json:"GeographicalUnitPrice,omitempty"`
	SeriesConstraintPrice []SeriesConstraintPrice `xml:"SeriesConstraintPrice,omitempty" json:"SeriesConstraintPrice,omitempty"`
	DefaultDeadRunRunTime []DefaultDeadRunRunTime `xml:"DefaultDeadRunRunTime,omitempty" json:"DefaultDeadRunRunTime,omitempty"`
	DefaultServiceJourneyRunTime []DefaultServiceJourneyRunTime `xml:"DefaultServiceJourneyRunTime,omitempty" json:"DefaultServiceJourneyRunTime,omitempty"`
	TimeDemandProfileMember []TimeDemandProfileMember `xml:"TimeDemandProfileMember,omitempty" json:"TimeDemandProfileMember,omitempty"`
	JourneyPartPosition []JourneyPartPosition `xml:"JourneyPartPosition,omitempty" json:"JourneyPartPosition,omitempty"`
	EstimatedPassingTime []EstimatedPassingTime `xml:"EstimatedPassingTime,omitempty" json:"EstimatedPassingTime,omitempty"`
	ObservedPassingTime []ObservedPassingTime `xml:"ObservedPassingTime,omitempty" json:"ObservedPassingTime,omitempty"`
	TargetPassingTime []TargetPassingTime `xml:"TargetPassingTime,omitempty" json:"TargetPassingTime,omitempty"`
	DatedPassingTime []DatedPassingTime `xml:"DatedPassingTime,omitempty" json:"DatedPassingTime,omitempty"`
	TimetabledPassingTime []TimetabledPassingTime `xml:"TimetabledPassingTime,omitempty" json:"TimetabledPassingTime,omitempty"`
	PassingTime []PassingTime `xml:"PassingTime,omitempty" json:"PassingTime,omitempty"`
	InterchangeRuleTiming []InterchangeRuleTiming `xml:"InterchangeRuleTiming,omitempty" json:"InterchangeRuleTiming,omitempty"`
	ParkingCapacity []ParkingCapacity `xml:"ParkingCapacity,omitempty" json:"ParkingCapacity,omitempty"`
	ParkingProperties []ParkingProperties `xml:"ParkingProperties,omitempty" json:"ParkingProperties,omitempty"`
	VehicleTypePreference []VehicleTypePreference `xml:"VehicleTypePreference,omitempty" json:"VehicleTypePreference,omitempty"`
	VehiclePositionAlignment []VehiclePositionAlignment `xml:"VehiclePositionAlignment,omitempty" json:"VehiclePositionAlignment,omitempty"`
	VehicleQuayAlignment []VehicleQuayAlignment `xml:"VehicleQuayAlignment,omitempty" json:"VehicleQuayAlignment,omitempty"`
	FlexiblePointProperties []FlexiblePointProperties `xml:"FlexiblePointProperties,omitempty" json:"FlexiblePointProperties,omitempty"`
	FlexibleLinkProperties []FlexibleLinkProperties `xml:"FlexibleLinkProperties,omitempty" json:"FlexibleLinkProperties,omitempty"`
	JourneyPatternHeadway []JourneyPatternHeadway `xml:"JourneyPatternHeadway,omitempty" json:"JourneyPatternHeadway,omitempty"`
	JourneyPatternLayover []JourneyPatternLayover `xml:"JourneyPatternLayover,omitempty" json:"JourneyPatternLayover,omitempty"`
	JourneyPatternRunTime []JourneyPatternRunTime `xml:"JourneyPatternRunTime,omitempty" json:"JourneyPatternRunTime,omitempty"`
	JourneyPatternWaitTime []JourneyPatternWaitTime `xml:"JourneyPatternWaitTime,omitempty" json:"JourneyPatternWaitTime,omitempty"`
	TurnaroundTimeLimitTime []TurnaroundTimeLimitTime `xml:"TurnaroundTimeLimitTime,omitempty" json:"TurnaroundTimeLimitTime,omitempty"`
	VehicleJourneyLayover []VehicleJourneyLayover `xml:"VehicleJourneyLayover,omitempty" json:"VehicleJourneyLayover,omitempty"`
	VehicleJourneyRunTime []VehicleJourneyRunTime `xml:"VehicleJourneyRunTime,omitempty" json:"VehicleJourneyRunTime,omitempty"`
	VehicleJourneyWaitTime []VehicleJourneyWaitTime `xml:"VehicleJourneyWaitTime,omitempty" json:"VehicleJourneyWaitTime,omitempty"`
	VehicleJourneyHeadway []VehicleJourneyHeadway `xml:"VehicleJourneyHeadway,omitempty" json:"VehicleJourneyHeadway,omitempty"`
	JourneyHeadway []JourneyHeadway `xml:"JourneyHeadway,omitempty" json:"JourneyHeadway,omitempty"`
	JourneyLayover []JourneyLayover `xml:"JourneyLayover,omitempty" json:"JourneyLayover,omitempty"`
	JourneyRunTime []JourneyRunTime `xml:"JourneyRunTime,omitempty" json:"JourneyRunTime,omitempty"`
	JourneyWaitTime []JourneyWaitTime `xml:"JourneyWaitTime,omitempty" json:"JourneyWaitTime,omitempty"`
	MediumAccessDeviceSecurityListing []MediumAccessDeviceSecurityListing `xml:"MediumAccessDeviceSecurityListing,omitempty" json:"MediumAccessDeviceSecurityListing,omitempty"`
	TravelDocumentSecurityListing []TravelDocumentSecurityListing `xml:"TravelDocumentSecurityListing,omitempty" json:"TravelDocumentSecurityListing,omitempty"`
	RetailDeviceSecurityListing []RetailDeviceSecurityListing `xml:"RetailDeviceSecurityListing,omitempty" json:"RetailDeviceSecurityListing,omitempty"`
	FareContractSecurityListing []FareContractSecurityListing `xml:"FareContractSecurityListing,omitempty" json:"FareContractSecurityListing,omitempty"`
	CustomerSecurityListing []CustomerSecurityListing `xml:"CustomerSecurityListing,omitempty" json:"CustomerSecurityListing,omitempty"`
	CustomerAccountSecurityListing []CustomerAccountSecurityListing `xml:"CustomerAccountSecurityListing,omitempty" json:"CustomerAccountSecurityListing,omitempty"`
	VehicleEquipmentProfileMember []VehicleEquipmentProfileMember `xml:"VehicleEquipmentProfileMember,omitempty" json:"VehicleEquipmentProfileMember,omitempty"`
	StairFlight []StairFlight `xml:"StairFlight,omitempty" json:"StairFlight,omitempty"`
	OnboardStay []OnboardStay `xml:"OnboardStay,omitempty" json:"OnboardStay,omitempty"`
	Accommodation []Accommodation `xml:"Accommodation,omitempty" json:"Accommodation,omitempty"`
	ServiceLinkInJourneyPattern []ServiceLinkInJourneyPattern `xml:"ServiceLinkInJourneyPattern,omitempty" json:"ServiceLinkInJourneyPattern,omitempty"`
	PathLinkInSequence []PathLinkInSequence `xml:"PathLinkInSequence,omitempty" json:"PathLinkInSequence,omitempty"`
	LinkInJourneyPattern []LinkInJourneyPattern `xml:"LinkInJourneyPattern,omitempty" json:"LinkInJourneyPattern,omitempty"`
	TimingLinkInJourneyPattern []TimingLinkInJourneyPattern `xml:"TimingLinkInJourneyPattern,omitempty" json:"TimingLinkInJourneyPattern,omitempty"`
	VehicleMeetingPointInPath []VehicleMeetingPointInPath `xml:"VehicleMeetingPointInPath,omitempty" json:"VehicleMeetingPointInPath,omitempty"`
	FarePointInPattern []FarePointInPattern `xml:"FarePointInPattern,omitempty" json:"FarePointInPattern,omitempty"`
	StopPointInJourneyPattern []StopPointInJourneyPattern `xml:"StopPointInJourneyPattern,omitempty" json:"StopPointInJourneyPattern,omitempty"`
	PlaceInSequence []PlaceInSequence `xml:"PlaceInSequence,omitempty" json:"PlaceInSequence,omitempty"`
	PointInJourneyPattern []PointInJourneyPattern `xml:"PointInJourneyPattern,omitempty" json:"PointInJourneyPattern,omitempty"`
	PointOnRoute []PointOnRoute `xml:"PointOnRoute,omitempty" json:"PointOnRoute,omitempty"`
	TimingPointInJourneyPattern []TimingPointInJourneyPattern `xml:"TimingPointInJourneyPattern,omitempty" json:"TimingPointInJourneyPattern,omitempty"`
	PointOnLineSection []PointOnLineSection `xml:"PointOnLineSection,omitempty" json:"PointOnLineSection,omitempty"`
	PointOnSection []PointOnSection `xml:"PointOnSection,omitempty" json:"PointOnSection,omitempty"`
	SectionInSequence []SectionInSequence `xml:"SectionInSequence,omitempty" json:"SectionInSequence,omitempty"`
	LinkOnSection []LinkOnSection `xml:"LinkOnSection,omitempty" json:"LinkOnSection,omitempty"`
	CodespaceAssignment []CodespaceAssignment `xml:"CodespaceAssignment,omitempty" json:"CodespaceAssignment,omitempty"`
	RelatedOrganisation []RelatedOrganisation `xml:"RelatedOrganisation,omitempty" json:"RelatedOrganisation,omitempty"`
	PointOnLink []PointOnLink `xml:"PointOnLink,omitempty" json:"PointOnLink,omitempty"`
	AccessibilityAssessment []AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	AlternativeName []AlternativeName `xml:"AlternativeName,omitempty" json:"AlternativeName,omitempty"`
	GroupConstraintMember []GroupConstraintMember `xml:"GroupConstraintMember,omitempty" json:"GroupConstraintMember,omitempty"`
	AlternativeText []AlternativeText `xml:"AlternativeText,omitempty" json:"AlternativeText,omitempty"`
	Fleet []Fleet `xml:"Fleet,omitempty" json:"Fleet,omitempty"`
	IndividualPassengerInfo []IndividualPassengerInfo `xml:"IndividualPassengerInfo,omitempty" json:"IndividualPassengerInfo,omitempty"`
	VehiclePoolingDriverInfo []VehiclePoolingDriverInfo `xml:"VehiclePoolingDriverInfo,omitempty" json:"VehiclePoolingDriverInfo,omitempty"`
	IndividualTraveller []IndividualTraveller `xml:"IndividualTraveller,omitempty" json:"IndividualTraveller,omitempty"`
	ParkingBayCondition []ParkingBayCondition `xml:"ParkingBayCondition,omitempty" json:"ParkingBayCondition,omitempty"`
	RentalAvailability []RentalAvailability `xml:"RentalAvailability,omitempty" json:"RentalAvailability,omitempty"`
	Smartcard []Smartcard `xml:"Smartcard,omitempty" json:"Smartcard,omitempty"`
	EmvCard []EmvCard `xml:"EmvCard,omitempty" json:"EmvCard,omitempty"`
	MobileDevice []MobileDevice `xml:"MobileDevice,omitempty" json:"MobileDevice,omitempty"`
	MediumAccessDevice []MediumAccessDevice `xml:"MediumAccessDevice,omitempty" json:"MediumAccessDevice,omitempty"`
	ServiceAccessCode []ServiceAccessCode `xml:"ServiceAccessCode,omitempty" json:"ServiceAccessCode,omitempty"`
	TravelDocument []TravelDocument `xml:"TravelDocument,omitempty" json:"TravelDocument,omitempty"`
	CustomerAccount []CustomerAccount `xml:"CustomerAccount,omitempty" json:"CustomerAccount,omitempty"`
	SalesTransaction []SalesTransaction `xml:"SalesTransaction,omitempty" json:"SalesTransaction,omitempty"`
	OfferedTravelSpecification []OfferedTravelSpecification `xml:"OfferedTravelSpecification,omitempty" json:"OfferedTravelSpecification,omitempty"`
	RequestedTravelSpecification []RequestedTravelSpecification `xml:"RequestedTravelSpecification,omitempty" json:"RequestedTravelSpecification,omitempty"`
	TravelSpecification []TravelSpecification1 `xml:"TravelSpecification,omitempty" json:"TravelSpecification,omitempty"`
	NetexOrgUkNetexTravelSpecification []TravelSpecification2 `xml:"TravelSpecification_,omitempty" json:"TravelSpecification_,omitempty"`
	FareContractEntry []FareContractEntry `xml:"FareContractEntry_,omitempty" json:"FareContractEntry_,omitempty"`
	FareContract []FareContract `xml:"FareContract,omitempty" json:"FareContract,omitempty"`
	Customer []Customer `xml:"Customer,omitempty" json:"Customer,omitempty"`
	ParkingTariff []ParkingTariff `xml:"ParkingTariff,omitempty" json:"ParkingTariff,omitempty"`
	GroupOfSalesOfferPackages []GroupOfSalesOfferPackages `xml:"GroupOfSalesOfferPackages,omitempty" json:"GroupOfSalesOfferPackages,omitempty"`
	DistributionChannel []DistributionChannel `xml:"DistributionChannel,omitempty" json:"DistributionChannel,omitempty"`
	Tariff []Tariff `xml:"Tariff,omitempty" json:"Tariff,omitempty"`
	CustomerPurchasePackage []CustomerPurchasePackage `xml:"CustomerPurchasePackage,omitempty" json:"CustomerPurchasePackage,omitempty"`
	SalesOfferPackage []SalesOfferPackage `xml:"SalesOfferPackage,omitempty" json:"SalesOfferPackage,omitempty"`
	FulfilmentMethod []FulfilmentMethod `xml:"FulfilmentMethod,omitempty" json:"FulfilmentMethod,omitempty"`
	CappingRule []CappingRule `xml:"CappingRule,omitempty" json:"CappingRule,omitempty"`
	EntitlementProduct []EntitlementProduct `xml:"EntitlementProduct,omitempty" json:"EntitlementProduct,omitempty"`
	SupplementProduct []SupplementProduct `xml:"SupplementProduct,omitempty" json:"SupplementProduct,omitempty"`
	PreassignedFareProduct []PreassignedFareProduct `xml:"PreassignedFareProduct,omitempty" json:"PreassignedFareProduct,omitempty"`
	AmountOfPriceUnitProduct []AmountOfPriceUnitProduct `xml:"AmountOfPriceUnitProduct,omitempty" json:"AmountOfPriceUnitProduct,omitempty"`
	CappedDiscountRight []CappedDiscountRight `xml:"CappedDiscountRight,omitempty" json:"CappedDiscountRight,omitempty"`
	UsageDiscountRight []UsageDiscountRight `xml:"UsageDiscountRight,omitempty" json:"UsageDiscountRight,omitempty"`
	ThirdPartyProduct []ThirdPartyProduct `xml:"ThirdPartyProduct,omitempty" json:"ThirdPartyProduct,omitempty"`
	SaleDiscountRight []SaleDiscountRight `xml:"SaleDiscountRight,omitempty" json:"SaleDiscountRight,omitempty"`
	ServiceAccessRight []ServiceAccessRight1 `xml:"ServiceAccessRight,omitempty" json:"ServiceAccessRight,omitempty"`
	NetexOrgUkNetexServiceAccessRight []ServiceAccessRight2 `xml:"ServiceAccessRight_,omitempty" json:"ServiceAccessRight_,omitempty"`
	TimeInterval []TimeInterval `xml:"TimeInterval,omitempty" json:"TimeInterval,omitempty"`
	FareQuotaFactor []FareQuotaFactor `xml:"FareQuotaFactor,omitempty" json:"FareQuotaFactor,omitempty"`
	FareDemandFactor []FareDemandFactor `xml:"FareDemandFactor,omitempty" json:"FareDemandFactor,omitempty"`
	QualityStructureFactor []QualityStructureFactor `xml:"QualityStructureFactor,omitempty" json:"QualityStructureFactor,omitempty"`
	ControllableElement []ControllableElement `xml:"ControllableElement,omitempty" json:"ControllableElement,omitempty"`
	ValidableElement []ValidableElement `xml:"ValidableElement,omitempty" json:"ValidableElement,omitempty"`
	AdditionalDriverOption []AdditionalDriverOption `xml:"AdditionalDriverOption,omitempty" json:"AdditionalDriverOption,omitempty"`
	RentalOption []RentalOption `xml:"RentalOption,omitempty" json:"RentalOption,omitempty"`
	RentalPenaltyPolicy []RentalPenaltyPolicy `xml:"RentalPenaltyPolicy,omitempty" json:"RentalPenaltyPolicy,omitempty"`
	VehiclePoolerProfile []VehiclePoolerProfile `xml:"VehiclePoolerProfile,omitempty" json:"VehiclePoolerProfile,omitempty"`
	SalesOfferPackageEntitlementRequired []SalesOfferPackageEntitlementRequired `xml:"SalesOfferPackageEntitlementRequired,omitempty" json:"SalesOfferPackageEntitlementRequired,omitempty"`
	SalesOfferPackageEntitlementGiven []SalesOfferPackageEntitlementGiven `xml:"SalesOfferPackageEntitlementGiven,omitempty" json:"SalesOfferPackageEntitlementGiven,omitempty"`
	MinimumStay []MinimumStay `xml:"MinimumStay,omitempty" json:"MinimumStay,omitempty"`
	Interchanging []Interchanging `xml:"Interchanging,omitempty" json:"Interchanging,omitempty"`
	Suspending []Suspending `xml:"Suspending,omitempty" json:"Suspending,omitempty"`
	UsageValidityPeriod []UsageValidityPeriod `xml:"UsageValidityPeriod,omitempty" json:"UsageValidityPeriod,omitempty"`
	FrequencyOfUse []FrequencyOfUse `xml:"FrequencyOfUse,omitempty" json:"FrequencyOfUse,omitempty"`
	StepLimit []StepLimit `xml:"StepLimit,omitempty" json:"StepLimit,omitempty"`
	Routing []Routing `xml:"Routing,omitempty" json:"Routing,omitempty"`
	RoundTrip []RoundTrip `xml:"RoundTrip,omitempty" json:"RoundTrip,omitempty"`
	LuggageAllowance []LuggageAllowance `xml:"LuggageAllowance,omitempty" json:"LuggageAllowance,omitempty"`
	EntitlementRequired []EntitlementRequired `xml:"EntitlementRequired,omitempty" json:"EntitlementRequired,omitempty"`
	EntitlementGiven []EntitlementGiven `xml:"EntitlementGiven,omitempty" json:"EntitlementGiven,omitempty"`
	EligibilityChangePolicy []EligibilityChangePolicy `xml:"EligibilityChangePolicy,omitempty" json:"EligibilityChangePolicy,omitempty"`
	CompanionProfile []CompanionProfile `xml:"CompanionProfile,omitempty" json:"CompanionProfile,omitempty"`
	GroupTicket []GroupTicket `xml:"GroupTicket,omitempty" json:"GroupTicket,omitempty"`
	CommercialProfile []CommercialProfile `xml:"CommercialProfile,omitempty" json:"CommercialProfile,omitempty"`
	UserProfile []UserProfile `xml:"UserProfile,omitempty" json:"UserProfile,omitempty"`
	Subscribing []Subscribing `xml:"Subscribing,omitempty" json:"Subscribing,omitempty"`
	PenaltyPolicy []PenaltyPolicy `xml:"PenaltyPolicy,omitempty" json:"PenaltyPolicy,omitempty"`
	ChargingPolicy []ChargingPolicy `xml:"ChargingPolicy,omitempty" json:"ChargingPolicy,omitempty"`
	Cancelling []Cancelling `xml:"Cancelling,omitempty" json:"Cancelling,omitempty"`
	Reserving []Reserving `xml:"Reserving,omitempty" json:"Reserving,omitempty"`
	PurchaseWindow []PurchaseWindow `xml:"PurchaseWindow,omitempty" json:"PurchaseWindow,omitempty"`
	Transferability []Transferability `xml:"Transferability,omitempty" json:"Transferability,omitempty"`
	Replacing []Replacing `xml:"Replacing,omitempty" json:"Replacing,omitempty"`
	Refunding []Refunding `xml:"Refunding,omitempty" json:"Refunding,omitempty"`
	Exchanging []Exchanging `xml:"Exchanging,omitempty" json:"Exchanging,omitempty"`
	Reselling []Reselling `xml:"Reselling,omitempty" json:"Reselling,omitempty"`
	GeographicalInterval []GeographicalInterval `xml:"GeographicalInterval,omitempty" json:"GeographicalInterval,omitempty"`
	SeriesConstraint []SeriesConstraint `xml:"SeriesConstraint,omitempty" json:"SeriesConstraint,omitempty"`
	CustomerPurchasePackageElement []CustomerPurchasePackageElement `xml:"CustomerPurchasePackageElement,omitempty" json:"CustomerPurchasePackageElement,omitempty"`
	ParkingChargeBand []ParkingChargeBand `xml:"ParkingChargeBand,omitempty" json:"ParkingChargeBand,omitempty"`
	SalesOfferPackageElement []SalesOfferPackageElement `xml:"SalesOfferPackageElement,omitempty" json:"SalesOfferPackageElement,omitempty"`
	FareStructureElement []FareStructureElement `xml:"FareStructureElement,omitempty" json:"FareStructureElement,omitempty"`
	TimeStructureFactor []TimeStructureFactor `xml:"TimeStructureFactor,omitempty" json:"TimeStructureFactor,omitempty"`
	TimeUnit []TimeUnit `xml:"TimeUnit,omitempty" json:"TimeUnit,omitempty"`
	DistanceMatrixElement []DistanceMatrixElement `xml:"DistanceMatrixElement,omitempty" json:"DistanceMatrixElement,omitempty"`
	GeographicalStructureFactor []GeographicalStructureFactor `xml:"GeographicalStructureFactor,omitempty" json:"GeographicalStructureFactor,omitempty"`
	GeographicalUnit []GeographicalUnit `xml:"GeographicalUnit,omitempty" json:"GeographicalUnit,omitempty"`
	FareUnit []FareUnit `xml:"FareUnit,omitempty" json:"FareUnit,omitempty"`
	FareInterval []FareInterval `xml:"FareInterval,omitempty" json:"FareInterval,omitempty"`
	FareStructureFactor []FareStructureFactor `xml:"FareStructureFactor,omitempty" json:"FareStructureFactor,omitempty"`
	PricingService []PricingService `xml:"PricingService,omitempty" json:"PricingService,omitempty"`
	LimitingRuleInContext []LimitingRuleInContext `xml:"LimitingRuleInContext,omitempty" json:"LimitingRuleInContext,omitempty"`
	LimitingRule []LimitingRule `xml:"LimitingRule,omitempty" json:"LimitingRule,omitempty"`
	DiscountingRule []DiscountingRule `xml:"DiscountingRule,omitempty" json:"DiscountingRule,omitempty"`
	PricingRule []PricingRule `xml:"PricingRule,omitempty" json:"PricingRule,omitempty"`
	MonthValidityOffset []MonthValidityOffset `xml:"MonthValidityOffset,omitempty" json:"MonthValidityOffset,omitempty"`
	Rounding []Rounding `xml:"Rounding,omitempty" json:"Rounding,omitempty"`
	PricingParameterSet []PricingParameterSet `xml:"PricingParameterSet,omitempty" json:"PricingParameterSet,omitempty"`
	ReliefOpportunity []ReliefOpportunity `xml:"ReliefOpportunity,omitempty" json:"ReliefOpportunity,omitempty"`
	CourseOfJourneys []CourseOfJourneys `xml:"CourseOfJourneys,omitempty" json:"CourseOfJourneys,omitempty"`
	VehicleServicePart []VehicleServicePart `xml:"VehicleServicePart,omitempty" json:"VehicleServicePart,omitempty"`
	VehicleService []VehicleService `xml:"VehicleService,omitempty" json:"VehicleService,omitempty"`
	TrainBlockPart []TrainBlockPart `xml:"TrainBlockPart,omitempty" json:"TrainBlockPart,omitempty"`
	CompoundBlock []CompoundBlock `xml:"CompoundBlock,omitempty" json:"CompoundBlock,omitempty"`
	BlockPart []BlockPart `xml:"BlockPart,omitempty" json:"BlockPart,omitempty"`
	TrainBlock []TrainBlock `xml:"TrainBlock,omitempty" json:"TrainBlock,omitempty"`
	Block []Block `xml:"Block,omitempty" json:"Block,omitempty"`
	DriverTripTime []DriverTripTime `xml:"DriverTripTime,omitempty" json:"DriverTripTime,omitempty"`
	DriverTrip []DriverTrip `xml:"DriverTrip,omitempty" json:"DriverTrip,omitempty"`
	DutyPart []DutyPart `xml:"DutyPart,omitempty" json:"DutyPart,omitempty"`
	AccountableElement []AccountableElement `xml:"AccountableElement,omitempty" json:"AccountableElement,omitempty"`
	Duty []Duty `xml:"Duty,omitempty" json:"Duty,omitempty"`
	TimeDemandProfile []TimeDemandProfile `xml:"TimeDemandProfile,omitempty" json:"TimeDemandProfile,omitempty"`
	VehicleTypeStopAssignment []VehicleTypeStopAssignment `xml:"VehicleTypeStopAssignment,omitempty" json:"VehicleTypeStopAssignment,omitempty"`
	TrainComponentLabelAssignment []TrainComponentLabelAssignment `xml:"TrainComponentLabelAssignment,omitempty" json:"TrainComponentLabelAssignment,omitempty"`
	TrainNumber []TrainNumber `xml:"TrainNumber,omitempty" json:"TrainNumber,omitempty"`
	FlexibleServiceProperties []FlexibleServiceProperties `xml:"FlexibleServiceProperties,omitempty" json:"FlexibleServiceProperties,omitempty"`
	JourneyPartCouple []JourneyPartCouple `xml:"JourneyPartCouple,omitempty" json:"JourneyPartCouple,omitempty"`
	CoupledJourney []CoupledJourney `xml:"CoupledJourney,omitempty" json:"CoupledJourney,omitempty"`
	JourneyPart []JourneyPart `xml:"JourneyPart,omitempty" json:"JourneyPart,omitempty"`
	InterchangeRule []InterchangeRule `xml:"InterchangeRule,omitempty" json:"InterchangeRule,omitempty"`
	ServiceJourneyPatternInterchange []ServiceJourneyPatternInterchange `xml:"ServiceJourneyPatternInterchange,omitempty" json:"ServiceJourneyPatternInterchange,omitempty"`
	ServiceJourneyInterchange []ServiceJourneyInterchange `xml:"ServiceJourneyInterchange,omitempty" json:"ServiceJourneyInterchange,omitempty"`
	DefaultInterchange []DefaultInterchange `xml:"DefaultInterchange,omitempty" json:"DefaultInterchange,omitempty"`
	JourneyMeeting []JourneyMeeting `xml:"JourneyMeeting,omitempty" json:"JourneyMeeting,omitempty"`
	SingleJourney []SingleJourney `xml:"SingleJourney,omitempty" json:"SingleJourney,omitempty"`
	DatedSpecialService []DatedSpecialService `xml:"DatedSpecialService,omitempty" json:"DatedSpecialService,omitempty"`
	NormalDatedVehicleJourney []NormalDatedVehicleJourney `xml:"NormalDatedVehicleJourney,omitempty" json:"NormalDatedVehicleJourney,omitempty"`
	DatedVehicleJourney []DatedVehicleJourney `xml:"DatedVehicleJourney,omitempty" json:"DatedVehicleJourney,omitempty"`
	SpecialService []SpecialService `xml:"SpecialService,omitempty" json:"SpecialService,omitempty"`
	DeadRun []DeadRun `xml:"DeadRun,omitempty" json:"DeadRun,omitempty"`
	ServiceJourney []ServiceJourney `xml:"ServiceJourney,omitempty" json:"ServiceJourney,omitempty"`
	DatedServiceJourney []DatedServiceJourney `xml:"DatedServiceJourney,omitempty" json:"DatedServiceJourney,omitempty"`
	TemplateServiceJourney []TemplateServiceJourney `xml:"TemplateServiceJourney,omitempty" json:"TemplateServiceJourney,omitempty"`
	TemplateVehicleJourney []TemplateVehicleJourney `xml:"TemplateVehicleJourney,omitempty" json:"TemplateVehicleJourney,omitempty"`
	VehicleJourney []VehicleJourney `xml:"VehicleJourney,omitempty" json:"VehicleJourney,omitempty"`
	PointOfInterestClassificationHierarchy []PointOfInterestClassificationHierarchy `xml:"PointOfInterestClassificationHierarchy,omitempty" json:"PointOfInterestClassificationHierarchy,omitempty"`
	TimeDemandType []TimeDemandType `xml:"TimeDemandType,omitempty" json:"TimeDemandType,omitempty"`
	VehicleJourneyStopAssignment []VehicleJourneyStopAssignment `xml:"VehicleJourneyStopAssignment,omitempty" json:"VehicleJourneyStopAssignment,omitempty"`
	FlexibleStopAssignment []FlexibleStopAssignment `xml:"FlexibleStopAssignment,omitempty" json:"FlexibleStopAssignment,omitempty"`
	NavigationPathAssignment []NavigationPathAssignment `xml:"NavigationPathAssignment,omitempty" json:"NavigationPathAssignment,omitempty"`
	TrainStopAssignment []TrainStopAssignment `xml:"TrainStopAssignment,omitempty" json:"TrainStopAssignment,omitempty"`
	DynamicStopAssignment []DynamicStopAssignment `xml:"DynamicStopAssignment,omitempty" json:"DynamicStopAssignment,omitempty"`
	PassengerStopAssignment []PassengerStopAssignment `xml:"PassengerStopAssignment,omitempty" json:"PassengerStopAssignment,omitempty"`
	LogicalDisplay []LogicalDisplay `xml:"LogicalDisplay,omitempty" json:"LogicalDisplay,omitempty"`
	LineNetwork []LineNetwork `xml:"LineNetwork,omitempty" json:"LineNetwork,omitempty"`
	ModeRestrictionAssessment []ModeRestrictionAssessment `xml:"ModeRestrictionAssessment,omitempty" json:"ModeRestrictionAssessment,omitempty"`
	RouteInstruction []RouteInstruction `xml:"RouteInstruction,omitempty" json:"RouteInstruction,omitempty"`
	TrainComponent []TrainComponent `xml:"TrainComponent,omitempty" json:"TrainComponent,omitempty"`
	TrainElement []TrainElement `xml:"TrainElement,omitempty" json:"TrainElement,omitempty"`
	CompoundTrain []CompoundTrain `xml:"CompoundTrain,omitempty" json:"CompoundTrain,omitempty"`
	Train []Train `xml:"Train,omitempty" json:"Train,omitempty"`
	CycleModelProfile []CycleModelProfile `xml:"CycleModelProfile,omitempty" json:"CycleModelProfile,omitempty"`
	CarModelProfile []CarModelProfile `xml:"CarModelProfile,omitempty" json:"CarModelProfile,omitempty"`
	Whitelist []Whitelist `xml:"Whitelist,omitempty" json:"Whitelist,omitempty"`
	Blacklist []Blacklist `xml:"Blacklist,omitempty" json:"Blacklist,omitempty"`
	SchematicMap []SchematicMap `xml:"SchematicMap,omitempty" json:"SchematicMap,omitempty"`
	PersonalModeOfOperation []PersonalModeOfOperation `xml:"PersonalModeOfOperation,omitempty" json:"PersonalModeOfOperation,omitempty"`
	AlternativeModeOfOperation []AlternativeModeOfOperation `xml:"AlternativeModeOfOperation,omitempty" json:"AlternativeModeOfOperation,omitempty"`
	VehiclePooling []VehiclePooling `xml:"VehiclePooling,omitempty" json:"VehiclePooling,omitempty"`
	VehicleSharing []VehicleSharing `xml:"VehicleSharing,omitempty" json:"VehicleSharing,omitempty"`
	VehicleRental []VehicleRental `xml:"VehicleRental,omitempty" json:"VehicleRental,omitempty"`
	FlexibleOperation []FlexibleOperation `xml:"FlexibleOperation,omitempty" json:"FlexibleOperation,omitempty"`
	ScheduledOperation []ScheduledOperation `xml:"ScheduledOperation,omitempty" json:"ScheduledOperation,omitempty"`
	ChargingEquipmentProfile []ChargingEquipmentProfile `xml:"ChargingEquipmentProfile,omitempty" json:"ChargingEquipmentProfile,omitempty"`
	VehicleEquipmentProfile []VehicleEquipmentProfile `xml:"VehicleEquipmentProfile,omitempty" json:"VehicleEquipmentProfile,omitempty"`
	VehicleModel []VehicleModel `xml:"VehicleModel,omitempty" json:"VehicleModel,omitempty"`
	Vehicle []Vehicle `xml:"Vehicle,omitempty" json:"Vehicle,omitempty"`
	PassengerCarryingRequirementsView []PassengerCarryingRequirementsView `xml:"PassengerCarryingRequirementsView,omitempty" json:"PassengerCarryingRequirementsView,omitempty"`
	FacilityRequirement []FacilityRequirement `xml:"FacilityRequirement,omitempty" json:"FacilityRequirement,omitempty"`
	VehicleManoeuvringRequirement []VehicleManoeuvringRequirement `xml:"VehicleManoeuvringRequirement,omitempty" json:"VehicleManoeuvringRequirement,omitempty"`
	PassengerCarryingRequirement []PassengerCarryingRequirement `xml:"PassengerCarryingRequirement,omitempty" json:"PassengerCarryingRequirement,omitempty"`
	AcceptedDriverPermit []AcceptedDriverPermit `xml:"AcceptedDriverPermit,omitempty" json:"AcceptedDriverPermit,omitempty"`
	SimpleVehicleType []SimpleVehicleType `xml:"SimpleVehicleType,omitempty" json:"SimpleVehicleType,omitempty"`
	VehicleType []VehicleType `xml:"VehicleType,omitempty" json:"VehicleType,omitempty"`
	TransportType []TransportType `xml:"TransportType,omitempty" json:"TransportType,omitempty"`
	EquipmentPosition []EquipmentPosition `xml:"EquipmentPosition,omitempty" json:"EquipmentPosition,omitempty"`
	Level []Level `xml:"Level,omitempty" json:"Level,omitempty"`
	AllowedLineDirection []AllowedLineDirection `xml:"AllowedLineDirection,omitempty" json:"AllowedLineDirection,omitempty"`
	DestinationDisplayVariant []DestinationDisplayVariant `xml:"DestinationDisplayVariant,omitempty" json:"DestinationDisplayVariant,omitempty"`
	DestinationDisplay []DestinationDisplay `xml:"DestinationDisplay,omitempty" json:"DestinationDisplay,omitempty"`
	FlexibleLine []FlexibleLine `xml:"FlexibleLine,omitempty" json:"FlexibleLine,omitempty"`
	Line []Line `xml:"Line,omitempty" json:"Line,omitempty"`
	DeliveryVariant []DeliveryVariant `xml:"DeliveryVariant,omitempty" json:"DeliveryVariant,omitempty"`
	Notice []Notice `xml:"Notice,omitempty" json:"Notice,omitempty"`
	OperationalContext []OperationalContext `xml:"OperationalContext,omitempty" json:"OperationalContext,omitempty"`
	OnlineService []OnlineService `xml:"OnlineService,omitempty" json:"OnlineService,omitempty"`
	VehicleRentalService []VehicleRentalService `xml:"VehicleRentalService,omitempty" json:"VehicleRentalService,omitempty"`
	VehicleSharingService []VehicleSharingService `xml:"VehicleSharingService,omitempty" json:"VehicleSharingService,omitempty"`
	ChauffeuredVehicleService []ChauffeuredVehicleService `xml:"ChauffeuredVehicleService,omitempty" json:"ChauffeuredVehicleService,omitempty"`
	CarPoolingService []CarPoolingService `xml:"CarPoolingService,omitempty" json:"CarPoolingService,omitempty"`
	TaxiService []TaxiService `xml:"TaxiService,omitempty" json:"TaxiService,omitempty"`
	AssistanceBookingService []AssistanceBookingService `xml:"AssistanceBookingService,omitempty" json:"AssistanceBookingService,omitempty"`
	CateringService []CateringService `xml:"CateringService,omitempty" json:"CateringService,omitempty"`
	RetailService []RetailService `xml:"RetailService,omitempty" json:"RetailService,omitempty"`
	MoneyService []MoneyService `xml:"MoneyService,omitempty" json:"MoneyService,omitempty"`
	HireService []HireService `xml:"HireService,omitempty" json:"HireService,omitempty"`
	CommunicationService []CommunicationService `xml:"CommunicationService,omitempty" json:"CommunicationService,omitempty"`
	MeetingPointService []MeetingPointService `xml:"MeetingPointService,omitempty" json:"MeetingPointService,omitempty"`
	LostPropertyService []LostPropertyService `xml:"LostPropertyService,omitempty" json:"LostPropertyService,omitempty"`
	LeftLuggageService []LeftLuggageService `xml:"LeftLuggageService,omitempty" json:"LeftLuggageService,omitempty"`
	ComplaintsService []ComplaintsService `xml:"ComplaintsService,omitempty" json:"ComplaintsService,omitempty"`
	CustomerService []CustomerService `xml:"CustomerService,omitempty" json:"CustomerService,omitempty"`
	LuggageService []LuggageService `xml:"LuggageService,omitempty" json:"LuggageService,omitempty"`
	AssistanceService []AssistanceService `xml:"AssistanceService,omitempty" json:"AssistanceService,omitempty"`
	TicketingService []TicketingService `xml:"TicketingService,omitempty" json:"TicketingService,omitempty"`
	RetailDevice []RetailDevice `xml:"RetailDevice,omitempty" json:"RetailDevice,omitempty"`
	BatteryEquipment []BatteryEquipment `xml:"BatteryEquipment,omitempty" json:"BatteryEquipment,omitempty"`
	VehicleReleaseEquipment []VehicleReleaseEquipment `xml:"VehicleReleaseEquipment,omitempty" json:"VehicleReleaseEquipment,omitempty"`
	RefuellingEquipment []RefuellingEquipment `xml:"RefuellingEquipment,omitempty" json:"RefuellingEquipment,omitempty"`
	VehicleChargingEquipment []VehicleChargingEquipment `xml:"VehicleChargingEquipment,omitempty" json:"VehicleChargingEquipment,omitempty"`
	CycleStorageEquipment []CycleStorageEquipment `xml:"CycleStorageEquipment,omitempty" json:"CycleStorageEquipment,omitempty"`
	SeatingEquipment []SeatingEquipment `xml:"SeatingEquipment,omitempty" json:"SeatingEquipment,omitempty"`
	ShelterEquipment []ShelterEquipment `xml:"ShelterEquipment,omitempty" json:"ShelterEquipment,omitempty"`
	TrolleyStandEquipment []TrolleyStandEquipment `xml:"TrolleyStandEquipment,omitempty" json:"TrolleyStandEquipment,omitempty"`
	WaitingRoomEquipment []WaitingRoomEquipment `xml:"WaitingRoomEquipment,omitempty" json:"WaitingRoomEquipment,omitempty"`
	CrossingEquipment []CrossingEquipment `xml:"CrossingEquipment,omitempty" json:"CrossingEquipment,omitempty"`
	QueueingEquipment []QueueingEquipment `xml:"QueueingEquipment,omitempty" json:"QueueingEquipment,omitempty"`
	EntranceEquipment []EntranceEquipment `xml:"EntranceEquipment,omitempty" json:"EntranceEquipment,omitempty"`
	RampEquipment []RampEquipment `xml:"RampEquipment,omitempty" json:"RampEquipment,omitempty"`
	LiftCallEquipment []LiftCallEquipment `xml:"LiftCallEquipment,omitempty" json:"LiftCallEquipment,omitempty"`
	LiftEquipment []LiftEquipment `xml:"LiftEquipment,omitempty" json:"LiftEquipment,omitempty"`
	TravelatorEquipment []TravelatorEquipment `xml:"TravelatorEquipment,omitempty" json:"TravelatorEquipment,omitempty"`
	StaircaseEquipment []StaircaseEquipment `xml:"StaircaseEquipment,omitempty" json:"StaircaseEquipment,omitempty"`
	EscalatorEquipment []EscalatorEquipment `xml:"EscalatorEquipment,omitempty" json:"EscalatorEquipment,omitempty"`
	PlaceLighting []PlaceLighting `xml:"PlaceLighting,omitempty" json:"PlaceLighting,omitempty"`
	RoughSurface []RoughSurface `xml:"RoughSurface,omitempty" json:"RoughSurface,omitempty"`
	GeneralSign []GeneralSign `xml:"GeneralSign,omitempty" json:"GeneralSign,omitempty"`
	HeadingSign []HeadingSign `xml:"HeadingSign,omitempty" json:"HeadingSign,omitempty"`
	PlaceSign []PlaceSign `xml:"PlaceSign,omitempty" json:"PlaceSign,omitempty"`
	SignEquipment []SignEquipment `xml:"SignEquipment,omitempty" json:"SignEquipment,omitempty"`
	PassengerInformationEquipment []PassengerInformationEquipment `xml:"PassengerInformationEquipment,omitempty" json:"PassengerInformationEquipment,omitempty"`
	RubbishDisposalEquipment []RubbishDisposalEquipment `xml:"RubbishDisposalEquipment,omitempty" json:"RubbishDisposalEquipment,omitempty"`
	PassengerBeaconEquipment []PassengerBeaconEquipment `xml:"PassengerBeaconEquipment,omitempty" json:"PassengerBeaconEquipment,omitempty"`
	HelpPointEquipment []HelpPointEquipment `xml:"HelpPointEquipment,omitempty" json:"HelpPointEquipment,omitempty"`
	PassengerSafetyEquipment []PassengerSafetyEquipment `xml:"PassengerSafetyEquipment,omitempty" json:"PassengerSafetyEquipment,omitempty"`
	SanitaryEquipment []SanitaryEquipment `xml:"SanitaryEquipment,omitempty" json:"SanitaryEquipment,omitempty"`
	TicketValidatorEquipment []TicketValidatorEquipment `xml:"TicketValidatorEquipment,omitempty" json:"TicketValidatorEquipment,omitempty"`
	TicketingEquipment []TicketingEquipment `xml:"TicketingEquipment,omitempty" json:"TicketingEquipment,omitempty"`
	WheelchairVehicleEquipment []WheelchairVehicleEquipment `xml:"WheelchairVehicleEquipment,omitempty" json:"WheelchairVehicleEquipment,omitempty"`
	AccessVehicleEquipment []AccessVehicleEquipment `xml:"AccessVehicleEquipment,omitempty" json:"AccessVehicleEquipment,omitempty"`
	ComplexFeature []ComplexFeature `xml:"ComplexFeature,omitempty" json:"ComplexFeature,omitempty"`
	SimpleFeature []SimpleFeature `xml:"SimpleFeature,omitempty" json:"SimpleFeature,omitempty"`
	SpatialFeature []SpatialFeature `xml:"SpatialFeature,omitempty" json:"SpatialFeature,omitempty"`
	SingleJourneyPath []SingleJourneyPath `xml:"SingleJourneyPath,omitempty" json:"SingleJourneyPath,omitempty"`
	ServicePattern []ServicePattern `xml:"ServicePattern,omitempty" json:"ServicePattern,omitempty"`
	NavigationPath []NavigationPath `xml:"NavigationPath,omitempty" json:"NavigationPath,omitempty"`
	ServiceJourneyPattern []ServiceJourneyPattern `xml:"ServiceJourneyPattern,omitempty" json:"ServiceJourneyPattern,omitempty"`
	DeadRunJourneyPattern []DeadRunJourneyPattern `xml:"DeadRunJourneyPattern,omitempty" json:"DeadRunJourneyPattern,omitempty"`
	JourneyPattern []JourneyPattern `xml:"JourneyPattern,omitempty" json:"JourneyPattern,omitempty"`
	FlexibleRoute []FlexibleRoute `xml:"FlexibleRoute,omitempty" json:"FlexibleRoute,omitempty"`
	Route []Route `xml:"Route,omitempty" json:"Route,omitempty"`
	TimingPattern []TimingPattern `xml:"TimingPattern,omitempty" json:"TimingPattern,omitempty"`
	Connection []Connection `xml:"Connection,omitempty" json:"Connection,omitempty"`
	DefaultConnection []DefaultConnection `xml:"DefaultConnection,omitempty" json:"DefaultConnection,omitempty"`
	SiteConnection []SiteConnection `xml:"SiteConnection,omitempty" json:"SiteConnection,omitempty"`
	Access []Access `xml:"Access,omitempty" json:"Access,omitempty"`
	Contact []Contact `xml:"Contact,omitempty" json:"Contact,omitempty"`
	ControlCentre []ControlCentre `xml:"ControlCentre,omitempty" json:"ControlCentre,omitempty"`
	OperatingDepartment []OperatingDepartment `xml:"OperatingDepartment,omitempty" json:"OperatingDepartment,omitempty"`
	OrganisationalUnit []OrganisationalUnit `xml:"OrganisationalUnit,omitempty" json:"OrganisationalUnit,omitempty"`
	Department []Department `xml:"Department,omitempty" json:"Department,omitempty"`
	OrganisationPart []OrganisationPart `xml:"OrganisationPart,omitempty" json:"OrganisationPart,omitempty"`
	RetailConsortium []RetailConsortium `xml:"RetailConsortium,omitempty" json:"RetailConsortium,omitempty"`
	ServicedOrganisation []ServicedOrganisation `xml:"ServicedOrganisation,omitempty" json:"ServicedOrganisation,omitempty"`
	GeneralOrganisation []GeneralOrganisation `xml:"GeneralOrganisation,omitempty" json:"GeneralOrganisation,omitempty"`
	ManagementAgent []ManagementAgent `xml:"ManagementAgent,omitempty" json:"ManagementAgent,omitempty"`
	TravelAgent []TravelAgent `xml:"TravelAgent,omitempty" json:"TravelAgent,omitempty"`
	OtherOrganisation []OtherOrganisation `xml:"OtherOrganisation,omitempty" json:"OtherOrganisation,omitempty"`
	OnlineServiceOperator []OnlineServiceOperator `xml:"OnlineServiceOperator,omitempty" json:"OnlineServiceOperator,omitempty"`
	Authority []Authority `xml:"Authority,omitempty" json:"Authority,omitempty"`
	Operator []Operator `xml:"Operator,omitempty" json:"Operator,omitempty"`
	VehicleMeetingLink []VehicleMeetingLink `xml:"VehicleMeetingLink,omitempty" json:"VehicleMeetingLink,omitempty"`
	ServiceLink []ServiceLink `xml:"ServiceLink,omitempty" json:"ServiceLink,omitempty"`
	SitePathLink []SitePathLink `xml:"SitePathLink,omitempty" json:"SitePathLink,omitempty"`
	PathLink []PathLink `xml:"PathLink,omitempty" json:"PathLink,omitempty"`
	RouteLink []RouteLink `xml:"RouteLink,omitempty" json:"RouteLink,omitempty"`
	TimingLink []TimingLink `xml:"TimingLink,omitempty" json:"TimingLink,omitempty"`
	WireElement []WireElement `xml:"WireElement,omitempty" json:"WireElement,omitempty"`
	RoadElement []RoadElement `xml:"RoadElement,omitempty" json:"RoadElement,omitempty"`
	RailwayElement []RailwayElement `xml:"RailwayElement,omitempty" json:"RailwayElement,omitempty"`
	ActivationLink []ActivationLink `xml:"ActivationLink,omitempty" json:"ActivationLink,omitempty"`
	VehicleMeetingPoint []VehicleMeetingPoint `xml:"VehicleMeetingPoint,omitempty" json:"VehicleMeetingPoint,omitempty"`
	BorderPoint []BorderPoint `xml:"BorderPoint,omitempty" json:"BorderPoint,omitempty"`
	FareScheduledStopPoint []FareScheduledStopPoint `xml:"FareScheduledStopPoint,omitempty" json:"FareScheduledStopPoint,omitempty"`
	ScheduledStopPoint []ScheduledStopPoint `xml:"ScheduledStopPoint,omitempty" json:"ScheduledStopPoint,omitempty"`
	PathJunction []PathJunction `xml:"PathJunction,omitempty" json:"PathJunction,omitempty"`
	RoutePoint []RoutePoint `xml:"RoutePoint,omitempty" json:"RoutePoint,omitempty"`
	ParkingPoint []ParkingPoint `xml:"ParkingPoint,omitempty" json:"ParkingPoint,omitempty"`
	GaragePoint []GaragePoint `xml:"GaragePoint,omitempty" json:"GaragePoint,omitempty"`
	ReliefPoint []ReliefPoint `xml:"ReliefPoint,omitempty" json:"ReliefPoint,omitempty"`
	TimingPoint []TimingPoint `xml:"TimingPoint,omitempty" json:"TimingPoint,omitempty"`
	WireJunction []WireJunction `xml:"WireJunction,omitempty" json:"WireJunction,omitempty"`
	RoadJunction []RoadJunction `xml:"RoadJunction,omitempty" json:"RoadJunction,omitempty"`
	RailwayJunction []RailwayJunction `xml:"RailwayJunction,omitempty" json:"RailwayJunction,omitempty"`
	TrafficControlPoint []TrafficControlPoint `xml:"TrafficControlPoint,omitempty" json:"TrafficControlPoint,omitempty"`
	BeaconPoint []BeaconPoint `xml:"BeaconPoint,omitempty" json:"BeaconPoint,omitempty"`
	ActivationPoint []ActivationPoint `xml:"ActivationPoint,omitempty" json:"ActivationPoint,omitempty"`
	Point []Point `xml:"Point,omitempty" json:"Point,omitempty"`
	LineShape []LineShape `xml:"LineShape,omitempty" json:"LineShape,omitempty"`
	TopographicProjection []TopographicProjection `xml:"TopographicProjection,omitempty" json:"TopographicProjection,omitempty"`
	ZoneProjection []ZoneProjection `xml:"ZoneProjection,omitempty" json:"ZoneProjection,omitempty"`
	ComplexFeatureProjection []ComplexFeatureProjection `xml:"ComplexFeatureProjection,omitempty" json:"ComplexFeatureProjection,omitempty"`
	LinkSequenceProjection []LinkSequenceProjection `xml:"LinkSequenceProjection,omitempty" json:"LinkSequenceProjection,omitempty"`
	LinkProjection []LinkProjection `xml:"LinkProjection,omitempty" json:"LinkProjection,omitempty"`
	PointProjection []PointProjection `xml:"PointProjection,omitempty" json:"PointProjection,omitempty"`
	CompositeFrame []CompositeFrame `xml:"CompositeFrame,omitempty" json:"CompositeFrame,omitempty"`
	MobilityJourneyFrame []MobilityJourneyFrame `xml:"MobilityJourneyFrame,omitempty" json:"MobilityJourneyFrame,omitempty"`
	MobilityServiceFrame []MobilityServiceFrame `xml:"MobilityServiceFrame,omitempty" json:"MobilityServiceFrame,omitempty"`
	SalesTransactionFrame []SalesTransactionFrame `xml:"SalesTransactionFrame,omitempty" json:"SalesTransactionFrame,omitempty"`
	FareFrame []FareFrame `xml:"FareFrame,omitempty" json:"FareFrame,omitempty"`
	DriverScheduleFrame []DriverScheduleFrame `xml:"DriverScheduleFrame,omitempty" json:"DriverScheduleFrame,omitempty"`
	VehicleScheduleFrame []VehicleScheduleFrame `xml:"VehicleScheduleFrame,omitempty" json:"VehicleScheduleFrame,omitempty"`
	ServiceFrame []ServiceFrame `xml:"ServiceFrame,omitempty" json:"ServiceFrame,omitempty"`
	TimetableFrame []TimetableFrame `xml:"TimetableFrame,omitempty" json:"TimetableFrame,omitempty"`
	SiteFrame []SiteFrame `xml:"SiteFrame,omitempty" json:"SiteFrame,omitempty"`
	InfrastructureFrame []InfrastructureFrame `xml:"InfrastructureFrame,omitempty" json:"InfrastructureFrame,omitempty"`
	GeneralFrame []GeneralFrame `xml:"GeneralFrame,omitempty" json:"GeneralFrame,omitempty"`
	ResourceFrame []ResourceFrame `xml:"ResourceFrame,omitempty" json:"ResourceFrame,omitempty"`
	ServiceCalendarFrame []ServiceCalendarFrame `xml:"ServiceCalendarFrame,omitempty" json:"ServiceCalendarFrame,omitempty"`
	UicOperatingPeriod []UicOperatingPeriod `xml:"UicOperatingPeriod,omitempty" json:"UicOperatingPeriod,omitempty"`
	OperatingPeriod []OperatingPeriod `xml:"OperatingPeriod,omitempty" json:"OperatingPeriod,omitempty"`
	OperatingDay []OperatingDay `xml:"OperatingDay,omitempty" json:"OperatingDay,omitempty"`
	ServiceCalendar []ServiceCalendar `xml:"ServiceCalendar,omitempty" json:"ServiceCalendar,omitempty"`
	VehicleSharingPlaceAssignment []VehicleSharingPlaceAssignment `xml:"VehicleSharingPlaceAssignment,omitempty" json:"VehicleSharingPlaceAssignment,omitempty"`
	VehiclePoolingPlaceAssignment []VehiclePoolingPlaceAssignment `xml:"VehiclePoolingPlaceAssignment,omitempty" json:"VehiclePoolingPlaceAssignment,omitempty"`
	TaxiServicePlaceAssignment []TaxiServicePlaceAssignment `xml:"TaxiServicePlaceAssignment,omitempty" json:"TaxiServicePlaceAssignment,omitempty"`
	VehicleServicePlaceAssignment []VehicleServicePlaceAssignment1 `xml:"VehicleServicePlaceAssignment,omitempty" json:"VehicleServicePlaceAssignment,omitempty"`
	NetexOrgUkNetexVehicleServicePlaceAssignment []VehicleServicePlaceAssignment2 `xml:"VehicleServicePlaceAssignment_,omitempty" json:"VehicleServicePlaceAssignment_,omitempty"`
	DynamicVehicleMeetingPointAssignment []DynamicVehicleMeetingPointAssignment `xml:"DynamicVehicleMeetingPointAssignment,omitempty" json:"DynamicVehicleMeetingPointAssignment,omitempty"`
	VehicleMeetingPointAssignment []VehicleMeetingPointAssignment1 `xml:"VehicleMeetingPointAssignment,omitempty" json:"VehicleMeetingPointAssignment,omitempty"`
	NetexOrgUkNetexVehicleMeetingPointAssignment []VehicleMeetingPointAssignment2 `xml:"VehicleMeetingPointAssignment_,omitempty" json:"VehicleMeetingPointAssignment_,omitempty"`
	VehicleAccessCredentialsAssignment []VehicleAccessCredentialsAssignment `xml:"VehicleAccessCredentialsAssignment,omitempty" json:"VehicleAccessCredentialsAssignment,omitempty"`
	DistributionAssignment []DistributionAssignment `xml:"DistributionAssignment,omitempty" json:"DistributionAssignment,omitempty"`
	SalesOfferPackageSubstitution []SalesOfferPackageSubstitution `xml:"SalesOfferPackageSubstitution,omitempty" json:"SalesOfferPackageSubstitution,omitempty"`
	CustomerPurchaseParameterAssignment []CustomerPurchaseParameterAssignment `xml:"CustomerPurchaseParameterAssignment,omitempty" json:"CustomerPurchaseParameterAssignment,omitempty"`
	SpecificParameterAssignment []SpecificParameterAssignment `xml:"SpecificParameterAssignment,omitempty" json:"SpecificParameterAssignment,omitempty"`
	GenericParameterAssignmentInContext []GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
	GenericParameterAssignment []GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	ValidityParameterAssignment []ValidityParameterAssignment `xml:"ValidityParameterAssignment,omitempty" json:"ValidityParameterAssignment,omitempty"`
	AccessRightParameterAssignment []AccessRightParameterAssignment `xml:"AccessRightParameterAssignment,omitempty" json:"AccessRightParameterAssignment,omitempty"`
	JourneyAccounting []JourneyAccounting `xml:"JourneyAccounting,omitempty" json:"JourneyAccounting,omitempty"`
	TimeDemandTypeAssignment []TimeDemandTypeAssignment `xml:"TimeDemandTypeAssignment,omitempty" json:"TimeDemandTypeAssignment,omitempty"`
	TransferRestriction []TransferRestriction `xml:"TransferRestriction,omitempty" json:"TransferRestriction,omitempty"`
	ServiceExclusion []ServiceExclusion `xml:"ServiceExclusion,omitempty" json:"ServiceExclusion,omitempty"`
	DisplayAssignment []DisplayAssignment `xml:"DisplayAssignment,omitempty" json:"DisplayAssignment,omitempty"`
	OvertakingPossibility []OvertakingPossibility `xml:"OvertakingPossibility,omitempty" json:"OvertakingPossibility,omitempty"`
	MeetingRestriction []MeetingRestriction `xml:"MeetingRestriction,omitempty" json:"MeetingRestriction,omitempty"`
	RestrictedManoeuvre []RestrictedManoeuvre `xml:"RestrictedManoeuvre,omitempty" json:"RestrictedManoeuvre,omitempty"`
	VehicleTypeAtPoint []VehicleTypeAtPoint `xml:"VehicleTypeAtPoint,omitempty" json:"VehicleTypeAtPoint,omitempty"`
	ActivationAssignment []ActivationAssignment `xml:"ActivationAssignment,omitempty" json:"ActivationAssignment,omitempty"`
	SalesNoticeAssignment []SalesNoticeAssignment `xml:"SalesNoticeAssignment,omitempty" json:"SalesNoticeAssignment,omitempty"`
	NoticeAssignment []NoticeAssignment `xml:"NoticeAssignment,omitempty" json:"NoticeAssignment,omitempty"`
	CheckConstraintThroughput []CheckConstraintThroughput `xml:"CheckConstraintThroughput,omitempty" json:"CheckConstraintThroughput,omitempty"`
	CheckConstraintDelay []CheckConstraintDelay `xml:"CheckConstraintDelay,omitempty" json:"CheckConstraintDelay,omitempty"`
	CheckConstraint []CheckConstraint `xml:"CheckConstraint,omitempty" json:"CheckConstraint,omitempty"`
	DayTypeAssignment []DayTypeAssignment `xml:"DayTypeAssignment,omitempty" json:"DayTypeAssignment,omitempty"`
	GroupOfTimebands []GroupOfTimebands `xml:"GroupOfTimebands,omitempty" json:"GroupOfTimebands,omitempty"`
	Timeband []Timeband `xml:"Timeband,omitempty" json:"Timeband,omitempty"`
	FareDayType []FareDayType `xml:"FareDayType,omitempty" json:"FareDayType,omitempty"`
	OrganisationDayType []OrganisationDayType `xml:"OrganisationDayType,omitempty" json:"OrganisationDayType,omitempty"`
	DayType []DayType `xml:"DayType,omitempty" json:"DayType,omitempty"`
	PoolOfVehicles []PoolOfVehicles `xml:"PoolOfVehicles,omitempty" json:"PoolOfVehicles,omitempty"`
	GroupOfSingleJourneys []GroupOfSingleJourneys `xml:"GroupOfSingleJourneys,omitempty" json:"GroupOfSingleJourneys,omitempty"`
	GroupOfDistributionChannels []GroupOfDistributionChannels `xml:"GroupOfDistributionChannels,omitempty" json:"GroupOfDistributionChannels,omitempty"`
	GroupOfDistanceMatrixElements []GroupOfDistanceMatrixElements `xml:"GroupOfDistanceMatrixElements,omitempty" json:"GroupOfDistanceMatrixElements,omitempty"`
	PriceGroup []PriceGroup `xml:"PriceGroup,omitempty" json:"PriceGroup,omitempty"`
	StandardFareTable []StandardFareTable `xml:"StandardFareTable,omitempty" json:"StandardFareTable,omitempty"`
	FareTableInContext []FareTableInContext `xml:"FareTableInContext,omitempty" json:"FareTableInContext,omitempty"`
	FareTable []FareTable `xml:"FareTable,omitempty" json:"FareTable,omitempty"`
	GroupOfServices []GroupOfServices `xml:"GroupOfServices,omitempty" json:"GroupOfServices,omitempty"`
	RhythmicalJourneyGroup []RhythmicalJourneyGroup `xml:"RhythmicalJourneyGroup,omitempty" json:"RhythmicalJourneyGroup,omitempty"`
	HeadwayJourneyGroup []HeadwayJourneyGroup `xml:"HeadwayJourneyGroup,omitempty" json:"HeadwayJourneyGroup,omitempty"`
	CrewBase []CrewBase `xml:"CrewBase,omitempty" json:"CrewBase,omitempty"`
	GroupOfTimingLinks []GroupOfTimingLinks `xml:"GroupOfTimingLinks,omitempty" json:"GroupOfTimingLinks,omitempty"`
	Network []Network `xml:"Network,omitempty" json:"Network,omitempty"`
	GroupOfLines []GroupOfLines `xml:"GroupOfLines,omitempty" json:"GroupOfLines,omitempty"`
	GroupOfOperators []GroupOfOperators `xml:"GroupOfOperators,omitempty" json:"GroupOfOperators,omitempty"`
	GroupOfPlaces []GroupOfPlaces `xml:"GroupOfPlaces,omitempty" json:"GroupOfPlaces,omitempty"`
	GroupOfLinkSequences []GroupOfLinkSequences `xml:"GroupOfLinkSequences,omitempty" json:"GroupOfLinkSequences,omitempty"`
	GroupOfTariffZones []GroupOfTariffZones `xml:"GroupOfTariffZones,omitempty" json:"GroupOfTariffZones,omitempty"`
	MobilityServiceConstraintZone []MobilityServiceConstraintZone `xml:"MobilityServiceConstraintZone,omitempty" json:"MobilityServiceConstraintZone,omitempty"`
	RoutingConstraintZone []RoutingConstraintZone `xml:"RoutingConstraintZone,omitempty" json:"RoutingConstraintZone,omitempty"`
	StopArea []StopArea `xml:"StopArea,omitempty" json:"StopArea,omitempty"`
	AccessZone []AccessZone `xml:"AccessZone,omitempty" json:"AccessZone,omitempty"`
	VehicleMeetingPlace []VehicleMeetingPlace1 `xml:"VehicleMeetingPlace,omitempty" json:"VehicleMeetingPlace,omitempty"`
	VehiclePoolingMeetingPlace []VehiclePoolingMeetingPlace `xml:"VehiclePoolingMeetingPlace,omitempty" json:"VehiclePoolingMeetingPlace,omitempty"`
	NetexOrgUkNetexVehicleMeetingPlace []VehicleMeetingPlace2 `xml:"VehicleMeetingPlace_,omitempty" json:"VehicleMeetingPlace_,omitempty"`
	HailAndRideArea []HailAndRideArea `xml:"HailAndRideArea,omitempty" json:"HailAndRideArea,omitempty"`
	FlexibleArea []FlexibleArea `xml:"FlexibleArea,omitempty" json:"FlexibleArea,omitempty"`
	FlexibleQuay []FlexibleQuay `xml:"FlexibleQuay,omitempty" json:"FlexibleQuay,omitempty"`
	FlexibleStopPlace []FlexibleStopPlace `xml:"FlexibleStopPlace,omitempty" json:"FlexibleStopPlace,omitempty"`
	Garage []Garage `xml:"Garage,omitempty" json:"Garage,omitempty"`
	EquipmentPlace []EquipmentPlace `xml:"EquipmentPlace,omitempty" json:"EquipmentPlace,omitempty"`
	TaxiStand []TaxiStand `xml:"TaxiStand,omitempty" json:"TaxiStand,omitempty"`
	VehicleStoppingPlace []VehicleStoppingPlace `xml:"VehicleStoppingPlace,omitempty" json:"VehicleStoppingPlace,omitempty"`
	BoardingPosition []BoardingPosition `xml:"BoardingPosition,omitempty" json:"BoardingPosition,omitempty"`
	AccessSpace []AccessSpace `xml:"AccessSpace,omitempty" json:"AccessSpace,omitempty"`
	Quay []Quay `xml:"Quay,omitempty" json:"Quay,omitempty"`
	PointOfInterestSpace []PointOfInterestSpace `xml:"PointOfInterestSpace,omitempty" json:"PointOfInterestSpace,omitempty"`
	ParkingComponent []ParkingComponent `xml:"ParkingComponent,omitempty" json:"ParkingComponent,omitempty"`
	VehicleStoppingPosition []VehicleStoppingPosition `xml:"VehicleStoppingPosition,omitempty" json:"VehicleStoppingPosition,omitempty"`
	VehiclePoolingParkingArea []VehiclePoolingParkingArea `xml:"VehiclePoolingParkingArea,omitempty" json:"VehiclePoolingParkingArea,omitempty"`
	VehicleSharingParkingArea []VehicleSharingParkingArea `xml:"VehicleSharingParkingArea,omitempty" json:"VehicleSharingParkingArea,omitempty"`
	TaxiParkingArea []TaxiParkingArea `xml:"TaxiParkingArea,omitempty" json:"TaxiParkingArea,omitempty"`
	ParkingArea []ParkingArea `xml:"ParkingArea,omitempty" json:"ParkingArea,omitempty"`
	MonitoredVehicleSharingParkingBay []MonitoredVehicleSharingParkingBay `xml:"MonitoredVehicleSharingParkingBay,omitempty" json:"MonitoredVehicleSharingParkingBay,omitempty"`
	VehiclePoolingParkingBay []VehiclePoolingParkingBay `xml:"VehiclePoolingParkingBay,omitempty" json:"VehiclePoolingParkingBay,omitempty"`
	VehicleSharingParkingBay []VehicleSharingParkingBay `xml:"VehicleSharingParkingBay,omitempty" json:"VehicleSharingParkingBay,omitempty"`
	ParkingBay []ParkingBay `xml:"ParkingBay,omitempty" json:"ParkingBay,omitempty"`
	PointOfInterestVehicleEntrance []PointOfInterestVehicleEntrance `xml:"PointOfInterestVehicleEntrance,omitempty" json:"PointOfInterestVehicleEntrance,omitempty"`
	PointOfInterestEntrance []PointOfInterestEntrance `xml:"PointOfInterestEntrance,omitempty" json:"PointOfInterestEntrance,omitempty"`
	ParkingPassengerEntrance []ParkingPassengerEntrance `xml:"ParkingPassengerEntrance,omitempty" json:"ParkingPassengerEntrance,omitempty"`
	ParkingEntranceForVehicles []ParkingEntranceForVehicles `xml:"ParkingEntranceForVehicles,omitempty" json:"ParkingEntranceForVehicles,omitempty"`
	StopPlaceVehicleEntrance []StopPlaceVehicleEntrance `xml:"StopPlaceVehicleEntrance,omitempty" json:"StopPlaceVehicleEntrance,omitempty"`
	StopPlaceEntrance []StopPlaceEntrance `xml:"StopPlaceEntrance,omitempty" json:"StopPlaceEntrance,omitempty"`
	Entrance []Entrance `xml:"Entrance,omitempty" json:"Entrance,omitempty"`
	PointOfInterest []PointOfInterest `xml:"PointOfInterest,omitempty" json:"PointOfInterest,omitempty"`
	Parking []Parking `xml:"Parking,omitempty" json:"Parking,omitempty"`
	TaxiRank []TaxiRank `xml:"TaxiRank,omitempty" json:"TaxiRank,omitempty"`
	StopPlace []StopPlace `xml:"StopPlace,omitempty" json:"StopPlace,omitempty"`
	ServiceSite []ServiceSite `xml:"ServiceSite,omitempty" json:"ServiceSite,omitempty"`
	TopographicPlace []TopographicPlace `xml:"TopographicPlace,omitempty" json:"TopographicPlace,omitempty"`
	Country []Country `xml:"Country,omitempty" json:"Country,omitempty"`
	AddressablePlace []AddressablePlace `xml:"AddressablePlace,omitempty" json:"AddressablePlace,omitempty"`
	PostalAddress []PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	RoadAddress []RoadAddress `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
	TransportAdministrativeZone []TransportAdministrativeZone `xml:"TransportAdministrativeZone,omitempty" json:"TransportAdministrativeZone,omitempty"`
	AdministrativeZone []AdministrativeZone `xml:"AdministrativeZone,omitempty" json:"AdministrativeZone,omitempty"`
	FareZone []FareZone `xml:"FareZone,omitempty" json:"FareZone,omitempty"`
	TariffZone []TariffZone `xml:"TariffZone,omitempty" json:"TariffZone,omitempty"`
	GeneralZone []GeneralZone `xml:"GeneralZone,omitempty" json:"GeneralZone,omitempty"`
	Zone []Zone `xml:"Zone,omitempty" json:"Zone,omitempty"`
	GroupOfLinks []GroupOfLinks `xml:"GroupOfLinks,omitempty" json:"GroupOfLinks,omitempty"`
	GroupOfPoints []GroupOfPoints `xml:"GroupOfPoints,omitempty" json:"GroupOfPoints,omitempty"`
	Layer []Layer `xml:"Layer,omitempty" json:"Layer,omitempty"`
	GeneralGroupOfEntities []GeneralGroupOfEntities `xml:"GeneralGroupOfEntities,omitempty" json:"GeneralGroupOfEntities,omitempty"`
	ResponsibilityRole []ResponsibilityRole `xml:"ResponsibilityRole,omitempty" json:"ResponsibilityRole,omitempty"`
	ResponsibilitySet []ResponsibilitySet `xml:"ResponsibilitySet,omitempty" json:"ResponsibilitySet,omitempty"`
	ValueSet []ValueSet `xml:"ValueSet,omitempty" json:"ValueSet,omitempty"`
	TypeOfFleet []TypeOfFleet `xml:"TypeOfFleet,omitempty" json:"TypeOfFleet,omitempty"`
	ParkingBayStatus []ParkingBayStatus `xml:"ParkingBayStatus,omitempty" json:"ParkingBayStatus,omitempty"`
	TypeOfMediumAccessDevice []TypeOfMediumAccessDevice `xml:"TypeOfMediumAccessDevice,omitempty" json:"TypeOfMediumAccessDevice,omitempty"`
	TypeOfMachineReadability []TypeOfMachineReadability `xml:"TypeOfMachineReadability,omitempty" json:"TypeOfMachineReadability,omitempty"`
	TypeOfProof []TypeOfProof `xml:"TypeOfProof,omitempty" json:"TypeOfProof,omitempty"`
	TypeOfConcession []TypeOfConcession `xml:"TypeOfConcession,omitempty" json:"TypeOfConcession,omitempty"`
	ChargingMoment []ChargingMoment `xml:"ChargingMoment,omitempty" json:"ChargingMoment,omitempty"`
	TypeOfUsageParameter []TypeOfUsageParameter `xml:"TypeOfUsageParameter,omitempty" json:"TypeOfUsageParameter,omitempty"`
	TypeOfFareTable []TypeOfFareTable `xml:"TypeOfFareTable,omitempty" json:"TypeOfFareTable,omitempty"`
	TypeOfPricingRule []TypeOfPricingRule `xml:"TypeOfPricingRule,omitempty" json:"TypeOfPricingRule,omitempty"`
	PriceUnit []PriceUnit `xml:"PriceUnit,omitempty" json:"PriceUnit,omitempty"`
	TimingAlgorithmType []TimingAlgorithmType `xml:"TimingAlgorithmType,omitempty" json:"TimingAlgorithmType,omitempty"`
	PurposeOfJourneyPartition []PurposeOfJourneyPartition `xml:"PurposeOfJourneyPartition,omitempty" json:"PurposeOfJourneyPartition,omitempty"`
	PointOfInterestClassification []PointOfInterestClassification `xml:"PointOfInterestClassification,omitempty" json:"PointOfInterestClassification,omitempty"`
	TypeOfParking []TypeOfParking `xml:"TypeOfParking,omitempty" json:"TypeOfParking,omitempty"`
	TypeOfServiceFeature []TypeOfServiceFeature `xml:"TypeOfServiceFeature,omitempty" json:"TypeOfServiceFeature,omitempty"`
	Direction []Direction `xml:"Direction,omitempty" json:"Direction,omitempty"`
	TypeOfSecurityList []TypeOfSecurityList `xml:"TypeOfSecurityList,omitempty" json:"TypeOfSecurityList,omitempty"`
	TypeOfDriverPermit []TypeOfDriverPermit `xml:"TypeOfDriverPermit,omitempty" json:"TypeOfDriverPermit,omitempty"`
	PurposeOfEquipmentProfile []PurposeOfEquipmentProfile `xml:"PurposeOfEquipmentProfile,omitempty" json:"PurposeOfEquipmentProfile,omitempty"`
	TypeOfProductCategory []TypeOfProductCategory `xml:"TypeOfProductCategory,omitempty" json:"TypeOfProductCategory,omitempty"`
	TypeOfPaymentMethod []TypeOfPaymentMethod `xml:"TypeOfPaymentMethod,omitempty" json:"TypeOfPaymentMethod,omitempty"`
	ClassOfUse []ClassOfUse `xml:"ClassOfUse,omitempty" json:"ClassOfUse,omitempty"`
	Submode []Submode `xml:"Submode,omitempty" json:"Submode,omitempty"`
	OpenTransportMode []OpenTransportMode `xml:"OpenTransportMode,omitempty" json:"OpenTransportMode,omitempty"`
	TypeOfCodespaceAssignment []TypeOfCodespaceAssignment `xml:"TypeOfCodespaceAssignment,omitempty" json:"TypeOfCodespaceAssignment,omitempty"`
	TypeOfValidity []TypeOfValidity `xml:"TypeOfValidity,omitempty" json:"TypeOfValidity,omitempty"`
	PurposeOfGrouping []PurposeOfGrouping `xml:"PurposeOfGrouping,omitempty" json:"PurposeOfGrouping,omitempty"`
	Branding []Branding `xml:"Branding,omitempty" json:"Branding,omitempty"`
	DataSource []DataSource `xml:"DataSource,omitempty" json:"DataSource,omitempty"`
	TypeOfMobilityService []TypeOfMobilityService `xml:"TypeOfMobilityService,omitempty" json:"TypeOfMobilityService,omitempty"`
	TypeOfRetailDevice []TypeOfRetailDevice `xml:"TypeOfRetailDevice,omitempty" json:"TypeOfRetailDevice,omitempty"`
	CustomerAccountStatus []CustomerAccountStatus `xml:"CustomerAccountStatus,omitempty" json:"CustomerAccountStatus,omitempty"`
	TypeOfCustomerAccount []TypeOfCustomerAccount `xml:"TypeOfCustomerAccount,omitempty" json:"TypeOfCustomerAccount,omitempty"`
	TypeOfFareContractEntry []TypeOfFareContractEntry `xml:"TypeOfFareContractEntry,omitempty" json:"TypeOfFareContractEntry,omitempty"`
	TypeOfFareContract []TypeOfFareContract `xml:"TypeOfFareContract,omitempty" json:"TypeOfFareContract,omitempty"`
	TypeOfTravelDocument []TypeOfTravelDocument `xml:"TypeOfTravelDocument,omitempty" json:"TypeOfTravelDocument,omitempty"`
	TypeOfSalesOfferPackage []TypeOfSalesOfferPackage `xml:"TypeOfSalesOfferPackage,omitempty" json:"TypeOfSalesOfferPackage,omitempty"`
	TypeOfFareProduct []TypeOfFareProduct `xml:"TypeOfFareProduct,omitempty" json:"TypeOfFareProduct,omitempty"`
	TypeOfFareStructureElement []TypeOfFareStructureElement `xml:"TypeOfFareStructureElement,omitempty" json:"TypeOfFareStructureElement,omitempty"`
	TypeOfTariff []TypeOfTariff `xml:"TypeOfTariff,omitempty" json:"TypeOfTariff,omitempty"`
	TypeOfAccessRightAssignment []TypeOfAccessRightAssignment `xml:"TypeOfAccessRightAssignment,omitempty" json:"TypeOfAccessRightAssignment,omitempty"`
	TypeOfFareStructureFactor []TypeOfFareStructureFactor `xml:"TypeOfFareStructureFactor,omitempty" json:"TypeOfFareStructureFactor,omitempty"`
	TypeOfFlexibleService []TypeOfFlexibleService `xml:"TypeOfFlexibleService,omitempty" json:"TypeOfFlexibleService,omitempty"`
	TypeOfTimeDemandType []TypeOfTimeDemandType `xml:"TypeOfTimeDemandType,omitempty" json:"TypeOfTimeDemandType,omitempty"`
	TypeOfPassengerInformationEquipment []TypeOfPassengerInformationEquipment `xml:"TypeOfPassengerInformationEquipment,omitempty" json:"TypeOfPassengerInformationEquipment,omitempty"`
	TypeOfJourneyPattern []TypeOfJourneyPattern `xml:"TypeOfJourneyPattern,omitempty" json:"TypeOfJourneyPattern,omitempty"`
	TypeOfActivation []TypeOfActivation `xml:"TypeOfActivation,omitempty" json:"TypeOfActivation,omitempty"`
	TypeOfModeOfOperation []TypeOfModeOfOperation `xml:"TypeOfModeOfOperation,omitempty" json:"TypeOfModeOfOperation,omitempty"`
	TypeOfPlug []TypeOfPlug `xml:"TypeOfPlug,omitempty" json:"TypeOfPlug,omitempty"`
	TypeOfBatteryChemistry []TypeOfBatteryChemistry `xml:"TypeOfBatteryChemistry,omitempty" json:"TypeOfBatteryChemistry,omitempty"`
	TypeOfLine []TypeOfLine `xml:"TypeOfLine,omitempty" json:"TypeOfLine,omitempty"`
	TypeOfDeliveryVariant []TypeOfDeliveryVariant `xml:"TypeOfDeliveryVariant,omitempty" json:"TypeOfDeliveryVariant,omitempty"`
	TypeOfNotice []TypeOfNotice `xml:"TypeOfNotice,omitempty" json:"TypeOfNotice,omitempty"`
	TypeOfCongestion []TypeOfCongestion `xml:"TypeOfCongestion,omitempty" json:"TypeOfCongestion,omitempty"`
	TypeOfFacility []TypeOfFacility `xml:"TypeOfFacility,omitempty" json:"TypeOfFacility,omitempty"`
	TypeOfService []TypeOfService `xml:"TypeOfService,omitempty" json:"TypeOfService,omitempty"`
	TypeOfEquipment []TypeOfEquipment `xml:"TypeOfEquipment,omitempty" json:"TypeOfEquipment,omitempty"`
	TypeOfFeature []TypeOfFeature `xml:"TypeOfFeature,omitempty" json:"TypeOfFeature,omitempty"`
	TypeOfLinkSequence []TypeOfLinkSequence `xml:"TypeOfLinkSequence,omitempty" json:"TypeOfLinkSequence,omitempty"`
	TypeOfPlace []TypeOfPlace `xml:"TypeOfPlace,omitempty" json:"TypeOfPlace,omitempty"`
	TypeOfTransfer []TypeOfTransfer `xml:"TypeOfTransfer,omitempty" json:"TypeOfTransfer,omitempty"`
	TypeOfOperation []TypeOfOperation `xml:"TypeOfOperation,omitempty" json:"TypeOfOperation,omitempty"`
	TypeOfOrganisationPart []TypeOfOrganisationPart `xml:"TypeOfOrganisationPart,omitempty" json:"TypeOfOrganisationPart,omitempty"`
	TypeOfOrganisation []TypeOfOrganisation `xml:"TypeOfOrganisation,omitempty" json:"TypeOfOrganisation,omitempty"`
	TypeOfZone []TypeOfZone `xml:"TypeOfZone,omitempty" json:"TypeOfZone,omitempty"`
	TypeOfLink []TypeOfLink `xml:"TypeOfLink,omitempty" json:"TypeOfLink,omitempty"`
	TypeOfPoint []TypeOfPoint `xml:"TypeOfPoint,omitempty" json:"TypeOfPoint,omitempty"`
	TypeOfProjection []TypeOfProjection `xml:"TypeOfProjection,omitempty" json:"TypeOfProjection,omitempty"`
	TypeOfFrame []TypeOfFrame `xml:"TypeOfFrame,omitempty" json:"TypeOfFrame,omitempty"`
	TypeOfResponsibilityRole []TypeOfResponsibilityRole `xml:"TypeOfResponsibilityRole,omitempty" json:"TypeOfResponsibilityRole,omitempty"`
	TypeOfEntity []TypeOfEntity `xml:"TypeOfEntity,omitempty" json:"TypeOfEntity,omitempty"`
	TypeOfVersion []TypeOfVersion `xml:"TypeOfVersion,omitempty" json:"TypeOfVersion,omitempty"`
	PassingTimeView []PassingTimeView `xml:"PassingTimeView,omitempty" json:"PassingTimeView,omitempty"`
	SimpleAvailabilityCondition []SimpleAvailabilityCondition `xml:"SimpleAvailabilityCondition,omitempty" json:"SimpleAvailabilityCondition,omitempty"`
	ValidDuring []ValidDuring `xml:"ValidDuring,omitempty" json:"ValidDuring,omitempty"`
	AvailabilityCondition []AvailabilityCondition `xml:"AvailabilityCondition,omitempty" json:"AvailabilityCondition,omitempty"`
	ValidityRuleParameter []ValidityRuleParameter `xml:"ValidityRuleParameter,omitempty" json:"ValidityRuleParameter,omitempty"`
	ValidityTrigger []ValidityTrigger `xml:"ValidityTrigger,omitempty" json:"ValidityTrigger,omitempty"`
	ValidityCondition []ValidityCondition `xml:"ValidityCondition,omitempty" json:"ValidityCondition,omitempty"`
	Version []Version `xml:"Version,omitempty" json:"Version,omitempty"`
}

// EntityInVersionStructure represents the EntityInVersionStructure element
// Type for ENTITY IN VERSION.
type EntityInVersionStructure struct {
	EntityStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions *ValidityConditionsRelStructure `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween []ValidBetween `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts *AlternativeTextsRelStructure `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
	// Name of source of the data.
	DataSourceRefAttribute *string `xml:"dataSourceRef,attr,omitempty" json:"dataSourceRef,omitempty"`
	// Date ENTITY was first created.
	Created *time.Time `xml:"created,attr,omitempty" json:"created,omitempty"`
	// Date ENTITY or version was last changed.
	Changed *time.Time `xml:"changed,attr,omitempty" json:"changed,omitempty"`
	// Nature of last modification: new, revise, delete, unchanged, delta. Default is "new".
	Modification *ModificationEnumeration `xml:"modification,attr,omitempty" json:"modification,omitempty"`
	// Version number of entity. The value may be "any" or a VERSION number adhering to agreed-upon formatting and interpretation rules (representing, e.g., a number or a date). Consecutive VERSION numbers should be strictly increasing.
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
	// Whether ENTITY is currently in use. Default is "active".
	StatusAttribute *StatusEnumeration `xml:"status,attr,omitempty" json:"status,omitempty"`
	// Version of this object from which this version of ENTITY was derived.
	DerivedFromVersionRefAttribute *string `xml:"derivedFromVersionRef,attr,omitempty" json:"derivedFromVersionRef,omitempty"`
	// Version of frame from with which this version of ENTITY is compatible. Assumes Frame of the same Id as current frame.
	CompatibleWithVersionFrameVersionRef *string `xml:"compatibleWithVersionFrameVersionRef,attr,omitempty" json:"compatibleWithVersionFrameVersionRef,omitempty"`
	// Identity of object from which this object of ENTITY was derived. Normally the same.
	DerivedFromObjectRef *string `xml:"derivedFromObjectRef,attr,omitempty" json:"derivedFromObjectRef,omitempty"`
}

// VersionsRelStructure represents the versions_RelStructure element
// Type for containment of a VERSION.
type VersionsRelStructure struct {
	ContainmentAggregationStructure
	VersionRef []VersionRef `xml:"VersionRef,omitempty" json:"VersionRef,omitempty"`
	Version []Version `xml:"Version,omitempty" json:"Version,omitempty"`
}

// VersionVersionStructure represents the Version_VersionStructure element
// Type for a VERSION.
type VersionVersionStructure struct {
	DataManagedObjectStructure
	// Date of start of VERSION currency.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// Date of end of VERSION currency. Date is INCLUSIVE.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	// Status of VERSION.
	Status *VersionStatusEnumeration `xml:"Status,omitempty" json:"Status,omitempty"`
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Version type: Point or Baseline.
	VersionType *VersionTypeEnumeration `xml:"VersionType,omitempty" json:"VersionType,omitempty"`
	TypeOfVersionRef *TypeOfVersionRef `xml:"TypeOfVersionRef,omitempty" json:"TypeOfVersionRef,omitempty"`
	// Reference to VERSION from which this VERSION was derived.
	DerivedFromVersionRef *VersionRefStructure `xml:"DerivedFromVersionRef,omitempty" json:"DerivedFromVersionRef,omitempty"`
}

// TypeOfVersionValueStructure represents the TypeOfVersion_ValueStructure element
// Type for a TYPE OF VERSION.
type TypeOfVersionValueStructure struct {
	TypeOfValueVersionStructure
}

// EntityInVersion represents the EntityInVersion element
// The ENTITies associated to a given VERSION. ENTITY IN VERSION is restricted by ENTITY IN FRAME.
type EntityInVersion struct {
	EntityInVersionStructure
}

// Version represents the Version element
// A group of operational data instances which share the same VALIDITY CONDITIONs. A VERSION belongs to a unique VERSION FRAME and is characterized by a unique TYPE OF VERSION. E.g.  NETWORK VERSION for Line 12 starting from 2000-01-01.
type Version struct {
	VersionVersionStructure
}

// TypeOfVersion represents the TypeOfVersion element
// A classification of the VERSIONs.
type TypeOfVersion struct {
	TypeOfVersionValueStructure
}

// StakeholderRoleTypeEnumeration represents the StakeholderRoleTypeEnumeration enumeration
// Allowed values for Stakeholder Roles.
type StakeholderRoleTypeEnumeration string

const (
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationPlanning represents Planning
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationPlanning StakeholderRoleTypeEnumeration = "Planning"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationOperation represents Operation
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationOperation StakeholderRoleTypeEnumeration = "Operation"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationControl represents Control
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationControl StakeholderRoleTypeEnumeration = "Control"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationReservation represents Reservation
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationReservation StakeholderRoleTypeEnumeration = "Reservation"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationEntityLegalOwnership represents EntityLegalOwnership
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationEntityLegalOwnership StakeholderRoleTypeEnumeration = "EntityLegalOwnership"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationFareManagement represents FareManagement
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationFareManagement StakeholderRoleTypeEnumeration = "FareManagement"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationFinancing represents Financing
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationFinancing StakeholderRoleTypeEnumeration = "Financing"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationSecurityManagement represents SecurityManagement
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationSecurityManagement StakeholderRoleTypeEnumeration = "SecurityManagement"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationCustomerService represents CustomerService
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationCustomerService StakeholderRoleTypeEnumeration = "CustomerService"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationDataRegistrar represents DataRegistrar
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationDataRegistrar StakeholderRoleTypeEnumeration = "DataRegistrar"
	// StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationOther represents Other
	StakeholderRoleTypeEnumerationStakeholderRoleTypeEnumerationOther StakeholderRoleTypeEnumeration = "Other"
)

// DataRoleTypeEnumeration represents the DataRoleTypeEnumeration enumeration
// Allowed values for Administrative Roles.
type DataRoleTypeEnumeration string

const (
	// DataRoleTypeEnumerationAll represents all
	DataRoleTypeEnumerationAll DataRoleTypeEnumeration = "all"
	// DataRoleTypeEnumerationCreates represents creates
	DataRoleTypeEnumerationCreates DataRoleTypeEnumeration = "creates"
	// DataRoleTypeEnumerationAugments represents augments
	DataRoleTypeEnumerationAugments DataRoleTypeEnumeration = "augments"
	// DataRoleTypeEnumerationValidates represents validates
	DataRoleTypeEnumerationValidates DataRoleTypeEnumeration = "validates"
	// DataRoleTypeEnumerationCollects represents collects
	DataRoleTypeEnumerationCollects DataRoleTypeEnumeration = "collects"
	// DataRoleTypeEnumerationAggregates represents aggregates
	DataRoleTypeEnumerationAggregates DataRoleTypeEnumeration = "aggregates"
	// DataRoleTypeEnumerationDistributes represents distributes
	DataRoleTypeEnumerationDistributes DataRoleTypeEnumeration = "distributes"
	// DataRoleTypeEnumerationSecures represents secures
	DataRoleTypeEnumerationSecures DataRoleTypeEnumeration = "secures"
	// DataRoleTypeEnumerationRedistributes represents redistributes
	DataRoleTypeEnumerationRedistributes DataRoleTypeEnumeration = "redistributes"
	// DataRoleTypeEnumerationSupports represents supports
	DataRoleTypeEnumerationSupports DataRoleTypeEnumeration = "supports"
	// DataRoleTypeEnumerationOwns represents owns
	DataRoleTypeEnumerationOwns DataRoleTypeEnumeration = "owns"
	// DataRoleTypeEnumerationOther represents other
	DataRoleTypeEnumerationOther DataRoleTypeEnumeration = "other"
)

// ResponsibilitySetRefStructure represents the ResponsibilitySetRefStructure element
// Type for a reference to a RESPONSIBILITY SET.
type ResponsibilitySetRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfResponsibilityRoleRefStructure represents the TypeOfResponsibilityRoleRefStructure element
// Type for a reference to an TYPE OF RESPONSIBILITY ROLE.
type TypeOfResponsibilityRoleRefStructure struct {
	TypeOfValueRefStructure
}

// OrganisationRefsRelStructure represents the organisationRefs_RelStructure element
// Type for a list of references to an ORGANISATION.
type OrganisationRefsRelStructure struct {
	OneToManyRelationshipStructure
	RetailConsortiumRef []RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef []OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef []GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef []ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef []ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef []TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef []OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef []AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef []OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef []OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
}

// OrganisationRefStructure represents the OrganisationRefStructure element
// Type for a reference to an ORGANISATION.
type OrganisationRefStructure struct {
	VersionOfObjectRefStructure
}

// AllOrganisationsRefStructure represents the AllOrganisationsRefStructure element
// Type for a reference tto all oranisationsORGANISATION.
type AllOrganisationsRefStructure struct {
	VersionOfObjectRefStructure
	// Identifier of an ORGANISATION.
	Ref string `xml:"ref,attr" json:"ref"`
}

// OrganisationPartRefStructure represents the OrganisationPartRefStructure element
// Type for a reference to an ORGANISATION PART.
type OrganisationPartRefStructure struct {
	VersionOfObjectRefStructure
}

// BrandingRefStructure represents the BrandingRefStructure element
// Type for a reference to a BRANDING.
type BrandingRefStructure struct {
	TypeOfValueRefStructure
}

// ResponsibilityRoleRefStructure represents the ResponsibilityRoleRefStructure element
// Type for a reference to a RESPONSIBILITY ROLE.
type ResponsibilityRoleRefStructure struct {
	VersionOfObjectRefStructure
}

// ResponsibilitySetRef represents the ResponsibilitySetRef element
// Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.
type ResponsibilitySetRef struct {
	ResponsibilitySetRefStructure
}

// TypeOfResponsibilityRoleRef represents the TypeOfResponsibilityRoleRef element
// Reference to an TYPE OF RESPONSIBILITY ROLE.
type TypeOfResponsibilityRoleRef struct {
	TypeOfResponsibilityRoleRefStructure
}

// OrganisationRef represents the OrganisationRef element
// DEPRECATED reference to any ORGANISATION meeting the substitutiongroup. -v2.0
type OrganisationRef struct {
	OrganisationRefStructure
}

// AllOrganisationsRef represents the AllOrganisationsRef element
// Reference to all ORGANISATIONs.
type AllOrganisationsRef struct {
	AllOrganisationsRefStructure
}

// OrganisationPartRef represents the OrganisationPartRef element
// Reference to an ORGANISATION PART.
type OrganisationPartRef struct {
	OrganisationPartRefStructure
}

// BrandingRef represents the BrandingRef element
// Reference to a BRANDING.
type BrandingRef struct {
	BrandingRefStructure
}

// ResponsibilityRoleRef represents the ResponsibilityRoleRef element
// Reference to a RESPONSIBILITY ROLE.
type ResponsibilityRoleRef struct {
	ResponsibilityRoleRefStructure
}

// LogicalOperationEnumeration represents the LogicalOperationEnumeration enumeration
// Allowed values for logical operations. See https://en.wikipedia.org/wiki/Logic_gate
type LogicalOperationEnumeration string

const (
	// LogicalOperationEnumerationAnd represents AND
	// Successive elements are logically ANDed together; comparison must satisfy all specified values.
	LogicalOperationEnumerationAnd LogicalOperationEnumeration = "AND"
	// LogicalOperationEnumerationOr represents OR
	// Successive elements are logically ORed together; comparison must satisfy at least one specified value.
	LogicalOperationEnumerationOr LogicalOperationEnumeration = "OR"
	// LogicalOperationEnumerationNot represents NOT
	// Specified elements must be different from the given value. If the number of specified elements is equal to 1, the function negates it. If the number of specified elements &gt; 1, this operator is equal to the NOR operator
	LogicalOperationEnumerationNot LogicalOperationEnumeration = "NOT"
	// LogicalOperationEnumerationXor represents XOR
	// Successive elements are logically ORed together; comparison must satisfy only one specified value.
	LogicalOperationEnumerationXor LogicalOperationEnumeration = "XOR"
	// LogicalOperationEnumerationNand represents NAND
	// Successive elements are logically ANDed together; comparison must satisfy all specified values. The result is then negated.
	LogicalOperationEnumerationNand LogicalOperationEnumeration = "NAND"
	// LogicalOperationEnumerationNor represents NOR
	// Successive elements are logically ORed together; comparison must satisfy at least one specified value. The result is then negated.
	LogicalOperationEnumerationNor LogicalOperationEnumeration = "NOR"
	// LogicalOperationEnumerationXnor represents XNOR
	// Successive elements are logically ORed together; comparison must satisfy only one specified value. The result is then negated.
	LogicalOperationEnumerationXnor LogicalOperationEnumeration = "XNOR"
)

// SetOperatorEnumeration represents the SetOperatorEnumeration enumeration
// Allowed values for set operations.where there are one or more GROUPs OF ENTITTies of a given type - used to distinguish between selection of a whole group or of an item in the group).  Used  in a  product description  to indicate the range from which a choice may be made and in a sales transaction to record the nature of a choice that has been made.
// 			              member                                              Set
//            AND         AllMembersAllSets                             AllMembersAllSets
//            OR           OneItem 											AllMembers Of OnSet
//            XOR         OnlyOneItem from AnyGroup               	AllMembers Of OnlySet      - AllOfOneSet
//             NOT			None
type SetOperatorEnumeration string

const (
	// SetOperatorEnumerationOneOfAnyOneSet represents oneOfAnyOneSet
	// Only one item from all  referenced GROUPs OF ENTITTies of a given type may be selected/has been selected.
	SetOperatorEnumerationOneOfAnyOneSet SetOperatorEnumeration = "oneOfAnyOneSet"
	// SetOperatorEnumerationOneOfEachSet represents oneOfEachSet
	// One item from each specified   referenced GROUP OF ENTITTies of a given type must be selected/has been selected..
	SetOperatorEnumerationOneOfEachSet SetOperatorEnumeration = "oneOfEachSet"
	// SetOperatorEnumerationSomeOfAnySet represents someOfAnySet
	// Multiple  items from any referenced GROUP OF ENTITTies of a given type  may be selected/have been selected.
	SetOperatorEnumerationSomeOfAnySet SetOperatorEnumeration = "someOfAnySet"
	// SetOperatorEnumerationAllOfOneSet represents allOfOneSet
	// All  items from one specified  referenced GROUP OF ENTITTies of a given type  may be selected/have been selected.
	SetOperatorEnumerationAllOfOneSet SetOperatorEnumeration = "allOfOneSet"
	// SetOperatorEnumerationAllOfAllSets represents allOfAllSets
	// All  items from all  referenced GROUPs OF ENTITTies of a given type   may be selected/have been selected.
	SetOperatorEnumerationAllOfAllSets SetOperatorEnumeration = "allOfAllSets"
)

// RelativeOperatorEnumeration represents the RelativeOperatorEnumeration enumeration
// Allowed values for Comparison operations.
type RelativeOperatorEnumeration string

const (
	// RelativeOperatorEnumerationEq represents EQ
	// Parameter value must have same identity, or have value equal  to a quantitative value associated with specified item.
	RelativeOperatorEnumerationEq RelativeOperatorEnumeration = "EQ"
	// RelativeOperatorEnumerationNe represents NE
	// Parameter value must not have same identity, or have value different from  a quantitative value associated with specified item.
	RelativeOperatorEnumerationNe RelativeOperatorEnumeration = "NE"
	// RelativeOperatorEnumerationGe represents GE
	// Parameter value must be greater  than  or equal to a quantitative value associated with specified item.
	RelativeOperatorEnumerationGe RelativeOperatorEnumeration = "GE"
	// RelativeOperatorEnumerationGt represents GT
	// Parameter value must be greater than a quantitative value associated with specified item.
	RelativeOperatorEnumerationGt RelativeOperatorEnumeration = "GT"
	// RelativeOperatorEnumerationLe represents LE
	// Parameter value must be less  than  or equal to a quantitative value associated with specified item.
	RelativeOperatorEnumerationLe RelativeOperatorEnumeration = "LE"
	// RelativeOperatorEnumerationLt represents LT
	// Parameter value must be less  than a quantitative value associated with specified item.
	RelativeOperatorEnumerationLt RelativeOperatorEnumeration = "LT"
)

// ValidityConditionRefStructure represents the ValidityConditionRefStructure element
// Type for a reference to a VALIDITY CONDITION.
type ValidityConditionRefStructure struct {
	VersionOfObjectRefStructure
}

// ValidityConditionRefsRelStructure represents the validityConditionRefs_RelStructure element
// A collection of one or more VALIDITY CONDITIONs.
type ValidityConditionRefsRelStructure struct {
	OneToManyRelationshipStructure
	AvailabilityConditionRef []AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	ValidityRuleParameterRef []ValidityRuleParameterRef `xml:"ValidityRuleParameterRef,omitempty" json:"ValidityRuleParameterRef,omitempty"`
	ValidityTriggerRef []ValidityTriggerRef `xml:"ValidityTriggerRef,omitempty" json:"ValidityTriggerRef,omitempty"`
	ValidityConditionRef []ValidityConditionRef `xml:"ValidityConditionRef,omitempty" json:"ValidityConditionRef,omitempty"`
}

// ValidityTriggerRefStructure represents the ValidityTriggerRefStructure element
// Type for a reference to a VALIDITY TRIGGER.
type ValidityTriggerRefStructure struct {
	ValidityConditionRefStructure
}

// ValidityTriggerRefsRelStructure represents the validityTriggerRefs_RelStructure element
// A collection of one or more VALIDITY TRIGGERs.
type ValidityTriggerRefsRelStructure struct {
	OneToManyRelationshipStructure
	ValidityTriggerRef []ValidityTriggerRef `xml:"ValidityTriggerRef" json:"ValidityTriggerRef"`
}

// ValidityRuleParameterRefStructure represents the ValidityRuleParameterRefStructure element
// Type for a reference to a VALIDITY RULE PARAMETER.
type ValidityRuleParameterRefStructure struct {
	ValidityConditionRefStructure
}

// ValidityRuleParameterRefsRelStructure represents the validityRuleParameterRefs_RelStructure element
// A collection of one or more VALIDITY RULE PARAMETERs.
type ValidityRuleParameterRefsRelStructure struct {
	OneToManyRelationshipStructure
	ValidityRuleParameterRef []ValidityRuleParameterRef `xml:"ValidityRuleParameterRef" json:"ValidityRuleParameterRef"`
}

// ValidityConditionRef represents the ValidityConditionRef element
// Reference to a VALIDITY CONDITION.
type ValidityConditionRef struct {
	ValidityConditionRefStructure
}

// ValidityTriggerRef represents the ValidityTriggerRef element
// Reference to a VALIDITY TRIGGER An External event defining a VALIDITY CONDITION. E.g. exceptional flow of a river, bad weather, Road closure for works.
type ValidityTriggerRef struct {
	ValidityTriggerRefStructure
}

// ValidityRuleParameterRef represents the ValidityRuleParameterRef element
// Reference to a VALIDITY RULE PARAMETER. A user defined VALIDITY CONDITION used by a rule for selecting versions.
type ValidityRuleParameterRef struct {
	ValidityRuleParameterRefStructure
}

// ValidityConditionsRelStructure represents the validityConditions_RelStructure element
// A collection of one or more VALIDITY CONDITIONs.
type ValidityConditionsRelStructure struct {
	ContainmentAggregationStructure
	AvailabilityConditionRef []AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	ValidityRuleParameterRef []ValidityRuleParameterRef `xml:"ValidityRuleParameterRef,omitempty" json:"ValidityRuleParameterRef,omitempty"`
	ValidityTriggerRef []ValidityTriggerRef `xml:"ValidityTriggerRef,omitempty" json:"ValidityTriggerRef,omitempty"`
	ValidityConditionRef []ValidityConditionRef `xml:"ValidityConditionRef,omitempty" json:"ValidityConditionRef,omitempty"`
	ValidBetween []ValidBetween `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	SimpleAvailabilityCondition []SimpleAvailabilityCondition `xml:"SimpleAvailabilityCondition,omitempty" json:"SimpleAvailabilityCondition,omitempty"`
	ValidDuring []ValidDuring `xml:"ValidDuring,omitempty" json:"ValidDuring,omitempty"`
	AvailabilityCondition []AvailabilityCondition `xml:"AvailabilityCondition,omitempty" json:"AvailabilityCondition,omitempty"`
	ValidityRuleParameter []ValidityRuleParameter `xml:"ValidityRuleParameter,omitempty" json:"ValidityRuleParameter,omitempty"`
	ValidityTrigger []ValidityTrigger `xml:"ValidityTrigger,omitempty" json:"ValidityTrigger,omitempty"`
	ValidityCondition []ValidityCondition `xml:"ValidityCondition,omitempty" json:"ValidityCondition,omitempty"`
}

// ValidityConditionVersionStructure represents the ValidityCondition_VersionStructure element
// Types for a VALIDITY CONDITION.
type ValidityConditionVersionStructure struct {
	DataManagedObjectStructure
	// Name of VALIDITY CONDITION.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VALIDITY CONDITION.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Entity to which condition specifically attaches.
	ConditionedObjectRef *VersionOfObjectRefStructure `xml:"ConditionedObjectRef,omitempty" json:"ConditionedObjectRef,omitempty"`
	// CONDITION with which this rule is logically ANDed.
	WithConditionRef *ValidityConditionRefStructure `xml:"WithConditionRef,omitempty" json:"WithConditionRef,omitempty"`
}

// ValidityTriggersRelStructure represents the validityTriggers_RelStructure element
// A collection of one or more VALIDITY TRIGGERs.
type ValidityTriggersRelStructure struct {
	ContainmentAggregationStructure
	// External event defining a VALIDITY CONDITION. E.g. exceptional flow of a river, bad weather, Road closure for works.
	ValidityTrigger []ValidityTriggerVersionStructure `xml:"ValidityTrigger" json:"ValidityTrigger"`
}

// ValidityTriggerVersionStructure represents the ValidityTrigger_VersionStructure element
// Type for a VALIDITY TRIGGER.
type ValidityTriggerVersionStructure struct {
	ValidityConditionVersionStructure
	// Entity on which Trigger is based - Trigger value is taken from it.
	TriggerObjectRef *VersionOfObjectRefStructure `xml:"TriggerObjectRef,omitempty" json:"TriggerObjectRef,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
}

// ValidityRuleParametersRelStructure represents the validityRuleParameters_RelStructure element
// A collection of one or more VALIDITY PARAMETERs.
type ValidityRuleParametersRelStructure struct {
	ContainmentAggregationStructure
	// Parameter for a rule of a user defined VALIDITY CONDITION used by a rule for selecting versions. E.g. river level &gt; 1,5 m and bad weather.
	ValidityRuleParameter []ValidityRuleParameterVersionStructure `xml:"ValidityRuleParameter" json:"ValidityRuleParameter"`
}

// ValidityRuleParameterVersionStructure represents the ValidityRuleParameter_VersionStructure element
// Type for a VALIDITY PARAMETER.
type ValidityRuleParameterVersionStructure struct {
	ValidityConditionVersionStructure
	// Entity on which Rules based - Trigger value is taken from it.
	RuleObjectRef *VersionOfObjectRefStructure `xml:"RuleObjectRef,omitempty" json:"RuleObjectRef,omitempty"`
	// Name of an Attribute of the referenced ENTITY which provides Trigger value.
	AttributeName *string `xml:"AttributeName,omitempty" json:"AttributeName,omitempty"`
	// Comparison operator to be used when comparing the referenced attribute of  to the Attribute Value : EQ, NE,GE, GT, LE,LT (equal, not equal, greater equal, greater than, lower equal, lower than).
	ComparisonOperator *RelativeOperatorEnumeration `xml:"ComparisonOperator,omitempty" json:"ComparisonOperator,omitempty"`
	// Value of attribute of ENTITY.
	AttributeValue *interface{} `xml:"AttributeValue,omitempty" json:"AttributeValue,omitempty"`
	// Method for computing an attribute. By default this will be as simple operator. Some systems may support additional means of comparison.
	Method *interface{} `xml:"Method,omitempty" json:"Method,omitempty"`
	// If the referenced element is currently valid.
	IsValid *bool `xml:"isValid,omitempty" json:"isValid,omitempty"`
}

// ValidBetweenVersionStructure represents the ValidBetween_VersionStructure element
// Type for a Simple VALIDITY CONDITION.
type ValidBetweenVersionStructure struct {
	ValidityConditionVersionStructure
	// Start date of AVAILABILITY CONDITION.
	FromDate *time.Time `xml:"FromDate,omitempty" json:"FromDate,omitempty"`
	// End of AVAILABILITY CONDITION. Date is INCLUSIVE.
	ToDate *time.Time `xml:"ToDate,omitempty" json:"ToDate,omitempty"`
}

// ValidityCondition represents the ValidityCondition element
// Condition used in order to characterise a given VERSION of a VERSION FRAME. A VALIDITY CONDITION consists of a parameter (e.g. date, triggering event, etc) and its type of application (e.g. for, from, until, etc.).
type ValidityCondition struct {
	ValidityConditionVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// ValidityTrigger represents the ValidityTrigger element
// External event defining a VALIDITY CONDITION. E.g. exceptional flow of a river, bad weather, Road closure for works.
type ValidityTrigger struct {
	ValidityTriggerVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// ValidityRuleParameter represents the ValidityRuleParameter element
// A user defined VALIDITY CONDITION used by a rule for selecting versions. E.g. river level &gt; 1,5 m and bad weather.
type ValidityRuleParameter struct {
	ValidityRuleParameterVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// SimpleValidityCondition represents the SimpleValidityCondition element
// OPTIMISATION Simple version of a VALIDITY CONDITION used in order to characterise a given VERSION of a VERSION FRAME. Comprises a simple period.Deprecated.
type SimpleValidityCondition struct {
	ValidBetweenVersionStructure
	// Name of VALIDITY CONDITION.
	Name interface{} `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VALIDITY CONDITION.
	Description interface{} `xml:"Description,omitempty" json:"Description,omitempty"`
	// Entity to which condition specifically attaches.
	ConditionedObjectRef interface{} `xml:"ConditionedObjectRef,omitempty" json:"ConditionedObjectRef,omitempty"`
	// CONDITION with which this rule is logically ANDed.
	WithConditionRef interface{} `xml:"WithConditionRef,omitempty" json:"WithConditionRef,omitempty"`
	// A list of alternative Key values for an element.
	KeyList interface{} `xml:"keyList,omitempty" json:"keyList,omitempty"`
	Extensions interface{} `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// ValidBetween represents the ValidBetween element
// OPTIMISATION. Simple version of a VALIDITY CONDITION. Comprises a simple period. NO UNIQUENESS CONSTRAINT.
type ValidBetween struct {
	ValidBetweenVersionStructure
	// Name of VALIDITY CONDITION.
	Name interface{} `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VALIDITY CONDITION.
	Description interface{} `xml:"Description,omitempty" json:"Description,omitempty"`
	// Entity to which condition specifically attaches.
	ConditionedObjectRef interface{} `xml:"ConditionedObjectRef,omitempty" json:"ConditionedObjectRef,omitempty"`
	// CONDITION with which this rule is logically ANDed.
	WithConditionRef interface{} `xml:"WithConditionRef,omitempty" json:"WithConditionRef,omitempty"`
	// A list of alternative Key values for an element.
	KeyList interface{} `xml:"keyList,omitempty" json:"keyList,omitempty"`
	Extensions interface{} `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// AlternativeTextRefStructure represents the AlternativeTextRefStructure element
// Type for a reference to an ALTERNATIVE TEXT.
type AlternativeTextRefStructure struct {
	VersionOfObjectRefStructure
}

// AlternativeTextRef represents the AlternativeTextRef element
// Reference to an ALTERNATIVE TEXT.
type AlternativeTextRef struct {
	AlternativeTextRefStructure
}

// AlternativeTextsRelStructure represents the alternativeTexts_RelStructure element
// Type for list of ALTERNATIVE TEXTs
type AlternativeTextsRelStructure struct {
	StrictContainmentAggregationStructure
	// ALTERNATIVE TEXT for an text attribute of Element.
	AlternativeText []AlternativeText `xml:"AlternativeText" json:"AlternativeText"`
}

// AlternativeTextVersionedChildStructure represents the AlternativeText_VersionedChildStructure element
// Type for ALTERNATIVE TEXT
type AlternativeTextVersionedChildStructure struct {
	VersionedChildStructure
	// Object for  attribute for which ALTERNATIVE TEXTprovides an alias. May be omitted if given by context.
	DataManagedObjectRef *VersionOfObjectRefStructure `xml:"DataManagedObjectRef,omitempty" json:"DataManagedObjectRef,omitempty"`
	// Name of the entity.
	Text MultilingualString `xml:"Text" json:"Text"`
	// Name of text attribute for which this is the  alternative tex. Must be an existing attribute name
	AttributeName *string `xml:"attributeName,attr,omitempty" json:"attributeName,omitempty"`
	// Name of language for which this is to be used.
	UseForLanguage *string `xml:"useForLanguage,attr,omitempty" json:"useForLanguage,omitempty"`
	// Order of name.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// AlternativeText represents the AlternativeText element
// Alternative Text. +v1.1
type AlternativeText struct {
	AlternativeTextVersionedChildStructure
	Extensions interface{} `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// DataManagedObjectStructure represents the DataManagedObjectStructure element
// Abstract Type for a MANAGED OBJECT.
type DataManagedObjectStructure struct {
	EntityInVersionStructure
	// A list of alternative Key values for an element.
	KeyList *KeyList `xml:"keyList,omitempty" json:"keyList,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	BrandingRef *BrandingRef `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	// Reference to RESPONSIBILITY SET for managing the object. If absent, then responsibility is same as for containing context of this object.
	ResponsibilitySetRefAttribute *string `xml:"responsibilitySetRef,attr,omitempty" json:"responsibilitySetRef,omitempty"`
}

// VersionedChildStructure represents the VersionedChildStructure element
// Type for VERSIONED CHILD.
type VersionedChildStructure struct {
	EntityInVersionStructure
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
}

// DerivedViewStructure represents the DerivedViewStructure element
// Type for MANAGED OBJECT VIEW.
type DerivedViewStructure struct {
	BrandingRef *BrandingRef `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	// Identifier of Object of which this is a view.
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
}

// DataManagedObjectViewStructure represents the DataManagedObject_ViewStructure element
// Type for MANAGED OBJECT VIEW.
type DataManagedObjectViewStructure struct {
	DataManagedObjectStructure
}

// KeyListStructure represents the KeyListStructure element
// Type for a Key List.
type KeyListStructure struct {
	// Key value pair for Entity.
	KeyValue []KeyValueStructure `xml:"KeyValue" json:"KeyValue"`
}

// KeyValueStructure represents the KeyValueStructure element
// Type for a Key List.
type KeyValueStructure struct {
	// Identifier of value e.g. System.
	Key string `xml:"Key" json:"Key"`
	// Value for alternative key.
	Value string `xml:",chardata" json:"value"`
	// Identifier of type of key.
	TypeOfKey *string `xml:"typeOfKey,attr,omitempty" json:"typeOfKey,omitempty"`
}

// DataManagedObject represents the DataManagedObject element
// An ENTITY in VERSION that can be associated with a RESPONSIBILITY SET that describes who has responsibility for managing the data.
type DataManagedObject struct {
	DataManagedObjectStructure
}

// VersionedChild represents the VersionedChild element
// A child ENTIITY whose RESPONSIBILITY SET must be the same as its containing parent object, and which cannot exist independently of its parent.
type VersionedChild struct {
	VersionedChildStructure
}

// DerivedView represents the DerivedView element
// Abstract derived view of a MANAGED OBJECT for general purpose use.
type DerivedView struct {
	DerivedViewStructure
}

// DataManagedObjectView represents the DataManagedObjectView element
// Abstract derived view of a MANAGED OBJECT for general purpose use.
type DataManagedObjectView struct {
	DataManagedObjectViewStructure
}

// KeyList represents the keyList element
// A list of alternative Key values for an element.
type KeyList struct {
	KeyListStructure
}

// TypesOfValueInFrameRelStructure represents the typesOfValueInFrame_RelStructure element
// Type for containment in frame of TYPE OF VALUEs.
type TypesOfValueInFrameRelStructure struct {
	ContainmentAggregationStructure
	ValueSet []ValueSet `xml:"ValueSet,omitempty" json:"ValueSet,omitempty"`
	TypeOfFleet []TypeOfFleet `xml:"TypeOfFleet,omitempty" json:"TypeOfFleet,omitempty"`
	ParkingBayStatus []ParkingBayStatus `xml:"ParkingBayStatus,omitempty" json:"ParkingBayStatus,omitempty"`
	TypeOfMediumAccessDevice []TypeOfMediumAccessDevice `xml:"TypeOfMediumAccessDevice,omitempty" json:"TypeOfMediumAccessDevice,omitempty"`
	TypeOfMachineReadability []TypeOfMachineReadability `xml:"TypeOfMachineReadability,omitempty" json:"TypeOfMachineReadability,omitempty"`
	TypeOfProof []TypeOfProof `xml:"TypeOfProof,omitempty" json:"TypeOfProof,omitempty"`
	TypeOfConcession []TypeOfConcession `xml:"TypeOfConcession,omitempty" json:"TypeOfConcession,omitempty"`
	ChargingMoment []ChargingMoment `xml:"ChargingMoment,omitempty" json:"ChargingMoment,omitempty"`
	TypeOfUsageParameter []TypeOfUsageParameter `xml:"TypeOfUsageParameter,omitempty" json:"TypeOfUsageParameter,omitempty"`
	TypeOfFareTable []TypeOfFareTable `xml:"TypeOfFareTable,omitempty" json:"TypeOfFareTable,omitempty"`
	TypeOfPricingRule []TypeOfPricingRule `xml:"TypeOfPricingRule,omitempty" json:"TypeOfPricingRule,omitempty"`
	PriceUnit []PriceUnit `xml:"PriceUnit,omitempty" json:"PriceUnit,omitempty"`
	TimingAlgorithmType []TimingAlgorithmType `xml:"TimingAlgorithmType,omitempty" json:"TimingAlgorithmType,omitempty"`
	PurposeOfJourneyPartition []PurposeOfJourneyPartition `xml:"PurposeOfJourneyPartition,omitempty" json:"PurposeOfJourneyPartition,omitempty"`
	PointOfInterestClassification []PointOfInterestClassification `xml:"PointOfInterestClassification,omitempty" json:"PointOfInterestClassification,omitempty"`
	TypeOfParking []TypeOfParking `xml:"TypeOfParking,omitempty" json:"TypeOfParking,omitempty"`
	TypeOfServiceFeature []TypeOfServiceFeature `xml:"TypeOfServiceFeature,omitempty" json:"TypeOfServiceFeature,omitempty"`
	Direction []Direction `xml:"Direction,omitempty" json:"Direction,omitempty"`
	TypeOfSecurityList []TypeOfSecurityList `xml:"TypeOfSecurityList,omitempty" json:"TypeOfSecurityList,omitempty"`
	TypeOfDriverPermit []TypeOfDriverPermit `xml:"TypeOfDriverPermit,omitempty" json:"TypeOfDriverPermit,omitempty"`
	PurposeOfEquipmentProfile []PurposeOfEquipmentProfile `xml:"PurposeOfEquipmentProfile,omitempty" json:"PurposeOfEquipmentProfile,omitempty"`
	TypeOfProductCategory []TypeOfProductCategory `xml:"TypeOfProductCategory,omitempty" json:"TypeOfProductCategory,omitempty"`
	TypeOfPaymentMethod []TypeOfPaymentMethod `xml:"TypeOfPaymentMethod,omitempty" json:"TypeOfPaymentMethod,omitempty"`
	ClassOfUse []ClassOfUse `xml:"ClassOfUse,omitempty" json:"ClassOfUse,omitempty"`
	Submode []Submode `xml:"Submode,omitempty" json:"Submode,omitempty"`
	OpenTransportMode []OpenTransportMode `xml:"OpenTransportMode,omitempty" json:"OpenTransportMode,omitempty"`
	TypeOfCodespaceAssignment []TypeOfCodespaceAssignment `xml:"TypeOfCodespaceAssignment,omitempty" json:"TypeOfCodespaceAssignment,omitempty"`
	TypeOfValidity []TypeOfValidity `xml:"TypeOfValidity,omitempty" json:"TypeOfValidity,omitempty"`
	PurposeOfGrouping []PurposeOfGrouping `xml:"PurposeOfGrouping,omitempty" json:"PurposeOfGrouping,omitempty"`
	Branding []Branding `xml:"Branding,omitempty" json:"Branding,omitempty"`
	DataSource []DataSource `xml:"DataSource,omitempty" json:"DataSource,omitempty"`
	TypeOfMobilityService []TypeOfMobilityService `xml:"TypeOfMobilityService,omitempty" json:"TypeOfMobilityService,omitempty"`
	TypeOfRetailDevice []TypeOfRetailDevice `xml:"TypeOfRetailDevice,omitempty" json:"TypeOfRetailDevice,omitempty"`
	CustomerAccountStatus []CustomerAccountStatus `xml:"CustomerAccountStatus,omitempty" json:"CustomerAccountStatus,omitempty"`
	TypeOfCustomerAccount []TypeOfCustomerAccount `xml:"TypeOfCustomerAccount,omitempty" json:"TypeOfCustomerAccount,omitempty"`
	TypeOfFareContractEntry []TypeOfFareContractEntry `xml:"TypeOfFareContractEntry,omitempty" json:"TypeOfFareContractEntry,omitempty"`
	TypeOfFareContract []TypeOfFareContract `xml:"TypeOfFareContract,omitempty" json:"TypeOfFareContract,omitempty"`
	TypeOfTravelDocument []TypeOfTravelDocument `xml:"TypeOfTravelDocument,omitempty" json:"TypeOfTravelDocument,omitempty"`
	TypeOfSalesOfferPackage []TypeOfSalesOfferPackage `xml:"TypeOfSalesOfferPackage,omitempty" json:"TypeOfSalesOfferPackage,omitempty"`
	TypeOfFareProduct []TypeOfFareProduct `xml:"TypeOfFareProduct,omitempty" json:"TypeOfFareProduct,omitempty"`
	TypeOfFareStructureElement []TypeOfFareStructureElement `xml:"TypeOfFareStructureElement,omitempty" json:"TypeOfFareStructureElement,omitempty"`
	TypeOfTariff []TypeOfTariff `xml:"TypeOfTariff,omitempty" json:"TypeOfTariff,omitempty"`
	TypeOfAccessRightAssignment []TypeOfAccessRightAssignment `xml:"TypeOfAccessRightAssignment,omitempty" json:"TypeOfAccessRightAssignment,omitempty"`
	TypeOfFareStructureFactor []TypeOfFareStructureFactor `xml:"TypeOfFareStructureFactor,omitempty" json:"TypeOfFareStructureFactor,omitempty"`
	TypeOfFlexibleService []TypeOfFlexibleService `xml:"TypeOfFlexibleService,omitempty" json:"TypeOfFlexibleService,omitempty"`
	TypeOfTimeDemandType []TypeOfTimeDemandType `xml:"TypeOfTimeDemandType,omitempty" json:"TypeOfTimeDemandType,omitempty"`
	TypeOfPassengerInformationEquipment []TypeOfPassengerInformationEquipment `xml:"TypeOfPassengerInformationEquipment,omitempty" json:"TypeOfPassengerInformationEquipment,omitempty"`
	TypeOfJourneyPattern []TypeOfJourneyPattern `xml:"TypeOfJourneyPattern,omitempty" json:"TypeOfJourneyPattern,omitempty"`
	TypeOfActivation []TypeOfActivation `xml:"TypeOfActivation,omitempty" json:"TypeOfActivation,omitempty"`
	TypeOfModeOfOperation []TypeOfModeOfOperation `xml:"TypeOfModeOfOperation,omitempty" json:"TypeOfModeOfOperation,omitempty"`
	TypeOfPlug []TypeOfPlug `xml:"TypeOfPlug,omitempty" json:"TypeOfPlug,omitempty"`
	TypeOfBatteryChemistry []TypeOfBatteryChemistry `xml:"TypeOfBatteryChemistry,omitempty" json:"TypeOfBatteryChemistry,omitempty"`
	TypeOfLine []TypeOfLine `xml:"TypeOfLine,omitempty" json:"TypeOfLine,omitempty"`
	TypeOfDeliveryVariant []TypeOfDeliveryVariant `xml:"TypeOfDeliveryVariant,omitempty" json:"TypeOfDeliveryVariant,omitempty"`
	TypeOfNotice []TypeOfNotice `xml:"TypeOfNotice,omitempty" json:"TypeOfNotice,omitempty"`
	TypeOfCongestion []TypeOfCongestion `xml:"TypeOfCongestion,omitempty" json:"TypeOfCongestion,omitempty"`
	TypeOfFacility []TypeOfFacility `xml:"TypeOfFacility,omitempty" json:"TypeOfFacility,omitempty"`
	TypeOfService []TypeOfService `xml:"TypeOfService,omitempty" json:"TypeOfService,omitempty"`
	TypeOfEquipment []TypeOfEquipment `xml:"TypeOfEquipment,omitempty" json:"TypeOfEquipment,omitempty"`
	TypeOfFeature []TypeOfFeature `xml:"TypeOfFeature,omitempty" json:"TypeOfFeature,omitempty"`
	TypeOfLinkSequence []TypeOfLinkSequence `xml:"TypeOfLinkSequence,omitempty" json:"TypeOfLinkSequence,omitempty"`
	TypeOfPlace []TypeOfPlace `xml:"TypeOfPlace,omitempty" json:"TypeOfPlace,omitempty"`
	TypeOfTransfer []TypeOfTransfer `xml:"TypeOfTransfer,omitempty" json:"TypeOfTransfer,omitempty"`
	TypeOfOperation []TypeOfOperation `xml:"TypeOfOperation,omitempty" json:"TypeOfOperation,omitempty"`
	TypeOfOrganisationPart []TypeOfOrganisationPart `xml:"TypeOfOrganisationPart,omitempty" json:"TypeOfOrganisationPart,omitempty"`
	TypeOfOrganisation []TypeOfOrganisation `xml:"TypeOfOrganisation,omitempty" json:"TypeOfOrganisation,omitempty"`
	TypeOfZone []TypeOfZone `xml:"TypeOfZone,omitempty" json:"TypeOfZone,omitempty"`
	TypeOfLink []TypeOfLink `xml:"TypeOfLink,omitempty" json:"TypeOfLink,omitempty"`
	TypeOfPoint []TypeOfPoint `xml:"TypeOfPoint,omitempty" json:"TypeOfPoint,omitempty"`
	TypeOfProjection []TypeOfProjection `xml:"TypeOfProjection,omitempty" json:"TypeOfProjection,omitempty"`
	TypeOfFrame []TypeOfFrame `xml:"TypeOfFrame,omitempty" json:"TypeOfFrame,omitempty"`
	TypeOfResponsibilityRole []TypeOfResponsibilityRole `xml:"TypeOfResponsibilityRole,omitempty" json:"TypeOfResponsibilityRole,omitempty"`
	TypeOfEntity []TypeOfEntity `xml:"TypeOfEntity,omitempty" json:"TypeOfEntity,omitempty"`
	TypeOfVersion []TypeOfVersion `xml:"TypeOfVersion,omitempty" json:"TypeOfVersion,omitempty"`
}

// TypesOfValueStructure represents the typesOfValueStructure element
// Type for a list of  TYPEs OF VALUE.
type TypesOfValueStructure struct {
	StrictContainmentAggregationStructure
	TypeOfFleet []TypeOfFleet `xml:"TypeOfFleet,omitempty" json:"TypeOfFleet,omitempty"`
	ParkingBayStatus []ParkingBayStatus `xml:"ParkingBayStatus,omitempty" json:"ParkingBayStatus,omitempty"`
	TypeOfMediumAccessDevice []TypeOfMediumAccessDevice `xml:"TypeOfMediumAccessDevice,omitempty" json:"TypeOfMediumAccessDevice,omitempty"`
	TypeOfMachineReadability []TypeOfMachineReadability `xml:"TypeOfMachineReadability,omitempty" json:"TypeOfMachineReadability,omitempty"`
	TypeOfProof []TypeOfProof `xml:"TypeOfProof,omitempty" json:"TypeOfProof,omitempty"`
	TypeOfConcession []TypeOfConcession `xml:"TypeOfConcession,omitempty" json:"TypeOfConcession,omitempty"`
	ChargingMoment []ChargingMoment `xml:"ChargingMoment,omitempty" json:"ChargingMoment,omitempty"`
	TypeOfUsageParameter []TypeOfUsageParameter `xml:"TypeOfUsageParameter,omitempty" json:"TypeOfUsageParameter,omitempty"`
	TypeOfFareTable []TypeOfFareTable `xml:"TypeOfFareTable,omitempty" json:"TypeOfFareTable,omitempty"`
	TypeOfPricingRule []TypeOfPricingRule `xml:"TypeOfPricingRule,omitempty" json:"TypeOfPricingRule,omitempty"`
	PriceUnit []PriceUnit `xml:"PriceUnit,omitempty" json:"PriceUnit,omitempty"`
	TimingAlgorithmType []TimingAlgorithmType `xml:"TimingAlgorithmType,omitempty" json:"TimingAlgorithmType,omitempty"`
	PurposeOfJourneyPartition []PurposeOfJourneyPartition `xml:"PurposeOfJourneyPartition,omitempty" json:"PurposeOfJourneyPartition,omitempty"`
	PointOfInterestClassification []PointOfInterestClassification `xml:"PointOfInterestClassification,omitempty" json:"PointOfInterestClassification,omitempty"`
	TypeOfParking []TypeOfParking `xml:"TypeOfParking,omitempty" json:"TypeOfParking,omitempty"`
	TypeOfServiceFeature []TypeOfServiceFeature `xml:"TypeOfServiceFeature,omitempty" json:"TypeOfServiceFeature,omitempty"`
	Direction []Direction `xml:"Direction,omitempty" json:"Direction,omitempty"`
	TypeOfSecurityList []TypeOfSecurityList `xml:"TypeOfSecurityList,omitempty" json:"TypeOfSecurityList,omitempty"`
	TypeOfDriverPermit []TypeOfDriverPermit `xml:"TypeOfDriverPermit,omitempty" json:"TypeOfDriverPermit,omitempty"`
	PurposeOfEquipmentProfile []PurposeOfEquipmentProfile `xml:"PurposeOfEquipmentProfile,omitempty" json:"PurposeOfEquipmentProfile,omitempty"`
	TypeOfProductCategory []TypeOfProductCategory `xml:"TypeOfProductCategory,omitempty" json:"TypeOfProductCategory,omitempty"`
	TypeOfPaymentMethod []TypeOfPaymentMethod `xml:"TypeOfPaymentMethod,omitempty" json:"TypeOfPaymentMethod,omitempty"`
	ClassOfUse []ClassOfUse `xml:"ClassOfUse,omitempty" json:"ClassOfUse,omitempty"`
	Submode []Submode `xml:"Submode,omitempty" json:"Submode,omitempty"`
	OpenTransportMode []OpenTransportMode `xml:"OpenTransportMode,omitempty" json:"OpenTransportMode,omitempty"`
	TypeOfCodespaceAssignment []TypeOfCodespaceAssignment `xml:"TypeOfCodespaceAssignment,omitempty" json:"TypeOfCodespaceAssignment,omitempty"`
	TypeOfValidity []TypeOfValidity `xml:"TypeOfValidity,omitempty" json:"TypeOfValidity,omitempty"`
	PurposeOfGrouping []PurposeOfGrouping `xml:"PurposeOfGrouping,omitempty" json:"PurposeOfGrouping,omitempty"`
	Branding []Branding `xml:"Branding,omitempty" json:"Branding,omitempty"`
	DataSource []DataSource `xml:"DataSource,omitempty" json:"DataSource,omitempty"`
	TypeOfMobilityService []TypeOfMobilityService `xml:"TypeOfMobilityService,omitempty" json:"TypeOfMobilityService,omitempty"`
	TypeOfRetailDevice []TypeOfRetailDevice `xml:"TypeOfRetailDevice,omitempty" json:"TypeOfRetailDevice,omitempty"`
	CustomerAccountStatus []CustomerAccountStatus `xml:"CustomerAccountStatus,omitempty" json:"CustomerAccountStatus,omitempty"`
	TypeOfCustomerAccount []TypeOfCustomerAccount `xml:"TypeOfCustomerAccount,omitempty" json:"TypeOfCustomerAccount,omitempty"`
	TypeOfFareContractEntry []TypeOfFareContractEntry `xml:"TypeOfFareContractEntry,omitempty" json:"TypeOfFareContractEntry,omitempty"`
	TypeOfFareContract []TypeOfFareContract `xml:"TypeOfFareContract,omitempty" json:"TypeOfFareContract,omitempty"`
	TypeOfTravelDocument []TypeOfTravelDocument `xml:"TypeOfTravelDocument,omitempty" json:"TypeOfTravelDocument,omitempty"`
	TypeOfSalesOfferPackage []TypeOfSalesOfferPackage `xml:"TypeOfSalesOfferPackage,omitempty" json:"TypeOfSalesOfferPackage,omitempty"`
	TypeOfFareProduct []TypeOfFareProduct `xml:"TypeOfFareProduct,omitempty" json:"TypeOfFareProduct,omitempty"`
	TypeOfFareStructureElement []TypeOfFareStructureElement `xml:"TypeOfFareStructureElement,omitempty" json:"TypeOfFareStructureElement,omitempty"`
	TypeOfTariff []TypeOfTariff `xml:"TypeOfTariff,omitempty" json:"TypeOfTariff,omitempty"`
	TypeOfAccessRightAssignment []TypeOfAccessRightAssignment `xml:"TypeOfAccessRightAssignment,omitempty" json:"TypeOfAccessRightAssignment,omitempty"`
	TypeOfFareStructureFactor []TypeOfFareStructureFactor `xml:"TypeOfFareStructureFactor,omitempty" json:"TypeOfFareStructureFactor,omitempty"`
	TypeOfFlexibleService []TypeOfFlexibleService `xml:"TypeOfFlexibleService,omitempty" json:"TypeOfFlexibleService,omitempty"`
	TypeOfTimeDemandType []TypeOfTimeDemandType `xml:"TypeOfTimeDemandType,omitempty" json:"TypeOfTimeDemandType,omitempty"`
	TypeOfPassengerInformationEquipment []TypeOfPassengerInformationEquipment `xml:"TypeOfPassengerInformationEquipment,omitempty" json:"TypeOfPassengerInformationEquipment,omitempty"`
	TypeOfJourneyPattern []TypeOfJourneyPattern `xml:"TypeOfJourneyPattern,omitempty" json:"TypeOfJourneyPattern,omitempty"`
	TypeOfActivation []TypeOfActivation `xml:"TypeOfActivation,omitempty" json:"TypeOfActivation,omitempty"`
	TypeOfModeOfOperation []TypeOfModeOfOperation `xml:"TypeOfModeOfOperation,omitempty" json:"TypeOfModeOfOperation,omitempty"`
	TypeOfPlug []TypeOfPlug `xml:"TypeOfPlug,omitempty" json:"TypeOfPlug,omitempty"`
	TypeOfBatteryChemistry []TypeOfBatteryChemistry `xml:"TypeOfBatteryChemistry,omitempty" json:"TypeOfBatteryChemistry,omitempty"`
	TypeOfLine []TypeOfLine `xml:"TypeOfLine,omitempty" json:"TypeOfLine,omitempty"`
	TypeOfDeliveryVariant []TypeOfDeliveryVariant `xml:"TypeOfDeliveryVariant,omitempty" json:"TypeOfDeliveryVariant,omitempty"`
	TypeOfNotice []TypeOfNotice `xml:"TypeOfNotice,omitempty" json:"TypeOfNotice,omitempty"`
	TypeOfCongestion []TypeOfCongestion `xml:"TypeOfCongestion,omitempty" json:"TypeOfCongestion,omitempty"`
	TypeOfFacility []TypeOfFacility `xml:"TypeOfFacility,omitempty" json:"TypeOfFacility,omitempty"`
	TypeOfService []TypeOfService `xml:"TypeOfService,omitempty" json:"TypeOfService,omitempty"`
	TypeOfEquipment []TypeOfEquipment `xml:"TypeOfEquipment,omitempty" json:"TypeOfEquipment,omitempty"`
	TypeOfFeature []TypeOfFeature `xml:"TypeOfFeature,omitempty" json:"TypeOfFeature,omitempty"`
	TypeOfLinkSequence []TypeOfLinkSequence `xml:"TypeOfLinkSequence,omitempty" json:"TypeOfLinkSequence,omitempty"`
	TypeOfPlace []TypeOfPlace `xml:"TypeOfPlace,omitempty" json:"TypeOfPlace,omitempty"`
	TypeOfTransfer []TypeOfTransfer `xml:"TypeOfTransfer,omitempty" json:"TypeOfTransfer,omitempty"`
	TypeOfOperation []TypeOfOperation `xml:"TypeOfOperation,omitempty" json:"TypeOfOperation,omitempty"`
	TypeOfOrganisationPart []TypeOfOrganisationPart `xml:"TypeOfOrganisationPart,omitempty" json:"TypeOfOrganisationPart,omitempty"`
	TypeOfOrganisation []TypeOfOrganisation `xml:"TypeOfOrganisation,omitempty" json:"TypeOfOrganisation,omitempty"`
	TypeOfZone []TypeOfZone `xml:"TypeOfZone,omitempty" json:"TypeOfZone,omitempty"`
	TypeOfLink []TypeOfLink `xml:"TypeOfLink,omitempty" json:"TypeOfLink,omitempty"`
	TypeOfPoint []TypeOfPoint `xml:"TypeOfPoint,omitempty" json:"TypeOfPoint,omitempty"`
	TypeOfProjection []TypeOfProjection `xml:"TypeOfProjection,omitempty" json:"TypeOfProjection,omitempty"`
	TypeOfFrame []TypeOfFrame `xml:"TypeOfFrame,omitempty" json:"TypeOfFrame,omitempty"`
	TypeOfResponsibilityRole []TypeOfResponsibilityRole `xml:"TypeOfResponsibilityRole,omitempty" json:"TypeOfResponsibilityRole,omitempty"`
	TypeOfEntity []TypeOfEntity `xml:"TypeOfEntity,omitempty" json:"TypeOfEntity,omitempty"`
	TypeOfVersion []TypeOfVersion `xml:"TypeOfVersion,omitempty" json:"TypeOfVersion,omitempty"`
}

// TypeOfValueVersionStructure represents the TypeOfValue_VersionStructure element
// Type for a TYPE OF VALUE. Abstract supertype  used to define open  classifications of  value types.
type TypeOfValueVersionStructure struct {
	DataManagedObjectStructure
	// Name of TYPE OF VALUE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name for TYPE OF VALUE.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Description of TYPE OF VALUE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Default image for TYPE OF VALUE.
	Image *string `xml:"Image,omitempty" json:"Image,omitempty"`
	// Default URL for TYPE OF VALUE.
	Url *string `xml:"Url,omitempty" json:"Url,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
}

// ValueSetVersionStructure represents the ValueSet_VersionStructure element
// Type for a VALUE SET. Abstract supertype  used to define open  classifications of  value types.
type ValueSetVersionStructure struct {
	DataManagedObjectStructure
	// Name of Value.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Values in Set.
	Values *TypesOfValueStructure `xml:"values,omitempty" json:"values,omitempty"`
	// Name of Class of Values in Set.
	ClassOfValues *string `xml:"classOfValues,attr,omitempty" json:"classOfValues,omitempty"`
}

// TypeOfEntityVersionStructure represents the TypeOfEntity_VersionStructure element
// Type for a TYPE OFENTITY. Abstract supertype  used to define open  classifications of  value types.
type TypeOfEntityVersionStructure struct {
	TypeOfValueVersionStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// TypeOfValue represents the TypeOfValue element
// A code value from an extensible set, i.e.   which may be added to by user applications and is used to validate the properties of Entities.
type TypeOfValue struct {
	TypeOfValueVersionStructure
}

// ValueSet represents the ValueSet element
// An extensible set of code values   which may be added to by user applications and is used to validate the properties of Entities.
type ValueSet struct {
	ValueSetVersionStructure
}

// TypeOfEntity represents the TypeOfEntity element
// A Type of value used to classify an ENTITY.
type TypeOfEntity struct {
	TypeOfEntityVersionStructure
}

// DataSourcesInFrameRelStructure represents the dataSourcesInFrame_RelStructure element
// Type for containment in frame of DATA SOURCE.
type DataSourcesInFrameRelStructure struct {
	ContainmentAggregationStructure
	DataSource []DataSource `xml:"DataSource" json:"DataSource"`
}

// DataSourcesRelStructure represents the dataSources_RelStructure element
// Type for list of DATA SOURCEs.
type DataSourcesRelStructure struct {
	ContainmentAggregationStructure
	DataSourceRef []DataSourceRef `xml:"DataSourceRef,omitempty" json:"DataSourceRef,omitempty"`
	DataSource []DataSource `xml:"DataSource,omitempty" json:"DataSource,omitempty"`
}

// DataSourceVersionStructure represents the DataSource_VersionStructure element
// Type for DATA SOURCE.
type DataSourceVersionStructure struct {
	TypeOfValueVersionStructure
	// Contact email for data queries.
	Email *string `xml:"Email,omitempty" json:"Email,omitempty"`
	// Data Licence identifier.  +v1.2.2
	DataLicenceCode *ExternalObjectRefStructure `xml:"DataLicenceCode,omitempty" json:"DataLicenceCode,omitempty"`
	// URL fto Data Licence +v1.2.2
	DataLicenceUrl *string `xml:"DataLicenceUrl,omitempty" json:"DataLicenceUrl,omitempty"`
}

// BrandingVersionStructure represents the Branding_VersionStructure element
// Type for a BRANDING.
type BrandingVersionStructure struct {
	TypeOfValueVersionStructure
	// Preferred presentation values associated with BRANDING. +v1.1
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
}

// DataSource represents the DataSource element
// Identifies the system which has produced the data.
// References to a DATA SOURCE are useful in an interoperated computer system.
type DataSource struct {
	DataSourceVersionStructure
}

// Branding represents the Branding element
// An arbitrary marketing classification.
type Branding struct {
	BrandingVersionStructure
}

// LayerRefsRelStructure represents the layerRefs_RelStructure element
// Type for a list of references to a LAYER
type LayerRefsRelStructure struct {
	OneToManyRelationshipStructure
	LayerRef []LayerRef `xml:"LayerRef" json:"LayerRef"`
}

// LayerRefStructure represents the LayerRefStructure element
// Type for a versioned reference to a NeTEx Object.
type LayerRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// LayerRef represents the LayerRef element
// Reference to a LAYER.
type LayerRef struct {
	LayerRefStructure
}

// CodespacesInFrameRelStructure represents the codespacesInFrame_RelStructure element
// Type for containment in frame of CODESPACEs.
type CodespacesInFrameRelStructure struct {
	ContainmentAggregationStructure
	Codespace []Codespace `xml:"Codespace" json:"Codespace"`
}

// ResponsibilitySetsInFrameRelStructure represents the responsibilitySetsInFrame_RelStructure element
// Type for containment in frame of RESPONSIBILITY SETs.
type ResponsibilitySetsInFrameRelStructure struct {
	ContainmentAggregationStructure
	ResponsibilitySet []ResponsibilitySet `xml:"ResponsibilitySet" json:"ResponsibilitySet"`
}

// ResponsibilityRolesInFrameRelStructure represents the responsibilityRolesInFrame_RelStructure element
// Type for containment in frame of RESPONSIBILITY ROLEs.
type ResponsibilityRolesInFrameRelStructure struct {
	ContainmentAggregationStructure
	ResponsibilityRole []ResponsibilityRole `xml:"ResponsibilityRole" json:"ResponsibilityRole"`
}

// ResponsibilitySetsRelStructure represents the responsibilitySets_RelStructure element
// Type for a list of RESPONSIBILITY SETs.
type ResponsibilitySetsRelStructure struct {
	ContainmentAggregationStructure
	ResponsibilitySetRef []ResponsibilitySetRef `xml:"ResponsibilitySetRef,omitempty" json:"ResponsibilitySetRef,omitempty"`
	ResponsibilitySet []ResponsibilitySet `xml:"ResponsibilitySet,omitempty" json:"ResponsibilitySet,omitempty"`
}

// ResponsibilitySetVersionStructure represents the ResponsibilitySet_VersionStructure element
// Type for a set of RESPONSIBILITY ROLEs that can be associated with a DATA MANAGED OBJECT. A Child ENTITY has the same responsibilities as its parent.
type ResponsibilitySetVersionStructure struct {
	DataManagedObjectStructure
	// Explanation of RESPONSIBILITY SET.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Roles defined by this RESPONSIBILITY SET.
	Roles *ResponsibilityRoleAssignmentsRelStructure `xml:"roles,omitempty" json:"roles,omitempty"`
}

// ResponsibilityRolesRelStructure represents the ResponsibilityRoles_RelStructure element
// Type for a list of RESPONSIBILITY ROLEs
type ResponsibilityRolesRelStructure struct {
	ContainmentAggregationStructure
	ResponsibilityRoleRef []ResponsibilityRoleRef `xml:"ResponsibilityRoleRef,omitempty" json:"ResponsibilityRoleRef,omitempty"`
	ResponsibilityRole []ResponsibilityRole `xml:"ResponsibilityRole,omitempty" json:"ResponsibilityRole,omitempty"`
}

// ResponsibilityRoleVersionStructure represents the ResponsibilityRole_VersionStructure element
// Type for a  RESPONSIBILITY ROLE  that can be associated with a DATA MANAGED OBJECT. A Child ENTITY has the same responsibilities as its parent.
type ResponsibilityRoleVersionStructure struct {
	DataManagedObjectStructure
	// Explanation of RESPONSIBILITY ROLE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Explanation of REsponsibility RoleSET.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	TypeOfResponsibilityRoleRef *TypeOfResponsibilityRoleRef `xml:"TypeOfResponsibilityRoleRef,omitempty" json:"TypeOfResponsibilityRoleRef,omitempty"`
}

// ResponsibilityRoleAssignmentVersionedChildStructure represents the ResponsibilityRoleAssignment_VersionedChildStructure element
// Type for RESPONSIBILITY ROLE ASSIGNMENT.
type ResponsibilityRoleAssignmentVersionedChildStructure struct {
	VersionedChildStructure
	ResponsibilitySetRef *ResponsibilitySetRef `xml:"ResponsibilitySetRef,omitempty" json:"ResponsibilitySetRef,omitempty"`
	// Description of RESPONSIBILITY ROLE ASSIGNMENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Data roles which this assignment assigns.
	DataRoleType *DataRoleTypeEnumeration `xml:"DataRoleType,omitempty" json:"DataRoleType,omitempty"`
	// Stakeholder roles which this assignment assigns.
	StakeholderRoleType *StakeholderRoleTypeEnumeration `xml:"StakeholderRoleType,omitempty" json:"StakeholderRoleType,omitempty"`
	TypeOfResponsibilityRoleRef *TypeOfResponsibilityRoleRef `xml:"TypeOfResponsibilityRoleRef,omitempty" json:"TypeOfResponsibilityRoleRef,omitempty"`
	ResponsibilityRoleRef *ResponsibilityRoleRef `xml:"ResponsibilityRoleRef,omitempty" json:"ResponsibilityRoleRef,omitempty"`
	// Responsible ORGANISATION.
	ResponsibleOrganisationRef *OrganisationRefStructure `xml:"ResponsibleOrganisationRef,omitempty" json:"ResponsibleOrganisationRef,omitempty"`
	// Responsible ORGANISATION PART.
	ResponsiblePartRef *OrganisationPartRefStructure `xml:"ResponsiblePartRef,omitempty" json:"ResponsiblePartRef,omitempty"`
	// Administrative area to which this RESPONSIBILITY SET is assigned.
	ResponsibleAreaRef *VersionOfObjectRefStructure `xml:"ResponsibleAreaRef,omitempty" json:"ResponsibleAreaRef,omitempty"`
}

// ResponsibilityRoleAssignmentsRelStructure represents the responsibilityRoleAssignments_RelStructure element
// Type for a list of RESPONSIBILITY ROLE ASSIGNMENTs.
type ResponsibilityRoleAssignmentsRelStructure struct {
	StrictContainmentAggregationStructure
	ResponsibilityRoleAssignment []ResponsibilityRoleAssignment `xml:"ResponsibilityRoleAssignment" json:"ResponsibilityRoleAssignment"`
}

// TypeOfResponsibilityRoleValueStructure represents the TypeOfResponsibilityRole_ValueStructure element
// Type for a TYPE OF RESPONSIBILITY ROLE
type TypeOfResponsibilityRoleValueStructure struct {
	TypeOfEntityVersionStructure
}

// ResponsibilitySet represents the ResponsibilitySet element
// A set of responsibility roles assignments that can be associated with a DATA MANAGED OBJECT. A Child ENTITY has the same responsibilities as its parent.
type ResponsibilitySet struct {
	ResponsibilitySetVersionStructure
}

// ResponsibilityRole represents the ResponsibilityRole element
// A particular role an ORGANISATION or an ORGANISATION PART is playing.  +v1.1
type ResponsibilityRole struct {
	ResponsibilityRoleVersionStructure
}

// ResponsibilityRoleAssignment represents the ResponsibilityRoleAssignment element
// Assignment of a specific RESPONSIBILITY ROLE to a specific organisation and/or subdivision.
type ResponsibilityRoleAssignment struct {
	ResponsibilityRoleAssignmentVersionedChildStructure
}

// TypeOfResponsibilityRole represents the TypeOfResponsibilityRole element
// Classification of a RESPONSIBILITY ROLE
type TypeOfResponsibilityRole struct {
	TypeOfResponsibilityRoleValueStructure
}

// AvailabilityConditionRefStructure represents the AvailabilityConditionRefStructure element
// Type for a reference to an AVAILABILITY CONDITION.
type AvailabilityConditionRefStructure struct {
	ValidityConditionRefStructure
}

// AvailabilityConditionRef represents the AvailabilityConditionRef element
// Reference to an AVAILABILITY CONDITION. A VALIDITY CONDITION defined in terms of temporal attributes.
type AvailabilityConditionRef struct {
	AvailabilityConditionRefStructure
}

// AssignmentRefStructure represents the AssignmentRefStructure element
// Type for a versioned reference to a NeTEx Object.
type AssignmentRefStructure struct {
	OrderedVersionOfObjectRefStructure
}

// AssignmentRef represents the AssignmentRef element
// Reference to a ASSIGNMENT.
type AssignmentRef struct {
	AssignmentRefStructure
}

// ServiceCalendarRefStructure represents the ServiceCalendarRefStructure element
// Type for a reference to a SERVICE CALENDAR.
type ServiceCalendarRefStructure struct {
	VersionOfObjectRefStructure
}

// OperatingDayRefStructure represents the OperatingDayRefStructure element
// Type for a reference to an OPERATING DAY.
type OperatingDayRefStructure struct {
	VersionOfObjectRefStructure
}

// OperatingPeriodRefStructure represents the OperatingPeriodRefStructure element
// Type for a reference to an OPERATING PERIOD.
type OperatingPeriodRefStructure struct {
	VersionOfObjectRefStructure
}

// UicOperatingPeriodRefStructure represents the UicOperatingPeriodRefStructure element
// Type for a reference to an UIC OPERATING PERIOD.
type UicOperatingPeriodRefStructure struct {
	OperatingPeriodRefStructure
}

// DayTypeAssignmentRefStructure represents the DayTypeAssignmentRefStructure element
// Type for a reference to a DAY TYPE ASSIGNMENT.
type DayTypeAssignmentRefStructure struct {
	AssignmentRefStructure
}

// ServiceCalendarRef represents the ServiceCalendarRef element
// Reference to a SERVICE CALENDAR.
type ServiceCalendarRef struct {
	ServiceCalendarRefStructure
}

// OperatingDayRef represents the OperatingDayRef element
// Reference to an OPERATING DAY.
type OperatingDayRef struct {
	OperatingDayRefStructure
}

// OperatingPeriodRef represents the OperatingPeriodRef element
// Reference to an OPERATING PERIOD.
type OperatingPeriodRef struct {
	OperatingPeriodRefStructure
}

// UicOperatingPeriodRef represents the UicOperatingPeriodRef element
// Reference to an UIC OPERATING PERIOD.
type UicOperatingPeriodRef struct {
	OperatingPeriodRefStructure
}

// DayTypeAssignmentRef represents the DayTypeAssignmentRef element
// Reference to a DAY TYPE ASSIGNMENT.
type DayTypeAssignmentRef struct {
	DayTypeAssignmentRefStructure
}

// PointRefStructure represents the PointRefStructure element
// Type for a reference to a POINT.
type PointRefStructure struct {
	VersionOfObjectRefStructure
}

// PointRefsRelStructure represents the pointRefs_RelStructure element
// Type for a list of references to a POINT.
type PointRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehicleMeetingPointRef []VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef []WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef []RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef []RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef []TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef []BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef []ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef []BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef []FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef []ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef []GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef []ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef []ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef []TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef []RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef []PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
}

// LinkRefsRelStructure represents the linkRefs_RelStructure element
// Type for a list of references to a LINK.
type LinkRefsRelStructure struct {
	OneToManyRelationshipStructure
	OnwardVehicleMeetingLinkRef []OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef []VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef []ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef []LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef []TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef []WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef []RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef []RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef []ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef []PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef []RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	ServiceLinkRefByValue []ServiceLinkRefByValue `xml:"ServiceLinkRefByValue,omitempty" json:"ServiceLinkRefByValue,omitempty"`
	LineLinkRefByValue []LineLinkRefByValue `xml:"LineLinkRefByValue,omitempty" json:"LineLinkRefByValue,omitempty"`
	TimingLinkRefByValue []TimingLinkRefByValue `xml:"TimingLinkRefByValue,omitempty" json:"TimingLinkRefByValue,omitempty"`
	WireLinkRefByValue []WireLinkRefByValue `xml:"WireLinkRefByValue,omitempty" json:"WireLinkRefByValue,omitempty"`
	RoadLinkRefByValue []RoadLinkRefByValue `xml:"RoadLinkRefByValue,omitempty" json:"RoadLinkRefByValue,omitempty"`
	RailwayLinkRefByValue []RailwayLinkRefByValue `xml:"RailwayLinkRefByValue,omitempty" json:"RailwayLinkRefByValue,omitempty"`
	ActivationLinkRefByValue []ActivationLinkRefByValue `xml:"ActivationLinkRefByValue,omitempty" json:"ActivationLinkRefByValue,omitempty"`
	ModalLinkRefByValue []ModalLinkRefByValue `xml:"ModalLinkRefByValue,omitempty" json:"ModalLinkRefByValue,omitempty"`
	PathLinkRefByValue []PathLinkRefByValue `xml:"PathLinkRefByValue,omitempty" json:"PathLinkRefByValue,omitempty"`
	RouteLinkRefByValue []RouteLinkRefByValue `xml:"RouteLinkRefByValue,omitempty" json:"RouteLinkRefByValue,omitempty"`
	LinkRefByValue []LinkRefByValue `xml:"LinkRefByValue,omitempty" json:"LinkRefByValue,omitempty"`
}

// LinkRefStructure represents the LinkRefStructure element
// Type for a reference to a LINK.
type LinkRefStructure struct {
	VersionOfObjectRefStructure
}

// LinkRefByValueStructure represents the LinkRefByValueStructure element
// Type for a reference to a LINK.
type LinkRefByValueStructure struct {
	// Name of class of LINK.
	NameOfClass *string `xml:"nameOfClass,attr,omitempty" json:"nameOfClass,omitempty"`
	// Date reference was first created.
	Created *time.Time `xml:"created,attr,omitempty" json:"created,omitempty"`
	// Date reference was last changed.
	Changed *time.Time `xml:"changed,attr,omitempty" json:"changed,omitempty"`
	// Version number of referenced entity.
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
	// Identifier of a POINT. at which LINK starts.
	FromPointRef string `xml:"fromPointRef,attr" json:"fromPointRef"`
	// Identifier of a POINT. at which LINK ends.
	ToPointRef string `xml:"toPointRef,attr" json:"toPointRef"`
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
	// Reference to a TYPE OF LINK.
	TypeOfLinkRef *string `xml:"typeOfLinkRef,attr,omitempty" json:"typeOfLinkRef,omitempty"`
}

// PointOnLinkByValueStructure represents the PointOnLinkByValueStructure element
// Type for a  reference to POINT ON LINK by Distance.
type PointOnLinkByValueStructure struct {
	// Distance of Point on Link from start of LINK.
	DistanceFromStart *float64 `xml:"DistanceFromStart,omitempty" json:"DistanceFromStart,omitempty"`
}

// TypeOfPointRefsRelStructure represents the typeOfPointRefs_RelStructure element
// Type for a list of TYPEs OF POINT.
type TypeOfPointRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfPointRef []TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
}

// TypeOfPointRefStructure represents the TypeOfPointRefStructure element
// Type for a reference to a TYPE OF POINT.
type TypeOfPointRefStructure struct {
	TypeOfValueRefStructure
}

// LinkTypeRefsRelStructure represents the linkTypeRefs_RelStructure element
// Type for a list of TYPEs OF LINK.
type LinkTypeRefsRelStructure struct {
	OneToManyRelationshipStructure
	// Reference to a TYPE OF LINK.
	TypeOfLinkRef []TypeOfLinkRef `xml:"TypeOfLinkRef" json:"TypeOfLinkRef"`
}

// TypeOfLinkRefStructure represents the TypeOfLinkRefStructure element
// Type for a TYPE OF LINK.
type TypeOfLinkRefStructure struct {
	TypeOfValueRefStructure
}

// GroupOfPointsRefStructure represents the GroupOfPointsRefStructure element
// Type for a reference to a GROUP OF POINTs.
type GroupOfPointsRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// PointRef represents the PointRef element
// Reference to a POINT.
type PointRef struct {
	PointRefStructure
}

// LinkRef represents the LinkRef element
// Reference to a LINK.
type LinkRef struct {
	LinkRefStructure
}

// LinkRefByValue represents the LinkRefByValue element
// Reference to a LINK using its end values.
type LinkRefByValue struct {
	LinkRefByValueStructure
}

// PointOnLinkRef represents the PointOnLinkRef element
// Reference to a POINT ON LINK.
type PointOnLinkRef struct {
	PointOnLinkRefStructure1
}

// TypeOfPointRef represents the TypeOfPointRef element
// Reference to a TYPE OF POINT.
type TypeOfPointRef struct {
	TypeOfPointRefStructure
}

// TypeOfLinkRef represents the TypeOfLinkRef element
// Reference to a TYPE OF LINK.
type TypeOfLinkRef struct {
	TypeOfLinkRefStructure
}

// ZoneRefStructure represents the ZoneRefStructure element
// Type for a reference to a ZONE.
type ZoneRefStructure struct {
	GroupOfPointsRefStructure
}

// ZoneRefsRelStructure represents the zoneRefs_RelStructure element
type ZoneRefsRelStructure struct {
	OneToManyRelationshipStructure
	MobilityServiceConstraintZoneRef *MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef *StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef *TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef *AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef *AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef *FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef *TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef *ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
}

// TariffZoneRefStructure represents the TariffZoneRefStructure element
// Type for a reference to a TARIFF ZONE.
type TariffZoneRefStructure struct {
	ZoneRefStructure
}

// TariffZoneRefsRelStructure represents the tariffZoneRefs_RelStructure element
// Type for a list of TARIFF ZONEs.
type TariffZoneRefsRelStructure struct {
	OneToManyRelationshipStructure
	FareZoneRef []FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef []TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
}

// TypeOfZoneRefStructure represents the TypeOfZoneRefStructure element
// Type for a reference to a TYPE OF ZONE.
type TypeOfZoneRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfZoneRefsRelStructure represents the typeOfZoneRefs_RelStructure element
// Type for a list of TYPE OF ZONEs.
type TypeOfZoneRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfZoneRef []TypeOfZoneRef `xml:"TypeOfZoneRef,omitempty" json:"TypeOfZoneRef,omitempty"`
}

// ZoneRef represents the ZoneRef element
// Reference to a ZONE.
type ZoneRef struct {
	ZoneRefStructure
}

// TariffZoneRef represents the TariffZoneRef element
// Reference to a TARIFF ZONE.
type TariffZoneRef struct {
	TariffZoneRefStructure
}

// TypeOfZoneRef represents the TypeOfZoneRef element
// Reference to a TYPE OF ZONE.
type TypeOfZoneRef struct {
	TypeOfZoneRefStructure
}

// PlaceRefsRelStructure represents the placeRefs_RelStructure element
// Type for a list of references to a PLACE.
type PlaceRefsRelStructure struct {
	OneToManyRelationshipStructure
	PlaceRef []PlaceRef `xml:"PlaceRef" json:"PlaceRef"`
}

// PlaceRefStructure represents the PlaceRefStructure element
// Type for a reference to a PLACE.
type PlaceRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// DummyPlaceRefsRelStructure represents the dummyPlaceRefs_RelStructure element
// Type for a list of references to a PLACE.
type DummyPlaceRefsRelStructure struct {
	OneToManyRelationshipStructure
	HailAndRideAreaRef []HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef []FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef []FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
	FlexibleStopPlaceRef []FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	PathJunctionRef []PathJunctionRef `xml:"PathJunctionRef,omitempty" json:"PathJunctionRef,omitempty"`
	EquipmentPlaceRef []EquipmentPlaceRef `xml:"EquipmentPlaceRef,omitempty" json:"EquipmentPlaceRef,omitempty"`
	EquipmentPositionRef []EquipmentPositionRef `xml:"EquipmentPositionRef,omitempty" json:"EquipmentPositionRef,omitempty"`
	TopographicPlaceRef []TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	VehiclePoolingMeetingPlaceRef []VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef []VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	GarageRef []GarageRef `xml:"GarageRef,omitempty" json:"GarageRef,omitempty"`
	VehicleStoppingPositionRef []VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef []VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef []BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef []AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef []TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef []QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef []StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef []VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef []MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef []VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef []ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef []VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef []VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef []TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef []ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef []PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef []StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef []StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef []ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef []ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef []ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef []PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef []PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef []EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef []SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef []TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef []StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef []ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef []PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef []ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef []SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef []SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	AddressablePlaceRef []AddressablePlaceRef `xml:"AddressablePlaceRef,omitempty" json:"AddressablePlaceRef,omitempty"`
	PostalAddressRef []PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef []RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef []AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
}

// TransferRefsRelStructure represents the transferRefs_RelStructure element
// Type for a list of references to a TRANSFER.
type TransferRefsRelStructure struct {
	OneToManyRelationshipStructure
	DefaultConnectionRef []DefaultConnectionRef `xml:"DefaultConnectionRef,omitempty" json:"DefaultConnectionRef,omitempty"`
	SiteConnectionRef []SiteConnectionRef `xml:"SiteConnectionRef,omitempty" json:"SiteConnectionRef,omitempty"`
	ConnectionRef []ConnectionRef `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	AccessRef []AccessRef `xml:"AccessRef,omitempty" json:"AccessRef,omitempty"`
}

// TransferRefStructure represents the TransferRefStructure element
// Type for a reference to a TRANSFER.
type TransferRefStructure struct {
	VersionOfObjectRefStructure
}

// AccessRefsRelStructure represents the accessRefs_RelStructure element
// Type for a list of references to an ACCESS link.
type AccessRefsRelStructure struct {
	OneToManyRelationshipStructure
	AccessRef []AccessRef `xml:"AccessRef" json:"AccessRef"`
}

// AccessRefStructure represents the AccessRefStructure element
// Type for a reference to an ACCESS link.
type AccessRefStructure struct {
	TransferRefStructure
}

// TypeOfTransferRefStructure represents the TypeOfTransferRefStructure element
// Type for a reference to a TYPE OF TRANSFER.
type TypeOfTransferRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfPlaceRefStructure represents the TypeOfPlaceRefStructure element
// Type for a reference to a TYPE OF PLACE.
type TypeOfPlaceRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfPlaceRefsRelStructure represents the typeOfPlaceRefs_RelStructure element
// Type for a list of TYPE OF PLACEs.
type TypeOfPlaceRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfPlaceRef []TypeOfPlaceRef `xml:"TypeOfPlaceRef,omitempty" json:"TypeOfPlaceRef,omitempty"`
}

// PlaceRef represents the PlaceRef element
// Reference to a PLACE.
type PlaceRef struct {
	PlaceRefStructure
}

// TransferRef represents the TransferRef element
// Reference to a TRANSFER.
type TransferRef struct {
	TransferRefStructure
}

// AccessRef represents the AccessRef element
// Reference to an ACCESS link.
type AccessRef struct {
	AccessRefStructure
}

// TypeOfTransferRef represents the TypeOfTransferRef element
// Reference to a TYPE OF TRANSFER.
type TypeOfTransferRef struct {
	TypeOfTransferRefStructure
}

// TypeOfPlaceRef represents the TypeOfPlaceRef element
// Reference to a TYPE OF PLACE.
type TypeOfPlaceRef struct {
	TypeOfPlaceRefStructure
}

// IanaCountryTldEnumeration represents the IanaCountryTldEnumeration enumeration
// Allowed values for classifying Countries ISO 3166-1 (2 character ISO code).
type IanaCountryTldEnumeration string

const (
	// IanaCountryTldEnumerationAc represents ac
	// Ascension Island.
	IanaCountryTldEnumerationAc IanaCountryTldEnumeration = "ac"
	// IanaCountryTldEnumerationAd represents ad
	// Andorra.
	IanaCountryTldEnumerationAd IanaCountryTldEnumeration = "ad"
	// IanaCountryTldEnumerationAe represents ae
	// United Arab Emirates.
	IanaCountryTldEnumerationAe IanaCountryTldEnumeration = "ae"
	// IanaCountryTldEnumerationAf represents af
	// Afghanistan.
	IanaCountryTldEnumerationAf IanaCountryTldEnumeration = "af"
	// IanaCountryTldEnumerationAg represents ag
	// Antigua and Barbuda.
	IanaCountryTldEnumerationAg IanaCountryTldEnumeration = "ag"
	// IanaCountryTldEnumerationAi represents ai
	// Anguilla.
	IanaCountryTldEnumerationAi IanaCountryTldEnumeration = "ai"
	// IanaCountryTldEnumerationAl represents al
	// Albania.
	IanaCountryTldEnumerationAl IanaCountryTldEnumeration = "al"
	// IanaCountryTldEnumerationAm represents am
	// Armenia.
	IanaCountryTldEnumerationAm IanaCountryTldEnumeration = "am"
	// IanaCountryTldEnumerationAn represents an
	// Netherlands Antilles.
	IanaCountryTldEnumerationAn IanaCountryTldEnumeration = "an"
	// IanaCountryTldEnumerationAo represents ao
	// Angola.
	IanaCountryTldEnumerationAo IanaCountryTldEnumeration = "ao"
	// IanaCountryTldEnumerationAq represents aq
	// Antarctica.
	IanaCountryTldEnumerationAq IanaCountryTldEnumeration = "aq"
	// IanaCountryTldEnumerationAr represents ar
	// Argentina.
	IanaCountryTldEnumerationAr IanaCountryTldEnumeration = "ar"
	// IanaCountryTldEnumerationAs represents as
	// American Samoa.
	IanaCountryTldEnumerationAs IanaCountryTldEnumeration = "as"
	// IanaCountryTldEnumerationAt represents at
	// Austria.
	IanaCountryTldEnumerationAt IanaCountryTldEnumeration = "at"
	// IanaCountryTldEnumerationAu represents au
	// Australia.
	IanaCountryTldEnumerationAu IanaCountryTldEnumeration = "au"
	// IanaCountryTldEnumerationAw represents aw
	// Aruba.
	IanaCountryTldEnumerationAw IanaCountryTldEnumeration = "aw"
	// IanaCountryTldEnumerationAz represents az
	// Azerbaijan.
	IanaCountryTldEnumerationAz IanaCountryTldEnumeration = "az"
	// IanaCountryTldEnumerationAx represents ax
	// Aland Islands.
	IanaCountryTldEnumerationAx IanaCountryTldEnumeration = "ax"
	// IanaCountryTldEnumerationBa represents ba
	// Bosnia and Herzegovina.
	IanaCountryTldEnumerationBa IanaCountryTldEnumeration = "ba"
	// IanaCountryTldEnumerationBb represents bb
	// Barbados.
	IanaCountryTldEnumerationBb IanaCountryTldEnumeration = "bb"
	// IanaCountryTldEnumerationBd represents bd
	// Bangladesh.
	IanaCountryTldEnumerationBd IanaCountryTldEnumeration = "bd"
	// IanaCountryTldEnumerationBe represents be
	// Belgium.
	IanaCountryTldEnumerationBe IanaCountryTldEnumeration = "be"
	// IanaCountryTldEnumerationBf represents bf
	// Burkina Faso.
	IanaCountryTldEnumerationBf IanaCountryTldEnumeration = "bf"
	// IanaCountryTldEnumerationBg represents bg
	// Bulgaria.
	IanaCountryTldEnumerationBg IanaCountryTldEnumeration = "bg"
	// IanaCountryTldEnumerationBh represents bh
	// Bahrain.
	IanaCountryTldEnumerationBh IanaCountryTldEnumeration = "bh"
	// IanaCountryTldEnumerationBi represents bi
	// Burundi.
	IanaCountryTldEnumerationBi IanaCountryTldEnumeration = "bi"
	// IanaCountryTldEnumerationBj represents bj
	// Benin.
	IanaCountryTldEnumerationBj IanaCountryTldEnumeration = "bj"
	// IanaCountryTldEnumerationBm represents bm
	// Bermuda.
	IanaCountryTldEnumerationBm IanaCountryTldEnumeration = "bm"
	// IanaCountryTldEnumerationBn represents bn
	// Brunei Darussalam.
	IanaCountryTldEnumerationBn IanaCountryTldEnumeration = "bn"
	// IanaCountryTldEnumerationBo represents bo
	// Bolivia.
	IanaCountryTldEnumerationBo IanaCountryTldEnumeration = "bo"
	// IanaCountryTldEnumerationBr represents br
	// Brazil.
	IanaCountryTldEnumerationBr IanaCountryTldEnumeration = "br"
	// IanaCountryTldEnumerationBs represents bs
	// Bahamas.
	IanaCountryTldEnumerationBs IanaCountryTldEnumeration = "bs"
	// IanaCountryTldEnumerationBt represents bt
	// Bhutan.
	IanaCountryTldEnumerationBt IanaCountryTldEnumeration = "bt"
	// IanaCountryTldEnumerationBv represents bv
	// Bouvet Island.
	IanaCountryTldEnumerationBv IanaCountryTldEnumeration = "bv"
	// IanaCountryTldEnumerationBw represents bw
	// Botswana.
	IanaCountryTldEnumerationBw IanaCountryTldEnumeration = "bw"
	// IanaCountryTldEnumerationBy represents by
	// Belarus.
	IanaCountryTldEnumerationBy IanaCountryTldEnumeration = "by"
	// IanaCountryTldEnumerationBz represents bz
	// Belize.
	IanaCountryTldEnumerationBz IanaCountryTldEnumeration = "bz"
	// IanaCountryTldEnumerationCa represents ca
	// Canada.
	IanaCountryTldEnumerationCa IanaCountryTldEnumeration = "ca"
	// IanaCountryTldEnumerationCc represents cc
	// Cocos (Keeling) Islands.
	IanaCountryTldEnumerationCc IanaCountryTldEnumeration = "cc"
	// IanaCountryTldEnumerationCd represents cd
	// Congo, The Democratic Republic of the.
	IanaCountryTldEnumerationCd IanaCountryTldEnumeration = "cd"
	// IanaCountryTldEnumerationCf represents cf
	// CEN tral African Republic.
	IanaCountryTldEnumerationCf IanaCountryTldEnumeration = "cf"
	// IanaCountryTldEnumerationCg represents cg
	// Congo, Republic of.
	IanaCountryTldEnumerationCg IanaCountryTldEnumeration = "cg"
	// IanaCountryTldEnumerationCh represents ch
	// Switzerland.
	IanaCountryTldEnumerationCh IanaCountryTldEnumeration = "ch"
	// IanaCountryTldEnumerationCi represents ci
	// Cote d'Ivoire.
	IanaCountryTldEnumerationCi IanaCountryTldEnumeration = "ci"
	// IanaCountryTldEnumerationCk represents ck
	// Cook Islands.
	IanaCountryTldEnumerationCk IanaCountryTldEnumeration = "ck"
	// IanaCountryTldEnumerationCl represents cl
	// Chile.
	IanaCountryTldEnumerationCl IanaCountryTldEnumeration = "cl"
	// IanaCountryTldEnumerationCm represents cm
	// Cameroon.
	IanaCountryTldEnumerationCm IanaCountryTldEnumeration = "cm"
	// IanaCountryTldEnumerationCn represents cn
	// China.
	IanaCountryTldEnumerationCn IanaCountryTldEnumeration = "cn"
	// IanaCountryTldEnumerationCo represents co
	// Colombia.
	IanaCountryTldEnumerationCo IanaCountryTldEnumeration = "co"
	// IanaCountryTldEnumerationCr represents cr
	// Costa Rica.
	IanaCountryTldEnumerationCr IanaCountryTldEnumeration = "cr"
	// IanaCountryTldEnumerationCs represents cs
	// Serbia and Montenegro.
	IanaCountryTldEnumerationCs IanaCountryTldEnumeration = "cs"
	// IanaCountryTldEnumerationCu represents cu
	// Cuba.
	IanaCountryTldEnumerationCu IanaCountryTldEnumeration = "cu"
	// IanaCountryTldEnumerationCv represents cv
	// Cape Verde.
	IanaCountryTldEnumerationCv IanaCountryTldEnumeration = "cv"
	// IanaCountryTldEnumerationCx represents cx
	// Christmas Island.
	IanaCountryTldEnumerationCx IanaCountryTldEnumeration = "cx"
	// IanaCountryTldEnumerationCy represents cy
	// Cyprus.
	IanaCountryTldEnumerationCy IanaCountryTldEnumeration = "cy"
	// IanaCountryTldEnumerationCz represents cz
	// Czech Republic.
	IanaCountryTldEnumerationCz IanaCountryTldEnumeration = "cz"
	// IanaCountryTldEnumerationDe represents de
	// Germany.
	IanaCountryTldEnumerationDe IanaCountryTldEnumeration = "de"
	// IanaCountryTldEnumerationDj represents dj
	// Djibouti.
	IanaCountryTldEnumerationDj IanaCountryTldEnumeration = "dj"
	// IanaCountryTldEnumerationDk represents dk
	// DenmarK.
	IanaCountryTldEnumerationDk IanaCountryTldEnumeration = "dk"
	// IanaCountryTldEnumerationDm represents dm
	// Dominica.
	IanaCountryTldEnumerationDm IanaCountryTldEnumeration = "dm"
	// IanaCountryTldEnumerationDo represents do
	// Dominican Republic.
	IanaCountryTldEnumerationDo IanaCountryTldEnumeration = "do"
	// IanaCountryTldEnumerationDz represents dz
	// Algeria.
	IanaCountryTldEnumerationDz IanaCountryTldEnumeration = "dz"
	// IanaCountryTldEnumerationEc represents ec
	// Ecuador.
	IanaCountryTldEnumerationEc IanaCountryTldEnumeration = "ec"
	// IanaCountryTldEnumerationEe represents ee
	// Estonia.
	IanaCountryTldEnumerationEe IanaCountryTldEnumeration = "ee"
	// IanaCountryTldEnumerationEg represents eg
	// Egypt.
	IanaCountryTldEnumerationEg IanaCountryTldEnumeration = "eg"
	// IanaCountryTldEnumerationEh represents eh
	// Western Sahara.
	IanaCountryTldEnumerationEh IanaCountryTldEnumeration = "eh"
	// IanaCountryTldEnumerationEr represents er
	// Eritrea.
	IanaCountryTldEnumerationEr IanaCountryTldEnumeration = "er"
	// IanaCountryTldEnumerationEs represents es
	// Spain.
	IanaCountryTldEnumerationEs IanaCountryTldEnumeration = "es"
	// IanaCountryTldEnumerationEt represents et
	// Ethiopia.
	IanaCountryTldEnumerationEt IanaCountryTldEnumeration = "et"
	// IanaCountryTldEnumerationEu represents eu
	// European Union.
	IanaCountryTldEnumerationEu IanaCountryTldEnumeration = "eu"
	// IanaCountryTldEnumerationFi represents fi
	// Finland.
	IanaCountryTldEnumerationFi IanaCountryTldEnumeration = "fi"
	// IanaCountryTldEnumerationFj represents fj
	// Fiji.
	IanaCountryTldEnumerationFj IanaCountryTldEnumeration = "fj"
	// IanaCountryTldEnumerationFk represents fk
	// Falkland Islands (Malvinas).
	IanaCountryTldEnumerationFk IanaCountryTldEnumeration = "fk"
	// IanaCountryTldEnumerationFm represents fm
	// Micronesia, Federal State of.
	IanaCountryTldEnumerationFm IanaCountryTldEnumeration = "fm"
	// IanaCountryTldEnumerationFo represents fo
	// Faroe Islands.
	IanaCountryTldEnumerationFo IanaCountryTldEnumeration = "fo"
	// IanaCountryTldEnumerationFr represents fr
	// France.
	IanaCountryTldEnumerationFr IanaCountryTldEnumeration = "fr"
	// IanaCountryTldEnumerationGa represents ga
	// Gabon.
	IanaCountryTldEnumerationGa IanaCountryTldEnumeration = "ga"
	// IanaCountryTldEnumerationGb represents gb
	// United Kingdom.
	IanaCountryTldEnumerationGb IanaCountryTldEnumeration = "gb"
	// IanaCountryTldEnumerationGd represents gd
	// Grenada.
	IanaCountryTldEnumerationGd IanaCountryTldEnumeration = "gd"
	// IanaCountryTldEnumerationGe represents ge
	// Georgia.
	IanaCountryTldEnumerationGe IanaCountryTldEnumeration = "ge"
	// IanaCountryTldEnumerationGf represents gf
	// French Guiana.
	IanaCountryTldEnumerationGf IanaCountryTldEnumeration = "gf"
	// IanaCountryTldEnumerationGg represents gg
	// Guernsey.
	IanaCountryTldEnumerationGg IanaCountryTldEnumeration = "gg"
	// IanaCountryTldEnumerationGh represents gh
	// Ghana.
	IanaCountryTldEnumerationGh IanaCountryTldEnumeration = "gh"
	// IanaCountryTldEnumerationGi represents gi
	// Gibraltar.
	IanaCountryTldEnumerationGi IanaCountryTldEnumeration = "gi"
	// IanaCountryTldEnumerationGl represents gl
	// Greenland.
	IanaCountryTldEnumerationGl IanaCountryTldEnumeration = "gl"
	// IanaCountryTldEnumerationGm represents gm
	// Gambia.
	IanaCountryTldEnumerationGm IanaCountryTldEnumeration = "gm"
	// IanaCountryTldEnumerationGn represents gn
	// Guinea.
	IanaCountryTldEnumerationGn IanaCountryTldEnumeration = "gn"
	// IanaCountryTldEnumerationGp represents gp
	// Guadeloupe.
	IanaCountryTldEnumerationGp IanaCountryTldEnumeration = "gp"
	// IanaCountryTldEnumerationGq represents gq
	// Equatorial Guinea.
	IanaCountryTldEnumerationGq IanaCountryTldEnumeration = "gq"
	// IanaCountryTldEnumerationGr represents gr
	// Greece.
	IanaCountryTldEnumerationGr IanaCountryTldEnumeration = "gr"
	// IanaCountryTldEnumerationGs represents gs
	// South Georgia and the South Sandwich Islands.
	IanaCountryTldEnumerationGs IanaCountryTldEnumeration = "gs"
	// IanaCountryTldEnumerationGt represents gt
	// Guatemala.
	IanaCountryTldEnumerationGt IanaCountryTldEnumeration = "gt"
	// IanaCountryTldEnumerationGu represents gu
	// Guam.
	IanaCountryTldEnumerationGu IanaCountryTldEnumeration = "gu"
	// IanaCountryTldEnumerationGw represents gw
	// Guinea-Bissau.
	IanaCountryTldEnumerationGw IanaCountryTldEnumeration = "gw"
	// IanaCountryTldEnumerationGy represents gy
	// Guyana.
	IanaCountryTldEnumerationGy IanaCountryTldEnumeration = "gy"
	// IanaCountryTldEnumerationHk represents hk
	// Hong Kong.
	IanaCountryTldEnumerationHk IanaCountryTldEnumeration = "hk"
	// IanaCountryTldEnumerationHm represents hm
	// Heard and McDonald Islands.
	IanaCountryTldEnumerationHm IanaCountryTldEnumeration = "hm"
	// IanaCountryTldEnumerationHn represents hn
	// Honduras.
	IanaCountryTldEnumerationHn IanaCountryTldEnumeration = "hn"
	// IanaCountryTldEnumerationHr represents hr
	// Croatia/Hrvatska.
	IanaCountryTldEnumerationHr IanaCountryTldEnumeration = "hr"
	// IanaCountryTldEnumerationHt represents ht
	// Haiti.
	IanaCountryTldEnumerationHt IanaCountryTldEnumeration = "ht"
	// IanaCountryTldEnumerationHu represents hu
	// Hungary.
	IanaCountryTldEnumerationHu IanaCountryTldEnumeration = "hu"
	// IanaCountryTldEnumerationId represents id
	// Indonesia.
	IanaCountryTldEnumerationId IanaCountryTldEnumeration = "id"
	// IanaCountryTldEnumerationIe represents ie
	// Ireland.
	IanaCountryTldEnumerationIe IanaCountryTldEnumeration = "ie"
	// IanaCountryTldEnumerationIl represents il
	// Israel.
	IanaCountryTldEnumerationIl IanaCountryTldEnumeration = "il"
	// IanaCountryTldEnumerationIm represents im
	// Isle of Man.
	IanaCountryTldEnumerationIm IanaCountryTldEnumeration = "im"
	// IanaCountryTldEnumerationIn represents in
	// India.
	IanaCountryTldEnumerationIn IanaCountryTldEnumeration = "in"
	// IanaCountryTldEnumerationIo represents io
	// British Indian Ocean Territory.
	IanaCountryTldEnumerationIo IanaCountryTldEnumeration = "io"
	// IanaCountryTldEnumerationIq represents iq
	// Iraq.
	IanaCountryTldEnumerationIq IanaCountryTldEnumeration = "iq"
	// IanaCountryTldEnumerationIr represents ir
	// Iran, Islamic Republic of.
	IanaCountryTldEnumerationIr IanaCountryTldEnumeration = "ir"
	// IanaCountryTldEnumerationIs represents is
	// Iceland.
	IanaCountryTldEnumerationIs IanaCountryTldEnumeration = "is"
	// IanaCountryTldEnumerationIt represents it
	// Italy.
	IanaCountryTldEnumerationIt IanaCountryTldEnumeration = "it"
	// IanaCountryTldEnumerationJe represents je
	// Jersey.
	IanaCountryTldEnumerationJe IanaCountryTldEnumeration = "je"
	// IanaCountryTldEnumerationJm represents jm
	// Jamaica.
	IanaCountryTldEnumerationJm IanaCountryTldEnumeration = "jm"
	// IanaCountryTldEnumerationJo represents jo
	// Jordan.
	IanaCountryTldEnumerationJo IanaCountryTldEnumeration = "jo"
	// IanaCountryTldEnumerationJp represents jp
	// Japan.
	IanaCountryTldEnumerationJp IanaCountryTldEnumeration = "jp"
	// IanaCountryTldEnumerationKe represents ke
	// Kenya.
	IanaCountryTldEnumerationKe IanaCountryTldEnumeration = "ke"
	// IanaCountryTldEnumerationKg represents kg
	// Kyrgyzstan.
	IanaCountryTldEnumerationKg IanaCountryTldEnumeration = "kg"
	// IanaCountryTldEnumerationKh represents kh
	// Cambodia.
	IanaCountryTldEnumerationKh IanaCountryTldEnumeration = "kh"
	// IanaCountryTldEnumerationKi represents ki
	// Kiribati.
	IanaCountryTldEnumerationKi IanaCountryTldEnumeration = "ki"
	// IanaCountryTldEnumerationKm represents km
	// Comoros.
	IanaCountryTldEnumerationKm IanaCountryTldEnumeration = "km"
	// IanaCountryTldEnumerationKn represents kn
	// Saint Kitts and Nevis.
	IanaCountryTldEnumerationKn IanaCountryTldEnumeration = "kn"
	// IanaCountryTldEnumerationKp represents kp
	// Korea, Democratic People's Republic.
	IanaCountryTldEnumerationKp IanaCountryTldEnumeration = "kp"
	// IanaCountryTldEnumerationKr represents kr
	// Korea, Republic of.
	IanaCountryTldEnumerationKr IanaCountryTldEnumeration = "kr"
	// IanaCountryTldEnumerationKw represents kw
	// Kuwait.
	IanaCountryTldEnumerationKw IanaCountryTldEnumeration = "kw"
	// IanaCountryTldEnumerationKy represents ky
	// Cayman Islands.
	IanaCountryTldEnumerationKy IanaCountryTldEnumeration = "ky"
	// IanaCountryTldEnumerationKz represents kz
	// Kazakhstan.
	IanaCountryTldEnumerationKz IanaCountryTldEnumeration = "kz"
	// IanaCountryTldEnumerationLa represents la
	// Lao People's Democratic Republic.
	IanaCountryTldEnumerationLa IanaCountryTldEnumeration = "la"
	// IanaCountryTldEnumerationLb represents lb
	// Lebanon.
	IanaCountryTldEnumerationLb IanaCountryTldEnumeration = "lb"
	// IanaCountryTldEnumerationLc represents lc
	// Saint Lucia.
	IanaCountryTldEnumerationLc IanaCountryTldEnumeration = "lc"
	// IanaCountryTldEnumerationLi represents li
	// Liechtenstein.
	IanaCountryTldEnumerationLi IanaCountryTldEnumeration = "li"
	// IanaCountryTldEnumerationLk represents lk
	// Sri Lanka.
	IanaCountryTldEnumerationLk IanaCountryTldEnumeration = "lk"
	// IanaCountryTldEnumerationLr represents lr
	// Liberia.
	IanaCountryTldEnumerationLr IanaCountryTldEnumeration = "lr"
	// IanaCountryTldEnumerationLs represents ls
	// Lesotho.
	IanaCountryTldEnumerationLs IanaCountryTldEnumeration = "ls"
	// IanaCountryTldEnumerationLt represents lt
	// Lithuania.
	IanaCountryTldEnumerationLt IanaCountryTldEnumeration = "lt"
	// IanaCountryTldEnumerationLu represents lu
	// Luxembourg.
	IanaCountryTldEnumerationLu IanaCountryTldEnumeration = "lu"
	// IanaCountryTldEnumerationLv represents lv
	// Latvia.
	IanaCountryTldEnumerationLv IanaCountryTldEnumeration = "lv"
	// IanaCountryTldEnumerationLy represents ly
	// Libyan Arab Jamahiriya.
	IanaCountryTldEnumerationLy IanaCountryTldEnumeration = "ly"
	// IanaCountryTldEnumerationMa represents ma
	// Morocco.
	IanaCountryTldEnumerationMa IanaCountryTldEnumeration = "ma"
	// IanaCountryTldEnumerationMe represents me
	// Montenegro.
	IanaCountryTldEnumerationMe IanaCountryTldEnumeration = "me"
	// IanaCountryTldEnumerationMc represents mc
	// Monaco.
	IanaCountryTldEnumerationMc IanaCountryTldEnumeration = "mc"
	// IanaCountryTldEnumerationMd represents md
	// Moldova, Republic of.
	IanaCountryTldEnumerationMd IanaCountryTldEnumeration = "md"
	// IanaCountryTldEnumerationMg represents mg
	// Madagascar.
	IanaCountryTldEnumerationMg IanaCountryTldEnumeration = "mg"
	// IanaCountryTldEnumerationMh represents mh
	// Marshall Islands.
	IanaCountryTldEnumerationMh IanaCountryTldEnumeration = "mh"
	// IanaCountryTldEnumerationMk represents mk
	// Macedonia, The Former Yugoslav Republic of.
	IanaCountryTldEnumerationMk IanaCountryTldEnumeration = "mk"
	// IanaCountryTldEnumerationMl represents ml
	// Mali.
	IanaCountryTldEnumerationMl IanaCountryTldEnumeration = "ml"
	// IanaCountryTldEnumerationMm represents mm
	// Myanmar.
	IanaCountryTldEnumerationMm IanaCountryTldEnumeration = "mm"
	// IanaCountryTldEnumerationMn represents mn
	// Mongolia.
	IanaCountryTldEnumerationMn IanaCountryTldEnumeration = "mn"
	// IanaCountryTldEnumerationMo represents mo
	// Macau.
	IanaCountryTldEnumerationMo IanaCountryTldEnumeration = "mo"
	// IanaCountryTldEnumerationMp represents mp
	// Northern Mariana Islands.
	IanaCountryTldEnumerationMp IanaCountryTldEnumeration = "mp"
	// IanaCountryTldEnumerationMq represents mq
	// Martinique.
	IanaCountryTldEnumerationMq IanaCountryTldEnumeration = "mq"
	// IanaCountryTldEnumerationMr represents mr
	// Mauritania.
	IanaCountryTldEnumerationMr IanaCountryTldEnumeration = "mr"
	// IanaCountryTldEnumerationMs represents ms
	// Montserrat.
	IanaCountryTldEnumerationMs IanaCountryTldEnumeration = "ms"
	// IanaCountryTldEnumerationMt represents mt
	// Malta.
	IanaCountryTldEnumerationMt IanaCountryTldEnumeration = "mt"
	// IanaCountryTldEnumerationMu represents mu
	// Mauritius.
	IanaCountryTldEnumerationMu IanaCountryTldEnumeration = "mu"
	// IanaCountryTldEnumerationMv represents mv
	// Maldives.
	IanaCountryTldEnumerationMv IanaCountryTldEnumeration = "mv"
	// IanaCountryTldEnumerationMw represents mw
	// Malawi.
	IanaCountryTldEnumerationMw IanaCountryTldEnumeration = "mw"
	// IanaCountryTldEnumerationMx represents mx
	// Mexico.
	IanaCountryTldEnumerationMx IanaCountryTldEnumeration = "mx"
	// IanaCountryTldEnumerationMy represents my
	// Malaysia.
	IanaCountryTldEnumerationMy IanaCountryTldEnumeration = "my"
	// IanaCountryTldEnumerationMz represents mz
	// Mozambique.
	IanaCountryTldEnumerationMz IanaCountryTldEnumeration = "mz"
	// IanaCountryTldEnumerationNa represents na
	// Namibia.
	IanaCountryTldEnumerationNa IanaCountryTldEnumeration = "na"
	// IanaCountryTldEnumerationNc represents nc
	// New Caledonia.
	IanaCountryTldEnumerationNc IanaCountryTldEnumeration = "nc"
	// IanaCountryTldEnumerationNe represents ne
	// Niger.
	IanaCountryTldEnumerationNe IanaCountryTldEnumeration = "ne"
	// IanaCountryTldEnumerationNf represents nf
	// Norfolk Island.
	IanaCountryTldEnumerationNf IanaCountryTldEnumeration = "nf"
	// IanaCountryTldEnumerationNg represents ng
	// Nigeria.
	IanaCountryTldEnumerationNg IanaCountryTldEnumeration = "ng"
	// IanaCountryTldEnumerationNi represents ni
	// Nicaragua.
	IanaCountryTldEnumerationNi IanaCountryTldEnumeration = "ni"
	// IanaCountryTldEnumerationNl represents nl
	// Netherlands.
	IanaCountryTldEnumerationNl IanaCountryTldEnumeration = "nl"
	// IanaCountryTldEnumerationNo represents no
	// Norway.
	IanaCountryTldEnumerationNo IanaCountryTldEnumeration = "no"
	// IanaCountryTldEnumerationNp represents np
	// Nepal.
	IanaCountryTldEnumerationNp IanaCountryTldEnumeration = "np"
	// IanaCountryTldEnumerationNr represents nr
	// Nauru.
	IanaCountryTldEnumerationNr IanaCountryTldEnumeration = "nr"
	// IanaCountryTldEnumerationNu represents nu
	// Niue.
	IanaCountryTldEnumerationNu IanaCountryTldEnumeration = "nu"
	// IanaCountryTldEnumerationNz represents nz
	// New Zealand.
	IanaCountryTldEnumerationNz IanaCountryTldEnumeration = "nz"
	// IanaCountryTldEnumerationOm represents om
	// Oman.
	IanaCountryTldEnumerationOm IanaCountryTldEnumeration = "om"
	// IanaCountryTldEnumerationPa represents pa
	// Panama.
	IanaCountryTldEnumerationPa IanaCountryTldEnumeration = "pa"
	// IanaCountryTldEnumerationPe represents pe
	// Peru.
	IanaCountryTldEnumerationPe IanaCountryTldEnumeration = "pe"
	// IanaCountryTldEnumerationPf represents pf
	// French Polynesia.
	IanaCountryTldEnumerationPf IanaCountryTldEnumeration = "pf"
	// IanaCountryTldEnumerationPg represents pg
	// Papua New Guinea.
	IanaCountryTldEnumerationPg IanaCountryTldEnumeration = "pg"
	// IanaCountryTldEnumerationPh represents ph
	// Philippines.
	IanaCountryTldEnumerationPh IanaCountryTldEnumeration = "ph"
	// IanaCountryTldEnumerationPk represents pk
	// Pakistan.
	IanaCountryTldEnumerationPk IanaCountryTldEnumeration = "pk"
	// IanaCountryTldEnumerationPl represents pl
	// Poland.
	IanaCountryTldEnumerationPl IanaCountryTldEnumeration = "pl"
	// IanaCountryTldEnumerationPm represents pm
	// Saint Pierre and Miquelon.
	IanaCountryTldEnumerationPm IanaCountryTldEnumeration = "pm"
	// IanaCountryTldEnumerationPn represents pn
	// Pitcairn Island.
	IanaCountryTldEnumerationPn IanaCountryTldEnumeration = "pn"
	// IanaCountryTldEnumerationPr represents pr
	// Puerto Rico.
	IanaCountryTldEnumerationPr IanaCountryTldEnumeration = "pr"
	// IanaCountryTldEnumerationPs represents ps
	// Palestinian Territories.
	IanaCountryTldEnumerationPs IanaCountryTldEnumeration = "ps"
	// IanaCountryTldEnumerationPt represents pt
	// Portugal.
	IanaCountryTldEnumerationPt IanaCountryTldEnumeration = "pt"
	// IanaCountryTldEnumerationPw represents pw
	// Palau.
	IanaCountryTldEnumerationPw IanaCountryTldEnumeration = "pw"
	// IanaCountryTldEnumerationPy represents py
	// Paraguay.
	IanaCountryTldEnumerationPy IanaCountryTldEnumeration = "py"
	// IanaCountryTldEnumerationQa represents qa
	// Qatar.
	IanaCountryTldEnumerationQa IanaCountryTldEnumeration = "qa"
	// IanaCountryTldEnumerationRe represents re
	// Reunion Island.
	IanaCountryTldEnumerationRe IanaCountryTldEnumeration = "re"
	// IanaCountryTldEnumerationRo represents ro
	// Romania.
	IanaCountryTldEnumerationRo IanaCountryTldEnumeration = "ro"
	// IanaCountryTldEnumerationRs represents rs
	// serbia.
	IanaCountryTldEnumerationRs IanaCountryTldEnumeration = "rs"
	// IanaCountryTldEnumerationRu represents ru
	// Russian Federation.
	IanaCountryTldEnumerationRu IanaCountryTldEnumeration = "ru"
	// IanaCountryTldEnumerationRw represents rw
	// Rwanda.
	IanaCountryTldEnumerationRw IanaCountryTldEnumeration = "rw"
	// IanaCountryTldEnumerationSa represents sa
	// Saudi Arabia.
	IanaCountryTldEnumerationSa IanaCountryTldEnumeration = "sa"
	// IanaCountryTldEnumerationSb represents sb
	// Solomon Islands.
	IanaCountryTldEnumerationSb IanaCountryTldEnumeration = "sb"
	// IanaCountryTldEnumerationSc represents sc
	// Seychelles.
	IanaCountryTldEnumerationSc IanaCountryTldEnumeration = "sc"
	// IanaCountryTldEnumerationSd represents sd
	// Sudan.
	IanaCountryTldEnumerationSd IanaCountryTldEnumeration = "sd"
	// IanaCountryTldEnumerationSe represents se
	// Sweden.
	IanaCountryTldEnumerationSe IanaCountryTldEnumeration = "se"
	// IanaCountryTldEnumerationSg represents sg
	// Singapore.
	IanaCountryTldEnumerationSg IanaCountryTldEnumeration = "sg"
	// IanaCountryTldEnumerationSh represents sh
	// Saint Helena.
	IanaCountryTldEnumerationSh IanaCountryTldEnumeration = "sh"
	// IanaCountryTldEnumerationSi represents si
	// Slovenia.
	IanaCountryTldEnumerationSi IanaCountryTldEnumeration = "si"
	// IanaCountryTldEnumerationSj represents sj
	// Svalbard and Jan Mayen Islands.
	IanaCountryTldEnumerationSj IanaCountryTldEnumeration = "sj"
	// IanaCountryTldEnumerationSk represents sk
	// Slovak Republic.
	IanaCountryTldEnumerationSk IanaCountryTldEnumeration = "sk"
	// IanaCountryTldEnumerationSl represents sl
	// Sierra Leone.
	IanaCountryTldEnumerationSl IanaCountryTldEnumeration = "sl"
	// IanaCountryTldEnumerationSm represents sm
	// San Marino.
	IanaCountryTldEnumerationSm IanaCountryTldEnumeration = "sm"
	// IanaCountryTldEnumerationSn represents sn
	// Senegal.
	IanaCountryTldEnumerationSn IanaCountryTldEnumeration = "sn"
	// IanaCountryTldEnumerationSo represents so
	// Somalia.
	IanaCountryTldEnumerationSo IanaCountryTldEnumeration = "so"
	// IanaCountryTldEnumerationSr represents sr
	// Suriname.
	IanaCountryTldEnumerationSr IanaCountryTldEnumeration = "sr"
	// IanaCountryTldEnumerationSt represents st
	// Sao Tome and Principe.
	IanaCountryTldEnumerationSt IanaCountryTldEnumeration = "st"
	// IanaCountryTldEnumerationSv represents sv
	// El Salvador.
	IanaCountryTldEnumerationSv IanaCountryTldEnumeration = "sv"
	// IanaCountryTldEnumerationSy represents sy
	// Syrian Arab Republic.
	IanaCountryTldEnumerationSy IanaCountryTldEnumeration = "sy"
	// IanaCountryTldEnumerationSz represents sz
	// Swaziland.
	IanaCountryTldEnumerationSz IanaCountryTldEnumeration = "sz"
	// IanaCountryTldEnumerationTc represents tc
	// Turks and Caicos Islands.
	IanaCountryTldEnumerationTc IanaCountryTldEnumeration = "tc"
	// IanaCountryTldEnumerationTd represents td
	// Chad.
	IanaCountryTldEnumerationTd IanaCountryTldEnumeration = "td"
	// IanaCountryTldEnumerationTf represents tf
	// French Southern Territories.
	IanaCountryTldEnumerationTf IanaCountryTldEnumeration = "tf"
	// IanaCountryTldEnumerationTg represents tg
	// Togo.
	IanaCountryTldEnumerationTg IanaCountryTldEnumeration = "tg"
	// IanaCountryTldEnumerationTh represents th
	// Thailand.
	IanaCountryTldEnumerationTh IanaCountryTldEnumeration = "th"
	// IanaCountryTldEnumerationTj represents tj
	// Tajikistan.
	IanaCountryTldEnumerationTj IanaCountryTldEnumeration = "tj"
	// IanaCountryTldEnumerationTk represents tk
	// Tokelau.
	IanaCountryTldEnumerationTk IanaCountryTldEnumeration = "tk"
	// IanaCountryTldEnumerationTl represents tl
	// Timor-Leste.
	IanaCountryTldEnumerationTl IanaCountryTldEnumeration = "tl"
	// IanaCountryTldEnumerationTm represents tm
	// Turkmenistan.
	IanaCountryTldEnumerationTm IanaCountryTldEnumeration = "tm"
	// IanaCountryTldEnumerationTn represents tn
	// Tunisia.
	IanaCountryTldEnumerationTn IanaCountryTldEnumeration = "tn"
	// IanaCountryTldEnumerationTo represents to
	// Tonga.
	IanaCountryTldEnumerationTo IanaCountryTldEnumeration = "to"
	// IanaCountryTldEnumerationTp represents tp
	// East Timor.
	IanaCountryTldEnumerationTp IanaCountryTldEnumeration = "tp"
	// IanaCountryTldEnumerationTr represents tr
	// Turkey.
	IanaCountryTldEnumerationTr IanaCountryTldEnumeration = "tr"
	// IanaCountryTldEnumerationTt represents tt
	// Trinidad and Tobago.
	IanaCountryTldEnumerationTt IanaCountryTldEnumeration = "tt"
	// IanaCountryTldEnumerationTv represents tv
	// Tuvalu.
	IanaCountryTldEnumerationTv IanaCountryTldEnumeration = "tv"
	// IanaCountryTldEnumerationTw represents tw
	// Taiwan.
	IanaCountryTldEnumerationTw IanaCountryTldEnumeration = "tw"
	// IanaCountryTldEnumerationTz represents tz
	// Tanzania.
	IanaCountryTldEnumerationTz IanaCountryTldEnumeration = "tz"
	// IanaCountryTldEnumerationUa represents ua
	// Ukraine.
	IanaCountryTldEnumerationUa IanaCountryTldEnumeration = "ua"
	// IanaCountryTldEnumerationUg represents ug
	// Uganda.
	IanaCountryTldEnumerationUg IanaCountryTldEnumeration = "ug"
	// IanaCountryTldEnumerationUk represents uk
	// United Kingdom.
	IanaCountryTldEnumerationUk IanaCountryTldEnumeration = "uk"
	// IanaCountryTldEnumerationUm represents um
	// United States Minor Outlying Islands.
	IanaCountryTldEnumerationUm IanaCountryTldEnumeration = "um"
	// IanaCountryTldEnumerationUs represents us
	// United States.
	IanaCountryTldEnumerationUs IanaCountryTldEnumeration = "us"
	// IanaCountryTldEnumerationUy represents uy
	// Uruguay.
	IanaCountryTldEnumerationUy IanaCountryTldEnumeration = "uy"
	// IanaCountryTldEnumerationUz represents uz
	// Uzbekistan.
	IanaCountryTldEnumerationUz IanaCountryTldEnumeration = "uz"
	// IanaCountryTldEnumerationVa represents va
	// Holy See (Vatican City State).
	IanaCountryTldEnumerationVa IanaCountryTldEnumeration = "va"
	// IanaCountryTldEnumerationVc represents vc
	// Saint Vincent and the Grenadines.
	IanaCountryTldEnumerationVc IanaCountryTldEnumeration = "vc"
	// IanaCountryTldEnumerationVe represents ve
	// Venezuela.
	IanaCountryTldEnumerationVe IanaCountryTldEnumeration = "ve"
	// IanaCountryTldEnumerationVg represents vg
	// Virgin Islands, British.
	IanaCountryTldEnumerationVg IanaCountryTldEnumeration = "vg"
	// IanaCountryTldEnumerationVi represents vi
	// Virgin Islands, US.
	IanaCountryTldEnumerationVi IanaCountryTldEnumeration = "vi"
	// IanaCountryTldEnumerationVn represents vn
	// Vietnam.
	IanaCountryTldEnumerationVn IanaCountryTldEnumeration = "vn"
	// IanaCountryTldEnumerationVu represents vu
	// Vanuatu.
	IanaCountryTldEnumerationVu IanaCountryTldEnumeration = "vu"
	// IanaCountryTldEnumerationWf represents wf
	// Wallis and Futuna Islands.
	IanaCountryTldEnumerationWf IanaCountryTldEnumeration = "wf"
	// IanaCountryTldEnumerationWs represents ws
	// Samoa.
	IanaCountryTldEnumerationWs IanaCountryTldEnumeration = "ws"
	// IanaCountryTldEnumerationYe represents ye
	// Yemen.
	IanaCountryTldEnumerationYe IanaCountryTldEnumeration = "ye"
	// IanaCountryTldEnumerationYt represents yt
	// Mayotte.
	IanaCountryTldEnumerationYt IanaCountryTldEnumeration = "yt"
	// IanaCountryTldEnumerationYu represents yu
	// Yugoslavia.
	IanaCountryTldEnumerationYu IanaCountryTldEnumeration = "yu"
	// IanaCountryTldEnumerationZa represents za
	// South Africa.
	IanaCountryTldEnumerationZa IanaCountryTldEnumeration = "za"
	// IanaCountryTldEnumerationZm represents zm
	// Zambia.
	IanaCountryTldEnumerationZm IanaCountryTldEnumeration = "zm"
	// IanaCountryTldEnumerationZw represents zw
	// Zimbabwe.
	IanaCountryTldEnumerationZw IanaCountryTldEnumeration = "zw"
)

// CountryRefStructure represents the CountryRefStructure element
// Type for a reference to a Country Identifier.
type CountryRefStructure struct {
	Value string `xml:",chardata" json:"value"`
	// Iso 3166-1 Two Character country code.
	Ref *IanaCountryTldEnumeration `xml:"ref,attr,omitempty" json:"ref,omitempty"`
	// Iso3166-3 Three character country code
	RefPrincipality *string `xml:"refPrincipality,attr,omitempty" json:"refPrincipality,omitempty"`
}

// CountryRefsRelStructure represents the countryRefs_RelStructure element
// Type for a list of COUNTRY references.
type CountryRefsRelStructure struct {
	OneToManyRelationshipStructure
	// Reference to a COUNTRY.
	CountryRef []CountryRef `xml:"CountryRef" json:"CountryRef"`
}

// AllCountriesRefStructure represents the AllCountriesRefStructure element
// Type for a reference All Countries.
type AllCountriesRefStructure struct {
	TypeOfValueRefStructure
	// Iso 3166-1 Two Character country code.
	Ref string `xml:"ref,attr" json:"ref"`
}

// CountryRef represents the CountryRef element
// Reference to a country ISO 3166-1 Note that GB is used for UK . May be qualified with a 3166-2 subdivision e.g. gb +m ENG, GB + SCT, GB See www.iso.org/iso/country_codes/iso_3166_code_lists.htm.
type CountryRef struct {
	CountryRefStructure
}

// AllCountriesRef represents the AllCountriesRef element
// Reference to a country ISO 3166-1 Note that GB is used for UK . May be qualified with a 3166-2 subdivision e.g. gb +m ENG, GB + SCT, GB See www.iso.org/iso/country_codes/iso_3166_code_lists.htm.
type AllCountriesRef struct {
	AllCountriesRefStructure
}

// DayOfWeekEnumeration represents the DayOfWeekEnumeration enumeration
// Allowed values for Day of the Week.
type DayOfWeekEnumeration string

const (
	// DayOfWeekEnumerationMonday represents Monday
	DayOfWeekEnumerationMonday DayOfWeekEnumeration = "Monday"
	// DayOfWeekEnumerationTuesday represents Tuesday
	DayOfWeekEnumerationTuesday DayOfWeekEnumeration = "Tuesday"
	// DayOfWeekEnumerationWednesday represents Wednesday
	DayOfWeekEnumerationWednesday DayOfWeekEnumeration = "Wednesday"
	// DayOfWeekEnumerationThursday represents Thursday
	DayOfWeekEnumerationThursday DayOfWeekEnumeration = "Thursday"
	// DayOfWeekEnumerationFriday represents Friday
	DayOfWeekEnumerationFriday DayOfWeekEnumeration = "Friday"
	// DayOfWeekEnumerationSaturday represents Saturday
	DayOfWeekEnumerationSaturday DayOfWeekEnumeration = "Saturday"
	// DayOfWeekEnumerationSunday represents Sunday
	DayOfWeekEnumerationSunday DayOfWeekEnumeration = "Sunday"
	// DayOfWeekEnumerationEveryday represents Everyday
	DayOfWeekEnumerationEveryday DayOfWeekEnumeration = "Everyday"
	// DayOfWeekEnumerationWeekdays represents Weekdays
	DayOfWeekEnumerationWeekdays DayOfWeekEnumeration = "Weekdays"
	// DayOfWeekEnumerationWeekend represents Weekend
	DayOfWeekEnumerationWeekend DayOfWeekEnumeration = "Weekend"
	// DayOfWeekEnumerationNone represents none
	DayOfWeekEnumerationNone DayOfWeekEnumeration = "none"
)

// WeekOfMonthEnumeration represents the WeekOfMonthEnumeration enumeration
// Allowed values for Week of the Month.
type WeekOfMonthEnumeration string

const (
	// WeekOfMonthEnumeration1 represents 1
	WeekOfMonthEnumeration1 WeekOfMonthEnumeration = "1"
	// WeekOfMonthEnumeration2 represents 2
	WeekOfMonthEnumeration2 WeekOfMonthEnumeration = "2"
	// WeekOfMonthEnumeration3 represents 3
	WeekOfMonthEnumeration3 WeekOfMonthEnumeration = "3"
	// WeekOfMonthEnumeration4 represents 4
	WeekOfMonthEnumeration4 WeekOfMonthEnumeration = "4"
	// WeekOfMonthEnumeration5 represents 5
	WeekOfMonthEnumeration5 WeekOfMonthEnumeration = "5"
	// WeekOfMonthEnumerationEveryWeek represents EveryWeek
	WeekOfMonthEnumerationEveryWeek WeekOfMonthEnumeration = "EveryWeek"
)

// HolidayTypeEnumeration represents the HolidayTypeEnumeration enumeration
// Allowed values for Holiday types.
type HolidayTypeEnumeration string

const (
	// HolidayTypeEnumerationAnyDay represents AnyDay
	HolidayTypeEnumerationAnyDay HolidayTypeEnumeration = "AnyDay"
	// HolidayTypeEnumerationWorkingDay represents WorkingDay
	HolidayTypeEnumerationWorkingDay HolidayTypeEnumeration = "WorkingDay"
	// HolidayTypeEnumerationSchoolDay represents SchoolDay
	HolidayTypeEnumerationSchoolDay HolidayTypeEnumeration = "SchoolDay"
	// HolidayTypeEnumerationNotHoliday represents NotHoliday
	HolidayTypeEnumerationNotHoliday HolidayTypeEnumeration = "NotHoliday"
	// HolidayTypeEnumerationNotWorkingDay represents NotWorkingDay
	HolidayTypeEnumerationNotWorkingDay HolidayTypeEnumeration = "NotWorkingDay"
	// HolidayTypeEnumerationNotSchoolDay represents NotSchoolDay
	HolidayTypeEnumerationNotSchoolDay HolidayTypeEnumeration = "NotSchoolDay"
	// HolidayTypeEnumerationAnyHoliday represents AnyHoliday
	HolidayTypeEnumerationAnyHoliday HolidayTypeEnumeration = "AnyHoliday"
	// HolidayTypeEnumerationLocalHoliday represents LocalHoliday
	HolidayTypeEnumerationLocalHoliday HolidayTypeEnumeration = "LocalHoliday"
	// HolidayTypeEnumerationRegionalHoliday represents RegionalHoliday
	HolidayTypeEnumerationRegionalHoliday HolidayTypeEnumeration = "RegionalHoliday"
	// HolidayTypeEnumerationNationalHoliday represents NationalHoliday
	HolidayTypeEnumerationNationalHoliday HolidayTypeEnumeration = "NationalHoliday"
	// HolidayTypeEnumerationHolidayDisplacementDay represents HolidayDisplacementDay
	HolidayTypeEnumerationHolidayDisplacementDay HolidayTypeEnumeration = "HolidayDisplacementDay"
	// HolidayTypeEnumerationEveOfHoliday represents EveOfHoliday
	HolidayTypeEnumerationEveOfHoliday HolidayTypeEnumeration = "EveOfHoliday"
)

// SeasonEnumeration represents the SeasonEnumeration enumeration
// Allowed values for Season.
type SeasonEnumeration string

const (
	// SeasonEnumerationSpring represents Spring
	SeasonEnumerationSpring SeasonEnumeration = "Spring"
	// SeasonEnumerationSummer represents Summer
	SeasonEnumerationSummer SeasonEnumeration = "Summer"
	// SeasonEnumerationAutumn represents Autumn
	SeasonEnumerationAutumn SeasonEnumeration = "Autumn"
	// SeasonEnumerationWinter represents Winter
	SeasonEnumerationWinter SeasonEnumeration = "Winter"
	// SeasonEnumerationPerennially represents Perennially
	SeasonEnumerationPerennially SeasonEnumeration = "Perennially"
)

// TimeOfDayEnumeration represents the TimeOfDayEnumeration enumeration
// Allowed values for TimeOfDay.
type TimeOfDayEnumeration string

const (
	// TimeOfDayEnumerationDawn represents dawn
	TimeOfDayEnumerationDawn TimeOfDayEnumeration = "dawn"
	// TimeOfDayEnumerationDusk represents dusk
	TimeOfDayEnumerationDusk TimeOfDayEnumeration = "dusk"
	// TimeOfDayEnumerationNoon represents noon
	TimeOfDayEnumerationNoon TimeOfDayEnumeration = "noon"
	// TimeOfDayEnumerationMidnight represents midnight
	TimeOfDayEnumerationMidnight TimeOfDayEnumeration = "midnight"
	// TimeOfDayEnumerationCurfewStart represents curfewStart
	TimeOfDayEnumerationCurfewStart TimeOfDayEnumeration = "curfewStart"
	// TimeOfDayEnumerationCurfewEnd represents curfewEnd
	TimeOfDayEnumerationCurfewEnd TimeOfDayEnumeration = "curfewEnd"
)

// TideEnumeration represents the TideEnumeration enumeration
// Allowed values for Tides.
type TideEnumeration string

const (
	// TideEnumerationHighTide represents HighTide
	TideEnumerationHighTide TideEnumeration = "HighTide"
	// TideEnumerationLowTide represents LowTide
	TideEnumerationLowTide TideEnumeration = "LowTide"
	// TideEnumerationNeapTide represents NeapTide
	TideEnumerationNeapTide TideEnumeration = "NeapTide"
	// TideEnumerationAllTides represents AllTides
	TideEnumerationAllTides TideEnumeration = "AllTides"
)

// CrowdingEnumeration represents the CrowdingEnumeration enumeration
// Allowed values for Crowdedness.
type CrowdingEnumeration string

const (
	// CrowdingEnumerationVeryQuiet represents veryQuiet
	CrowdingEnumerationVeryQuiet CrowdingEnumeration = "veryQuiet"
	// CrowdingEnumerationQuiet represents quiet
	CrowdingEnumerationQuiet CrowdingEnumeration = "quiet"
	// CrowdingEnumerationNormal represents normal
	CrowdingEnumerationNormal CrowdingEnumeration = "normal"
	// CrowdingEnumerationBusy represents busy
	CrowdingEnumerationBusy CrowdingEnumeration = "busy"
	// CrowdingEnumerationVeryBusy represents veryBusy
	CrowdingEnumerationVeryBusy CrowdingEnumeration = "veryBusy"
)

// DayEventEnumeration represents the DayEventEnumeration enumeration
// Allowed values for DAY EVENT.
type DayEventEnumeration string

const (
	// DayEventEnumerationAnyDay represents anyDay
	DayEventEnumerationAnyDay DayEventEnumeration = "anyDay"
	// DayEventEnumerationNormalDay represents normalDay
	DayEventEnumerationNormalDay DayEventEnumeration = "normalDay"
	// DayEventEnumerationMarketDay represents marketDay
	DayEventEnumerationMarketDay DayEventEnumeration = "marketDay"
	// DayEventEnumerationMatchDay represents matchDay
	DayEventEnumerationMatchDay DayEventEnumeration = "matchDay"
	// DayEventEnumerationEventDay represents eventDay
	DayEventEnumerationEventDay DayEventEnumeration = "eventDay"
)

// PropertiesOfDayRelStructure represents the propertiesOfDay_RelStructure element
// Type for a list of properties of day.
type PropertiesOfDayRelStructure struct {
	StrictContainmentAggregationStructure
	PropertyOfDay []PropertyOfDay `xml:"PropertyOfDay" json:"PropertyOfDay"`
}

// PropertyOfDayStructure represents the PropertyOfDayStructure element
// Type for Property of Day.
type PropertyOfDayStructure struct {
	// Name of PROPERTY OF DAY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of PROPERTY OF DAY.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Days of week Monday to Sunday, Everyday. Up to seven allowed. Default is Everyday.
	DaysOfWeek *DayOfWeekEnumeration `xml:"DaysOfWeek,omitempty" json:"DaysOfWeek,omitempty"`
	// Week of Month. (Default is EveryWeek)
	WeeksOfMonth *WeekOfMonthEnumeration `xml:"WeeksOfMonth,omitempty" json:"WeeksOfMonth,omitempty"`
	// For those day types that occur on the same month every year; a  month as a number.
	MonthOfYear *string `xml:"MonthOfYear,omitempty" json:"MonthOfYear,omitempty"`
	// For those day types that occur on the same day of the month every year; a  a as a number.
	DayOfMonth *string `xml:"DayOfMonth,omitempty" json:"DayOfMonth,omitempty"`
	// For those day types that occur on the same day every year, month and day,
	DayOfYear *string `xml:"DayOfYear,omitempty" json:"DayOfYear,omitempty"`
	// Reference to COUNTRY for Holiday.
	CountryRef *CountryRefStructure `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	// Type of holiday. Default is Any day.
	HolidayTypes *HolidayTypeEnumeration `xml:"HolidayTypes,omitempty" json:"HolidayTypes,omitempty"`
	// Seasons (Default is Perennially)
	Seasons *SeasonEnumeration `xml:"Seasons,omitempty" json:"Seasons,omitempty"`
	// Tides. Default is All Tides.
	Tides *TideEnumeration `xml:"Tides,omitempty" json:"Tides,omitempty"`
	// Events happening on day.
	DayEvent *DayEventEnumeration `xml:"DayEvent,omitempty" json:"DayEvent,omitempty"`
	// Relative busyness of day.
	Crowding *CrowdingEnumeration `xml:"Crowding,omitempty" json:"Crowding,omitempty"`
}

// PropertyOfDay represents the PropertyOfDay element
// A property which a day may possess, such as school holiday, weekday, summer, winter etc.
type PropertyOfDay struct {
	PropertyOfDayStructure
}

// DayTypeRefsRelStructure represents the dayTypeRefs_RelStructure element
// Type for a list of DAY TYPEs.
type DayTypeRefsRelStructure struct {
	OneToManyRelationshipStructure
	FareDayTypeRef []FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef []DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
}

// DayTypeRefStructure represents the DayTypeRefStructure element
// Type for a reference to a DAY TYPE.
type DayTypeRefStructure struct {
	VersionOfObjectRefStructure
}

// TimebandRefsRelStructure represents the timebandRefs_RelStructure element
// Type for a list of TIMEBAND.
type TimebandRefsRelStructure struct {
	OneToManyRelationshipStructure
	TimebandRef []TimebandRef `xml:"TimebandRef" json:"TimebandRef"`
}

// TimebandRefStructure represents the TimebandRefStructure element
// Type for a reference to a TIMEBAND.
type TimebandRefStructure struct {
	VersionOfObjectRefStructure
}

// GroupOfTimebandsRefStructure represents the GroupOfTimebandsRefStructure element
// Type for a reference to a GROUP OF TIMEBANDs.
type GroupOfTimebandsRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// DayTypeRef represents the DayTypeRef element
// Reference to a DAY TYPE.
type DayTypeRef struct {
	DayTypeRefStructure
}

// TimebandRef represents the TimebandRef element
// Reference to a TIME BAND.
type TimebandRef struct {
	TimebandRefStructure
}

// GroupOfTimebandsRef represents the GroupOfTimebandsRef element
// Reference to a GROUP OF TIMEBANDs.
type GroupOfTimebandsRef struct {
	GroupOfTimebandsRefStructure
}

// GroupOfEntitiesInFrameRelStructure represents the groupOfEntitiesInFrame_RelStructure element
// Type for containment in frame of GROUP OF ENTITIes.
type GroupOfEntitiesInFrameRelStructure struct {
	ContainmentAggregationStructure
	PoolOfVehicles []PoolOfVehicles `xml:"PoolOfVehicles,omitempty" json:"PoolOfVehicles,omitempty"`
	GroupOfSingleJourneys []GroupOfSingleJourneys `xml:"GroupOfSingleJourneys,omitempty" json:"GroupOfSingleJourneys,omitempty"`
	GroupOfDistributionChannels []GroupOfDistributionChannels `xml:"GroupOfDistributionChannels,omitempty" json:"GroupOfDistributionChannels,omitempty"`
	GroupOfDistanceMatrixElements []GroupOfDistanceMatrixElements `xml:"GroupOfDistanceMatrixElements,omitempty" json:"GroupOfDistanceMatrixElements,omitempty"`
	PriceGroup []PriceGroup `xml:"PriceGroup,omitempty" json:"PriceGroup,omitempty"`
	StandardFareTable []StandardFareTable `xml:"StandardFareTable,omitempty" json:"StandardFareTable,omitempty"`
	FareTableInContext []FareTableInContext `xml:"FareTableInContext,omitempty" json:"FareTableInContext,omitempty"`
	FareTable []FareTable `xml:"FareTable,omitempty" json:"FareTable,omitempty"`
	GroupOfServices []GroupOfServices `xml:"GroupOfServices,omitempty" json:"GroupOfServices,omitempty"`
	RhythmicalJourneyGroup []RhythmicalJourneyGroup `xml:"RhythmicalJourneyGroup,omitempty" json:"RhythmicalJourneyGroup,omitempty"`
	HeadwayJourneyGroup []HeadwayJourneyGroup `xml:"HeadwayJourneyGroup,omitempty" json:"HeadwayJourneyGroup,omitempty"`
	CrewBase []CrewBase `xml:"CrewBase,omitempty" json:"CrewBase,omitempty"`
	GroupOfTimingLinks []GroupOfTimingLinks `xml:"GroupOfTimingLinks,omitempty" json:"GroupOfTimingLinks,omitempty"`
	Network []Network `xml:"Network,omitempty" json:"Network,omitempty"`
	GroupOfLines []GroupOfLines `xml:"GroupOfLines,omitempty" json:"GroupOfLines,omitempty"`
	GroupOfOperators []GroupOfOperators `xml:"GroupOfOperators,omitempty" json:"GroupOfOperators,omitempty"`
	GroupOfPlaces []GroupOfPlaces `xml:"GroupOfPlaces,omitempty" json:"GroupOfPlaces,omitempty"`
	GroupOfLinkSequences []GroupOfLinkSequences `xml:"GroupOfLinkSequences,omitempty" json:"GroupOfLinkSequences,omitempty"`
	GroupOfTariffZones []GroupOfTariffZones `xml:"GroupOfTariffZones,omitempty" json:"GroupOfTariffZones,omitempty"`
	MobilityServiceConstraintZone []MobilityServiceConstraintZone `xml:"MobilityServiceConstraintZone,omitempty" json:"MobilityServiceConstraintZone,omitempty"`
	RoutingConstraintZone []RoutingConstraintZone `xml:"RoutingConstraintZone,omitempty" json:"RoutingConstraintZone,omitempty"`
	StopArea []StopArea `xml:"StopArea,omitempty" json:"StopArea,omitempty"`
	AccessZone []AccessZone `xml:"AccessZone,omitempty" json:"AccessZone,omitempty"`
	VehicleMeetingPlace []VehicleMeetingPlace1 `xml:"VehicleMeetingPlace,omitempty" json:"VehicleMeetingPlace,omitempty"`
	VehiclePoolingMeetingPlace []VehiclePoolingMeetingPlace `xml:"VehiclePoolingMeetingPlace,omitempty" json:"VehiclePoolingMeetingPlace,omitempty"`
	NetexOrgUkNetexVehicleMeetingPlace []VehicleMeetingPlace2 `xml:"VehicleMeetingPlace_,omitempty" json:"VehicleMeetingPlace_,omitempty"`
	HailAndRideArea []HailAndRideArea `xml:"HailAndRideArea,omitempty" json:"HailAndRideArea,omitempty"`
	FlexibleArea []FlexibleArea `xml:"FlexibleArea,omitempty" json:"FlexibleArea,omitempty"`
	FlexibleQuay []FlexibleQuay `xml:"FlexibleQuay,omitempty" json:"FlexibleQuay,omitempty"`
	FlexibleStopPlace []FlexibleStopPlace `xml:"FlexibleStopPlace,omitempty" json:"FlexibleStopPlace,omitempty"`
	Garage []Garage `xml:"Garage,omitempty" json:"Garage,omitempty"`
	EquipmentPlace []EquipmentPlace `xml:"EquipmentPlace,omitempty" json:"EquipmentPlace,omitempty"`
	TaxiStand []TaxiStand `xml:"TaxiStand,omitempty" json:"TaxiStand,omitempty"`
	VehicleStoppingPlace []VehicleStoppingPlace `xml:"VehicleStoppingPlace,omitempty" json:"VehicleStoppingPlace,omitempty"`
	BoardingPosition []BoardingPosition `xml:"BoardingPosition,omitempty" json:"BoardingPosition,omitempty"`
	AccessSpace []AccessSpace `xml:"AccessSpace,omitempty" json:"AccessSpace,omitempty"`
	Quay []Quay `xml:"Quay,omitempty" json:"Quay,omitempty"`
	PointOfInterestSpace []PointOfInterestSpace `xml:"PointOfInterestSpace,omitempty" json:"PointOfInterestSpace,omitempty"`
	ParkingComponent []ParkingComponent `xml:"ParkingComponent,omitempty" json:"ParkingComponent,omitempty"`
	VehicleStoppingPosition []VehicleStoppingPosition `xml:"VehicleStoppingPosition,omitempty" json:"VehicleStoppingPosition,omitempty"`
	VehiclePoolingParkingArea []VehiclePoolingParkingArea `xml:"VehiclePoolingParkingArea,omitempty" json:"VehiclePoolingParkingArea,omitempty"`
	VehicleSharingParkingArea []VehicleSharingParkingArea `xml:"VehicleSharingParkingArea,omitempty" json:"VehicleSharingParkingArea,omitempty"`
	TaxiParkingArea []TaxiParkingArea `xml:"TaxiParkingArea,omitempty" json:"TaxiParkingArea,omitempty"`
	ParkingArea []ParkingArea `xml:"ParkingArea,omitempty" json:"ParkingArea,omitempty"`
	MonitoredVehicleSharingParkingBay []MonitoredVehicleSharingParkingBay `xml:"MonitoredVehicleSharingParkingBay,omitempty" json:"MonitoredVehicleSharingParkingBay,omitempty"`
	VehiclePoolingParkingBay []VehiclePoolingParkingBay `xml:"VehiclePoolingParkingBay,omitempty" json:"VehiclePoolingParkingBay,omitempty"`
	VehicleSharingParkingBay []VehicleSharingParkingBay `xml:"VehicleSharingParkingBay,omitempty" json:"VehicleSharingParkingBay,omitempty"`
	ParkingBay []ParkingBay `xml:"ParkingBay,omitempty" json:"ParkingBay,omitempty"`
	PointOfInterestVehicleEntrance []PointOfInterestVehicleEntrance `xml:"PointOfInterestVehicleEntrance,omitempty" json:"PointOfInterestVehicleEntrance,omitempty"`
	PointOfInterestEntrance []PointOfInterestEntrance `xml:"PointOfInterestEntrance,omitempty" json:"PointOfInterestEntrance,omitempty"`
	ParkingPassengerEntrance []ParkingPassengerEntrance `xml:"ParkingPassengerEntrance,omitempty" json:"ParkingPassengerEntrance,omitempty"`
	ParkingEntranceForVehicles []ParkingEntranceForVehicles `xml:"ParkingEntranceForVehicles,omitempty" json:"ParkingEntranceForVehicles,omitempty"`
	StopPlaceVehicleEntrance []StopPlaceVehicleEntrance `xml:"StopPlaceVehicleEntrance,omitempty" json:"StopPlaceVehicleEntrance,omitempty"`
	StopPlaceEntrance []StopPlaceEntrance `xml:"StopPlaceEntrance,omitempty" json:"StopPlaceEntrance,omitempty"`
	Entrance []Entrance `xml:"Entrance,omitempty" json:"Entrance,omitempty"`
	PointOfInterest []PointOfInterest `xml:"PointOfInterest,omitempty" json:"PointOfInterest,omitempty"`
	Parking []Parking `xml:"Parking,omitempty" json:"Parking,omitempty"`
	TaxiRank []TaxiRank `xml:"TaxiRank,omitempty" json:"TaxiRank,omitempty"`
	StopPlace []StopPlace `xml:"StopPlace,omitempty" json:"StopPlace,omitempty"`
	ServiceSite []ServiceSite `xml:"ServiceSite,omitempty" json:"ServiceSite,omitempty"`
	TopographicPlace []TopographicPlace `xml:"TopographicPlace,omitempty" json:"TopographicPlace,omitempty"`
	Country []Country `xml:"Country,omitempty" json:"Country,omitempty"`
	AddressablePlace []AddressablePlace `xml:"AddressablePlace,omitempty" json:"AddressablePlace,omitempty"`
	PostalAddress []PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	RoadAddress []RoadAddress `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
	TransportAdministrativeZone []TransportAdministrativeZone `xml:"TransportAdministrativeZone,omitempty" json:"TransportAdministrativeZone,omitempty"`
	AdministrativeZone []AdministrativeZone `xml:"AdministrativeZone,omitempty" json:"AdministrativeZone,omitempty"`
	FareZone []FareZone `xml:"FareZone,omitempty" json:"FareZone,omitempty"`
	TariffZone []TariffZone `xml:"TariffZone,omitempty" json:"TariffZone,omitempty"`
	GeneralZone []GeneralZone `xml:"GeneralZone,omitempty" json:"GeneralZone,omitempty"`
	Zone []Zone `xml:"Zone,omitempty" json:"Zone,omitempty"`
	GroupOfLinks []GroupOfLinks `xml:"GroupOfLinks,omitempty" json:"GroupOfLinks,omitempty"`
	GroupOfPoints []GroupOfPoints `xml:"GroupOfPoints,omitempty" json:"GroupOfPoints,omitempty"`
	Layer []Layer `xml:"Layer,omitempty" json:"Layer,omitempty"`
	GeneralGroupOfEntities []GeneralGroupOfEntities `xml:"GeneralGroupOfEntities,omitempty" json:"GeneralGroupOfEntities,omitempty"`
}

// GroupOfEntitiesVersionStructure represents the GroupOfEntities_VersionStructure element
// Type for a GROUP OF ENTITies.
type GroupOfEntitiesVersionStructure struct {
	DataManagedObjectStructure
	// Name of GROUP OF ENTITies.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name of GROUP OF ENTITies.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Further Description of a GROUP OF ENTITies.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Reference to a PURPOSE OF GROUPING.
	PurposeOfGroupingRef *PurposeOfGroupingRef `xml:"PurposeOfGroupingRef,omitempty" json:"PurposeOfGroupingRef,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Hyperlinks associated with GROUP OF ENTITIES.
	InfoLinks *InfoLinksRelStructure `xml:"infoLinks,omitempty" json:"infoLinks,omitempty"`
}

// GeneralGroupOfEntitiesVersionStructure represents the GeneralGroupOfEntities_VersionStructure element
// Type for a GENERAL GROUP OF ENTITies.
type GeneralGroupOfEntitiesVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Members of  GROUP OF ENTITies.
	Members *ObjectRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	// If group is homogeneous, name of CLASS of members.
	NameOfMemberClass *string `xml:"nameOfMemberClass,attr,omitempty" json:"nameOfMemberClass,omitempty"`
}

// PurposeOfGroupingValueStructure represents the PurposeOfGrouping_ValueStructure element
// Type for a PURPOSE OF GROUPING.
type PurposeOfGroupingValueStructure struct {
	TypeOfValueVersionStructure
	// Allowed class types for grouping.
	Classes *ClassRefsRelStructure `xml:"classes,omitempty" json:"classes,omitempty"`
	TypeOfMobilityService *TypeOfMobilityService `xml:"TypeOfMobilityService,omitempty" json:"TypeOfMobilityService,omitempty"`
	TypeOfRetailDevice *TypeOfRetailDevice `xml:"TypeOfRetailDevice,omitempty" json:"TypeOfRetailDevice,omitempty"`
	CustomerAccountStatus *CustomerAccountStatus `xml:"CustomerAccountStatus,omitempty" json:"CustomerAccountStatus,omitempty"`
	TypeOfCustomerAccount *TypeOfCustomerAccount `xml:"TypeOfCustomerAccount,omitempty" json:"TypeOfCustomerAccount,omitempty"`
	TypeOfFareContractEntry *TypeOfFareContractEntry `xml:"TypeOfFareContractEntry,omitempty" json:"TypeOfFareContractEntry,omitempty"`
	TypeOfFareContract *TypeOfFareContract `xml:"TypeOfFareContract,omitempty" json:"TypeOfFareContract,omitempty"`
	TypeOfTravelDocument *TypeOfTravelDocument `xml:"TypeOfTravelDocument,omitempty" json:"TypeOfTravelDocument,omitempty"`
	TypeOfSalesOfferPackage *TypeOfSalesOfferPackage `xml:"TypeOfSalesOfferPackage,omitempty" json:"TypeOfSalesOfferPackage,omitempty"`
	TypeOfFareProduct *TypeOfFareProduct `xml:"TypeOfFareProduct,omitempty" json:"TypeOfFareProduct,omitempty"`
	TypeOfFareStructureElement *TypeOfFareStructureElement `xml:"TypeOfFareStructureElement,omitempty" json:"TypeOfFareStructureElement,omitempty"`
	TypeOfTariff *TypeOfTariff `xml:"TypeOfTariff,omitempty" json:"TypeOfTariff,omitempty"`
	TypeOfAccessRightAssignment *TypeOfAccessRightAssignment `xml:"TypeOfAccessRightAssignment,omitempty" json:"TypeOfAccessRightAssignment,omitempty"`
	TypeOfFareStructureFactor *TypeOfFareStructureFactor `xml:"TypeOfFareStructureFactor,omitempty" json:"TypeOfFareStructureFactor,omitempty"`
	TypeOfFlexibleService *TypeOfFlexibleService `xml:"TypeOfFlexibleService,omitempty" json:"TypeOfFlexibleService,omitempty"`
	TypeOfTimeDemandType *TypeOfTimeDemandType `xml:"TypeOfTimeDemandType,omitempty" json:"TypeOfTimeDemandType,omitempty"`
	TypeOfPassengerInformationEquipment *TypeOfPassengerInformationEquipment `xml:"TypeOfPassengerInformationEquipment,omitempty" json:"TypeOfPassengerInformationEquipment,omitempty"`
	TypeOfJourneyPattern *TypeOfJourneyPattern `xml:"TypeOfJourneyPattern,omitempty" json:"TypeOfJourneyPattern,omitempty"`
	TypeOfActivation *TypeOfActivation `xml:"TypeOfActivation,omitempty" json:"TypeOfActivation,omitempty"`
	TypeOfModeOfOperation *TypeOfModeOfOperation `xml:"TypeOfModeOfOperation,omitempty" json:"TypeOfModeOfOperation,omitempty"`
	TypeOfPlug *TypeOfPlug `xml:"TypeOfPlug,omitempty" json:"TypeOfPlug,omitempty"`
	TypeOfBatteryChemistry *TypeOfBatteryChemistry `xml:"TypeOfBatteryChemistry,omitempty" json:"TypeOfBatteryChemistry,omitempty"`
	TypeOfLine *TypeOfLine `xml:"TypeOfLine,omitempty" json:"TypeOfLine,omitempty"`
	TypeOfDeliveryVariant *TypeOfDeliveryVariant `xml:"TypeOfDeliveryVariant,omitempty" json:"TypeOfDeliveryVariant,omitempty"`
	TypeOfNotice *TypeOfNotice `xml:"TypeOfNotice,omitempty" json:"TypeOfNotice,omitempty"`
	TypeOfCongestion *TypeOfCongestion `xml:"TypeOfCongestion,omitempty" json:"TypeOfCongestion,omitempty"`
	TypeOfFacility *TypeOfFacility `xml:"TypeOfFacility,omitempty" json:"TypeOfFacility,omitempty"`
	TypeOfService *TypeOfService `xml:"TypeOfService,omitempty" json:"TypeOfService,omitempty"`
	TypeOfEquipment *TypeOfEquipment `xml:"TypeOfEquipment,omitempty" json:"TypeOfEquipment,omitempty"`
	TypeOfFeature *TypeOfFeature `xml:"TypeOfFeature,omitempty" json:"TypeOfFeature,omitempty"`
	TypeOfLinkSequence *TypeOfLinkSequence `xml:"TypeOfLinkSequence,omitempty" json:"TypeOfLinkSequence,omitempty"`
	TypeOfPlace *TypeOfPlace `xml:"TypeOfPlace,omitempty" json:"TypeOfPlace,omitempty"`
	TypeOfTransfer *TypeOfTransfer `xml:"TypeOfTransfer,omitempty" json:"TypeOfTransfer,omitempty"`
	TypeOfOperation *TypeOfOperation `xml:"TypeOfOperation,omitempty" json:"TypeOfOperation,omitempty"`
	TypeOfOrganisationPart *TypeOfOrganisationPart `xml:"TypeOfOrganisationPart,omitempty" json:"TypeOfOrganisationPart,omitempty"`
	TypeOfOrganisation *TypeOfOrganisation `xml:"TypeOfOrganisation,omitempty" json:"TypeOfOrganisation,omitempty"`
	TypeOfZone *TypeOfZone `xml:"TypeOfZone,omitempty" json:"TypeOfZone,omitempty"`
	TypeOfLink *TypeOfLink `xml:"TypeOfLink,omitempty" json:"TypeOfLink,omitempty"`
	TypeOfPoint *TypeOfPoint `xml:"TypeOfPoint,omitempty" json:"TypeOfPoint,omitempty"`
	TypeOfProjection *TypeOfProjection `xml:"TypeOfProjection,omitempty" json:"TypeOfProjection,omitempty"`
	TypeOfFrame *TypeOfFrame `xml:"TypeOfFrame,omitempty" json:"TypeOfFrame,omitempty"`
	TypeOfResponsibilityRole *TypeOfResponsibilityRole `xml:"TypeOfResponsibilityRole,omitempty" json:"TypeOfResponsibilityRole,omitempty"`
	TypeOfEntity *TypeOfEntity `xml:"TypeOfEntity,omitempty" json:"TypeOfEntity,omitempty"`
}

// AbstractGroupMemberVersionedChildStructure represents the AbstractGroupMember_VersionedChildStructure element
// Type for a GROUP OF ENTITY MEMBERs. Subclass this for specific member types.
type AbstractGroupMemberVersionedChildStructure struct {
	VersionedChildStructure
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Order of member within parent group.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// GroupMemberVersionedChildStructure represents the GroupMember_VersionedChildStructure element
// Type for a General purpose member of a GROUP OF ENTITies.
type GroupMemberVersionedChildStructure struct {
	AbstractGroupMemberVersionedChildStructure
	// Parent GROUP OF ENTITies to which this member assigns service  -  If given by context, can be omitted.
	GroupRef *VersionOfObjectRefStructure `xml:"GroupRef,omitempty" json:"GroupRef,omitempty"`
	// Reference to a member of the group.
	MemberObjectRef VersionOfObjectRefStructure `xml:"MemberObjectRef" json:"MemberObjectRef"`
}

// GroupConstraintMemberVersionedChildStructure represents the GroupConstraintMember_VersionedChildStructure element
// Type for a Group of Entities Constraint Member. Specifies an allowed class to include in a group.
type GroupConstraintMemberVersionedChildStructure struct {
	VersionedChildStructure
	// Reference to a PUPOSE OF GROUPING  to which this member belongs.  If given by context does not need to be specified.
	PurposeOfGroupingRef *PurposeOfGroupingRefStructure `xml:"PurposeOfGroupingRef,omitempty" json:"PurposeOfGroupingRef,omitempty"`
	// Allowed Class of Entity.
	MemberClassRef ClassRefStructure `xml:"MemberClassRef" json:"MemberClassRef"`
	// Allowed type of Entity.
	MemberTypeOfValueRef *TypeOfValueRefStructure `xml:"MemberTypeOfValueRef,omitempty" json:"MemberTypeOfValueRef,omitempty"`
}

// GroupOfEntities represents the GroupOfEntities element
// A grouping of ENTITies which will be commonly referenced for a specific purpose.
type GroupOfEntities struct {
	GroupOfEntitiesVersionStructure
}

// GeneralGroupOfEntities represents the GeneralGroupOfEntities element
// A grouping of ENTITies which will be commonly referenced for a specific purpose.
type GeneralGroupOfEntities struct {
	GeneralGroupOfEntitiesVersionStructure
}

// PurposeOfGrouping represents the PurposeOfGrouping element
// Functional purpose for which GROUPs of elements are defined. The PURPOSE OF GROUPING may be restricted to one or more types of the given object.
type PurposeOfGrouping struct {
	PurposeOfGroupingValueStructure
}

// AbstractGroupMember represents the AbstractGroupMember element
// Abstract member of a GROUP OF ENTITY MEMBERs.
type AbstractGroupMember struct {
	AbstractGroupMemberVersionedChildStructure
	Description interface{} `xml:"Description,omitempty" json:"Description,omitempty"`
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// GroupMember represents the GroupMember element
// General purpose member of a GROUP OF ENTITies.
type GroupMember struct {
	GroupMemberVersionedChildStructure
}

// GroupConstraintMember represents the GroupConstraintMember element
// Specifies a member of a set.
type GroupConstraintMember struct {
	GroupConstraintMemberVersionedChildStructure
}

// DayTypesInFrameRelStructure represents the dayTypesInFrame_RelStructure element
// Type for containment in frame of DAY TYPEs.
type DayTypesInFrameRelStructure struct {
	ContainmentAggregationStructure
	FareDayType []FareDayType `xml:"FareDayType,omitempty" json:"FareDayType,omitempty"`
	OrganisationDayType []OrganisationDayType `xml:"OrganisationDayType,omitempty" json:"OrganisationDayType,omitempty"`
	DayType []DayType `xml:"DayType,omitempty" json:"DayType,omitempty"`
}

// TimebandsInFrameRelStructure represents the timebandsInFrame_RelStructure element
// Type for containment in frame of TIME BANDs.
type TimebandsInFrameRelStructure struct {
	ContainmentAggregationStructure
	Timeband []Timeband `xml:"Timeband" json:"Timeband"`
}

// GroupOfTimebandsInFrameRelStructure represents the groupOfTimebandsInFrame_RelStructure element
// Type for containment in frame of  GROUP OF TIME BANDs.
type GroupOfTimebandsInFrameRelStructure struct {
	ContainmentAggregationStructure
	GroupOfTimebands []GroupOfTimebands `xml:"GroupOfTimebands" json:"GroupOfTimebands"`
}

// DayTypesRelStructure represents the dayTypes_RelStructure element
// Type for a list of DAY TYPEs.
type DayTypesRelStructure struct {
	ContainmentAggregationStructure
	FareDayTypeRef []FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef []DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	FareDayType []FareDayType `xml:"FareDayType,omitempty" json:"FareDayType,omitempty"`
	OrganisationDayType []OrganisationDayType `xml:"OrganisationDayType,omitempty" json:"OrganisationDayType,omitempty"`
	DayType []DayType `xml:"DayType,omitempty" json:"DayType,omitempty"`
}

// DayTypeVersionStructure represents the DayType_VersionStructure element
// Type for a DAY TYPE.
type DayTypeVersionStructure struct {
	DataManagedObjectStructure
	// Name of DAY TYPE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short name of DAY TYPE.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Description of DAY TYPE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Earliest time that day starts.
	EarliestTime *string `xml:"EarliestTime,omitempty" json:"EarliestTime,omitempty"`
	// Length of day. Used to work out Latest time that day runs to.
	DayLength *string `xml:"DayLength,omitempty" json:"DayLength,omitempty"`
	// Properties of the DAY TYPE.
	Properties *PropertiesOfDayRelStructure `xml:"properties,omitempty" json:"properties,omitempty"`
	// TIMEBANDs for the DAY TYPE.
	Timebands *TimebandsRelStructure `xml:"timebands,omitempty" json:"timebands,omitempty"`
}

// TimebandsRelStructure represents the timebands_RelStructure element
// Type for a list of TIMEBANDs.
type TimebandsRelStructure struct {
	ContainmentAggregationStructure
	TimebandRef []TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	// A period in a day, significant for some aspect of public transport, e.g. similar traffic conditions or fare category.
	Timeband []TimebandVersionedChildStructure `xml:"Timeband,omitempty" json:"Timeband,omitempty"`
}

// TimebandVersionedChildStructure represents the Timeband_VersionedChildStructure element
// Type for a TIMEBAND.
type TimebandVersionedChildStructure struct {
	DataManagedObjectStructure
	// Name of TIMEBAND.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// The (inclusive) start time.
	StartTime *string `xml:"StartTime,omitempty" json:"StartTime,omitempty"`
	// Event marking start of timeband, e.,g  , dusk +V1.2.2 dawn
	StartEvent *TimeOfDayEnumeration `xml:"StartEvent,omitempty" json:"StartEvent,omitempty"`
	// The (inclusive) end time.
	EndTime *string `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
	// Event marking start of timeband, e.,g  dawn, dusk. +V1.2.2 dawn
	EndEvent *TimeOfDayEnumeration `xml:"EndEvent,omitempty" json:"EndEvent,omitempty"`
	// Number of days after start time that end time is.
	DayOffset *int `xml:"DayOffset,omitempty" json:"DayOffset,omitempty"`
	// Interval from start at which TIME BAND ends. If omitted, the TIME BAND ends at the end of day.
	Duration *string `xml:"Duration,omitempty" json:"Duration,omitempty"`
}

// GroupOfTimebandsRelStructure represents the groupOfTimebands_RelStructure element
// Type for a list of GROUP OF TIMEBANDS.
type GroupOfTimebandsRelStructure struct {
	ContainmentAggregationStructure
	GroupOfTimebandsRef []GroupOfTimebandsRef `xml:"GroupOfTimebandsRef,omitempty" json:"GroupOfTimebandsRef,omitempty"`
	// A period in a day, significant for some aspect of public transport, e.g. similar traffic conditions or fare category.
	GroupOfTimebands []GroupOfTimebandsVersionedChildStructure `xml:"GroupOfTimebands,omitempty" json:"GroupOfTimebands,omitempty"`
}

// GroupOfTimebandsVersionedChildStructure represents the GroupOfTimebands_VersionedChildStructure element
// Type for a GROUP OF TIMEBANDS.
type GroupOfTimebandsVersionedChildStructure struct {
	GroupOfEntitiesVersionStructure
	// The (inclusive) start time.
	Timebands *TimebandRefsRelStructure `xml:"timebands,omitempty" json:"timebands,omitempty"`
}

// DayType represents the DayType element
// A type of day characterized by one or more properties which affect public transport operation. For example: weekday in school holidays.
type DayType struct {
	DayTypeVersionStructure
}

// Timeband represents the Timeband element
// A period in a day, significant for some aspect of public transport, e.g. similar traffic conditions or fare category.
type Timeband struct {
	TimebandVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// GroupOfTimebands represents the GroupOfTimebands element
// A period in a day, significant for some aspect of public transport, e.g. similar traffic conditions or fare category.
type GroupOfTimebands struct {
	GroupOfTimebandsVersionedChildStructure
}

// OperatingDaysInFrameRelStructure represents the operatingDaysInFrame_RelStructure element
// Type for containment in frame of OPERATING DAY.
type OperatingDaysInFrameRelStructure struct {
	ContainmentAggregationStructure
	OperatingDay []OperatingDay `xml:"OperatingDay" json:"OperatingDay"`
}

// OperatingPeriodsInFrameRelStructure represents the operatingPeriodsInFrame_RelStructure element
// Type for containment in frame of OPERATING PERIODs.
type OperatingPeriodsInFrameRelStructure struct {
	ContainmentAggregationStructure
	// An operating period.
	OperatingPeriod []OperatingPeriod `xml:"OperatingPeriod,omitempty" json:"OperatingPeriod,omitempty"`
	UicOperatingPeriod []UicOperatingPeriod `xml:"UicOperatingPeriod,omitempty" json:"UicOperatingPeriod,omitempty"`
}

// DayTypeAssignmentsInFrameRelStructure represents the dayTypeAssignmentsInFrame_RelStructure element
// Type for containment in frame of DAY TYPE ASSIGNMENTs.
type DayTypeAssignmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	DayTypeAssignment []DayTypeAssignment `xml:"DayTypeAssignment" json:"DayTypeAssignment"`
}

// ServiceCalendarVersionStructure represents the ServiceCalendar_VersionStructure element
// Type for a SERVICE CALENDAR.
type ServiceCalendarVersionStructure struct {
	DataManagedObjectStructure
	// Name of SERVIC CALENDAR.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name of SERVIC CALENDAR.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Start date of Calendar.
	FromDate *time.Time `xml:"FromDate,omitempty" json:"FromDate,omitempty"`
	// End date of SERVICE CALENDAR. Date is INCLUSIVE.
	ToDate *time.Time `xml:"ToDate,omitempty" json:"ToDate,omitempty"`
	// Earliest time that day starts. Default is 00:00
	EarliestTime *string `xml:"EarliestTime,omitempty" json:"EarliestTime,omitempty"`
	// Length of day. Used to work out latest time that day runs to. Default is 24hourse.
	DayLength *string `xml:"DayLength,omitempty" json:"DayLength,omitempty"`
	// Reusable DAY TYPE used in calendar.
	DayTypes *DayTypesRelStructure `xml:"dayTypes,omitempty" json:"dayTypes,omitempty"`
	// Reusable Time bands used in calendar.
	Timebands *TimebandsRelStructure `xml:"timebands,omitempty" json:"timebands,omitempty"`
	// Days found in Calendar between start and end date. Dates must fall between the start and end date of the calendar.  There is a day for every date in the calendar validity period. Days do not have to be explicitly declared if there is no additional information.
	OperatingDays *OperatingDaysRelStructure `xml:"operatingDays,omitempty" json:"operatingDays,omitempty"`
	// OPERATING PERIODs belonging to calendar. Named periods. Must fall within the overall validity period of the calendar.
	OperatingPeriods *OperatingPeriodsRelStructure `xml:"operatingPeriods,omitempty" json:"operatingPeriods,omitempty"`
	// Assignments of DAY TYPEs to specific OPERATING DAYs. The same DAY TYPE may be assigned to multiple Operating dates, and vice versa.
	DayTypeAssignments *DayTypeAssignmentsRelStructure `xml:"dayTypeAssignments,omitempty" json:"dayTypeAssignments,omitempty"`
}

// OperatingDaysRelStructure represents the operatingDays_RelStructure element
// Type for a list of OPERATING DAYs.
type OperatingDaysRelStructure struct {
	ContainmentAggregationStructure
	OperatingDayRef []OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	OperatingDay []OperatingDay `xml:"OperatingDay,omitempty" json:"OperatingDay,omitempty"`
}

// OperatingDayVersionStructure represents the OperatingDay_VersionStructure element
// Type for an OPERATING DAY.
type OperatingDayVersionStructure struct {
	DataManagedObjectStructure
	// Actual Date of OPERATING DAY. Unique within  SERVICE CALENDAR.
	CalendarDate time.Time `xml:"CalendarDate" json:"CalendarDate"`
	// Reference to parent  SERVICE CALENDAR. If given by context, does not need to be given.
	ServiceCalendarRef *ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	// Name of OPERATING DAY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short name of OPERATING DAY.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Day Number if different from Id.
	DayNumber *int `xml:"DayNumber,omitempty" json:"DayNumber,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Earliest time that day starts.
	EarliestTime *string `xml:"EarliestTime,omitempty" json:"EarliestTime,omitempty"`
	// Length of day. Used to work out Latest time that day runs to.
	DayLength *string `xml:"DayLength,omitempty" json:"DayLength,omitempty"`
}

// OperatingPeriodsRelStructure represents the operatingPeriods_RelStructure element
// Type for a list of OPERATING PERIODs.
type OperatingPeriodsRelStructure struct {
	ContainmentAggregationStructure
	UicOperatingPeriodRef []UicOperatingPeriodRef `xml:"UicOperatingPeriodRef,omitempty" json:"UicOperatingPeriodRef,omitempty"`
	OperatingPeriodRef []OperatingPeriodRef `xml:"OperatingPeriodRef,omitempty" json:"OperatingPeriodRef,omitempty"`
	// An Named operating period.
	OperatingPeriod []OperatingPeriod `xml:"OperatingPeriod,omitempty" json:"OperatingPeriod,omitempty"`
	UicOperatingPeriod []UicOperatingPeriod `xml:"UicOperatingPeriod,omitempty" json:"UicOperatingPeriod,omitempty"`
}

// OperatingPeriodVersionStructure represents the OperatingPeriod_VersionStructure element
// Type for an OPERATING PERIOD.
type OperatingPeriodVersionStructure struct {
	DataManagedObjectStructure
	// Reference to parent Calendar. If given by context, does not need to be given.
	ServiceCalendarRef *ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	// Name of  OPERATING PERIOD.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name  of  OPERATING PERIOD.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Start date of OPERATING PERIOD.
	FromOperatingDayRef *OperatingDayRefStructure `xml:"FromOperatingDayRef,omitempty" json:"FromOperatingDayRef,omitempty"`
	// Start date of OPERATING PERIOD.
	FromDate *time.Time `xml:"FromDate,omitempty" json:"FromDate,omitempty"`
	// End Date  of  OPERATING PERIOD.
	ToOperatingDayRef *OperatingDayRefStructure `xml:"ToOperatingDayRef,omitempty" json:"ToOperatingDayRef,omitempty"`
	// End date of OPERATING PERIOD. Date is INCLUSIVE.
	ToDate *time.Time `xml:"ToDate,omitempty" json:"ToDate,omitempty"`
	// Whether days of OPERATING PERIOD are all in a holiday.
	HolidayType []HolidayTypeEnumeration `xml:"HolidayType,omitempty" json:"HolidayType,omitempty"`
	// Season in which OPERATING PERIOD falls.
	Season []SeasonEnumeration `xml:"Season,omitempty" json:"Season,omitempty"`
}

// UicOperatingPeriodVersionStructure represents the UicOperatingPeriod_VersionStructure element
// Type for an OPERATING DAY.
type UicOperatingPeriodVersionStructure struct {
	OperatingPeriodVersionStructure
	// String of bits, one for each day in period: whether valid or not valid on the day. Normally there will be a bit for every day between start and end date. If bit is missing, assume available.
	ValidDayBits string `xml:"ValidDayBits" json:"ValidDayBits"`
}

// DayTypeAssignmentsRelStructure represents the dayTypeAssignments_RelStructure element
// Type for a list of  DAY TYPE ASSIGNMENT.
type DayTypeAssignmentsRelStructure struct {
	StrictContainmentAggregationStructure
	// An operating period.
	DayTypeAssignment []DayTypeAssignment `xml:"DayTypeAssignment" json:"DayTypeAssignment"`
}

// DayTypeAssignmentVersionStructure represents the DayTypeAssignment_VersionStructure element
// Type for a DAY TYPE ASSIGNMENT.
type DayTypeAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	// Reference to parent Calendar. If given by context does not need to be given.
	ServiceCalendarRef *ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	UicOperatingPeriodRef *UicOperatingPeriodRef `xml:"UicOperatingPeriodRef,omitempty" json:"UicOperatingPeriodRef,omitempty"`
	OperatingPeriodRef *OperatingPeriodRef `xml:"OperatingPeriodRef,omitempty" json:"OperatingPeriodRef,omitempty"`
	OperatingDayRef *OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	// Calendar date of assignment.
	Date *time.Time `xml:"Date,omitempty" json:"Date,omitempty"`
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	TimebandRef []TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	// Whether availabel on assigned day
	IsAvailable *bool `xml:"isAvailable,omitempty" json:"isAvailable,omitempty"`
}

// ServiceCalendar represents the ServiceCalendar element
// A SERVICE CALENDAR. A collection of DAY TYPE ASSIGNMENTs.
type ServiceCalendar struct {
	ServiceCalendarVersionStructure
}

// OperatingDay represents the OperatingDay element
// A day of public transport operation in a specific calendar. An OPERATING DAY may last more than 24 hours.
type OperatingDay struct {
	OperatingDayVersionStructure
}

// OperatingPeriod represents the OperatingPeriod element
// A continuous interval of time between two OPERATING DAYs which will be used to define validities.
type OperatingPeriod struct {
	OperatingPeriodVersionStructure
}

// UicOperatingPeriod represents the UicOperatingPeriod element
// An OPERATING PERIOD coded in UIC style as a bit string between two dates.
type UicOperatingPeriod struct {
	UicOperatingPeriodVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// DayTypeAssignment represents the DayTypeAssignment element
// Associates a DAY TYPE with an OPERATING DAY within a specific Calendar. A specification of a particular DAY TYPE which will be valid during a TIME BAND on an OPERATING DAY.
type DayTypeAssignment struct {
	DayTypeAssignmentVersionStructure
}

// AvailabilityConditionsRelStructure represents the availabilityConditions_RelStructure element
// A collection of one or more AVAILABILITY CONDITIONs.
type AvailabilityConditionsRelStructure struct {
	ContainmentAggregationStructure
	AvailabilityConditionRef []AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	AvailabilityCondition []AvailabilityCondition `xml:"AvailabilityCondition,omitempty" json:"AvailabilityCondition,omitempty"`
	// OPTIMISATION: Simple version  of an AVAILABILITY CONDITION    Comprises a simple period and DAY TYPE.
	ValidDuring []ValidDuring `xml:"ValidDuring,omitempty" json:"ValidDuring,omitempty"`
	ValidBetween []ValidBetween `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
}

// ContainedAvailabilityConditionsRelStructure represents the containedAvailabilityConditions_RelStructure element
// A collection of one or more AVAILABILITY CONDITIONs.
type ContainedAvailabilityConditionsRelStructure struct {
	ContainmentAggregationStructure
	AvailabilityCondition []AvailabilityCondition `xml:"AvailabilityCondition" json:"AvailabilityCondition"`
}

// AvailabilityConditionVersionStructure represents the AvailabilityCondition_VersionStructure element
// Type for an AVAILABILITY CONDITION.
type AvailabilityConditionVersionStructure struct {
	ValidBetweenVersionStructure
	// Whether condition makes resource available or not available. Default is available.
	IsAvailable *bool `xml:"IsAvailable,omitempty" json:"IsAvailable,omitempty"`
	// DAY TYPEs for AVAILABILITY CONDITION.
	DayTypes *DayTypesRelStructure `xml:"dayTypes,omitempty" json:"dayTypes,omitempty"`
	// For UIC style encoding of day types String of bits, one for each day in period: whether valid or not valid on the day.  Normally there will be a bit for every day between start and end date.  If bit is missing, assume available.
	ValidDayBits *string `xml:"ValidDayBits,omitempty" json:"ValidDayBits,omitempty"`
	// TIME BANDs for AVAILABILITY CONDITION.
	Timebands *TimebandsRelStructure `xml:"timebands,omitempty" json:"timebands,omitempty"`
	// OPERATING DAYs for AVAILABILITY CONDITION.
	OperatingDays *OperatingDaysRelStructure `xml:"operatingDays,omitempty" json:"operatingDays,omitempty"`
}

// ValidDuringVersionStructure represents the ValidDuring_VersionStructure element
// Type for a  SIMPLE TIMEBAND AVAILABILITY CONDITION.
type ValidDuringVersionStructure struct {
	ValidBetweenVersionStructure
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	// Days of the week.
	DaysOfWeek *DayOfWeekEnumeration `xml:"DaysOfWeek,omitempty" json:"DaysOfWeek,omitempty"`
	// OPTIMIZATION week matrix Y | N,   NNNNNNN.
	Days *string `xml:"Days,omitempty" json:"Days,omitempty"`
	// TIME BANDs for AVAILABILITY CONDITION.
	Timebands *TimebandsRelStructure `xml:"timebands,omitempty" json:"timebands,omitempty"`
}

// AvailabilityCondition represents the AvailabilityCondition element
// VALIDITY CONDITION stated in terms of DAY TYPES and  PROPERTIES OF DAYs.
type AvailabilityCondition struct {
	AvailabilityConditionVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// ValidDuring represents the ValidDuring element
// OPTIMISATION: Sversion  of an AVAILABILITY CONDITION    Comprises a simple period and DAY TYPE.
type ValidDuring struct {
	ValidDuringVersionStructure
	// A list of alternative Key values for an element.
	KeyList interface{} `xml:"keyList,omitempty" json:"keyList,omitempty"`
	Extensions interface{} `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// SimpleAvailabilityCondition represents the SimpleAvailabilityCondition element
// Simple version of an  AVAILABILITY CONDITION used in order to characterise a given VERSION of a VERSION FRAME.  Comprises a simple period and DAY TYPE.
type SimpleAvailabilityCondition struct {
	ValidDuringVersionStructure
}

// OutputDetailEnumeration represents the OutputDetailEnumeration enumeration
// Detail Levels for Network Request.
type OutputDetailEnumeration string

const (
	// OutputDetailEnumerationAll represents All
	OutputDetailEnumerationAll OutputDetailEnumeration = "All"
	// OutputDetailEnumerationBasic represents Basic
	OutputDetailEnumerationBasic OutputDetailEnumeration = "Basic"
	// OutputDetailEnumerationNoGeometry represents NoGeometry
	OutputDetailEnumerationNoGeometry OutputDetailEnumeration = "NoGeometry"
	// OutputDetailEnumerationXref represents Xref
	OutputDetailEnumerationXref OutputDetailEnumeration = "Xref"
	// OutputDetailEnumerationAllWithXref represents AllWithXref
	OutputDetailEnumerationAllWithXref OutputDetailEnumeration = "AllWithXref"
)

// TopicStructure represents the TopicStructure element
// Type for abstract Request filter.
type TopicStructure struct {
	// Description of what filter does.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Data Sources to include. If more than one source is specified it is logically ORed with the others.
	Sources *DataSourcesRelStructure `xml:"sources,omitempty" json:"sources,omitempty"`
	CodespaceRef *CodespaceRef `xml:"CodespaceRef,omitempty" json:"CodespaceRef,omitempty"`
	ResponsibilityRoleAssignment *ResponsibilityRoleAssignment `xml:"ResponsibilityRoleAssignment,omitempty" json:"ResponsibilityRoleAssignment,omitempty"`
}

// ObjectFilterByValueStructure represents the ObjectFilterByValueStructure element
// Specifies values to filter by reference value, rather than frame.
type ObjectFilterByValueStructure struct {
	LayerRef *LayerRef `xml:"LayerRef,omitempty" json:"LayerRef,omitempty"`
	// Area containing objects to be returned.
	BoundingBox *BoundingBoxStructure `xml:"BoundingBox,omitempty" json:"BoundingBox,omitempty"`
	// Specifies objects to return Use REF with specific value to identify an object.  Use REF with blank value to specify all object of the object type.
	ObjectReferences *ObjectReferences `xml:"objectReferences,omitempty" json:"objectReferences,omitempty"`
}

// ObjectReferences represents the objectReferences element
type ObjectReferences struct {
	TripLegRef []TripLegRef `xml:"TripLegRef,omitempty" json:"TripLegRef,omitempty"`
	IndividualPassengerInfoRef []IndividualPassengerInfoRef `xml:"IndividualPassengerInfoRef,omitempty" json:"IndividualPassengerInfoRef,omitempty"`
	VehiclePoolingDriverInfoRef []VehiclePoolingDriverInfoRef `xml:"VehiclePoolingDriverInfoRef,omitempty" json:"VehiclePoolingDriverInfoRef,omitempty"`
	IndividualTravellerRef []IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	ServiceAccessCodeRef []ServiceAccessCodeRef `xml:"ServiceAccessCodeRef,omitempty" json:"ServiceAccessCodeRef,omitempty"`
	TravelDocumentRef []TravelDocumentRef `xml:"TravelDocumentRef,omitempty" json:"TravelDocumentRef,omitempty"`
	RepeatedTripFareRequestRef []RepeatedTripFareRequestRef `xml:"RepeatedTripFareRequestRef,omitempty" json:"RepeatedTripFareRequestRef,omitempty"`
	SingleTripFareRequestRef []SingleTripFareRequestRef `xml:"SingleTripFareRequestRef,omitempty" json:"SingleTripFareRequestRef,omitempty"`
	FareRequestRef []FareRequestRef `xml:"FareRequestRef,omitempty" json:"FareRequestRef,omitempty"`
	StopFinderRequestRef []StopFinderRequestRef `xml:"StopFinderRequestRef,omitempty" json:"StopFinderRequestRef,omitempty"`
	StopEventRequestRef []StopEventRequestRef `xml:"StopEventRequestRef,omitempty" json:"StopEventRequestRef,omitempty"`
	ScheduleRequestRef []ScheduleRequestRef `xml:"ScheduleRequestRef,omitempty" json:"ScheduleRequestRef,omitempty"`
	TripPlanRequestRef []TripPlanRequestRef `xml:"TripPlanRequestRef,omitempty" json:"TripPlanRequestRef,omitempty"`
	CustomerPaymentMeansRef []CustomerPaymentMeansRef `xml:"CustomerPaymentMeansRef,omitempty" json:"CustomerPaymentMeansRef,omitempty"`
	MediumApplicationInstanceRef []MediumApplicationInstanceRef `xml:"MediumApplicationInstanceRef,omitempty" json:"MediumApplicationInstanceRef,omitempty"`
	MobileDeviceRef []MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef []EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef []SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	ResidentialQualificationEligibilityRef []ResidentialQualificationEligibilityRef `xml:"ResidentialQualificationEligibilityRef,omitempty" json:"ResidentialQualificationEligibilityRef,omitempty"`
	CommercialProfileEligibilityRef []CommercialProfileEligibilityRef `xml:"CommercialProfileEligibilityRef,omitempty" json:"CommercialProfileEligibilityRef,omitempty"`
	UserProfileEligibilityRef []UserProfileEligibilityRef `xml:"UserProfileEligibilityRef,omitempty" json:"UserProfileEligibilityRef,omitempty"`
	CustomerAccountRef []CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	FareContractRef []FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
	CustomerRef []CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	VehicleTypeZoneRestrictionRef []VehicleTypeZoneRestrictionRef `xml:"VehicleTypeZoneRestrictionRef,omitempty" json:"VehicleTypeZoneRestrictionRef,omitempty"`
	StartTimeAtStopPointRef []StartTimeAtStopPointRef `xml:"StartTimeAtStopPointRef,omitempty" json:"StartTimeAtStopPointRef,omitempty"`
	ResidentialQualificationRef []ResidentialQualificationRef `xml:"ResidentialQualificationRef,omitempty" json:"ResidentialQualificationRef,omitempty"`
	TypeOfConcessionRef []TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	TypeOfUsageParameterRef []TypeOfUsageParameterRef `xml:"TypeOfUsageParameterRef,omitempty" json:"TypeOfUsageParameterRef,omitempty"`
	TariffObjectRef []TariffObjectRef `xml:"TariffObjectRef,omitempty" json:"TariffObjectRef,omitempty"`
	ParkingTariffRef []ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef []TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	TypeOfFareTableRef []TypeOfFareTableRef `xml:"TypeOfFareTableRef,omitempty" json:"TypeOfFareTableRef,omitempty"`
	FareTableRowRef []FareTableRowRef `xml:"FareTableRowRef,omitempty" json:"FareTableRowRef,omitempty"`
	FareTableColumnRef []FareTableColumnRef `xml:"FareTableColumnRef,omitempty" json:"FareTableColumnRef,omitempty"`
	TimeUnitRef []TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	GeographicalUnitRef []GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	ControllableElementInSequenceRef []ControllableElementInSequenceRef `xml:"ControllableElementInSequenceRef,omitempty" json:"ControllableElementInSequenceRef,omitempty"`
	FareStructureElementInSequenceRef []FareStructureElementInSequenceRef `xml:"FareStructureElementInSequenceRef,omitempty" json:"FareStructureElementInSequenceRef,omitempty"`
	AccessRightInProductRef []AccessRightInProductRef `xml:"AccessRightInProductRef,omitempty" json:"AccessRightInProductRef,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	CustomerPurchasePackagePriceRef []CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef []ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef []TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef []TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef []QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef []ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef []ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef []GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef []GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef []UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef []SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef []SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef []DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef []FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef []FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef []CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef []FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef []FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CustomerPurchasePackageElementRef []CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
	CustomerPurchasePackageRef []CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	ControllableElementRef []ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	ValidableElementRef []ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	AdditionalDriverOptionRef []AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef []RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef []RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef []SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef []SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef []MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef []InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef []FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef []SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef []UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef []StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef []RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef []RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef []LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef []EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef []EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef []EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef []GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef []CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef []VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef []CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef []UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef []ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef []SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef []PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef []ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef []TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef []ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef []RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef []ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef []ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef []CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef []ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef []BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef []PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
	SeriesConstraintRef []SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	SalesOfferPackageElementRef []SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	SalesOfferPackageRef []SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	DistanceMatrixElementInverseRef []DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
	DistanceMatrixElementRef []DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	FareStructureElementRef []FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	FulfilmentMethodRef []FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	CappingRuleRef []CappingRuleRef `xml:"CappingRuleRef,omitempty" json:"CappingRuleRef,omitempty"`
	EntitlementProductRef []EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef []SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef []PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef []AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef []UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef []ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef []CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef []SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef []FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef []ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	TimeIntervalRef []TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	GeographicalIntervalRef []GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	ParkingChargeBandRef []ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef []TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	FareQuotaFactorRef []FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef []FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef []QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	GeographicalStructureFactorRef []GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	PriceableObjectRef []PriceableObjectRef `xml:"PriceableObjectRef,omitempty" json:"PriceableObjectRef,omitempty"`
	MonthValidityOffsetRef []MonthValidityOffsetRef `xml:"MonthValidityOffsetRef,omitempty" json:"MonthValidityOffsetRef,omitempty"`
	LimitingRuleRef []LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef []DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef []PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	PricingServiceRef []PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	RoundingStepRef []RoundingStepRef `xml:"RoundingStepRef,omitempty" json:"RoundingStepRef,omitempty"`
	RoundingRef []RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	PricingParameterSetRef []PricingParameterSetRef `xml:"PricingParameterSetRef,omitempty" json:"PricingParameterSetRef,omitempty"`
	FlexibleServicePropertiesRef []FlexibleServicePropertiesRef `xml:"FlexibleServicePropertiesRef,omitempty" json:"FlexibleServicePropertiesRef,omitempty"`
	DriverTripTimeRef []DriverTripTimeRef `xml:"DriverTripTimeRef,omitempty" json:"DriverTripTimeRef,omitempty"`
	DriverTripRef []DriverTripRef `xml:"DriverTripRef,omitempty" json:"DriverTripRef,omitempty"`
	DutyPartRef []DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
	AccountableElementRef []AccountableElementRef `xml:"AccountableElementRef,omitempty" json:"AccountableElementRef,omitempty"`
	DutyRef []DutyRef `xml:"DutyRef,omitempty" json:"DutyRef,omitempty"`
	ReliefOpportunityRef []ReliefOpportunityRef `xml:"ReliefOpportunityRef,omitempty" json:"ReliefOpportunityRef,omitempty"`
	CourseOfJourneysRef []CourseOfJourneysRef `xml:"CourseOfJourneysRef,omitempty" json:"CourseOfJourneysRef,omitempty"`
	DriverRef []DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
	VehicleServicePartRef []VehicleServicePartRef `xml:"VehicleServicePartRef,omitempty" json:"VehicleServicePartRef,omitempty"`
	VehicleServiceRef []VehicleServiceRef `xml:"VehicleServiceRef,omitempty" json:"VehicleServiceRef,omitempty"`
	CompoundBlockRef []CompoundBlockRef `xml:"CompoundBlockRef,omitempty" json:"CompoundBlockRef,omitempty"`
	TrainBlockPartRef []TrainBlockPartRef `xml:"TrainBlockPartRef,omitempty" json:"TrainBlockPartRef,omitempty"`
	BlockPartRef []BlockPartRef `xml:"BlockPartRef,omitempty" json:"BlockPartRef,omitempty"`
	TrainBlockRef []TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef []BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	JourneyPartCoupleRef []JourneyPartCoupleRef `xml:"JourneyPartCoupleRef,omitempty" json:"JourneyPartCoupleRef,omitempty"`
	CoupledJourneyRef []CoupledJourneyRef `xml:"CoupledJourneyRef,omitempty" json:"CoupledJourneyRef,omitempty"`
	JourneyPartRef []JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	TimetabledPassingTimeRef []TimetabledPassingTimeRef `xml:"TimetabledPassingTimeRef,omitempty" json:"TimetabledPassingTimeRef,omitempty"`
	EstimatedPassingTimeRef []EstimatedPassingTimeRef `xml:"EstimatedPassingTimeRef,omitempty" json:"EstimatedPassingTimeRef,omitempty"`
	ObservedPassingTimeRef []ObservedPassingTimeRef `xml:"ObservedPassingTimeRef,omitempty" json:"ObservedPassingTimeRef,omitempty"`
	TargetPassingTimeRef []TargetPassingTimeRef `xml:"TargetPassingTimeRef,omitempty" json:"TargetPassingTimeRef,omitempty"`
	PassingTimeRef []PassingTimeRef `xml:"PassingTimeRef,omitempty" json:"PassingTimeRef,omitempty"`
	InterchangeRuleTimingRef []InterchangeRuleTimingRef `xml:"InterchangeRuleTimingRef,omitempty" json:"InterchangeRuleTimingRef,omitempty"`
	InterchangeRuleRef []InterchangeRuleRef `xml:"InterchangeRuleRef,omitempty" json:"InterchangeRuleRef,omitempty"`
	ServiceJourneyPatternInterchangeRef []ServiceJourneyPatternInterchangeRef `xml:"ServiceJourneyPatternInterchangeRef,omitempty" json:"ServiceJourneyPatternInterchangeRef,omitempty"`
	ServiceJourneyInterchangeRef []ServiceJourneyInterchangeRef `xml:"ServiceJourneyInterchangeRef,omitempty" json:"ServiceJourneyInterchangeRef,omitempty"`
	DefaultInterchangeRef []DefaultInterchangeRef `xml:"DefaultInterchangeRef,omitempty" json:"DefaultInterchangeRef,omitempty"`
	InterchangeRef []InterchangeRef `xml:"InterchangeRef,omitempty" json:"InterchangeRef,omitempty"`
	JourneyMeetingRef []JourneyMeetingRef `xml:"JourneyMeetingRef,omitempty" json:"JourneyMeetingRef,omitempty"`
	SupplyContractRef []SupplyContractRef `xml:"SupplyContractRef,omitempty" json:"SupplyContractRef,omitempty"`
	TrainNumberRef []TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	RoutingConstraintZoneRef []RoutingConstraintZoneRef `xml:"RoutingConstraintZoneRef,omitempty" json:"RoutingConstraintZoneRef,omitempty"`
	VehiclePositionAlignmentRef []VehiclePositionAlignmentRef `xml:"VehiclePositionAlignmentRef,omitempty" json:"VehiclePositionAlignmentRef,omitempty"`
	VehicleQuayAlignmentRef []VehicleQuayAlignmentRef `xml:"VehicleQuayAlignmentRef,omitempty" json:"VehicleQuayAlignmentRef,omitempty"`
	LogicalDisplayRef []LogicalDisplayRef `xml:"LogicalDisplayRef,omitempty" json:"LogicalDisplayRef,omitempty"`
	ParkingPropertiesRef []ParkingPropertiesRef `xml:"ParkingPropertiesRef,omitempty" json:"ParkingPropertiesRef,omitempty"`
	ParkingCapacityRef []ParkingCapacityRef `xml:"ParkingCapacityRef,omitempty" json:"ParkingCapacityRef,omitempty"`
	LineNetworkRef []LineNetworkRef `xml:"LineNetworkRef,omitempty" json:"LineNetworkRef,omitempty"`
	RouteInstructionRef []RouteInstructionRef `xml:"RouteInstructionRef,omitempty" json:"RouteInstructionRef,omitempty"`
	FlexiblePointPropertiesRef []FlexiblePointPropertiesRef `xml:"FlexiblePointPropertiesRef,omitempty" json:"FlexiblePointPropertiesRef,omitempty"`
	FlexibleLinkPropertiesRef []FlexibleLinkPropertiesRef `xml:"FlexibleLinkPropertiesRef,omitempty" json:"FlexibleLinkPropertiesRef,omitempty"`
	TimeDemandProfileRef []TimeDemandProfileRef `xml:"TimeDemandProfileRef,omitempty" json:"TimeDemandProfileRef,omitempty"`
	TimeDemandTypeRef []TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	VehicleTypePreferenceRef []VehicleTypePreferenceRef `xml:"VehicleTypePreferenceRef,omitempty" json:"VehicleTypePreferenceRef,omitempty"`
	JourneyPatternHeadwayRef []JourneyPatternHeadwayRef `xml:"JourneyPatternHeadwayRef,omitempty" json:"JourneyPatternHeadwayRef,omitempty"`
	JourneyPatternLayoverRef []JourneyPatternLayoverRef `xml:"JourneyPatternLayoverRef,omitempty" json:"JourneyPatternLayoverRef,omitempty"`
	JourneyPatternRunTimeRef []JourneyPatternRunTimeRef `xml:"JourneyPatternRunTimeRef,omitempty" json:"JourneyPatternRunTimeRef,omitempty"`
	JourneyPatternWaitTimeRef []JourneyPatternWaitTimeRef `xml:"JourneyPatternWaitTimeRef,omitempty" json:"JourneyPatternWaitTimeRef,omitempty"`
	DefaultServiceJourneyTimeRef []DefaultServiceJourneyTimeRef `xml:"DefaultServiceJourneyTimeRef,omitempty" json:"DefaultServiceJourneyTimeRef,omitempty"`
	DefaultDeadRunRunTimeRef []DefaultDeadRunRunTimeRef `xml:"DefaultDeadRunRunTimeRef,omitempty" json:"DefaultDeadRunRunTimeRef,omitempty"`
	TurnaroundTimeLimitTimeRef []TurnaroundTimeLimitTimeRef `xml:"TurnaroundTimeLimitTimeRef,omitempty" json:"TurnaroundTimeLimitTimeRef,omitempty"`
	JourneyTimingRef []JourneyTimingRef `xml:"JourneyTimingRef,omitempty" json:"JourneyTimingRef,omitempty"`
	CrewBaseRef []CrewBaseRef `xml:"CrewBaseRef,omitempty" json:"CrewBaseRef,omitempty"`
	TrainComponentRef []TrainComponentRef `xml:"TrainComponentRef,omitempty" json:"TrainComponentRef,omitempty"`
	TrainElementRef []TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	TrainInCompoundTrainRef []TrainInCompoundTrainRef `xml:"TrainInCompoundTrainRef,omitempty" json:"TrainInCompoundTrainRef,omitempty"`
	PassengerSeatRef []PassengerSeatRef `xml:"PassengerSeatRef,omitempty" json:"PassengerSeatRef,omitempty"`
	TravelDocumentSecurityListingRef []TravelDocumentSecurityListingRef `xml:"TravelDocumentSecurityListingRef,omitempty" json:"TravelDocumentSecurityListingRef,omitempty"`
	MediumAccessDeviceSecurityListingRef []MediumAccessDeviceSecurityListingRef `xml:"MediumAccessDeviceSecurityListingRef,omitempty" json:"MediumAccessDeviceSecurityListingRef,omitempty"`
	RetailDeviceSecurityListingRef []RetailDeviceSecurityListingRef `xml:"RetailDeviceSecurityListingRef,omitempty" json:"RetailDeviceSecurityListingRef,omitempty"`
	CustomerAccountSecurityListingRef []CustomerAccountSecurityListingRef `xml:"CustomerAccountSecurityListingRef,omitempty" json:"CustomerAccountSecurityListingRef,omitempty"`
	FareContractSecurityListingRef []FareContractSecurityListingRef `xml:"FareContractSecurityListingRef,omitempty" json:"FareContractSecurityListingRef,omitempty"`
	CustomerSecurityListingRef []CustomerSecurityListingRef `xml:"CustomerSecurityListingRef,omitempty" json:"CustomerSecurityListingRef,omitempty"`
	WhitelistRef []WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	BlacklistRef []BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
	SchematicMapMemberRef []SchematicMapMemberRef `xml:"SchematicMapMemberRef,omitempty" json:"SchematicMapMemberRef,omitempty"`
	SchematicMapRef []SchematicMapRef `xml:"SchematicMapRef,omitempty" json:"SchematicMapRef,omitempty"`
	CycleModelProfileRef []CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef []CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
	ModeRestrictionAssessmentRef []ModeRestrictionAssessmentRef `xml:"ModeRestrictionAssessmentRef,omitempty" json:"ModeRestrictionAssessmentRef,omitempty"`
	DeliveryVariantRef []DeliveryVariantRef `xml:"DeliveryVariantRef,omitempty" json:"DeliveryVariantRef,omitempty"`
	NoticeRef []NoticeRef `xml:"NoticeRef,omitempty" json:"NoticeRef,omitempty"`
	VehicleProfileRef []VehicleProfileRef `xml:"VehicleProfileRef,omitempty" json:"VehicleProfileRef,omitempty"`
	VehicleEquipmentProfileMemberRef []VehicleEquipmentProfileMemberRef `xml:"VehicleEquipmentProfileMemberRef,omitempty" json:"VehicleEquipmentProfileMemberRef,omitempty"`
	ChargingEquipmentProfileRef []ChargingEquipmentProfileRef `xml:"ChargingEquipmentProfileRef,omitempty" json:"ChargingEquipmentProfileRef,omitempty"`
	VehicleEquipmentProfileRef []VehicleEquipmentProfileRef `xml:"VehicleEquipmentProfileRef,omitempty" json:"VehicleEquipmentProfileRef,omitempty"`
	VehicleModelRef []VehicleModelRef `xml:"VehicleModelRef,omitempty" json:"VehicleModelRef,omitempty"`
	VehicleRef []VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	PassengerCapacityRef []PassengerCapacityRef `xml:"PassengerCapacityRef,omitempty" json:"PassengerCapacityRef,omitempty"`
	FacilityRequirementRef []FacilityRequirementRef `xml:"FacilityRequirementRef,omitempty" json:"FacilityRequirementRef,omitempty"`
	VehicleManoeuvringRequirementRef []VehicleManoeuvringRequirementRef `xml:"VehicleManoeuvringRequirementRef,omitempty" json:"VehicleManoeuvringRequirementRef,omitempty"`
	PassengerCarryingRequirementRef []PassengerCarryingRequirementRef `xml:"PassengerCarryingRequirementRef,omitempty" json:"PassengerCarryingRequirementRef,omitempty"`
	VehicleRequirementRef []VehicleRequirementRef `xml:"VehicleRequirementRef,omitempty" json:"VehicleRequirementRef,omitempty"`
	SimpleVehicleTypeRef []SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef []CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef []TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef []VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef []TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	OnboardStayRef []OnboardStayRef `xml:"OnboardStayRef,omitempty" json:"OnboardStayRef,omitempty"`
	AccommodationRef []AccommodationRef `xml:"AccommodationRef,omitempty" json:"AccommodationRef,omitempty"`
	ServiceFacilitySetRef []ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	SiteFacilitySetRef []SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	FacilitySetRef []FacilitySetRef `xml:"FacilitySetRef,omitempty" json:"FacilitySetRef,omitempty"`
	FacilityRef []FacilityRef `xml:"FacilityRef,omitempty" json:"FacilityRef,omitempty"`
	OperatingDepartmentRef []OperatingDepartmentRef `xml:"OperatingDepartmentRef,omitempty" json:"OperatingDepartmentRef,omitempty"`
	OperationalContextRef []OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	LevelRef []LevelRef `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	ModeRef []ModeRef `xml:"ModeRef,omitempty" json:"ModeRef,omitempty"`
	SubmodeRef []SubmodeRef `xml:"SubmodeRef,omitempty" json:"SubmodeRef,omitempty"`
	OpenTransportModeRef []OpenTransportModeRef `xml:"OpenTransportModeRef,omitempty" json:"OpenTransportModeRef,omitempty"`
	TopographicProjectionRef []TopographicProjectionRef `xml:"TopographicProjectionRef,omitempty" json:"TopographicProjectionRef,omitempty"`
	ComplexFeatureProjectionRef []ComplexFeatureProjectionRef `xml:"ComplexFeatureProjectionRef,omitempty" json:"ComplexFeatureProjectionRef,omitempty"`
	LinkSequenceProjectionRef []LinkSequenceProjectionRef `xml:"LinkSequenceProjectionRef,omitempty" json:"LinkSequenceProjectionRef,omitempty"`
	ZoneProjectionRef []ZoneProjectionRef `xml:"ZoneProjectionRef,omitempty" json:"ZoneProjectionRef,omitempty"`
	LinkProjectionRef []LinkProjectionRef `xml:"LinkProjectionRef,omitempty" json:"LinkProjectionRef,omitempty"`
	PointProjectionRef []PointProjectionRef `xml:"PointProjectionRef,omitempty" json:"PointProjectionRef,omitempty"`
	TripRef []TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef []TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef []SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef []SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef []DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef []DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef []SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef []TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef []ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef []DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef []VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef []ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef []ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef []DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef []JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef []TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef []NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef []RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	LinkSequenceRef []LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
	ContactRef []ContactRef `xml:"ContactRef,omitempty" json:"ContactRef,omitempty"`
	SalesTransactionRef []SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	OfferedTravelSpecificationRef []OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	RequestedTravelSpecificationRef []RequestedTravelSpecificationRef `xml:"RequestedTravelSpecificationRef,omitempty" json:"RequestedTravelSpecificationRef,omitempty"`
	TravelSpecificationRef []TravelSpecificationRef `xml:"TravelSpecificationRef,omitempty" json:"TravelSpecificationRef,omitempty"`
	FareContractEntryRef []FareContractEntryRef `xml:"FareContractEntryRef,omitempty" json:"FareContractEntryRef,omitempty"`
	LogEntryRef []LogEntryRef `xml:"LogEntryRef,omitempty" json:"LogEntryRef,omitempty"`
	AlternativeNameRef []AlternativeNameRef `xml:"AlternativeNameRef,omitempty" json:"AlternativeNameRef,omitempty"`
	TimebandRef []TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	FareDayTypeRef []FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef []DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	DefaultConnectionRef []DefaultConnectionRef `xml:"DefaultConnectionRef,omitempty" json:"DefaultConnectionRef,omitempty"`
	SiteConnectionRef []SiteConnectionRef `xml:"SiteConnectionRef,omitempty" json:"SiteConnectionRef,omitempty"`
	ConnectionRef []ConnectionRef `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	AccessRef []AccessRef `xml:"AccessRef,omitempty" json:"AccessRef,omitempty"`
	HailAndRideAreaRef []HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef []FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef []FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
	FlexibleStopPlaceRef []FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	PathJunctionRef []PathJunctionRef `xml:"PathJunctionRef,omitempty" json:"PathJunctionRef,omitempty"`
	EquipmentPlaceRef []EquipmentPlaceRef `xml:"EquipmentPlaceRef,omitempty" json:"EquipmentPlaceRef,omitempty"`
	EquipmentPositionRef []EquipmentPositionRef `xml:"EquipmentPositionRef,omitempty" json:"EquipmentPositionRef,omitempty"`
	TopographicPlaceRef []TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	VehiclePoolingMeetingPlaceRef []VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef []VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	GarageRef []GarageRef `xml:"GarageRef,omitempty" json:"GarageRef,omitempty"`
	VehicleStoppingPositionRef []VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef []VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef []BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef []AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef []TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef []QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef []StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef []VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef []MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef []VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef []ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef []VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef []VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef []TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef []ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef []PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef []StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef []StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef []ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef []ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef []ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef []PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef []PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef []EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef []SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef []TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef []StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef []ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef []PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef []ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef []SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef []SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	AddressablePlaceRef []AddressablePlaceRef `xml:"AddressablePlaceRef,omitempty" json:"AddressablePlaceRef,omitempty"`
	PostalAddressRef []PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef []RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef []AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
	OnwardVehicleMeetingLinkRef []OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef []VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef []ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef []LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef []TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef []WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef []RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef []RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef []ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef []PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef []RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	VehicleMeetingPointRef []VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef []WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef []RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef []RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef []TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef []BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef []ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef []BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef []FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef []ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef []GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef []ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef []ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef []TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef []RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef []PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	UicOperatingPeriodRef []UicOperatingPeriodRef `xml:"UicOperatingPeriodRef,omitempty" json:"UicOperatingPeriodRef,omitempty"`
	OperatingPeriodRef []OperatingPeriodRef `xml:"OperatingPeriodRef,omitempty" json:"OperatingPeriodRef,omitempty"`
	OperatingDayRef []OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	ServiceCalendarRef []ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	AlternativeTextRef []AlternativeTextRef `xml:"AlternativeTextRef,omitempty" json:"AlternativeTextRef,omitempty"`
	AvailabilityConditionRef []AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	ValidityRuleParameterRef []ValidityRuleParameterRef `xml:"ValidityRuleParameterRef,omitempty" json:"ValidityRuleParameterRef,omitempty"`
	ValidityTriggerRef []ValidityTriggerRef `xml:"ValidityTriggerRef,omitempty" json:"ValidityTriggerRef,omitempty"`
	ValidityConditionRef []ValidityConditionRef `xml:"ValidityConditionRef,omitempty" json:"ValidityConditionRef,omitempty"`
	ResponsibilityRoleRef []ResponsibilityRoleRef `xml:"ResponsibilityRoleRef,omitempty" json:"ResponsibilityRoleRef,omitempty"`
	ControlCentreRef []ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	OrganisationalUnitRef []OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	DepartmentRef []DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
	OrganisationPartRef []OrganisationPartRef `xml:"OrganisationPartRef,omitempty" json:"OrganisationPartRef,omitempty"`
	AllAuthoritiesRef []AllAuthoritiesRef `xml:"AllAuthoritiesRef,omitempty" json:"AllAuthoritiesRef,omitempty"`
	AllOperatorsRef []AllOperatorsRef `xml:"AllOperatorsRef,omitempty" json:"AllOperatorsRef,omitempty"`
	AllPublicTransportOrganisationsRef []AllPublicTransportOrganisationsRef `xml:"AllPublicTransportOrganisationsRef,omitempty" json:"AllPublicTransportOrganisationsRef,omitempty"`
	AllTransportOrganisationsRef []AllTransportOrganisationsRef `xml:"AllTransportOrganisationsRef,omitempty" json:"AllTransportOrganisationsRef,omitempty"`
	AllOrganisationsRef []AllOrganisationsRef `xml:"AllOrganisationsRef,omitempty" json:"AllOrganisationsRef,omitempty"`
	RetailConsortiumRef []RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef []OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef []GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef []ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef []ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef []TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef []OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef []AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef []OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef []OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	ResponsibilitySetRef []ResponsibilitySetRef `xml:"ResponsibilitySetRef,omitempty" json:"ResponsibilitySetRef,omitempty"`
	DestinationDisplayVariantRef []DestinationDisplayVariantRef `xml:"DestinationDisplayVariantRef,omitempty" json:"DestinationDisplayVariantRef,omitempty"`
	DestinationDisplayRef []DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	AllowedLineDirectionRef []AllowedLineDirectionRef `xml:"AllowedLineDirectionRef,omitempty" json:"AllowedLineDirectionRef,omitempty"`
	FlexibleLineRef []FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef []LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	GroupOfCustomerPurchasePackagesRef []GroupOfCustomerPurchasePackagesRef `xml:"GroupOfCustomerPurchasePackagesRef,omitempty" json:"GroupOfCustomerPurchasePackagesRef,omitempty"`
	PoolOfVehiclesRef []PoolOfVehiclesRef `xml:"PoolOfVehiclesRef,omitempty" json:"PoolOfVehiclesRef,omitempty"`
	GroupOfSalesOfferPackagesRef []GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
	GroupOfDistanceMatrixElementsRef []GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfDistributionChannelsRef []GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	GroupOfSingleJourneysRef []GroupOfSingleJourneysRef `xml:"GroupOfSingleJourneysRef,omitempty" json:"GroupOfSingleJourneysRef,omitempty"`
	StandardFareTableRef []StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef []FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	PriceGroupRef []PriceGroupRef `xml:"PriceGroupRef,omitempty" json:"PriceGroupRef,omitempty"`
	RhythmicalJourneyGroupRef []RhythmicalJourneyGroupRef `xml:"RhythmicalJourneyGroupRef,omitempty" json:"RhythmicalJourneyGroupRef,omitempty"`
	HeadwayJourneyGroupRef []HeadwayJourneyGroupRef `xml:"HeadwayJourneyGroupRef,omitempty" json:"HeadwayJourneyGroupRef,omitempty"`
	JourneyFrequencyGroupRef []JourneyFrequencyGroupRef `xml:"JourneyFrequencyGroupRef,omitempty" json:"JourneyFrequencyGroupRef,omitempty"`
	GroupOfServicesRef []GroupOfServicesRef `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	GroupOfStopPlacesRef []GroupOfStopPlacesRef `xml:"GroupOfStopPlacesRef,omitempty" json:"GroupOfStopPlacesRef,omitempty"`
	PointOfInterestHierarchyRef []PointOfInterestHierarchyRef `xml:"PointOfInterestHierarchyRef,omitempty" json:"PointOfInterestHierarchyRef,omitempty"`
	GroupOfTimingLinksRef []GroupOfTimingLinksRef `xml:"GroupOfTimingLinksRef,omitempty" json:"GroupOfTimingLinksRef,omitempty"`
	FleetRef []FleetRef `xml:"FleetRef,omitempty" json:"FleetRef,omitempty"`
	GroupOfOperatorsRef []GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	GroupOfPlacesRef []GroupOfPlacesRef `xml:"GroupOfPlacesRef,omitempty" json:"GroupOfPlacesRef,omitempty"`
	ParentSectionRef []ParentSectionRef `xml:"ParentSectionRef,omitempty" json:"ParentSectionRef,omitempty"`
	ParentCommonSectionRef []ParentCommonSectionRef `xml:"ParentCommonSectionRef,omitempty" json:"ParentCommonSectionRef,omitempty"`
	CommonSectionRef []CommonSectionRef `xml:"CommonSectionRef,omitempty" json:"CommonSectionRef,omitempty"`
	LineSectionRef []LineSectionRef `xml:"LineSectionRef,omitempty" json:"LineSectionRef,omitempty"`
	FareSectionRef []FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	GeneralSectionRef []GeneralSectionRef `xml:"GeneralSectionRef,omitempty" json:"GeneralSectionRef,omitempty"`
	SectionRef []SectionRef `xml:"SectionRef,omitempty" json:"SectionRef,omitempty"`
	GroupOfTariffZonesRef []GroupOfTariffZonesRef `xml:"GroupOfTariffZonesRef,omitempty" json:"GroupOfTariffZonesRef,omitempty"`
	LogRef []LogRef `xml:"LogRef,omitempty" json:"LogRef,omitempty"`
	GroupOfTimebandsRef []GroupOfTimebandsRef `xml:"GroupOfTimebandsRef,omitempty" json:"GroupOfTimebandsRef,omitempty"`
	PlaceRef []PlaceRef `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
	MobilityServiceConstraintZoneRef []MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef []StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef []TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef []AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef []AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef []FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef []TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef []ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
	LayerRef []LayerRef `xml:"LayerRef,omitempty" json:"LayerRef,omitempty"`
	NetworkRef []NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef []GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	GeneralGroupOfEntitiesRef []GeneralGroupOfEntitiesRef `xml:"GeneralGroupOfEntitiesRef,omitempty" json:"GeneralGroupOfEntitiesRef,omitempty"`
	MobilityJourneyFrameRef []MobilityJourneyFrameRef `xml:"MobilityJourneyFrameRef,omitempty" json:"MobilityJourneyFrameRef,omitempty"`
	MobilityServiceFrameRef []MobilityServiceFrameRef `xml:"MobilityServiceFrameRef,omitempty" json:"MobilityServiceFrameRef,omitempty"`
	SalesTransactionFrameRef []SalesTransactionFrameRef `xml:"SalesTransactionFrameRef,omitempty" json:"SalesTransactionFrameRef,omitempty"`
	FareFrameRef []FareFrameRef `xml:"FareFrameRef,omitempty" json:"FareFrameRef,omitempty"`
	ServiceFrameRef []ServiceFrameRef `xml:"ServiceFrameRef,omitempty" json:"ServiceFrameRef,omitempty"`
	DriverScheduleFrameRef []DriverScheduleFrameRef `xml:"DriverScheduleFrameRef,omitempty" json:"DriverScheduleFrameRef,omitempty"`
	VehicleScheduleFrameRef []VehicleScheduleFrameRef `xml:"VehicleScheduleFrameRef,omitempty" json:"VehicleScheduleFrameRef,omitempty"`
	TimetableFrameRef []TimetableFrameRef `xml:"TimetableFrameRef,omitempty" json:"TimetableFrameRef,omitempty"`
	SiteFrameRef []SiteFrameRef `xml:"SiteFrameRef,omitempty" json:"SiteFrameRef,omitempty"`
	InfrastructureFrameRef []InfrastructureFrameRef `xml:"InfrastructureFrameRef,omitempty" json:"InfrastructureFrameRef,omitempty"`
	GeneralFrameRef []GeneralFrameRef `xml:"GeneralFrameRef,omitempty" json:"GeneralFrameRef,omitempty"`
	ResourceFrameRef []ResourceFrameRef `xml:"ResourceFrameRef,omitempty" json:"ResourceFrameRef,omitempty"`
	ServiceCalendarFrameRef []ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	CompositeFrameRef []CompositeFrameRef `xml:"CompositeFrameRef,omitempty" json:"CompositeFrameRef,omitempty"`
	ParkingBayConditionRef []ParkingBayConditionRef `xml:"ParkingBayConditionRef,omitempty" json:"ParkingBayConditionRef,omitempty"`
	RentalAvailabilityRef []RentalAvailabilityRef `xml:"RentalAvailabilityRef,omitempty" json:"RentalAvailabilityRef,omitempty"`
	ParkingBayStatusRef []ParkingBayStatusRef `xml:"ParkingBayStatusRef,omitempty" json:"ParkingBayStatusRef,omitempty"`
	TypeOfMediumAccessDeviceRef []TypeOfMediumAccessDeviceRef `xml:"TypeOfMediumAccessDeviceRef,omitempty" json:"TypeOfMediumAccessDeviceRef,omitempty"`
	TypeOfProofRef []TypeOfProofRef `xml:"TypeOfProofRef,omitempty" json:"TypeOfProofRef,omitempty"`
	DistributionChannelRef []DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	ChargingMomentRef []ChargingMomentRef `xml:"ChargingMomentRef,omitempty" json:"ChargingMomentRef,omitempty"`
	PriceUnitRef []PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	PurposeOfJourneyPartitionRef []PurposeOfJourneyPartitionRef `xml:"PurposeOfJourneyPartitionRef,omitempty" json:"PurposeOfJourneyPartitionRef,omitempty"`
	TimingAlgorithmTypeRef []TimingAlgorithmTypeRef `xml:"TimingAlgorithmTypeRef,omitempty" json:"TimingAlgorithmTypeRef,omitempty"`
	TypeOfParkingRef []TypeOfParkingRef `xml:"TypeOfParkingRef,omitempty" json:"TypeOfParkingRef,omitempty"`
	PointOfInterestClassificationRef []PointOfInterestClassificationRef `xml:"PointOfInterestClassificationRef,omitempty" json:"PointOfInterestClassificationRef,omitempty"`
	TypeOfActivationRef []TypeOfActivationRef `xml:"TypeOfActivationRef,omitempty" json:"TypeOfActivationRef,omitempty"`
	TypeOfFleetRef []TypeOfFleetRef `xml:"TypeOfFleetRef,omitempty" json:"TypeOfFleetRef,omitempty"`
	DirectionRef []DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	TypeOfDriverPermitRef []TypeOfDriverPermitRef `xml:"TypeOfDriverPermitRef,omitempty" json:"TypeOfDriverPermitRef,omitempty"`
	AcceptedDriverPermitRef []AcceptedDriverPermitRef `xml:"AcceptedDriverPermitRef,omitempty" json:"AcceptedDriverPermitRef,omitempty"`
	PurposeOfEquipmentProfileRef []PurposeOfEquipmentProfileRef `xml:"PurposeOfEquipmentProfileRef,omitempty" json:"PurposeOfEquipmentProfileRef,omitempty"`
	TypeOfProductCategoryRef []TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfPaymentMethodRef []TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	ClassOfUseRef []ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	TypeOfOperationRef []TypeOfOperationRef `xml:"TypeOfOperationRef,omitempty" json:"TypeOfOperationRef,omitempty"`
	TypeOfCodespaceAssignmentRef []TypeOfCodespaceAssignmentRef `xml:"TypeOfCodespaceAssignmentRef,omitempty" json:"TypeOfCodespaceAssignmentRef,omitempty"`
	BrandingRef []BrandingRef `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	TypeOfResponsibilityRoleRef []TypeOfResponsibilityRoleRef `xml:"TypeOfResponsibilityRoleRef,omitempty" json:"TypeOfResponsibilityRoleRef,omitempty"`
	PurposeOfGroupingRef []PurposeOfGroupingRef `xml:"PurposeOfGroupingRef,omitempty" json:"PurposeOfGroupingRef,omitempty"`
	TypeOfRetailDeviceRef []TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef,omitempty" json:"TypeOfRetailDeviceRef,omitempty"`
	CustomerAccountStatusRef []CustomerAccountStatusRef `xml:"CustomerAccountStatusRef,omitempty" json:"CustomerAccountStatusRef,omitempty"`
	TypeOfCustomerAccountRef []TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef,omitempty" json:"TypeOfCustomerAccountRef,omitempty"`
	TypeOfFareContractEntryRef []TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef,omitempty" json:"TypeOfFareContractEntryRef,omitempty"`
	TypeOfFareContractRef []TypeOfFareContractRef `xml:"TypeOfFareContractRef,omitempty" json:"TypeOfFareContractRef,omitempty"`
	TypeOfAccessRightAssignmentRef []TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef,omitempty" json:"TypeOfAccessRightAssignmentRef,omitempty"`
	TypeOfSalesOfferPackageRef []TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	TypeOfFareStructureElementRef []TypeOfFareStructureElementRef `xml:"TypeOfFareStructureElementRef,omitempty" json:"TypeOfFareStructureElementRef,omitempty"`
	TypeOfTariffRef []TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	AllDistributionChannelsRef []AllDistributionChannelsRef `xml:"AllDistributionChannelsRef,omitempty" json:"AllDistributionChannelsRef,omitempty"`
	TypeOfMachineReadabilityRef []TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef,omitempty" json:"TypeOfMachineReadabilityRef,omitempty"`
	TypeOfTravelDocumentRef []TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	TypeOfMobilityServiceRef []TypeOfMobilityServiceRef `xml:"TypeOfMobilityServiceRef,omitempty" json:"TypeOfMobilityServiceRef,omitempty"`
	TypeOfFareProductRef []TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	TypeOfFareStructureFactorRef []TypeOfFareStructureFactorRef `xml:"TypeOfFareStructureFactorRef,omitempty" json:"TypeOfFareStructureFactorRef,omitempty"`
	TypeOfPricingRuleRef []TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef,omitempty" json:"TypeOfPricingRuleRef,omitempty"`
	TypeOfFlexibleServiceRef []TypeOfFlexibleServiceRef `xml:"TypeOfFlexibleServiceRef,omitempty" json:"TypeOfFlexibleServiceRef,omitempty"`
	TypeOfPassengerInformationEquipmentRef []TypeOfPassengerInformationEquipmentRef `xml:"TypeOfPassengerInformationEquipmentRef,omitempty" json:"TypeOfPassengerInformationEquipmentRef,omitempty"`
	TypeOfTimeDemandTypeRef []TypeOfTimeDemandTypeRef `xml:"TypeOfTimeDemandTypeRef,omitempty" json:"TypeOfTimeDemandTypeRef,omitempty"`
	TypeOfJourneyPatternRef []TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	TypeOfSecurityListRef []TypeOfSecurityListRef `xml:"TypeOfSecurityListRef,omitempty" json:"TypeOfSecurityListRef,omitempty"`
	TypeOfPlugRef []TypeOfPlugRef `xml:"TypeOfPlugRef,omitempty" json:"TypeOfPlugRef,omitempty"`
	TypeOfBatteryChemistryRef []TypeOfBatteryChemistryRef `xml:"TypeOfBatteryChemistryRef,omitempty" json:"TypeOfBatteryChemistryRef,omitempty"`
	TypeOfServiceFeatureRef []TypeOfServiceFeatureRef `xml:"TypeOfServiceFeatureRef,omitempty" json:"TypeOfServiceFeatureRef,omitempty"`
	TypeOfDeliveryVariantRef []TypeOfDeliveryVariantRef `xml:"TypeOfDeliveryVariantRef,omitempty" json:"TypeOfDeliveryVariantRef,omitempty"`
	TypeOfNoticeRef []TypeOfNoticeRef `xml:"TypeOfNoticeRef,omitempty" json:"TypeOfNoticeRef,omitempty"`
	TypeOfCongestionRef []TypeOfCongestionRef `xml:"TypeOfCongestionRef,omitempty" json:"TypeOfCongestionRef,omitempty"`
	TypeOfServiceRef []TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	TypeOfFacilityRef []TypeOfFacilityRef `xml:"TypeOfFacilityRef,omitempty" json:"TypeOfFacilityRef,omitempty"`
	TypeOfModeOfOperationRef []TypeOfModeOfOperationRef `xml:"TypeOfModeOfOperationRef,omitempty" json:"TypeOfModeOfOperationRef,omitempty"`
	PersonalModeOfOperationRef []PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef []VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef []VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef []VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef []FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef []ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	TypeOfEquipmentRef []TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	TypeOfProjectionRef []TypeOfProjectionRef `xml:"TypeOfProjectionRef,omitempty" json:"TypeOfProjectionRef,omitempty"`
	TypeOfFeatureRef []TypeOfFeatureRef `xml:"TypeOfFeatureRef,omitempty" json:"TypeOfFeatureRef,omitempty"`
	TypeOfLinkSequenceRef []TypeOfLinkSequenceRef `xml:"TypeOfLinkSequenceRef,omitempty" json:"TypeOfLinkSequenceRef,omitempty"`
	TypeOfOrganisationPartRef []TypeOfOrganisationPartRef `xml:"TypeOfOrganisationPartRef,omitempty" json:"TypeOfOrganisationPartRef,omitempty"`
	TypeOfOrganisationRef []TypeOfOrganisationRef `xml:"TypeOfOrganisationRef,omitempty" json:"TypeOfOrganisationRef,omitempty"`
	TypeOfPlaceRef []TypeOfPlaceRef `xml:"TypeOfPlaceRef,omitempty" json:"TypeOfPlaceRef,omitempty"`
	TypeOfTransferRef []TypeOfTransferRef `xml:"TypeOfTransferRef,omitempty" json:"TypeOfTransferRef,omitempty"`
	TypeOfZoneRef []TypeOfZoneRef `xml:"TypeOfZoneRef,omitempty" json:"TypeOfZoneRef,omitempty"`
	TypeOfLinkRef []TypeOfLinkRef `xml:"TypeOfLinkRef,omitempty" json:"TypeOfLinkRef,omitempty"`
	TypeOfPointRef []TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
	TypeOfLineRef []TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
	TypeOfValidityRef []TypeOfValidityRef `xml:"TypeOfValidityRef,omitempty" json:"TypeOfValidityRef,omitempty"`
	TypeOfFrameRef []TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	DataSourceRef []DataSourceRef `xml:"DataSourceRef,omitempty" json:"DataSourceRef,omitempty"`
	VersionRef []VersionRef `xml:"VersionRef,omitempty" json:"VersionRef,omitempty"`
	VersionOfObjectRef []VersionOfObjectRef `xml:"VersionOfObjectRef,omitempty" json:"VersionOfObjectRef,omitempty"`
	VehiclePoolingPlaceAssignmentRef []VehiclePoolingPlaceAssignmentRef `xml:"VehiclePoolingPlaceAssignmentRef,omitempty" json:"VehiclePoolingPlaceAssignmentRef,omitempty"`
	VehicleSharingPlaceAssignmentRef []VehicleSharingPlaceAssignmentRef `xml:"VehicleSharingPlaceAssignmentRef,omitempty" json:"VehicleSharingPlaceAssignmentRef,omitempty"`
	TaxiServicePlaceAssignmentRef []TaxiServicePlaceAssignmentRef `xml:"TaxiServicePlaceAssignmentRef,omitempty" json:"TaxiServicePlaceAssignmentRef,omitempty"`
	VehicleServicePlaceAssignmentRef []VehicleServicePlaceAssignmentRef `xml:"VehicleServicePlaceAssignmentRef,omitempty" json:"VehicleServicePlaceAssignmentRef,omitempty"`
	DynamicVehicleMeetingPointAssignmentRef []DynamicVehicleMeetingPointAssignmentRef `xml:"DynamicVehicleMeetingPointAssignmentRef,omitempty" json:"DynamicVehicleMeetingPointAssignmentRef,omitempty"`
	VehicleMeetingPointAssignmentRef []VehicleMeetingPointAssignmentRef `xml:"VehicleMeetingPointAssignmentRef,omitempty" json:"VehicleMeetingPointAssignmentRef,omitempty"`
	VehicleAccessCredentialsAssignmentRef []VehicleAccessCredentialsAssignmentRef `xml:"VehicleAccessCredentialsAssignmentRef,omitempty" json:"VehicleAccessCredentialsAssignmentRef,omitempty"`
	DistributionAssignmentRef []DistributionAssignmentRef `xml:"DistributionAssignmentRef,omitempty" json:"DistributionAssignmentRef,omitempty"`
	SalesOfferPackageSubstitutionRef []SalesOfferPackageSubstitutionRef `xml:"SalesOfferPackageSubstitutionRef,omitempty" json:"SalesOfferPackageSubstitutionRef,omitempty"`
	JourneyAccountingRef []JourneyAccountingRef `xml:"JourneyAccountingRef,omitempty" json:"JourneyAccountingRef,omitempty"`
	TrainComponentLabelAssignmentRef []TrainComponentLabelAssignmentRef `xml:"TrainComponentLabelAssignmentRef,omitempty" json:"TrainComponentLabelAssignmentRef,omitempty"`
	TransferRestrictionRef []TransferRestrictionRef `xml:"TransferRestrictionRef,omitempty" json:"TransferRestrictionRef,omitempty"`
	ServiceExclusionRef []ServiceExclusionRef `xml:"ServiceExclusionRef,omitempty" json:"ServiceExclusionRef,omitempty"`
	FlexibleServiceAssignmentRef []FlexibleServiceAssignmentRef `xml:"FlexibleServiceAssignmentRef,omitempty" json:"FlexibleServiceAssignmentRef,omitempty"`
	VehicleTypeStopAssignmentRef []VehicleTypeStopAssignmentRef `xml:"VehicleTypeStopAssignmentRef,omitempty" json:"VehicleTypeStopAssignmentRef,omitempty"`
	PathAssignmentRef []PathAssignmentRef `xml:"PathAssignmentRef,omitempty" json:"PathAssignmentRef,omitempty"`
	TrainStopAssignmentRef []TrainStopAssignmentRef `xml:"TrainStopAssignmentRef,omitempty" json:"TrainStopAssignmentRef,omitempty"`
	VehicleJourneyStopAssignmentRef []VehicleJourneyStopAssignmentRef `xml:"VehicleJourneyStopAssignmentRef,omitempty" json:"VehicleJourneyStopAssignmentRef,omitempty"`
	DynamicStopAssignmentRef []DynamicStopAssignmentRef `xml:"DynamicStopAssignmentRef,omitempty" json:"DynamicStopAssignmentRef,omitempty"`
	PassengerStopAssignmentRef []PassengerStopAssignmentRef `xml:"PassengerStopAssignmentRef,omitempty" json:"PassengerStopAssignmentRef,omitempty"`
	StopAssignmentRef []StopAssignmentRef `xml:"StopAssignmentRef,omitempty" json:"StopAssignmentRef,omitempty"`
	DisplayAssignmentRef []DisplayAssignmentRef `xml:"DisplayAssignmentRef,omitempty" json:"DisplayAssignmentRef,omitempty"`
	TimeDemandTypeAssignmentRef []TimeDemandTypeAssignmentRef `xml:"TimeDemandTypeAssignmentRef,omitempty" json:"TimeDemandTypeAssignmentRef,omitempty"`
	OvertakingPossibilityRef []OvertakingPossibilityRef `xml:"OvertakingPossibilityRef,omitempty" json:"OvertakingPossibilityRef,omitempty"`
	MeetingRestrictionRef []MeetingRestrictionRef `xml:"MeetingRestrictionRef,omitempty" json:"MeetingRestrictionRef,omitempty"`
	RestrictedManoeuvreRef []RestrictedManoeuvreRef `xml:"RestrictedManoeuvreRef,omitempty" json:"RestrictedManoeuvreRef,omitempty"`
	InfrastructureLinkRestrictionRef []InfrastructureLinkRestrictionRef `xml:"InfrastructureLinkRestrictionRef,omitempty" json:"InfrastructureLinkRestrictionRef,omitempty"`
	VehicleTypeAtPointRef []VehicleTypeAtPointRef `xml:"VehicleTypeAtPointRef,omitempty" json:"VehicleTypeAtPointRef,omitempty"`
	NetworkRestrictionRef []NetworkRestrictionRef `xml:"NetworkRestrictionRef,omitempty" json:"NetworkRestrictionRef,omitempty"`
	ActivationAssignmentRef []ActivationAssignmentRef `xml:"ActivationAssignmentRef,omitempty" json:"ActivationAssignmentRef,omitempty"`
	CheckConstraintThroughputRef []CheckConstraintThroughputRef `xml:"CheckConstraintThroughputRef,omitempty" json:"CheckConstraintThroughputRef,omitempty"`
	CheckConstraintDelayRef []CheckConstraintDelayRef `xml:"CheckConstraintDelayRef,omitempty" json:"CheckConstraintDelayRef,omitempty"`
	CheckConstraintRef []CheckConstraintRef `xml:"CheckConstraintRef,omitempty" json:"CheckConstraintRef,omitempty"`
	DayTypeAssignmentRef []DayTypeAssignmentRef `xml:"DayTypeAssignmentRef,omitempty" json:"DayTypeAssignmentRef,omitempty"`
	AssignmentRef []AssignmentRef `xml:"AssignmentRef,omitempty" json:"AssignmentRef,omitempty"`
	ClassInFrameRef []ClassInFrameRef `xml:"ClassInFrameRef,omitempty" json:"ClassInFrameRef,omitempty"`
}

// Topic represents the Topic element
// Abstract Topic Filter.
type Topic struct {
	TopicStructure
}

// ObjectFilterByValue represents the ObjectFilterByValue element
// Abstract Topic Filter.
type ObjectFilterByValue struct {
	ObjectFilterByValueStructure
}

// NetworkFrameTopicStructure represents the NetworkFrameTopicStructure element
// Type for a Data Object Filter Topic.
type NetworkFrameTopicStructure struct {
	TopicStructure
	// Return just the latest current values from the producer at the time the response is created.
	Current *EmptyType `xml:"Current,omitempty" json:"Current,omitempty"`
	// Return  the  values that have changed since the specified point in time, including current and superseded values. Values that are no longer current will be flagged with the date they were superseded (using the various cleared / deleted /historic dates on different element types).
	ChangedSince *time.Time `xml:"ChangedSince,omitempty" json:"ChangedSince,omitempty"`
	// Return just the  values that were  current at the specified point in time.
	CurrentAt *time.Time `xml:"CurrentAt,omitempty" json:"CurrentAt,omitempty"`
	// Return all values  created or updated  between the specified period, including current and historic values.  Values that are no longer current will be flagged with the date they were superseded.
	HistoricBetween *ClosedTimestampRangeStructure `xml:"HistoricBetween,omitempty" json:"HistoricBetween,omitempty"`
	// Validity conditions to apply when selecting data. Applies to frame.
	SelectionValidityConditions *SelectionValidityConditions `xml:"selectionValidityConditions,omitempty" json:"selectionValidityConditions,omitempty"`
	TypeOfFrameRef *TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	MobilityJourneyFrameRef []MobilityJourneyFrameRef `xml:"MobilityJourneyFrameRef,omitempty" json:"MobilityJourneyFrameRef,omitempty"`
	MobilityServiceFrameRef []MobilityServiceFrameRef `xml:"MobilityServiceFrameRef,omitempty" json:"MobilityServiceFrameRef,omitempty"`
	SalesTransactionFrameRef []SalesTransactionFrameRef `xml:"SalesTransactionFrameRef,omitempty" json:"SalesTransactionFrameRef,omitempty"`
	FareFrameRef []FareFrameRef `xml:"FareFrameRef,omitempty" json:"FareFrameRef,omitempty"`
	ServiceFrameRef []ServiceFrameRef `xml:"ServiceFrameRef,omitempty" json:"ServiceFrameRef,omitempty"`
	DriverScheduleFrameRef []DriverScheduleFrameRef `xml:"DriverScheduleFrameRef,omitempty" json:"DriverScheduleFrameRef,omitempty"`
	VehicleScheduleFrameRef []VehicleScheduleFrameRef `xml:"VehicleScheduleFrameRef,omitempty" json:"VehicleScheduleFrameRef,omitempty"`
	TimetableFrameRef []TimetableFrameRef `xml:"TimetableFrameRef,omitempty" json:"TimetableFrameRef,omitempty"`
	SiteFrameRef []SiteFrameRef `xml:"SiteFrameRef,omitempty" json:"SiteFrameRef,omitempty"`
	InfrastructureFrameRef []InfrastructureFrameRef `xml:"InfrastructureFrameRef,omitempty" json:"InfrastructureFrameRef,omitempty"`
	GeneralFrameRef []GeneralFrameRef `xml:"GeneralFrameRef,omitempty" json:"GeneralFrameRef,omitempty"`
	ResourceFrameRef []ResourceFrameRef `xml:"ResourceFrameRef,omitempty" json:"ResourceFrameRef,omitempty"`
	ServiceCalendarFrameRef []ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	CompositeFrameRef []CompositeFrameRef `xml:"CompositeFrameRef,omitempty" json:"CompositeFrameRef,omitempty"`
	// Values for selecting by value.
	NetworkFilterByValue *NetworkFilterByValueStructure `xml:"NetworkFilterByValue,omitempty" json:"NetworkFilterByValue,omitempty"`
}

// SelectionValidityConditions represents the selectionValidityConditions element
type SelectionValidityConditions struct {
	SimpleAvailabilityCondition []SimpleAvailabilityCondition `xml:"SimpleAvailabilityCondition,omitempty" json:"SimpleAvailabilityCondition,omitempty"`
	ValidDuring []ValidDuring `xml:"ValidDuring,omitempty" json:"ValidDuring,omitempty"`
	AvailabilityCondition []AvailabilityCondition `xml:"AvailabilityCondition,omitempty" json:"AvailabilityCondition,omitempty"`
	ValidityRuleParameter []ValidityRuleParameter `xml:"ValidityRuleParameter,omitempty" json:"ValidityRuleParameter,omitempty"`
	ValidityTrigger []ValidityTrigger `xml:"ValidityTrigger,omitempty" json:"ValidityTrigger,omitempty"`
	ValidityCondition []ValidityCondition `xml:"ValidityCondition,omitempty" json:"ValidityCondition,omitempty"`
}

// NetworkFilterByValueStructure represents the NetworkFilterByValueStructure element
// Specifies values to filter by reference value, rather than frame.
type NetworkFilterByValueStructure struct {
	ObjectFilterByValueStructure
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	// Return all site elements for given place.
	Places *Places `xml:"places,omitempty" json:"places,omitempty"`
}

// Places represents the places element
type Places struct {
	HailAndRideAreaRef []HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef []FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef []FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
	FlexibleStopPlaceRef []FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	PathJunctionRef []PathJunctionRef `xml:"PathJunctionRef,omitempty" json:"PathJunctionRef,omitempty"`
	EquipmentPlaceRef []EquipmentPlaceRef `xml:"EquipmentPlaceRef,omitempty" json:"EquipmentPlaceRef,omitempty"`
	EquipmentPositionRef []EquipmentPositionRef `xml:"EquipmentPositionRef,omitempty" json:"EquipmentPositionRef,omitempty"`
	TopographicPlaceRef []TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	VehiclePoolingMeetingPlaceRef []VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef []VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	GarageRef []GarageRef `xml:"GarageRef,omitempty" json:"GarageRef,omitempty"`
	VehicleStoppingPositionRef []VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef []VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef []BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef []AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef []TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef []QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef []StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef []VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef []MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef []VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef []ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef []VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef []VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef []TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef []ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef []PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef []StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef []StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef []ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef []ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef []ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef []PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef []PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef []EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef []SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef []TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef []StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef []ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef []PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef []ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef []SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef []SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	AddressablePlaceRef []AddressablePlaceRef `xml:"AddressablePlaceRef,omitempty" json:"AddressablePlaceRef,omitempty"`
	PostalAddressRef []PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef []RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef []AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
}

// NetworkFrameRequestPolicyStructure represents the NetworkFrameRequestPolicyStructure element
// Parameters that affect the request processing. Mostly act to reduce the number of stops returned.
type NetworkFrameRequestPolicyStructure struct {
	// Maximum number of objects to include in response. If absent, include all instances.
	MaximumNumberOfElements *int `xml:"MaximumNumberOfElements,omitempty" json:"MaximumNumberOfElements,omitempty"`
	// Whether to include  in response. elements flagged as deleted. By default this will be false.
	IncludeDeleted *bool `xml:"IncludeDeleted,omitempty" json:"IncludeDeleted,omitempty"`
	// Allows requestor to indicate a relative urgency of request. A longer period can be specified for non urgent requests, e.g. to get  historic data. If not specified assume best possible response desired, preferably immediate.
	Urgency *string `xml:"Urgency,omitempty" json:"Urgency,omitempty"`
	// Allows requestor to indicate that if data cannot be supplied by a given time it will not be useful. Can be used to prioritize data on systems working at full load.
	MustHaveBy *time.Time `xml:"MustHaveBy,omitempty" json:"MustHaveBy,omitempty"`
	// Preferred language for text elements in response.
	Language *string `xml:"Language,omitempty" json:"Language,omitempty"`
	// Level of detail to return. Default is all.
	// All = Return all data and geometry, but not Xref
	// NoGeometry = Return all, omitting geometry. 
	// XRef - Return Xcross Reference data , e.g. links for zones.
	RequestDetail *OutputDetailEnumeration `xml:"RequestDetail,omitempty" json:"RequestDetail,omitempty"`
}

// NetworkFrameSubscriptionPolicyStructure represents the NetworkFrameSubscriptionPolicyStructure element
// Data type for Subscription Request for  NeTEx Data Object  Service.
type NetworkFrameSubscriptionPolicyStructure struct {
	// Whether the producer should return the complete set of current data, or only provide updates to the last data returned, i.e. additions, modifications and deletions.
	// If false each subscription response will contain the full information as specified in this request.
	IncrementalUpdates *bool `xml:"IncrementalUpdates,omitempty" json:"IncrementalUpdates,omitempty"`
}

// NetworkFrameTopic represents the NetworkFrameTopic element
// Network Object filter  Return Network Objects that match these values.  Values are ANDed.
type NetworkFrameTopic struct {
	NetworkFrameTopicStructure
}

// TracesRelStructure represents the traces_RelStructure element
// A collection of one or more TRACEs.
type TracesRelStructure struct {
	// A way to record the context of the changes occurred in a given ENTITY instance, as regards the authors, the causes of the changes, etc., possibly accompanied by a descriptive text.he next one.  A TRACE contains pairs of attributes' old values - new values.
	Trace []Trace `xml:"Trace" json:"Trace"`
}

// TraceStructure represents the TraceStructure element
// Type for a TYPE OF TRACE.
type TraceStructure struct {
	// Identifier of ENTITY IN VERSION that has been created or  modiifed.
	ObjectRef *VersionOfObjectRefStructure `xml:"ObjectRef,omitempty" json:"ObjectRef,omitempty"`
	// Timestamp of when ENTITY IN VERSION was Changed.
	ChangedAt time.Time `xml:"ChangedAt" json:"ChangedAt"`
	// Who made change.
	ChangedBy *string `xml:"ChangedBy,omitempty" json:"ChangedBy,omitempty"`
	// Description of change.
	Description *string `xml:"Description,omitempty" json:"Description,omitempty"`
	Delta *Delta `xml:"Delta,omitempty" json:"Delta,omitempty"`
	// Identifier of TRACE.
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Date TRACE was first created.
	Created *time.Time `xml:"created,attr,omitempty" json:"created,omitempty"`
}

// DeltasRelStructure represents the deltas_RelStructure element
// A collection of one or more DELTAs.
type DeltasRelStructure struct {
	Delta []Delta `xml:"Delta" json:"Delta"`
}

// DeltaStructure represents the DeltaStructure element
// Type for a DELTA.
type DeltaStructure struct {
	SimpleObjectRef *SimpleObjectRef `xml:"SimpleObjectRef,omitempty" json:"SimpleObjectRef,omitempty"`
	// Base version against which DELTA is made.
	FromVersionRef *SimpleObjectRefStructure `xml:"FromVersionRef,omitempty" json:"FromVersionRef,omitempty"`
	// Version being compared against baseline by DELTA.
	ToVersionRef SimpleObjectRefStructure `xml:"ToVersionRef" json:"ToVersionRef"`
	// Nature of change.
	Modification *ModificationEnumeration `xml:"Modification,omitempty" json:"Modification,omitempty"`
	// Values for changes to ENTITY.
	DeltaValues *DeltaValuesRelStructure `xml:"deltaValues,omitempty" json:"deltaValues,omitempty"`
	// Identifier of DELTA.
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Date reference was first created.
	Created *time.Time `xml:"created,attr,omitempty" json:"created,omitempty"`
}

// DeltaValuesRelStructure represents the deltaValues_RelStructure element
// A collection of one or more DELTA VALUEs.
type DeltaValuesRelStructure struct {
	DeltaValue []DeltaValue `xml:"DeltaValue" json:"DeltaValue"`
}

// DeltaValueStructure represents the DeltaValueStructure element
// Type for a DELTA VALUE.
type DeltaValueStructure struct {
	// Identifier of DELTA of which this is part.
	DeltaRef *string `xml:"DeltaRef,omitempty" json:"DeltaRef,omitempty"`
	// Nature of change made by DELTA.
	Modification *ModificationEnumeration `xml:"Modification,omitempty" json:"Modification,omitempty"`
	// Name of VALUE altered by DELTA.
	ValueName *string `xml:"ValueName,omitempty" json:"ValueName,omitempty"`
	// Previous value for attribute.
	OldValue *interface{} `xml:"OldValue,omitempty" json:"OldValue,omitempty"`
	// New value for attribute set by DELTA.
	NewValue *interface{} `xml:"NewValue,omitempty" json:"NewValue,omitempty"`
	// Identifier of DELTA.
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
}

// Trace represents the Trace element
// A  record of the detailed changes of a given ENTITY IN VERSION from one VERSION to the next one.  A TRACE contains pairs of attributes' old values - new values.
type Trace struct {
	TraceStructure
}

// Delta represents the Delta element
// A  record of the detailed changes of a given ENTITY IN VERSION from one VERSION to the next one.  A DELTA contains pairs of attributes' old values - new values.
type Delta struct {
	DeltaStructure
}

// DeltaValue represents the DeltaValue element
// A  record of the detailed changes of a given ENTITY IN VERSION from one VERSION to the next one.  A DELTA contains pairs of attributes' old values - new values.
type DeltaValue struct {
	DeltaValueStructure
}

// VersionFrameVersionStructure represents the VersionFrame_VersionStructure element
// Type for a VERSION FRAME.
type VersionFrameVersionStructure struct {
	DataManagedObjectStructure
	// Name of VERSION FRAME.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VERSION FRAME.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Reference to a TYPE OF VERSION FRAME.
	TypeOfFrameRef *TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	// Prerequisite Baseline VERSION FRAME  that all objects in this VERSION require.
	BaselineVersionFrameRef *VersionRefStructure `xml:"BaselineVersionFrameRef,omitempty" json:"BaselineVersionFrameRef,omitempty"`
	// CODE SPACES used in this frame. Normally there will be at least one.  A default may be specified in the Frame defaults.
	Codespaces *CodespacesRelStructure `xml:"codespaces,omitempty" json:"codespaces,omitempty"`
	// Default values to use on elements in the frame  that do not explicitly state a value.
	FrameDefaults *VersionFrameDefaultsStructure `xml:"FrameDefaults,omitempty" json:"FrameDefaults,omitempty"`
	// Formal definitions of VERSIONs included in frame.
	Versions *VersionsRelStructure `xml:"versions,omitempty" json:"versions,omitempty"`
	// Prerequisite VERSION FRAMEs containing elements  that this frame depends on.  +v1.1
	Prerequisites *VersionFrameRefsRelStructure `xml:"prerequisites,omitempty" json:"prerequisites,omitempty"`
	// TRACEs recording changes to ENTITIES in FRAME.
	Traces *TracesRelStructure `xml:"traces,omitempty" json:"traces,omitempty"`
	// Common VALIDITY CONDITIONs used by elements in frame.
	ContentValidityConditions *ValidityConditionsRelStructure `xml:"contentValidityConditions,omitempty" json:"contentValidityConditions,omitempty"`
	// layers included in frame
	Layers *LayerRefsRelStructure `xml:"layers,omitempty" json:"layers,omitempty"`
}

// VersionFrameDefaultsStructure represents the VersionFrameDefaultsStructure element
// Type for frame defaults.
type VersionFrameDefaultsStructure struct {
	// Default CODESPACE to assume for an identifiers that do not have an explicit CODESPACE specified..
	DefaultCodespaceRef *CodespaceRefStructure `xml:"DefaultCodespaceRef,omitempty" json:"DefaultCodespaceRef,omitempty"`
	// Default DATA SOURCE. Assume this value as the DATA SOURCE for content if not specified on individual elements.
	DefaultDataSourceRef *DataSourceRefStructure `xml:"DefaultDataSourceRef,omitempty" json:"DefaultDataSourceRef,omitempty"`
	// Default RESPONSIBILITY SET. Assume this value as the DATA SOURCE for content if not specified on individual elements.
	DefaultResponsibilitySetRef *ResponsibilitySetRefStructure `xml:"DefaultResponsibilitySetRef,omitempty" json:"DefaultResponsibilitySetRef,omitempty"`
	// Default LOCAL for frame elements. Assume this value for     timezone and language of elements if not specified on individual elements.
	DefaultLocale *LocaleStructure `xml:"DefaultLocale,omitempty" json:"DefaultLocale,omitempty"`
	// Default spatial coordinate system (srsName).  E.g.  WGS84 Value to use for   location elements using coordinates if not specified on individual elements.
	DefaultLocationSystem *string `xml:"DefaultLocationSystem,omitempty" json:"DefaultLocationSystem,omitempty"`
	// Units of measurement for all dimension values in Frame. Default System  is Si Metres.
	DefaultSystemOfUnits *SystemOfUnits `xml:"DefaultSystemOfUnits,omitempty" json:"DefaultSystemOfUnits,omitempty"`
	// Default Currency type to use.
	DefaultCurrency *string `xml:"DefaultCurrency,omitempty" json:"DefaultCurrency,omitempty"`
}

// CodespacesRelStructure represents the codespaces_RelStructure element
// A collection of one or more CODESPACEs.
type CodespacesRelStructure struct {
	OneToManyRelationshipStructure
	CodespaceRef []CodespaceRef `xml:"CodespaceRef,omitempty" json:"CodespaceRef,omitempty"`
	Codespace []Codespace `xml:"Codespace,omitempty" json:"Codespace,omitempty"`
}

// TypesOfFrameRelStructure represents the typesOfFrame_RelStructure element
// A collection of one or more TYPEs OF VERSION FRAME.
type TypesOfFrameRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfFrameRef []TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	TypeOfFrame []TypeOfFrame `xml:"TypeOfFrame,omitempty" json:"TypeOfFrame,omitempty"`
}

// TypeOfFrameValueStructure represents the TypeOfFrame_ValueStructure element
// Type for a TYPE OF VERSION FRAME.
type TypeOfFrameValueStructure struct {
	TypeOfEntityVersionStructure
	TypeOfValidityRef *TypeOfValidityRef `xml:"TypeOfValidityRef,omitempty" json:"TypeOfValidityRef,omitempty"`
	// Class of VERSION FRAME to contain classes.
	FrameClassRef *ClassRefStructure `xml:"FrameClassRef,omitempty" json:"FrameClassRef,omitempty"`
	// Classes that should  be present  in FRAME.
	Classes *ClassesInRepositoryRelStructure `xml:"classes,omitempty" json:"classes,omitempty"`
	// TYPES OF ENTITY to include in frame.
	TypesOfEntity *TypeOfEntityRefsRelStructure `xml:"typesOfEntity,omitempty" json:"typesOfEntity,omitempty"`
	// Types of frame included in frame.
	Includes *TypesOfFrameRelStructure `xml:"includes,omitempty" json:"includes,omitempty"`
	// Required spatial coordinate system (srsName).  E.g.  WGS84 Value to use for   location elements using coordinates if not specified on individual elements.
	LocatingSystemRef *string `xml:"LocatingSystemRef,omitempty" json:"LocatingSystemRef,omitempty"`
	// Whether contained elements must be whole set or can be just a Delta.
	ModificationSet *ModificationSetEnumeration `xml:"ModificationSet,omitempty" json:"ModificationSet,omitempty"`
	LayerRef *LayerRef `xml:"LayerRef,omitempty" json:"LayerRef,omitempty"`
}

// ClassesInRepositoryRelStructure represents the classesInRepository_RelStructure element
// Type for a list of Classe Filter referencess.
type ClassesInRepositoryRelStructure struct {
	OneToManyRelationshipStructure
	ClassInFrameRef []ClassInFrameRef `xml:"ClassInFrameRef,omitempty" json:"ClassInFrameRef,omitempty"`
	ClassInFrame []ClassInFrame `xml:"ClassInFrame,omitempty" json:"ClassInFrame,omitempty"`
}

// TypeOfValidityValueStructure represents the TypeOfValidity_ValueStructure element
// Type for a TYPE OF VALIDITY.
type TypeOfValidityValueStructure struct {
	TypeOfValueVersionStructure
	// Periodicity of data in frames of this type.
	Periodicity *string `xml:"Periodicity,omitempty" json:"Periodicity,omitempty"`
	// Nature of presence of data in  Frames of this type.
	Nature *FrameNatureEnumeration `xml:"Nature,omitempty" json:"Nature,omitempty"`
	// Classes that should  be present  in FRAME.
	Classes *ClassRefsRelStructure `xml:"classes,omitempty" json:"classes,omitempty"`
}

// ClassInFrameStructure represents the ClassInFrameStructure element
// Type for CLASS IN FRAME.
type ClassInFrameStructure struct {
	// Nature of reference: Members | Member References | All.
	ClassRefType *ClassRefTypeEnumeration `xml:"ClassRefType,omitempty" json:"ClassRefType,omitempty"`
	// Type of Frame containing Class.
	TypeOfFrameRef *TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	// Whether element is required, optional or not allowed.
	Mandatory *MandatoryEnumeration `xml:"Mandatory,omitempty" json:"Mandatory,omitempty"`
	// Requirements for attributes in class.
	Attributes *Attributes `xml:"attributes,omitempty" json:"attributes,omitempty"`
	// Requirements for attributes in class.
	Relationships *Relationships `xml:"relationships,omitempty" json:"relationships,omitempty"`
	// Name of ENTITY CLASS i.e. TYPE.
	NameOfClass *string `xml:"nameOfClass,attr,omitempty" json:"nameOfClass,omitempty"`
}

// Attributes represents the attributes element
type Attributes struct {
	// Attribute of Class of ENTITY. This is a metaclass that allows services to specify whether an attribute for a class must be present in a given frame.
	ClassAttributeInFrame []ClassAttributeInFrame `xml:"ClassAttributeInFrame" json:"ClassAttributeInFrame"`
}

// Relationships represents the relationships element
type Relationships struct {
	// Attribute of Class of ENTITY. This is a metaclass that allows services to specify whether an attribute for a class must be present in a given frame.
	ClassRelationshipInFrame []ClassRelationshipInFrame `xml:"ClassRelationshipInFrame" json:"ClassRelationshipInFrame"`
}

// ClassAttributeInFrameStructure represents the ClassAttributeInFrameStructure element
// Type for Attribute of Class of Entity.
type ClassAttributeInFrameStructure struct {
	// Class of attribute.
	Type *string `xml:"Type,omitempty" json:"Type,omitempty"`
	// Whether element is required, optional or not allowed.
	Mandatory *MandatoryEnumeration `xml:"Mandatory,omitempty" json:"Mandatory,omitempty"`
	// Name of attribute in CLASS IN REPOSITORY.
	Name *string `xml:"name,attr,omitempty" json:"name,omitempty"`
}

// ClassRelationshipInFrameStructure represents the ClassRelationshipInFrameStructure element
// Type for Relationship of Class of Entity.
type ClassRelationshipInFrameStructure struct {
	RelationshipRef RelationshipRef `xml:"RelationshipRef" json:"RelationshipRef"`
	// Whether relationship is required, optional or not allowed.
	Mandatory *MandatoryEnumeration `xml:"Mandatory,omitempty" json:"Mandatory,omitempty"`
	// Whether reference elements can be inline or by reference.  This is constrained by schema usage.
	Containment *ContainmentEnumeration `xml:"Containment,omitempty" json:"Containment,omitempty"`
	// Whether contained elements must be whole set or can be just a Delta.
	ModificationSet *ModificationSetEnumeration `xml:"ModificationSet,omitempty" json:"ModificationSet,omitempty"`
	// Name of attribute in CLASS IN REPOSITORY.
	Name *string `xml:"name,attr,omitempty" json:"name,omitempty"`
}

// VersionFrame represents the VersionFrame element
// A set of VERSIONS referring to a same DATA SYSTEM and belonging to the same TYPE OF FRAME.  A FRAME may be restricted by VALIDITY CONDITIONs.  Container for a coherent set of versions of objects.
type VersionFrame struct {
	VersionFrameVersionStructure
}

// TypeOfFrame represents the TypeOfFrame element
// Classification of TYPE OF VERSION FRAME.
type TypeOfFrame struct {
	TypeOfFrameValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// TypeOfValidity represents the TypeOfValidity element
// A classification of the validity of TYPEs OF FRAME. E.g. frames for schedules designed for DAY TYPEs, for specific OPERATING DAYs.
type TypeOfValidity struct {
	TypeOfValidityValueStructure
}

// ClassInFrame represents the ClassInFrame element
// Class of an entity in a VERSION FRAME. This is a metaclass that allows services to specify whether a class must or must not be present.
type ClassInFrame struct {
	ClassInFrameStructure
}

// ClassAttributeInFrame represents the ClassAttributeInFrame element
// Attribute of Class of ENTITY. This is a metaclass that allows services to specify whether an attribute must or must not be present for a class in a given frame.
type ClassAttributeInFrame struct {
	ClassAttributeInFrameStructure
}

// ClassRelationshipInFrame represents the ClassRelationshipInFrame element
// Relationship of Class of ENTITY. This is a metaclass that allows services to specify whether a  Relationship must or must not be present for a class in a given frame.
type ClassRelationshipInFrame struct {
	ClassRelationshipInFrameStructure
}

// CommonVersionFrameStructure represents the Common_VersionFrameStructure element
// Type for a  COMMON FRAME.
type CommonVersionFrameStructure struct {
	VersionFrameVersionStructure
}

// CommonFrame represents the CommonFrame element
// Abstract supertype for explicit VERSION FRAMEs.
type CommonFrame struct {
	CommonVersionFrameStructure
}

// CompositeFrameRefStructure represents the CompositeFrameRefStructure element
// Type for a reference to a COMPOSITE FRAME.
type CompositeFrameRefStructure struct {
	VersionFrameRefStructure
}

// FramesRelStructure represents the frames_RelStructure element
// Type for a collection of FRAMEs.
type FramesRelStructure struct {
	ContainmentAggregationStructure
	MobilityJourneyFrame []MobilityJourneyFrame `xml:"MobilityJourneyFrame,omitempty" json:"MobilityJourneyFrame,omitempty"`
	MobilityServiceFrame []MobilityServiceFrame `xml:"MobilityServiceFrame,omitempty" json:"MobilityServiceFrame,omitempty"`
	SalesTransactionFrame []SalesTransactionFrame `xml:"SalesTransactionFrame,omitempty" json:"SalesTransactionFrame,omitempty"`
	FareFrame []FareFrame `xml:"FareFrame,omitempty" json:"FareFrame,omitempty"`
	DriverScheduleFrame []DriverScheduleFrame `xml:"DriverScheduleFrame,omitempty" json:"DriverScheduleFrame,omitempty"`
	VehicleScheduleFrame []VehicleScheduleFrame `xml:"VehicleScheduleFrame,omitempty" json:"VehicleScheduleFrame,omitempty"`
	ServiceFrame []ServiceFrame `xml:"ServiceFrame,omitempty" json:"ServiceFrame,omitempty"`
	TimetableFrame []TimetableFrame `xml:"TimetableFrame,omitempty" json:"TimetableFrame,omitempty"`
	SiteFrame []SiteFrame `xml:"SiteFrame,omitempty" json:"SiteFrame,omitempty"`
	InfrastructureFrame []InfrastructureFrame `xml:"InfrastructureFrame,omitempty" json:"InfrastructureFrame,omitempty"`
	GeneralFrame []GeneralFrame `xml:"GeneralFrame,omitempty" json:"GeneralFrame,omitempty"`
	ResourceFrame []ResourceFrame `xml:"ResourceFrame,omitempty" json:"ResourceFrame,omitempty"`
	ServiceCalendarFrame []ServiceCalendarFrame `xml:"ServiceCalendarFrame,omitempty" json:"ServiceCalendarFrame,omitempty"`
}

// CompositeVersionFrameStructure represents the Composite_VersionFrameStructure element
// Type for a COMPOSITE FRAME.
type CompositeVersionFrameStructure struct {
	CommonVersionFrameStructure
	// Content frames in COMPOSITE FRAME.
	Frames *FramesRelStructure `xml:"frames,omitempty" json:"frames,omitempty"`
}

// CompositeFrameRef represents the CompositeFrameRef element
// Reference to a COMPOSITE FRAME.
type CompositeFrameRef struct {
	CompositeFrameRefStructure
}

// CompositeFrame represents the CompositeFrame element
// A container VERSION FRAME that groups a set of content VERSION FRAMsE to which the same VALIDITY CONDITIONs have been assigned.
type CompositeFrame struct {
	CompositeVersionFrameStructure
}

// DataObjectsRelStructure represents the dataObjects_RelStructure element
// Type for a list of objects.
type DataObjectsRelStructure struct {
	CompositeFrame []CompositeFrame `xml:"CompositeFrame,omitempty" json:"CompositeFrame,omitempty"`
	MobilityJourneyFrame []MobilityJourneyFrame `xml:"MobilityJourneyFrame,omitempty" json:"MobilityJourneyFrame,omitempty"`
	MobilityServiceFrame []MobilityServiceFrame `xml:"MobilityServiceFrame,omitempty" json:"MobilityServiceFrame,omitempty"`
	SalesTransactionFrame []SalesTransactionFrame `xml:"SalesTransactionFrame,omitempty" json:"SalesTransactionFrame,omitempty"`
	FareFrame []FareFrame `xml:"FareFrame,omitempty" json:"FareFrame,omitempty"`
	DriverScheduleFrame []DriverScheduleFrame `xml:"DriverScheduleFrame,omitempty" json:"DriverScheduleFrame,omitempty"`
	VehicleScheduleFrame []VehicleScheduleFrame `xml:"VehicleScheduleFrame,omitempty" json:"VehicleScheduleFrame,omitempty"`
	ServiceFrame []ServiceFrame `xml:"ServiceFrame,omitempty" json:"ServiceFrame,omitempty"`
	TimetableFrame []TimetableFrame `xml:"TimetableFrame,omitempty" json:"TimetableFrame,omitempty"`
	SiteFrame []SiteFrame `xml:"SiteFrame,omitempty" json:"SiteFrame,omitempty"`
	InfrastructureFrame []InfrastructureFrame `xml:"InfrastructureFrame,omitempty" json:"InfrastructureFrame,omitempty"`
	GeneralFrame []GeneralFrame `xml:"GeneralFrame,omitempty" json:"GeneralFrame,omitempty"`
	ResourceFrame []ResourceFrame `xml:"ResourceFrame,omitempty" json:"ResourceFrame,omitempty"`
	ServiceCalendarFrame []ServiceCalendarFrame `xml:"ServiceCalendarFrame,omitempty" json:"ServiceCalendarFrame,omitempty"`
}

// NameTypeEnumeration represents the NameTypeEnumeration enumeration
// Allowed values for classification of ALTERNATIVE NAME.
type NameTypeEnumeration string

const (
	// NameTypeEnumerationAlias represents alias
	NameTypeEnumerationAlias NameTypeEnumeration = "alias"
	// NameTypeEnumerationTranslation represents translation
	NameTypeEnumerationTranslation NameTypeEnumeration = "translation"
	// NameTypeEnumerationCopy represents copy
	NameTypeEnumerationCopy NameTypeEnumeration = "copy"
	// NameTypeEnumerationLabel represents label
	NameTypeEnumerationLabel NameTypeEnumeration = "label"
	// NameTypeEnumerationOther represents other
	NameTypeEnumerationOther NameTypeEnumeration = "other"
)

// AlternativeNameRefStructure represents the AlternativeNameRefStructure element
// Type for a reference to an ALTERNATIVE NAME.
type AlternativeNameRefStructure struct {
	VersionOfObjectRefStructure
}

// AlternativeNameRef represents the AlternativeNameRef element
// Reference to an ALTERNATIVE NAME.
type AlternativeNameRef struct {
	AlternativeNameRefStructure
}

// AlternativeNamesRelStructure represents the alternativeNames_RelStructure element
// Type for list of ALTERNATIVE NAMEs.
type AlternativeNamesRelStructure struct {
	StrictContainmentAggregationStructure
	// ALTERNATIVE NAME for Element.
	AlternativeName []AlternativeName `xml:"AlternativeName" json:"AlternativeName"`
}

// AlternativeNameVersionedChildStructure represents the AlternativeName_VersionedChildStructure element
// Type for ALTERNATIVE NAME.
type AlternativeNameVersionedChildStructure struct {
	VersionedChildStructure
	// Object for which ALTERNATIVE NAME provides an alias. May be omitted if given by context.
	NamedObjectRef *VersionOfObjectRefStructure `xml:"NamedObjectRef,omitempty" json:"NamedObjectRef,omitempty"`
	// Language of the names.
	Lang *string `xml:"Lang,omitempty" json:"Lang,omitempty"`
	// Type of Name - fixed value. Default is Alias.
	NameType *NameTypeEnumeration `xml:"NameType,omitempty" json:"NameType,omitempty"`
	// Type of Nam - open.
	TypeOfName *string `xml:"TypeOfName,omitempty" json:"TypeOfName,omitempty"`
	// Name of the entity.
	Name MultilingualString `xml:"Name" json:"Name"`
	// Short Name of the entity.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Abbreviation of the entity.
	Abbreviation *MultilingualString `xml:"Abbreviation,omitempty" json:"Abbreviation,omitempty"`
	// Additional Qualifier of the ENTITY name.
	QualifierName *MultilingualString `xml:"QualifierName,omitempty" json:"QualifierName,omitempty"`
	// Order of name.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// AlternativeName represents the AlternativeName element
// Alternative Name.
type AlternativeName struct {
	AlternativeNameVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// LimitationStatusEnumeration represents the LimitationStatusEnumeration enumeration
// Allowed values for an accessibility value.
type LimitationStatusEnumeration string

const (
	// LimitationStatusEnumerationTrue represents true
	// All of PLACE is accessible for criteria.
	LimitationStatusEnumerationTrue LimitationStatusEnumeration = "true"
	// LimitationStatusEnumerationFalse represents false
	// PLACE is not considered to meet accessibility criteria.
	LimitationStatusEnumerationFalse LimitationStatusEnumeration = "false"
	// LimitationStatusEnumerationUnknown represents unknown
	// It is not known whether PLACE meets accessibility  criteria.
	LimitationStatusEnumerationUnknown LimitationStatusEnumeration = "unknown"
	// LimitationStatusEnumerationPartial represents partial
	// Some areas of PLACE are not considered to meet accessibility criteria.
	LimitationStatusEnumerationPartial LimitationStatusEnumeration = "partial"
)

// WheelchairAccess represents the WheelchairAccess element
// Whether a PLACE is wheelchair accessible.
type WheelchairAccess struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// StepFreeAccess represents the StepFreeAccess element
// Whether a PLACE has step free access.
type StepFreeAccess struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// StairFreeAccess represents the StairFreeAccess element
// Whether a PLACE has stair free access, in comparison with step free access one single step in the route is allowed.
type StairFreeAccess struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// EscalatorFreeAccess represents the EscalatorFreeAccess element
// Whether a PLACE has escalator free access.
type EscalatorFreeAccess struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// LiftFreeAccess represents the LiftFreeAccess element
// Whether a PLACE has lift free access.
type LiftFreeAccess struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// RampFreeAccess represents the RampFreeAccess element
// Whether a PLACE has ramp free access. Ramp free isn't necessary absolute. If a ramp is not steep, then a PLACE can still be considered ramp free.
type RampFreeAccess struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// LevelAccessIntoVehicle represents the LevelAccessIntoVehicle element
// Whether the platform is high enough and gap is small enough for level access into vehicle. At least at a designated wheelchair door position the gap between platform and vehicle floor (of level access vehicle) does not exceed 75 mm measured horizontally and 50 mm measured vertically including sliding step (according to PRM TSI).
type LevelAccessIntoVehicle struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// AudibleSignalsAvailable represents the AudibleSignalsAvailable element
// Whether a PLACE has audible signals for the visually impaired.
type AudibleSignalsAvailable struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// VisualSignsAvailable represents the VisualSignsAvailable element
// Whether a PLACE has visual signals available for the free access.
type VisualSignsAvailable struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// TactileGuidanceAvailable represents the TactileGuidanceAvailable element
// Whether the Place has tactile guidance.
type TactileGuidanceAvailable struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// GuideDogAccess represents the GuideDogAccess element
// Whether a PLACE allows guide dog access.
type GuideDogAccess struct {
	Value LimitationStatusEnumeration `xml:",chardata" json:"value"`
}

// LimitationRefStructure represents the LimitationRefStructure element
// Type for reference to an ACCESSIBILITY LIMITATION.
type LimitationRefStructure struct {
	VersionOfObjectRefStructure
}

// AccessibilityAssessmentRefStructure represents the AccessibilityAssessmentRefStructure element
// Type for reference to an ACCESSIBILITY ASSESSMENT.
type AccessibilityAssessmentRefStructure struct {
	VersionOfObjectRefStructure
}

// AccessibilityAssessmentRef represents the AccessibilityAssessmentRef element
// Reference to an ACCESSIBILITY ASSESSMENT.
type AccessibilityAssessmentRef struct {
	AccessibilityAssessmentRefStructure
}

// MobilityEnumeration represents the MobilityEnumeration enumeration
// Allowed values for of mobility needs.
type MobilityEnumeration string

const (
	// MobilityEnumerationWheelchair represents wheelchair
	MobilityEnumerationWheelchair MobilityEnumeration = "wheelchair"
	// MobilityEnumerationAssistedWheelchair represents assistedWheelchair
	MobilityEnumerationAssistedWheelchair MobilityEnumeration = "assistedWheelchair"
	// MobilityEnumerationMotorizedWheelchair represents motorizedWheelchair
	MobilityEnumerationMotorizedWheelchair MobilityEnumeration = "motorizedWheelchair"
	// MobilityEnumerationMobilityScooter represents mobilityScooter
	MobilityEnumerationMobilityScooter MobilityEnumeration = "mobilityScooter"
	// MobilityEnumerationRoadMobilityScooter represents roadMobilityScooter
	MobilityEnumerationRoadMobilityScooter MobilityEnumeration = "roadMobilityScooter"
	// MobilityEnumerationWalkingFrame represents walkingFrame
	MobilityEnumerationWalkingFrame MobilityEnumeration = "walkingFrame"
	// MobilityEnumerationRestrictedMobility represents restrictedMobility
	MobilityEnumerationRestrictedMobility MobilityEnumeration = "restrictedMobility"
	// MobilityEnumerationOtherMobilityNeed represents otherMobilityNeed
	MobilityEnumerationOtherMobilityNeed MobilityEnumeration = "otherMobilityNeed"
	// MobilityEnumerationNormal represents normal
	MobilityEnumerationNormal MobilityEnumeration = "normal"
)

// PsychosensoryNeedEnumeration represents the PsychosensoryNeedEnumeration enumeration
// Allowed values for specific psychosensory needs.
type PsychosensoryNeedEnumeration string

const (
	// PsychosensoryNeedEnumerationVisualImpairment represents visualImpairment
	PsychosensoryNeedEnumerationVisualImpairment PsychosensoryNeedEnumeration = "visualImpairment"
	// PsychosensoryNeedEnumerationAuditoryImpairment represents auditoryImpairment
	PsychosensoryNeedEnumerationAuditoryImpairment PsychosensoryNeedEnumeration = "auditoryImpairment"
	// PsychosensoryNeedEnumerationCognitiveInputImpairment represents cognitiveInputImpairment
	PsychosensoryNeedEnumerationCognitiveInputImpairment PsychosensoryNeedEnumeration = "cognitiveInputImpairment"
	// PsychosensoryNeedEnumerationAverseToLifts represents averseToLifts
	PsychosensoryNeedEnumerationAverseToLifts PsychosensoryNeedEnumeration = "averseToLifts"
	// PsychosensoryNeedEnumerationAverseToEscalators represents averseToEscalators
	PsychosensoryNeedEnumerationAverseToEscalators PsychosensoryNeedEnumeration = "averseToEscalators"
	// PsychosensoryNeedEnumerationAverseToConfinedSpaces represents averseToConfinedSpaces
	PsychosensoryNeedEnumerationAverseToConfinedSpaces PsychosensoryNeedEnumeration = "averseToConfinedSpaces"
	// PsychosensoryNeedEnumerationAverseToCrowds represents averseToCrowds
	PsychosensoryNeedEnumerationAverseToCrowds PsychosensoryNeedEnumeration = "averseToCrowds"
	// PsychosensoryNeedEnumerationOtherPsychosensoryNeed represents otherPsychosensoryNeed
	PsychosensoryNeedEnumerationOtherPsychosensoryNeed PsychosensoryNeedEnumeration = "otherPsychosensoryNeed"
)

// MedicalNeedEnumeration represents the MedicalNeedEnumeration enumeration
// Allowed values for specific Medical needs.
type MedicalNeedEnumeration string

const (
	// MedicalNeedEnumerationAllergic represents allergic
	MedicalNeedEnumerationAllergic MedicalNeedEnumeration = "allergic"
	// MedicalNeedEnumerationHeartCondition represents heartCondition
	MedicalNeedEnumerationHeartCondition MedicalNeedEnumeration = "heartCondition"
	// MedicalNeedEnumerationOtherMedicalNeed represents otherMedicalNeed
	MedicalNeedEnumerationOtherMedicalNeed MedicalNeedEnumeration = "otherMedicalNeed"
)

// EncumbranceEnumeration represents the EncumbranceEnumeration enumeration
// Allowed values for specific encumbrances.
type EncumbranceEnumeration string

const (
	// EncumbranceEnumerationLuggageEncumbered represents luggageEncumbered
	EncumbranceEnumerationLuggageEncumbered EncumbranceEnumeration = "luggageEncumbered"
	// EncumbranceEnumerationPushchair represents pushchair
	EncumbranceEnumerationPushchair EncumbranceEnumeration = "pushchair"
	// EncumbranceEnumerationBaggageTrolley represents baggageTrolley
	EncumbranceEnumerationBaggageTrolley EncumbranceEnumeration = "baggageTrolley"
	// EncumbranceEnumerationOversizeBaggage represents oversizeBaggage
	EncumbranceEnumerationOversizeBaggage EncumbranceEnumeration = "oversizeBaggage"
	// EncumbranceEnumerationGuideDog represents guideDog
	EncumbranceEnumerationGuideDog EncumbranceEnumeration = "guideDog"
	// EncumbranceEnumerationOtherAnimal represents otherAnimal
	EncumbranceEnumerationOtherAnimal EncumbranceEnumeration = "otherAnimal"
	// EncumbranceEnumerationOtherEncumbranceNeed represents otherEncumbranceNeed
	EncumbranceEnumerationOtherEncumbranceNeed EncumbranceEnumeration = "otherEncumbranceNeed"
)

// SuitableEnumeration represents the SuitableEnumeration enumeration
// Allowed values for a SUITABILITY.
type SuitableEnumeration string

const (
	// SuitableEnumerationSuitable represents suitable
	SuitableEnumerationSuitable SuitableEnumeration = "suitable"
	// SuitableEnumerationNotSuitable represents notSuitable
	SuitableEnumerationNotSuitable SuitableEnumeration = "notSuitable"
)

// PassengerAccessibilityNeedsStructure represents the PassengerAccessibilityNeedsStructure element
// Type for accessibility needs. Records the requirements of a passenger that may affect choice of facilities.
type PassengerAccessibilityNeedsStructure struct {
	// Whether the passenger is accompanied by a carer or assistant.
	AccompaniedByCarer *bool `xml:"AccompaniedByCarer,omitempty" json:"AccompaniedByCarer,omitempty"`
	// Mobility needs of a user.
	UserNeeds *UserNeeds `xml:"userNeeds,omitempty" json:"userNeeds,omitempty"`
	// Suitability needs of a user.
	Suitabilities *Suitabilities `xml:"suitabilities,omitempty" json:"suitabilities,omitempty"`
}

// UserNeeds represents the userNeeds element
type UserNeeds struct {
	UserNeed []UserNeed `xml:"UserNeed,omitempty" json:"UserNeed,omitempty"`
}

// Suitabilities represents the suitabilities element
type Suitabilities struct {
	Suitability []Suitability `xml:"Suitability,omitempty" json:"Suitability,omitempty"`
}

// UserNeedVersionedChildStructure represents the UserNeed_VersionedChildStructure element
// Type for of a USER NEED.
type UserNeedVersionedChildStructure struct {
	VersionedChildStructure
	// A specific USER NEED, i.e. a constraint of a passenger as regards his mobility, e.g. wheelchair, assisted wheelchair, etc.
	MobilityNeed *MobilityEnumeration `xml:"MobilityNeed,omitempty" json:"MobilityNeed,omitempty"`
	// Passenger psychosensory need for which a suitability specified.
	PsychosensoryNeed *PsychosensoryNeedEnumeration `xml:"PsychosensoryNeed,omitempty" json:"PsychosensoryNeed,omitempty"`
	// A specific USER NEED, i.e. a requirement of a passenger as regards medical constraint (e.g. allergy) to access public transport.
	MedicalNeed *MedicalNeedEnumeration `xml:"MedicalNeed,omitempty" json:"MedicalNeed,omitempty"`
	// Passenger encumbrance need for which suitability is specified.
	EncumbranceNeed *EncumbranceEnumeration `xml:"EncumbranceNeed,omitempty" json:"EncumbranceNeed,omitempty"`
	// Whether user need is included or excluded. Default is included.
	Excluded *bool `xml:"Excluded,omitempty" json:"Excluded,omitempty"`
	// Relative ranking of need on a scale 1-5
	NeedRanking *int `xml:"NeedRanking,omitempty" json:"NeedRanking,omitempty"`
}

// SuitabilitiesRelStructure represents the suitabilities_RelStructure element
// Type for a list of SUITABILITies.
type SuitabilitiesRelStructure struct {
	StrictContainmentAggregationStructure
	Suitability []Suitability `xml:"Suitability" json:"Suitability"`
}

// SuitabilityVersionedChildStructure represents the Suitability_VersionedChildStructure element
// Type for SUITABILITY.
type SuitabilityVersionedChildStructure struct {
	UserNeedVersionedChildStructure
	// Whether the facility is suitable.
	Suitable SuitableEnumeration `xml:"Suitable" json:"Suitable"`
}

// PassengerAccessibilityNeeds represents the PassengerAccessibilityNeeds element
// A  passenger's requirement for accessibility, comprising one or more USER NEEDs. For example, that he is unable to navigate stairs, or lifts, or has visual or auditory impairments. PASSENGER ACCESSIBILITY NEEDS can be used to derive an accessibility constraint for the passenger, allowing the computation of paths for passengers with specifically constrained mobility. Example: Wheelchair, No Lifts, No Stairs.
type PassengerAccessibilityNeeds struct {
	PassengerAccessibilityNeedsStructure
}

// UserNeed represents the UserNeed element
// A user's need for a particular SUITABILITY.
type UserNeed struct {
	UserNeedVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// Suitability represents the Suitability element
// The SUITABILTY of a component to meet a specific USER NEED.
type Suitability struct {
	SuitabilityVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// AccessibilityLimitationsRelStructure represents the accessibilityLimitations_RelStructure element
// Type for a list of ACCESSIBILITY LIMITATIONs.
type AccessibilityLimitationsRelStructure struct {
	StrictContainmentAggregationStructure
	// Assessment of the accessibility of a SITE.
	AccessibilityLimitation AccessibilityLimitation `xml:"AccessibilityLimitation" json:"AccessibilityLimitation"`
}

// AccessibilityLimitationVersionedChildStructure represents the AccessibilityLimitation_VersionedChildStructure element
// Type for an ACCESSIBILITY LIMITATION.
type AccessibilityLimitationVersionedChildStructure struct {
	VersionedChildStructure
	WheelchairAccess WheelchairAccess `xml:"WheelchairAccess" json:"WheelchairAccess"`
	StepFreeAccess *StepFreeAccess `xml:"StepFreeAccess,omitempty" json:"StepFreeAccess,omitempty"`
	StairFreeAccess *StairFreeAccess `xml:"StairFreeAccess,omitempty" json:"StairFreeAccess,omitempty"`
	EscalatorFreeAccess *EscalatorFreeAccess `xml:"EscalatorFreeAccess,omitempty" json:"EscalatorFreeAccess,omitempty"`
	LiftFreeAccess *LiftFreeAccess `xml:"LiftFreeAccess,omitempty" json:"LiftFreeAccess,omitempty"`
	RampFreeAccess *RampFreeAccess `xml:"RampFreeAccess,omitempty" json:"RampFreeAccess,omitempty"`
	LevelAccessIntoVehicle *LevelAccessIntoVehicle `xml:"LevelAccessIntoVehicle,omitempty" json:"LevelAccessIntoVehicle,omitempty"`
	// Whether a PLACE has audible signals for the visually impaired.
	AudibleSignalsAvailable *AudibleSignalsAvailable `xml:"AudibleSignalsAvailable,omitempty" json:"AudibleSignalsAvailable,omitempty"`
	// Whether a PLACE has visual signals for the hearing impaired.
	VisualSignsAvailable *VisualSignsAvailable `xml:"VisualSignsAvailable,omitempty" json:"VisualSignsAvailable,omitempty"`
	// Whether a PLACE has tactile guidance.
	TactileGuidanceAvailable *TactileGuidanceAvailable `xml:"TactileGuidanceAvailable,omitempty" json:"TactileGuidanceAvailable,omitempty"`
	// Whether a PLACE allows guide dog access.
	GuideDogAccess *GuideDogAccess `xml:"GuideDogAccess,omitempty" json:"GuideDogAccess,omitempty"`
}

// AccessibilityAssessmentsRelStructure represents the accessibilityAssessments_RelStructure element
// Type for a list of ACCESSIBILITY ASSESSMENTs.
type AccessibilityAssessmentsRelStructure struct {
	StrictContainmentAggregationStructure
	// Assessment of the accessibility of a SITE.
	AccessibilityAssessment []AccessibilityAssessment `xml:"AccessibilityAssessment" json:"AccessibilityAssessment"`
}

// AccessibilityAssessmentVersionedChildStructure represents the AccessibilityAssessment_VersionedChildStructure element
// Type for ACCESSIBILITY ASSESSMENT.
type AccessibilityAssessmentVersionedChildStructure struct {
	VersionedChildStructure
	// Summary indication as to whether the component is considered to be accessible or not.
	MobilityImpairedAccess LimitationStatusEnumeration `xml:"MobilityImpairedAccess" json:"MobilityImpairedAccess"`
	// The ACCESSIBILITY LIMITATION that apply to component.
	Limitations *AccessibilityLimitationsRelStructure `xml:"limitations,omitempty" json:"limitations,omitempty"`
	// The SUITABILITY of the component to meet specific user needs.
	Suitabilities *SuitabilitiesRelStructure `xml:"suitabilities,omitempty" json:"suitabilities,omitempty"`
	// Comment on accessibility.
	Comment *MultilingualString `xml:"Comment,omitempty" json:"Comment,omitempty"`
}

// AccessibilityLimitation represents the AccessibilityLimitation element
// A categorisation of the ACCESSIBILITY characteristics of a STOP PLACE COMPONENT such as a STOP PATH LINK, STOP PLACE or ACCESS SPACE to indicate its usability by passengers with specific needs, for example, those needing wheelchair access, step-free access or wanting to avoid confined spaces such as lifts.
type AccessibilityLimitation struct {
	AccessibilityLimitationVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// AccessibilityAssessment represents the AccessibilityAssessment element
// The accessibility characteristics of an entity used by passengers such as a STOP PLACE, or a STOP PLACE COMPONENT. Described by ACCESSIBILITY LIMITATIONs, and/or a set of SUITABILITies.
type AccessibilityAssessment struct {
	AccessibilityAssessmentVersionedChildStructure
}

// LayerVersionStructure represents the Layer_VersionStructure element
// Type for  LAYER.
type LayerVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Reference to a PURPOSE OF GROUPING.
	LocationSystem *string `xml:"LocationSystem,omitempty" json:"LocationSystem,omitempty"`
	// Members of  GROUP OF ENTITies.
	VersionFrames *VersionFrameRefsRelStructure `xml:"versionFrames,omitempty" json:"versionFrames,omitempty"`
	// Members of  GROUP OF ENTITies.
	Members *ObjectRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// Layer represents the Layer element
// A user-defined GROUP OF ENTITies, specified for a particular functional purpose, associating data referring to a particular LOCATING SYSTEM.
type Layer struct {
	LayerVersionStructure
}

// LogRefStructure represents the LogRefStructure element
// Type for a reference to a LOG.
type LogRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// LogEntryRefStructure represents the LogEntryRefStructure element
// Type for a reference to a LOG ENTRY.
type LogEntryRefStructure struct {
	VersionOfObjectRefStructure
}

// LogRef represents the LogRef element
// Reference to a LOG.
type LogRef struct {
	LogRefStructure
}

// LogEntryRef represents the LogEntryRef element
// Reference to a LOG ENTRY.
type LogEntryRef struct {
	LogEntryRefStructure
}

// LogVersionStructure represents the Log_VersionStructure element
// Type for  LOG.
type LogVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// LOG ENTRies using LOG.
	LogEntries *LogEntriesRelStructure `xml:"logEntries,omitempty" json:"logEntries,omitempty"`
	// Name of LogEntry Cass of  LOG
	NameOfLogEntryClass *string `xml:"nameOfLogEntryClass,attr,omitempty" json:"nameOfLogEntryClass,omitempty"`
}

// LogEntriesRelStructure represents the logEntries_RelStructure element
// Type for a list of  LOG ENTries   +v1.1.
type LogEntriesRelStructure struct {
	StrictContainmentAggregationStructure
}

// LogEntryVersionStructure represents the LogEntry_VersionStructure element
// Type for LOG ENTRY.
type LogEntryVersionStructure struct {
	DataManagedObjectStructure
	// Name of LOG ENTRY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of LOG ENTRY.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Timestamp of LOG ENTRY.
	Date *time.Time `xml:"Date,omitempty" json:"Date,omitempty"`
}

// Log represents the Log element
// A Collection of LOG ENTRIES grouped together in a file or any other kind of storage. +v1.1.
type Log struct {
	LogVersionStructure
}

// LogEntry represents the LogEntry element
// A time-stamped record of an event or change of state.
type LogEntry struct {
	LogEntryVersionStructure
}

// OrganisationTypeEnumeration represents the OrganisationTypeEnumeration enumeration
// Allowed values for ORGANISATION TYPE.
type OrganisationTypeEnumeration string

const (
	// OrganisationTypeEnumerationOrganisationTypeEnumerationAuthority represents authority
	// ORGANISATION is a Transport Authority or Agency.
	OrganisationTypeEnumerationOrganisationTypeEnumerationAuthority OrganisationTypeEnumeration = "authority"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationOperator represents operator
	// ORGANISATION is a Public Transport OPERATOR.
	OrganisationTypeEnumerationOrganisationTypeEnumerationOperator OrganisationTypeEnumeration = "operator"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationRailOperator represents railOperator
	// ORGANISATION is a Rail OPERATOR.
	OrganisationTypeEnumerationOrganisationTypeEnumerationRailOperator OrganisationTypeEnumeration = "railOperator"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationRailFreightOperator represents railFreightOperator
	// ORGANISATION is a rail freight OPERATOR.
	OrganisationTypeEnumerationOrganisationTypeEnumerationRailFreightOperator OrganisationTypeEnumeration = "railFreightOperator"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationStatutoryBody represents statutoryBody
	// ORGANISATION is a statutory body or government department.
	OrganisationTypeEnumerationOrganisationTypeEnumerationStatutoryBody OrganisationTypeEnumeration = "statutoryBody"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationFacilityOperator represents facilityOperator
	// ORGANISATION operates a facility such as a station.
	OrganisationTypeEnumerationOrganisationTypeEnumerationFacilityOperator OrganisationTypeEnumeration = "facilityOperator"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationTravelAgent represents travelAgent
	// ORGANISATION is a Travel Agent.
	OrganisationTypeEnumerationOrganisationTypeEnumerationTravelAgent OrganisationTypeEnumeration = "travelAgent"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationServicedOrganisation represents servicedOrganisation
	// ORGANISATION is a business or organisation served by public transport.
	OrganisationTypeEnumerationOrganisationTypeEnumerationServicedOrganisation OrganisationTypeEnumeration = "servicedOrganisation"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationRetailConsortium represents retailConsortium
	// ORGANISATION is a trade association representing independent retailers.
	OrganisationTypeEnumerationOrganisationTypeEnumerationRetailConsortium OrganisationTypeEnumeration = "retailConsortium"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationAlternativeModeOperator represents alternativeModeOperator
	// ORGANISATION is a transport OPERATOR.
	OrganisationTypeEnumerationOrganisationTypeEnumerationAlternativeModeOperator OrganisationTypeEnumeration = "alternativeModeOperator"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationOnlineProvider represents onlineProvider
	// ORGANISATION is a third party online service.
	OrganisationTypeEnumerationOrganisationTypeEnumerationOnlineProvider OrganisationTypeEnumeration = "onlineProvider"
	// OrganisationTypeEnumerationOrganisationTypeEnumerationOther represents other
	// Other type of ORGANISATION.
	OrganisationTypeEnumerationOrganisationTypeEnumerationOther OrganisationTypeEnumeration = "other"
)

// OrganisationRoleEnumeration represents the OrganisationRoleEnumeration enumeration
// Allowed values for RELATED ORGANISATION role. +v1.2.2
type OrganisationRoleEnumeration string

const (
	// OrganisationRoleEnumerationSubsidiary represents subsidiary
	// Related ORGANISATION is a subsidiary of this organisation.
	OrganisationRoleEnumerationSubsidiary OrganisationRoleEnumeration = "subsidiary"
	// OrganisationRoleEnumerationOwner represents owner
	// Related ORGANISATION owns this organisation.
	OrganisationRoleEnumerationOwner OrganisationRoleEnumeration = "owner"
	// OrganisationRoleEnumerationCollaborator represents collaborator
	// Related ORGANISATION collaborates with this organisation.
	OrganisationRoleEnumerationCollaborator OrganisationRoleEnumeration = "collaborator"
	// OrganisationRoleEnumerationContractIssuer represents contractIssuer
	// Related ORGANISATION contracts to  this organisation to supply it.
	OrganisationRoleEnumerationContractIssuer OrganisationRoleEnumeration = "contractIssuer"
	// OrganisationRoleEnumerationSubcontractor represents subcontractor
	// Related ORGANISATION services contracts for this organisation..
	OrganisationRoleEnumerationSubcontractor OrganisationRoleEnumeration = "subcontractor"
	// OrganisationRoleEnumerationRegulator represents regulator
	// Related ORGANISATION regulates this organisation.
	OrganisationRoleEnumerationRegulator OrganisationRoleEnumeration = "regulator"
	// OrganisationRoleEnumerationStatutoryResponsibility represents statutoryResponsibility
	// Related ORGANISATION is subject to regulation by this organisation.
	OrganisationRoleEnumerationStatutoryResponsibility OrganisationRoleEnumeration = "statutoryResponsibility"
	// OrganisationRoleEnumerationDistributor represents distributor
	// Related ORGANISATION distributes products for this organisation.
	OrganisationRoleEnumerationDistributor OrganisationRoleEnumeration = "distributor"
	// OrganisationRoleEnumerationSupplier represents supplier
	// Related ORGANISATION supplies products or services to this organisation.
	OrganisationRoleEnumerationSupplier OrganisationRoleEnumeration = "supplier"
	// OrganisationRoleEnumerationOther represents other
	// Other role type ORGANISATION.
	OrganisationRoleEnumerationOther OrganisationRoleEnumeration = "other"
)

// ContactTypeEnumeration represents the ContactTypeEnumeration enumeration
// Allowed values for CONTACT role. +v1.2.2
type ContactTypeEnumeration string

const (
	// ContactTypeEnumerationAny represents any
	ContactTypeEnumerationAny ContactTypeEnumeration = "any"
	// ContactTypeEnumerationInformation represents information
	ContactTypeEnumerationInformation ContactTypeEnumeration = "information"
	// ContactTypeEnumerationReservations represents reservations
	ContactTypeEnumerationReservations ContactTypeEnumeration = "reservations"
	// ContactTypeEnumerationLostProperty represents lostProperty
	ContactTypeEnumerationLostProperty ContactTypeEnumeration = "lostProperty"
	// ContactTypeEnumerationPublicRelations represents publicRelations
	ContactTypeEnumerationPublicRelations ContactTypeEnumeration = "publicRelations"
	// ContactTypeEnumerationComplaints represents complaints
	ContactTypeEnumerationComplaints ContactTypeEnumeration = "complaints"
	// ContactTypeEnumerationEmergency represents emergency
	ContactTypeEnumerationEmergency ContactTypeEnumeration = "emergency"
	// ContactTypeEnumerationOther represents other
	ContactTypeEnumerationOther ContactTypeEnumeration = "other"
)

// DepartmentRefsRelStructure represents the departmentRefs_RelStructure element
// Type for a list of DEPARTMENTs.
type DepartmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	DepartmentRef []DepartmentRef `xml:"DepartmentRef" json:"DepartmentRef"`
}

// DepartmentRefStructure represents the DepartmentRefStructure element
// Type for Reference to a DEPARTMENT.
type DepartmentRefStructure struct {
	OrganisationPartRefStructure
}

// OrganisationalUnitRefsRelStructure represents the organisationalUnitRefs_RelStructure element
// Type for a list of ORGANISATIONAL UNITs.
type OrganisationalUnitRefsRelStructure struct {
	OneToManyRelationshipStructure
	OrganisationalUnitRef []OrganisationalUnitRef `xml:"OrganisationalUnitRef" json:"OrganisationalUnitRef"`
}

// OrganisationalUnitRefStructure represents the OrganisationalUnitRefStructure element
// Type for Reference to a ORGANISATIONAL UNIT.
type OrganisationalUnitRefStructure struct {
	OrganisationPartRefStructure
}

// AdministrativeZoneRefsRelStructure represents the administrativeZoneRefs_RelStructure element
// Type for a list of ADMINISTRATIVE ZONEs.
type AdministrativeZoneRefsRelStructure struct {
	OneToManyRelationshipStructure
	AdministrativeZoneRef []AdministrativeZoneRef `xml:"AdministrativeZoneRef" json:"AdministrativeZoneRef"`
}

// AdministrativeZoneRefStructure represents the AdministrativeZoneRefStructure element
// Type for Reference to an ADMINISTRATIVE ZONE. Left untyped so as to avoid forwards dependency.
type AdministrativeZoneRefStructure struct {
	ZoneRefStructure
}

// TypeOfCodespaceAssignmentRefStructure represents the TypeOfCodespaceAssignmentRefStructure element
// Type for Reference to an CODESPACE ASSIGNMENT.
type TypeOfCodespaceAssignmentRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfOrganisationRefsRelStructure represents the typeOfOrganisationRefs_RelStructure element
// Type for a list of TYPEs OF ORGANISATION.
type TypeOfOrganisationRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfOrganisationRef []TypeOfOrganisationRef `xml:"TypeOfOrganisationRef,omitempty" json:"TypeOfOrganisationRef,omitempty"`
}

// TypeOfOrganisationRefStructure represents the TypeOfOrganisationRefStructure element
// Type for Reference to an ADMINISTRATIVE ZONE. Left untyped so as to avoid forwards dependency.
type TypeOfOrganisationRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfOrganisationPartRefStructure represents the TypeOfOrganisationPartRefStructure element
// Type for Reference to an ORGANISATION PART.
type TypeOfOrganisationPartRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfOperationRefStructure represents the TypeOfOperationRefStructure element
// Type for Reference to aTYPE OF OPERATION.
type TypeOfOperationRefStructure struct {
	TypeOfValueRefStructure
}

// ContactRefsRelStructure represents the contactRefs_RelStructure element
// Type for a list of REUSABLE CONTACT. +v1.2.2
type ContactRefsRelStructure struct {
	OneToManyRelationshipStructure
	ContactRef []ContactRef `xml:"ContactRef" json:"ContactRef"`
}

// ContactRefStructure represents the ContactRefStructure element
// Type for Reference to a CONTACT.
type ContactRefStructure struct {
	VersionOfObjectRefStructure
}

// ContactStructure represents the ContactStructure element
// Contact details with reference to CONTACT.
type ContactStructure struct {
	ContactDetailsStructure
	ContactRef *ContactRef `xml:"ContactRef,omitempty" json:"ContactRef,omitempty"`
}

// DepartmentRef represents the DepartmentRef element
// Reference to a DEPARTMENT.
type DepartmentRef struct {
	DepartmentRefStructure
}

// OrganisationalUnitRef represents the OrganisationalUnitRef element
// Reference to a ORGANISATIONAL UNIT.
type OrganisationalUnitRef struct {
	OrganisationalUnitRefStructure
}

// AdministrativeZoneRef represents the AdministrativeZoneRef element
// Reference to an ADMINISTRATIVE ZONE.
type AdministrativeZoneRef struct {
	AdministrativeZoneRefStructure
}

// CodespaceAssignmentRef represents the CodespaceAssignmentRef element
// Reference to a CODESPACE ASSIGNMENT.
type CodespaceAssignmentRef struct {
	Value string `xml:",chardata" json:"value"`
}

// TypeOfCodespaceAssignmentRef represents the TypeOfCodespaceAssignmentRef element
// Reference to a TYPE OF CODESPACE ASSIGNMENT. +v1.1
type TypeOfCodespaceAssignmentRef struct {
	TypeOfCodespaceAssignmentRefStructure
}

// TypeOfOrganisationRef represents the TypeOfOrganisationRef element
// Reference to a TYPE OF ORGANISATION.
type TypeOfOrganisationRef struct {
	TypeOfOrganisationRefStructure
}

// TypeOfOrganisationPartRef represents the TypeOfOrganisationPartRef element
// Reference to a TYPE OF ORGANISATION PART.
type TypeOfOrganisationPartRef struct {
	TypeOfOrganisationPartRefStructure
}

// TypeOfOperationRef represents the TypeOfOperationRef element
// Reference to a TYPE OF OPERATION.
type TypeOfOperationRef struct {
	TypeOfOperationRefStructure
}

// ContactRef represents the ContactRef element
// Reference to a CONTACT. +v1.2.2
type ContactRef struct {
	ContactRefStructure
}

// LinkSequenceRefsRelStructure represents the linkSequenceRefs_RelStructure element
// Type for a list of LINK SEQUENCEs.
type LinkSequenceRefsRelStructure struct {
	OneToManyRelationshipStructure
	TripRef []TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef []TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef []SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef []SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef []DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef []DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef []SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef []TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef []ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef []DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef []VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef []ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef []ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef []DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef []JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef []TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef []NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef []RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	// Reference to a LINK SEQUENCE.
	LinkSequenceRef []LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
}

// LinkSequenceRefStructure represents the LinkSequenceRefStructure element
// Type for a reference to a LINK SEQUENCE.
type LinkSequenceRefStructure struct {
	VersionOfObjectRefStructure
}

// PointInSequenceRefStructure represents the PointInSequenceRefStructure element
// Type for a reference to a POINT IN SEQUENCE.
type PointInSequenceRefStructure struct {
	OrderedVersionOfObjectRefStructure
}

// LinkInSequenceRefStructure represents the LinkInSequenceRefStructure element
// Type for a reference to a LINK IN SEQUENCE.
type LinkInSequenceRefStructure struct {
	OrderedVersionOfObjectRefStructure
}

// TypeOfLinkSequenceRefStructure represents the TypeOfLinkSequenceRefStructure element
// Type for a reference to a TYPE OF LINK SEQUENCE.
type TypeOfLinkSequenceRefStructure struct {
	TypeOfValueRefStructure
}

// GroupOfLinkSequencesRefStructure represents the GroupOfLinkSequencesRefStructure element
// Type for a reference to a GROUP OF LINK SEQUENCEs.
type GroupOfLinkSequencesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// LinkSequenceRef represents the LinkSequenceRef element
// Reference to a LINK SEQUENCE.
type LinkSequenceRef struct {
	LinkSequenceRefStructure
}

// PointInSequenceRef represents the PointInSequenceRef element
// Reference to a POINT IN SEQUENCE.
type PointInSequenceRef struct {
	PointInSequenceRefStructure
}

// LinkInSequenceRef represents the LinkInSequenceRef element
// Reference to a LINK IN SEQUENCE.
type LinkInSequenceRef struct {
	LinkInSequenceRefStructure
}

// TypeOfLinkSequenceRef represents the TypeOfLinkSequenceRef element
// Reference to a TYPE OF LINK SEQUENCE.
type TypeOfLinkSequenceRef struct {
	TypeOfLinkSequenceRefStructure
}

// GroupOfLinkSequencesRef represents the GroupOfLinkSequencesRef element
// Reference to a GROUP OF LINK SEQUENCEs.
type GroupOfLinkSequencesRef struct {
	GroupOfEntitiesRefStructure1
}

// SimpleFeatureRefStructure represents the SimpleFeatureRefStructure element
// Type for a reference to a SIMPLE FEATURE.
type SimpleFeatureRefStructure struct {
	GroupOfPointsRefStructure
}

// ComplexFeatureRefsRelStructure represents the complexFeatureRefs_RelStructure element
// Type for a list of references to COMPLEX FEATUREs.
type ComplexFeatureRefsRelStructure struct {
	OneToManyRelationshipStructure
	ComplexFeatureRef ComplexFeatureRef `xml:"ComplexFeatureRef" json:"ComplexFeatureRef"`
}

// ComplexFeatureRefStructure represents the ComplexFeatureRefStructure element
// Type for a reference to a COMPLEX FEATURE.
type ComplexFeatureRefStructure struct {
	GroupOfPointsRefStructure
}

// FeatureTypeRefsRelStructure represents the featureTypeRefs_RelStructure element
// Type for a list of TYPEs OF FEATURE.
type FeatureTypeRefsRelStructure struct {
	OneToManyRelationshipStructure
	// Reference to a TYPE OF FEATURE.
	TypeOfFeatureRef []TypeOfFeatureRef `xml:"TypeOfFeatureRef" json:"TypeOfFeatureRef"`
}

// TypeOfFeatureRefStructure represents the TypeOfFeatureRefStructure element
// Type for a reference to a TYPE OF FEATURE.
type TypeOfFeatureRefStructure struct {
	TypeOfValueRefStructure
}

// SpatialFeatureRef represents the SpatialFeatureRef element
// Reference to a SPATIAL FEATURE.
type SpatialFeatureRef struct {
	GroupOfPointsRefStructure
}

// SimpleFeatureRef represents the SimpleFeatureRef element
// Reference to a SIMPLE FEATURE.
type SimpleFeatureRef struct {
	SimpleFeatureRefStructure
}

// ComplexFeatureRef represents the ComplexFeatureRef element
// Reference to a COMPLEX FEATURE.
type ComplexFeatureRef struct {
	ComplexFeatureRefStructure
}

// TypeOfFeatureRef represents the TypeOfFeatureRef element
// Reference to a TYPE OF FEATURE.
type TypeOfFeatureRef struct {
	TypeOfFeatureRefStructure
}

// ProjectionRefStructure represents the ProjectionRefStructure element
// Type for a reference to a PROJECTION.
type ProjectionRefStructure struct {
	VersionOfObjectRefStructure
}

// PointProjectionRefStructure represents the PointProjectionRefStructure element
// Type for a reference to a POINT PROJECTION.
type PointProjectionRefStructure struct {
	ProjectionRefStructure
}

// LinkProjectionRefStructure represents the LinkProjectionRefStructure element
// Type for a reference to a LINK PROJECTION.
type LinkProjectionRefStructure struct {
	ProjectionRefStructure
}

// ZoneProjectionRefStructure represents the ZoneProjectionRefStructure element
// Type for a reference to a ZONE PROJECTION.
type ZoneProjectionRefStructure struct {
	ProjectionRefStructure
}

// LinkSequenceProjectionRefStructure represents the LinkSequenceProjectionRefStructure element
// Type for a reference to a LINK SEQUENCE PROJECTION.
type LinkSequenceProjectionRefStructure struct {
	ProjectionRefStructure
}

// ComplexFeatureProjectionRefStructure represents the ComplexFeatureProjectionRefStructure element
// Type for a reference to a COMPLEX FEATURE PROJECTION.
type ComplexFeatureProjectionRefStructure struct {
	ProjectionRefStructure
}

// TypeOfProjectionRefStructure represents the TypeOfProjectionRefStructure element
// Type for a reference to a TYPE OF PROJECTION.
type TypeOfProjectionRefStructure struct {
	TypeOfValueRefStructure
}

// ProjectionRef represents the ProjectionRef element
// Reference to a PROJECTION.
type ProjectionRef struct {
	ProjectionRefStructure
}

// PointProjectionRef represents the PointProjectionRef element
// Reference to a PROJECTION.
type PointProjectionRef struct {
	PointProjectionRefStructure
}

// LinkProjectionRef represents the LinkProjectionRef element
// Reference to a PROJECTION.
type LinkProjectionRef struct {
	LinkProjectionRefStructure
}

// ZoneProjectionRef represents the ZoneProjectionRef element
// Reference to a PROJECTION.
type ZoneProjectionRef struct {
	ZoneProjectionRefStructure
}

// LinkSequenceProjectionRef represents the LinkSequenceProjectionRef element
// Reference to a LINK SEQUENCE PROJECTION.
type LinkSequenceProjectionRef struct {
	LinkSequenceProjectionRefStructure
}

// ComplexFeatureProjectionRef represents the ComplexFeatureProjectionRef element
// Reference to a COMPLEX FEATURE PROJECTION.
type ComplexFeatureProjectionRef struct {
	ComplexFeatureProjectionRefStructure
}

// TypeOfProjectionRef represents the TypeOfProjectionRef element
// Reference to a TYPE OF PROJECTION.
type TypeOfProjectionRef struct {
	TypeOfProjectionRefStructure
}

// ProjectionsRelStructure represents the projections_RelStructure element
// Type for a list of PROJECTIONS.
type ProjectionsRelStructure struct {
	ContainmentAggregationStructure
	TopographicProjectionRef []TopographicProjectionRef `xml:"TopographicProjectionRef,omitempty" json:"TopographicProjectionRef,omitempty"`
	ComplexFeatureProjectionRef []ComplexFeatureProjectionRef `xml:"ComplexFeatureProjectionRef,omitempty" json:"ComplexFeatureProjectionRef,omitempty"`
	LinkSequenceProjectionRef []LinkSequenceProjectionRef `xml:"LinkSequenceProjectionRef,omitempty" json:"LinkSequenceProjectionRef,omitempty"`
	ZoneProjectionRef []ZoneProjectionRef `xml:"ZoneProjectionRef,omitempty" json:"ZoneProjectionRef,omitempty"`
	LinkProjectionRef []LinkProjectionRef `xml:"LinkProjectionRef,omitempty" json:"LinkProjectionRef,omitempty"`
	PointProjectionRef []PointProjectionRef `xml:"PointProjectionRef,omitempty" json:"PointProjectionRef,omitempty"`
	TopographicProjection []TopographicProjection `xml:"TopographicProjection,omitempty" json:"TopographicProjection,omitempty"`
	ZoneProjection []ZoneProjection `xml:"ZoneProjection,omitempty" json:"ZoneProjection,omitempty"`
	ComplexFeatureProjection []ComplexFeatureProjection `xml:"ComplexFeatureProjection,omitempty" json:"ComplexFeatureProjection,omitempty"`
	LinkSequenceProjection []LinkSequenceProjection `xml:"LinkSequenceProjection,omitempty" json:"LinkSequenceProjection,omitempty"`
	LinkProjection []LinkProjection `xml:"LinkProjection,omitempty" json:"LinkProjection,omitempty"`
	PointProjection []PointProjection `xml:"PointProjection,omitempty" json:"PointProjection,omitempty"`
}

// ProjectionVersionStructure represents the Projection_VersionStructure element
// Type for a PROJECTION.
type ProjectionVersionStructure struct {
	DataManagedObjectStructure
	// Type of PROJECTION.
	TypeOfProjectionRef *TypeOfProjectionRefStructure `xml:"TypeOfProjectionRef,omitempty" json:"TypeOfProjectionRef,omitempty"`
	// Description of PROJECTION.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	ComplexFeatureRef *ComplexFeatureRef `xml:"ComplexFeatureRef,omitempty" json:"ComplexFeatureRef,omitempty"`
	SimpleFeatureRef *SimpleFeatureRef `xml:"SimpleFeatureRef,omitempty" json:"SimpleFeatureRef,omitempty"`
	SpatialFeatureRef *SpatialFeatureRef `xml:"SpatialFeatureRef,omitempty" json:"SpatialFeatureRef,omitempty"`
	// Order of Order in which to process PROJECTION.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// PointProjectionVersionStructure represents the PointProjection_VersionStructure element
// Type for a POINT PROJECTION.
type PointProjectionVersionStructure struct {
	ProjectionVersionStructure
	// Reference to point that is being projected. May be limited if given by Context.
	ProjectedPointRef *PointRefStructure `xml:"ProjectedPointRef,omitempty" json:"ProjectedPointRef,omitempty"`
	// Reference to point onto which projected point is being projected.
	ProjectToPointRef *PointRefStructure `xml:"ProjectToPointRef,omitempty" json:"ProjectToPointRef,omitempty"`
	// Link to on which point projects.
	ProjectToLinkRef *LinkRefStructure `xml:"ProjectToLinkRef,omitempty" json:"ProjectToLinkRef,omitempty"`
	// Distance along link to which point projects.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
}

// LinkProjectionVersionStructure represents the LinkProjection_VersionStructure element
// Type for a LINK PROJECTION.
type LinkProjectionVersionStructure struct {
	ProjectionVersionStructure
	// Link that is being projected. Can be omitted if given by context.
	ProjectedLinkRef *LinkRefStructure `xml:"ProjectedLinkRef,omitempty" json:"ProjectedLinkRef,omitempty"`
	// Link onto which projected LINK is being projected.
	ProjectToLinkRef *LinkRefStructure `xml:"ProjectToLinkRef,omitempty" json:"ProjectToLinkRef,omitempty"`
	// Start POINT of PROJECTION on link  . May be omitted if same as start POINT of POINT ON LINK.
	StartPointOnLinkRef *PointOnLinkRefStructure1 `xml:"StartPointOnLinkRef,omitempty" json:"StartPointOnLinkRef,omitempty"`
	// Start of PROJECTION given as a distance . May be omitted if same as start POINT of POINT ON LINK.
	StartPointOnLinkByValue *PointOnLinkByValueStructure `xml:"StartPointOnLinkByValue,omitempty" json:"StartPointOnLinkByValue,omitempty"`
	// End POINTof PROJECTION on link  . May be omitted if same as start POINT of POINT ON LINK.
	EndPointOnLinkRef *PointOnLinkRefStructure1 `xml:"EndPointOnLinkRef,omitempty" json:"EndPointOnLinkRef,omitempty"`
	// End of PROJECTION given as a distance . May be omitted if same as start POINT of POINT ON LINK.
	EndPointOnLinkByValue *PointOnLinkByValueStructure `xml:"EndPointOnLinkByValue,omitempty" json:"EndPointOnLinkByValue,omitempty"`
}

// LinkSequenceProjectionVersionStructure represents the LinkSequenceProjection_VersionStructure element
// Type for a LINK SEQUENCE PROJECTION.
type LinkSequenceProjectionVersionStructure struct {
	ProjectionVersionStructure
	// LINK SEQUENCE that is being projected. Can be omitted if given by context.
	ProjectedLinkSequenceRef *LinkSequenceRefStructure `xml:"ProjectedLinkSequenceRef,omitempty" json:"ProjectedLinkSequenceRef,omitempty"`
	// Distance Travelled.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// POINTs in PROJECTION.
	Points *PointRefsRelStructure `xml:"points,omitempty" json:"points,omitempty"`
	LineString *LineString `xml:"LineString,omitempty" json:"LineString,omitempty"`
}

// ComplexFeatureProjectionVersionStructure represents the ComplexFeatureProjection_VersionStructure element
// Type for a COMPLEX FEATURE PROJECTION.
type ComplexFeatureProjectionVersionStructure struct {
	ProjectionVersionStructure
	// COMPLEX FEATURE which is being projetced.
	ProjectedFeartureRef *ComplexFeatureRefStructure `xml:"ProjectedFeartureRef,omitempty" json:"ProjectedFeartureRef,omitempty"`
	// COMPLEX FEATURE onto which projection is being made.
	OntoFeatureRef *ComplexFeatureRefStructure `xml:"OntoFeatureRef,omitempty" json:"OntoFeatureRef,omitempty"`
	VehicleMeetingPointRef []VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef []WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef []RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef []RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef []TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef []BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef []ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef []BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef []FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef []ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef []GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef []ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef []ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef []TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef []RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef []PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	// COMPLEX FEATURES in PROJECTION.
	Features *ComplexFeatureRefsRelStructure `xml:"features,omitempty" json:"features,omitempty"`
}

// LineShapeStructure2 represents the LineShapeStructure2 element
// Type for a LINE SHAPE.
type LineShapeStructure2 struct {
	DataManagedObjectStructure
	// Formula for calculating line.
	Formula *string `xml:"Formula,omitempty" json:"Formula,omitempty"`
	// Name of LINE SHAPE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	OnwardVehicleMeetingLinkRef *OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef *VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef *ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef *LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef *WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef *RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef *RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef *ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef *PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef *RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	// Name of locating system under which line is specified.
	LocatingSystemRef *string `xml:"LocatingSystemRef,omitempty" json:"LocatingSystemRef,omitempty"`
}

// TypeOfProjectionValueStructure represents the TypeOfProjection_ValueStructure element
// Type for a TYPE OF PROJECTION.
type TypeOfProjectionValueStructure struct {
	TypeOfEntityVersionStructure
}

// Projection represents the Projection element
// An oriented correspondence - of the shape of an ENTITY on a source layer, - onto a ENTITY in a target layer: e.g. POINT, LINK, LINK SEQUENCE, COMPLEX FEATURE, - within a defined TYPE OF PROJECTION.
type Projection struct {
	ProjectionVersionStructure
}

// PointProjection represents the PointProjection element
// An oriented correspondence from one POINT of a source layer, onto a entity in a target layer:  e.g. POINT, LINK, LINK SEQUENCE, COMPLEX FEATURE, within a defined TYPE OF PROJECTION.
type PointProjection struct {
	PointProjectionVersionStructure
}

// LinkProjection represents the LinkProjection element
// An oriented correspondence from one LINK of a source layer, onto an entity in a target layer: e.g. LINK SEQUENCE, COMPLEX FEATURE, within a defined TYPE OF PROJECTION.
type LinkProjection struct {
	LinkProjectionVersionStructure
}

// LinkSequenceProjection represents the LinkSequenceProjection element
// A Projection of a whole LINK SEQUENCE as an ordered series of POINTs.
type LinkSequenceProjection struct {
	LinkSequenceProjectionVersionStructure
}

// ComplexFeatureProjection represents the ComplexFeatureProjection element
// An oriented correspondence:  from one COMPLEX FEATURE in the source layer, onto an entity in a target layer: e.g. POINT, COMPLEX FEATURE,  within a defined TYPE OF PROJECTION.
type ComplexFeatureProjection struct {
	ComplexFeatureProjectionVersionStructure
}

// LineShape represents the LineShape element
// The graphical shape of a LINK obtained from a formula or other means, using the LOCATION of its limiting POINTs and depending on the LOCATING SYSTEM used for the graphical representation.
type LineShape struct {
	LineShapeStructure
}

// TypeOfProjection represents the TypeOfProjection element
// Classification of a PROJECTION.
type TypeOfProjection struct {
	TypeOfProjectionValueStructure
}

// GroupOfLinksInFrameRelStructure represents the groupOfLinksInFrame_RelStructure element
// Type for containment in frame of GROUP OF LINKs.
type GroupOfLinksInFrameRelStructure struct {
	ContainmentAggregationStructure
	GroupOfLinks []GroupOfLinks `xml:"GroupOfLinks" json:"GroupOfLinks"`
}

// PointsOnLinkInFrameRelStructure represents the pointsOnLinkInFrame_RelStructure element
// Type for containment in frame of POINTs ON LINK.
type PointsOnLinkInFrameRelStructure struct {
	ContainmentAggregationStructure
	PointOnLink []PointOnLink `xml:"PointOnLink" json:"PointOnLink"`
}

// PointVersionStructure represents the Point_VersionStructure element
// Type for a POINT.
type PointVersionStructure struct {
	DataManagedObjectStructure
	// Name of POINT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// The position of a POINT with a reference to a given LOCATING SYSTEM (e. g. coordinates).
	Location *LocationStructure `xml:"Location,omitempty" json:"Location,omitempty"`
	// Arbitrary alternative identifier for the POINT.
	PointNumber *string `xml:"PointNumber,omitempty" json:"PointNumber,omitempty"`
	// Types of POINT. Used for arbitrary documentation - Specific types of POINTs and LINKs such as ROUTE POINT, TIMING POINT, etc are also proper subtypes of POINT.
	Types *TypeOfPointRefsRelStructure `xml:"types,omitempty" json:"types,omitempty"`
	// PROJECTIONs of POINT onto another ENTITY or layer.
	Projections *ProjectionsRelStructure `xml:"projections,omitempty" json:"projections,omitempty"`
	// GROUPs OF POINTs to which POINT belongs.
	GroupMemberships *GroupMembershipRefsRelStructure `xml:"groupMemberships,omitempty" json:"groupMemberships,omitempty"`
}

// GroupMembershipRefsRelStructure represents the groupMembershipRefs_RelStructure element
// Type for a list of GROUP OF POINT memberships.
type GroupMembershipRefsRelStructure struct {
	OneToManyRelationshipStructure
	MobilityServiceConstraintZoneRef []MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef []StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef []TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef []AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef []AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef []FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef []TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef []ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
}

// SimplePointVersionStructure represents the SimplePoint_VersionStructure element
// Type for a Simple POINT.
type SimplePointVersionStructure struct {
	EntityInVersionStructure
	// Name of POINT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// The position of a POINT with a reference to a given LOCATING SYSTEM (e. g. coordinates).
	Location *LocationStructure `xml:"Location,omitempty" json:"Location,omitempty"`
}

// LinkVersionStructure represents the Link_VersionStructure element
// Type for a LINK.
type LinkVersionStructure struct {
	DataManagedObjectStructure
	// Name of LINK.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Length of LINK.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// Types of LINK.
	Types *LinkTypeRefsRelStructure `xml:"types,omitempty" json:"types,omitempty"`
	LineString *LineString `xml:"LineString,omitempty" json:"LineString,omitempty"`
	// PROJECTIONs of the LINK.
	Projections *ProjectionsRelStructure `xml:"projections,omitempty" json:"projections,omitempty"`
	// POINTs through which LINK passes.
	PassingThrough *PointsOnLinkRelStructure `xml:"passingThrough,omitempty" json:"passingThrough,omitempty"`
}

// PointsOnLinkRelStructure represents the pointsOnLink_RelStructure element
// Type for a list of POINTs ON LINK.
type PointsOnLinkRelStructure struct {
	StrictContainmentAggregationStructure
	PointOnLink []PointOnLink `xml:"PointOnLink" json:"PointOnLink"`
	LineString *LineStringType `xml:"LineString,omitempty" json:"LineString,omitempty"`
}

// PointOnLinkVersionedChildStructure represents the PointOnLink_VersionedChildStructure element
// Type for a POINT ON LINK.
type PointOnLinkVersionedChildStructure struct {
	VersionedChildStructure
	// Name of LINK.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Parent LINK -Can be omitted if given by context.
	LinkRef *LinkRefStructure `xml:"LinkRef,omitempty" json:"LinkRef,omitempty"`
	// Distance of Point on Link from start of LINK.
	DistanceFromStart *float64 `xml:"DistanceFromStart,omitempty" json:"DistanceFromStart,omitempty"`
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	VehicleMeetingPoint *VehicleMeetingPoint `xml:"VehicleMeetingPoint,omitempty" json:"VehicleMeetingPoint,omitempty"`
	BorderPoint *BorderPoint `xml:"BorderPoint,omitempty" json:"BorderPoint,omitempty"`
	FareScheduledStopPoint *FareScheduledStopPoint `xml:"FareScheduledStopPoint,omitempty" json:"FareScheduledStopPoint,omitempty"`
	ScheduledStopPoint *ScheduledStopPoint `xml:"ScheduledStopPoint,omitempty" json:"ScheduledStopPoint,omitempty"`
	PathJunction *PathJunction `xml:"PathJunction,omitempty" json:"PathJunction,omitempty"`
	RoutePoint *RoutePoint `xml:"RoutePoint,omitempty" json:"RoutePoint,omitempty"`
	ParkingPoint *ParkingPoint `xml:"ParkingPoint,omitempty" json:"ParkingPoint,omitempty"`
	GaragePoint *GaragePoint `xml:"GaragePoint,omitempty" json:"GaragePoint,omitempty"`
	ReliefPoint *ReliefPoint `xml:"ReliefPoint,omitempty" json:"ReliefPoint,omitempty"`
	TimingPoint *TimingPoint `xml:"TimingPoint,omitempty" json:"TimingPoint,omitempty"`
	WireJunction *WireJunction `xml:"WireJunction,omitempty" json:"WireJunction,omitempty"`
	RoadJunction *RoadJunction `xml:"RoadJunction,omitempty" json:"RoadJunction,omitempty"`
	RailwayJunction *RailwayJunction `xml:"RailwayJunction,omitempty" json:"RailwayJunction,omitempty"`
	TrafficControlPoint *TrafficControlPoint `xml:"TrafficControlPoint,omitempty" json:"TrafficControlPoint,omitempty"`
	BeaconPoint *BeaconPoint `xml:"BeaconPoint,omitempty" json:"BeaconPoint,omitempty"`
	ActivationPoint *ActivationPoint `xml:"ActivationPoint,omitempty" json:"ActivationPoint,omitempty"`
	Point *Point `xml:"Point,omitempty" json:"Point,omitempty"`
	// Order of step in sequence
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// TypeOfPointValueStructure represents the TypeOfPoint_ValueStructure element
// Type for a TYPE OF POINT.
type TypeOfPointValueStructure struct {
	TypeOfEntityVersionStructure
}

// TypeOfLinkValueStructure represents the TypeOfLink_ValueStructure element
// Type for a TYPE OF LINK.
type TypeOfLinkValueStructure struct {
	TypeOfEntityVersionStructure
}

// GroupOfPointsRelStructure represents the groupOfPoints_RelStructure element
// Type for a list of GROUPs OF POINTs.
type GroupOfPointsRelStructure struct {
	StrictContainmentAggregationStructure
	GroupOfPoints []GroupOfPoints `xml:"GroupOfPoints" json:"GroupOfPoints"`
}

// GroupOfPointsVersionStructure represents the GroupOfPoints_VersionStructure element
// Type for GROUP OF POINTs.
type GroupOfPointsVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// POINTs in GROUP OF POINTs.
	Members *PointRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// GroupOfLinksRelStructure represents the groupOfLinks_RelStructure element
// Type for a list of GROUPs OF LINKs.
type GroupOfLinksRelStructure struct {
	StrictContainmentAggregationStructure
	GroupOfLinks []GroupOfLinks `xml:"GroupOfLinks" json:"GroupOfLinks"`
}

// GroupOfLinksVersionStructure represents the GroupOfLinks_VersionStructure element
// Type for GROUP OF LINKs.
type GroupOfLinksVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Links in group.
	Members *LinkRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// Point2 represents the Point2 element
// A 0-dimensional node of the network used for the spatial description of the network. POINTs may be located by a LOCATION in a given LOCATING SYSTEM.
type Point2 struct {
	PointVersionStructure
}

// Link represents the Link element
// LINK connecting two POINTs. An oriented spatial object of dimension 1 with view to the overall description of a network, describing a connection between two POINTs.
type Link struct {
	LinkVersionStructure
}

// PointOnLink represents the PointOnLink element
// A POINT on a LINK which is not needed for LINK definition, but may be used for other purposes, e.g. for purposes of AVM or PI, or for driver information.
type PointOnLink struct {
	PointOnLinkVersionedChildStructure
}

// TypeOfPoint represents the TypeOfPoint element
// A classification of POINTs according to their functional purpose.
type TypeOfPoint struct {
	TypeOfPointValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// TypeOfLink represents the TypeOfLink element
// A classification of LINKs according to their functional purpose.
type TypeOfLink struct {
	TypeOfLinkValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// GroupOfPoints represents the GroupOfPoints element
// A grouping of POINTs.
type GroupOfPoints struct {
	GroupOfPointsVersionStructure
}

// GroupOfLinks represents the GroupOfLinks element
// A grouping of LINKs.
type GroupOfLinks struct {
	GroupOfLinksVersionStructure
}

// ZonesInFrameRelStructure represents the zonesInFrame_RelStructure element
// Type for containment in frame of ZONEs.
type ZonesInFrameRelStructure struct {
	ContainmentAggregationStructure
	MobilityServiceConstraintZone []MobilityServiceConstraintZone `xml:"MobilityServiceConstraintZone,omitempty" json:"MobilityServiceConstraintZone,omitempty"`
	RoutingConstraintZone []RoutingConstraintZone `xml:"RoutingConstraintZone,omitempty" json:"RoutingConstraintZone,omitempty"`
	StopArea []StopArea `xml:"StopArea,omitempty" json:"StopArea,omitempty"`
	AccessZone []AccessZone `xml:"AccessZone,omitempty" json:"AccessZone,omitempty"`
	VehicleMeetingPlace []VehicleMeetingPlace1 `xml:"VehicleMeetingPlace,omitempty" json:"VehicleMeetingPlace,omitempty"`
	VehiclePoolingMeetingPlace []VehiclePoolingMeetingPlace `xml:"VehiclePoolingMeetingPlace,omitempty" json:"VehiclePoolingMeetingPlace,omitempty"`
	NetexOrgUkNetexVehicleMeetingPlace []VehicleMeetingPlace2 `xml:"VehicleMeetingPlace_,omitempty" json:"VehicleMeetingPlace_,omitempty"`
	HailAndRideArea []HailAndRideArea `xml:"HailAndRideArea,omitempty" json:"HailAndRideArea,omitempty"`
	FlexibleArea []FlexibleArea `xml:"FlexibleArea,omitempty" json:"FlexibleArea,omitempty"`
	FlexibleQuay []FlexibleQuay `xml:"FlexibleQuay,omitempty" json:"FlexibleQuay,omitempty"`
	FlexibleStopPlace []FlexibleStopPlace `xml:"FlexibleStopPlace,omitempty" json:"FlexibleStopPlace,omitempty"`
	Garage []Garage `xml:"Garage,omitempty" json:"Garage,omitempty"`
	EquipmentPlace []EquipmentPlace `xml:"EquipmentPlace,omitempty" json:"EquipmentPlace,omitempty"`
	TaxiStand []TaxiStand `xml:"TaxiStand,omitempty" json:"TaxiStand,omitempty"`
	VehicleStoppingPlace []VehicleStoppingPlace `xml:"VehicleStoppingPlace,omitempty" json:"VehicleStoppingPlace,omitempty"`
	BoardingPosition []BoardingPosition `xml:"BoardingPosition,omitempty" json:"BoardingPosition,omitempty"`
	AccessSpace []AccessSpace `xml:"AccessSpace,omitempty" json:"AccessSpace,omitempty"`
	Quay []Quay `xml:"Quay,omitempty" json:"Quay,omitempty"`
	PointOfInterestSpace []PointOfInterestSpace `xml:"PointOfInterestSpace,omitempty" json:"PointOfInterestSpace,omitempty"`
	ParkingComponent []ParkingComponent `xml:"ParkingComponent,omitempty" json:"ParkingComponent,omitempty"`
	VehicleStoppingPosition []VehicleStoppingPosition `xml:"VehicleStoppingPosition,omitempty" json:"VehicleStoppingPosition,omitempty"`
	VehiclePoolingParkingArea []VehiclePoolingParkingArea `xml:"VehiclePoolingParkingArea,omitempty" json:"VehiclePoolingParkingArea,omitempty"`
	VehicleSharingParkingArea []VehicleSharingParkingArea `xml:"VehicleSharingParkingArea,omitempty" json:"VehicleSharingParkingArea,omitempty"`
	TaxiParkingArea []TaxiParkingArea `xml:"TaxiParkingArea,omitempty" json:"TaxiParkingArea,omitempty"`
	ParkingArea []ParkingArea `xml:"ParkingArea,omitempty" json:"ParkingArea,omitempty"`
	MonitoredVehicleSharingParkingBay []MonitoredVehicleSharingParkingBay `xml:"MonitoredVehicleSharingParkingBay,omitempty" json:"MonitoredVehicleSharingParkingBay,omitempty"`
	VehiclePoolingParkingBay []VehiclePoolingParkingBay `xml:"VehiclePoolingParkingBay,omitempty" json:"VehiclePoolingParkingBay,omitempty"`
	VehicleSharingParkingBay []VehicleSharingParkingBay `xml:"VehicleSharingParkingBay,omitempty" json:"VehicleSharingParkingBay,omitempty"`
	ParkingBay []ParkingBay `xml:"ParkingBay,omitempty" json:"ParkingBay,omitempty"`
	PointOfInterestVehicleEntrance []PointOfInterestVehicleEntrance `xml:"PointOfInterestVehicleEntrance,omitempty" json:"PointOfInterestVehicleEntrance,omitempty"`
	PointOfInterestEntrance []PointOfInterestEntrance `xml:"PointOfInterestEntrance,omitempty" json:"PointOfInterestEntrance,omitempty"`
	ParkingPassengerEntrance []ParkingPassengerEntrance `xml:"ParkingPassengerEntrance,omitempty" json:"ParkingPassengerEntrance,omitempty"`
	ParkingEntranceForVehicles []ParkingEntranceForVehicles `xml:"ParkingEntranceForVehicles,omitempty" json:"ParkingEntranceForVehicles,omitempty"`
	StopPlaceVehicleEntrance []StopPlaceVehicleEntrance `xml:"StopPlaceVehicleEntrance,omitempty" json:"StopPlaceVehicleEntrance,omitempty"`
	StopPlaceEntrance []StopPlaceEntrance `xml:"StopPlaceEntrance,omitempty" json:"StopPlaceEntrance,omitempty"`
	Entrance []Entrance `xml:"Entrance,omitempty" json:"Entrance,omitempty"`
	PointOfInterest []PointOfInterest `xml:"PointOfInterest,omitempty" json:"PointOfInterest,omitempty"`
	Parking []Parking `xml:"Parking,omitempty" json:"Parking,omitempty"`
	TaxiRank []TaxiRank `xml:"TaxiRank,omitempty" json:"TaxiRank,omitempty"`
	StopPlace []StopPlace `xml:"StopPlace,omitempty" json:"StopPlace,omitempty"`
	ServiceSite []ServiceSite `xml:"ServiceSite,omitempty" json:"ServiceSite,omitempty"`
	TopographicPlace []TopographicPlace `xml:"TopographicPlace,omitempty" json:"TopographicPlace,omitempty"`
	Country []Country `xml:"Country,omitempty" json:"Country,omitempty"`
	AddressablePlace []AddressablePlace `xml:"AddressablePlace,omitempty" json:"AddressablePlace,omitempty"`
	PostalAddress []PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	RoadAddress []RoadAddress `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
	TransportAdministrativeZone []TransportAdministrativeZone `xml:"TransportAdministrativeZone,omitempty" json:"TransportAdministrativeZone,omitempty"`
	AdministrativeZone []AdministrativeZone `xml:"AdministrativeZone,omitempty" json:"AdministrativeZone,omitempty"`
	FareZone []FareZone `xml:"FareZone,omitempty" json:"FareZone,omitempty"`
	TariffZone []TariffZone `xml:"TariffZone,omitempty" json:"TariffZone,omitempty"`
	GeneralZone []GeneralZone `xml:"GeneralZone,omitempty" json:"GeneralZone,omitempty"`
	Zone []Zone `xml:"Zone,omitempty" json:"Zone,omitempty"`
}

// TariffZonesInFrameRelStructure represents the tariffZonesInFrame_RelStructure element
// Type for containment in frame of TARIFF ZONEs.
type TariffZonesInFrameRelStructure struct {
	ContainmentAggregationStructure
	FareZone []FareZone `xml:"FareZone,omitempty" json:"FareZone,omitempty"`
	TariffZone []TariffZone `xml:"TariffZone,omitempty" json:"TariffZone,omitempty"`
}

// ZoneVersionStructure represents the Zone_VersionStructure element
// Type for a ZONE.
type ZoneVersionStructure struct {
	GroupOfPointsVersionStructure
	// Classification of ZONE. Used for arbitrary documentation -.
	Types *TypeOfZoneRefsRelStructure `xml:"types,omitempty" json:"types,omitempty"`
	// Centre Coordinates of ZONE.
	Centroid *SimplePointVersionStructure `xml:"Centroid,omitempty" json:"Centroid,omitempty"`
	Polygon *Polygon `xml:"Polygon,omitempty" json:"Polygon,omitempty"`
	MultiSurface *MultiSurface `xml:"MultiSurface,omitempty" json:"MultiSurface,omitempty"`
	// Projections of ZONE onto another layer.
	Projections *ProjectionsRelStructure `xml:"projections,omitempty" json:"projections,omitempty"`
	// Parent ZONE that contains this ZONE.
	ParentZoneRef *ZoneRefStructure `xml:"ParentZoneRef,omitempty" json:"ParentZoneRef,omitempty"`
}

// GeneralZoneVersionStructure represents the GeneralZone_VersionStructure element
// Type for a General ZONE.
type GeneralZoneVersionStructure struct {
	ZoneVersionStructure
}

// TariffZoneVersionStructure represents the TariffZone_VersionStructure element
// Type for a TARIFF ZONE.
type TariffZoneVersionStructure struct {
	ZoneVersionStructure
	// Presentation values to use when rendering ZONE such as a colour.
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// Presentation values to use in printed material for ZONE such as a colour. +v1.1
	PrintedPresentation *PrintPresentationStructure `xml:"PrintedPresentation,omitempty" json:"PrintedPresentation,omitempty"`
}

// GroupOfTariffZonesVersionStructure represents the GroupOfTariffZones_VersionStructure element
// Type for GROUP OF TARIFF ZONEs.
type GroupOfTariffZonesVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// TARIFF ZONEs in GROUP OF TARIFF ZONEs.
	Members *TariffZoneRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// GroupOfTariffZonesRefStructure represents the GroupOfTariffZonesRefStructure element
// Type for a GROUP OF TARIFF ZONEs.
type GroupOfTariffZonesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// TypeOfZoneValueStructure represents the TypeOfZone_ValueStructure element
// Type for a TYPE OF ZONE.
type TypeOfZoneValueStructure struct {
	TypeOfEntityVersionStructure
}

// ZoneDerivedViewStructure represents the Zone_DerivedViewStructure element
// Type for SCHEDULED STOP POINT VIEW.
type ZoneDerivedViewStructure struct {
	DerivedViewStructure
	MobilityServiceConstraintZoneRef *MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef *StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef *TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef *AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef *AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef *FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef *TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef *ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
	// Name of Stop Point.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	TypeOfZoneRef *TypeOfZoneRef `xml:"TypeOfZoneRef,omitempty" json:"TypeOfZoneRef,omitempty"`
}

// Zone represents the Zone element
// A two-dimensional PLACE within the service area of a public transport operator (administrative zone, TARIFF ZONE, ACCESS ZONE, etc.).
type Zone struct {
	ZoneVersionStructure
}

// GeneralZone represents the GeneralZone element
// A GENERAL ZONE used to define a zonal fare structure in a zone-counting or zone-matrix system.
type GeneralZone struct {
	GeneralZoneVersionStructure
}

// TariffZone represents the TariffZone element
// A ZONE used to define a zonal fare structure in a zone-counting or zone-matrix system.
type TariffZone struct {
	TariffZoneVersionStructure
}

// GroupOfTariffZones represents the GroupOfTariffZones element
// A grouping of TARIFF ZONEs which will be commonly referenced for a specific purpose.
type GroupOfTariffZones struct {
	GroupOfTariffZonesVersionStructure
}

// GroupOfTariffZonesRef represents the GroupOfTariffZonesRef element
// Reference to a GROUP OF TARIFF ZONEs.
type GroupOfTariffZonesRef struct {
	GroupOfTariffZonesRefStructure
}

// TypeOfZone represents the TypeOfZone element
// Classification of a ZONe.
type TypeOfZone struct {
	TypeOfZoneValueStructure
}

// ZoneView represents the ZoneView element
// Simplified view of SCHEDULED STOP POINT. Includes derived some propertries of a stop.
type ZoneView struct {
	ZoneDerivedViewStructure
}

// OrganisationsInFrameRelStructure represents the organisationsInFrame_RelStructure element
// Type for containment in frame of ORGANISATION.
type OrganisationsInFrameRelStructure struct {
	ContainmentAggregationStructure
	RetailConsortium []RetailConsortium `xml:"RetailConsortium,omitempty" json:"RetailConsortium,omitempty"`
	ServicedOrganisation []ServicedOrganisation `xml:"ServicedOrganisation,omitempty" json:"ServicedOrganisation,omitempty"`
	GeneralOrganisation []GeneralOrganisation `xml:"GeneralOrganisation,omitempty" json:"GeneralOrganisation,omitempty"`
	ManagementAgent []ManagementAgent `xml:"ManagementAgent,omitempty" json:"ManagementAgent,omitempty"`
	TravelAgent []TravelAgent `xml:"TravelAgent,omitempty" json:"TravelAgent,omitempty"`
	OtherOrganisation []OtherOrganisation `xml:"OtherOrganisation,omitempty" json:"OtherOrganisation,omitempty"`
	OnlineServiceOperator []OnlineServiceOperator `xml:"OnlineServiceOperator,omitempty" json:"OnlineServiceOperator,omitempty"`
	Authority []Authority `xml:"Authority,omitempty" json:"Authority,omitempty"`
	Operator []Operator `xml:"Operator,omitempty" json:"Operator,omitempty"`
}

// DepartmentsInFrameRelStructure represents the departmentsInFrame_RelStructure element
// Type for containment in frame of DEPARTMENTs.
type DepartmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	Department []Department `xml:"Department" json:"Department"`
}

// OrganisationVersionStructure represents the Organisation_VersionStructure element
// Type for an ORGANISATION.
type OrganisationVersionStructure struct {
	DataManagedObjectStructure
	// Public code to use for ORGANISATION.
	PublicCode *PrivateCodeStructure `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Company registration number including Country prefix.
	CompanyNumber *string `xml:"CompanyNumber,omitempty" json:"CompanyNumber,omitempty"`
	// Company registered tax number including Country prefix.
	Vatnumber *string `xml:"VATNumber,omitempty" json:"VATNumber,omitempty"`
	// An alternative  code that uniquely identifies the OPERATOR. Specifically for use in AVMS systems. For VDV compatibility.
	ExternalOperatorRef *ExternalObjectRefStructure `xml:"ExternalOperatorRef,omitempty" json:"ExternalOperatorRef,omitempty"`
	// The name of the ORGANISATION.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// A short name of the ORGANISATION.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// The legal name of the ORGANISATION, if different from Name.
	LegalName *MultilingualString `xml:"LegalName,omitempty" json:"LegalName,omitempty"`
	// The Trading name of the ORGANISATION given to the Public - If different from Name or Legal Name.
	TradingName *MultilingualString `xml:"TradingName,omitempty" json:"TradingName,omitempty"`
	// Alternativie names for ORGANISATION.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// Description of ORGANISATION.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Further remarks about ORGANISATION.
	Remarks *MultilingualString `xml:"Remarks,omitempty" json:"Remarks,omitempty"`
	Locale *Locale `xml:"Locale,omitempty" json:"Locale,omitempty"`
	// Contact details for ORGANISATION for Public use.
	ContactDetails *ContactStructure `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`
	// Contact details for ORGANISATION Private use.
	PrivateContactDetails *ContactStructure `xml:"PrivateContactDetails,omitempty" json:"PrivateContactDetails,omitempty"`
	// Type of ORGANISATION.
	OrganisationType *OrganisationTypeEnumeration `xml:"OrganisationType,omitempty" json:"OrganisationType,omitempty"`
	// Classification of OPERATOR. Used for arbitrary documentation.
	TypesOfOrganisation *TypeOfOrganisationRefsRelStructure `xml:"typesOfOrganisation,omitempty" json:"typesOfOrganisation,omitempty"`
	// Whether the ORGANISATION is active. Default is true.
	Status *bool `xml:"Status,omitempty" json:"Status,omitempty"`
	// Period when the ORGANISATION is valid.[NOTE COULD DROP THis NOW that have VALIDITY PERIOD on base.
	ValidityPeriod *ValidityPeriod `xml:"ValidityPeriod,omitempty" json:"ValidityPeriod,omitempty"`
	// Parts of the ORGANISATION.
	Parts *OrganisationPartsRelStructure `xml:"parts,omitempty" json:"parts,omitempty"`
	// Own RESPONSIBILITY SETs V1.1
	OwnResponsibilitySets *ResponsibilitySetsRelStructure `xml:"ownResponsibilitySets,omitempty" json:"ownResponsibilitySets,omitempty"`
	// Delegated responsibility SETS.
	DelegatedResponsibilitySets *ResponsibilitySetsRelStructure `xml:"delegatedResponsibilitySets,omitempty" json:"delegatedResponsibilitySets,omitempty"`
	// Other ORGANISATIONs that delegate to this   ORGANISATION. (TAP TSI B1.)
	DelegatedFrom *OrganisationRefsRelStructure `xml:"delegatedFrom,omitempty" json:"delegatedFrom,omitempty"`
	// Related ORGABISATIONs +v1.2,2
	RelatedOrganisations *RelatedOrganisationsRelStructure `xml:"relatedOrganisations,omitempty" json:"relatedOrganisations,omitempty"`
}

// ValidityPeriod represents the ValidityPeriod element
type ValidityPeriod struct {
	ValidBetweenVersionStructure
	// Name of VALIDITY CONDITION.
	Name interface{} `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VALIDITY CONDITION.
	Description interface{} `xml:"Description,omitempty" json:"Description,omitempty"`
	// Entity to which condition specifically attaches.
	ConditionedObjectRef interface{} `xml:"ConditionedObjectRef,omitempty" json:"ConditionedObjectRef,omitempty"`
	// CONDITION with which this rule is logically ANDed.
	WithConditionRef interface{} `xml:"WithConditionRef,omitempty" json:"WithConditionRef,omitempty"`
	// A list of alternative Key values for an element.
	KeyList interface{} `xml:"keyList,omitempty" json:"keyList,omitempty"`
	Extensions interface{} `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// OrganisationPartsRelStructure represents the organisationParts_RelStructure element
// Type for a list of ORGANISATION PARTs.
type OrganisationPartsRelStructure struct {
	ContainmentAggregationStructure
	ControlCentreRef []ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	OrganisationalUnitRef []OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	DepartmentRef []DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
	OrganisationPartRef []OrganisationPartRef `xml:"OrganisationPartRef,omitempty" json:"OrganisationPartRef,omitempty"`
	ControlCentre []ControlCentre `xml:"ControlCentre,omitempty" json:"ControlCentre,omitempty"`
	OperatingDepartment []OperatingDepartment `xml:"OperatingDepartment,omitempty" json:"OperatingDepartment,omitempty"`
	OrganisationalUnit []OrganisationalUnit `xml:"OrganisationalUnit,omitempty" json:"OrganisationalUnit,omitempty"`
	Department []Department `xml:"Department,omitempty" json:"Department,omitempty"`
	OrganisationPart []OrganisationPart `xml:"OrganisationPart,omitempty" json:"OrganisationPart,omitempty"`
}

// OrganisationPartVersionStructure represents the OrganisationPart_VersionStructure element
// Type for an ORGANISATION PART.
type OrganisationPartVersionStructure struct {
	DataManagedObjectStructure
	// Name of ORGANISATION PART.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Name of DEPARTMENT.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Description of ORGANISATIONAL UNIT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Additional public code used for department.
	PublicCode *PrivateCodeStructure `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Contact details for ORGANISATION PART for Public use.
	ContactDetails *ContactStructure `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`
	// Coordinates of ORGANISATIONAL UNIT.
	Location *LocationStructure `xml:"Location,omitempty" json:"Location,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	TypeOfOrganisationPartRef *TypeOfOrganisationPartRef `xml:"TypeOfOrganisationPartRef,omitempty" json:"TypeOfOrganisationPartRef,omitempty"`
	// Zones managed by ORGANISATION PART.
	AdministrativeZones *AdministrativeZonesRelStructure `xml:"administrativeZones,omitempty" json:"administrativeZones,omitempty"`
	// Own RESPONSIBILITY SETs V1.1
	OwnResponsibilitySets *ResponsibilitySetsRelStructure `xml:"ownResponsibilitySets,omitempty" json:"ownResponsibilitySets,omitempty"`
	// Delegated responsibility SETS.
	DelegatedResponsibilitySets *ResponsibilitySetsRelStructure `xml:"delegatedResponsibilitySets,omitempty" json:"delegatedResponsibilitySets,omitempty"`
	// Other ORGANISATIONs that delegate to this   ORGANISATION. (TAP TSI B1.)
	DelegatedFrom *OrganisationRefsRelStructure `xml:"delegatedFrom,omitempty" json:"delegatedFrom,omitempty"`
}

// DepartmentsRelStructure represents the departments_RelStructure element
// Type for a list of DEPARTMENTs.
type DepartmentsRelStructure struct {
	ContainmentAggregationStructure
	DepartmentRef []DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
	Department []Department `xml:"Department,omitempty" json:"Department,omitempty"`
}

// DepartmentVersionStructure represents the Department_VersionStructure element
// Type for a DEPARTMENT.
type DepartmentVersionStructure struct {
	OrganisationPartVersionStructure
	TypeOfOperationRef *TypeOfOperationRef `xml:"TypeOfOperationRef,omitempty" json:"TypeOfOperationRef,omitempty"`
	// Name of DEPARTMENT.
	Units *OrganisationalUnitRefsRelStructure `xml:"units,omitempty" json:"units,omitempty"`
}

// OrganisationalUnitsRelStructure represents the organisationalUnits_RelStructure element
// Type for a list of ORGANISATIONAL UNITs.
type OrganisationalUnitsRelStructure struct {
	ContainmentAggregationStructure
	OrganisationalUnitRef []OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	OrganisationalUnit []OrganisationalUnit `xml:"OrganisationalUnit,omitempty" json:"OrganisationalUnit,omitempty"`
}

// OrganisationalUnitVersionStructure represents the OrganisationalUnit_VersionStructure element
// Type for a ORGANISATIONAL UNIT.
type OrganisationalUnitVersionStructure struct {
	OrganisationPartVersionStructure
	DepartmentRef *DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
}

// RelatedOrganisationsRelStructure represents the relatedOrganisations_RelStructure element
// Type for a list of RELATED ORGANISATIONs.
type RelatedOrganisationsRelStructure struct {
	ContainmentAggregationStructure
	RelatedOrganisation []RelatedOrganisation `xml:"RelatedOrganisation" json:"RelatedOrganisation"`
}

// RelatedOrganisationVersionStructure represents the RelatedOrganisation_VersionStructure element
// Type for an RELATED ORGANISATION.
type RelatedOrganisationVersionStructure struct {
	VersionedChildStructure
	// Name of RELATED ORGANISATION.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of the nature pf the  Relationship.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// Role of the related Organbisation
	OrganisationRoleType *OrganisationRoleEnumeration `xml:"OrganisationRoleType,omitempty" json:"OrganisationRoleType,omitempty"`
	ResponsibilityRoleRef *ResponsibilityRoleRef `xml:"ResponsibilityRoleRef,omitempty" json:"ResponsibilityRoleRef,omitempty"`
}

// AdministrativeZonesRelStructure represents the administrativeZones_RelStructure element
// Type for a list of ADMINISTRATIVE ZONEs.
type AdministrativeZonesRelStructure struct {
	ContainmentAggregationStructure
	AdministrativeZoneRef []AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	TransportAdministrativeZone []TransportAdministrativeZone `xml:"TransportAdministrativeZone,omitempty" json:"TransportAdministrativeZone,omitempty"`
	AdministrativeZone []AdministrativeZone `xml:"AdministrativeZone,omitempty" json:"AdministrativeZone,omitempty"`
}

// AdministrativeZoneVersionStructure represents the AdministrativeZone_VersionStructure element
// Type for an ADMINISTRATIVE ZONE.
type AdministrativeZoneVersionStructure struct {
	ZoneVersionStructure
	// Public Code assosociated with Zone
	PublicCode *PrivateCodeStructure `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// RESPONSIBILITY SETs allocated to ADMINISTRATIVE ZONE.
	Responsibilities *ResponsibilitySetsRelStructure `xml:"responsibilities,omitempty" json:"responsibilities,omitempty"`
	// CODESPACEs belonging to ADMINISTRATIVE ZONE.
	CodespaceAssignments *CodespaceAssignmentsRelStructure `xml:"codespaceAssignments,omitempty" json:"codespaceAssignments,omitempty"`
	// Subzones of  ADMINISTRATIVE Zone; ie. strict subzones that are administrative subdivisions of the parent.  These should not contradict Parent ZONE references..
	Subzones *AdministrativeZonesRelStructure `xml:"subzones,omitempty" json:"subzones,omitempty"`
}

// CodespaceAssignmentsRelStructure represents the codespaceAssignments_RelStructure element
// Type for a list of CODESPACE  ASSIGNMENT.
type CodespaceAssignmentsRelStructure struct {
	StrictContainmentAggregationStructure
	// Assignment of use of a CODESPACE with responsibility for managing data within a given ZONE.
	CodespaceAssignment []CodespaceAssignmentVersionedChildStructure `xml:"CodespaceAssignment" json:"CodespaceAssignment"`
}

// CodespaceAssignmentVersionedChildStructure represents the CodespaceAssignment_VersionedChildStructure element
// Type for a CODESPACE ASSIGNMENT.
type CodespaceAssignmentVersionedChildStructure struct {
	VersionedChildStructure
	CodespaceRef *CodespaceRef `xml:"CodespaceRef,omitempty" json:"CodespaceRef,omitempty"`
	Codespace *Codespace `xml:"Codespace,omitempty" json:"Codespace,omitempty"`
	AdministrativeZoneRef *AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	// Start date for effectiveness of CODESPACE ASSIGNMENT.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// End date for effectiveness of CODESPACE ASSIGNMENT. Date is INCLUSIVE.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	// Name of class whose names are being assigned.
	NameOfClass *string `xml:"NameOfClass,omitempty" json:"NameOfClass,omitempty"`
	// Code prefix assigned uniquely to zone. Used to allocate new ids If CODESPACE also specified, used within CODESPACE. Only this ADMINISTRATIVE ZONE may allocate codes beginning with these prefixes.
	CodePrefix []string `xml:"CodePrefix,omitempty" json:"CodePrefix,omitempty"`
	// Start range for codes allocateed by Organisation under this CODESPACE ASSIGNMENT. +V1.1
	StartValue *string `xml:"StartValue,omitempty" json:"StartValue,omitempty"`
	// End range for codes allocateed by Organisation under this CODESPACE ASSIGNMENT. +V1.1
	EndValue *string `xml:"EndValue,omitempty" json:"EndValue,omitempty"`
	// Maximum Length for code. +V1.1
	MaximumLength *int `xml:"MaximumLength,omitempty" json:"MaximumLength,omitempty"`
	// Description of CODESPACE ASSIGNMENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	TypeOfCodespaceAssignmentRef *TypeOfCodespaceAssignmentRef `xml:"TypeOfCodespaceAssignmentRef,omitempty" json:"TypeOfCodespaceAssignmentRef,omitempty"`
}

// TypeOfCodespaceAssignmentValueStructure represents the TypeOfCodespaceAssignment_ValueStructure element
// Type for a TYPE OF CODESPACE ASSIGNMENT
type TypeOfCodespaceAssignmentValueStructure struct {
	TypeOfValueVersionStructure
}

// TypeOfOrganisationValueStructure represents the TypeOfOrganisation_ValueStructure element
// Type for a TYPE OF ORGANISATION.
type TypeOfOrganisationValueStructure struct {
	TypeOfEntityVersionStructure
}

// TypeOfOrganisationPartValueStructure represents the TypeOfOrganisationPart_ValueStructure element
// Type for a TYPE OF ORGANISATION PART.
type TypeOfOrganisationPartValueStructure struct {
	TypeOfEntityVersionStructure
}

// TypeOfOperationValueStructure represents the TypeOfOperation_ValueStructure element
// Type for a TYPE OF OPERATION.
type TypeOfOperationValueStructure struct {
	TypeOfEntityVersionStructure
}

// OrganisationDerivedViewStructure represents the Organisation_DerivedViewStructure element
// Type for an ORGANISATION VIEW.
type OrganisationDerivedViewStructure struct {
	DerivedViewStructure
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// The name of the ORGANISATION.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// A short name of the ORGANISATION.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// The legal name of the ORGANISATION, if different from Name.
	LegalName *MultilingualString `xml:"LegalName,omitempty" json:"LegalName,omitempty"`
	// The Trading name of the ORGANISATION given to the Public - If different from Name or Legal Name.
	TradingName *MultilingualString `xml:"TradingName,omitempty" json:"TradingName,omitempty"`
	// Alternativie names for ORGANISATION.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// Contact details for ORGANISATION for Public use.
	ContactDetails *ContactStructure `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`
}

// ContactsRelStructure represents the contacts_RelStructure element
// Type for containment in frame of reusable CONTACT details. +v1.2.2
type ContactsRelStructure struct {
	ContainmentAggregationStructure
	Contact Contact `xml:"Contact" json:"Contact"`
}

// ContactVersionStructure represents the Contact_VersionStructure element
// Type for an CONTACT.
type ContactVersionStructure struct {
	DataManagedObjectStructure
	// The name of the CONTACT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Contact details for CONTACT.
	ContactDetails *ContactDetailsStructure `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`
	// Classification of ContactTy[e. Used for arbitrary documentation.
	ContactType *ContactTypeEnumeration `xml:"ContactType,omitempty" json:"ContactType,omitempty"`
}

// OrganisationPart represents the OrganisationPart element
// A named subdivision of an ORGANISATION.
type OrganisationPart struct {
	OrganisationPartVersionStructure
}

// Department represents the Department element
// Department of an ORGANISATION.
type Department struct {
	DepartmentVersionStructure
}

// OrganisationalUnit represents the OrganisationalUnit element
// OrganisationalUnit of an ORGANISATION.
type OrganisationalUnit struct {
	OrganisationalUnitVersionStructure
}

// RelatedOrganisation represents the RelatedOrganisation element
// A formal relationship with another  ORGANISATION. +v1.2.2
type RelatedOrganisation struct {
	RelatedOrganisationVersionStructure
}

// AdministrativeZone represents the AdministrativeZone element
// A ZONE relating to the management responsibilities of an ORGANISATION. For example to allocate bus stop identifiers for a region.
type AdministrativeZone struct {
	AdministrativeZoneVersionStructure
}

// CodespaceAssignment represents the CodespaceAssignment element
// Assignment of use of a CODESPACE to identify data within a given ZONE.
type CodespaceAssignment struct {
	CodespaceAssignmentVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// TypeOfCodespaceAssignment represents the TypeOfCodespaceAssignment element
// Classification of an CODESPACE  ASSIGNMENT
type TypeOfCodespaceAssignment struct {
	TypeOfCodespaceAssignmentValueStructure
}

// TypeOfOrganisation represents the TypeOfOrganisation element
// Classification of an ORGANISATION.
type TypeOfOrganisation struct {
	TypeOfOrganisationValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// TypeOfOrganisationPart represents the TypeOfOrganisationPart element
// Classification of an ORGANISATION PART.
type TypeOfOrganisationPart struct {
	TypeOfOrganisationPartValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// TypeOfOperation represents the TypeOfOperation element
// Classification of an OPERATION.
type TypeOfOperation struct {
	TypeOfOperationValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// OrganisationView represents the OrganisationView element
// Simplified view of ORGANISATION. All data except the identifier will be derived through the referenced to the Organisation.
type OrganisationView struct {
	OrganisationDerivedViewStructure
}

// Contact represents the Contact element
// Reusable CONTACT details for an ORGANISATION or other entity. +v1.2.2
type Contact struct {
	ContactVersionStructure
}

// ZoneProjectionVersionStructure represents the ZoneProjection_VersionStructure element
// Type for a ZONE PROJECTION.
type ZoneProjectionVersionStructure struct {
	ProjectionVersionStructure
	// ZONE being projected.
	ProjectedZoneRef ZoneRefStructure `xml:"ProjectedZoneRef" json:"ProjectedZoneRef"`
	// Reference to ZONE onto to which ZONE projects.
	ProjectToZoneRef *ZoneRefStructure `xml:"ProjectToZoneRef,omitempty" json:"ProjectToZoneRef,omitempty"`
	// Reference to POINT to which centre of ZONE projects.
	ProjectToPointRef *PointRefStructure `xml:"ProjectToPointRef,omitempty" json:"ProjectToPointRef,omitempty"`
	// Sequence of points making up PROJECTION.
	Points *PointRefsRelStructure `xml:"points,omitempty" json:"points,omitempty"`
}

// ZoneProjection represents the ZoneProjection element
// An oriented correspondence from one ZONE in a source layer,  onto a target entity : e.g.  POINT, COMPLEX FEATURE, within a defined TYPE OF PROJECTION.
type ZoneProjection struct {
	ZoneProjectionVersionStructure
}

// AccessModeEnumeration represents the AccessModeEnumeration enumeration
// Allowed values for Access MODEs for SITEs, VEHICLE MEETING POINTS and TRANSFER and for monomodal non-public transport OTHER LEG in TRIP.
type AccessModeEnumeration string

const (
	// AccessModeEnumerationFoot represents foot
	AccessModeEnumerationFoot AccessModeEnumeration = "foot"
	// AccessModeEnumerationBicycle represents bicycle
	AccessModeEnumerationBicycle AccessModeEnumeration = "bicycle"
	// AccessModeEnumerationBoat represents boat
	AccessModeEnumerationBoat AccessModeEnumeration = "boat"
	// AccessModeEnumerationCar represents car
	AccessModeEnumerationCar AccessModeEnumeration = "car"
	// AccessModeEnumerationTaxi represents taxi
	// Taxi can now be modeled as VEHICLE MODE as well.
	AccessModeEnumerationTaxi AccessModeEnumeration = "taxi"
	// AccessModeEnumerationShuttle represents shuttle
	AccessModeEnumerationShuttle AccessModeEnumeration = "shuttle"
	// AccessModeEnumerationSki represents ski
	AccessModeEnumerationSki AccessModeEnumeration = "ski"
	// AccessModeEnumerationSkate represents skate
	AccessModeEnumerationSkate AccessModeEnumeration = "skate"
	// AccessModeEnumerationMotorcycle represents motorcycle
	AccessModeEnumerationMotorcycle AccessModeEnumeration = "motorcycle"
	// AccessModeEnumerationScooter represents scooter
	AccessModeEnumerationScooter AccessModeEnumeration = "scooter"
)

// VehicleModeEnumeration represents the VehicleModeEnumeration enumeration
// Allowed values for MODES of Public Transport applicable to timetabled public transport.
type VehicleModeEnumeration string

const (
	// VehicleModeEnumerationAir represents air
	VehicleModeEnumerationAir VehicleModeEnumeration = "air"
	// VehicleModeEnumerationBus represents bus
	VehicleModeEnumerationBus VehicleModeEnumeration = "bus"
	// VehicleModeEnumerationCoach represents coach
	VehicleModeEnumerationCoach VehicleModeEnumeration = "coach"
	// VehicleModeEnumerationFerry represents ferry
	VehicleModeEnumerationFerry VehicleModeEnumeration = "ferry"
	// VehicleModeEnumerationMetro represents metro
	VehicleModeEnumerationMetro VehicleModeEnumeration = "metro"
	// VehicleModeEnumerationRail represents rail
	VehicleModeEnumerationRail VehicleModeEnumeration = "rail"
	// VehicleModeEnumerationTrolleyBus represents trolleyBus
	VehicleModeEnumerationTrolleyBus VehicleModeEnumeration = "trolleyBus"
	// VehicleModeEnumerationTram represents tram
	VehicleModeEnumerationTram VehicleModeEnumeration = "tram"
	// VehicleModeEnumerationWater represents water
	VehicleModeEnumerationWater VehicleModeEnumeration = "water"
	// VehicleModeEnumerationCableway represents cableway
	VehicleModeEnumerationCableway VehicleModeEnumeration = "cableway"
	// VehicleModeEnumerationFunicular represents funicular
	VehicleModeEnumerationFunicular VehicleModeEnumeration = "funicular"
	// VehicleModeEnumerationLift represents lift
	VehicleModeEnumerationLift VehicleModeEnumeration = "lift"
	// VehicleModeEnumerationSnowAndIce represents snowAndIce
	VehicleModeEnumerationSnowAndIce VehicleModeEnumeration = "snowAndIce"
	// VehicleModeEnumerationOther represents other
	VehicleModeEnumerationOther VehicleModeEnumeration = "other"
)

// AllModesEnumeration represents the AllModesEnumeration enumeration
// Allowed values for r MODES: TPEG pti_table 01.
type AllModesEnumeration string

const (
	// AllModesEnumerationAll represents all
	AllModesEnumerationAll AllModesEnumeration = "all"
	// AllModesEnumerationAnyMode represents anyMode
	AllModesEnumerationAnyMode AllModesEnumeration = "anyMode"
	// AllModesEnumerationUnknown represents unknown
	AllModesEnumerationUnknown AllModesEnumeration = "unknown"
	// AllModesEnumerationAir represents air
	AllModesEnumerationAir AllModesEnumeration = "air"
	// AllModesEnumerationBus represents bus
	AllModesEnumerationBus AllModesEnumeration = "bus"
	// AllModesEnumerationTrolleyBus represents trolleyBus
	AllModesEnumerationTrolleyBus AllModesEnumeration = "trolleyBus"
	// AllModesEnumerationTram represents tram
	AllModesEnumerationTram AllModesEnumeration = "tram"
	// AllModesEnumerationCoach represents coach
	AllModesEnumerationCoach AllModesEnumeration = "coach"
	// AllModesEnumerationRail represents rail
	AllModesEnumerationRail AllModesEnumeration = "rail"
	// AllModesEnumerationIntercityRail represents intercityRail
	AllModesEnumerationIntercityRail AllModesEnumeration = "intercityRail"
	// AllModesEnumerationUrbanRail represents urbanRail
	AllModesEnumerationUrbanRail AllModesEnumeration = "urbanRail"
	// AllModesEnumerationMetro represents metro
	AllModesEnumerationMetro AllModesEnumeration = "metro"
	// AllModesEnumerationWater represents water
	AllModesEnumerationWater AllModesEnumeration = "water"
	// AllModesEnumerationFerry represents ferry
	AllModesEnumerationFerry AllModesEnumeration = "ferry"
	// AllModesEnumerationCableway represents cableway
	AllModesEnumerationCableway AllModesEnumeration = "cableway"
	// AllModesEnumerationFunicular represents funicular
	AllModesEnumerationFunicular AllModesEnumeration = "funicular"
	// AllModesEnumerationLift represents lift
	AllModesEnumerationLift AllModesEnumeration = "lift"
	// AllModesEnumerationSnowAndIce represents snowAndIce
	AllModesEnumerationSnowAndIce AllModesEnumeration = "snowAndIce"
	// AllModesEnumerationTaxi represents taxi
	AllModesEnumerationTaxi AllModesEnumeration = "taxi"
	// AllModesEnumerationSelfDrive represents selfDrive
	// See pti12_x.
	AllModesEnumerationSelfDrive AllModesEnumeration = "selfDrive"
	// AllModesEnumerationFoot represents foot
	AllModesEnumerationFoot AllModesEnumeration = "foot"
	// AllModesEnumerationBicycle represents bicycle
	AllModesEnumerationBicycle AllModesEnumeration = "bicycle"
	// AllModesEnumerationMotorcycle represents motorcycle
	AllModesEnumerationMotorcycle AllModesEnumeration = "motorcycle"
	// AllModesEnumerationScooter represents scooter
	AllModesEnumerationScooter AllModesEnumeration = "scooter"
	// AllModesEnumerationCar represents car
	AllModesEnumerationCar AllModesEnumeration = "car"
	// AllModesEnumerationShuttle represents shuttle
	AllModesEnumerationShuttle AllModesEnumeration = "shuttle"
)

// AllVehicleModesOfTransportEnumeration represents the AllVehicleModesOfTransportEnumeration enumeration
// Allowed values for MODES of Transport : roughly based on TPEG pti_table 01. AllVehicleModesOfTransportEnumeration is the master list of Vehicle Modes in Transmodel. If a specific value applies, then general values like "other" are not to be used.
type AllVehicleModesOfTransportEnumeration string

const (
	// AllVehicleModesOfTransportEnumerationAll represents all
	// If all modes are meant.
	AllVehicleModesOfTransportEnumerationAll AllVehicleModesOfTransportEnumeration = "all"
	// AllVehicleModesOfTransportEnumerationUnknown represents unknown
	// Use only when no other entry applies.
	AllVehicleModesOfTransportEnumerationUnknown AllVehicleModesOfTransportEnumeration = "unknown"
	// AllVehicleModesOfTransportEnumerationBus represents bus
	AllVehicleModesOfTransportEnumerationBus AllVehicleModesOfTransportEnumeration = "bus"
	// AllVehicleModesOfTransportEnumerationTrolleyBus represents trolleyBus
	// Special type of bus with two overhead wires using spring-loaded trolley poles.
	AllVehicleModesOfTransportEnumerationTrolleyBus AllVehicleModesOfTransportEnumeration = "trolleyBus"
	// AllVehicleModesOfTransportEnumerationTram represents tram
	AllVehicleModesOfTransportEnumerationTram AllVehicleModesOfTransportEnumeration = "tram"
	// AllVehicleModesOfTransportEnumerationCoach represents coach
	// Bus for longer-distance service. This value specialises from bus through regulation, that the cross multiple metropolitan regions and that all passenger area seating. Also the seating layout is different.
	AllVehicleModesOfTransportEnumerationCoach AllVehicleModesOfTransportEnumeration = "coach"
	// AllVehicleModesOfTransportEnumerationRail represents rail
	AllVehicleModesOfTransportEnumerationRail AllVehicleModesOfTransportEnumeration = "rail"
	// AllVehicleModesOfTransportEnumerationIntercityRail represents intercityRail
	// DEPRECATED. Use mode rail with RailSubmode longDistance.
	AllVehicleModesOfTransportEnumerationIntercityRail AllVehicleModesOfTransportEnumeration = "intercityRail"
	// AllVehicleModesOfTransportEnumerationUrbanRail represents urbanRail
	// DEPRECATED. Use mode metro with MetroSubmode urbanRail (or in some few cases rail with RailSubmode local).
	AllVehicleModesOfTransportEnumerationUrbanRail AllVehicleModesOfTransportEnumeration = "urbanRail"
	// AllVehicleModesOfTransportEnumerationMetro represents metro
	// Within an urban area. For underground and railway.
	AllVehicleModesOfTransportEnumerationMetro AllVehicleModesOfTransportEnumeration = "metro"
	// AllVehicleModesOfTransportEnumerationAir represents air
	// All air related mode. No special distinction is made.
	AllVehicleModesOfTransportEnumerationAir AllVehicleModesOfTransportEnumeration = "air"
	// AllVehicleModesOfTransportEnumerationWater represents water
	// Most water related modes. The only specialisation is the mode ferry. In Transmodel also ship was used for this mode.
	AllVehicleModesOfTransportEnumerationWater AllVehicleModesOfTransportEnumeration = "water"
	// AllVehicleModesOfTransportEnumerationCableway represents cableway
	// Can be only two cabines or multiple.
	AllVehicleModesOfTransportEnumerationCableway AllVehicleModesOfTransportEnumeration = "cableway"
	// AllVehicleModesOfTransportEnumerationFunicular represents funicular
	// Cable railway on steep slope using two counterbalanced carriages.
	AllVehicleModesOfTransportEnumerationFunicular AllVehicleModesOfTransportEnumeration = "funicular"
	// AllVehicleModesOfTransportEnumerationSnowAndIce represents snowAndIce
	// A collection for all modes involving snow and ice.
	AllVehicleModesOfTransportEnumerationSnowAndIce AllVehicleModesOfTransportEnumeration = "snowAndIce"
	// AllVehicleModesOfTransportEnumerationTaxi represents taxi
	AllVehicleModesOfTransportEnumerationTaxi AllVehicleModesOfTransportEnumeration = "taxi"
	// AllVehicleModesOfTransportEnumerationFerry represents ferry
	// Ferry can be passenger ferries and/or car ferries. The specialisation from water is the detailed schedule and usually the very rigid pattern with only a few stops on the route.
	AllVehicleModesOfTransportEnumerationFerry AllVehicleModesOfTransportEnumeration = "ferry"
	// AllVehicleModesOfTransportEnumerationLift represents lift
	// General Mode for elevators and for Modes moved by cable. Especially lifts are not only vertical elevators. If a better specialisation applies (like cableway) use that.
	AllVehicleModesOfTransportEnumerationLift AllVehicleModesOfTransportEnumeration = "lift"
	// AllVehicleModesOfTransportEnumerationSelfDrive represents selfDrive
	// For all alternative modes where a vehicle is driven by the user. See pti12_x.
	AllVehicleModesOfTransportEnumerationSelfDrive AllVehicleModesOfTransportEnumeration = "selfDrive"
	// AllVehicleModesOfTransportEnumerationAnyMode represents anyMode
	// To be avoided.
	AllVehicleModesOfTransportEnumerationAnyMode AllVehicleModesOfTransportEnumeration = "anyMode"
	// AllVehicleModesOfTransportEnumerationOther represents other
	// Use only when no other entry applies.
	AllVehicleModesOfTransportEnumerationOther AllVehicleModesOfTransportEnumeration = "other"
)

// StopTypeEnumeration represents the StopTypeEnumeration enumeration
// Types of STOP PLACE.
type StopTypeEnumeration string

const (
	// StopTypeEnumerationStopTypeEnumerationOnstreetBus represents onstreetBus
	StopTypeEnumerationStopTypeEnumerationOnstreetBus StopTypeEnumeration = "onstreetBus"
	// StopTypeEnumerationStopTypeEnumerationOnstreetTram represents onstreetTram
	StopTypeEnumerationStopTypeEnumerationOnstreetTram StopTypeEnumeration = "onstreetTram"
	// StopTypeEnumerationStopTypeEnumerationAirport represents airport
	StopTypeEnumerationStopTypeEnumerationAirport StopTypeEnumeration = "airport"
	// StopTypeEnumerationStopTypeEnumerationRailStation represents railStation
	StopTypeEnumerationStopTypeEnumerationRailStation StopTypeEnumeration = "railStation"
	// StopTypeEnumerationStopTypeEnumerationMetroStation represents metroStation
	StopTypeEnumerationStopTypeEnumerationMetroStation StopTypeEnumeration = "metroStation"
	// StopTypeEnumerationStopTypeEnumerationBusStation represents busStation
	StopTypeEnumerationStopTypeEnumerationBusStation StopTypeEnumeration = "busStation"
	// StopTypeEnumerationStopTypeEnumerationCoachStation represents coachStation
	StopTypeEnumerationStopTypeEnumerationCoachStation StopTypeEnumeration = "coachStation"
	// StopTypeEnumerationStopTypeEnumerationTramStation represents tramStation
	StopTypeEnumerationStopTypeEnumerationTramStation StopTypeEnumeration = "tramStation"
	// StopTypeEnumerationStopTypeEnumerationHarbourPort represents harbourPort
	StopTypeEnumerationStopTypeEnumerationHarbourPort StopTypeEnumeration = "harbourPort"
	// StopTypeEnumerationStopTypeEnumerationFerryPort represents ferryPort
	StopTypeEnumerationStopTypeEnumerationFerryPort StopTypeEnumeration = "ferryPort"
	// StopTypeEnumerationStopTypeEnumerationFerryStop represents ferryStop
	StopTypeEnumerationStopTypeEnumerationFerryStop StopTypeEnumeration = "ferryStop"
	// StopTypeEnumerationStopTypeEnumerationLiftStation represents liftStation
	StopTypeEnumerationStopTypeEnumerationLiftStation StopTypeEnumeration = "liftStation"
	// StopTypeEnumerationStopTypeEnumerationVehicleRailInterchange represents vehicleRailInterchange
	StopTypeEnumerationStopTypeEnumerationVehicleRailInterchange StopTypeEnumeration = "vehicleRailInterchange"
	// StopTypeEnumerationStopTypeEnumerationTaxiRank represents taxiRank
	StopTypeEnumerationStopTypeEnumerationTaxiRank StopTypeEnumeration = "taxiRank"
	// StopTypeEnumerationStopTypeEnumerationOther represents other
	StopTypeEnumerationStopTypeEnumerationOther StopTypeEnumeration = "other"
)

// OpenTransportModeRefsRelStructure represents the openTransportModeRefs_RelStructure element
// Type for a list of TRANSPORT MODE.
type OpenTransportModeRefsRelStructure struct {
	OneToManyRelationshipStructure
	OpenTransportModeRef []OpenTransportModeRef `xml:"OpenTransportModeRef" json:"OpenTransportModeRef"`
}

// OpenTransportModeRefStructure represents the OpenTransportModeRefStructure element
// Type for a reference to a TRANSPORT MODE.
type OpenTransportModeRefStructure struct {
	VersionOfObjectRefStructure
}

// SubmodeRefStructure represents the SubmodeRefStructure element
// Type for a reference to a SUBMODE.
type SubmodeRefStructure struct {
	VersionOfObjectRefStructure
}

// ModeRefsRelStructure represents the modeRefs_RelStructure element
// Type for a list of TRANSPORT MODEs.
type ModeRefsRelStructure struct {
	OneToManyRelationshipStructure
	ModeRef []ModeRef `xml:"ModeRef" json:"ModeRef"`
}

// ModeRefStructure represents the ModeRefStructure element
// Type for a reference to a MODE and SUBMODE.
type ModeRefStructure struct {
	SubmodeRefStructure
	Mode AllVehicleModesOfTransportEnumeration `xml:"mode,attr" json:"mode"`
}

// AccessMode represents the AccessMode element
// Access MODE for SITEs and VEHICLE MEETING POINTs. Also used for TRANSFER and if in OTHER LEG of the TRIP a monomodal non-public transport is used.
type AccessMode struct {
	Value AccessModeEnumeration `xml:",chardata" json:"value"`
}

// VehicleMode represents the VehicleMode element
// VEHICLE MODE: a characterisation of the operation according to the means of transport (bus, tram, metro, train, ferry, ship).
type VehicleMode struct {
	Value AllModesEnumeration `xml:",chardata" json:"value"`
}

// RoadVehicleMode represents the RoadVehicleMode element
// Road Vehicle MODE: a characterisation of the operation according to the means of transport (bus, tram, coach).
type RoadVehicleMode struct {
	Value AllModesEnumeration `xml:",chardata" json:"value"`
}

// AllVehicleModes represents the AllVehicleModes element
// All MODEs including vehicle transport and self drive.
type AllVehicleModes struct {
	Value AllVehicleModesOfTransportEnumeration `xml:",chardata" json:"value"`
}

// OpenTransportModeRef represents the OpenTransportModeRef element
// Reference to a TRANSPORT MODE.
type OpenTransportModeRef struct {
	OpenTransportModeRefStructure
}

// SubmodeRef represents the SubmodeRef element
// Reference to a SUBMODE.
type SubmodeRef struct {
	SubmodeRefStructure
}

// ModeRef represents the ModeRef element
// Reference to a MODE and SUBMODE.
type ModeRef struct {
	ModeRefStructure
}

// TransfersInFrameRelStructure represents the transfersInFrame_RelStructure element
// Type for containment in frame of CONNECTIONs.
type TransfersInFrameRelStructure struct {
	ContainmentAggregationStructure
	Connection []Connection `xml:"Connection,omitempty" json:"Connection,omitempty"`
	DefaultConnection []DefaultConnection `xml:"DefaultConnection,omitempty" json:"DefaultConnection,omitempty"`
	SiteConnection []SiteConnection `xml:"SiteConnection,omitempty" json:"SiteConnection,omitempty"`
	Access []Access `xml:"Access,omitempty" json:"Access,omitempty"`
}

// PlaceVersionStructure represents the Place_VersionStructure element
// Type for a PLACE.
type PlaceVersionStructure struct {
	ZoneVersionStructure
	// Classification of PLACE.
	PlaceTypes *TypeOfPlaceRefsRelStructure `xml:"placeTypes,omitempty" json:"placeTypes,omitempty"`
}

// TransferVersionStructure represents the Transfer_VersionStructure element
// Type for a TRANSFER.
type TransferVersionStructure struct {
	DataManagedObjectStructure
	// Name of TRANSFER.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	TypeOfTransferRef *TypeOfTransferRef `xml:"TypeOfTransferRef,omitempty" json:"TypeOfTransferRef,omitempty"`
	// Name of TRANSFER.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Distance of TRANSFER.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// Timings for the TRANSFER to use in journey planning, etc.
	TransferDuration *TransferDurationStructure `xml:"TransferDuration,omitempty" json:"TransferDuration,omitempty"`
	// Timings for walking over TRANSFER if different from the JOURNEY PATTERN  transfer duration,
	WalkTransferDuration *TransferDurationStructure `xml:"WalkTransferDuration,omitempty" json:"WalkTransferDuration,omitempty"`
	// Whether timings and validity applies to both directions (true) or just to the from-to direction of the TRANSFER.
	BothWays *bool `xml:"BothWays,omitempty" json:"BothWays,omitempty"`
	// If a special transfer mode is needed. ACCESS MODE enumeration is also used for the TransferMode.
	TransferMode *AccessModeEnumeration `xml:"TransferMode,omitempty" json:"TransferMode,omitempty"`
}

// TransferDurationStructure represents the TransferDurationStructure element
// Type for TRANSFER DURATION.
type TransferDurationStructure struct {
	// Default time needed for a traveller to make a TRANSFER.
	DefaultDuration *string `xml:"DefaultDuration,omitempty" json:"DefaultDuration,omitempty"`
	// Time for a traveller familiar with the journey to make transfer.
	FrequentTravellerDuration *string `xml:"FrequentTravellerDuration,omitempty" json:"FrequentTravellerDuration,omitempty"`
	// Time for an Occasional Traveller to make a TRANSFER.
	OccasionalTravellerDuration *string `xml:"OccasionalTravellerDuration,omitempty" json:"OccasionalTravellerDuration,omitempty"`
	// Time for a Mobility Restricted traveller to make a TRANSFER.
	MobilityRestrictedTravellerDuration *string `xml:"MobilityRestrictedTravellerDuration,omitempty" json:"MobilityRestrictedTravellerDuration,omitempty"`
}

// TypeOfTransferValueStructure represents the TypeOfTransfer_ValueStructure element
// Type for a TYPE OF TRANSFER.
type TypeOfTransferValueStructure struct {
	TypeOfEntityVersionStructure
}

// TypeOfPlaceValueStructure represents the TypeOfPlace_ValueStructure element
// Type for a TYPE OF PLACE.
type TypeOfPlaceValueStructure struct {
	TypeOfEntityVersionStructure
}

// Place represents the Place element
// A named Place. A geographic place of any type which may be specified as the origin or destination of a trip. A PLACE may be of dimension 0 (a POINT), 1 (a Road section) or 2 (a ZONE).
type Place struct {
	PlaceVersionStructure
}

// Transfer represents the Transfer element
// The possibility of a passenger to transfer between two PLACEs. May have times associated for the transfer.
type Transfer struct {
	TransferVersionStructure
}

// TransferDuration represents the TransferDuration element
// Times for TRANSFER between two Points.
type TransferDuration struct {
	TransferDurationStructure
}

// TypeOfTransfer represents the TypeOfTransfer element
// Classification of a TRANSFER.
type TypeOfTransfer struct {
	TypeOfTransferValueStructure
}

// TypeOfPlace represents the TypeOfPlace element
// Classification of a PLACE.
type TypeOfPlace struct {
	TypeOfPlaceValueStructure
}

// RelativeDirectionEnumeration represents the RelativeDirectionEnumeration enumeration
// Allowed values for RELATIVE DIRECTIONS.
type RelativeDirectionEnumeration string

const (
	// RelativeDirectionEnumerationBoth represents both
	RelativeDirectionEnumerationBoth RelativeDirectionEnumeration = "both"
	// RelativeDirectionEnumerationForwards represents forwards
	RelativeDirectionEnumerationForwards RelativeDirectionEnumeration = "forwards"
	// RelativeDirectionEnumerationBackwards represents backwards
	RelativeDirectionEnumerationBackwards RelativeDirectionEnumeration = "backwards"
)

// SectionRefStructure represents the SectionRefStructure element
// Type for a reference to a SECTION.
type SectionRefStructure struct {
	LinkSequenceRefStructure
}

// GeneralSectionRefStructure represents the GeneralSectionRefStructure element
// Type for a reference to a GENERAL SECTION.
type GeneralSectionRefStructure struct {
	SectionRefStructure
}

// SectionRef represents the SectionRef element
// Reference to a SECTION.
type SectionRef struct {
	SectionRefStructure
}

// ParentSectionRef represents the ParentSectionRef element
// Reference to a parent SECTION. May be omitted if given by context..
type ParentSectionRef struct {
	SectionRefStructure
}

// GeneralSectionRef represents the GeneralSectionRef element
// Reference to a GENERAL SECTION.
type GeneralSectionRef struct {
	GeneralSectionRefStructure
}

// GeneralSectionsInFrameRelStructure represents the generalSectionsInFrame_RelStructure element
// Type for containment in frame of GENERAL SECTION.
type GeneralSectionsInFrameRelStructure struct {
	ContainmentAggregationStructure
	GeneralSection []GeneralSection `xml:"GeneralSection" json:"GeneralSection"`
}

// SectionVersionStructure represents the Section_VersionStructure element
// Type for  SECTION.  +v1.1.
type SectionVersionStructure struct {
	LinkSequenceVersionStructure
	// Reference to a PURPOSE OF GROUPING.
	PurposeOfGroupingRef *PurposeOfGroupingRef `xml:"PurposeOfGroupingRef,omitempty" json:"PurposeOfGroupingRef,omitempty"`
	// LINK SEQUENCES using SECTION.
	UsedIn *LinkSequenceRefsRelStructure `xml:"usedIn,omitempty" json:"usedIn,omitempty"`
	// Name of Link Cass of COMMON SECTION
	NameOfLinkClass *string `xml:"nameOfLinkClass,attr,omitempty" json:"nameOfLinkClass,omitempty"`
}

// GeneralSectionVersionStructure represents the GeneralSection_VersionStructure element
// Type for GENERAL SECTION.  +v1.1.
type GeneralSectionVersionStructure struct {
	SectionVersionStructure
	// Ordered collection of POINTS used in the GENERAL SECTION.
	PointsOnSection *PointsOnSectionRelStructure `xml:"pointsOnSection,omitempty" json:"pointsOnSection,omitempty"`
	// Ordered collection of LINKSused in the GENERAL SECTION.
	LinksOnSection *LinksOnSectionRelStructure `xml:"linksOnSection,omitempty" json:"linksOnSection,omitempty"`
}

// CommonSectionPointMembersRelStructure represents the commonSectionPointMembers_RelStructure element
// DEPRECATED - Type for a list of COMMON SECTION POINT MEMBERs.
type CommonSectionPointMembersRelStructure struct {
	StrictContainmentAggregationStructure
	LineSectionPointMember []LineSectionPointMember `xml:"LineSectionPointMember,omitempty" json:"LineSectionPointMember,omitempty"`
	CommonSectionPointMember []CommonSectionPointMember `xml:"CommonSectionPointMember,omitempty" json:"CommonSectionPointMember,omitempty"`
}

// PointsOnSectionRelStructure represents the pointsOnSection_RelStructure element
// Type for a list of  POINTS on SECTION POINT   +v1.1.
type PointsOnSectionRelStructure struct {
	StrictContainmentAggregationStructure
	PointOnLineSection []PointOnLineSection `xml:"PointOnLineSection,omitempty" json:"PointOnLineSection,omitempty"`
	PointOnSection []PointOnSection `xml:"PointOnSection,omitempty" json:"PointOnSection,omitempty"`
}

// PointOnSectionVersionedChildStructure represents the PointOnSection_VersionedChildStructure element
// Type for a POINT on a SECTION.
type PointOnSectionVersionedChildStructure struct {
	PointInLinkSequenceVersionedChildStructure
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	// Reference to a POINT.
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	VehicleMeetingPoint *VehicleMeetingPoint `xml:"VehicleMeetingPoint,omitempty" json:"VehicleMeetingPoint,omitempty"`
	BorderPoint *BorderPoint `xml:"BorderPoint,omitempty" json:"BorderPoint,omitempty"`
	FareScheduledStopPoint *FareScheduledStopPoint `xml:"FareScheduledStopPoint,omitempty" json:"FareScheduledStopPoint,omitempty"`
	ScheduledStopPoint *ScheduledStopPoint `xml:"ScheduledStopPoint,omitempty" json:"ScheduledStopPoint,omitempty"`
	PathJunction *PathJunction `xml:"PathJunction,omitempty" json:"PathJunction,omitempty"`
	RoutePoint *RoutePoint `xml:"RoutePoint,omitempty" json:"RoutePoint,omitempty"`
	ParkingPoint *ParkingPoint `xml:"ParkingPoint,omitempty" json:"ParkingPoint,omitempty"`
	GaragePoint *GaragePoint `xml:"GaragePoint,omitempty" json:"GaragePoint,omitempty"`
	ReliefPoint *ReliefPoint `xml:"ReliefPoint,omitempty" json:"ReliefPoint,omitempty"`
	TimingPoint *TimingPoint `xml:"TimingPoint,omitempty" json:"TimingPoint,omitempty"`
	WireJunction *WireJunction `xml:"WireJunction,omitempty" json:"WireJunction,omitempty"`
	RoadJunction *RoadJunction `xml:"RoadJunction,omitempty" json:"RoadJunction,omitempty"`
	RailwayJunction *RailwayJunction `xml:"RailwayJunction,omitempty" json:"RailwayJunction,omitempty"`
	TrafficControlPoint *TrafficControlPoint `xml:"TrafficControlPoint,omitempty" json:"TrafficControlPoint,omitempty"`
	BeaconPoint *BeaconPoint `xml:"BeaconPoint,omitempty" json:"BeaconPoint,omitempty"`
	ActivationPoint *ActivationPoint `xml:"ActivationPoint,omitempty" json:"ActivationPoint,omitempty"`
	Point *Point `xml:"Point,omitempty" json:"Point,omitempty"`
	OnwardVehicleMeetingLinkRef *OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef *VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef *ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef *LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef *WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef *RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef *RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef *ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef *PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef *RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	// Whether link is navigated in to / from, i.e. reverse direction . Default is false, i.e. from to.
	Reverse *bool `xml:"Reverse,omitempty" json:"Reverse,omitempty"`
}

// LinksOnSectionRelStructure represents the linksOnSection_RelStructure element
// Type for a list of LINKS on SECTION.  +v1.1.
type LinksOnSectionRelStructure struct {
	StrictContainmentAggregationStructure
	LinkOnSection []LinkOnSection `xml:"LinkOnSection" json:"LinkOnSection"`
}

// LinkOnSectionVersionedChildStructure represents the LinkOnSection_VersionedChildStructure element
// Type for a LINK on a SECTION.  +v1.1.
type LinkOnSectionVersionedChildStructure struct {
	LinkInLinkSequenceVersionedChildStructure
	OnwardVehicleMeetingLinkRef *OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef *VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef *ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef *LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef *WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef *RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef *RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef *ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef *PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef *RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	VehicleMeetingLink *VehicleMeetingLink `xml:"VehicleMeetingLink,omitempty" json:"VehicleMeetingLink,omitempty"`
	ServiceLink *ServiceLink `xml:"ServiceLink,omitempty" json:"ServiceLink,omitempty"`
	SitePathLink *SitePathLink `xml:"SitePathLink,omitempty" json:"SitePathLink,omitempty"`
	PathLink *PathLink `xml:"PathLink,omitempty" json:"PathLink,omitempty"`
	RouteLink *RouteLink `xml:"RouteLink,omitempty" json:"RouteLink,omitempty"`
	TimingLink *TimingLink `xml:"TimingLink,omitempty" json:"TimingLink,omitempty"`
	WireElement *WireElement `xml:"WireElement,omitempty" json:"WireElement,omitempty"`
	RoadElement *RoadElement `xml:"RoadElement,omitempty" json:"RoadElement,omitempty"`
	RailwayElement *RailwayElement `xml:"RailwayElement,omitempty" json:"RailwayElement,omitempty"`
	ActivationLink *ActivationLink `xml:"ActivationLink,omitempty" json:"ActivationLink,omitempty"`
	// Whether link is navigated in to / from, i.e. reverse direction . Default is false, i.e. from to.
	Reverse *bool `xml:"Reverse,omitempty" json:"Reverse,omitempty"`
}

// SectionsInSequenceRelStructure represents the sectionsInSequence_RelStructure element
// Type for a list of  SECTIONS in sequence
type SectionsInSequenceRelStructure struct {
	StrictContainmentAggregationStructure
	// A SECTION in SEQUENCE.
	SectionInSequence []SectionInSequence `xml:"SectionInSequence" json:"SectionInSequence"`
}

// SectionInSequenceVersionedChildStructure represents the SectionInSequence_VersionedChildStructure element
// Type for a SECTION IN SEQUENCE
type SectionInSequenceVersionedChildStructure struct {
	LinkInLinkSequenceVersionedChildStructure
	ParentCommonSectionRef *ParentCommonSectionRef `xml:"ParentCommonSectionRef,omitempty" json:"ParentCommonSectionRef,omitempty"`
	CommonSectionRef *CommonSectionRef `xml:"CommonSectionRef,omitempty" json:"CommonSectionRef,omitempty"`
	LineSectionRef *LineSectionRef `xml:"LineSectionRef,omitempty" json:"LineSectionRef,omitempty"`
	FareSectionRef *FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	GeneralSectionRef *GeneralSectionRef `xml:"GeneralSectionRef,omitempty" json:"GeneralSectionRef,omitempty"`
	// Reference to a LINK SEQUENCE.
	SectionRef *SectionRef `xml:"SectionRef,omitempty" json:"SectionRef,omitempty"`
	FareSection *FareSection `xml:"FareSection,omitempty" json:"FareSection,omitempty"`
	CommonSection *CommonSection `xml:"CommonSection,omitempty" json:"CommonSection,omitempty"`
	LineSection *LineSection `xml:"LineSection,omitempty" json:"LineSection,omitempty"`
	GeneralSection *GeneralSection `xml:"GeneralSection,omitempty" json:"GeneralSection,omitempty"`
}

// GeneralSection represents the GeneralSection element
// A  resuable sequence of LINKS or POINTs.   +v1.1.
type GeneralSection struct {
	GeneralSectionVersionStructure
}

// CommonSectionPointMember represents the CommonSectionPointMember element
// DEPRECATED - Kept for backwards compatibility POINT  Member of a COMMON SECTION.]
type CommonSectionPointMember struct {
	PointOnSectionVersionedChildStructure
}

// PointOnSection represents the PointOnSection element
// POINT  on a SECTION.  +v1.1.
type PointOnSection struct {
	PointOnSectionVersionedChildStructure
}

// LinkOnSection represents the LinkOnSection element
// LINK on a SECTION.  +v1.1.
type LinkOnSection struct {
	LinkOnSectionVersionedChildStructure
}

// SectionInSequence represents the SectionInSequence element
// A SECTION in Sequence
type SectionInSequence struct {
	SectionInSequenceVersionedChildStructure
}

// LinkSequenceVersionStructure represents the LinkSequence_VersionStructure element
// Type for an Abstract LINK SEQUENCE.
type LinkSequenceVersionStructure struct {
	DataManagedObjectStructure
	// Name of LINK SEQUENCE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name of LINK SEQUENCE.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Further Description of a LINKSEQUENCE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Overall distance of LINK SEQUENCE. Can be derived from component LINKs.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// PROJECTIONs of LINK SEQUENCE onto another ENTITY or layer.
	Projections *ProjectionsRelStructure `xml:"projections,omitempty" json:"projections,omitempty"`
	// Hyperlinks associated with JOURNEY.
	InfoLinks *InfoLinksRelStructure `xml:"infoLinks,omitempty" json:"infoLinks,omitempty"`
	// SECTIONS that make up route.  Can be used as an alternative to  points in Seqnece. POINTS and LINKS must be of same type as sequence, eg ROUTE, ROUTE POINT, ROUTE LINK
	SectionsInSequence *SectionsInSequenceRelStructure `xml:"sectionsInSequence,omitempty" json:"sectionsInSequence,omitempty"`
}

// PointInLinkSequenceVersionedChildStructure represents the PointInLinkSequence_VersionedChildStructure element
// Type for a POINT IN LINK SEQUENCE i.e. a Node of a graph.
type PointInLinkSequenceVersionedChildStructure struct {
	VersionedChildStructure
	TripRef *TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef *TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef *SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef *TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef *NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	LinkSequenceRef *LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
	// PROJECTIONs of POINT.
	Projections *ProjectionsRelStructure `xml:"projections,omitempty" json:"projections,omitempty"`
	// Further Description of a POINT IN LINK SEQUENCE
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Order of POINT within parent.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// LinkInLinkSequenceVersionedChildStructure represents the LinkInLinkSequence_VersionedChildStructure element
// Type for a LINK IN LINK SEQUENCE. I.e. an Edge of a graph.
type LinkInLinkSequenceVersionedChildStructure struct {
	VersionedChildStructure
	TripRef *TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef *TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef *SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef *TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef *NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	LinkSequenceRef *LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
	// PROJECTIONs of POINT.
	Projections *ProjectionsRelStructure `xml:"projections,omitempty" json:"projections,omitempty"`
	// Further Description of a POINT IN LINK SEQUENCE
	Description []MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Order of LINK in sequence.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// TypeOfLinkSequenceValueStructure represents the TypeOfLinkSequence_ValueStructure element
// Type for a TYPE OF LINK SEQUENCE.
type TypeOfLinkSequenceValueStructure struct {
	TypeOfEntityVersionStructure
}

// GroupOfLinkSequencesRelStructure represents the groupOfLinkSequences_RelStructure element
// Type for a list of GROUPs OF LINK SEQUENCEs.
type GroupOfLinkSequencesRelStructure struct {
	StrictContainmentAggregationStructure
	GroupOfLinkSequences []GroupOfLinkSequences `xml:"GroupOfLinkSequences" json:"GroupOfLinkSequences"`
}

// GroupOfLinkSequencesVersionStructure represents the GroupOfLinkSequences_VersionStructure element
// Type for GROUP OF LINK SEQUENCEs.
type GroupOfLinkSequencesVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// LINK SEQUENCEs in GROUP OF LINK SEQUENCEs.
	Members *LinkSequenceRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// LinkSequence represents the LinkSequence element
// An LINK SEQUENCE of Links and Nodes.
type LinkSequence struct {
	LinkSequenceVersionStructure
}

// PointInLinkSequence represents the PointInLinkSequence element
// An node of an abstract LINK SEQUENCE.
type PointInLinkSequence struct {
	PointInLinkSequenceVersionedChildStructure
}

// LinkInLinkSequence represents the LinkInLinkSequence element
// An edge of an abstract LINK SEQUENCE.
type LinkInLinkSequence struct {
	LinkInLinkSequenceVersionedChildStructure
}

// TypeOfLinkSequence represents the TypeOfLinkSequence element
// A classification of LINK SEQUENCEs according to their functional purpose.
type TypeOfLinkSequence struct {
	TypeOfLinkSequenceValueStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// GroupOfLinkSequences represents the GroupOfLinkSequences element
// A grouping of LINK SEQUENCEs.
type GroupOfLinkSequences struct {
	GroupOfLinkSequencesVersionStructure
}

// SpatialFeaturesInFrameRelStructure represents the spatialFeaturesInFrame_RelStructure element
// Type for containment in frame of TSPATIAL FEATURe.
type SpatialFeaturesInFrameRelStructure struct {
	ContainmentAggregationStructure
	SimpleFeature []SimpleFeature `xml:"SimpleFeature,omitempty" json:"SimpleFeature,omitempty"`
	ComplexFeature []ComplexFeature `xml:"ComplexFeature,omitempty" json:"ComplexFeature,omitempty"`
}

// SimpleFeatureVersionStructure represents the SimpleFeature_VersionStructure element
// Type for SIMPLE FEATURE.
type SimpleFeatureVersionStructure struct {
	GroupOfPointsVersionStructure
	MobilityServiceConstraintZoneRef *MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef *StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef *TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef *AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef *AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef *FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef *TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef *ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
}

// ComplexFeatureVersionStructure represents the ComplexFeature_VersionStructure element
// Type for a COMPLEX FEATURE.
type ComplexFeatureVersionStructure struct {
	GroupOfPointsVersionStructure
	// Simple features making up COMPLEX FEATURE.
	FeatureMembers *ComplexFeatureMembersRelStructure `xml:"featureMembers,omitempty" json:"featureMembers,omitempty"`
}

// ComplexFeatureMembersRelStructure represents the complexFeatureMembers_RelStructure element
// A collection of one or more VALIDITY TRIGGERs.
type ComplexFeatureMembersRelStructure struct {
	ContainmentAggregationStructure
	// Member of a COMPLEX FEATURE.
	ComplexFeatureMember []ComplexFeatureMemberVersionedChildStructure `xml:"ComplexFeatureMember" json:"ComplexFeatureMember"`
}

// ComplexFeatureMemberVersionedChildStructure represents the ComplexFeatureMember_VersionedChildStructure element
// Type for a Member of COMPLEX FEATURE.
type ComplexFeatureMemberVersionedChildStructure struct {
	AbstractGroupMemberVersionedChildStructure
	// Parent of Simple Feature: if given by context, ignore.
	ComplexFeatureRef *ComplexFeatureRefStructure `xml:"ComplexFeatureRef,omitempty" json:"ComplexFeatureRef,omitempty"`
	// Reference to a SIMPLE FEATURe.
	SimpleFeatureRef *SimpleFeatureRef `xml:"SimpleFeatureRef,omitempty" json:"SimpleFeatureRef,omitempty"`
	TripLegRef *TripLegRef `xml:"TripLegRef,omitempty" json:"TripLegRef,omitempty"`
	IndividualPassengerInfoRef *IndividualPassengerInfoRef `xml:"IndividualPassengerInfoRef,omitempty" json:"IndividualPassengerInfoRef,omitempty"`
	VehiclePoolingDriverInfoRef *VehiclePoolingDriverInfoRef `xml:"VehiclePoolingDriverInfoRef,omitempty" json:"VehiclePoolingDriverInfoRef,omitempty"`
	IndividualTravellerRef *IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	ServiceAccessCodeRef *ServiceAccessCodeRef `xml:"ServiceAccessCodeRef,omitempty" json:"ServiceAccessCodeRef,omitempty"`
	TravelDocumentRef *TravelDocumentRef `xml:"TravelDocumentRef,omitempty" json:"TravelDocumentRef,omitempty"`
	RepeatedTripFareRequestRef *RepeatedTripFareRequestRef `xml:"RepeatedTripFareRequestRef,omitempty" json:"RepeatedTripFareRequestRef,omitempty"`
	SingleTripFareRequestRef *SingleTripFareRequestRef `xml:"SingleTripFareRequestRef,omitempty" json:"SingleTripFareRequestRef,omitempty"`
	FareRequestRef *FareRequestRef `xml:"FareRequestRef,omitempty" json:"FareRequestRef,omitempty"`
	StopFinderRequestRef *StopFinderRequestRef `xml:"StopFinderRequestRef,omitempty" json:"StopFinderRequestRef,omitempty"`
	StopEventRequestRef *StopEventRequestRef `xml:"StopEventRequestRef,omitempty" json:"StopEventRequestRef,omitempty"`
	ScheduleRequestRef *ScheduleRequestRef `xml:"ScheduleRequestRef,omitempty" json:"ScheduleRequestRef,omitempty"`
	TripPlanRequestRef *TripPlanRequestRef `xml:"TripPlanRequestRef,omitempty" json:"TripPlanRequestRef,omitempty"`
	CustomerPaymentMeansRef *CustomerPaymentMeansRef `xml:"CustomerPaymentMeansRef,omitempty" json:"CustomerPaymentMeansRef,omitempty"`
	MediumApplicationInstanceRef *MediumApplicationInstanceRef `xml:"MediumApplicationInstanceRef,omitempty" json:"MediumApplicationInstanceRef,omitempty"`
	MobileDeviceRef *MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef *EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef *SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	ResidentialQualificationEligibilityRef *ResidentialQualificationEligibilityRef `xml:"ResidentialQualificationEligibilityRef,omitempty" json:"ResidentialQualificationEligibilityRef,omitempty"`
	CommercialProfileEligibilityRef *CommercialProfileEligibilityRef `xml:"CommercialProfileEligibilityRef,omitempty" json:"CommercialProfileEligibilityRef,omitempty"`
	UserProfileEligibilityRef *UserProfileEligibilityRef `xml:"UserProfileEligibilityRef,omitempty" json:"UserProfileEligibilityRef,omitempty"`
	CustomerAccountRef *CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	FareContractRef *FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	VehicleTypeZoneRestrictionRef *VehicleTypeZoneRestrictionRef `xml:"VehicleTypeZoneRestrictionRef,omitempty" json:"VehicleTypeZoneRestrictionRef,omitempty"`
	StartTimeAtStopPointRef *StartTimeAtStopPointRef `xml:"StartTimeAtStopPointRef,omitempty" json:"StartTimeAtStopPointRef,omitempty"`
	ResidentialQualificationRef *ResidentialQualificationRef `xml:"ResidentialQualificationRef,omitempty" json:"ResidentialQualificationRef,omitempty"`
	TypeOfConcessionRef *TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	TypeOfUsageParameterRef *TypeOfUsageParameterRef `xml:"TypeOfUsageParameterRef,omitempty" json:"TypeOfUsageParameterRef,omitempty"`
	TariffObjectRef *TariffObjectRef `xml:"TariffObjectRef,omitempty" json:"TariffObjectRef,omitempty"`
	ParkingTariffRef *ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef *TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	TypeOfFareTableRef *TypeOfFareTableRef `xml:"TypeOfFareTableRef,omitempty" json:"TypeOfFareTableRef,omitempty"`
	FareTableRowRef *FareTableRowRef `xml:"FareTableRowRef,omitempty" json:"FareTableRowRef,omitempty"`
	FareTableColumnRef *FareTableColumnRef `xml:"FareTableColumnRef,omitempty" json:"FareTableColumnRef,omitempty"`
	TimeUnitRef *TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	GeographicalUnitRef *GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	ControllableElementInSequenceRef *ControllableElementInSequenceRef `xml:"ControllableElementInSequenceRef,omitempty" json:"ControllableElementInSequenceRef,omitempty"`
	FareStructureElementInSequenceRef *FareStructureElementInSequenceRef `xml:"FareStructureElementInSequenceRef,omitempty" json:"FareStructureElementInSequenceRef,omitempty"`
	AccessRightInProductRef *AccessRightInProductRef `xml:"AccessRightInProductRef,omitempty" json:"AccessRightInProductRef,omitempty"`
	CellRef *CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	CustomerPurchasePackagePriceRef *CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef *ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef *TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef *TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef *QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef *ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef *ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef *GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef *GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef *UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef *SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef *SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef *DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef *FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef *FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef *CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef *FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef *FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CustomerPurchasePackageElementRef *CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
	CustomerPurchasePackageRef *CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	ControllableElementRef *ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	ValidableElementRef *ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	AdditionalDriverOptionRef *AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef *RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef *RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef *SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef *SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef *MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef *InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef *FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef *SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef *UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef *StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef *RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef *RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef *LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef *EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef *EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef *EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef *GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef *CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef *VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef *CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef *UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef *ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef *SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef *PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef *ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef *TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef *ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef *RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef *ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef *ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef *CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef *ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef *BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef *PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
	SeriesConstraintRef *SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	SalesOfferPackageElementRef *SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	DistanceMatrixElementInverseRef *DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
	DistanceMatrixElementRef *DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	FareStructureElementRef *FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	FulfilmentMethodRef *FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	CappingRuleRef *CappingRuleRef `xml:"CappingRuleRef,omitempty" json:"CappingRuleRef,omitempty"`
	EntitlementProductRef *EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef *ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	TimeIntervalRef *TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	GeographicalIntervalRef *GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	ParkingChargeBandRef *ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef *TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	FareQuotaFactorRef *FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef *FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef *QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	GeographicalStructureFactorRef *GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	PriceableObjectRef *PriceableObjectRef `xml:"PriceableObjectRef,omitempty" json:"PriceableObjectRef,omitempty"`
	MonthValidityOffsetRef *MonthValidityOffsetRef `xml:"MonthValidityOffsetRef,omitempty" json:"MonthValidityOffsetRef,omitempty"`
	LimitingRuleRef *LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef *DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef *PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	PricingServiceRef *PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	RoundingStepRef *RoundingStepRef `xml:"RoundingStepRef,omitempty" json:"RoundingStepRef,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	PricingParameterSetRef *PricingParameterSetRef `xml:"PricingParameterSetRef,omitempty" json:"PricingParameterSetRef,omitempty"`
	FlexibleServicePropertiesRef *FlexibleServicePropertiesRef `xml:"FlexibleServicePropertiesRef,omitempty" json:"FlexibleServicePropertiesRef,omitempty"`
	DriverTripTimeRef *DriverTripTimeRef `xml:"DriverTripTimeRef,omitempty" json:"DriverTripTimeRef,omitempty"`
	DriverTripRef *DriverTripRef `xml:"DriverTripRef,omitempty" json:"DriverTripRef,omitempty"`
	DutyPartRef *DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
	AccountableElementRef *AccountableElementRef `xml:"AccountableElementRef,omitempty" json:"AccountableElementRef,omitempty"`
	DutyRef *DutyRef `xml:"DutyRef,omitempty" json:"DutyRef,omitempty"`
	ReliefOpportunityRef *ReliefOpportunityRef `xml:"ReliefOpportunityRef,omitempty" json:"ReliefOpportunityRef,omitempty"`
	CourseOfJourneysRef *CourseOfJourneysRef `xml:"CourseOfJourneysRef,omitempty" json:"CourseOfJourneysRef,omitempty"`
	DriverRef *DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
	VehicleServicePartRef *VehicleServicePartRef `xml:"VehicleServicePartRef,omitempty" json:"VehicleServicePartRef,omitempty"`
	VehicleServiceRef *VehicleServiceRef `xml:"VehicleServiceRef,omitempty" json:"VehicleServiceRef,omitempty"`
	CompoundBlockRef *CompoundBlockRef `xml:"CompoundBlockRef,omitempty" json:"CompoundBlockRef,omitempty"`
	TrainBlockPartRef *TrainBlockPartRef `xml:"TrainBlockPartRef,omitempty" json:"TrainBlockPartRef,omitempty"`
	BlockPartRef *BlockPartRef `xml:"BlockPartRef,omitempty" json:"BlockPartRef,omitempty"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef *BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	JourneyPartCoupleRef *JourneyPartCoupleRef `xml:"JourneyPartCoupleRef,omitempty" json:"JourneyPartCoupleRef,omitempty"`
	CoupledJourneyRef *CoupledJourneyRef `xml:"CoupledJourneyRef,omitempty" json:"CoupledJourneyRef,omitempty"`
	JourneyPartRef *JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	TimetabledPassingTimeRef *TimetabledPassingTimeRef `xml:"TimetabledPassingTimeRef,omitempty" json:"TimetabledPassingTimeRef,omitempty"`
	EstimatedPassingTimeRef *EstimatedPassingTimeRef `xml:"EstimatedPassingTimeRef,omitempty" json:"EstimatedPassingTimeRef,omitempty"`
	ObservedPassingTimeRef *ObservedPassingTimeRef `xml:"ObservedPassingTimeRef,omitempty" json:"ObservedPassingTimeRef,omitempty"`
	TargetPassingTimeRef *TargetPassingTimeRef `xml:"TargetPassingTimeRef,omitempty" json:"TargetPassingTimeRef,omitempty"`
	PassingTimeRef *PassingTimeRef `xml:"PassingTimeRef,omitempty" json:"PassingTimeRef,omitempty"`
	InterchangeRuleTimingRef *InterchangeRuleTimingRef `xml:"InterchangeRuleTimingRef,omitempty" json:"InterchangeRuleTimingRef,omitempty"`
	InterchangeRuleRef *InterchangeRuleRef `xml:"InterchangeRuleRef,omitempty" json:"InterchangeRuleRef,omitempty"`
	ServiceJourneyPatternInterchangeRef *ServiceJourneyPatternInterchangeRef `xml:"ServiceJourneyPatternInterchangeRef,omitempty" json:"ServiceJourneyPatternInterchangeRef,omitempty"`
	ServiceJourneyInterchangeRef *ServiceJourneyInterchangeRef `xml:"ServiceJourneyInterchangeRef,omitempty" json:"ServiceJourneyInterchangeRef,omitempty"`
	DefaultInterchangeRef *DefaultInterchangeRef `xml:"DefaultInterchangeRef,omitempty" json:"DefaultInterchangeRef,omitempty"`
	InterchangeRef *InterchangeRef `xml:"InterchangeRef,omitempty" json:"InterchangeRef,omitempty"`
	JourneyMeetingRef *JourneyMeetingRef `xml:"JourneyMeetingRef,omitempty" json:"JourneyMeetingRef,omitempty"`
	SupplyContractRef *SupplyContractRef `xml:"SupplyContractRef,omitempty" json:"SupplyContractRef,omitempty"`
	TrainNumberRef *TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	RoutingConstraintZoneRef *RoutingConstraintZoneRef `xml:"RoutingConstraintZoneRef,omitempty" json:"RoutingConstraintZoneRef,omitempty"`
	VehiclePositionAlignmentRef *VehiclePositionAlignmentRef `xml:"VehiclePositionAlignmentRef,omitempty" json:"VehiclePositionAlignmentRef,omitempty"`
	VehicleQuayAlignmentRef *VehicleQuayAlignmentRef `xml:"VehicleQuayAlignmentRef,omitempty" json:"VehicleQuayAlignmentRef,omitempty"`
	LogicalDisplayRef *LogicalDisplayRef `xml:"LogicalDisplayRef,omitempty" json:"LogicalDisplayRef,omitempty"`
	ParkingPropertiesRef *ParkingPropertiesRef `xml:"ParkingPropertiesRef,omitempty" json:"ParkingPropertiesRef,omitempty"`
	ParkingCapacityRef *ParkingCapacityRef `xml:"ParkingCapacityRef,omitempty" json:"ParkingCapacityRef,omitempty"`
	LineNetworkRef *LineNetworkRef `xml:"LineNetworkRef,omitempty" json:"LineNetworkRef,omitempty"`
	RouteInstructionRef *RouteInstructionRef `xml:"RouteInstructionRef,omitempty" json:"RouteInstructionRef,omitempty"`
	FlexiblePointPropertiesRef *FlexiblePointPropertiesRef `xml:"FlexiblePointPropertiesRef,omitempty" json:"FlexiblePointPropertiesRef,omitempty"`
	FlexibleLinkPropertiesRef *FlexibleLinkPropertiesRef `xml:"FlexibleLinkPropertiesRef,omitempty" json:"FlexibleLinkPropertiesRef,omitempty"`
	TimeDemandProfileRef *TimeDemandProfileRef `xml:"TimeDemandProfileRef,omitempty" json:"TimeDemandProfileRef,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	VehicleTypePreferenceRef *VehicleTypePreferenceRef `xml:"VehicleTypePreferenceRef,omitempty" json:"VehicleTypePreferenceRef,omitempty"`
	JourneyPatternHeadwayRef *JourneyPatternHeadwayRef `xml:"JourneyPatternHeadwayRef,omitempty" json:"JourneyPatternHeadwayRef,omitempty"`
	JourneyPatternLayoverRef *JourneyPatternLayoverRef `xml:"JourneyPatternLayoverRef,omitempty" json:"JourneyPatternLayoverRef,omitempty"`
	JourneyPatternRunTimeRef *JourneyPatternRunTimeRef `xml:"JourneyPatternRunTimeRef,omitempty" json:"JourneyPatternRunTimeRef,omitempty"`
	JourneyPatternWaitTimeRef *JourneyPatternWaitTimeRef `xml:"JourneyPatternWaitTimeRef,omitempty" json:"JourneyPatternWaitTimeRef,omitempty"`
	DefaultServiceJourneyTimeRef *DefaultServiceJourneyTimeRef `xml:"DefaultServiceJourneyTimeRef,omitempty" json:"DefaultServiceJourneyTimeRef,omitempty"`
	DefaultDeadRunRunTimeRef *DefaultDeadRunRunTimeRef `xml:"DefaultDeadRunRunTimeRef,omitempty" json:"DefaultDeadRunRunTimeRef,omitempty"`
	TurnaroundTimeLimitTimeRef *TurnaroundTimeLimitTimeRef `xml:"TurnaroundTimeLimitTimeRef,omitempty" json:"TurnaroundTimeLimitTimeRef,omitempty"`
	JourneyTimingRef *JourneyTimingRef `xml:"JourneyTimingRef,omitempty" json:"JourneyTimingRef,omitempty"`
	CrewBaseRef *CrewBaseRef `xml:"CrewBaseRef,omitempty" json:"CrewBaseRef,omitempty"`
	TrainComponentRef *TrainComponentRef `xml:"TrainComponentRef,omitempty" json:"TrainComponentRef,omitempty"`
	TrainElementRef *TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	TrainInCompoundTrainRef *TrainInCompoundTrainRef `xml:"TrainInCompoundTrainRef,omitempty" json:"TrainInCompoundTrainRef,omitempty"`
	PassengerSeatRef *PassengerSeatRef `xml:"PassengerSeatRef,omitempty" json:"PassengerSeatRef,omitempty"`
	TravelDocumentSecurityListingRef *TravelDocumentSecurityListingRef `xml:"TravelDocumentSecurityListingRef,omitempty" json:"TravelDocumentSecurityListingRef,omitempty"`
	MediumAccessDeviceSecurityListingRef *MediumAccessDeviceSecurityListingRef `xml:"MediumAccessDeviceSecurityListingRef,omitempty" json:"MediumAccessDeviceSecurityListingRef,omitempty"`
	RetailDeviceSecurityListingRef *RetailDeviceSecurityListingRef `xml:"RetailDeviceSecurityListingRef,omitempty" json:"RetailDeviceSecurityListingRef,omitempty"`
	CustomerAccountSecurityListingRef *CustomerAccountSecurityListingRef `xml:"CustomerAccountSecurityListingRef,omitempty" json:"CustomerAccountSecurityListingRef,omitempty"`
	FareContractSecurityListingRef *FareContractSecurityListingRef `xml:"FareContractSecurityListingRef,omitempty" json:"FareContractSecurityListingRef,omitempty"`
	CustomerSecurityListingRef *CustomerSecurityListingRef `xml:"CustomerSecurityListingRef,omitempty" json:"CustomerSecurityListingRef,omitempty"`
	WhitelistRef *WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	BlacklistRef *BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
	SchematicMapMemberRef *SchematicMapMemberRef `xml:"SchematicMapMemberRef,omitempty" json:"SchematicMapMemberRef,omitempty"`
	SchematicMapRef *SchematicMapRef `xml:"SchematicMapRef,omitempty" json:"SchematicMapRef,omitempty"`
	CycleModelProfileRef *CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef *CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
	ModeRestrictionAssessmentRef *ModeRestrictionAssessmentRef `xml:"ModeRestrictionAssessmentRef,omitempty" json:"ModeRestrictionAssessmentRef,omitempty"`
	DeliveryVariantRef *DeliveryVariantRef `xml:"DeliveryVariantRef,omitempty" json:"DeliveryVariantRef,omitempty"`
	NoticeRef *NoticeRef `xml:"NoticeRef,omitempty" json:"NoticeRef,omitempty"`
	VehicleProfileRef *VehicleProfileRef `xml:"VehicleProfileRef,omitempty" json:"VehicleProfileRef,omitempty"`
	VehicleEquipmentProfileMemberRef *VehicleEquipmentProfileMemberRef `xml:"VehicleEquipmentProfileMemberRef,omitempty" json:"VehicleEquipmentProfileMemberRef,omitempty"`
	ChargingEquipmentProfileRef *ChargingEquipmentProfileRef `xml:"ChargingEquipmentProfileRef,omitempty" json:"ChargingEquipmentProfileRef,omitempty"`
	VehicleEquipmentProfileRef *VehicleEquipmentProfileRef `xml:"VehicleEquipmentProfileRef,omitempty" json:"VehicleEquipmentProfileRef,omitempty"`
	VehicleModelRef *VehicleModelRef `xml:"VehicleModelRef,omitempty" json:"VehicleModelRef,omitempty"`
	VehicleRef *VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	PassengerCapacityRef *PassengerCapacityRef `xml:"PassengerCapacityRef,omitempty" json:"PassengerCapacityRef,omitempty"`
	FacilityRequirementRef *FacilityRequirementRef `xml:"FacilityRequirementRef,omitempty" json:"FacilityRequirementRef,omitempty"`
	VehicleManoeuvringRequirementRef *VehicleManoeuvringRequirementRef `xml:"VehicleManoeuvringRequirementRef,omitempty" json:"VehicleManoeuvringRequirementRef,omitempty"`
	PassengerCarryingRequirementRef *PassengerCarryingRequirementRef `xml:"PassengerCarryingRequirementRef,omitempty" json:"PassengerCarryingRequirementRef,omitempty"`
	VehicleRequirementRef *VehicleRequirementRef `xml:"VehicleRequirementRef,omitempty" json:"VehicleRequirementRef,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	OnboardStayRef *OnboardStayRef `xml:"OnboardStayRef,omitempty" json:"OnboardStayRef,omitempty"`
	AccommodationRef *AccommodationRef `xml:"AccommodationRef,omitempty" json:"AccommodationRef,omitempty"`
	ServiceFacilitySetRef *ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	SiteFacilitySetRef *SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	FacilitySetRef *FacilitySetRef `xml:"FacilitySetRef,omitempty" json:"FacilitySetRef,omitempty"`
	FacilityRef *FacilityRef `xml:"FacilityRef,omitempty" json:"FacilityRef,omitempty"`
	OperatingDepartmentRef *OperatingDepartmentRef `xml:"OperatingDepartmentRef,omitempty" json:"OperatingDepartmentRef,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	LevelRef *LevelRef `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	ModeRef *ModeRef `xml:"ModeRef,omitempty" json:"ModeRef,omitempty"`
	SubmodeRef *SubmodeRef `xml:"SubmodeRef,omitempty" json:"SubmodeRef,omitempty"`
	OpenTransportModeRef *OpenTransportModeRef `xml:"OpenTransportModeRef,omitempty" json:"OpenTransportModeRef,omitempty"`
	TopographicProjectionRef *TopographicProjectionRef `xml:"TopographicProjectionRef,omitempty" json:"TopographicProjectionRef,omitempty"`
	ComplexFeatureProjectionRef *ComplexFeatureProjectionRef `xml:"ComplexFeatureProjectionRef,omitempty" json:"ComplexFeatureProjectionRef,omitempty"`
	LinkSequenceProjectionRef *LinkSequenceProjectionRef `xml:"LinkSequenceProjectionRef,omitempty" json:"LinkSequenceProjectionRef,omitempty"`
	ZoneProjectionRef *ZoneProjectionRef `xml:"ZoneProjectionRef,omitempty" json:"ZoneProjectionRef,omitempty"`
	LinkProjectionRef *LinkProjectionRef `xml:"LinkProjectionRef,omitempty" json:"LinkProjectionRef,omitempty"`
	PointProjectionRef *PointProjectionRef `xml:"PointProjectionRef,omitempty" json:"PointProjectionRef,omitempty"`
	TripRef *TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef *TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef *SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef *TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef *NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	LinkSequenceRef *LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
	ContactRef *ContactRef `xml:"ContactRef,omitempty" json:"ContactRef,omitempty"`
	SalesTransactionRef *SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	OfferedTravelSpecificationRef *OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	RequestedTravelSpecificationRef *RequestedTravelSpecificationRef `xml:"RequestedTravelSpecificationRef,omitempty" json:"RequestedTravelSpecificationRef,omitempty"`
	TravelSpecificationRef *TravelSpecificationRef `xml:"TravelSpecificationRef,omitempty" json:"TravelSpecificationRef,omitempty"`
	FareContractEntryRef *FareContractEntryRef `xml:"FareContractEntryRef,omitempty" json:"FareContractEntryRef,omitempty"`
	LogEntryRef *LogEntryRef `xml:"LogEntryRef,omitempty" json:"LogEntryRef,omitempty"`
	AlternativeNameRef *AlternativeNameRef `xml:"AlternativeNameRef,omitempty" json:"AlternativeNameRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	DefaultConnectionRef *DefaultConnectionRef `xml:"DefaultConnectionRef,omitempty" json:"DefaultConnectionRef,omitempty"`
	SiteConnectionRef *SiteConnectionRef `xml:"SiteConnectionRef,omitempty" json:"SiteConnectionRef,omitempty"`
	ConnectionRef *ConnectionRef `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	AccessRef *AccessRef `xml:"AccessRef,omitempty" json:"AccessRef,omitempty"`
	HailAndRideAreaRef *HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef *FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef *FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
	FlexibleStopPlaceRef *FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	PathJunctionRef *PathJunctionRef `xml:"PathJunctionRef,omitempty" json:"PathJunctionRef,omitempty"`
	EquipmentPlaceRef *EquipmentPlaceRef `xml:"EquipmentPlaceRef,omitempty" json:"EquipmentPlaceRef,omitempty"`
	EquipmentPositionRef *EquipmentPositionRef `xml:"EquipmentPositionRef,omitempty" json:"EquipmentPositionRef,omitempty"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	VehiclePoolingMeetingPlaceRef *VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef *VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	GarageRef *GarageRef `xml:"GarageRef,omitempty" json:"GarageRef,omitempty"`
	VehicleStoppingPositionRef *VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef *VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef *AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef *StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef *VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef *ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef *PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef *StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef *StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef *ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef *ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef *ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef *PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef *PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef *VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef *EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef *SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef *SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	AddressablePlaceRef *AddressablePlaceRef `xml:"AddressablePlaceRef,omitempty" json:"AddressablePlaceRef,omitempty"`
	PostalAddressRef *PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef *RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef *AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
	OnwardVehicleMeetingLinkRef *OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef *VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef *ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef *LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef *WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef *RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef *RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef *ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef *PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef *RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	UicOperatingPeriodRef *UicOperatingPeriodRef `xml:"UicOperatingPeriodRef,omitempty" json:"UicOperatingPeriodRef,omitempty"`
	OperatingPeriodRef *OperatingPeriodRef `xml:"OperatingPeriodRef,omitempty" json:"OperatingPeriodRef,omitempty"`
	OperatingDayRef *OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	ServiceCalendarRef *ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	AlternativeTextRef *AlternativeTextRef `xml:"AlternativeTextRef,omitempty" json:"AlternativeTextRef,omitempty"`
	AvailabilityConditionRef *AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	ValidityRuleParameterRef *ValidityRuleParameterRef `xml:"ValidityRuleParameterRef,omitempty" json:"ValidityRuleParameterRef,omitempty"`
	ValidityTriggerRef *ValidityTriggerRef `xml:"ValidityTriggerRef,omitempty" json:"ValidityTriggerRef,omitempty"`
	ValidityConditionRef *ValidityConditionRef `xml:"ValidityConditionRef,omitempty" json:"ValidityConditionRef,omitempty"`
	ResponsibilityRoleRef *ResponsibilityRoleRef `xml:"ResponsibilityRoleRef,omitempty" json:"ResponsibilityRoleRef,omitempty"`
	ControlCentreRef *ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	OrganisationalUnitRef *OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	DepartmentRef *DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
	OrganisationPartRef *OrganisationPartRef `xml:"OrganisationPartRef,omitempty" json:"OrganisationPartRef,omitempty"`
	AllAuthoritiesRef *AllAuthoritiesRef `xml:"AllAuthoritiesRef,omitempty" json:"AllAuthoritiesRef,omitempty"`
	AllOperatorsRef *AllOperatorsRef `xml:"AllOperatorsRef,omitempty" json:"AllOperatorsRef,omitempty"`
	AllPublicTransportOrganisationsRef *AllPublicTransportOrganisationsRef `xml:"AllPublicTransportOrganisationsRef,omitempty" json:"AllPublicTransportOrganisationsRef,omitempty"`
	AllTransportOrganisationsRef *AllTransportOrganisationsRef `xml:"AllTransportOrganisationsRef,omitempty" json:"AllTransportOrganisationsRef,omitempty"`
	AllOrganisationsRef *AllOrganisationsRef `xml:"AllOrganisationsRef,omitempty" json:"AllOrganisationsRef,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	ResponsibilitySetRef *ResponsibilitySetRef `xml:"ResponsibilitySetRef,omitempty" json:"ResponsibilitySetRef,omitempty"`
	DestinationDisplayVariantRef *DestinationDisplayVariantRef `xml:"DestinationDisplayVariantRef,omitempty" json:"DestinationDisplayVariantRef,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	AllowedLineDirectionRef *AllowedLineDirectionRef `xml:"AllowedLineDirectionRef,omitempty" json:"AllowedLineDirectionRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	GroupOfCustomerPurchasePackagesRef *GroupOfCustomerPurchasePackagesRef `xml:"GroupOfCustomerPurchasePackagesRef,omitempty" json:"GroupOfCustomerPurchasePackagesRef,omitempty"`
	PoolOfVehiclesRef *PoolOfVehiclesRef `xml:"PoolOfVehiclesRef,omitempty" json:"PoolOfVehiclesRef,omitempty"`
	GroupOfSalesOfferPackagesRef *GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
	GroupOfDistanceMatrixElementsRef *GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfDistributionChannelsRef *GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	GroupOfSingleJourneysRef *GroupOfSingleJourneysRef `xml:"GroupOfSingleJourneysRef,omitempty" json:"GroupOfSingleJourneysRef,omitempty"`
	StandardFareTableRef *StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef *FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	PriceGroupRef *PriceGroupRef `xml:"PriceGroupRef,omitempty" json:"PriceGroupRef,omitempty"`
	RhythmicalJourneyGroupRef *RhythmicalJourneyGroupRef `xml:"RhythmicalJourneyGroupRef,omitempty" json:"RhythmicalJourneyGroupRef,omitempty"`
	HeadwayJourneyGroupRef *HeadwayJourneyGroupRef `xml:"HeadwayJourneyGroupRef,omitempty" json:"HeadwayJourneyGroupRef,omitempty"`
	JourneyFrequencyGroupRef *JourneyFrequencyGroupRef `xml:"JourneyFrequencyGroupRef,omitempty" json:"JourneyFrequencyGroupRef,omitempty"`
	GroupOfServicesRef *GroupOfServicesRef `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	GroupOfStopPlacesRef *GroupOfStopPlacesRef `xml:"GroupOfStopPlacesRef,omitempty" json:"GroupOfStopPlacesRef,omitempty"`
	PointOfInterestHierarchyRef *PointOfInterestHierarchyRef `xml:"PointOfInterestHierarchyRef,omitempty" json:"PointOfInterestHierarchyRef,omitempty"`
	GroupOfTimingLinksRef *GroupOfTimingLinksRef `xml:"GroupOfTimingLinksRef,omitempty" json:"GroupOfTimingLinksRef,omitempty"`
	FleetRef *FleetRef `xml:"FleetRef,omitempty" json:"FleetRef,omitempty"`
	GroupOfOperatorsRef *GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	GroupOfPlacesRef *GroupOfPlacesRef `xml:"GroupOfPlacesRef,omitempty" json:"GroupOfPlacesRef,omitempty"`
	ParentSectionRef *ParentSectionRef `xml:"ParentSectionRef,omitempty" json:"ParentSectionRef,omitempty"`
	ParentCommonSectionRef *ParentCommonSectionRef `xml:"ParentCommonSectionRef,omitempty" json:"ParentCommonSectionRef,omitempty"`
	CommonSectionRef *CommonSectionRef `xml:"CommonSectionRef,omitempty" json:"CommonSectionRef,omitempty"`
	LineSectionRef *LineSectionRef `xml:"LineSectionRef,omitempty" json:"LineSectionRef,omitempty"`
	FareSectionRef *FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	GeneralSectionRef *GeneralSectionRef `xml:"GeneralSectionRef,omitempty" json:"GeneralSectionRef,omitempty"`
	SectionRef *SectionRef `xml:"SectionRef,omitempty" json:"SectionRef,omitempty"`
	GroupOfTariffZonesRef *GroupOfTariffZonesRef `xml:"GroupOfTariffZonesRef,omitempty" json:"GroupOfTariffZonesRef,omitempty"`
	LogRef *LogRef `xml:"LogRef,omitempty" json:"LogRef,omitempty"`
	GroupOfTimebandsRef *GroupOfTimebandsRef `xml:"GroupOfTimebandsRef,omitempty" json:"GroupOfTimebandsRef,omitempty"`
	PlaceRef *PlaceRef `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
	MobilityServiceConstraintZoneRef *MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef *StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef *TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef *AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef *AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef *FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef *TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef *ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
	LayerRef *LayerRef `xml:"LayerRef,omitempty" json:"LayerRef,omitempty"`
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef *GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	GeneralGroupOfEntitiesRef *GeneralGroupOfEntitiesRef `xml:"GeneralGroupOfEntitiesRef,omitempty" json:"GeneralGroupOfEntitiesRef,omitempty"`
	MobilityJourneyFrameRef *MobilityJourneyFrameRef `xml:"MobilityJourneyFrameRef,omitempty" json:"MobilityJourneyFrameRef,omitempty"`
	MobilityServiceFrameRef *MobilityServiceFrameRef `xml:"MobilityServiceFrameRef,omitempty" json:"MobilityServiceFrameRef,omitempty"`
	SalesTransactionFrameRef *SalesTransactionFrameRef `xml:"SalesTransactionFrameRef,omitempty" json:"SalesTransactionFrameRef,omitempty"`
	FareFrameRef *FareFrameRef `xml:"FareFrameRef,omitempty" json:"FareFrameRef,omitempty"`
	ServiceFrameRef *ServiceFrameRef `xml:"ServiceFrameRef,omitempty" json:"ServiceFrameRef,omitempty"`
	DriverScheduleFrameRef *DriverScheduleFrameRef `xml:"DriverScheduleFrameRef,omitempty" json:"DriverScheduleFrameRef,omitempty"`
	VehicleScheduleFrameRef *VehicleScheduleFrameRef `xml:"VehicleScheduleFrameRef,omitempty" json:"VehicleScheduleFrameRef,omitempty"`
	TimetableFrameRef *TimetableFrameRef `xml:"TimetableFrameRef,omitempty" json:"TimetableFrameRef,omitempty"`
	SiteFrameRef *SiteFrameRef `xml:"SiteFrameRef,omitempty" json:"SiteFrameRef,omitempty"`
	InfrastructureFrameRef *InfrastructureFrameRef `xml:"InfrastructureFrameRef,omitempty" json:"InfrastructureFrameRef,omitempty"`
	GeneralFrameRef *GeneralFrameRef `xml:"GeneralFrameRef,omitempty" json:"GeneralFrameRef,omitempty"`
	ResourceFrameRef *ResourceFrameRef `xml:"ResourceFrameRef,omitempty" json:"ResourceFrameRef,omitempty"`
	ServiceCalendarFrameRef *ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	CompositeFrameRef *CompositeFrameRef `xml:"CompositeFrameRef,omitempty" json:"CompositeFrameRef,omitempty"`
	ParkingBayConditionRef *ParkingBayConditionRef `xml:"ParkingBayConditionRef,omitempty" json:"ParkingBayConditionRef,omitempty"`
	RentalAvailabilityRef *RentalAvailabilityRef `xml:"RentalAvailabilityRef,omitempty" json:"RentalAvailabilityRef,omitempty"`
	ParkingBayStatusRef *ParkingBayStatusRef `xml:"ParkingBayStatusRef,omitempty" json:"ParkingBayStatusRef,omitempty"`
	TypeOfMediumAccessDeviceRef *TypeOfMediumAccessDeviceRef `xml:"TypeOfMediumAccessDeviceRef,omitempty" json:"TypeOfMediumAccessDeviceRef,omitempty"`
	TypeOfProofRef *TypeOfProofRef `xml:"TypeOfProofRef,omitempty" json:"TypeOfProofRef,omitempty"`
	DistributionChannelRef *DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	ChargingMomentRef *ChargingMomentRef `xml:"ChargingMomentRef,omitempty" json:"ChargingMomentRef,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	PurposeOfJourneyPartitionRef *PurposeOfJourneyPartitionRef `xml:"PurposeOfJourneyPartitionRef,omitempty" json:"PurposeOfJourneyPartitionRef,omitempty"`
	TimingAlgorithmTypeRef *TimingAlgorithmTypeRef `xml:"TimingAlgorithmTypeRef,omitempty" json:"TimingAlgorithmTypeRef,omitempty"`
	TypeOfParkingRef *TypeOfParkingRef `xml:"TypeOfParkingRef,omitempty" json:"TypeOfParkingRef,omitempty"`
	PointOfInterestClassificationRef *PointOfInterestClassificationRef `xml:"PointOfInterestClassificationRef,omitempty" json:"PointOfInterestClassificationRef,omitempty"`
	TypeOfActivationRef *TypeOfActivationRef `xml:"TypeOfActivationRef,omitempty" json:"TypeOfActivationRef,omitempty"`
	TypeOfFleetRef *TypeOfFleetRef `xml:"TypeOfFleetRef,omitempty" json:"TypeOfFleetRef,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	TypeOfDriverPermitRef *TypeOfDriverPermitRef `xml:"TypeOfDriverPermitRef,omitempty" json:"TypeOfDriverPermitRef,omitempty"`
	AcceptedDriverPermitRef *AcceptedDriverPermitRef `xml:"AcceptedDriverPermitRef,omitempty" json:"AcceptedDriverPermitRef,omitempty"`
	PurposeOfEquipmentProfileRef *PurposeOfEquipmentProfileRef `xml:"PurposeOfEquipmentProfileRef,omitempty" json:"PurposeOfEquipmentProfileRef,omitempty"`
	TypeOfProductCategoryRef *TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfPaymentMethodRef *TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	TypeOfOperationRef *TypeOfOperationRef `xml:"TypeOfOperationRef,omitempty" json:"TypeOfOperationRef,omitempty"`
	TypeOfCodespaceAssignmentRef *TypeOfCodespaceAssignmentRef `xml:"TypeOfCodespaceAssignmentRef,omitempty" json:"TypeOfCodespaceAssignmentRef,omitempty"`
	BrandingRef *BrandingRef `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	TypeOfResponsibilityRoleRef *TypeOfResponsibilityRoleRef `xml:"TypeOfResponsibilityRoleRef,omitempty" json:"TypeOfResponsibilityRoleRef,omitempty"`
	PurposeOfGroupingRef *PurposeOfGroupingRef `xml:"PurposeOfGroupingRef,omitempty" json:"PurposeOfGroupingRef,omitempty"`
	TypeOfRetailDeviceRef *TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef,omitempty" json:"TypeOfRetailDeviceRef,omitempty"`
	CustomerAccountStatusRef *CustomerAccountStatusRef `xml:"CustomerAccountStatusRef,omitempty" json:"CustomerAccountStatusRef,omitempty"`
	TypeOfCustomerAccountRef *TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef,omitempty" json:"TypeOfCustomerAccountRef,omitempty"`
	TypeOfFareContractEntryRef *TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef,omitempty" json:"TypeOfFareContractEntryRef,omitempty"`
	TypeOfFareContractRef *TypeOfFareContractRef `xml:"TypeOfFareContractRef,omitempty" json:"TypeOfFareContractRef,omitempty"`
	TypeOfAccessRightAssignmentRef *TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef,omitempty" json:"TypeOfAccessRightAssignmentRef,omitempty"`
	TypeOfSalesOfferPackageRef *TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	TypeOfFareStructureElementRef *TypeOfFareStructureElementRef `xml:"TypeOfFareStructureElementRef,omitempty" json:"TypeOfFareStructureElementRef,omitempty"`
	TypeOfTariffRef *TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	AllDistributionChannelsRef *AllDistributionChannelsRef `xml:"AllDistributionChannelsRef,omitempty" json:"AllDistributionChannelsRef,omitempty"`
	TypeOfMachineReadabilityRef *TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef,omitempty" json:"TypeOfMachineReadabilityRef,omitempty"`
	TypeOfTravelDocumentRef *TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	TypeOfMobilityServiceRef *TypeOfMobilityServiceRef `xml:"TypeOfMobilityServiceRef,omitempty" json:"TypeOfMobilityServiceRef,omitempty"`
	TypeOfFareProductRef *TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	TypeOfFareStructureFactorRef *TypeOfFareStructureFactorRef `xml:"TypeOfFareStructureFactorRef,omitempty" json:"TypeOfFareStructureFactorRef,omitempty"`
	TypeOfPricingRuleRef *TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef,omitempty" json:"TypeOfPricingRuleRef,omitempty"`
	TypeOfFlexibleServiceRef *TypeOfFlexibleServiceRef `xml:"TypeOfFlexibleServiceRef,omitempty" json:"TypeOfFlexibleServiceRef,omitempty"`
	TypeOfPassengerInformationEquipmentRef *TypeOfPassengerInformationEquipmentRef `xml:"TypeOfPassengerInformationEquipmentRef,omitempty" json:"TypeOfPassengerInformationEquipmentRef,omitempty"`
	TypeOfTimeDemandTypeRef *TypeOfTimeDemandTypeRef `xml:"TypeOfTimeDemandTypeRef,omitempty" json:"TypeOfTimeDemandTypeRef,omitempty"`
	TypeOfJourneyPatternRef *TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	TypeOfSecurityListRef *TypeOfSecurityListRef `xml:"TypeOfSecurityListRef,omitempty" json:"TypeOfSecurityListRef,omitempty"`
	TypeOfPlugRef *TypeOfPlugRef `xml:"TypeOfPlugRef,omitempty" json:"TypeOfPlugRef,omitempty"`
	TypeOfBatteryChemistryRef *TypeOfBatteryChemistryRef `xml:"TypeOfBatteryChemistryRef,omitempty" json:"TypeOfBatteryChemistryRef,omitempty"`
	TypeOfServiceFeatureRef *TypeOfServiceFeatureRef `xml:"TypeOfServiceFeatureRef,omitempty" json:"TypeOfServiceFeatureRef,omitempty"`
	TypeOfDeliveryVariantRef *TypeOfDeliveryVariantRef `xml:"TypeOfDeliveryVariantRef,omitempty" json:"TypeOfDeliveryVariantRef,omitempty"`
	TypeOfNoticeRef *TypeOfNoticeRef `xml:"TypeOfNoticeRef,omitempty" json:"TypeOfNoticeRef,omitempty"`
	TypeOfCongestionRef *TypeOfCongestionRef `xml:"TypeOfCongestionRef,omitempty" json:"TypeOfCongestionRef,omitempty"`
	TypeOfServiceRef *TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	TypeOfFacilityRef *TypeOfFacilityRef `xml:"TypeOfFacilityRef,omitempty" json:"TypeOfFacilityRef,omitempty"`
	TypeOfModeOfOperationRef *TypeOfModeOfOperationRef `xml:"TypeOfModeOfOperationRef,omitempty" json:"TypeOfModeOfOperationRef,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	TypeOfEquipmentRef *TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	TypeOfProjectionRef *TypeOfProjectionRef `xml:"TypeOfProjectionRef,omitempty" json:"TypeOfProjectionRef,omitempty"`
	TypeOfFeatureRef *TypeOfFeatureRef `xml:"TypeOfFeatureRef,omitempty" json:"TypeOfFeatureRef,omitempty"`
	TypeOfLinkSequenceRef *TypeOfLinkSequenceRef `xml:"TypeOfLinkSequenceRef,omitempty" json:"TypeOfLinkSequenceRef,omitempty"`
	TypeOfOrganisationPartRef *TypeOfOrganisationPartRef `xml:"TypeOfOrganisationPartRef,omitempty" json:"TypeOfOrganisationPartRef,omitempty"`
	TypeOfOrganisationRef *TypeOfOrganisationRef `xml:"TypeOfOrganisationRef,omitempty" json:"TypeOfOrganisationRef,omitempty"`
	TypeOfPlaceRef *TypeOfPlaceRef `xml:"TypeOfPlaceRef,omitempty" json:"TypeOfPlaceRef,omitempty"`
	TypeOfTransferRef *TypeOfTransferRef `xml:"TypeOfTransferRef,omitempty" json:"TypeOfTransferRef,omitempty"`
	TypeOfZoneRef *TypeOfZoneRef `xml:"TypeOfZoneRef,omitempty" json:"TypeOfZoneRef,omitempty"`
	TypeOfLinkRef *TypeOfLinkRef `xml:"TypeOfLinkRef,omitempty" json:"TypeOfLinkRef,omitempty"`
	TypeOfPointRef *TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
	TypeOfLineRef *TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
	TypeOfValidityRef *TypeOfValidityRef `xml:"TypeOfValidityRef,omitempty" json:"TypeOfValidityRef,omitempty"`
	TypeOfFrameRef *TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	DataSourceRef *DataSourceRef `xml:"DataSourceRef,omitempty" json:"DataSourceRef,omitempty"`
	VersionRef *VersionRef `xml:"VersionRef,omitempty" json:"VersionRef,omitempty"`
	VersionOfObjectRef *VersionOfObjectRef `xml:"VersionOfObjectRef,omitempty" json:"VersionOfObjectRef,omitempty"`
}

// TypeOfFeatureValueStructure represents the TypeOfFeature_ValueStructure element
// Type for a TYPE OF FEATURE.
type TypeOfFeatureValueStructure struct {
	TypeOfEntityVersionStructure
}

// SpatialFeature represents the SpatialFeature element
// Abstract SPATIAL FEATURE.
type SpatialFeature struct {
	GroupOfPointsVersionStructure
}

// SimpleFeature represents the SimpleFeature element
// An abstract representation of elementary objects related to the spatial representation of the network POINTs (0-dimensional objects), LINKs (1-dimensional objects) and ZONEs (2-dimensional objects) may be viewed as SIMPLE FEATUREs.
type SimpleFeature struct {
	SimpleFeatureVersionStructure
}

// ComplexFeature represents the ComplexFeature element
// An aggregate of SIMPLE FEATUREs and/or other COMPLEX FEATUREs; e.g. a STOP AREA : combination of STOP POINTs ; a train station : combination of SIMPLE FEATUREs (POINTs, LINKs) and COMPLEX FEATUREs (STOP AREAs).
type ComplexFeature struct {
	ComplexFeatureVersionStructure
}

// TypeOfFeature represents the TypeOfFeature element
// TYPE OF FEATURe.
type TypeOfFeature struct {
	TypeOfFeatureValueStructure
}

// AddressRefStructure represents the AddressRefStructure element
// Type for a reference to an ADDRESS.
type AddressRefStructure struct {
	PlaceRefStructure
}

// AddressablePlaceRefStructure represents the AddressablePlaceRefStructure element
// Type for a reference to an ADDRESSED PLACE.
type AddressablePlaceRefStructure struct {
	PlaceRefStructure
}

// RoadAddressRefStructure represents the RoadAddressRefStructure element
// Type for a reference to a TYPE OF ACTIVATION.
type RoadAddressRefStructure struct {
	AddressRefStructure
}

// PostalAddressRefStructure represents the PostalAddressRefStructure element
// Type for a reference to a TYPE OF ACTIVATION.
type PostalAddressRefStructure struct {
	AddressRefStructure
}

// AddressRef represents the AddressRef element
// Reference to an ADDRESS.
type AddressRef struct {
	AddressRefStructure
}

// AddressablePlaceRef represents the AddressablePlaceRef element
// Reference to an ADDRESSED PLACE.
type AddressablePlaceRef struct {
	AddressablePlaceRefStructure
}

// RoadAddressRef represents the RoadAddressRef element
// Reference to a Road ADDRESS.
type RoadAddressRef struct {
	RoadAddressRefStructure
}

// PostalAddressRef represents the PostalAddressRef element
// Reference to a POSTAL ADDRESS.
type PostalAddressRef struct {
	PostalAddressRefStructure
}

// AddressesInFrameRelStructure represents the addressesInFrame_RelStructure element
// Type for containment in frame of ADDRESSes.
type AddressesInFrameRelStructure struct {
	ContainmentAggregationStructure
	PostalAddress []PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	RoadAddress []RoadAddress `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
}

// CountriesInFrameRelStructure represents the countriesInFrame_RelStructure element
// Type for containment in frame of COUNTRies. +v1.1
type CountriesInFrameRelStructure struct {
	ContainmentAggregationStructure
	Country []Country `xml:"Country" json:"Country"`
}

// AddressVersionStructure represents the Address_VersionStructure element
// Type for an ADDRESS.
type AddressVersionStructure struct {
	PlaceVersionStructure
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	// Name of Counntry, derivedable from Country Ref.
	CountryName *MultilingualString `xml:"CountryName,omitempty" json:"CountryName,omitempty"`
}

// AddressablePlaceVersionStructure represents the AddressablePlace_VersionStructure element
// Type for an ADDRESSABLE PLACE.
type AddressablePlaceVersionStructure struct {
	PlaceVersionStructure
	// Default URL for ADDRESSABLE PLACE.
	Url *string `xml:"Url,omitempty" json:"Url,omitempty"`
	// Default image for ADDRESSABLE PLACE.
	Image *string `xml:"Image,omitempty" json:"Image,omitempty"`
	PostalAddress *PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	// ADDRESS of a numbered building on a named road.
	RoadAddress *RoadAddress `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
}

// RoadAddressVersionStructure represents the RoadAddress_VersionStructure element
// Type for Road ADDRESS.
type RoadAddressVersionStructure struct {
	AddressVersionStructure
	// Reference to a GIS feature identifier.
	GisFeatureRef *string `xml:"GisFeatureRef,omitempty" json:"GisFeatureRef,omitempty"`
	// Road Number.
	RoadNumber *string `xml:"RoadNumber,omitempty" json:"RoadNumber,omitempty"`
	// Road name.
	RoadName *MultilingualString `xml:"RoadName,omitempty" json:"RoadName,omitempty"`
	// Bearing of Road at point in compass octants to North.
	BearingCompass *CompassBearing16Enumeration `xml:"BearingCompass,omitempty" json:"BearingCompass,omitempty"`
	// Bearing of Road in absolute degrees against North.
	BearingDegrees *int `xml:"BearingDegrees,omitempty" json:"BearingDegrees,omitempty"`
	// Range of odd house numbers that the ROAD ADDRESS covers.
	OddNumberRange *RoadNumberRangeStructure `xml:"OddNumberRange,omitempty" json:"OddNumberRange,omitempty"`
	// Range of even house numbers that the ROAD ADDRESS covers.
	EvenNumberRange *RoadNumberRangeStructure `xml:"EvenNumberRange,omitempty" json:"EvenNumberRange,omitempty"`
}

// RoadNumberRangeStructure represents the RoadNumberRangeStructure element
// Type for a range of numbers.
type RoadNumberRangeStructure struct {
	FromNumber *int `xml:"FromNumber,omitempty" json:"FromNumber,omitempty"`
	ToNumber *int `xml:"ToNumber,omitempty" json:"ToNumber,omitempty"`
}

// PostalAddressVersionStructure represents the PostalAddress_VersionStructure element
// Type for a POSTAL ADDRESS.
type PostalAddressVersionStructure struct {
	AddressVersionStructure
	// Number of house on street.
	HouseNumber *string `xml:"HouseNumber,omitempty" json:"HouseNumber,omitempty"`
	// Name of Building.
	BuildingName *MultilingualString `xml:"BuildingName,omitempty" json:"BuildingName,omitempty"`
	// First line of Address.
	AddressLine1 *MultilingualString `xml:"AddressLine1,omitempty" json:"AddressLine1,omitempty"`
	AddressLine2 *MultilingualString `xml:"AddressLine2,omitempty" json:"AddressLine2,omitempty"`
	// Street on which building is found.
	Street *MultilingualString `xml:"Street,omitempty" json:"Street,omitempty"`
	// Town, City, Village or other named settlement.
	Town *MultilingualString `xml:"Town,omitempty" json:"Town,omitempty"`
	// Subarea of Town.
	Suburb *MultilingualString `xml:"Suburb,omitempty" json:"Suburb,omitempty"`
	// Postcode or Zip code of address.
	PostCode *string `xml:"PostCode,omitempty" json:"PostCode,omitempty"`
	// Post code extension.
	PostCodeExtension *string `xml:"PostCodeExtension,omitempty" json:"PostCodeExtension,omitempty"`
	// Postal Region.
	PostalRegion *string `xml:"PostalRegion,omitempty" json:"PostalRegion,omitempty"`
	// Province or State of Country.
	Province *MultilingualString `xml:"Province,omitempty" json:"Province,omitempty"`
	// Road on which address lies.
	RoadAddressRef *AddressRefStructure `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
}

// CountryVersionStructure represents the Country_VersionStructure element
// Type for a  COUNTRY.
type CountryVersionStructure struct {
	PlaceVersionStructure
	// Code given to COUNTRY by UIC.
	UicCode *PrivateCodeStructure `xml:"UicCode,omitempty" json:"UicCode,omitempty"`
	// Alternative names for COUNTRY.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// ISO Country Subdivision code type, eg GB-WLS, GB-SCT, GB-NIR, GB-ENG.  +v1.1.
	Principality *string `xml:"principality,attr,omitempty" json:"principality,omitempty"`
}

// Address represents the Address element
// An ADDRESS.
type Address struct {
	AddressVersionStructure
}

// AddressablePlace represents the AddressablePlace element
// A PLACE which may have an address.
type AddressablePlace struct {
	AddressablePlaceVersionStructure
}

// RoadAddress represents the RoadAddress element
// Specialisation of ADDRESS refining it by using the characteristics such as road number, and name used for conventional identification of along a road.
type RoadAddress struct {
	RoadAddressVersionStructure
}

// PostalAddress represents the PostalAddress element
// A POSTAL ADDRESS to which mail can be sent.
type PostalAddress struct {
	PostalAddressVersionStructure
}

// Country represents the Country element
// A sovereign COUNTRY.where entities may be located or domiciled.
type Country struct {
	CountryVersionStructure
}

// TopographicPlaceTypeEnumeration represents the TopographicPlaceTypeEnumeration enumeration
// Allowed values for classifying TOPOGRAPHIC PLACEs.
type TopographicPlaceTypeEnumeration string

const (
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationContinent represents continent
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationContinent TopographicPlaceTypeEnumeration = "continent"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationInterregion represents interregion
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationInterregion TopographicPlaceTypeEnumeration = "interregion"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationCountry represents country
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationCountry TopographicPlaceTypeEnumeration = "country"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationPrincipality represents principality
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationPrincipality TopographicPlaceTypeEnumeration = "principality"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationState represents state
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationState TopographicPlaceTypeEnumeration = "state"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationProvince represents province
	// Country, province, principality - e.g. E.g. England, Wales.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationProvince TopographicPlaceTypeEnumeration = "province"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationRegion represents region
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationRegion TopographicPlaceTypeEnumeration = "region"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationCounty represents county
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationCounty TopographicPlaceTypeEnumeration = "county"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationArea represents area
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationArea TopographicPlaceTypeEnumeration = "area"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationConurbation represents conurbation
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationConurbation TopographicPlaceTypeEnumeration = "conurbation"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationCity represents city
	// Locality is a city.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationCity TopographicPlaceTypeEnumeration = "city"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationMunicipality represents municipality
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationMunicipality TopographicPlaceTypeEnumeration = "municipality"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationQuarter represents quarter
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationQuarter TopographicPlaceTypeEnumeration = "quarter"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationSuburb represents suburb
	// Locality is an urban sub-area.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationSuburb TopographicPlaceTypeEnumeration = "suburb"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationTown represents town
	// Locality is a town.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationTown TopographicPlaceTypeEnumeration = "town"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationUrbanCentre represents urbanCentre
	// Locality is a City Centre or Town Centre ZONE of another town or city locality.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationUrbanCentre TopographicPlaceTypeEnumeration = "urbanCentre"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationDistrict represents district
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationDistrict TopographicPlaceTypeEnumeration = "district"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationParish represents parish
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationParish TopographicPlaceTypeEnumeration = "parish"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationVillage represents village
	// Locality is a village.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationVillage TopographicPlaceTypeEnumeration = "village"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationHamlet represents hamlet
	// Locality is a hamlet.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationHamlet TopographicPlaceTypeEnumeration = "hamlet"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationPlaceOfInterest represents placeOfInterest
	// Locality is a place of interest whose name is distinct from another locality.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationPlaceOfInterest TopographicPlaceTypeEnumeration = "placeOfInterest"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationOther represents other
	// Locality is none of the other types.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationOther TopographicPlaceTypeEnumeration = "other"
	// TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationUnrecorded represents unrecorded
	// Locality type is not yet specified.
	TopographicPlaceTypeEnumerationTopographicPlaceTypeEnumerationUnrecorded TopographicPlaceTypeEnumeration = "unrecorded"
)

// TopographicPlaceRefStructure represents the TopographicPlaceRefStructure element
// Type for a reference to a TOPOGRAPHIC PLACE.
type TopographicPlaceRefStructure struct {
	PlaceRefStructure
}

// TopographicPlaceRefsRelStructure represents the topographicPlaceRefs_RelStructure element
// A collection of one or more references to TOPOGRAPHIC PLACE.
type TopographicPlaceRefsRelStructure struct {
	OneToManyRelationshipStructure
	// Reference to the identifier of a TOPOGRAPHIC PLACE.
	TopographicPlaceRef []TopographicPlaceRefStructure `xml:"TopographicPlaceRef" json:"TopographicPlaceRef"`
}

// GroupOfPlacesRefStructure represents the GroupOfPlacesRefStructure element
// Type for a GROUP OF PLACEs.
type GroupOfPlacesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// TopographicProjectionRefStructure represents the TopographicProjectionRefStructure element
// Type for a reference to a TOPOGRAPHIC PROJECTION
type TopographicProjectionRefStructure struct {
	ZoneProjectionRefStructure
}

// TopographicPlaceRef represents the TopographicPlaceRef element
// Reference to a TOPOGRAPHIC PLACE.
type TopographicPlaceRef struct {
	TopographicPlaceRefStructure
}

// GroupOfPlacesRef represents the GroupOfPlacesRef element
// Reference to a GROUP OF PLACEs.
type GroupOfPlacesRef struct {
	GroupOfPlacesRefStructure
}

// TopographicProjectionRef represents the TopographicProjectionRef element
// Reference to a TOPOGRAPHIC PROJECTION.
type TopographicProjectionRef struct {
	TopographicProjectionRefStructure
}

// RailSubmodeEnumeration represents the RailSubmodeEnumeration enumeration
// Values for Rail MODEs of TRANSPORT: TPEG pti_table_02, train link loc_table_13.
type RailSubmodeEnumeration string

const (
	// RailSubmodeEnumerationUnknown represents unknown
	RailSubmodeEnumerationUnknown RailSubmodeEnumeration = "unknown"
	// RailSubmodeEnumerationLocal represents local
	RailSubmodeEnumerationLocal RailSubmodeEnumeration = "local"
	// RailSubmodeEnumerationHighSpeedRail represents highSpeedRail
	// See ERA B.4.7009 - Name: Item description code: (8 high speed train).
	// Long distance train formed by a unit capable for high speed running on high speed or normal lines most modern train unit
	RailSubmodeEnumerationHighSpeedRail RailSubmodeEnumeration = "highSpeedRail"
	// RailSubmodeEnumerationSuburbanRailway represents suburbanRailway
	// See ERA B.4.7009 - Name: Item description code: . (12 suburban)
	// Regional train organised by the regional government public transport in and around cities, running on its own freeways underground or overground, operational running with signals
	RailSubmodeEnumerationSuburbanRailway RailSubmodeEnumeration = "suburbanRailway"
	// RailSubmodeEnumerationRegionalRail represents regionalRail
	// See ERA B.4.7009 - Name: Item description code. (11 Regional)
	// Regional train organised by the regional government even if formed by a unit capable for high speed running on high speed lines
	RailSubmodeEnumerationRegionalRail RailSubmodeEnumeration = "regionalRail"
	// RailSubmodeEnumerationInterregionalRail represents interregionalRail
	// See ERA B.4.7009 - Name: Item description code: (10 Interregional)
	// Regional train running in more than one region.
	RailSubmodeEnumerationInterregionalRail RailSubmodeEnumeration = "interregionalRail"
	// RailSubmodeEnumerationLongDistance represents longDistance
	// See ERA B.4.7009 - Name: Item description code: (9 Intercity).
	// Long distance train formed by a unit capable for high speed or not running on high speed or normal lines modern train unit high quality service restricted stopping pattern
	RailSubmodeEnumerationLongDistance RailSubmodeEnumeration = "longDistance"
	// RailSubmodeEnumerationInternational represents international
	RailSubmodeEnumerationInternational RailSubmodeEnumeration = "international"
	// RailSubmodeEnumerationSleeperRailService represents sleeperRailService
	RailSubmodeEnumerationSleeperRailService RailSubmodeEnumeration = "sleeperRailService"
	// RailSubmodeEnumerationNightRail represents nightRail
	RailSubmodeEnumerationNightRail RailSubmodeEnumeration = "nightRail"
	// RailSubmodeEnumerationCarTransportRailService represents carTransportRailService
	// See ERA B.4.7009 - Name: Item description code: (14 Motor rail)
	// Service transporting passenger's motor vehicle passengers are admitted either with vehicle only or with or without vehicle
	// Service mode
	RailSubmodeEnumerationCarTransportRailService RailSubmodeEnumeration = "carTransportRailService"
	// RailSubmodeEnumerationTouristRailway represents touristRailway
	// See ERA B.4.7009 - Name: Item description code: (16 Historic train).
	RailSubmodeEnumerationTouristRailway RailSubmodeEnumeration = "touristRailway"
	// RailSubmodeEnumerationAirportLinkRail represents airportLinkRail
	RailSubmodeEnumerationAirportLinkRail RailSubmodeEnumeration = "airportLinkRail"
	// RailSubmodeEnumerationRailShuttle represents railShuttle
	RailSubmodeEnumerationRailShuttle RailSubmodeEnumeration = "railShuttle"
	// RailSubmodeEnumerationReplacementRailService represents replacementRailService
	RailSubmodeEnumerationReplacementRailService RailSubmodeEnumeration = "replacementRailService"
	// RailSubmodeEnumerationSpecialTrain represents specialTrain
	RailSubmodeEnumerationSpecialTrain RailSubmodeEnumeration = "specialTrain"
	// RailSubmodeEnumerationCrossCountryRail represents crossCountryRail
	RailSubmodeEnumerationCrossCountryRail RailSubmodeEnumeration = "crossCountryRail"
	// RailSubmodeEnumerationRackAndPinionRailway represents rackAndPinionRailway
	// See ERA B.4.7009 - Name: Item description code: (15 Mountain train)
	// Local train adapted for running in mountain railway lines.
	RailSubmodeEnumerationRackAndPinionRailway RailSubmodeEnumeration = "rackAndPinionRailway"
)

// CoachSubmodeEnumeration represents the CoachSubmodeEnumeration enumeration
// Values for Coach MODEs of TRANSPORT: TPEG pti_table_03.
type CoachSubmodeEnumeration string

const (
	// CoachSubmodeEnumerationUnknown represents unknown
	CoachSubmodeEnumerationUnknown CoachSubmodeEnumeration = "unknown"
	// CoachSubmodeEnumerationUndefined represents undefined
	CoachSubmodeEnumerationUndefined CoachSubmodeEnumeration = "undefined"
	// CoachSubmodeEnumerationInternationalCoach represents internationalCoach
	CoachSubmodeEnumerationInternationalCoach CoachSubmodeEnumeration = "internationalCoach"
	// CoachSubmodeEnumerationNationalCoach represents nationalCoach
	CoachSubmodeEnumerationNationalCoach CoachSubmodeEnumeration = "nationalCoach"
	// CoachSubmodeEnumerationShuttleCoach represents shuttleCoach
	CoachSubmodeEnumerationShuttleCoach CoachSubmodeEnumeration = "shuttleCoach"
	// CoachSubmodeEnumerationRegionalCoach represents regionalCoach
	CoachSubmodeEnumerationRegionalCoach CoachSubmodeEnumeration = "regionalCoach"
	// CoachSubmodeEnumerationSpecialCoach represents specialCoach
	CoachSubmodeEnumerationSpecialCoach CoachSubmodeEnumeration = "specialCoach"
	// CoachSubmodeEnumerationSchoolCoach represents schoolCoach
	CoachSubmodeEnumerationSchoolCoach CoachSubmodeEnumeration = "schoolCoach"
	// CoachSubmodeEnumerationSightseeingCoach represents sightseeingCoach
	CoachSubmodeEnumerationSightseeingCoach CoachSubmodeEnumeration = "sightseeingCoach"
	// CoachSubmodeEnumerationTouristCoach represents touristCoach
	CoachSubmodeEnumerationTouristCoach CoachSubmodeEnumeration = "touristCoach"
	// CoachSubmodeEnumerationCommuterCoach represents commuterCoach
	CoachSubmodeEnumerationCommuterCoach CoachSubmodeEnumeration = "commuterCoach"
)

// MetroSubmodeEnumeration represents the MetroSubmodeEnumeration enumeration
// Values for Metro MODEs of TRANSPORT: TPEG pti_table_04.
type MetroSubmodeEnumeration string

const (
	// MetroSubmodeEnumerationUnknown represents unknown
	MetroSubmodeEnumerationUnknown MetroSubmodeEnumeration = "unknown"
	// MetroSubmodeEnumerationUndefined represents undefined
	MetroSubmodeEnumerationUndefined MetroSubmodeEnumeration = "undefined"
	// MetroSubmodeEnumerationMetro represents metro
	MetroSubmodeEnumerationMetro MetroSubmodeEnumeration = "metro"
	// MetroSubmodeEnumerationTube represents tube
	// DEPRECATED. Use metro
	MetroSubmodeEnumerationTube MetroSubmodeEnumeration = "tube"
	// MetroSubmodeEnumerationUrbanRailway represents urbanRailway
	// Replaces the Mode urbanRail.
	MetroSubmodeEnumerationUrbanRailway MetroSubmodeEnumeration = "urbanRailway"
)

// BusSubmodeEnumeration represents the BusSubmodeEnumeration enumeration
// Values for Bus MODEs of TRANSPORT: TPEG pti_table_05, col_table_10.
type BusSubmodeEnumeration string

const (
	// BusSubmodeEnumerationUnknown represents unknown
	BusSubmodeEnumerationUnknown BusSubmodeEnumeration = "unknown"
	// BusSubmodeEnumerationUndefined represents undefined
	BusSubmodeEnumerationUndefined BusSubmodeEnumeration = "undefined"
	// BusSubmodeEnumerationLocalBus represents localBus
	BusSubmodeEnumerationLocalBus BusSubmodeEnumeration = "localBus"
	// BusSubmodeEnumerationRegionalBus represents regionalBus
	BusSubmodeEnumerationRegionalBus BusSubmodeEnumeration = "regionalBus"
	// BusSubmodeEnumerationExpressBus represents expressBus
	BusSubmodeEnumerationExpressBus BusSubmodeEnumeration = "expressBus"
	// BusSubmodeEnumerationNightBus represents nightBus
	BusSubmodeEnumerationNightBus BusSubmodeEnumeration = "nightBus"
	// BusSubmodeEnumerationPostBus represents postBus
	BusSubmodeEnumerationPostBus BusSubmodeEnumeration = "postBus"
	// BusSubmodeEnumerationSpecialNeedsBus represents specialNeedsBus
	BusSubmodeEnumerationSpecialNeedsBus BusSubmodeEnumeration = "specialNeedsBus"
	// BusSubmodeEnumerationMobilityBus represents mobilityBus
	BusSubmodeEnumerationMobilityBus BusSubmodeEnumeration = "mobilityBus"
	// BusSubmodeEnumerationMobilityBusForRegisteredDisabled represents mobilityBusForRegisteredDisabled
	BusSubmodeEnumerationMobilityBusForRegisteredDisabled BusSubmodeEnumeration = "mobilityBusForRegisteredDisabled"
	// BusSubmodeEnumerationSightseeingBus represents sightseeingBus
	BusSubmodeEnumerationSightseeingBus BusSubmodeEnumeration = "sightseeingBus"
	// BusSubmodeEnumerationShuttleBus represents shuttleBus
	BusSubmodeEnumerationShuttleBus BusSubmodeEnumeration = "shuttleBus"
	// BusSubmodeEnumerationHighFrequencyBus represents highFrequencyBus
	BusSubmodeEnumerationHighFrequencyBus BusSubmodeEnumeration = "highFrequencyBus"
	// BusSubmodeEnumerationDedicatedLaneBus represents dedicatedLaneBus
	BusSubmodeEnumerationDedicatedLaneBus BusSubmodeEnumeration = "dedicatedLaneBus"
	// BusSubmodeEnumerationSchoolBus represents schoolBus
	BusSubmodeEnumerationSchoolBus BusSubmodeEnumeration = "schoolBus"
	// BusSubmodeEnumerationSchoolAndPublicServiceBus represents schoolAndPublicServiceBus
	BusSubmodeEnumerationSchoolAndPublicServiceBus BusSubmodeEnumeration = "schoolAndPublicServiceBus"
	// BusSubmodeEnumerationRailReplacementBus represents railReplacementBus
	BusSubmodeEnumerationRailReplacementBus BusSubmodeEnumeration = "railReplacementBus"
	// BusSubmodeEnumerationDemandAndResponseBus represents demandAndResponseBus
	BusSubmodeEnumerationDemandAndResponseBus BusSubmodeEnumeration = "demandAndResponseBus"
	// BusSubmodeEnumerationAirportLinkBus represents airportLinkBus
	BusSubmodeEnumerationAirportLinkBus BusSubmodeEnumeration = "airportLinkBus"
)

// TramSubmodeEnumeration represents the TramSubmodeEnumeration enumeration
// Values for Tram MODEs of TRANSPORT: TPEG pti_table_06, col_table_12.
type TramSubmodeEnumeration string

const (
	// TramSubmodeEnumerationUnknown represents unknown
	TramSubmodeEnumerationUnknown TramSubmodeEnumeration = "unknown"
	// TramSubmodeEnumerationUndefined represents undefined
	TramSubmodeEnumerationUndefined TramSubmodeEnumeration = "undefined"
	// TramSubmodeEnumerationCityTram represents cityTram
	TramSubmodeEnumerationCityTram TramSubmodeEnumeration = "cityTram"
	// TramSubmodeEnumerationLocalTram represents localTram
	TramSubmodeEnumerationLocalTram TramSubmodeEnumeration = "localTram"
	// TramSubmodeEnumerationRegionalTram represents regionalTram
	TramSubmodeEnumerationRegionalTram TramSubmodeEnumeration = "regionalTram"
	// TramSubmodeEnumerationSightseeingTram represents sightseeingTram
	TramSubmodeEnumerationSightseeingTram TramSubmodeEnumeration = "sightseeingTram"
	// TramSubmodeEnumerationShuttleTram represents shuttleTram
	TramSubmodeEnumerationShuttleTram TramSubmodeEnumeration = "shuttleTram"
	// TramSubmodeEnumerationTrainTram represents trainTram
	TramSubmodeEnumerationTrainTram TramSubmodeEnumeration = "trainTram"
)

// WaterSubmodeEnumeration represents the WaterSubmodeEnumeration enumeration
// Values for Water MODEs of TRANSPORT: TPEG pti_table_07.
type WaterSubmodeEnumeration string

const (
	// WaterSubmodeEnumerationUnknown represents unknown
	WaterSubmodeEnumerationUnknown WaterSubmodeEnumeration = "unknown"
	// WaterSubmodeEnumerationUndefined represents undefined
	WaterSubmodeEnumerationUndefined WaterSubmodeEnumeration = "undefined"
	// WaterSubmodeEnumerationInternationalCarFerry represents internationalCarFerry
	WaterSubmodeEnumerationInternationalCarFerry WaterSubmodeEnumeration = "internationalCarFerry"
	// WaterSubmodeEnumerationNationalCarFerry represents nationalCarFerry
	WaterSubmodeEnumerationNationalCarFerry WaterSubmodeEnumeration = "nationalCarFerry"
	// WaterSubmodeEnumerationRegionalCarFerry represents regionalCarFerry
	WaterSubmodeEnumerationRegionalCarFerry WaterSubmodeEnumeration = "regionalCarFerry"
	// WaterSubmodeEnumerationLocalCarFerry represents localCarFerry
	WaterSubmodeEnumerationLocalCarFerry WaterSubmodeEnumeration = "localCarFerry"
	// WaterSubmodeEnumerationInternationalPassengerFerry represents internationalPassengerFerry
	WaterSubmodeEnumerationInternationalPassengerFerry WaterSubmodeEnumeration = "internationalPassengerFerry"
	// WaterSubmodeEnumerationNationalPassengerFerry represents nationalPassengerFerry
	WaterSubmodeEnumerationNationalPassengerFerry WaterSubmodeEnumeration = "nationalPassengerFerry"
	// WaterSubmodeEnumerationRegionalPassengerFerry represents regionalPassengerFerry
	WaterSubmodeEnumerationRegionalPassengerFerry WaterSubmodeEnumeration = "regionalPassengerFerry"
	// WaterSubmodeEnumerationLocalPassengerFerry represents localPassengerFerry
	WaterSubmodeEnumerationLocalPassengerFerry WaterSubmodeEnumeration = "localPassengerFerry"
	// WaterSubmodeEnumerationPostBoat represents postBoat
	WaterSubmodeEnumerationPostBoat WaterSubmodeEnumeration = "postBoat"
	// WaterSubmodeEnumerationTrainFerry represents trainFerry
	WaterSubmodeEnumerationTrainFerry WaterSubmodeEnumeration = "trainFerry"
	// WaterSubmodeEnumerationRoadFerryLink represents roadFerryLink
	WaterSubmodeEnumerationRoadFerryLink WaterSubmodeEnumeration = "roadFerryLink"
	// WaterSubmodeEnumerationAirportBoatLink represents airportBoatLink
	WaterSubmodeEnumerationAirportBoatLink WaterSubmodeEnumeration = "airportBoatLink"
	// WaterSubmodeEnumerationHighSpeedVehicleService represents highSpeedVehicleService
	WaterSubmodeEnumerationHighSpeedVehicleService WaterSubmodeEnumeration = "highSpeedVehicleService"
	// WaterSubmodeEnumerationHighSpeedPassengerService represents highSpeedPassengerService
	WaterSubmodeEnumerationHighSpeedPassengerService WaterSubmodeEnumeration = "highSpeedPassengerService"
	// WaterSubmodeEnumerationSightseeingService represents sightseeingService
	WaterSubmodeEnumerationSightseeingService WaterSubmodeEnumeration = "sightseeingService"
	// WaterSubmodeEnumerationSchoolBoat represents schoolBoat
	WaterSubmodeEnumerationSchoolBoat WaterSubmodeEnumeration = "schoolBoat"
	// WaterSubmodeEnumerationCableFerry represents cableFerry
	WaterSubmodeEnumerationCableFerry WaterSubmodeEnumeration = "cableFerry"
	// WaterSubmodeEnumerationRiverBus represents riverBus
	WaterSubmodeEnumerationRiverBus WaterSubmodeEnumeration = "riverBus"
	// WaterSubmodeEnumerationScheduledFerry represents scheduledFerry
	WaterSubmodeEnumerationScheduledFerry WaterSubmodeEnumeration = "scheduledFerry"
	// WaterSubmodeEnumerationShuttleFerryService represents shuttleFerryService
	WaterSubmodeEnumerationShuttleFerryService WaterSubmodeEnumeration = "shuttleFerryService"
	// WaterSubmodeEnumerationCanalBarge represents canalBarge
	WaterSubmodeEnumerationCanalBarge WaterSubmodeEnumeration = "canalBarge"
)

// AirSubmodeEnumeration represents the AirSubmodeEnumeration enumeration
// Values for Air MODEs of TRANSPORT: TPEG pti_table_08.
type AirSubmodeEnumeration string

const (
	// AirSubmodeEnumerationUnknown represents unknown
	AirSubmodeEnumerationUnknown AirSubmodeEnumeration = "unknown"
	// AirSubmodeEnumerationUndefined represents undefined
	AirSubmodeEnumerationUndefined AirSubmodeEnumeration = "undefined"
	// AirSubmodeEnumerationInternationalFlight represents internationalFlight
	AirSubmodeEnumerationInternationalFlight AirSubmodeEnumeration = "internationalFlight"
	// AirSubmodeEnumerationDomesticFlight represents domesticFlight
	AirSubmodeEnumerationDomesticFlight AirSubmodeEnumeration = "domesticFlight"
	// AirSubmodeEnumerationIntercontinentalFlight represents intercontinentalFlight
	AirSubmodeEnumerationIntercontinentalFlight AirSubmodeEnumeration = "intercontinentalFlight"
	// AirSubmodeEnumerationDomesticScheduledFlight represents domesticScheduledFlight
	AirSubmodeEnumerationDomesticScheduledFlight AirSubmodeEnumeration = "domesticScheduledFlight"
	// AirSubmodeEnumerationShuttleFlight represents shuttleFlight
	AirSubmodeEnumerationShuttleFlight AirSubmodeEnumeration = "shuttleFlight"
	// AirSubmodeEnumerationIntercontinentalCharterFlight represents intercontinentalCharterFlight
	AirSubmodeEnumerationIntercontinentalCharterFlight AirSubmodeEnumeration = "intercontinentalCharterFlight"
	// AirSubmodeEnumerationInternationalCharterFlight represents internationalCharterFlight
	AirSubmodeEnumerationInternationalCharterFlight AirSubmodeEnumeration = "internationalCharterFlight"
	// AirSubmodeEnumerationRoundTripCharterFlight represents roundTripCharterFlight
	AirSubmodeEnumerationRoundTripCharterFlight AirSubmodeEnumeration = "roundTripCharterFlight"
	// AirSubmodeEnumerationSightseeingFlight represents sightseeingFlight
	AirSubmodeEnumerationSightseeingFlight AirSubmodeEnumeration = "sightseeingFlight"
	// AirSubmodeEnumerationHelicopterService represents helicopterService
	AirSubmodeEnumerationHelicopterService AirSubmodeEnumeration = "helicopterService"
	// AirSubmodeEnumerationDomesticCharterFlight represents domesticCharterFlight
	AirSubmodeEnumerationDomesticCharterFlight AirSubmodeEnumeration = "domesticCharterFlight"
	// AirSubmodeEnumerationSchengenAreaFlight represents SchengenAreaFlight
	AirSubmodeEnumerationSchengenAreaFlight AirSubmodeEnumeration = "SchengenAreaFlight"
	// AirSubmodeEnumerationAirshipService represents airshipService
	AirSubmodeEnumerationAirshipService AirSubmodeEnumeration = "airshipService"
	// AirSubmodeEnumerationShortHaulInternationalFlight represents shortHaulInternationalFlight
	AirSubmodeEnumerationShortHaulInternationalFlight AirSubmodeEnumeration = "shortHaulInternationalFlight"
)

// TelecabinSubmodeEnumeration represents the TelecabinSubmodeEnumeration enumeration
// Values for Telecabin MODEs of TRANSPORT: TPEG pti_table_09, col_table_14.
type TelecabinSubmodeEnumeration string

const (
	// TelecabinSubmodeEnumerationUnknown represents unknown
	TelecabinSubmodeEnumerationUnknown TelecabinSubmodeEnumeration = "unknown"
	// TelecabinSubmodeEnumerationUndefined represents undefined
	TelecabinSubmodeEnumerationUndefined TelecabinSubmodeEnumeration = "undefined"
	// TelecabinSubmodeEnumerationTelecabin represents telecabin
	TelecabinSubmodeEnumerationTelecabin TelecabinSubmodeEnumeration = "telecabin"
	// TelecabinSubmodeEnumerationCableCar represents cableCar
	TelecabinSubmodeEnumerationCableCar TelecabinSubmodeEnumeration = "cableCar"
	// TelecabinSubmodeEnumerationLift represents lift
	TelecabinSubmodeEnumerationLift TelecabinSubmodeEnumeration = "lift"
	// TelecabinSubmodeEnumerationChairLift represents chairLift
	TelecabinSubmodeEnumerationChairLift TelecabinSubmodeEnumeration = "chairLift"
	// TelecabinSubmodeEnumerationDragLift represents dragLift
	TelecabinSubmodeEnumerationDragLift TelecabinSubmodeEnumeration = "dragLift"
	// TelecabinSubmodeEnumerationTelecabinLink represents telecabinLink
	TelecabinSubmodeEnumerationTelecabinLink TelecabinSubmodeEnumeration = "telecabinLink"
)

// FunicularSubmodeEnumeration represents the FunicularSubmodeEnumeration enumeration
// Values for Funicular MODEs of TRANSPORT: TPEG pti_table_10.
type FunicularSubmodeEnumeration string

const (
	// FunicularSubmodeEnumerationUnknown represents unknown
	FunicularSubmodeEnumerationUnknown FunicularSubmodeEnumeration = "unknown"
	// FunicularSubmodeEnumerationFunicular represents funicular
	FunicularSubmodeEnumerationFunicular FunicularSubmodeEnumeration = "funicular"
	// FunicularSubmodeEnumerationStreetCableCar represents streetCableCar
	FunicularSubmodeEnumerationStreetCableCar FunicularSubmodeEnumeration = "streetCableCar"
	// FunicularSubmodeEnumerationAllFunicularServices represents allFunicularServices
	FunicularSubmodeEnumerationAllFunicularServices FunicularSubmodeEnumeration = "allFunicularServices"
	// FunicularSubmodeEnumerationUndefinedFunicular represents undefinedFunicular
	FunicularSubmodeEnumerationUndefinedFunicular FunicularSubmodeEnumeration = "undefinedFunicular"
)

// TaxiSubmodeEnumeration represents the TaxiSubmodeEnumeration enumeration
// Values for Taxi MODEs of TRANSPORT: TPEG pti_table_11.
type TaxiSubmodeEnumeration string

const (
	// TaxiSubmodeEnumerationUnknown represents unknown
	TaxiSubmodeEnumerationUnknown TaxiSubmodeEnumeration = "unknown"
	// TaxiSubmodeEnumerationUndefined represents undefined
	TaxiSubmodeEnumerationUndefined TaxiSubmodeEnumeration = "undefined"
	// TaxiSubmodeEnumerationCommunalTaxi represents communalTaxi
	TaxiSubmodeEnumerationCommunalTaxi TaxiSubmodeEnumeration = "communalTaxi"
	// TaxiSubmodeEnumerationCharterTaxi represents charterTaxi
	TaxiSubmodeEnumerationCharterTaxi TaxiSubmodeEnumeration = "charterTaxi"
	// TaxiSubmodeEnumerationWaterTaxi represents waterTaxi
	TaxiSubmodeEnumerationWaterTaxi TaxiSubmodeEnumeration = "waterTaxi"
	// TaxiSubmodeEnumerationRailTaxi represents railTaxi
	TaxiSubmodeEnumerationRailTaxi TaxiSubmodeEnumeration = "railTaxi"
	// TaxiSubmodeEnumerationBikeTaxi represents bikeTaxi
	TaxiSubmodeEnumerationBikeTaxi TaxiSubmodeEnumeration = "bikeTaxi"
	// TaxiSubmodeEnumerationBlackCab represents blackCab
	TaxiSubmodeEnumerationBlackCab TaxiSubmodeEnumeration = "blackCab"
	// TaxiSubmodeEnumerationMiniCab represents miniCab
	TaxiSubmodeEnumerationMiniCab TaxiSubmodeEnumeration = "miniCab"
	// TaxiSubmodeEnumerationAppTaxi represents appTaxi
	TaxiSubmodeEnumerationAppTaxi TaxiSubmodeEnumeration = "appTaxi"
	// TaxiSubmodeEnumerationFiacre represents fiacre
	TaxiSubmodeEnumerationFiacre TaxiSubmodeEnumeration = "fiacre"
	// TaxiSubmodeEnumerationRickshaw represents rickshaw
	TaxiSubmodeEnumerationRickshaw TaxiSubmodeEnumeration = "rickshaw"
	// TaxiSubmodeEnumerationCycleRickshaw represents cycleRickshaw
	TaxiSubmodeEnumerationCycleRickshaw TaxiSubmodeEnumeration = "cycleRickshaw"
	// TaxiSubmodeEnumerationAllTaxiServices represents allTaxiServices
	TaxiSubmodeEnumerationAllTaxiServices TaxiSubmodeEnumeration = "allTaxiServices"
)

// SelfDriveSubmodeEnumeration represents the SelfDriveSubmodeEnumeration enumeration
// Values for SelfDrive MODEs of TRANSPORT: TPEG pti_table_12.
type SelfDriveSubmodeEnumeration string

const (
	// SelfDriveSubmodeEnumerationUnknown represents unknown
	SelfDriveSubmodeEnumerationUnknown SelfDriveSubmodeEnumeration = "unknown"
	// SelfDriveSubmodeEnumerationUndefined represents undefined
	SelfDriveSubmodeEnumerationUndefined SelfDriveSubmodeEnumeration = "undefined"
	// SelfDriveSubmodeEnumerationHireScooter represents hireScooter
	// Rental scooter (Small wheeled  low platform  vehicles, - includes push scooters, electric scooters, skateboards,  Sedgeways, etc). +v1.2.2
	SelfDriveSubmodeEnumerationHireScooter SelfDriveSubmodeEnumeration = "hireScooter"
	// SelfDriveSubmodeEnumerationHireCycle represents hireCycle
	// Rental cycle  (Bicycle, tandem, tricycle, pedal or electric ; use SimpleVehicleType / VehicleCategory  to specify exact model. Includes pedal cycles, electric bikes, hybrids, etc). +v1.2.2
	SelfDriveSubmodeEnumerationHireCycle SelfDriveSubmodeEnumeration = "hireCycle"
	// SelfDriveSubmodeEnumerationHireMotorbike represents hireMotorbike
	// Rental motorcycle (moped, velo, motorbike, quadbike, etc  ; use SimpleVehicleType / VehicleCategory  to specify exact model.
	SelfDriveSubmodeEnumerationHireMotorbike SelfDriveSubmodeEnumeration = "hireMotorbike"
	// SelfDriveSubmodeEnumerationHireCar represents hireCar
	// Rental car - Includes all sizes (Small, mini, medium, large, etc)
	SelfDriveSubmodeEnumerationHireCar SelfDriveSubmodeEnumeration = "hireCar"
	// SelfDriveSubmodeEnumerationHireVan represents hireVan
	// Rental van - Includes all categories of small to large minivan, minibus and transporter.
	SelfDriveSubmodeEnumerationHireVan SelfDriveSubmodeEnumeration = "hireVan"
	// SelfDriveSubmodeEnumerationOwnScooter represents ownScooter
	// Own scooter (Small wheeled  low platform  vehicles, - includes push scooters, electric scooters, skateboards,  Sedgeways, etc). +v1.2.2
	SelfDriveSubmodeEnumerationOwnScooter SelfDriveSubmodeEnumeration = "ownScooter"
	// SelfDriveSubmodeEnumerationOwnCycle represents ownCycle
	// Own cycle (Bicycle, tandem, tricile, pedal or electric ; use SimpleVehicleType / VehicleCategory to specify exact model. Includes push scooters, electric scooters, skateboards,  Sedgeways, etc). +v1.2.2
	SelfDriveSubmodeEnumerationOwnCycle SelfDriveSubmodeEnumeration = "ownCycle"
	// SelfDriveSubmodeEnumerationOwnMotorbike represents ownMotorbike
	// Own motorcycle (moped, velo, motorbike, quadbike, etc  ; use SimpleVehicleType / VehicleCategory  to specify exact model.  +v1.2.2
	SelfDriveSubmodeEnumerationOwnMotorbike SelfDriveSubmodeEnumeration = "ownMotorbike"
	// SelfDriveSubmodeEnumerationOwnCar represents ownCar
	// OWn car. Includes all sizes (Small, mini, medium, large, etc) +v1.2.2
	SelfDriveSubmodeEnumerationOwnCar SelfDriveSubmodeEnumeration = "ownCar"
	// SelfDriveSubmodeEnumerationOwnVan represents ownVan
	// Own van - Includes all categories of small to large minivan, minibus and transporter.+v1.2.2
	SelfDriveSubmodeEnumerationOwnVan SelfDriveSubmodeEnumeration = "ownVan"
	// SelfDriveSubmodeEnumerationAllHireVehicles represents allHireVehicles
	SelfDriveSubmodeEnumerationAllHireVehicles SelfDriveSubmodeEnumeration = "allHireVehicles"
	// SelfDriveSubmodeEnumerationAllVehicles represents allVehicles
	SelfDriveSubmodeEnumerationAllVehicles SelfDriveSubmodeEnumeration = "allVehicles"
)

// SnowAndIceSubmodeEnumeration represents the SnowAndIceSubmodeEnumeration enumeration
// Values for Snow and Ice SUBMODEs of TRANSPORT
type SnowAndIceSubmodeEnumeration string

const (
	// SnowAndIceSubmodeEnumerationUnknown represents unknown
	SnowAndIceSubmodeEnumerationUnknown SnowAndIceSubmodeEnumeration = "unknown"
	// SnowAndIceSubmodeEnumerationUndefined represents undefined
	SnowAndIceSubmodeEnumerationUndefined SnowAndIceSubmodeEnumeration = "undefined"
	// SnowAndIceSubmodeEnumerationSnowMobile represents snowMobile
	SnowAndIceSubmodeEnumerationSnowMobile SnowAndIceSubmodeEnumeration = "snowMobile"
	// SnowAndIceSubmodeEnumerationSnowCat represents snowCat
	SnowAndIceSubmodeEnumerationSnowCat SnowAndIceSubmodeEnumeration = "snowCat"
	// SnowAndIceSubmodeEnumerationSnowCoach represents snowCoach
	SnowAndIceSubmodeEnumerationSnowCoach SnowAndIceSubmodeEnumeration = "snowCoach"
	// SnowAndIceSubmodeEnumerationTerraBus represents terraBus
	SnowAndIceSubmodeEnumerationTerraBus SnowAndIceSubmodeEnumeration = "terraBus"
	// SnowAndIceSubmodeEnumerationWindSled represents windSled
	SnowAndIceSubmodeEnumerationWindSled SnowAndIceSubmodeEnumeration = "windSled"
)

// AllSubmodeStructure represents the AllSubmodeStructure element
// Type for all Sub modes.
type AllSubmodeStructure struct {
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
	TaxiSubmode *TaxiSubmode `xml:"TaxiSubmode,omitempty" json:"TaxiSubmode,omitempty"`
	SelfDriveSubmode *SelfDriveSubmode `xml:"SelfDriveSubmode,omitempty" json:"SelfDriveSubmode,omitempty"`
}

// TransportSubmodeStructure represents the TransportSubmodeStructure element
// Type for Transport Sub mode.
type TransportSubmodeStructure struct {
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
	TaxiSubmode *TaxiSubmode `xml:"TaxiSubmode,omitempty" json:"TaxiSubmode,omitempty"`
	SelfDriveSubmode *SelfDriveSubmode `xml:"SelfDriveSubmode,omitempty" json:"SelfDriveSubmode,omitempty"`
}

// TransportSubmode represents the TransportSubmode element
// A submode of a Public Transport MODE.
type TransportSubmode struct {
	TransportSubmodeStructure
}

// RailSubmode represents the RailSubmode element
// TPEG pti02 Rail submodes loc13.
// 			See also See ERA B.4.7009 - Name: Item description code.
type RailSubmode struct {
	Value RailSubmodeEnumeration `xml:",chardata" json:"value"`
}

// CoachSubmode represents the CoachSubmode element
// TPEG pti03 Coach submodes.
type CoachSubmode struct {
	Value CoachSubmodeEnumeration `xml:",chardata" json:"value"`
}

// MetroSubmode represents the MetroSubmode element
// TPEG pti04 Metro submodes.
type MetroSubmode struct {
	Value MetroSubmodeEnumeration `xml:",chardata" json:"value"`
}

// BusSubmode represents the BusSubmode element
// TPEG pti05 Bus submodes.
type BusSubmode struct {
	Value BusSubmodeEnumeration `xml:",chardata" json:"value"`
}

// TramSubmode represents the TramSubmode element
// TPEG pti06 Tram submodes.
type TramSubmode struct {
	Value TramSubmodeEnumeration `xml:",chardata" json:"value"`
}

// WaterSubmode represents the WaterSubmode element
// TPEG pti07 Water submodes.
type WaterSubmode struct {
	Value WaterSubmodeEnumeration `xml:",chardata" json:"value"`
}

// AirSubmode represents the AirSubmode element
// TPEG pti08 Air submodes.
type AirSubmode struct {
	Value AirSubmodeEnumeration `xml:",chardata" json:"value"`
}

// TelecabinSubmode represents the TelecabinSubmode element
// TPEG pti09 Telecabin submodes.
type TelecabinSubmode struct {
	Value TelecabinSubmodeEnumeration `xml:",chardata" json:"value"`
}

// FunicularSubmode represents the FunicularSubmode element
// TPEG pti10 Funicular submodes.
type FunicularSubmode struct {
	Value FunicularSubmodeEnumeration `xml:",chardata" json:"value"`
}

// TaxiSubmode represents the TaxiSubmode element
// TPEG pti11 Taxi submodes.
type TaxiSubmode struct {
	Value TaxiSubmodeEnumeration `xml:",chardata" json:"value"`
}

// SelfDriveSubmode represents the SelfDriveSubmode element
// TPEG pti12 SelfDrive submodes. (NB Use  SimpleVehicleType / Vehicle Category to describe specific type)
type SelfDriveSubmode struct {
	Value SelfDriveSubmodeEnumeration `xml:",chardata" json:"value"`
}

// SnowAndIceSubmode represents the SnowAndIceSubmode element
type SnowAndIceSubmode struct {
	Value SnowAndIceSubmodeEnumeration `xml:",chardata" json:"value"`
}

// TransportModesRelStructure represents the transportModes_RelStructure element
// Type for a list of TRANSPORT MODEs.
type TransportModesRelStructure struct {
	ContainmentAggregationStructure
	OpenTransportModeRef []OpenTransportModeRef `xml:"OpenTransportModeRef,omitempty" json:"OpenTransportModeRef,omitempty"`
	// An area within a Site. May be connected to Quays by PATH LINKs.
	TransportMode []TransportModeStructure `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
}

// TransportModeStructure represents the TransportModeStructure element
// Type for a TRANSPORT MODE.
type TransportModeStructure struct {
	// Categorisation of mode.
	TransportMode AllModesEnumeration `xml:"TransportMode" json:"TransportMode"`
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
	TaxiSubmode *TaxiSubmode `xml:"TaxiSubmode,omitempty" json:"TaxiSubmode,omitempty"`
	SelfDriveSubmode *SelfDriveSubmode `xml:"SelfDriveSubmode,omitempty" json:"SelfDriveSubmode,omitempty"`
}

// OpenModesRelStructure represents the openModesRelStructure element
// SUBMODEs  associated with entity.
type OpenModesRelStructure struct {
	ContainmentAggregationStructure
	OpenTransportMode []OpenTransportMode `xml:"OpenTransportMode" json:"OpenTransportMode"`
}

// OpenTransportModeValueStructure represents the OpenTransportMode_ValueStructure element
// Type for a TRANSPORT MODE.
type OpenTransportModeValueStructure struct {
	TypeOfValueVersionStructure
	// Categorisation of mode.
	TransportMode AllModesEnumeration `xml:"TransportMode" json:"TransportMode"`
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
	TaxiSubmode *TaxiSubmode `xml:"TaxiSubmode,omitempty" json:"TaxiSubmode,omitempty"`
	SelfDriveSubmode *SelfDriveSubmode `xml:"SelfDriveSubmode,omitempty" json:"SelfDriveSubmode,omitempty"`
	SubmodeRef *SubmodeRef `xml:"SubmodeRef,omitempty" json:"SubmodeRef,omitempty"`
}

// SubmodesRelStructure represents the submodes_RelStructure element
// SUBMODEs  associated with entity.
type SubmodesRelStructure struct {
	ContainmentAggregationStructure
	Submode []Submode `xml:"Submode" json:"Submode"`
}

// OpenTransportMode represents the OpenTransportMode element
// Open values TRANSPORT MODE. Allows additional named modes to be created. A mode is a characterisation of the operation according to the means of transport (bus, tram, metro, train, ferry, ship). NOTE : To enforce standardisation, enumerated values are generally used in references. In The schema.
type OpenTransportMode struct {
	OpenTransportModeValueStructure
}

// Submode represents the Submode element
// Open values TRANSPORT SUBMODE. Allows named sub mod s to be created. A mode is a characterisation of the operation according to the means of transport (bus, tram, metro, train, ferry, ship). NOTE : To enforce standardisation, enumerated values are generally used in references. In The schema.
type Submode struct {
	OpenTransportModeValueStructure
}

// AccessesInFrameRelStructure represents the accessesInFrame_RelStructure element
// Type for containment in frame of ACCESS.
type AccessesInFrameRelStructure struct {
	ContainmentAggregationStructure
	Access []Access `xml:"Access" json:"Access"`
}

// AccessesRelStructure represents the accesses_RelStructure element
// Type for a list of ACCESS Links.
type AccessesRelStructure struct {
	ContainmentAggregationStructure
	AccessRef []AccessRef `xml:"AccessRef,omitempty" json:"AccessRef,omitempty"`
	Access []Access `xml:"Access,omitempty" json:"Access,omitempty"`
}

// AccessVersionStructure represents the Access_VersionStructure element
// Type for an ACCESS link.
type AccessVersionStructure struct {
	TransferVersionStructure
	// Origin end of ACCESS link.
	From AccessEndStructure `xml:"From" json:"From"`
	// Destination end of ACCESS link.
	To AccessEndStructure `xml:"To" json:"To"`
}

// AccessEndStructure represents the AccessEndStructure element
// Type for ACCESS link end.
type AccessEndStructure struct {
	// Identifier of MODE of end point of ACCESS link. Default is all modes.
	TransportMode *AllModesEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	// Identifier of a PLACE at end point of ACCESS link.
	PlaceRef *PlaceRefStructure `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
	// Identifier of end point of ACCESS link.
	PointRef *PointRefStructure `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
}

// Access represents the Access element
// The physical (spatial) possibility for a passenger to access or leave the public transport system. This link may be used during a trip for:- the walking movement of a passenger from a PLACE (origin of the trip) to a STOP POINT (origin of the PT TRIP), or- the walking movement from a STOP POINT (destination of the PT TRIP) to a PLACE (destination of the trip).
type Access struct {
	AccessVersionStructure
}

// TopographicPlacesInFrameRelStructure represents the topographicPlacesInFrame_RelStructure element
// Type for containment in frame of TOPOGRAPHIC PLACEs.
type TopographicPlacesInFrameRelStructure struct {
	ContainmentAggregationStructure
	TopographicPlace []TopographicPlace `xml:"TopographicPlace" json:"TopographicPlace"`
}

// TopographicPlacesRelStructure represents the topographicPlaces_RelStructure element
// Collection of TOPOGRAPHIC PLACEs.
type TopographicPlacesRelStructure struct {
	ContainmentAggregationStructure
	TopographicPlaceRef []TopographicPlaceRef `xml:"TopographicPlaceRef" json:"TopographicPlaceRef"`
	TopographicPlace []TopographicPlace `xml:"TopographicPlace" json:"TopographicPlace"`
}

// GroupsOfPlacesInFrameRelStructure represents the groupsOfPlacesInFrame_RelStructure element
// Type for containment in frame of GROUP OF PLACEs.
type GroupsOfPlacesInFrameRelStructure struct {
	ContainmentAggregationStructure
	GroupOfPlaces []GroupOfPlaces `xml:"GroupOfPlaces" json:"GroupOfPlaces"`
}

// TopographicPlaceVersionStructure represents the TopographicPlace_VersionStructure element
// Type for a TOPOGRAPHIC PLACE.
type TopographicPlaceVersionStructure struct {
	PlaceVersionStructure
	// ISO 3166-2 code for subdivision of a country if relevant. E.g. GB-CAM.
	IsoCode *string `xml:"IsoCode,omitempty" json:"IsoCode,omitempty"`
	// Structured text descriptor of TOPOGRAPHIC PLACE.
	Descriptor TopographicPlaceDescriptorVersionedChildStructure `xml:"Descriptor" json:"Descriptor"`
	// Collection of aliases for the TOPOGRAPHIC PLACE.
	AlternativeDescriptors *TopographicPlaceDescriptorsRelStructure `xml:"alternativeDescriptors,omitempty" json:"alternativeDescriptors,omitempty"`
	// Classification of the TOPOGRAPHIC PLACE as a settlement. Enumerated value.
	TopographicPlaceType *TopographicPlaceTypeEnumeration `xml:"TopographicPlaceType,omitempty" json:"TopographicPlaceType,omitempty"`
	// Whether the TOPOGRAPHIC PLACE is considered to be at the centre of a town. Default is false.
	PlaceCentre *bool `xml:"PlaceCentre,omitempty" json:"PlaceCentre,omitempty"`
	// Post code or partial post code associated with area. v1.1
	PostCode *string `xml:"PostCode,omitempty" json:"PostCode,omitempty"`
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	// For TOPOGRAPHIC PLACEs thats span borders,  references to additional  COUNTRY or COUNTRIEs  that place lies in.
	OtherCountries *CountryRefsRelStructure `xml:"otherCountries,omitempty" json:"otherCountries,omitempty"`
	// Parent TOPOGRAPHIC PLACE. Reference to another TOPOGRAPHIC PLACE that contains the child TOPOGRAPHIC PLACE completely. Must not be cyclic.
	ParentTopographicPlaceRef *TopographicPlaceRefStructure `xml:"ParentTopographicPlaceRef,omitempty" json:"ParentTopographicPlaceRef,omitempty"`
	// TOPOGRAPHIC PLACEs which are adjacent to the TOPOGRAPHIC PLACE. or which partially overlay. 
	// 						N.B. this should not be used for spatial containment. Instead the Parent Site should be used the TOPOGRAPHIC PLACE which completely contain the TOPOGRAPHIC PLACE, and on child TOPOGRAPHIC PLACEs for localities completely contained in the TOPOGRAPHIC PLACE.
	AdjacentPlaces *TopographicPlaceRefsRelStructure `xml:"adjacentPlaces,omitempty" json:"adjacentPlaces,omitempty"`
	// TOPOGRAPHIC PLACEs other than then parent in which the place can be regarded as contained. a.
	ContainedIn *TopographicPlaceRefsRelStructure `xml:"containedIn,omitempty" json:"containedIn,omitempty"`
	// ACCESS links to other PLACEs.
	Accesses *AccessesRelStructure `xml:"accesses,omitempty" json:"accesses,omitempty"`
}

// TopographicPlaceDescriptorsRelStructure represents the topographicPlaceDescriptors_RelStructure element
// Type for containment of TOPOGRAPHIC PLACE DESCRIPTORs.
type TopographicPlaceDescriptorsRelStructure struct {
	StrictContainmentAggregationStructure
	TopographicPlaceDescriptor []TopographicPlaceDescriptorVersionedChildStructure `xml:"TopographicPlaceDescriptor" json:"TopographicPlaceDescriptor"`
}

// TopographicPlaceDescriptorVersionedChildStructure represents the TopographicPlaceDescriptor_VersionedChildStructure element
// Type for a TOPOGRAPHIC PLACE DESCRIPTOR.
type TopographicPlaceDescriptorVersionedChildStructure struct {
	VersionedChildStructure
	// Name of the TOPOGRAPHIC PLACE.
	Name MultilingualString `xml:"Name" json:"Name"`
	// Short name for TOPOGRAPHIC PLACE to be used when qualifying children.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Qualifier to use when presenting name to distinguish it from other similarly named elements.
	Qualify *Qualify `xml:"Qualify,omitempty" json:"Qualify,omitempty"`
}

// Qualify represents the Qualify element
type Qualify struct {
	// Qualifying name. Place name characters only allowed.
	QualifierName MultilingualString `xml:"QualifierName" json:"QualifierName"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
}

// GroupOfPlacesVersionStructure represents the GroupOfPlaces_VersionStructure element
// Type for GROUP OF PLACES.
type GroupOfPlacesVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// PLACEs in GROUP OF PLACEs.
	Members *PlaceRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	// Primary PLACE in GROUP OF PLACEs, if relevant.
	MainPlaceRef *PlaceRefStructure `xml:"MainPlaceRef,omitempty" json:"MainPlaceRef,omitempty"`
}

// TopographicPlaceDerivedViewStructure represents the TopographicPlace_DerivedViewStructure element
// Type for a TOPOGRAPHIC PLACE VIEW.
type TopographicPlaceDerivedViewStructure struct {
	DerivedViewStructure
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	// Name of the TOPOGRAPHIC PLACE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short name for TOPOGRAPHIC PLACE to be used when qualifying children.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Qualifying name. Place name characters only allowed.
	QualifierName *MultilingualString `xml:"QualifierName,omitempty" json:"QualifierName,omitempty"`
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
}

// TopographicProjectionVersionStructure represents the TopographicProjection_VersionStructure element
// Type for a TOPOGRAPHIC  PROJECTION. +v1.1
type TopographicProjectionVersionStructure struct {
	ProjectionVersionStructure
	// Object being projected onto TOPOGRAPHIC AALCE&gt; May be given by context.
	ProjectedObjectRef *VersionOfObjectRefStructure `xml:"ProjectedObjectRef,omitempty" json:"ProjectedObjectRef,omitempty"`
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
}

// TopographicPlace represents the TopographicPlace element
// A town, city, village, suburb, quarter or other name settlement within a country. Provides a Gazetteer of Transport related place names.
type TopographicPlace struct {
	TopographicPlaceVersionStructure
}

// GroupOfPlaces represents the GroupOfPlaces element
// A grouping of PLACEs which will be commonly referenced for a specific purpose.
type GroupOfPlaces struct {
	GroupOfPlacesVersionStructure
}

// TopographicPlaceView represents the TopographicPlaceView element
// Simplified view of TOPOGRAPHIC PLACE. Data is derived through the relationship.
type TopographicPlaceView struct {
	TopographicPlaceDerivedViewStructure
}

// TopographicProjection represents the TopographicProjection element
// TOPOGRAPHICAL PROJECTION allows any ZONE to be directly mapped to a TOPOGRAPHICAL PLACE, e.g. a TARIFF ZONE, ADMINISTRATIVE ZONE can be stated as having the same bounds as another zone. +v1.1
type TopographicProjection struct {
	TopographicProjectionVersionStructure
}

// EquipmentRefStructure represents the EquipmentRefStructure element
// Type for a reference to an EQUIPMENT.
type EquipmentRefStructure struct {
	VersionOfObjectRefStructure
}

// InstalledEquipmentRefStructure represents the InstalledEquipmentRefStructure element
// Type for a reference to an INSTALLED EQUIPMENT.
type InstalledEquipmentRefStructure struct {
	EquipmentRefStructure
}

// TypeOfEquipmentRefStructure represents the TypeOfEquipmentRefStructure element
// Type for a reference to a TYPE OF EQUIPMENT.
type TypeOfEquipmentRefStructure struct {
	TypeOfValueRefStructure
}

// EquipmentPositionRefStructure represents the EquipmentPositionRefStructure element
// Type for a reference to an EQUIPMENT POSITION.
type EquipmentPositionRefStructure struct {
	PlaceRefStructure
}

// EquipmentPlaceRefStructure represents the EquipmentPlaceRefStructure element
// Type for a reference to an EQUIPMENT PLACE.
type EquipmentPlaceRefStructure struct {
	PlaceRefStructure
}

// PassengerEquipmentRefStructure represents the PassengerEquipmentRefStructure element
// Type for a reference to a PASSENGER EQUIPMENT.
type PassengerEquipmentRefStructure struct {
	InstalledEquipmentRefStructure
}

// PlaceEquipmentRefStructure represents the PlaceEquipmentRefStructure element
// Type for a reference to an PLACE EQUIPMENT.
type PlaceEquipmentRefStructure struct {
	InstalledEquipmentRefStructure
}

// EquipmentRef represents the EquipmentRef element
// Reference to EQUIPMENT.
type EquipmentRef struct {
	EquipmentRefStructure
}

// InstalledEquipmentRef represents the InstalledEquipmentRef element
// Reference to an INSTALLED EQUIPMENT.
type InstalledEquipmentRef struct {
	InstalledEquipmentRefStructure
}

// TypeOfEquipmentRef represents the TypeOfEquipmentRef element
// Reference to a TYPE OF EQUIPMENT. Some values are defined for EPIAP: "mobileRamp" for mobile Ramps, "permanentRamp" for permanent installation and "wheelchairLift" for a hoist.
type TypeOfEquipmentRef struct {
	TypeOfEquipmentRefStructure
}

// EquipmentPositionRef represents the EquipmentPositionRef element
// Reference to an EQUIPMENT POSITION.
type EquipmentPositionRef struct {
	EquipmentPositionRefStructure
}

// EquipmentPlaceRef represents the EquipmentPlaceRef element
// Reference to an EQUIPMENT PLACE.
type EquipmentPlaceRef struct {
	EquipmentPlaceRefStructure
}

// PassengerEquipmentRef represents the PassengerEquipmentRef element
// Reference to a PASSENGER EQUIPMENT.
type PassengerEquipmentRef struct {
	InstalledEquipmentRefStructure
}

// PlaceEquipmentRef represents the PlaceEquipmentRef element
// Reference to a PLACE EQUIPMENT.
type PlaceEquipmentRef struct {
	PlaceEquipmentRefStructure
}

// EquipmentsInFrameRelStructure represents the equipmentsInFrame_RelStructure element
// Type for containment in frame of EQUIPMENT.
type EquipmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	OnlineService []OnlineService `xml:"OnlineService,omitempty" json:"OnlineService,omitempty"`
	VehicleRentalService []VehicleRentalService `xml:"VehicleRentalService,omitempty" json:"VehicleRentalService,omitempty"`
	VehicleSharingService []VehicleSharingService `xml:"VehicleSharingService,omitempty" json:"VehicleSharingService,omitempty"`
	ChauffeuredVehicleService []ChauffeuredVehicleService `xml:"ChauffeuredVehicleService,omitempty" json:"ChauffeuredVehicleService,omitempty"`
	CarPoolingService []CarPoolingService `xml:"CarPoolingService,omitempty" json:"CarPoolingService,omitempty"`
	TaxiService []TaxiService `xml:"TaxiService,omitempty" json:"TaxiService,omitempty"`
	AssistanceBookingService []AssistanceBookingService `xml:"AssistanceBookingService,omitempty" json:"AssistanceBookingService,omitempty"`
	CateringService []CateringService `xml:"CateringService,omitempty" json:"CateringService,omitempty"`
	RetailService []RetailService `xml:"RetailService,omitempty" json:"RetailService,omitempty"`
	MoneyService []MoneyService `xml:"MoneyService,omitempty" json:"MoneyService,omitempty"`
	HireService []HireService `xml:"HireService,omitempty" json:"HireService,omitempty"`
	CommunicationService []CommunicationService `xml:"CommunicationService,omitempty" json:"CommunicationService,omitempty"`
	MeetingPointService []MeetingPointService `xml:"MeetingPointService,omitempty" json:"MeetingPointService,omitempty"`
	LostPropertyService []LostPropertyService `xml:"LostPropertyService,omitempty" json:"LostPropertyService,omitempty"`
	LeftLuggageService []LeftLuggageService `xml:"LeftLuggageService,omitempty" json:"LeftLuggageService,omitempty"`
	ComplaintsService []ComplaintsService `xml:"ComplaintsService,omitempty" json:"ComplaintsService,omitempty"`
	CustomerService []CustomerService `xml:"CustomerService,omitempty" json:"CustomerService,omitempty"`
	LuggageService []LuggageService `xml:"LuggageService,omitempty" json:"LuggageService,omitempty"`
	AssistanceService []AssistanceService `xml:"AssistanceService,omitempty" json:"AssistanceService,omitempty"`
	TicketingService []TicketingService `xml:"TicketingService,omitempty" json:"TicketingService,omitempty"`
	RetailDevice []RetailDevice `xml:"RetailDevice,omitempty" json:"RetailDevice,omitempty"`
	BatteryEquipment []BatteryEquipment `xml:"BatteryEquipment,omitempty" json:"BatteryEquipment,omitempty"`
	VehicleReleaseEquipment []VehicleReleaseEquipment `xml:"VehicleReleaseEquipment,omitempty" json:"VehicleReleaseEquipment,omitempty"`
	RefuellingEquipment []RefuellingEquipment `xml:"RefuellingEquipment,omitempty" json:"RefuellingEquipment,omitempty"`
	VehicleChargingEquipment []VehicleChargingEquipment `xml:"VehicleChargingEquipment,omitempty" json:"VehicleChargingEquipment,omitempty"`
	CycleStorageEquipment []CycleStorageEquipment `xml:"CycleStorageEquipment,omitempty" json:"CycleStorageEquipment,omitempty"`
	SeatingEquipment []SeatingEquipment `xml:"SeatingEquipment,omitempty" json:"SeatingEquipment,omitempty"`
	ShelterEquipment []ShelterEquipment `xml:"ShelterEquipment,omitempty" json:"ShelterEquipment,omitempty"`
	TrolleyStandEquipment []TrolleyStandEquipment `xml:"TrolleyStandEquipment,omitempty" json:"TrolleyStandEquipment,omitempty"`
	WaitingRoomEquipment []WaitingRoomEquipment `xml:"WaitingRoomEquipment,omitempty" json:"WaitingRoomEquipment,omitempty"`
	CrossingEquipment []CrossingEquipment `xml:"CrossingEquipment,omitempty" json:"CrossingEquipment,omitempty"`
	QueueingEquipment []QueueingEquipment `xml:"QueueingEquipment,omitempty" json:"QueueingEquipment,omitempty"`
	EntranceEquipment []EntranceEquipment `xml:"EntranceEquipment,omitempty" json:"EntranceEquipment,omitempty"`
	RampEquipment []RampEquipment `xml:"RampEquipment,omitempty" json:"RampEquipment,omitempty"`
	LiftCallEquipment []LiftCallEquipment `xml:"LiftCallEquipment,omitempty" json:"LiftCallEquipment,omitempty"`
	LiftEquipment []LiftEquipment `xml:"LiftEquipment,omitempty" json:"LiftEquipment,omitempty"`
	TravelatorEquipment []TravelatorEquipment `xml:"TravelatorEquipment,omitempty" json:"TravelatorEquipment,omitempty"`
	StaircaseEquipment []StaircaseEquipment `xml:"StaircaseEquipment,omitempty" json:"StaircaseEquipment,omitempty"`
	EscalatorEquipment []EscalatorEquipment `xml:"EscalatorEquipment,omitempty" json:"EscalatorEquipment,omitempty"`
	PlaceLighting []PlaceLighting `xml:"PlaceLighting,omitempty" json:"PlaceLighting,omitempty"`
	RoughSurface []RoughSurface `xml:"RoughSurface,omitempty" json:"RoughSurface,omitempty"`
	GeneralSign []GeneralSign `xml:"GeneralSign,omitempty" json:"GeneralSign,omitempty"`
	HeadingSign []HeadingSign `xml:"HeadingSign,omitempty" json:"HeadingSign,omitempty"`
	PlaceSign []PlaceSign `xml:"PlaceSign,omitempty" json:"PlaceSign,omitempty"`
	SignEquipment []SignEquipment `xml:"SignEquipment,omitempty" json:"SignEquipment,omitempty"`
	PassengerInformationEquipment []PassengerInformationEquipment `xml:"PassengerInformationEquipment,omitempty" json:"PassengerInformationEquipment,omitempty"`
	RubbishDisposalEquipment []RubbishDisposalEquipment `xml:"RubbishDisposalEquipment,omitempty" json:"RubbishDisposalEquipment,omitempty"`
	PassengerBeaconEquipment []PassengerBeaconEquipment `xml:"PassengerBeaconEquipment,omitempty" json:"PassengerBeaconEquipment,omitempty"`
	HelpPointEquipment []HelpPointEquipment `xml:"HelpPointEquipment,omitempty" json:"HelpPointEquipment,omitempty"`
	PassengerSafetyEquipment []PassengerSafetyEquipment `xml:"PassengerSafetyEquipment,omitempty" json:"PassengerSafetyEquipment,omitempty"`
	SanitaryEquipment []SanitaryEquipment `xml:"SanitaryEquipment,omitempty" json:"SanitaryEquipment,omitempty"`
	TicketValidatorEquipment []TicketValidatorEquipment `xml:"TicketValidatorEquipment,omitempty" json:"TicketValidatorEquipment,omitempty"`
	TicketingEquipment []TicketingEquipment `xml:"TicketingEquipment,omitempty" json:"TicketingEquipment,omitempty"`
	WheelchairVehicleEquipment []WheelchairVehicleEquipment `xml:"WheelchairVehicleEquipment,omitempty" json:"WheelchairVehicleEquipment,omitempty"`
	AccessVehicleEquipment []AccessVehicleEquipment `xml:"AccessVehicleEquipment,omitempty" json:"AccessVehicleEquipment,omitempty"`
}

// EquipmentsRelStructure represents the equipments_RelStructure element
// List of VEHICLE EQUIPMENT.
type EquipmentsRelStructure struct {
	ContainmentAggregationStructure
	RetailDeviceRef []RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
	OnlineServiceRef []OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef []VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef []VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef []ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef []TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef []CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	ActivatedEquipmentRef []ActivatedEquipmentRef `xml:"ActivatedEquipmentRef,omitempty" json:"ActivatedEquipmentRef,omitempty"`
	BatteryEquipmentRef []BatteryEquipmentRef `xml:"BatteryEquipmentRef,omitempty" json:"BatteryEquipmentRef,omitempty"`
	RefuellingEquipmentRef []RefuellingEquipmentRef `xml:"RefuellingEquipmentRef,omitempty" json:"RefuellingEquipmentRef,omitempty"`
	VehicleChargingEquipmentRef []VehicleChargingEquipmentRef `xml:"VehicleChargingEquipmentRef,omitempty" json:"VehicleChargingEquipmentRef,omitempty"`
	AssistanceBookingServiceRef []AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef []CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef []RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef []MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef []HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef []CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef []MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef []LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef []LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef []LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef []ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef []CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef []AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef []TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef []LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	VehicleReleaseEquipmentRef []VehicleReleaseEquipmentRef `xml:"VehicleReleaseEquipmentRef,omitempty" json:"VehicleReleaseEquipmentRef,omitempty"`
	TicketValidatorEquipmentRef []TicketValidatorEquipmentRef `xml:"TicketValidatorEquipmentRef,omitempty" json:"TicketValidatorEquipmentRef,omitempty"`
	TicketingEquipmentRef []TicketingEquipmentRef `xml:"TicketingEquipmentRef,omitempty" json:"TicketingEquipmentRef,omitempty"`
	PassengerInformationEquipmentRef []PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef []CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef []TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef []SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef []ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef []LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef []WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef []WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef []SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef []PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef []RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef []StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef []QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef []TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef []EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef []LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef []LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef []CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef []RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef []EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef []HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef []GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef []PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef []SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef []RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef []PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef []HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef []PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef []SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef []WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef []AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef []VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef []PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	EquipmentRef []EquipmentRef `xml:"EquipmentRef,omitempty" json:"EquipmentRef,omitempty"`
	OnlineService []OnlineService `xml:"OnlineService,omitempty" json:"OnlineService,omitempty"`
	VehicleRentalService []VehicleRentalService `xml:"VehicleRentalService,omitempty" json:"VehicleRentalService,omitempty"`
	VehicleSharingService []VehicleSharingService `xml:"VehicleSharingService,omitempty" json:"VehicleSharingService,omitempty"`
	ChauffeuredVehicleService []ChauffeuredVehicleService `xml:"ChauffeuredVehicleService,omitempty" json:"ChauffeuredVehicleService,omitempty"`
	CarPoolingService []CarPoolingService `xml:"CarPoolingService,omitempty" json:"CarPoolingService,omitempty"`
	TaxiService []TaxiService `xml:"TaxiService,omitempty" json:"TaxiService,omitempty"`
	AssistanceBookingService []AssistanceBookingService `xml:"AssistanceBookingService,omitempty" json:"AssistanceBookingService,omitempty"`
	CateringService []CateringService `xml:"CateringService,omitempty" json:"CateringService,omitempty"`
	RetailService []RetailService `xml:"RetailService,omitempty" json:"RetailService,omitempty"`
	MoneyService []MoneyService `xml:"MoneyService,omitempty" json:"MoneyService,omitempty"`
	HireService []HireService `xml:"HireService,omitempty" json:"HireService,omitempty"`
	CommunicationService []CommunicationService `xml:"CommunicationService,omitempty" json:"CommunicationService,omitempty"`
	MeetingPointService []MeetingPointService `xml:"MeetingPointService,omitempty" json:"MeetingPointService,omitempty"`
	LostPropertyService []LostPropertyService `xml:"LostPropertyService,omitempty" json:"LostPropertyService,omitempty"`
	LeftLuggageService []LeftLuggageService `xml:"LeftLuggageService,omitempty" json:"LeftLuggageService,omitempty"`
	ComplaintsService []ComplaintsService `xml:"ComplaintsService,omitempty" json:"ComplaintsService,omitempty"`
	CustomerService []CustomerService `xml:"CustomerService,omitempty" json:"CustomerService,omitempty"`
	LuggageService []LuggageService `xml:"LuggageService,omitempty" json:"LuggageService,omitempty"`
	AssistanceService []AssistanceService `xml:"AssistanceService,omitempty" json:"AssistanceService,omitempty"`
	TicketingService []TicketingService `xml:"TicketingService,omitempty" json:"TicketingService,omitempty"`
	RetailDevice []RetailDevice `xml:"RetailDevice,omitempty" json:"RetailDevice,omitempty"`
	BatteryEquipment []BatteryEquipment `xml:"BatteryEquipment,omitempty" json:"BatteryEquipment,omitempty"`
	VehicleReleaseEquipment []VehicleReleaseEquipment `xml:"VehicleReleaseEquipment,omitempty" json:"VehicleReleaseEquipment,omitempty"`
	RefuellingEquipment []RefuellingEquipment `xml:"RefuellingEquipment,omitempty" json:"RefuellingEquipment,omitempty"`
	VehicleChargingEquipment []VehicleChargingEquipment `xml:"VehicleChargingEquipment,omitempty" json:"VehicleChargingEquipment,omitempty"`
	CycleStorageEquipment []CycleStorageEquipment `xml:"CycleStorageEquipment,omitempty" json:"CycleStorageEquipment,omitempty"`
	SeatingEquipment []SeatingEquipment `xml:"SeatingEquipment,omitempty" json:"SeatingEquipment,omitempty"`
	ShelterEquipment []ShelterEquipment `xml:"ShelterEquipment,omitempty" json:"ShelterEquipment,omitempty"`
	TrolleyStandEquipment []TrolleyStandEquipment `xml:"TrolleyStandEquipment,omitempty" json:"TrolleyStandEquipment,omitempty"`
	WaitingRoomEquipment []WaitingRoomEquipment `xml:"WaitingRoomEquipment,omitempty" json:"WaitingRoomEquipment,omitempty"`
	CrossingEquipment []CrossingEquipment `xml:"CrossingEquipment,omitempty" json:"CrossingEquipment,omitempty"`
	QueueingEquipment []QueueingEquipment `xml:"QueueingEquipment,omitempty" json:"QueueingEquipment,omitempty"`
	EntranceEquipment []EntranceEquipment `xml:"EntranceEquipment,omitempty" json:"EntranceEquipment,omitempty"`
	RampEquipment []RampEquipment `xml:"RampEquipment,omitempty" json:"RampEquipment,omitempty"`
	LiftCallEquipment []LiftCallEquipment `xml:"LiftCallEquipment,omitempty" json:"LiftCallEquipment,omitempty"`
	LiftEquipment []LiftEquipment `xml:"LiftEquipment,omitempty" json:"LiftEquipment,omitempty"`
	TravelatorEquipment []TravelatorEquipment `xml:"TravelatorEquipment,omitempty" json:"TravelatorEquipment,omitempty"`
	StaircaseEquipment []StaircaseEquipment `xml:"StaircaseEquipment,omitempty" json:"StaircaseEquipment,omitempty"`
	EscalatorEquipment []EscalatorEquipment `xml:"EscalatorEquipment,omitempty" json:"EscalatorEquipment,omitempty"`
	PlaceLighting []PlaceLighting `xml:"PlaceLighting,omitempty" json:"PlaceLighting,omitempty"`
	RoughSurface []RoughSurface `xml:"RoughSurface,omitempty" json:"RoughSurface,omitempty"`
	GeneralSign []GeneralSign `xml:"GeneralSign,omitempty" json:"GeneralSign,omitempty"`
	HeadingSign []HeadingSign `xml:"HeadingSign,omitempty" json:"HeadingSign,omitempty"`
	PlaceSign []PlaceSign `xml:"PlaceSign,omitempty" json:"PlaceSign,omitempty"`
	SignEquipment []SignEquipment `xml:"SignEquipment,omitempty" json:"SignEquipment,omitempty"`
	PassengerInformationEquipment []PassengerInformationEquipment `xml:"PassengerInformationEquipment,omitempty" json:"PassengerInformationEquipment,omitempty"`
	RubbishDisposalEquipment []RubbishDisposalEquipment `xml:"RubbishDisposalEquipment,omitempty" json:"RubbishDisposalEquipment,omitempty"`
	PassengerBeaconEquipment []PassengerBeaconEquipment `xml:"PassengerBeaconEquipment,omitempty" json:"PassengerBeaconEquipment,omitempty"`
	HelpPointEquipment []HelpPointEquipment `xml:"HelpPointEquipment,omitempty" json:"HelpPointEquipment,omitempty"`
	PassengerSafetyEquipment []PassengerSafetyEquipment `xml:"PassengerSafetyEquipment,omitempty" json:"PassengerSafetyEquipment,omitempty"`
	SanitaryEquipment []SanitaryEquipment `xml:"SanitaryEquipment,omitempty" json:"SanitaryEquipment,omitempty"`
	TicketValidatorEquipment []TicketValidatorEquipment `xml:"TicketValidatorEquipment,omitempty" json:"TicketValidatorEquipment,omitempty"`
	TicketingEquipment []TicketingEquipment `xml:"TicketingEquipment,omitempty" json:"TicketingEquipment,omitempty"`
	WheelchairVehicleEquipment []WheelchairVehicleEquipment `xml:"WheelchairVehicleEquipment,omitempty" json:"WheelchairVehicleEquipment,omitempty"`
	AccessVehicleEquipment []AccessVehicleEquipment `xml:"AccessVehicleEquipment,omitempty" json:"AccessVehicleEquipment,omitempty"`
}

// EquipmentVersionStructure represents the Equipment_VersionStructure element
// Type for EQUIPMENT.
type EquipmentVersionStructure struct {
	DataManagedObjectStructure
	// Name of EQUIPMENT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// A Public code which may be displayed on equipment to identify it.
	PublicCode *PrivateCodeStructure `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Default image for EQUIPMENT.
	Image *string `xml:"Image,omitempty" json:"Image,omitempty"`
	TypeOfEquipmentRef *TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	// Further description or other comment for EQUIPMENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Further description or other comment for internal use by OPERATOR.
	Note *MultilingualString `xml:"Note,omitempty" json:"Note,omitempty"`
	// INFO LINKs associated with EQUIPMENT +v1.1
	InfoLinks *InfoLinksRelStructure `xml:"infoLinks,omitempty" json:"infoLinks,omitempty"`
	// Whether the EQUIPMENT is out of service for protracted time. A separate Real time services should be used for short term outages. e.g. SIRI FM.
	OutOfService *bool `xml:"OutOfService,omitempty" json:"OutOfService,omitempty"`
}

// InstalledEquipmentVersionStructure represents the InstalledEquipment_VersionStructure element
// Type for INSTALLED EQUIPMENT.
type InstalledEquipmentVersionStructure struct {
	EquipmentVersionStructure
}

// PassengerEquipmentsRelStructure represents the passengerEquipments_RelStructure element
// Type for a list of LOCAL SERVICEs.
type PassengerEquipmentsRelStructure struct {
	ContainmentAggregationStructure
	RubbishDisposalEquipmentRef []RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef []PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef []HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef []PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef []SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef []WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef []AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef []VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef []PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	PassengerInformationEquipment []PassengerInformationEquipment `xml:"PassengerInformationEquipment,omitempty" json:"PassengerInformationEquipment,omitempty"`
	RubbishDisposalEquipment []RubbishDisposalEquipment `xml:"RubbishDisposalEquipment,omitempty" json:"RubbishDisposalEquipment,omitempty"`
	PassengerBeaconEquipment []PassengerBeaconEquipment `xml:"PassengerBeaconEquipment,omitempty" json:"PassengerBeaconEquipment,omitempty"`
	HelpPointEquipment []HelpPointEquipment `xml:"HelpPointEquipment,omitempty" json:"HelpPointEquipment,omitempty"`
	PassengerSafetyEquipment []PassengerSafetyEquipment `xml:"PassengerSafetyEquipment,omitempty" json:"PassengerSafetyEquipment,omitempty"`
	SanitaryEquipment []SanitaryEquipment `xml:"SanitaryEquipment,omitempty" json:"SanitaryEquipment,omitempty"`
	TicketValidatorEquipment []TicketValidatorEquipment `xml:"TicketValidatorEquipment,omitempty" json:"TicketValidatorEquipment,omitempty"`
	TicketingEquipment []TicketingEquipment `xml:"TicketingEquipment,omitempty" json:"TicketingEquipment,omitempty"`
	WheelchairVehicleEquipment []WheelchairVehicleEquipment `xml:"WheelchairVehicleEquipment,omitempty" json:"WheelchairVehicleEquipment,omitempty"`
	AccessVehicleEquipment []AccessVehicleEquipment `xml:"AccessVehicleEquipment,omitempty" json:"AccessVehicleEquipment,omitempty"`
}

// PassengerEquipmentVersionStructure represents the PassengerEquipment_VersionStructure element
// Type for a PASSENGER EQUIPMENT.
type PassengerEquipmentVersionStructure struct {
	InstalledEquipmentVersionStructure
	// Whether the EQUIPMENT is fixed at a place or min a vehicle.
	Fixed *bool `xml:"Fixed,omitempty" json:"Fixed,omitempty"`
}

// PlaceEquipmentsRelStructure represents the placeEquipments_RelStructure element
// Type for a list of LOCAL SERVICEs.
type PlaceEquipmentsRelStructure struct {
	ContainmentAggregationStructure
	PassengerInformationEquipmentRef []PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef []CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef []TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef []SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef []ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef []LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef []WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef []WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef []SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef []PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef []RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef []StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef []QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef []TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef []EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef []LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef []LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef []CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef []RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef []EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef []HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef []GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef []PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef []SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef []RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef []PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef []HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef []PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef []SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef []WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef []AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef []VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef []PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	RetailDevice []RetailDevice `xml:"RetailDevice,omitempty" json:"RetailDevice,omitempty"`
	BatteryEquipment []BatteryEquipment `xml:"BatteryEquipment,omitempty" json:"BatteryEquipment,omitempty"`
	VehicleReleaseEquipment []VehicleReleaseEquipment `xml:"VehicleReleaseEquipment,omitempty" json:"VehicleReleaseEquipment,omitempty"`
	RefuellingEquipment []RefuellingEquipment `xml:"RefuellingEquipment,omitempty" json:"RefuellingEquipment,omitempty"`
	VehicleChargingEquipment []VehicleChargingEquipment `xml:"VehicleChargingEquipment,omitempty" json:"VehicleChargingEquipment,omitempty"`
	CycleStorageEquipment []CycleStorageEquipment `xml:"CycleStorageEquipment,omitempty" json:"CycleStorageEquipment,omitempty"`
	SeatingEquipment []SeatingEquipment `xml:"SeatingEquipment,omitempty" json:"SeatingEquipment,omitempty"`
	ShelterEquipment []ShelterEquipment `xml:"ShelterEquipment,omitempty" json:"ShelterEquipment,omitempty"`
	TrolleyStandEquipment []TrolleyStandEquipment `xml:"TrolleyStandEquipment,omitempty" json:"TrolleyStandEquipment,omitempty"`
	WaitingRoomEquipment []WaitingRoomEquipment `xml:"WaitingRoomEquipment,omitempty" json:"WaitingRoomEquipment,omitempty"`
	CrossingEquipment []CrossingEquipment `xml:"CrossingEquipment,omitempty" json:"CrossingEquipment,omitempty"`
	QueueingEquipment []QueueingEquipment `xml:"QueueingEquipment,omitempty" json:"QueueingEquipment,omitempty"`
	EntranceEquipment []EntranceEquipment `xml:"EntranceEquipment,omitempty" json:"EntranceEquipment,omitempty"`
	RampEquipment []RampEquipment `xml:"RampEquipment,omitempty" json:"RampEquipment,omitempty"`
	LiftCallEquipment []LiftCallEquipment `xml:"LiftCallEquipment,omitempty" json:"LiftCallEquipment,omitempty"`
	LiftEquipment []LiftEquipment `xml:"LiftEquipment,omitempty" json:"LiftEquipment,omitempty"`
	TravelatorEquipment []TravelatorEquipment `xml:"TravelatorEquipment,omitempty" json:"TravelatorEquipment,omitempty"`
	StaircaseEquipment []StaircaseEquipment `xml:"StaircaseEquipment,omitempty" json:"StaircaseEquipment,omitempty"`
	EscalatorEquipment []EscalatorEquipment `xml:"EscalatorEquipment,omitempty" json:"EscalatorEquipment,omitempty"`
	PlaceLighting []PlaceLighting `xml:"PlaceLighting,omitempty" json:"PlaceLighting,omitempty"`
	RoughSurface []RoughSurface `xml:"RoughSurface,omitempty" json:"RoughSurface,omitempty"`
	GeneralSign []GeneralSign `xml:"GeneralSign,omitempty" json:"GeneralSign,omitempty"`
	HeadingSign []HeadingSign `xml:"HeadingSign,omitempty" json:"HeadingSign,omitempty"`
	PlaceSign []PlaceSign `xml:"PlaceSign,omitempty" json:"PlaceSign,omitempty"`
	SignEquipment []SignEquipment `xml:"SignEquipment,omitempty" json:"SignEquipment,omitempty"`
	PassengerInformationEquipment []PassengerInformationEquipment `xml:"PassengerInformationEquipment,omitempty" json:"PassengerInformationEquipment,omitempty"`
	RubbishDisposalEquipment []RubbishDisposalEquipment `xml:"RubbishDisposalEquipment,omitempty" json:"RubbishDisposalEquipment,omitempty"`
	PassengerBeaconEquipment []PassengerBeaconEquipment `xml:"PassengerBeaconEquipment,omitempty" json:"PassengerBeaconEquipment,omitempty"`
	HelpPointEquipment []HelpPointEquipment `xml:"HelpPointEquipment,omitempty" json:"HelpPointEquipment,omitempty"`
	PassengerSafetyEquipment []PassengerSafetyEquipment `xml:"PassengerSafetyEquipment,omitempty" json:"PassengerSafetyEquipment,omitempty"`
	SanitaryEquipment []SanitaryEquipment `xml:"SanitaryEquipment,omitempty" json:"SanitaryEquipment,omitempty"`
	TicketValidatorEquipment []TicketValidatorEquipment `xml:"TicketValidatorEquipment,omitempty" json:"TicketValidatorEquipment,omitempty"`
	TicketingEquipment []TicketingEquipment `xml:"TicketingEquipment,omitempty" json:"TicketingEquipment,omitempty"`
	WheelchairVehicleEquipment []WheelchairVehicleEquipment `xml:"WheelchairVehicleEquipment,omitempty" json:"WheelchairVehicleEquipment,omitempty"`
	AccessVehicleEquipment []AccessVehicleEquipment `xml:"AccessVehicleEquipment,omitempty" json:"AccessVehicleEquipment,omitempty"`
}

// PlaceEquipmentVersionStructure represents the PlaceEquipment_VersionStructure element
// Type for a PLACE EQUIPMENT.
type PlaceEquipmentVersionStructure struct {
	InstalledEquipmentVersionStructure
}

// TypesOfEquipmentRelStructure represents the typesOfEquipment_RelStructure element
// Type for a list of TYPE OF Equipment.
type TypesOfEquipmentRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfEquipmentRef []TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	TypeOfEquipment []TypeOfEquipment `xml:"TypeOfEquipment,omitempty" json:"TypeOfEquipment,omitempty"`
}

// TypeOfEquipmentValueStructure represents the TypeOfEquipment_ValueStructure element
// Type for a TYPE OF EQUIPMENT.
type TypeOfEquipmentValueStructure struct {
	TypeOfEntityVersionStructure
}

// Equipment represents the Equipment element
// An item of EQUIPMENT of a particular type actually available at a location within a PLACE, such as QUAY, ACCESS SPACE or STOP PATH LINK.
type Equipment struct {
	EquipmentVersionStructure
}

// InstalledEquipment represents the InstalledEquipment element
// INSTALLED EQUIPMENT describes the different types of LOCATED EQUIPMENT that may be associated with the SITE COMPONENTs.
type InstalledEquipment struct {
	InstalledEquipmentVersionStructure
}

// PassengerEquipment represents the PassengerEquipment element
// Equipment for passengers that may be in a fixed within a STOP PLACE.
type PassengerEquipment struct {
	PassengerEquipmentVersionStructure
}

// PlaceEquipment represents the PlaceEquipment element
// An item of equipment of a particular type actually available at a location within a PLACE.
type PlaceEquipment struct {
	PlaceEquipmentVersionStructure
}

// OtherPlaceEquipment represents the OtherPlaceEquipment element
// Equipment that may be in a fixed within a SITE.
type OtherPlaceEquipment struct {
	PlaceEquipmentVersionStructure
}

// TypeOfEquipment represents the TypeOfEquipment element
// A classification of a EQUIPMENT according to its functional purpose.
type TypeOfEquipment struct {
	TypeOfEquipmentValueStructure
}

// PublicUseEnumeration represents the PublicUseEnumeration enumeration
// Allowed values for public use.
type PublicUseEnumeration string

const (
	// PublicUseEnumerationAll represents all
	PublicUseEnumerationAll PublicUseEnumeration = "all"
	// PublicUseEnumerationDisabledPublicOnly represents disabledPublicOnly
	PublicUseEnumerationDisabledPublicOnly PublicUseEnumeration = "disabledPublicOnly"
	// PublicUseEnumerationAuthorisedPublicOnly represents authorisedPublicOnly
	PublicUseEnumerationAuthorisedPublicOnly PublicUseEnumeration = "authorisedPublicOnly"
	// PublicUseEnumerationStaffOnly represents staffOnly
	PublicUseEnumerationStaffOnly PublicUseEnumeration = "staffOnly"
	// PublicUseEnumerationPublicOnly represents publicOnly
	PublicUseEnumerationPublicOnly PublicUseEnumeration = "publicOnly"
)

// CoveredEnumeration represents the CoveredEnumeration enumeration
// Allowed values for covered.
type CoveredEnumeration string

const (
	// CoveredEnumerationIndoors represents indoors
	CoveredEnumerationIndoors CoveredEnumeration = "indoors"
	// CoveredEnumerationOutdoors represents outdoors
	CoveredEnumerationOutdoors CoveredEnumeration = "outdoors"
	// CoveredEnumerationCovered represents covered
	CoveredEnumerationCovered CoveredEnumeration = "covered"
	// CoveredEnumerationMixed represents mixed
	CoveredEnumerationMixed CoveredEnumeration = "mixed"
	// CoveredEnumerationUnknown represents unknown
	CoveredEnumerationUnknown CoveredEnumeration = "unknown"
)

// GatedEnumeration represents the GatedEnumeration enumeration
// Allowed values for gated.
type GatedEnumeration string

const (
	// GatedEnumerationGatedArea represents gatedArea
	GatedEnumerationGatedArea GatedEnumeration = "gatedArea"
	// GatedEnumerationOpenArea represents openArea
	GatedEnumerationOpenArea GatedEnumeration = "openArea"
	// GatedEnumerationUnknown represents unknown
	GatedEnumerationUnknown GatedEnumeration = "unknown"
)

// EntranceEnumeration represents the EntranceEnumeration enumeration
// Allowed values for doors status.
type EntranceEnumeration string

const (
	// EntranceEnumerationOpening represents opening
	EntranceEnumerationOpening EntranceEnumeration = "opening"
	// EntranceEnumerationOpenDoor represents openDoor
	EntranceEnumerationOpenDoor EntranceEnumeration = "openDoor"
	// EntranceEnumerationDoor represents door
	EntranceEnumerationDoor EntranceEnumeration = "door"
	// EntranceEnumerationSwingDoor represents swingDoor
	EntranceEnumerationSwingDoor EntranceEnumeration = "swingDoor"
	// EntranceEnumerationRevolvingDoor represents revolvingDoor
	EntranceEnumerationRevolvingDoor EntranceEnumeration = "revolvingDoor"
	// EntranceEnumerationAutomaticDoor represents automaticDoor
	EntranceEnumerationAutomaticDoor EntranceEnumeration = "automaticDoor"
	// EntranceEnumerationTicketBarrier represents ticketBarrier
	EntranceEnumerationTicketBarrier EntranceEnumeration = "ticketBarrier"
	// EntranceEnumerationGate represents gate
	EntranceEnumerationGate EntranceEnumeration = "gate"
	// EntranceEnumerationOther represents other
	EntranceEnumerationOther EntranceEnumeration = "other"
)

// AccessSpaceTypeEnumeration represents the AccessSpaceTypeEnumeration enumeration
// Allowed values for ACCESS SPACE TYPEs.
type AccessSpaceTypeEnumeration string

const (
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationConcourse represents concourse
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationConcourse AccessSpaceTypeEnumeration = "concourse"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationBookingHall represents bookingHall
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationBookingHall AccessSpaceTypeEnumeration = "bookingHall"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationForecourt represents forecourt
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationForecourt AccessSpaceTypeEnumeration = "forecourt"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationUnderpass represents underpass
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationUnderpass AccessSpaceTypeEnumeration = "underpass"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationOverpass represents overpass
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationOverpass AccessSpaceTypeEnumeration = "overpass"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationPassage represents passage
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationPassage AccessSpaceTypeEnumeration = "passage"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationPassageSection represents passageSection
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationPassageSection AccessSpaceTypeEnumeration = "passageSection"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationLift represents lift
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationLift AccessSpaceTypeEnumeration = "lift"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationGallery represents gallery
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationGallery AccessSpaceTypeEnumeration = "gallery"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationGarage represents garage
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationGarage AccessSpaceTypeEnumeration = "garage"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationShop represents shop
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationShop AccessSpaceTypeEnumeration = "shop"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationWaitingRoom represents waitingRoom
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationWaitingRoom AccessSpaceTypeEnumeration = "waitingRoom"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationRestaurant represents restaurant
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationRestaurant AccessSpaceTypeEnumeration = "restaurant"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationOther represents other
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationOther AccessSpaceTypeEnumeration = "other"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationStaircase represents staircase
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationStaircase AccessSpaceTypeEnumeration = "staircase"
	// AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationWc represents wc
	AccessSpaceTypeEnumerationAccessSpaceTypeEnumerationWc AccessSpaceTypeEnumeration = "wc"
)

// PassageTypeEnumeration represents the PassageTypeEnumeration enumeration
// Allowed values for Passage Types.
type PassageTypeEnumeration string

const (
	// PassageTypeEnumerationNone represents none
	PassageTypeEnumerationNone PassageTypeEnumeration = "none"
	// PassageTypeEnumerationPathway represents pathway
	PassageTypeEnumerationPathway PassageTypeEnumeration = "pathway"
	// PassageTypeEnumerationCorridor represents corridor
	PassageTypeEnumerationCorridor PassageTypeEnumeration = "corridor"
	// PassageTypeEnumerationOverpass represents overpass
	PassageTypeEnumerationOverpass PassageTypeEnumeration = "overpass"
	// PassageTypeEnumerationUnderpass represents underpass
	PassageTypeEnumerationUnderpass PassageTypeEnumeration = "underpass"
	// PassageTypeEnumerationTunnel represents tunnel
	PassageTypeEnumerationTunnel PassageTypeEnumeration = "tunnel"
	// PassageTypeEnumerationOther represents other
	PassageTypeEnumerationOther PassageTypeEnumeration = "other"
)

// SiteTypeEnumeration represents the SiteTypeEnumeration enumeration
// Types of SITE.
type SiteTypeEnumeration string

const (
	// SiteTypeEnumerationSchool represents school
	SiteTypeEnumerationSchool SiteTypeEnumeration = "school"
	// SiteTypeEnumerationUniversity represents university
	SiteTypeEnumerationUniversity SiteTypeEnumeration = "university"
	// SiteTypeEnumerationWorks represents works
	SiteTypeEnumerationWorks SiteTypeEnumeration = "works"
	// SiteTypeEnumerationOffice represents office
	SiteTypeEnumerationOffice SiteTypeEnumeration = "office"
	// SiteTypeEnumerationMilitaryBase represents militaryBase
	SiteTypeEnumerationMilitaryBase SiteTypeEnumeration = "militaryBase"
	// SiteTypeEnumerationRetail represents retail
	SiteTypeEnumerationRetail SiteTypeEnumeration = "retail"
	// SiteTypeEnumerationTransport represents transport
	SiteTypeEnumerationTransport SiteTypeEnumeration = "transport"
	// SiteTypeEnumerationSports represents sports
	SiteTypeEnumerationSports SiteTypeEnumeration = "sports"
	// SiteTypeEnumerationGovernment represents government
	SiteTypeEnumerationGovernment SiteTypeEnumeration = "government"
	// SiteTypeEnumerationCulturalAttraction represents culturalAttraction
	SiteTypeEnumerationCulturalAttraction SiteTypeEnumeration = "culturalAttraction"
	// SiteTypeEnumerationOther represents other
	SiteTypeEnumerationOther SiteTypeEnumeration = "other"
)

// SiteElementRefStructure represents the SiteElementRefStructure element
// Type for reference to a SITE COMPONENT.
type SiteElementRefStructure struct {
	AddressablePlaceRefStructure
}

// SiteRefStructure represents the SiteRefStructure element
// Type for identifier of a SITE.
type SiteRefStructure struct {
	SiteElementRefStructure
}

// SiteRefsRelStructure represents the siteRefs_RelStructure element
// Type for a collection of one or more SITEs.
type SiteRefsRelStructure struct {
	OneToManyRelationshipStructure
	TaxiRankRef []TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef []StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef []ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef []PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef []ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef []SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
}

// ServiceSiteRefStructure represents the ServiceSiteRefStructure element
// Type for identifier of a SERVICE SITE.
type ServiceSiteRefStructure struct {
	SiteRefStructure
}

// SiteComponentRefStructure represents the SiteComponentRefStructure element
// Type for reference to a SITE COMPONENT.
type SiteComponentRefStructure struct {
	SiteElementRefStructure
}

// LevelRefStructure represents the LevelRefStructure element
// Type for a reference to a LEVEL.
type LevelRefStructure struct {
	VersionOfObjectRefStructure
}

// EntranceRefStructure represents the EntranceRefStructure element
// Type for a reference to identifier of an ENTRANCE.
type EntranceRefStructure struct {
	SiteComponentRefStructure
}

// EntranceRefsRelStructure represents the entranceRefs_RelStructure element
// Type for a collection of one or more ENTRANCEs.
type EntranceRefsRelStructure struct {
	OneToManyRelationshipStructure
	StopPlaceVehicleEntranceRef []StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef []StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef []ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef []ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef []ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef []PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef []PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef []EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
}

// VehicleEntranceRefStructure represents the VehicleEntranceRefStructure element
// Type for a reference to identifier of an VEHICLE ENTRANCE.
type VehicleEntranceRefStructure struct {
	EntranceRefStructure
}

// AccessZoneRefStructure represents the AccessZoneRefStructure element
// Type for reference to an ACCESS ZONE.
type AccessZoneRefStructure struct {
	ZoneRefStructure
}

// SiteElementRef represents the SiteElementRef element
// Reference to a SITE.
type SiteElementRef struct {
	SiteElementRefStructure
}

// SiteRef represents the SiteRef element
// Reference to a SITE.
type SiteRef struct {
	SiteRefStructure
}

// ServiceSiteRef represents the ServiceSiteRef element
// Reference to a SERVICE SITE.
type ServiceSiteRef struct {
	ServiceSiteRefStructure
}

// SiteComponentRef represents the SiteComponentRef element
// Reference to a SITE COMPONENT.
type SiteComponentRef struct {
	SiteComponentRefStructure
}

// LevelRef represents the LevelRef element
// Reference to LEVEL of a SITE.
type LevelRef struct {
	LevelRefStructure
}

// EntranceRef represents the EntranceRef element
// Reference to an ENTRANCE to a SITE.
type EntranceRef struct {
	EntranceRefStructure
}

// VehicleEntranceRef represents the VehicleEntranceRef element
// Reference to an VEHICLE ENTRANCE to a SITE.
type VehicleEntranceRef struct {
	VehicleEntranceRefStructure
}

// AccessZoneRef represents the AccessZoneRef element
// Reference to a SITE.
type AccessZoneRef struct {
	AccessZoneRefStructure
}

// OperatorActivitiesEnumeration represents the OperatorActivitiesEnumeration enumeration
// Allowed values for Operator Activities.
type OperatorActivitiesEnumeration string

const (
	// OperatorActivitiesEnumerationPassenger represents passenger
	OperatorActivitiesEnumerationPassenger OperatorActivitiesEnumeration = "passenger"
	// OperatorActivitiesEnumerationFreight represents freight
	OperatorActivitiesEnumerationFreight OperatorActivitiesEnumeration = "freight"
	// OperatorActivitiesEnumerationInfrastructure represents infrastructure
	OperatorActivitiesEnumerationInfrastructure OperatorActivitiesEnumeration = "infrastructure"
	// OperatorActivitiesEnumerationOther represents other
	OperatorActivitiesEnumerationOther OperatorActivitiesEnumeration = "other"
)

// AllTransportOrganisationsRefStructure represents the AllTransportOrganisationsRefStructure element
// Type for a reference to  all TRANSPORT ORGANISATIONs.
type AllTransportOrganisationsRefStructure struct {
	AllOrganisationsRefStructure
}

// TransportOrganisationRefsRelStructure represents the transportOrganisationRefs_RelStructure element
// Type for a list of references to an OPERATOR.
type TransportOrganisationRefsRelStructure struct {
	OneToManyRelationshipStructure
	AuthorityRef []AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef []OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
}

// TransportOrganisationRefStructure represents the TransportOrganisationRefStructure element
// Type for a reference to an TRANSPORT ORGANISATION..
type TransportOrganisationRefStructure struct {
	OrganisationRefStructure
}

// AllPublicTransportOrganisationsRefStructure represents the AllPublicTransportOrganisationsRefStructure element
// Type for a reference to  all TRANSPORT ORGANISATIONs.
type AllPublicTransportOrganisationsRefStructure struct {
	AllTransportOrganisationsRefStructure
}

// OperatorRefStructure represents the OperatorRefStructure element
// Type for a reference to an OPERATOR.
type OperatorRefStructure struct {
	TransportOrganisationRefStructure
}

// AllOperatorsRefStructure represents the AllOperatorsRefStructure element
// Type for a reference to  all OPERATORss.
type AllOperatorsRefStructure struct {
	AllAuthoritiesRefStructure
}

// AuthorityRefStructure represents the AuthorityRefStructure element
// Type for a reference to an AUTHORITY.
type AuthorityRefStructure struct {
	TransportOrganisationRefStructure
}

// AllAuthoritiesRefStructure represents the AllAuthoritiesRefStructure element
// Type for a reference to  all AUTHORITIES.
type AllAuthoritiesRefStructure struct {
	AllPublicTransportOrganisationsRefStructure
}

// GroupsOfOperatorsRefsRelStructure represents the groupsOfOperatorsRefs_RelStructure element
// Type for a list of references to list of GROUPs OF OPERATORS.
type GroupsOfOperatorsRefsRelStructure struct {
	OneToManyRelationshipStructure
	GroupOfOperatorsRef []GroupOfOperatorsRef `xml:"GroupOfOperatorsRef" json:"GroupOfOperatorsRef"`
}

// GroupOfOperatorsRefStructure represents the GroupOfOperatorsRefStructure element
// Type for a reference to a GROUP OF OPERATORs.
type GroupOfOperatorsRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// OperationalContextRefStructure represents the OperationalContextRefStructure element
// Type for a reference to an OPERATIONAL CONTEXT.
type OperationalContextRefStructure struct {
	VersionOfObjectRefStructure
}

// OperationalContexRefsRelStructure represents the operationalContexRefs_RelStructure element
// Type for a list of references to an OPERATIONAL CONTEXT.
type OperationalContexRefsRelStructure struct {
	OneToManyRelationshipStructure
	OperationalContextRef []OperationalContextRef `xml:"OperationalContextRef" json:"OperationalContextRef"`
}

// OperatingDepartmentRefStructure represents the OperatingDepartmentRefStructure element
// Type for a reference to an OPERATING DEPARTMENT.
type OperatingDepartmentRefStructure struct {
	DepartmentRefStructure
}

// ControlCentreRefStructure represents the ControlCentreRefStructure element
// Type for a reference to a CONTROL CENTRE.
type ControlCentreRefStructure struct {
	OrganisationPartRefStructure
}

// TransportAdministrativeZoneRefStructure represents the TransportAdministrativeZoneRefStructure element
// Type for a reference to a TRANSPORT ADMINISTRATIVE ZONE.
type TransportAdministrativeZoneRefStructure struct {
	AdministrativeZoneRefStructure
}

// AllTransportOrganisationsRef represents the AllTransportOrganisationsRef element
// Reference to all  TRANSPORT ORGANISATION.
type AllTransportOrganisationsRef struct {
	AllTransportOrganisationsRefStructure
}

// TransportOrganisationRef represents the TransportOrganisationRef element
// Reference to a TRANSPORT ORGANISATION.
type TransportOrganisationRef struct {
	TransportOrganisationRefStructure
}

// AllPublicTransportOrganisationsRef represents the AllPublicTransportOrganisationsRef element
// Reference to all PUBLIC TRANSPORT ORGANISATIONs.
type AllPublicTransportOrganisationsRef struct {
	AllPublicTransportOrganisationsRefStructure
}

// OperatorRef represents the OperatorRef element
// Reference to an OPERATOR.
type OperatorRef struct {
	OperatorRefStructure
}

// AllOperatorsRef represents the AllOperatorsRef element
// Reference to all OPERATORs.
type AllOperatorsRef struct {
	AllOperatorsRefStructure
}

// AuthorityRef represents the AuthorityRef element
// Reference to an AUTHORITY.
type AuthorityRef struct {
	AuthorityRefStructure
}

// AllAuthoritiesRef represents the AllAuthoritiesRef element
// Reference to all AUTHORITIies.
type AllAuthoritiesRef struct {
	AllAuthoritiesRefStructure
}

// GroupOfOperatorsRef represents the GroupOfOperatorsRef element
// Reference to a GROUP OF OPERATORs.
type GroupOfOperatorsRef struct {
	GroupOfOperatorsRefStructure
}

// OperationalContextRef represents the OperationalContextRef element
// Reference to an OPERATIONAL CONTEXT.
type OperationalContextRef struct {
	OperationalContextRefStructure
}

// OperatingDepartmentRef represents the OperatingDepartmentRef element
// Reference to an OPERATING DEPARTMENT.
type OperatingDepartmentRef struct {
	OperatingDepartmentRefStructure
}

// ControlCentreRef represents the ControlCentreRef element
// Reference to a CONTROL CENTRE.
type ControlCentreRef struct {
	ControlCentreRefStructure
}

// TransportAdministrativeZoneRef represents the TransportAdministrativeZoneRef element
// Reference to a TRANSPORT ADMINISTRATIVE ZONE.
type TransportAdministrativeZoneRef struct {
	TransportAdministrativeZoneRefStructure
}

// ScheduledOperationTypeEnumeration represents the ScheduledOperationTypeEnumeration enumeration
// Allowed values for ScheduledOperationModeOfOperation.
type ScheduledOperationTypeEnumeration string

const (
	// ScheduledOperationTypeEnumerationScheduledService represents scheduledService
	ScheduledOperationTypeEnumerationScheduledService ScheduledOperationTypeEnumeration = "scheduledService"
	// ScheduledOperationTypeEnumerationEventBasedService represents eventBasedService
	ScheduledOperationTypeEnumerationEventBasedService ScheduledOperationTypeEnumeration = "eventBasedService"
)

// FlexibleOperationTypeEnumeration represents the FlexibleOperationTypeEnumeration enumeration
// Allowed values for FlexibleModeOfOperation.
type FlexibleOperationTypeEnumeration string

const (
	// FlexibleOperationTypeEnumerationFlexibleOperationTypeEnumerationFlexibleRoute represents flexibleRoute
	FlexibleOperationTypeEnumerationFlexibleOperationTypeEnumerationFlexibleRoute FlexibleOperationTypeEnumeration = "flexibleRoute"
	// FlexibleOperationTypeEnumerationFlexibleOperationTypeEnumerationFlexibleArea represents flexibleArea
	FlexibleOperationTypeEnumerationFlexibleOperationTypeEnumerationFlexibleArea FlexibleOperationTypeEnumeration = "flexibleArea"
	// FlexibleOperationTypeEnumerationFlexibleOperationTypeEnumerationDemandResponsive represents demandResponsive
	FlexibleOperationTypeEnumerationFlexibleOperationTypeEnumerationDemandResponsive FlexibleOperationTypeEnumeration = "demandResponsive"
)

// VehicleRentalTypeEnumeration represents the VehicleRentalTypeEnumeration enumeration
// Allowed values for VehiclePRentalModeOfOperation.
type VehicleRentalTypeEnumeration string

const (
	// VehicleRentalTypeEnumerationVehicleHire represents vehicleHire
	VehicleRentalTypeEnumerationVehicleHire VehicleRentalTypeEnumeration = "vehicleHire"
	// VehicleRentalTypeEnumerationVehicleLease represents vehicleLease
	VehicleRentalTypeEnumerationVehicleLease VehicleRentalTypeEnumeration = "vehicleLease"
)

// VehicleSharingTypeEnumeration represents the VehicleSharingTypeEnumeration enumeration
// Allowed values for VehicleSharingModeOfOperation.
type VehicleSharingTypeEnumeration string

const (
	// VehicleSharingTypeEnumerationVehicleSharingTypeEnumerationCarSharingClub represents carSharingClub
	VehicleSharingTypeEnumerationVehicleSharingTypeEnumerationCarSharingClub VehicleSharingTypeEnumeration = "carSharingClub"
	// VehicleSharingTypeEnumerationVehicleSharingTypeEnumerationPeerToPeerCarSharing represents peerToPeerCarSharing
	VehicleSharingTypeEnumerationVehicleSharingTypeEnumerationPeerToPeerCarSharing VehicleSharingTypeEnumeration = "peerToPeerCarSharing"
	// VehicleSharingTypeEnumerationVehicleSharingTypeEnumerationVehicleSharing represents vehicleSharing
	VehicleSharingTypeEnumerationVehicleSharingTypeEnumerationVehicleSharing VehicleSharingTypeEnumeration = "vehicleSharing"
)

// VehiclePoolingTypeEnumeration represents the VehiclePoolingTypeEnumeration enumeration
// Allowed values for VehiclePoolingModeOfOperation.
type VehiclePoolingTypeEnumeration string

const (
	// VehiclePoolingTypeEnumerationTaxi represents taxi
	VehiclePoolingTypeEnumerationTaxi VehiclePoolingTypeEnumeration = "taxi"
	// VehiclePoolingTypeEnumerationAppBookedTaxi represents appBookedTaxi
	VehiclePoolingTypeEnumerationAppBookedTaxi VehiclePoolingTypeEnumeration = "appBookedTaxi"
	// VehiclePoolingTypeEnumerationSharedTaxi represents sharedTaxi
	VehiclePoolingTypeEnumerationSharedTaxi VehiclePoolingTypeEnumeration = "sharedTaxi"
	// VehiclePoolingTypeEnumerationPrebookedTaxi represents prebookedTaxi
	VehiclePoolingTypeEnumerationPrebookedTaxi VehiclePoolingTypeEnumeration = "prebookedTaxi"
	// VehiclePoolingTypeEnumerationChaffeuredVehicle represents chaffeuredVehicle
	VehiclePoolingTypeEnumerationChaffeuredVehicle VehiclePoolingTypeEnumeration = "chaffeuredVehicle"
	// VehiclePoolingTypeEnumerationDynamicCarPooling represents dynamicCarPooling
	VehiclePoolingTypeEnumerationDynamicCarPooling VehiclePoolingTypeEnumeration = "dynamicCarPooling"
	// VehiclePoolingTypeEnumerationLongDistanceCarPooling represents longDistanceCarPooling
	VehiclePoolingTypeEnumerationLongDistanceCarPooling VehiclePoolingTypeEnumeration = "longDistanceCarPooling"
	// VehiclePoolingTypeEnumerationCommuterCarPooling represents commuterCarPooling
	VehiclePoolingTypeEnumerationCommuterCarPooling VehiclePoolingTypeEnumeration = "commuterCarPooling"
)

// PersonalOperationTypeEnumeration represents the PersonalOperationTypeEnumeration enumeration
// Allowed values for VehiclePoolingModeOfOperation.
type PersonalOperationTypeEnumeration string

const (
	// PersonalOperationTypeEnumerationOwnCar represents ownCar
	PersonalOperationTypeEnumerationOwnCar PersonalOperationTypeEnumeration = "ownCar"
	// PersonalOperationTypeEnumerationPrivateLift represents privateLift
	PersonalOperationTypeEnumerationPrivateLift PersonalOperationTypeEnumeration = "privateLift"
)

// ModeOfOperationRefStructure represents the ModeOfOperationRefStructure element
// Type for a reference to a MODE OF OPERATION.
type ModeOfOperationRefStructure struct {
	TypeOfValueRefStructure
}

// ConventionalModeOfOperationRefStructure represents the ConventionalModeOfOperationRefStructure element
// Type for a reference to a CONVENTIONAL MODE OF OPERATION.
type ConventionalModeOfOperationRefStructure struct {
	ModeOfOperationRefStructure
}

// ScheduledModeOfOperationRefStructure represents the ScheduledModeOfOperationRefStructure element
// Type for a reference to a SCHEDULED MODE OF OPERATION.
type ScheduledModeOfOperationRefStructure struct {
	ConventionalModeOfOperationRefStructure
}

// FlexibleModeOfOperationRefStructure represents the FlexibleModeOfOperationRefStructure element
// Type for a reference to a FLEXIBLE MODE OF OPERATION.
type FlexibleModeOfOperationRefStructure struct {
	ConventionalModeOfOperationRefStructure
}

// AlternativeModeOfOperationRefStructure represents the AlternativeModeOfOperationRefStructure element
// Type for a reference to a ALTERNATIVE MODE OF OPERATION.
type AlternativeModeOfOperationRefStructure struct {
	ModeOfOperationRefStructure
}

// VehicleRentalModeOfOperationRefStructure represents the VehicleRentalModeOfOperationRefStructure element
// Type for a reference to a VEHICLE RENTAL MODE OF OPERATION.
type VehicleRentalModeOfOperationRefStructure struct {
	AlternativeModeOfOperationRefStructure
}

// VehicleSharingModeOfOperationRefStructure represents the VehicleSharingModeOfOperationRefStructure element
// Type for a reference to a VEHICLE SHARING MODE OF OPERATION.
type VehicleSharingModeOfOperationRefStructure struct {
	AlternativeModeOfOperationRefStructure
}

// VehiclePoolingModeOfOperationRefStructure represents the VehiclePoolingModeOfOperationRefStructure element
// Type for a reference to a VEHICLE POOLING MODE OF OPERATION.
type VehiclePoolingModeOfOperationRefStructure struct {
	AlternativeModeOfOperationRefStructure
}

// PersonalModeOfOperationRefStructure represents the PersonalModeOfOperationRefStructure element
// Type for a reference to a PERSONAL MODE OF OPERATION.
type PersonalModeOfOperationRefStructure struct {
	ModeOfOperationRefStructure
}

// TypeOfModeOfOperationRefStructure represents the TypeOfModeOfOperationRefStructure element
// Type for a reference to a TYPE OF MODE OF OPERATION.
type TypeOfModeOfOperationRefStructure struct {
	TypeOfValueRefStructure
}

// ModeOfOperationRef represents the ModeOfOperationRef element
// Reference to a MODE OF OPERATION. +V1.2.2
type ModeOfOperationRef struct {
	ModeOfOperationRefStructure
}

// ConventionalModeOfOperationRef represents the ConventionalModeOfOperationRef element
// Reference to a CONVENTIONAL MODE OF OPERATION.
type ConventionalModeOfOperationRef struct {
	ConventionalModeOfOperationRefStructure
}

// ScheduledModeOfOperationRef represents the ScheduledModeOfOperationRef element
// Reference to a SCHEDULED MODE OF OPERATION. +V1.2.2
type ScheduledModeOfOperationRef struct {
	ScheduledModeOfOperationRefStructure
}

// FlexibleModeOfOperationRef represents the FlexibleModeOfOperationRef element
// Reference to a FLEXIBLE MODE OF OPERATION.
type FlexibleModeOfOperationRef struct {
	FlexibleModeOfOperationRefStructure
}

// AlternativeModeOfOperationRef represents the AlternativeModeOfOperationRef element
// Reference to a ALTERNATIVE MODE OF OPERATION. +V1.2.2
type AlternativeModeOfOperationRef struct {
	AlternativeModeOfOperationRefStructure
}

// VehicleRentalRef represents the VehicleRentalRef element
// Reference to a VEHICLE RENTAL MODE OF OPERATION. +V1.2.2
type VehicleRentalRef struct {
	VehicleRentalModeOfOperationRefStructure
}

// VehicleSharingRef represents the VehicleSharingRef element
// Reference to a VEHICLE SHARING MODE OF OPERATION. +V1.2.2
type VehicleSharingRef struct {
	VehicleSharingModeOfOperationRefStructure
}

// VehiclePoolingRef represents the VehiclePoolingRef element
// Reference to a VEHICLE POOLING MODE OF OPERATION. +V1.2.2
type VehiclePoolingRef struct {
	VehiclePoolingModeOfOperationRefStructure
}

// PersonalModeOfOperationRef represents the PersonalModeOfOperationRef element
// Reference to a PERSONAL MODE OF OPERATION. +V1.2.2
type PersonalModeOfOperationRef struct {
	PersonalModeOfOperationRefStructure
}

// TypeOfModeOfOperationRef represents the TypeOfModeOfOperationRef element
// Reference to a TYPE OF MODE OF OPERATION.
type TypeOfModeOfOperationRef struct {
	TypeOfModeOfOperationRefStructure
}

// GroupsOfOperatorsInFrameRelStructure represents the groupsOfOperatorsInFrame_RelStructure element
// Type for containment in frame of GROUP OF OPERATORs.
type GroupsOfOperatorsInFrameRelStructure struct {
	ContainmentAggregationStructure
	GroupOfOperators []GroupOfOperators `xml:"GroupOfOperators" json:"GroupOfOperators"`
}

// TransportOperatorsInFrameRelStructure represents the transportOperatorsInFrame_RelStructure element
// Type for containment in frame of TRANSPORT OPERATORs.
type TransportOperatorsInFrameRelStructure struct {
	ContainmentAggregationStructure
	Authority []Authority `xml:"Authority,omitempty" json:"Authority,omitempty"`
	Operator []Operator `xml:"Operator,omitempty" json:"Operator,omitempty"`
}

// OperationalContextsInFrameRelStructure represents the operationalContextsInFrame_RelStructure element
// Type for containment in frame of OPERATIONAL CONTEXTs.
type OperationalContextsInFrameRelStructure struct {
	ContainmentAggregationStructure
	// Characterization of a set of operational objects, such as timing or links determined either by a DEPARTMENT or by an ORGANISATIONAL UNIT.
	OperationalContext []OperationalContext `xml:"OperationalContext" json:"OperationalContext"`
}

// ControlCentresInFrameRelStructure represents the controlCentresInFrame_RelStructure element
// Type for containment in frame of CONTROL CENTREs.
type ControlCentresInFrameRelStructure struct {
	ContainmentAggregationStructure
	// Characterization of a set of operational objects, such as timing or links determined either by a DEPARTMENT or by an ORGANISATIONAL UNIT.
	ControlCentre []ControlCentre `xml:"ControlCentre" json:"ControlCentre"`
}

// TransportOrganisationVersionStructure represents the TransportOrganisation_VersionStructure element
// Type for an TRANSPORT ORGANISATION.
type TransportOrganisationVersionStructure struct {
	OrganisationVersionStructure
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	PostalAddress *PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	RoadAddress *RoadAddress `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
	// Address of TRANSPORT ORGANISATION.
	Address *Address `xml:"Address,omitempty" json:"Address,omitempty"`
	// Primary transport MODE of TRANSPORT ORGANISATION
	PrimaryMode *AllModesEnumeration `xml:"PrimaryMode,omitempty" json:"PrimaryMode,omitempty"`
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
	TaxiSubmode *TaxiSubmode `xml:"TaxiSubmode,omitempty" json:"TaxiSubmode,omitempty"`
	SelfDriveSubmode *SelfDriveSubmode `xml:"SelfDriveSubmode,omitempty" json:"SelfDriveSubmode,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	// Activities undertaken by OPERATOR.
	OperatorActivities *OperatorActivitiesEnumeration `xml:"OperatorActivities,omitempty" json:"OperatorActivities,omitempty"`
	// Contact details for Customer service use.
	CustomerServiceContactDetails *ContactStructure `xml:"CustomerServiceContactDetails,omitempty" json:"CustomerServiceContactDetails,omitempty"`
	// Departments of OPERATOR.
	Departments *DepartmentsRelStructure `xml:"departments,omitempty" json:"departments,omitempty"`
	// Additional transport MODEs for OPERATOR.
	OtherModes *ModeRefsRelStructure `xml:"otherModes,omitempty" json:"otherModes,omitempty"`
}

// Address2 represents the Address2 element
type Address2 struct {
	PostalAddressVersionStructure
	// POINTs in GROUP OF POINTs.
	Members interface{} `xml:"members,omitempty" json:"members,omitempty"`
	// A list of alternative Key values for an element.
	KeyList interface{} `xml:"keyList,omitempty" json:"keyList,omitempty"`
	Extensions interface{} `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// OperatorVersionStructure represents the Operator_VersionStructure element
// Type for an OPERATOR.
type OperatorVersionStructure struct {
	TransportOrganisationVersionStructure
}

// AuthorityVersionStructure represents the Authority_VersionStructure element
// Type for an AUTHORITY.
type AuthorityVersionStructure struct {
	TransportOrganisationVersionStructure
	// Classification of Zone. Used for arbitrary documentation -.
	AuthorityTypes *TypeOfOrganisationRefsRelStructure `xml:"authorityTypes,omitempty" json:"authorityTypes,omitempty"`
}

// GroupOfOperatorsStructure represents the GroupOfOperatorsStructure element
// Type for a GROUP OF OPERATORs.
type GroupOfOperatorsStructure struct {
	GroupOfEntitiesVersionStructure
	// Whether contents of Group should be used to exclude (true) from a large list . The default is include  (i.e.false)
	UseToExclude *bool `xml:"UseToExclude,omitempty" json:"UseToExclude,omitempty"`
	// Operators in group.
	Members *TransportOrganisationRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// OperationalContextVersionStructure represents the OperationalContext_VersionStructure element
// Type for an OPERATIONAL CONTEXT.
type OperationalContextVersionStructure struct {
	DataManagedObjectStructure
	// The name of the OPERATIONAL CONTEXT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// A short name of the OPERATIONAL CONTEXT.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	ControlCentreRef *ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	OrganisationalUnitRef *OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	DepartmentRef *DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
	OrganisationPartRef *OrganisationPartRef `xml:"OrganisationPartRef,omitempty" json:"OrganisationPartRef,omitempty"`
	// Vehicle mode to which context applies.
	VehicleMode *AllVehicleModesOfTransportEnumeration `xml:"VehicleMode,omitempty" json:"VehicleMode,omitempty"`
	TransportSubmode *TransportSubmode `xml:"TransportSubmode,omitempty" json:"TransportSubmode,omitempty"`
}

// OperatingDepartmentVersionStructure represents the OperatingDepartment_VersionStructure element
// Type for an OPERATING DEPARTMENT.
type OperatingDepartmentVersionStructure struct {
	DepartmentVersionStructure
	// OPERATIONAL CONTEXTs for OPERATING DEPARTMENT.
	OperationalContexts *OperationalContexRefsRelStructure `xml:"operationalContexts,omitempty" json:"operationalContexts,omitempty"`
}

// OperatorDerivedViewStructure represents the Operator_DerivedViewStructure element
// Type for an OPERATOR VIEW.
type OperatorDerivedViewStructure struct {
	DerivedViewStructure
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	// The name of the ORGANISATION.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// A short name of the ORGANISATION.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// The legal name of the ORGANISATION, if different from Name.
	LegalName *MultilingualString `xml:"LegalName,omitempty" json:"LegalName,omitempty"`
	// The Trading name of the ORGANISATION given to the Public - If different from Name or Legal Name.
	TradingName *MultilingualString `xml:"TradingName,omitempty" json:"TradingName,omitempty"`
	// Alternativie names for ORGANISATION.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
}

// ControlCentresRelStructure represents the ControlCentres_RelStructure element
// A list of CONTROL CENTREs.
type ControlCentresRelStructure struct {
	ContainmentAggregationStructure
	ControlCentreRef []ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	ControlCentre []ControlCentre `xml:"ControlCentre,omitempty" json:"ControlCentre,omitempty"`
}

// ControlCentreVersionStructure represents the ControlCentre_VersionStructure element
// Type for CONTROL CENTRE.
type ControlCentreVersionStructure struct {
	OrganisationPartVersionStructure
	// Number used to identify CONTROL CENTRE.
	Number *int `xml:"Number,omitempty" json:"Number,omitempty"`
	// Unique alphanumeric identification of CONTROL CENTRE  used to identify source  of request to external systems.
	ControlCentreCode *MultilingualString `xml:"ControlCentreCode,omitempty" json:"ControlCentreCode,omitempty"`
	DepartmentRef *DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
}

// TransportAdministrativeZoneVersionStructure represents the TransportAdministrativeZone_VersionStructure element
// Type for an TRANSPORT ADMINISTRATIVE  ZONE.
type TransportAdministrativeZoneVersionStructure struct {
	AdministrativeZoneVersionStructure
	// TRANSPORT MODEs for which this zone applies. Default is all.
	VehicleModes *AllModesEnumeration `xml:"VehicleModes,omitempty" json:"VehicleModes,omitempty"`
}

// Operator represents the Operator element
// A company  providing public transport services.
type Operator struct {
	OperatorVersionStructure
}

// Authority represents the Authority element
// The ORGANISATION under which the responsibility of organising the transport service in a certain area is placed.
type Authority struct {
	AuthorityVersionStructure
}

// GroupOfOperators represents the GroupOfOperators element
// A grouping of OPERATORs.
type GroupOfOperators struct {
	GroupOfOperatorsStructure
}

// OperationalContext represents the OperationalContext element
// Characterization of a set of operational objects, such as timing or links determined either by a DEPARTMENT or by an ORGANISATIONAL UNIT.
type OperationalContext struct {
	OperationalContextVersionStructure
}

// OperatingDepartment represents the OperatingDepartment element
// A specific DEPARTMENT which administers certain LINEs.
type OperatingDepartment struct {
	OperatingDepartmentVersionStructure
}

// OperatorView represents the OperatorView element
// Simplified view of OPERATOR. All data except the identifier will be derived through the relationship.
type OperatorView struct {
	OperatorDerivedViewStructure
}

// ControlCentre represents the ControlCentre element
// An ORGANISATION PART for an operational team who are responsible for issuing commands to control the services.
type ControlCentre struct {
	ControlCentreVersionStructure
}

// TransportAdministrativeZone represents the TransportAdministrativeZone element
// A ZONE relating to the management responsibilities of an ORGANISATION. For example to allocate bus stop identifiers for a region.
type TransportAdministrativeZone struct {
	TransportAdministrativeZoneVersionStructure
}

// AccessibilityInfoFacilityEnumeration represents the AccessibilityInfoFacilityEnumeration enumeration
// Allowed values for Accessibility Info.
type AccessibilityInfoFacilityEnumeration string

const (
	// AccessibilityInfoFacilityEnumerationAudioInformation represents audioInformation
	AccessibilityInfoFacilityEnumerationAudioInformation AccessibilityInfoFacilityEnumeration = "audioInformation"
	// AccessibilityInfoFacilityEnumerationAudioForHearingImpaired represents audioForHearingImpaired
	AccessibilityInfoFacilityEnumerationAudioForHearingImpaired AccessibilityInfoFacilityEnumeration = "audioForHearingImpaired"
	// AccessibilityInfoFacilityEnumerationVisualDisplays represents visualDisplays
	AccessibilityInfoFacilityEnumerationVisualDisplays AccessibilityInfoFacilityEnumeration = "visualDisplays"
	// AccessibilityInfoFacilityEnumerationDisplaysForVisuallyImpaired represents displaysForVisuallyImpaired
	AccessibilityInfoFacilityEnumerationDisplaysForVisuallyImpaired AccessibilityInfoFacilityEnumeration = "displaysForVisuallyImpaired"
	// AccessibilityInfoFacilityEnumerationLargePrintTimetables represents largePrintTimetables
	AccessibilityInfoFacilityEnumerationLargePrintTimetables AccessibilityInfoFacilityEnumeration = "largePrintTimetables"
	// AccessibilityInfoFacilityEnumerationOther represents other
	AccessibilityInfoFacilityEnumerationOther AccessibilityInfoFacilityEnumeration = "other"
)

// MobilityFacilityEnumeration represents the MobilityFacilityEnumeration enumeration
// Allowed values for Mobility Facility: TPEG pti_table 23.
type MobilityFacilityEnumeration string

const (
	// MobilityFacilityEnumerationMobilityFacilityEnumerationUnknown represents unknown
	// pti255_4
	MobilityFacilityEnumerationMobilityFacilityEnumerationUnknown MobilityFacilityEnumeration = "unknown"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationLowFloor represents lowFloor
	// pti23_16_1
	MobilityFacilityEnumerationMobilityFacilityEnumerationLowFloor MobilityFacilityEnumeration = "lowFloor"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationStepFreeAccess represents stepFreeAccess
	// pti23_16_3
	MobilityFacilityEnumerationMobilityFacilityEnumerationStepFreeAccess MobilityFacilityEnumeration = "stepFreeAccess"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationSuitableForPushchairs represents suitableForPushchairs
	MobilityFacilityEnumerationMobilityFacilityEnumerationSuitableForPushchairs MobilityFacilityEnumeration = "suitableForPushchairs"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationSuitableForWheelchairs represents suitableForWheelchairs
	// pti23_16_1
	MobilityFacilityEnumerationMobilityFacilityEnumerationSuitableForWheelchairs MobilityFacilityEnumeration = "suitableForWheelchairs"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationSuitableForHeaviliyDisabled represents suitableForHeaviliyDisabled
	MobilityFacilityEnumerationMobilityFacilityEnumerationSuitableForHeaviliyDisabled MobilityFacilityEnumeration = "suitableForHeaviliyDisabled"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationBoardingAssistance represents boardingAssistance
	// pti23_16_2
	MobilityFacilityEnumerationMobilityFacilityEnumerationBoardingAssistance MobilityFacilityEnumeration = "boardingAssistance"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationOnboardAssistance represents onboardAssistance
	MobilityFacilityEnumerationMobilityFacilityEnumerationOnboardAssistance MobilityFacilityEnumeration = "onboardAssistance"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationUnaccompaniedMinorAssistance represents unaccompaniedMinorAssistance
	MobilityFacilityEnumerationMobilityFacilityEnumerationUnaccompaniedMinorAssistance MobilityFacilityEnumeration = "unaccompaniedMinorAssistance"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationTactilePlatformEdges represents tactilePlatformEdges
	MobilityFacilityEnumerationMobilityFacilityEnumerationTactilePlatformEdges MobilityFacilityEnumeration = "tactilePlatformEdges"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationTactileGuidingStrips represents tactileGuidingStrips
	MobilityFacilityEnumerationMobilityFacilityEnumerationTactileGuidingStrips MobilityFacilityEnumeration = "tactileGuidingStrips"
	// MobilityFacilityEnumerationMobilityFacilityEnumerationRaisedKerb represents raisedKerb
	MobilityFacilityEnumerationMobilityFacilityEnumerationRaisedKerb MobilityFacilityEnumeration = "raisedKerb"
)

// PassengerInformationFacilityEnumeration represents the PassengerInformationFacilityEnumeration enumeration
// Allowed values for Passenger information facility.
type PassengerInformationFacilityEnumeration string

const (
	// PassengerInformationFacilityEnumerationNextStopIndicator represents nextStopIndicator
	PassengerInformationFacilityEnumerationNextStopIndicator PassengerInformationFacilityEnumeration = "nextStopIndicator"
	// PassengerInformationFacilityEnumerationStopAnnouncements represents stopAnnouncements
	PassengerInformationFacilityEnumerationStopAnnouncements PassengerInformationFacilityEnumeration = "stopAnnouncements"
	// PassengerInformationFacilityEnumerationPassengerInformationDisplay represents passengerInformationDisplay
	PassengerInformationFacilityEnumerationPassengerInformationDisplay PassengerInformationFacilityEnumeration = "passengerInformationDisplay"
	// PassengerInformationFacilityEnumerationRealTimeConnections represents realTimeConnections
	PassengerInformationFacilityEnumerationRealTimeConnections PassengerInformationFacilityEnumeration = "realTimeConnections"
	// PassengerInformationFacilityEnumerationOther represents other
	PassengerInformationFacilityEnumerationOther PassengerInformationFacilityEnumeration = "other"
)

// SafetyFacilityEnumeration represents the SafetyFacilityEnumeration enumeration
// Allowed values for SAFETY Facility.
type SafetyFacilityEnumeration string

const (
	// SafetyFacilityEnumerationCcTv represents ccTv
	SafetyFacilityEnumerationCcTv SafetyFacilityEnumeration = "ccTv"
	// SafetyFacilityEnumerationMobileCoverage represents mobileCoverage
	SafetyFacilityEnumerationMobileCoverage SafetyFacilityEnumeration = "mobileCoverage"
	// SafetyFacilityEnumerationSosPoints represents sosPoints
	SafetyFacilityEnumerationSosPoints SafetyFacilityEnumeration = "sosPoints"
	// SafetyFacilityEnumerationStaffed represents staffed
	SafetyFacilityEnumerationStaffed SafetyFacilityEnumeration = "staffed"
)

// AccessFacilityEnumeration represents the AccessFacilityEnumeration enumeration
// Allowed values for Site Access Facility. NB. These are the properties of access to a fixed SITE, not to a VEHICLE.
type AccessFacilityEnumeration string

const (
	// AccessFacilityEnumerationUnknown represents unknown
	AccessFacilityEnumerationUnknown AccessFacilityEnumeration = "unknown"
	// AccessFacilityEnumerationLift represents lift
	AccessFacilityEnumerationLift AccessFacilityEnumeration = "lift"
	// AccessFacilityEnumerationWheelchairLift represents wheelchairLift
	AccessFacilityEnumerationWheelchairLift AccessFacilityEnumeration = "wheelchairLift"
	// AccessFacilityEnumerationEscalator represents escalator
	AccessFacilityEnumerationEscalator AccessFacilityEnumeration = "escalator"
	// AccessFacilityEnumerationTravelator represents travelator
	AccessFacilityEnumerationTravelator AccessFacilityEnumeration = "travelator"
	// AccessFacilityEnumerationRamp represents ramp
	AccessFacilityEnumerationRamp AccessFacilityEnumeration = "ramp"
	// AccessFacilityEnumerationAutomaticRamp represents automaticRamp
	AccessFacilityEnumerationAutomaticRamp AccessFacilityEnumeration = "automaticRamp"
	// AccessFacilityEnumerationSteps represents steps
	AccessFacilityEnumerationSteps AccessFacilityEnumeration = "steps"
	// AccessFacilityEnumerationStairs represents stairs
	AccessFacilityEnumerationStairs AccessFacilityEnumeration = "stairs"
	// AccessFacilityEnumerationSlidingStep represents slidingStep
	AccessFacilityEnumerationSlidingStep AccessFacilityEnumeration = "slidingStep"
	// AccessFacilityEnumerationShuttle represents shuttle
	AccessFacilityEnumerationShuttle AccessFacilityEnumeration = "shuttle"
	// AccessFacilityEnumerationNarrowEntrance represents narrowEntrance
	AccessFacilityEnumerationNarrowEntrance AccessFacilityEnumeration = "narrowEntrance"
	// AccessFacilityEnumerationBarrier represents barrier
	AccessFacilityEnumerationBarrier AccessFacilityEnumeration = "barrier"
	// AccessFacilityEnumerationLowFloorAccess represents lowFloorAccess
	AccessFacilityEnumerationLowFloorAccess AccessFacilityEnumeration = "lowFloorAccess"
	// AccessFacilityEnumerationValidator represents validator
	AccessFacilityEnumerationValidator AccessFacilityEnumeration = "validator"
)

// VehicleAccessFacilityEnumeration represents the VehicleAccessFacilityEnumeration enumeration
// Allowed values for Vehicle Access Facility. NB. These are the  properties of access to a VEHICLE. +1.1
type VehicleAccessFacilityEnumeration string

const (
	// VehicleAccessFacilityEnumerationUnknown represents unknown
	VehicleAccessFacilityEnumerationUnknown VehicleAccessFacilityEnumeration = "unknown"
	// VehicleAccessFacilityEnumerationWheelchairLift represents wheelchairLift
	VehicleAccessFacilityEnumerationWheelchairLift VehicleAccessFacilityEnumeration = "wheelchairLift"
	// VehicleAccessFacilityEnumerationManualRamp represents manualRamp
	VehicleAccessFacilityEnumerationManualRamp VehicleAccessFacilityEnumeration = "manualRamp"
	// VehicleAccessFacilityEnumerationAutomaticRamp represents automaticRamp
	VehicleAccessFacilityEnumerationAutomaticRamp VehicleAccessFacilityEnumeration = "automaticRamp"
	// VehicleAccessFacilityEnumerationSteps represents steps
	VehicleAccessFacilityEnumerationSteps VehicleAccessFacilityEnumeration = "steps"
	// VehicleAccessFacilityEnumerationSlidingStep represents slidingStep
	VehicleAccessFacilityEnumerationSlidingStep VehicleAccessFacilityEnumeration = "slidingStep"
	// VehicleAccessFacilityEnumerationNarrowEntrance represents narrowEntrance
	VehicleAccessFacilityEnumerationNarrowEntrance VehicleAccessFacilityEnumeration = "narrowEntrance"
	// VehicleAccessFacilityEnumerationValidator represents validator
	VehicleAccessFacilityEnumerationValidator VehicleAccessFacilityEnumeration = "validator"
)

// AccessibilityToolEnumeration represents the AccessibilityToolEnumeration enumeration
// Allowed values for Accessibility Tools.
type AccessibilityToolEnumeration string

const (
	// AccessibilityToolEnumerationWheelchair represents wheelchair
	AccessibilityToolEnumerationWheelchair AccessibilityToolEnumeration = "wheelchair"
	// AccessibilityToolEnumerationWalkingstick represents walkingstick
	AccessibilityToolEnumerationWalkingstick AccessibilityToolEnumeration = "walkingstick"
	// AccessibilityToolEnumerationAudioNavigator represents audioNavigator
	AccessibilityToolEnumerationAudioNavigator AccessibilityToolEnumeration = "audioNavigator"
	// AccessibilityToolEnumerationVisualNavigator represents visualNavigator
	AccessibilityToolEnumerationVisualNavigator AccessibilityToolEnumeration = "visualNavigator"
	// AccessibilityToolEnumerationPassengerCart represents passengerCart
	AccessibilityToolEnumerationPassengerCart AccessibilityToolEnumeration = "passengerCart"
	// AccessibilityToolEnumerationPushchair represents pushchair
	AccessibilityToolEnumerationPushchair AccessibilityToolEnumeration = "pushchair"
	// AccessibilityToolEnumerationUmbrella represents umbrella
	AccessibilityToolEnumerationUmbrella AccessibilityToolEnumeration = "umbrella"
	// AccessibilityToolEnumerationBuggy represents buggy
	AccessibilityToolEnumerationBuggy AccessibilityToolEnumeration = "buggy"
	// AccessibilityToolEnumerationOther represents other
	AccessibilityToolEnumerationOther AccessibilityToolEnumeration = "other"
)

// AccommodationAccessEnumeration represents the AccommodationAccessEnumeration enumeration
// Allowed values for Accommodation Access.
type AccommodationAccessEnumeration string

const (
	// AccommodationAccessEnumerationOther represents other
	AccommodationAccessEnumerationOther AccommodationAccessEnumeration = "other"
	// AccommodationAccessEnumerationFreeSeating represents freeSeating
	AccommodationAccessEnumerationFreeSeating AccommodationAccessEnumeration = "freeSeating"
	// AccommodationAccessEnumerationReservation represents reservation
	// pti23_3
	AccommodationAccessEnumerationReservation AccommodationAccessEnumeration = "reservation"
	// AccommodationAccessEnumerationStanding represents standing
	AccommodationAccessEnumerationStanding AccommodationAccessEnumeration = "standing"
)

// AccommodationFacilityEnumeration represents the AccommodationFacilityEnumeration enumeration
// Allowed values for Accommodation Facility.
type AccommodationFacilityEnumeration string

const (
	// AccommodationFacilityEnumerationUnknown represents unknown
	AccommodationFacilityEnumerationUnknown AccommodationFacilityEnumeration = "unknown"
	// AccommodationFacilityEnumerationStanding represents standing
	AccommodationFacilityEnumerationStanding AccommodationFacilityEnumeration = "standing"
	// AccommodationFacilityEnumerationSeating represents seating
	AccommodationFacilityEnumerationSeating AccommodationFacilityEnumeration = "seating"
	// AccommodationFacilityEnumerationSleeper represents sleeper
	AccommodationFacilityEnumerationSleeper AccommodationFacilityEnumeration = "sleeper"
	// AccommodationFacilityEnumerationSingleSleeper represents singleSleeper
	AccommodationFacilityEnumerationSingleSleeper AccommodationFacilityEnumeration = "singleSleeper"
	// AccommodationFacilityEnumerationDoubleSleeper represents doubleSleeper
	AccommodationFacilityEnumerationDoubleSleeper AccommodationFacilityEnumeration = "doubleSleeper"
	// AccommodationFacilityEnumerationSpecialSleeper represents specialSleeper
	AccommodationFacilityEnumerationSpecialSleeper AccommodationFacilityEnumeration = "specialSleeper"
	// AccommodationFacilityEnumerationCouchette represents couchette
	AccommodationFacilityEnumerationCouchette AccommodationFacilityEnumeration = "couchette"
	// AccommodationFacilityEnumerationSingleCouchette represents singleCouchette
	AccommodationFacilityEnumerationSingleCouchette AccommodationFacilityEnumeration = "singleCouchette"
	// AccommodationFacilityEnumerationDoubleCouchette represents doubleCouchette
	AccommodationFacilityEnumerationDoubleCouchette AccommodationFacilityEnumeration = "doubleCouchette"
	// AccommodationFacilityEnumerationSpecialSeating represents specialSeating
	AccommodationFacilityEnumerationSpecialSeating AccommodationFacilityEnumeration = "specialSeating"
	// AccommodationFacilityEnumerationRecliningSeats represents recliningSeats
	AccommodationFacilityEnumerationRecliningSeats AccommodationFacilityEnumeration = "recliningSeats"
	// AccommodationFacilityEnumerationBabyCompartment represents babyCompartment
	AccommodationFacilityEnumerationBabyCompartment AccommodationFacilityEnumeration = "babyCompartment"
	// AccommodationFacilityEnumerationFamilyCarriage represents familyCarriage
	AccommodationFacilityEnumerationFamilyCarriage AccommodationFacilityEnumeration = "familyCarriage"
	// AccommodationFacilityEnumerationRecreationArea represents recreationArea
	AccommodationFacilityEnumerationRecreationArea AccommodationFacilityEnumeration = "recreationArea"
	// AccommodationFacilityEnumerationPanoramaCoach represents panoramaCoach
	AccommodationFacilityEnumerationPanoramaCoach AccommodationFacilityEnumeration = "panoramaCoach"
	// AccommodationFacilityEnumerationPullmanCoach represents pullmanCoach
	AccommodationFacilityEnumerationPullmanCoach AccommodationFacilityEnumeration = "pullmanCoach"
	// AccommodationFacilityEnumerationPushchair represents pushchair
	AccommodationFacilityEnumerationPushchair AccommodationFacilityEnumeration = "pushchair"
	// AccommodationFacilityEnumerationWheelchair represents wheelchair
	AccommodationFacilityEnumerationWheelchair AccommodationFacilityEnumeration = "wheelchair"
)

// AssistanceFacilityEnumeration represents the AssistanceFacilityEnumeration enumeration
// Allowed values for Assistance Facility.
type AssistanceFacilityEnumeration string

const (
	// AssistanceFacilityEnumerationPersonalAssistance represents personalAssistance
	AssistanceFacilityEnumerationPersonalAssistance AssistanceFacilityEnumeration = "personalAssistance"
	// AssistanceFacilityEnumerationBoardingAssistance represents boardingAssistance
	AssistanceFacilityEnumerationBoardingAssistance AssistanceFacilityEnumeration = "boardingAssistance"
	// AssistanceFacilityEnumerationWheelchairAssistance represents wheelchairAssistance
	AssistanceFacilityEnumerationWheelchairAssistance AssistanceFacilityEnumeration = "wheelchairAssistance"
	// AssistanceFacilityEnumerationUnaccompaniedMinorAssistance represents unaccompaniedMinorAssistance
	AssistanceFacilityEnumerationUnaccompaniedMinorAssistance AssistanceFacilityEnumeration = "unaccompaniedMinorAssistance"
	// AssistanceFacilityEnumerationWheelchairUse represents wheelchairUse
	AssistanceFacilityEnumerationWheelchairUse AssistanceFacilityEnumeration = "wheelchairUse"
	// AssistanceFacilityEnumerationConductor represents conductor
	AssistanceFacilityEnumerationConductor AssistanceFacilityEnumeration = "conductor"
	// AssistanceFacilityEnumerationInformation represents information
	AssistanceFacilityEnumerationInformation AssistanceFacilityEnumeration = "information"
	// AssistanceFacilityEnumerationOther represents other
	AssistanceFacilityEnumerationOther AssistanceFacilityEnumeration = "other"
	// AssistanceFacilityEnumerationNone represents none
	AssistanceFacilityEnumerationNone AssistanceFacilityEnumeration = "none"
	// AssistanceFacilityEnumerationAny represents any
	AssistanceFacilityEnumerationAny AssistanceFacilityEnumeration = "any"
)

// AssistanceAvailabilityEnumeration represents the AssistanceAvailabilityEnumeration enumeration
// Allowed values for  Assistance Availability.
type AssistanceAvailabilityEnumeration string

const (
	// AssistanceAvailabilityEnumerationNone represents none
	// Assistance is not  available.
	AssistanceAvailabilityEnumerationNone AssistanceAvailabilityEnumeration = "none"
	// AssistanceAvailabilityEnumerationAvailable represents available
	// Assistance is nornally available.
	AssistanceAvailabilityEnumerationAvailable AssistanceAvailabilityEnumeration = "available"
	// AssistanceAvailabilityEnumerationAvailableIfBooked represents availableIfBooked
	// Assistance is available if booked.
	AssistanceAvailabilityEnumerationAvailableIfBooked AssistanceAvailabilityEnumeration = "availableIfBooked"
	// AssistanceAvailabilityEnumerationAvailableAtCertainTimes represents availableAtCertainTimes
	// Assistance is available at certain times.
	AssistanceAvailabilityEnumerationAvailableAtCertainTimes AssistanceAvailabilityEnumeration = "availableAtCertainTimes"
	// AssistanceAvailabilityEnumerationAvailableDependentOnJourney represents availableDependentOnJourney
	// Assistance is dependent on the journey.
	AssistanceAvailabilityEnumerationAvailableDependentOnJourney AssistanceAvailabilityEnumeration = "availableDependentOnJourney"
	// AssistanceAvailabilityEnumerationUnknown represents unknown
	// Not known if assistance is available.
	AssistanceAvailabilityEnumerationUnknown AssistanceAvailabilityEnumeration = "unknown"
)

// BerthFacilityEnumeration represents the BerthFacilityEnumeration enumeration
// Allowed values for Berth Facility:
type BerthFacilityEnumeration string

const (
	// BerthFacilityEnumerationUpper represents upper
	BerthFacilityEnumerationUpper BerthFacilityEnumeration = "upper"
	// BerthFacilityEnumerationLower represents lower
	BerthFacilityEnumerationLower BerthFacilityEnumeration = "lower"
	// BerthFacilityEnumerationBoth represents both
	BerthFacilityEnumerationBoth BerthFacilityEnumeration = "both"
)

// BoardingPermissionEnumeration represents the BoardingPermissionEnumeration enumeration
// Allowed values or Boarding Permission Facility: UIc.
type BoardingPermissionEnumeration string

const (
	// BoardingPermissionEnumerationNormal represents normal
	BoardingPermissionEnumerationNormal BoardingPermissionEnumeration = "normal"
	// BoardingPermissionEnumerationEarlyBoardingPossibleBeforeDeparture represents earlyBoardingPossibleBeforeDeparture
	BoardingPermissionEnumerationEarlyBoardingPossibleBeforeDeparture BoardingPermissionEnumeration = "earlyBoardingPossibleBeforeDeparture"
	// BoardingPermissionEnumerationLateAlightingPossibleAfterArrival represents lateAlightingPossibleAfterArrival
	BoardingPermissionEnumerationLateAlightingPossibleAfterArrival BoardingPermissionEnumeration = "lateAlightingPossibleAfterArrival"
	// BoardingPermissionEnumerationOvernightStayOnboardAllowed represents overnightStayOnboardAllowed
	BoardingPermissionEnumerationOvernightStayOnboardAllowed BoardingPermissionEnumeration = "overnightStayOnboardAllowed"
)

// CouchetteFacilityEnumeration represents the CouchetteFacilityEnumeration enumeration
// Allowed values  for Couchette Facility: UIc.
type CouchetteFacilityEnumeration string

const (
	// CouchetteFacilityEnumerationUnknown represents unknown
	CouchetteFacilityEnumerationUnknown CouchetteFacilityEnumeration = "unknown"
	// CouchetteFacilityEnumerationT2 represents T2
	CouchetteFacilityEnumerationT2 CouchetteFacilityEnumeration = "T2"
	// CouchetteFacilityEnumerationT3 represents T3
	CouchetteFacilityEnumerationT3 CouchetteFacilityEnumeration = "T3"
	// CouchetteFacilityEnumerationC1 represents C1
	CouchetteFacilityEnumerationC1 CouchetteFacilityEnumeration = "C1"
	// CouchetteFacilityEnumerationC2 represents C2
	CouchetteFacilityEnumerationC2 CouchetteFacilityEnumeration = "C2"
	// CouchetteFacilityEnumerationC4 represents C4
	CouchetteFacilityEnumerationC4 CouchetteFacilityEnumeration = "C4"
	// CouchetteFacilityEnumerationC5 represents C5
	// pti23_4_1
	CouchetteFacilityEnumerationC5 CouchetteFacilityEnumeration = "C5"
	// CouchetteFacilityEnumerationC6 represents C6
	CouchetteFacilityEnumerationC6 CouchetteFacilityEnumeration = "C6"
	// CouchetteFacilityEnumerationWheelchair represents wheelchair
	CouchetteFacilityEnumerationWheelchair CouchetteFacilityEnumeration = "wheelchair"
	// CouchetteFacilityEnumerationOther represents other
	CouchetteFacilityEnumerationOther CouchetteFacilityEnumeration = "other"
)

// EmergencyServiceEnumeration represents the EmergencyServiceEnumeration enumeration
// Allowed values for Emergency Service Facility.
type EmergencyServiceEnumeration string

const (
	// EmergencyServiceEnumerationPolice represents police
	EmergencyServiceEnumerationPolice EmergencyServiceEnumeration = "police"
	// EmergencyServiceEnumerationFire represents fire
	EmergencyServiceEnumerationFire EmergencyServiceEnumeration = "fire"
	// EmergencyServiceEnumerationFirstAid represents firstAid
	EmergencyServiceEnumerationFirstAid EmergencyServiceEnumeration = "firstAid"
	// EmergencyServiceEnumerationSosPoint represents sosPoint
	EmergencyServiceEnumerationSosPoint EmergencyServiceEnumeration = "sosPoint"
	// EmergencyServiceEnumerationOther represents other
	EmergencyServiceEnumerationOther EmergencyServiceEnumeration = "other"
)

// FamilyFacilityEnumeration represents the FamilyFacilityEnumeration enumeration
// Allowed values for Family Accommodation.
type FamilyFacilityEnumeration string

const (
	// FamilyFacilityEnumerationNone represents none
	FamilyFacilityEnumerationNone FamilyFacilityEnumeration = "none"
	// FamilyFacilityEnumerationServicesForChildren represents servicesForChildren
	FamilyFacilityEnumerationServicesForChildren FamilyFacilityEnumeration = "servicesForChildren"
	// FamilyFacilityEnumerationServicesForArmyFamilies represents servicesForArmyFamilies
	FamilyFacilityEnumerationServicesForArmyFamilies FamilyFacilityEnumeration = "servicesForArmyFamilies"
	// FamilyFacilityEnumerationNurseryService represents nurseryService
	FamilyFacilityEnumerationNurseryService FamilyFacilityEnumeration = "nurseryService"
)

// GenderEnumeration represents the GenderEnumeration enumeration
// Allowed values for Gender.
type GenderEnumeration string

const (
	// GenderEnumerationFemale represents female
	GenderEnumerationFemale GenderEnumeration = "female"
	// GenderEnumerationMale represents male
	GenderEnumerationMale GenderEnumeration = "male"
	// GenderEnumerationUnspecified represents unspecified
	GenderEnumerationUnspecified GenderEnumeration = "unspecified"
)

// HireFacilityEnumeration represents the HireFacilityEnumeration enumeration
// Allowed values for Hire Facility.
type HireFacilityEnumeration string

const (
	// HireFacilityEnumerationUnknown represents unknown
	HireFacilityEnumerationUnknown HireFacilityEnumeration = "unknown"
	// HireFacilityEnumerationScooterHire represents scooterHire
	HireFacilityEnumerationScooterHire HireFacilityEnumeration = "scooterHire"
	// HireFacilityEnumerationVehicleHire represents vehicleHire
	HireFacilityEnumerationVehicleHire HireFacilityEnumeration = "vehicleHire"
	// HireFacilityEnumerationCarHire represents carHire
	HireFacilityEnumerationCarHire HireFacilityEnumeration = "carHire"
	// HireFacilityEnumerationMotorCycleHire represents motorCycleHire
	HireFacilityEnumerationMotorCycleHire HireFacilityEnumeration = "motorCycleHire"
	// HireFacilityEnumerationCycleHire represents cycleHire
	HireFacilityEnumerationCycleHire HireFacilityEnumeration = "cycleHire"
	// HireFacilityEnumerationTaxi represents taxi
	HireFacilityEnumerationTaxi HireFacilityEnumeration = "taxi"
	// HireFacilityEnumerationBoatHire represents boatHire
	HireFacilityEnumerationBoatHire HireFacilityEnumeration = "boatHire"
	// HireFacilityEnumerationRecreationDeviceHire represents recreationDeviceHire
	HireFacilityEnumerationRecreationDeviceHire HireFacilityEnumeration = "recreationDeviceHire"
	// HireFacilityEnumerationOther represents other
	HireFacilityEnumerationOther HireFacilityEnumeration = "other"
)

// LuggageCarriageEnumeration represents the LuggageCarriageEnumeration enumeration
// Allowed values for Luggage Carriage Facility.
type LuggageCarriageEnumeration string

const (
	// LuggageCarriageEnumerationUnknown represents unknown
	LuggageCarriageEnumerationUnknown LuggageCarriageEnumeration = "unknown"
	// LuggageCarriageEnumerationNoBaggageStorage represents noBaggageStorage
	LuggageCarriageEnumerationNoBaggageStorage LuggageCarriageEnumeration = "noBaggageStorage"
	// LuggageCarriageEnumerationBaggageStorage represents baggageStorage
	LuggageCarriageEnumerationBaggageStorage LuggageCarriageEnumeration = "baggageStorage"
	// LuggageCarriageEnumerationLuggageRacks represents luggageRacks
	LuggageCarriageEnumerationLuggageRacks LuggageCarriageEnumeration = "luggageRacks"
	// LuggageCarriageEnumerationSkiRacks represents skiRacks
	LuggageCarriageEnumerationSkiRacks LuggageCarriageEnumeration = "skiRacks"
	// LuggageCarriageEnumerationSkiRacksOnRear represents skiRacksOnRear
	LuggageCarriageEnumerationSkiRacksOnRear LuggageCarriageEnumeration = "skiRacksOnRear"
	// LuggageCarriageEnumerationExtraLargeLuggageRacks represents extraLargeLuggageRacks
	LuggageCarriageEnumerationExtraLargeLuggageRacks LuggageCarriageEnumeration = "extraLargeLuggageRacks"
	// LuggageCarriageEnumerationBaggageVan represents baggageVan
	LuggageCarriageEnumerationBaggageVan LuggageCarriageEnumeration = "baggageVan"
	// LuggageCarriageEnumerationNoCycles represents noCycles
	LuggageCarriageEnumerationNoCycles LuggageCarriageEnumeration = "noCycles"
	// LuggageCarriageEnumerationCyclesAllowed represents cyclesAllowed
	LuggageCarriageEnumerationCyclesAllowed LuggageCarriageEnumeration = "cyclesAllowed"
	// LuggageCarriageEnumerationCyclesAllowedInVan represents cyclesAllowedInVan
	LuggageCarriageEnumerationCyclesAllowedInVan LuggageCarriageEnumeration = "cyclesAllowedInVan"
	// LuggageCarriageEnumerationCyclesAllowedInCarriage represents cyclesAllowedInCarriage
	LuggageCarriageEnumerationCyclesAllowedInCarriage LuggageCarriageEnumeration = "cyclesAllowedInCarriage"
	// LuggageCarriageEnumerationCyclesAllowedWithReservation represents cyclesAllowedWithReservation
	LuggageCarriageEnumerationCyclesAllowedWithReservation LuggageCarriageEnumeration = "cyclesAllowedWithReservation"
	// LuggageCarriageEnumerationPushchairsAllowed represents pushchairsAllowed
	LuggageCarriageEnumerationPushchairsAllowed LuggageCarriageEnumeration = "pushchairsAllowed"
	// LuggageCarriageEnumerationVehicleTransport represents vehicleTransport
	LuggageCarriageEnumerationVehicleTransport LuggageCarriageEnumeration = "vehicleTransport"
)

// LuggageLockerFacilityEnumeration represents the LuggageLockerFacilityEnumeration enumeration
// Allowed values for Luggage Locker Facility.
type LuggageLockerFacilityEnumeration string

const (
	// LuggageLockerFacilityEnumerationOther represents other
	LuggageLockerFacilityEnumerationOther LuggageLockerFacilityEnumeration = "other"
	// LuggageLockerFacilityEnumerationLockers represents lockers
	// pti23_17
	LuggageLockerFacilityEnumerationLockers LuggageLockerFacilityEnumeration = "lockers"
	// LuggageLockerFacilityEnumerationOversizeLockers represents oversizeLockers
	LuggageLockerFacilityEnumerationOversizeLockers LuggageLockerFacilityEnumeration = "oversizeLockers"
	// LuggageLockerFacilityEnumerationLeftLuggageCounter represents leftLuggageCounter
	LuggageLockerFacilityEnumerationLeftLuggageCounter LuggageLockerFacilityEnumeration = "leftLuggageCounter"
	// LuggageLockerFacilityEnumerationBikeRack represents bikeRack
	LuggageLockerFacilityEnumerationBikeRack LuggageLockerFacilityEnumeration = "bikeRack"
	// LuggageLockerFacilityEnumerationCloakroom represents cloakroom
	LuggageLockerFacilityEnumerationCloakroom LuggageLockerFacilityEnumeration = "cloakroom"
)

// LuggageServiceFacilityEnumeration represents the LuggageServiceFacilityEnumeration enumeration
// Allowed values for Luggage Service Facility.
type LuggageServiceFacilityEnumeration string

const (
	// LuggageServiceFacilityEnumerationOther represents other
	LuggageServiceFacilityEnumerationOther LuggageServiceFacilityEnumeration = "other"
	// LuggageServiceFacilityEnumerationLeftLuggage represents leftLuggage
	LuggageServiceFacilityEnumerationLeftLuggage LuggageServiceFacilityEnumeration = "leftLuggage"
	// LuggageServiceFacilityEnumerationPorterage represents porterage
	LuggageServiceFacilityEnumerationPorterage LuggageServiceFacilityEnumeration = "porterage"
	// LuggageServiceFacilityEnumerationFreeTrolleys represents freeTrolleys
	LuggageServiceFacilityEnumerationFreeTrolleys LuggageServiceFacilityEnumeration = "freeTrolleys"
	// LuggageServiceFacilityEnumerationPaidTrolleys represents paidTrolleys
	LuggageServiceFacilityEnumerationPaidTrolleys LuggageServiceFacilityEnumeration = "paidTrolleys"
	// LuggageServiceFacilityEnumerationCollectAndDeliverToStation represents collectAndDeliverToStation
	LuggageServiceFacilityEnumerationCollectAndDeliverToStation LuggageServiceFacilityEnumeration = "collectAndDeliverToStation"
	// LuggageServiceFacilityEnumerationBaggageCheckInCheckOut represents baggageCheckInCheckOut
	LuggageServiceFacilityEnumerationBaggageCheckInCheckOut LuggageServiceFacilityEnumeration = "baggageCheckInCheckOut"
)

// MeetingPointEnumeration represents the MeetingPointEnumeration enumeration
// Allowed values for MEETING POINT Facility.
type MeetingPointEnumeration string

const (
	// MeetingPointEnumerationMeetingPoint represents meetingPoint
	MeetingPointEnumerationMeetingPoint MeetingPointEnumeration = "meetingPoint"
	// MeetingPointEnumerationGroupMeeting represents groupMeeting
	MeetingPointEnumerationGroupMeeting MeetingPointEnumeration = "groupMeeting"
	// MeetingPointEnumerationSchoolMeetingPoint represents schoolMeetingPoint
	MeetingPointEnumerationSchoolMeetingPoint MeetingPointEnumeration = "schoolMeetingPoint"
	// MeetingPointEnumerationOther represents other
	MeetingPointEnumerationOther MeetingPointEnumeration = "other"
)

// MoneyFacilityEnumeration represents the MoneyFacilityEnumeration enumeration
// Allowed values for Money Facility.
type MoneyFacilityEnumeration string

const (
	// MoneyFacilityEnumerationOther represents other
	MoneyFacilityEnumerationOther MoneyFacilityEnumeration = "other"
	// MoneyFacilityEnumerationCashMachine represents cashMachine
	MoneyFacilityEnumerationCashMachine MoneyFacilityEnumeration = "cashMachine"
	// MoneyFacilityEnumerationBank represents bank
	MoneyFacilityEnumerationBank MoneyFacilityEnumeration = "bank"
	// MoneyFacilityEnumerationInsurance represents insurance
	MoneyFacilityEnumerationInsurance MoneyFacilityEnumeration = "insurance"
	// MoneyFacilityEnumerationBureauDeChange represents bureauDeChange
	MoneyFacilityEnumerationBureauDeChange MoneyFacilityEnumeration = "bureauDeChange"
)

// MealFacilityEnumeration represents the MealFacilityEnumeration enumeration
// Allowed values for Meal Facility.
type MealFacilityEnumeration string

const (
	// MealFacilityEnumerationBreakfast represents breakfast
	MealFacilityEnumerationBreakfast MealFacilityEnumeration = "breakfast"
	// MealFacilityEnumerationLunch represents lunch
	MealFacilityEnumerationLunch MealFacilityEnumeration = "lunch"
	// MealFacilityEnumerationDinner represents dinner
	MealFacilityEnumerationDinner MealFacilityEnumeration = "dinner"
	// MealFacilityEnumerationSnack represents snack
	MealFacilityEnumerationSnack MealFacilityEnumeration = "snack"
	// MealFacilityEnumerationDrinks represents drinks
	MealFacilityEnumerationDrinks MealFacilityEnumeration = "drinks"
)

// NuisanceFacilityEnumeration represents the NuisanceFacilityEnumeration enumeration
// Allowed values for Nuisance Facility: TPEG pti_table 23.
type NuisanceFacilityEnumeration string

const (
	// NuisanceFacilityEnumerationUnknown represents unknown
	NuisanceFacilityEnumerationUnknown NuisanceFacilityEnumeration = "unknown"
	// NuisanceFacilityEnumerationOther represents other
	NuisanceFacilityEnumerationOther NuisanceFacilityEnumeration = "other"
	// NuisanceFacilityEnumerationSmoking represents smoking
	NuisanceFacilityEnumerationSmoking NuisanceFacilityEnumeration = "smoking"
	// NuisanceFacilityEnumerationNoSmoking represents noSmoking
	NuisanceFacilityEnumerationNoSmoking NuisanceFacilityEnumeration = "noSmoking"
	// NuisanceFacilityEnumerationFamilyArea represents familyArea
	NuisanceFacilityEnumerationFamilyArea NuisanceFacilityEnumeration = "familyArea"
	// NuisanceFacilityEnumerationChildfreeArea represents childfreeArea
	NuisanceFacilityEnumerationChildfreeArea NuisanceFacilityEnumeration = "childfreeArea"
	// NuisanceFacilityEnumerationAnimalsAllowed represents animalsAllowed
	NuisanceFacilityEnumerationAnimalsAllowed NuisanceFacilityEnumeration = "animalsAllowed"
	// NuisanceFacilityEnumerationNoAnimals represents noAnimals
	NuisanceFacilityEnumerationNoAnimals NuisanceFacilityEnumeration = "noAnimals"
	// NuisanceFacilityEnumerationBreastfeedingFriendly represents breastfeedingFriendly
	NuisanceFacilityEnumerationBreastfeedingFriendly NuisanceFacilityEnumeration = "breastfeedingFriendly"
	// NuisanceFacilityEnumerationMobilePhoneUseZone represents mobilePhoneUseZone
	NuisanceFacilityEnumerationMobilePhoneUseZone NuisanceFacilityEnumeration = "mobilePhoneUseZone"
	// NuisanceFacilityEnumerationMobilePhoneFreeZone represents mobilePhoneFreeZone
	NuisanceFacilityEnumerationMobilePhoneFreeZone NuisanceFacilityEnumeration = "mobilePhoneFreeZone"
)

// ParkingFacilityEnumeration represents the ParkingFacilityEnumeration enumeration
// Allowed values for Parking Facility.
type ParkingFacilityEnumeration string

const (
	// ParkingFacilityEnumerationUnknown represents unknown
	ParkingFacilityEnumerationUnknown ParkingFacilityEnumeration = "unknown"
	// ParkingFacilityEnumerationCarPark represents carPark
	ParkingFacilityEnumerationCarPark ParkingFacilityEnumeration = "carPark"
	// ParkingFacilityEnumerationParkAndRidePark represents parkAndRidePark
	ParkingFacilityEnumerationParkAndRidePark ParkingFacilityEnumeration = "parkAndRidePark"
	// ParkingFacilityEnumerationMotorcyclePark represents motorcyclePark
	ParkingFacilityEnumerationMotorcyclePark ParkingFacilityEnumeration = "motorcyclePark"
	// ParkingFacilityEnumerationCyclePark represents cyclePark
	ParkingFacilityEnumerationCyclePark ParkingFacilityEnumeration = "cyclePark"
	// ParkingFacilityEnumerationRentalCarPark represents rentalCarPark
	ParkingFacilityEnumerationRentalCarPark ParkingFacilityEnumeration = "rentalCarPark"
	// ParkingFacilityEnumerationCoachPark represents coachPark
	ParkingFacilityEnumerationCoachPark ParkingFacilityEnumeration = "coachPark"
)

// CarServiceFacilityEnumeration represents the CarServiceFacilityEnumeration enumeration
// Allowed values for Car Service Facility.
type CarServiceFacilityEnumeration string

const (
	// CarServiceFacilityEnumerationUnknown represents unknown
	CarServiceFacilityEnumerationUnknown CarServiceFacilityEnumeration = "unknown"
	// CarServiceFacilityEnumerationValetParking represents valetParking
	CarServiceFacilityEnumerationValetParking CarServiceFacilityEnumeration = "valetParking"
	// CarServiceFacilityEnumerationCarWash represents carWash
	CarServiceFacilityEnumerationCarWash CarServiceFacilityEnumeration = "carWash"
	// CarServiceFacilityEnumerationValetCarWash represents valetCarWash
	CarServiceFacilityEnumerationValetCarWash CarServiceFacilityEnumeration = "valetCarWash"
	// CarServiceFacilityEnumerationCarValetClean represents carValetClean
	CarServiceFacilityEnumerationCarValetClean CarServiceFacilityEnumeration = "carValetClean"
	// CarServiceFacilityEnumerationOilChange represents oilChange
	CarServiceFacilityEnumerationOilChange CarServiceFacilityEnumeration = "oilChange"
	// CarServiceFacilityEnumerationEngineWarming represents engineWarming
	CarServiceFacilityEnumerationEngineWarming CarServiceFacilityEnumeration = "engineWarming"
	// CarServiceFacilityEnumerationPetrol represents petrol
	CarServiceFacilityEnumerationPetrol CarServiceFacilityEnumeration = "petrol"
	// CarServiceFacilityEnumerationBatteryCare represents batteryCare
	CarServiceFacilityEnumerationBatteryCare CarServiceFacilityEnumeration = "batteryCare"
	// CarServiceFacilityEnumerationRecharging represents recharging
	CarServiceFacilityEnumerationRecharging CarServiceFacilityEnumeration = "recharging"
	// CarServiceFacilityEnumerationTyreCheck represents tyreCheck
	CarServiceFacilityEnumerationTyreCheck CarServiceFacilityEnumeration = "tyreCheck"
	// CarServiceFacilityEnumerationOther represents other
	CarServiceFacilityEnumerationOther CarServiceFacilityEnumeration = "other"
)

// MedicalFacilityEnumeration represents the MedicalFacilityEnumeration enumeration
// Allowed values for Medical  Service Facility.
type MedicalFacilityEnumeration string

const (
	// MedicalFacilityEnumerationUnknown represents unknown
	MedicalFacilityEnumerationUnknown MedicalFacilityEnumeration = "unknown"
	// MedicalFacilityEnumerationDefibrillator represents defibrillator
	MedicalFacilityEnumerationDefibrillator MedicalFacilityEnumeration = "defibrillator"
	// MedicalFacilityEnumerationAlcoholTest represents alcoholTest
	MedicalFacilityEnumerationAlcoholTest MedicalFacilityEnumeration = "alcoholTest"
)

// PassengerCommsFacilityEnumeration represents the PassengerCommsFacilityEnumeration enumeration
// Allowed values for PASSENGER COMMUNICATIONS FACILITY.
type PassengerCommsFacilityEnumeration string

const (
	// PassengerCommsFacilityEnumerationUnknown represents unknown
	PassengerCommsFacilityEnumerationUnknown PassengerCommsFacilityEnumeration = "unknown"
	// PassengerCommsFacilityEnumerationFreeWifi represents freeWifi
	PassengerCommsFacilityEnumerationFreeWifi PassengerCommsFacilityEnumeration = "freeWifi"
	// PassengerCommsFacilityEnumerationPublicWifi represents publicWifi
	PassengerCommsFacilityEnumerationPublicWifi PassengerCommsFacilityEnumeration = "publicWifi"
	// PassengerCommsFacilityEnumerationPowerSupplySockets represents powerSupplySockets
	PassengerCommsFacilityEnumerationPowerSupplySockets PassengerCommsFacilityEnumeration = "powerSupplySockets"
	// PassengerCommsFacilityEnumerationTelephone represents telephone
	// pti23_21
	PassengerCommsFacilityEnumerationTelephone PassengerCommsFacilityEnumeration = "telephone"
	// PassengerCommsFacilityEnumerationAudioEntertainment represents audioEntertainment
	// pti23_14
	PassengerCommsFacilityEnumerationAudioEntertainment PassengerCommsFacilityEnumeration = "audioEntertainment"
	// PassengerCommsFacilityEnumerationVideoEntertainment represents videoEntertainment
	// pti23_15
	PassengerCommsFacilityEnumerationVideoEntertainment PassengerCommsFacilityEnumeration = "videoEntertainment"
	// PassengerCommsFacilityEnumerationBusinessServices represents businessServices
	// pti23_25
	PassengerCommsFacilityEnumerationBusinessServices PassengerCommsFacilityEnumeration = "businessServices"
	// PassengerCommsFacilityEnumerationInternet represents internet
	PassengerCommsFacilityEnumerationInternet PassengerCommsFacilityEnumeration = "internet"
	// PassengerCommsFacilityEnumerationPostOffice represents postOffice
	PassengerCommsFacilityEnumerationPostOffice PassengerCommsFacilityEnumeration = "postOffice"
	// PassengerCommsFacilityEnumerationPostBox represents postBox
	PassengerCommsFacilityEnumerationPostBox PassengerCommsFacilityEnumeration = "postBox"
)

// PassengerInformationEquipmentEnumeration represents the PassengerInformationEquipmentEnumeration enumeration
// Allowed values for Passenger Information Equipment.
type PassengerInformationEquipmentEnumeration string

const (
	// PassengerInformationEquipmentEnumerationTimetablePoster represents timetablePoster
	PassengerInformationEquipmentEnumerationTimetablePoster PassengerInformationEquipmentEnumeration = "timetablePoster"
	// PassengerInformationEquipmentEnumerationFareInformation represents fareInformation
	PassengerInformationEquipmentEnumerationFareInformation PassengerInformationEquipmentEnumeration = "fareInformation"
	// PassengerInformationEquipmentEnumerationLineNetworkPlan represents lineNetworkPlan
	PassengerInformationEquipmentEnumerationLineNetworkPlan PassengerInformationEquipmentEnumeration = "lineNetworkPlan"
	// PassengerInformationEquipmentEnumerationLineTimetable represents lineTimetable
	PassengerInformationEquipmentEnumerationLineTimetable PassengerInformationEquipmentEnumeration = "lineTimetable"
	// PassengerInformationEquipmentEnumerationStopTimetable represents stopTimetable
	PassengerInformationEquipmentEnumerationStopTimetable PassengerInformationEquipmentEnumeration = "stopTimetable"
	// PassengerInformationEquipmentEnumerationJourneyPlanning represents journeyPlanning
	PassengerInformationEquipmentEnumerationJourneyPlanning PassengerInformationEquipmentEnumeration = "journeyPlanning"
	// PassengerInformationEquipmentEnumerationInteractiveKiosk represents interactiveKiosk
	PassengerInformationEquipmentEnumerationInteractiveKiosk PassengerInformationEquipmentEnumeration = "interactiveKiosk"
	// PassengerInformationEquipmentEnumerationInformationDesk represents informationDesk
	PassengerInformationEquipmentEnumerationInformationDesk PassengerInformationEquipmentEnumeration = "informationDesk"
	// PassengerInformationEquipmentEnumerationNetworkStatus represents networkStatus
	PassengerInformationEquipmentEnumerationNetworkStatus PassengerInformationEquipmentEnumeration = "networkStatus"
	// PassengerInformationEquipmentEnumerationRealTimeDisruptions represents realTimeDisruptions
	PassengerInformationEquipmentEnumerationRealTimeDisruptions PassengerInformationEquipmentEnumeration = "realTimeDisruptions"
	// PassengerInformationEquipmentEnumerationRealTimeDepartures represents realTimeDepartures
	PassengerInformationEquipmentEnumerationRealTimeDepartures PassengerInformationEquipmentEnumeration = "realTimeDepartures"
	// PassengerInformationEquipmentEnumerationStationMap represents stationMap
	PassengerInformationEquipmentEnumerationStationMap PassengerInformationEquipmentEnumeration = "stationMap"
	// PassengerInformationEquipmentEnumerationAcousticStationMap represents acousticStationMap
	PassengerInformationEquipmentEnumerationAcousticStationMap PassengerInformationEquipmentEnumeration = "acousticStationMap"
	// PassengerInformationEquipmentEnumerationTactileStationMap represents tactileStationMap
	PassengerInformationEquipmentEnumerationTactileStationMap PassengerInformationEquipmentEnumeration = "tactileStationMap"
	// PassengerInformationEquipmentEnumerationOther represents other
	PassengerInformationEquipmentEnumerationOther PassengerInformationEquipmentEnumeration = "other"
)

// CateringFacilityEnumeration represents the CateringFacilityEnumeration enumeration
// Allowed values for Catering Facility: TPEG pti_table 23.
type CateringFacilityEnumeration string

const (
	// CateringFacilityEnumerationBar represents bar
	// pti23_18
	CateringFacilityEnumerationBar CateringFacilityEnumeration = "bar"
	// CateringFacilityEnumerationBistro represents bistro
	// pti23_26
	CateringFacilityEnumerationBistro CateringFacilityEnumeration = "bistro"
	// CateringFacilityEnumerationBuffet represents buffet
	CateringFacilityEnumerationBuffet CateringFacilityEnumeration = "buffet"
	// CateringFacilityEnumerationNoFoodAvailable represents noFoodAvailable
	// pti23_19
	CateringFacilityEnumerationNoFoodAvailable CateringFacilityEnumeration = "noFoodAvailable"
	// CateringFacilityEnumerationNoBeveragesAvailable represents noBeveragesAvailable
	// pti23_20
	CateringFacilityEnumerationNoBeveragesAvailable CateringFacilityEnumeration = "noBeveragesAvailable"
	// CateringFacilityEnumerationRestaurant represents restaurant
	// pti23_1
	CateringFacilityEnumerationRestaurant CateringFacilityEnumeration = "restaurant"
	// CateringFacilityEnumerationFirstClassRestaurant represents firstClassRestaurant
	CateringFacilityEnumerationFirstClassRestaurant CateringFacilityEnumeration = "firstClassRestaurant"
	// CateringFacilityEnumerationTrolley represents trolley
	// pti23_23
	CateringFacilityEnumerationTrolley CateringFacilityEnumeration = "trolley"
	// CateringFacilityEnumerationCoffeeShop represents coffeeShop
	CateringFacilityEnumerationCoffeeShop CateringFacilityEnumeration = "coffeeShop"
	// CateringFacilityEnumerationHotFoodService represents hotFoodService
	CateringFacilityEnumerationHotFoodService CateringFacilityEnumeration = "hotFoodService"
	// CateringFacilityEnumerationSelfService represents selfService
	CateringFacilityEnumerationSelfService CateringFacilityEnumeration = "selfService"
	// CateringFacilityEnumerationSnacks represents snacks
	// pti23_2
	CateringFacilityEnumerationSnacks CateringFacilityEnumeration = "snacks"
	// CateringFacilityEnumerationFoodVendingMachine represents foodVendingMachine
	CateringFacilityEnumerationFoodVendingMachine CateringFacilityEnumeration = "foodVendingMachine"
	// CateringFacilityEnumerationBeverageVendingMachine represents beverageVendingMachine
	CateringFacilityEnumerationBeverageVendingMachine CateringFacilityEnumeration = "beverageVendingMachine"
	// CateringFacilityEnumerationMiniBar represents miniBar
	// pti23_18_1
	CateringFacilityEnumerationMiniBar CateringFacilityEnumeration = "miniBar"
	// CateringFacilityEnumerationBreakfastInCar represents breakfastInCar
	CateringFacilityEnumerationBreakfastInCar CateringFacilityEnumeration = "breakfastInCar"
	// CateringFacilityEnumerationMealAtSeat represents mealAtSeat
	CateringFacilityEnumerationMealAtSeat CateringFacilityEnumeration = "mealAtSeat"
	// CateringFacilityEnumerationOther represents other
	CateringFacilityEnumerationOther CateringFacilityEnumeration = "other"
	// CateringFacilityEnumerationUnknown represents unknown
	CateringFacilityEnumerationUnknown CateringFacilityEnumeration = "unknown"
)

// ReservedSpaceFacilityEnumeration represents the ReservedSpaceFacilityEnumeration enumeration
// Allowed values for Reserved Space Facility.
type ReservedSpaceFacilityEnumeration string

const (
	// ReservedSpaceFacilityEnumerationUnknown represents unknown
	ReservedSpaceFacilityEnumerationUnknown ReservedSpaceFacilityEnumeration = "unknown"
	// ReservedSpaceFacilityEnumerationLounge represents lounge
	ReservedSpaceFacilityEnumerationLounge ReservedSpaceFacilityEnumeration = "lounge"
	// ReservedSpaceFacilityEnumerationHall represents hall
	ReservedSpaceFacilityEnumerationHall ReservedSpaceFacilityEnumeration = "hall"
	// ReservedSpaceFacilityEnumerationMeetingPoint represents meetingPoint
	ReservedSpaceFacilityEnumerationMeetingPoint ReservedSpaceFacilityEnumeration = "meetingPoint"
	// ReservedSpaceFacilityEnumerationGroupPoint represents groupPoint
	ReservedSpaceFacilityEnumerationGroupPoint ReservedSpaceFacilityEnumeration = "groupPoint"
	// ReservedSpaceFacilityEnumerationReception represents reception
	ReservedSpaceFacilityEnumerationReception ReservedSpaceFacilityEnumeration = "reception"
	// ReservedSpaceFacilityEnumerationShelter represents shelter
	ReservedSpaceFacilityEnumerationShelter ReservedSpaceFacilityEnumeration = "shelter"
	// ReservedSpaceFacilityEnumerationSeats represents seats
	ReservedSpaceFacilityEnumerationSeats ReservedSpaceFacilityEnumeration = "seats"
)

// RetailFacilityEnumeration represents the RetailFacilityEnumeration enumeration
// Allowed values for Retail Facility.
type RetailFacilityEnumeration string

const (
	// RetailFacilityEnumerationUnknown represents unknown
	RetailFacilityEnumerationUnknown RetailFacilityEnumeration = "unknown"
	// RetailFacilityEnumerationFood represents food
	RetailFacilityEnumerationFood RetailFacilityEnumeration = "food"
	// RetailFacilityEnumerationNewspaperTobacco represents newspaperTobacco
	RetailFacilityEnumerationNewspaperTobacco RetailFacilityEnumeration = "newspaperTobacco"
	// RetailFacilityEnumerationRecreationTravel represents recreationTravel
	RetailFacilityEnumerationRecreationTravel RetailFacilityEnumeration = "recreationTravel"
	// RetailFacilityEnumerationHygieneHealthBeauty represents hygieneHealthBeauty
	RetailFacilityEnumerationHygieneHealthBeauty RetailFacilityEnumeration = "hygieneHealthBeauty"
	// RetailFacilityEnumerationFashionAccessories represents fashionAccessories
	RetailFacilityEnumerationFashionAccessories RetailFacilityEnumeration = "fashionAccessories"
	// RetailFacilityEnumerationBankFinanceInsurance represents bankFinanceInsurance
	RetailFacilityEnumerationBankFinanceInsurance RetailFacilityEnumeration = "bankFinanceInsurance"
	// RetailFacilityEnumerationCashMachine represents cashMachine
	RetailFacilityEnumerationCashMachine RetailFacilityEnumeration = "cashMachine"
	// RetailFacilityEnumerationCurrencyExchange represents currencyExchange
	RetailFacilityEnumerationCurrencyExchange RetailFacilityEnumeration = "currencyExchange"
	// RetailFacilityEnumerationTourismService represents tourismService
	RetailFacilityEnumerationTourismService RetailFacilityEnumeration = "tourismService"
	// RetailFacilityEnumerationPhotoBooth represents photoBooth
	RetailFacilityEnumerationPhotoBooth RetailFacilityEnumeration = "photoBooth"
)

// StaffingEnumeration represents the StaffingEnumeration enumeration
// Allowed values for Staffing.
type StaffingEnumeration string

const (
	// StaffingEnumerationFullTime represents fullTime
	StaffingEnumerationFullTime StaffingEnumeration = "fullTime"
	// StaffingEnumerationPartTime represents partTime
	StaffingEnumerationPartTime StaffingEnumeration = "partTime"
	// StaffingEnumerationUnmanned represents unmanned
	StaffingEnumerationUnmanned StaffingEnumeration = "unmanned"
)

// TicketingFacilityEnumeration represents the TicketingFacilityEnumeration enumeration
// Allowed values for Ticketing Facility.
type TicketingFacilityEnumeration string

const (
	// TicketingFacilityEnumerationUnknown represents unknown
	TicketingFacilityEnumerationUnknown TicketingFacilityEnumeration = "unknown"
	// TicketingFacilityEnumerationTicketMachines represents ticketMachines
	TicketingFacilityEnumerationTicketMachines TicketingFacilityEnumeration = "ticketMachines"
	// TicketingFacilityEnumerationTicketOffice represents ticketOffice
	TicketingFacilityEnumerationTicketOffice TicketingFacilityEnumeration = "ticketOffice"
	// TicketingFacilityEnumerationTicketOnDemandMachines represents ticketOnDemandMachines
	TicketingFacilityEnumerationTicketOnDemandMachines TicketingFacilityEnumeration = "ticketOnDemandMachines"
	// TicketingFacilityEnumerationMobileTicketing represents mobileTicketing
	TicketingFacilityEnumerationMobileTicketing TicketingFacilityEnumeration = "mobileTicketing"
)

// ScopeOfTicketEnumeration represents the ScopeOfTicketEnumeration enumeration
// Allowed values for Scope of Ticket.
type ScopeOfTicketEnumeration string

const (
	// ScopeOfTicketEnumerationUnknown represents unknown
	ScopeOfTicketEnumerationUnknown ScopeOfTicketEnumeration = "unknown"
	// ScopeOfTicketEnumerationLocalTicket represents localTicket
	ScopeOfTicketEnumerationLocalTicket ScopeOfTicketEnumeration = "localTicket"
	// ScopeOfTicketEnumerationNationalTicket represents nationalTicket
	ScopeOfTicketEnumerationNationalTicket ScopeOfTicketEnumeration = "nationalTicket"
	// ScopeOfTicketEnumerationInternationalTicket represents internationalTicket
	ScopeOfTicketEnumerationInternationalTicket ScopeOfTicketEnumeration = "internationalTicket"
)

// FacilityRefStructure represents the FacilityRefStructure element
// Type for a reference to a FACILITY.
type FacilityRefStructure struct {
	VersionOfObjectRefStructure
}

// FacilitySetRefStructure represents the FacilitySetRefStructure element
// Type for a reference to a FACILITY SET.
type FacilitySetRefStructure struct {
	VersionOfObjectRefStructure
}

// SiteFacilitySetRefStructure represents the SiteFacilitySetRefStructure element
// Type for a reference to a SITE FACILITY SET.
type SiteFacilitySetRefStructure struct {
	FacilitySetRefStructure
}

// ServiceFacilitySetRefStructure represents the ServiceFacilitySetRefStructure element
// Type for a reference to a SERVICE FACILITY SET.
type ServiceFacilitySetRefStructure struct {
	FacilitySetRefStructure
}

// AccommodationRefStructure represents the AccommodationRefStructure element
// Type for a reference to a ACCOMMODATION.
type AccommodationRefStructure struct {
	VersionOfObjectRefStructure
}

// OnboardStayRefStructure represents the OnboardStayRefStructure element
// Type for a reference to a ONBOARD STAY.
type OnboardStayRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfFacilityRefsRelStructure represents the typeOfFacilityRefs_RelStructure element
// Type for a list of TYPE OF FACILITY.
type TypeOfFacilityRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfFacilityRef []TypeOfFacilityRef `xml:"TypeOfFacilityRef" json:"TypeOfFacilityRef"`
}

// TypeOfFacilityRefStructure represents the TypeOfFacilityRefStructure element
// Type for a reference to a TYPE OF FACILITY.
type TypeOfFacilityRefStructure struct {
	TypeOfValueRefStructure
}

// FacilityRef represents the FacilityRef element
// Reference to a FACILITY.
type FacilityRef struct {
	FacilityRefStructure
}

// FacilitySetRef represents the FacilitySetRef element
// Reference to a FACILITY SET.
type FacilitySetRef struct {
	FacilitySetRefStructure
}

// SiteFacilitySetRef represents the SiteFacilitySetRef element
// Reference to a SITE FACILITY SET.
type SiteFacilitySetRef struct {
	SiteFacilitySetRefStructure
}

// ServiceFacilitySetRef represents the ServiceFacilitySetRef element
// Reference to a SERVICE FACILITY SET.
type ServiceFacilitySetRef struct {
	ServiceFacilitySetRefStructure
}

// AccommodationRef represents the AccommodationRef element
// Reference to a ACCOMMODATION.
type AccommodationRef struct {
	AccommodationRefStructure
}

// OnboardStayRef represents the OnboardStayRef element
// Reference to a ONBOARD STAY.
type OnboardStayRef struct {
	OnboardStayRefStructure
}

// TypeOfFacilityRef represents the TypeOfFacilityRef element
// Reference to a TYPE OF FACILITY.
type TypeOfFacilityRef struct {
	TypeOfFacilityRefStructure
}

// FareClassEnumeration represents the FareClassEnumeration enumeration
// Values for Fare Class Facility.
type FareClassEnumeration string

const (
	// FareClassEnumerationUnknown represents unknown
	// pti23_0
	FareClassEnumerationUnknown FareClassEnumeration = "unknown"
	// FareClassEnumerationFirstClass represents firstClass
	// pti23_6
	FareClassEnumerationFirstClass FareClassEnumeration = "firstClass"
	// FareClassEnumerationSecondClass represents secondClass
	// pti23_7
	FareClassEnumerationSecondClass FareClassEnumeration = "secondClass"
	// FareClassEnumerationThirdClass represents thirdClass
	// pti23_8
	FareClassEnumerationThirdClass FareClassEnumeration = "thirdClass"
	// FareClassEnumerationPreferente represents preferente
	FareClassEnumerationPreferente FareClassEnumeration = "preferente"
	// FareClassEnumerationPremiumClass represents premiumClass
	// pti23_6_1
	FareClassEnumerationPremiumClass FareClassEnumeration = "premiumClass"
	// FareClassEnumerationBusinessClass represents businessClass
	// Business Class - pti23_10
	FareClassEnumerationBusinessClass FareClassEnumeration = "businessClass"
	// FareClassEnumerationStandardClass represents standardClass
	// Standard class Add pti23_7
	FareClassEnumerationStandardClass FareClassEnumeration = "standardClass"
	// FareClassEnumerationTurista represents turista
	FareClassEnumerationTurista FareClassEnumeration = "turista"
	// FareClassEnumerationEconomyClass represents economyClass
	// pti23_9
	FareClassEnumerationEconomyClass FareClassEnumeration = "economyClass"
	// FareClassEnumerationAny represents any
	FareClassEnumerationAny FareClassEnumeration = "any"
)

// ReservationEnumeration represents the ReservationEnumeration enumeration
// Allowed values for Reservation. UIC 7037 Code list.
type ReservationEnumeration string

const (
	// ReservationEnumerationReservationsCompulsory represents reservationsCompulsory
	ReservationEnumerationReservationsCompulsory ReservationEnumeration = "reservationsCompulsory"
	// ReservationEnumerationReservationsCompulsoryForGroups represents reservationsCompulsoryForGroups
	ReservationEnumerationReservationsCompulsoryForGroups ReservationEnumeration = "reservationsCompulsoryForGroups"
	// ReservationEnumerationReservationsCompulsoryForFirstClass represents reservationsCompulsoryForFirstClass
	ReservationEnumerationReservationsCompulsoryForFirstClass ReservationEnumeration = "reservationsCompulsoryForFirstClass"
	// ReservationEnumerationReservationsCompulsoryFromOriginStation represents reservationsCompulsoryFromOriginStation
	ReservationEnumerationReservationsCompulsoryFromOriginStation ReservationEnumeration = "reservationsCompulsoryFromOriginStation"
	// ReservationEnumerationReservationsRecommended represents reservationsRecommended
	ReservationEnumerationReservationsRecommended ReservationEnumeration = "reservationsRecommended"
	// ReservationEnumerationReservationsPossible represents reservationsPossible
	ReservationEnumerationReservationsPossible ReservationEnumeration = "reservationsPossible"
	// ReservationEnumerationReservationsPossibleOnlyInFirstClass represents reservationsPossibleOnlyInFirstClass
	ReservationEnumerationReservationsPossibleOnlyInFirstClass ReservationEnumeration = "reservationsPossibleOnlyInFirstClass"
	// ReservationEnumerationReservationsPossibleOnlyInSecondClass represents reservationsPossibleOnlyInSecondClass
	ReservationEnumerationReservationsPossibleOnlyInSecondClass ReservationEnumeration = "reservationsPossibleOnlyInSecondClass"
	// ReservationEnumerationReservationsPossibleForCertainClasses represents reservationsPossibleForCertainClasses
	ReservationEnumerationReservationsPossibleForCertainClasses ReservationEnumeration = "reservationsPossibleForCertainClasses"
	// ReservationEnumerationGroupBookingRestricted represents groupBookingRestricted
	ReservationEnumerationGroupBookingRestricted ReservationEnumeration = "groupBookingRestricted"
	// ReservationEnumerationNoGroupsAllowed represents noGroupsAllowed
	ReservationEnumerationNoGroupsAllowed ReservationEnumeration = "noGroupsAllowed"
	// ReservationEnumerationNoReservationsPossible represents noReservationsPossible
	ReservationEnumerationNoReservationsPossible ReservationEnumeration = "noReservationsPossible"
	// ReservationEnumerationWheelchairOnlyReservations represents wheelchairOnlyReservations
	ReservationEnumerationWheelchairOnlyReservations ReservationEnumeration = "wheelchairOnlyReservations"
	// ReservationEnumerationBicycleReservationsCompulsory represents bicycleReservationsCompulsory
	ReservationEnumerationBicycleReservationsCompulsory ReservationEnumeration = "bicycleReservationsCompulsory"
	// ReservationEnumerationReservationsSupplementCharged represents reservationsSupplementCharged
	ReservationEnumerationReservationsSupplementCharged ReservationEnumeration = "reservationsSupplementCharged"
	// ReservationEnumerationUnknown represents unknown
	ReservationEnumerationUnknown ReservationEnumeration = "unknown"
)

// BookingMethodEnumeration represents the BookingMethodEnumeration enumeration
// Allowed values for Flexible Booking method.
type BookingMethodEnumeration string

const (
	// BookingMethodEnumerationCallDriver represents callDriver
	BookingMethodEnumerationCallDriver BookingMethodEnumeration = "callDriver"
	// BookingMethodEnumerationCallOffice represents callOffice
	BookingMethodEnumerationCallOffice BookingMethodEnumeration = "callOffice"
	// BookingMethodEnumerationOnline represents online
	BookingMethodEnumerationOnline BookingMethodEnumeration = "online"
	// BookingMethodEnumerationOther represents other
	BookingMethodEnumerationOther BookingMethodEnumeration = "other"
	// BookingMethodEnumerationPhoneAtStop represents phoneAtStop
	BookingMethodEnumerationPhoneAtStop BookingMethodEnumeration = "phoneAtStop"
	// BookingMethodEnumerationText represents text
	BookingMethodEnumerationText BookingMethodEnumeration = "text"
	// BookingMethodEnumerationMobileApp represents mobileApp
	BookingMethodEnumerationMobileApp BookingMethodEnumeration = "mobileApp"
	// BookingMethodEnumerationAtOffice represents atOffice
	BookingMethodEnumerationAtOffice BookingMethodEnumeration = "atOffice"
	// BookingMethodEnumerationNone represents none
	BookingMethodEnumerationNone BookingMethodEnumeration = "none"
)

// BookingAccessEnumeration represents the BookingAccessEnumeration enumeration
// Allowed values for Booking Access.
type BookingAccessEnumeration string

const (
	// BookingAccessEnumerationPublic represents public
	BookingAccessEnumerationPublic BookingAccessEnumeration = "public"
	// BookingAccessEnumerationAuthorisedPublic represents authorisedPublic
	BookingAccessEnumerationAuthorisedPublic BookingAccessEnumeration = "authorisedPublic"
	// BookingAccessEnumerationStaff represents staff
	BookingAccessEnumerationStaff BookingAccessEnumeration = "staff"
	// BookingAccessEnumerationOther represents other
	BookingAccessEnumerationOther BookingAccessEnumeration = "other"
)

// PurchaseWhenEnumeration represents the PurchaseWhenEnumeration enumeration
// Allowed values for Purchase when.
type PurchaseWhenEnumeration string

const (
	// PurchaseWhenEnumerationAdvanceOnly represents advanceOnly
	PurchaseWhenEnumerationAdvanceOnly PurchaseWhenEnumeration = "advanceOnly"
	// PurchaseWhenEnumerationUntilPreviousDay represents untilPreviousDay
	PurchaseWhenEnumerationUntilPreviousDay PurchaseWhenEnumeration = "untilPreviousDay"
	// PurchaseWhenEnumerationDayOfTravelOnly represents dayOfTravelOnly
	PurchaseWhenEnumerationDayOfTravelOnly PurchaseWhenEnumeration = "dayOfTravelOnly"
	// PurchaseWhenEnumerationAdvanceAndDayOfTravel represents advanceAndDayOfTravel
	PurchaseWhenEnumerationAdvanceAndDayOfTravel PurchaseWhenEnumeration = "advanceAndDayOfTravel"
	// PurchaseWhenEnumerationTimeOfTravelOnly represents timeOfTravelOnly
	PurchaseWhenEnumerationTimeOfTravelOnly PurchaseWhenEnumeration = "timeOfTravelOnly"
	// PurchaseWhenEnumerationSubscriptionChargeMoment represents subscriptionChargeMoment
	PurchaseWhenEnumerationSubscriptionChargeMoment PurchaseWhenEnumeration = "subscriptionChargeMoment"
	// PurchaseWhenEnumerationOther represents other
	PurchaseWhenEnumerationOther PurchaseWhenEnumeration = "other"
)

// PurchaseMomentEnumeration represents the PurchaseMomentEnumeration enumeration
// Allowed values for Purchase Moment.
type PurchaseMomentEnumeration string

const (
	// PurchaseMomentEnumerationOnReservation represents onReservation
	// Purchase must   be made on reservation in advance of travel.
	PurchaseMomentEnumerationOnReservation PurchaseMomentEnumeration = "onReservation"
	// PurchaseMomentEnumerationInAdvance represents inAdvance
	// Purchase can  be made in advance of travel.
	PurchaseMomentEnumerationInAdvance PurchaseMomentEnumeration = "inAdvance"
	// PurchaseMomentEnumerationInAdvanceOnly represents inAdvanceOnly
	// Purchase can only be made in advance of travel (e.g. for season ticket or advance ticket).
	PurchaseMomentEnumerationInAdvanceOnly PurchaseMomentEnumeration = "inAdvanceOnly"
	// PurchaseMomentEnumerationBeforeBoarding represents beforeBoarding
	// Purchase can   be made before boarding transport vehicle.
	PurchaseMomentEnumerationBeforeBoarding PurchaseMomentEnumeration = "beforeBoarding"
	// PurchaseMomentEnumerationBeforeBoardingOnly represents beforeBoardingOnly
	// Purchase must  be made before boarding transport vehicle.
	PurchaseMomentEnumerationBeforeBoardingOnly PurchaseMomentEnumeration = "beforeBoardingOnly"
	// PurchaseMomentEnumerationOnBoarding represents onBoarding
	// Purchase can   be made on boarding  transport vehicle.
	PurchaseMomentEnumerationOnBoarding PurchaseMomentEnumeration = "onBoarding"
	// PurchaseMomentEnumerationOnBoardingOnly represents onBoardingOnly
	// Purchase can  only be made on boarding  transport vehicle.
	PurchaseMomentEnumerationOnBoardingOnly PurchaseMomentEnumeration = "onBoardingOnly"
	// PurchaseMomentEnumerationAfterBoarding represents afterBoarding
	// Purchase can  be made after boarding  transport vehicle.
	PurchaseMomentEnumerationAfterBoarding PurchaseMomentEnumeration = "afterBoarding"
	// PurchaseMomentEnumerationOnCheckIn represents onCheckIn
	// Purchase can  be made on entering transport system.
	PurchaseMomentEnumerationOnCheckIn PurchaseMomentEnumeration = "onCheckIn"
	// PurchaseMomentEnumerationOnCheckOut represents onCheckOut
	// Purchase can   be made on leaving transport system.
	PurchaseMomentEnumerationOnCheckOut PurchaseMomentEnumeration = "onCheckOut"
	// PurchaseMomentEnumerationSubscriptionOnly represents subscriptionOnly
	// Purchase can  only be made on subscription.
	PurchaseMomentEnumerationSubscriptionOnly PurchaseMomentEnumeration = "subscriptionOnly"
	// PurchaseMomentEnumerationOther represents other
	// Other moment of Purchase
	PurchaseMomentEnumerationOther PurchaseMomentEnumeration = "other"
)

// BookingProcessEnumeration represents the BookingProcessEnumeration enumeration
// Allowed values for Booking Process UIC 7037 Code list.
type BookingProcessEnumeration string

const (
	// BookingProcessEnumerationProductNotAvailable represents productNotAvailable
	// Product is not available.
	BookingProcessEnumerationProductNotAvailable BookingProcessEnumeration = "productNotAvailable"
	// BookingProcessEnumerationProductNotBookable represents productNotBookable
	// Product cannot be booked.
	BookingProcessEnumerationProductNotBookable BookingProcessEnumeration = "productNotBookable"
	// BookingProcessEnumerationBookableThroughInternationalSystem represents bookableThroughInternationalSystem
	// Product can be booked online internationally.
	BookingProcessEnumerationBookableThroughInternationalSystem BookingProcessEnumeration = "bookableThroughInternationalSystem"
	// BookingProcessEnumerationBookableThroughNationalSystem represents bookableThroughNationalSystem
	// Product can be booked online nationally.
	BookingProcessEnumerationBookableThroughNationalSystem BookingProcessEnumeration = "bookableThroughNationalSystem"
	// BookingProcessEnumerationBookableManuallly represents bookableManuallly
	// Product can only be booked by contacting specific authorised retail outlets
	BookingProcessEnumerationBookableManuallly BookingProcessEnumeration = "bookableManuallly"
	// BookingProcessEnumerationOther represents other
	// Other booking process.
	BookingProcessEnumerationOther BookingProcessEnumeration = "other"
)

// GroupBookingEnumeration represents the GroupBookingEnumeration enumeration
// Allowed values for Group Booking.
type GroupBookingEnumeration string

const (
	// GroupBookingEnumerationGroupsAllowed represents groupsAllowed
	GroupBookingEnumerationGroupsAllowed GroupBookingEnumeration = "groupsAllowed"
	// GroupBookingEnumerationGroupsNotAllowed represents groupsNotAllowed
	GroupBookingEnumerationGroupsNotAllowed GroupBookingEnumeration = "groupsNotAllowed"
	// GroupBookingEnumerationGroupsAllowedWithReservation represents groupsAllowedWithReservation
	GroupBookingEnumerationGroupsAllowedWithReservation GroupBookingEnumeration = "groupsAllowedWithReservation"
	// GroupBookingEnumerationGroupBookingsRestricted represents groupBookingsRestricted
	GroupBookingEnumerationGroupBookingsRestricted GroupBookingEnumeration = "groupBookingsRestricted"
	// GroupBookingEnumerationUnknown represents unknown
	GroupBookingEnumerationUnknown GroupBookingEnumeration = "unknown"
)

// CateringServiceEnumeration represents the CateringServiceEnumeration enumeration
// Allowed values for CATERING SERVICEs.
type CateringServiceEnumeration string

const (
	// CateringServiceEnumerationBar represents bar
	CateringServiceEnumerationBar CateringServiceEnumeration = "bar"
	// CateringServiceEnumerationBeverageVendingMachine represents beverageVendingMachine
	CateringServiceEnumerationBeverageVendingMachine CateringServiceEnumeration = "beverageVendingMachine"
	// CateringServiceEnumerationBuffet represents buffet
	CateringServiceEnumerationBuffet CateringServiceEnumeration = "buffet"
	// CateringServiceEnumerationCoffeeShop represents coffeeShop
	CateringServiceEnumerationCoffeeShop CateringServiceEnumeration = "coffeeShop"
	// CateringServiceEnumerationFirstClassRestaurant represents firstClassRestaurant
	CateringServiceEnumerationFirstClassRestaurant CateringServiceEnumeration = "firstClassRestaurant"
	// CateringServiceEnumerationFoodVendingMachine represents foodVendingMachine
	CateringServiceEnumerationFoodVendingMachine CateringServiceEnumeration = "foodVendingMachine"
	// CateringServiceEnumerationHotFoodService represents hotFoodService
	CateringServiceEnumerationHotFoodService CateringServiceEnumeration = "hotFoodService"
	// CateringServiceEnumerationRestaurant represents restaurant
	CateringServiceEnumerationRestaurant CateringServiceEnumeration = "restaurant"
	// CateringServiceEnumerationSnacks represents snacks
	CateringServiceEnumerationSnacks CateringServiceEnumeration = "snacks"
	// CateringServiceEnumerationTrolleyService represents trolleyService
	CateringServiceEnumerationTrolleyService CateringServiceEnumeration = "trolleyService"
	// CateringServiceEnumerationNoBeveragesAvailable represents noBeveragesAvailable
	CateringServiceEnumerationNoBeveragesAvailable CateringServiceEnumeration = "noBeveragesAvailable"
	// CateringServiceEnumerationNoFoodServiceAvailable represents noFoodServiceAvailable
	CateringServiceEnumerationNoFoodServiceAvailable CateringServiceEnumeration = "noFoodServiceAvailable"
	// CateringServiceEnumerationOther represents other
	CateringServiceEnumerationOther CateringServiceEnumeration = "other"
)

// CommunicationServiceEnumeration represents the CommunicationServiceEnumeration enumeration
// Allowed values for Communication Service.
type CommunicationServiceEnumeration string

const (
	// CommunicationServiceEnumerationFreeWifi represents freeWifi
	CommunicationServiceEnumerationFreeWifi CommunicationServiceEnumeration = "freeWifi"
	// CommunicationServiceEnumerationPublicWifi represents publicWifi
	CommunicationServiceEnumerationPublicWifi CommunicationServiceEnumeration = "publicWifi"
	// CommunicationServiceEnumerationPhone represents phone
	CommunicationServiceEnumerationPhone CommunicationServiceEnumeration = "phone"
	// CommunicationServiceEnumerationInternet represents internet
	CommunicationServiceEnumerationInternet CommunicationServiceEnumeration = "internet"
	// CommunicationServiceEnumerationMobileCoverage represents mobileCoverage
	CommunicationServiceEnumerationMobileCoverage CommunicationServiceEnumeration = "mobileCoverage"
	// CommunicationServiceEnumerationVideoEntertainment represents videoEntertainment
	CommunicationServiceEnumerationVideoEntertainment CommunicationServiceEnumeration = "videoEntertainment"
	// CommunicationServiceEnumerationAudioEntertainment represents audioEntertainment
	CommunicationServiceEnumerationAudioEntertainment CommunicationServiceEnumeration = "audioEntertainment"
	// CommunicationServiceEnumerationPostbox represents postbox
	CommunicationServiceEnumerationPostbox CommunicationServiceEnumeration = "postbox"
	// CommunicationServiceEnumerationPostOffice represents postOffice
	CommunicationServiceEnumerationPostOffice CommunicationServiceEnumeration = "postOffice"
	// CommunicationServiceEnumerationBusinessServices represents businessServices
	CommunicationServiceEnumerationBusinessServices CommunicationServiceEnumeration = "businessServices"
)

// GenderLimitationEnumeration represents the GenderLimitationEnumeration enumeration
// Allowed values for GENDER LIMITATION.
type GenderLimitationEnumeration string

const (
	// GenderLimitationEnumerationBoth represents both
	GenderLimitationEnumerationBoth GenderLimitationEnumeration = "both"
	// GenderLimitationEnumerationFemaleOnly represents femaleOnly
	GenderLimitationEnumerationFemaleOnly GenderLimitationEnumeration = "femaleOnly"
	// GenderLimitationEnumerationMaleOnly represents maleOnly
	GenderLimitationEnumerationMaleOnly GenderLimitationEnumeration = "maleOnly"
	// GenderLimitationEnumerationSameSexOnly represents sameSexOnly
	GenderLimitationEnumerationSameSexOnly GenderLimitationEnumeration = "sameSexOnly"
)

// PaymentMethodEnumeration represents the PaymentMethodEnumeration enumeration
// Allowed values for Payment method.
type PaymentMethodEnumeration string

const (
	// PaymentMethodEnumerationCash represents cash
	// Payment in coins or notes accepted.
	PaymentMethodEnumerationCash PaymentMethodEnumeration = "cash"
	// PaymentMethodEnumerationCashExactChangeOnly represents cashExactChangeOnly
	// Payment in coins or notes accepted, must be exact amount.
	PaymentMethodEnumerationCashExactChangeOnly PaymentMethodEnumeration = "cashExactChangeOnly"
	// PaymentMethodEnumerationCashAndCard represents cashAndCard
	// Payment with either cash or debit / credit card   accepted.
	PaymentMethodEnumerationCashAndCard PaymentMethodEnumeration = "cashAndCard"
	// PaymentMethodEnumerationCoin represents coin
	// Payment in specie (coins) only.
	PaymentMethodEnumerationCoin PaymentMethodEnumeration = "coin"
	// PaymentMethodEnumerationBanknote represents banknote
	// Payment in cash with banknotes (but no coins).
	PaymentMethodEnumerationBanknote PaymentMethodEnumeration = "banknote"
	// PaymentMethodEnumerationCheque represents cheque
	// Payment with personal Bankers' cheque.
	PaymentMethodEnumerationCheque PaymentMethodEnumeration = "cheque"
	// PaymentMethodEnumerationTravellersCheque represents travellersCheque
	// Payment with Traveller's cheque.
	PaymentMethodEnumerationTravellersCheque PaymentMethodEnumeration = "travellersCheque"
	// PaymentMethodEnumerationPostalOrder represents postalOrder
	// Payment by Postal order.
	PaymentMethodEnumerationPostalOrder PaymentMethodEnumeration = "postalOrder"
	// PaymentMethodEnumerationCompanyCheque represents companyCheque
	// Payment with Company cheque.
	PaymentMethodEnumerationCompanyCheque PaymentMethodEnumeration = "companyCheque"
	// PaymentMethodEnumerationCreditCard represents creditCard
	// Payment by credit card  (E.g. Visa, MasterCard, etc).
	PaymentMethodEnumerationCreditCard PaymentMethodEnumeration = "creditCard"
	// PaymentMethodEnumerationDebitCard represents debitCard
	// Payment by Bank debit  card.
	PaymentMethodEnumerationDebitCard PaymentMethodEnumeration = "debitCard"
	// PaymentMethodEnumerationCardsOnly represents cardsOnly
	// Paymentonly with debit or credit card (no cash).
	PaymentMethodEnumerationCardsOnly PaymentMethodEnumeration = "cardsOnly"
	// PaymentMethodEnumerationTravelCard represents travelCard
	// Payment with stored value travel card or smartcard.
	PaymentMethodEnumerationTravelCard PaymentMethodEnumeration = "travelCard"
	// PaymentMethodEnumerationContactlessPaymentCard represents contactlessPaymentCard
	// NFC Payment by contactless credit or debit card
	PaymentMethodEnumerationContactlessPaymentCard PaymentMethodEnumeration = "contactlessPaymentCard"
	// PaymentMethodEnumerationContactlessTravelCard represents contactlessTravelCard
	// NFC Payment with stored value travel card or smartcard .
	PaymentMethodEnumerationContactlessTravelCard PaymentMethodEnumeration = "contactlessTravelCard"
	// PaymentMethodEnumerationDirectDebit represents directDebit
	// Electronic payment by direct debit at retailers request from customer's bank account .
	PaymentMethodEnumerationDirectDebit PaymentMethodEnumeration = "directDebit"
	// PaymentMethodEnumerationBankTransfer represents bankTransfer
	// Electronic payment from customer account to retailers account.
	PaymentMethodEnumerationBankTransfer PaymentMethodEnumeration = "bankTransfer"
	// PaymentMethodEnumerationEpayDevice represents epayDevice
	// Electronic payment with on device  application (e.g. ApplePay, GooglePay etc).
	PaymentMethodEnumerationEpayDevice PaymentMethodEnumeration = "epayDevice"
	// PaymentMethodEnumerationEpayAccount represents epayAccount
	// Electronic payment direct from account (e.g. PayPal etc).
	PaymentMethodEnumerationEpayAccount PaymentMethodEnumeration = "epayAccount"
	// PaymentMethodEnumerationSms represents sms
	// Payment by SMS charge to mobile account.
	PaymentMethodEnumerationSms PaymentMethodEnumeration = "sms"
	// PaymentMethodEnumerationMobilePhone represents mobilePhone
	// Payment with mobile device  / mobile app. [Use more specific MOBILE app]
	PaymentMethodEnumerationMobilePhone PaymentMethodEnumeration = "mobilePhone"
	// PaymentMethodEnumerationMobileApp represents mobileApp
	// Payment with mobile device  / mobile app. +v1.2.2
	PaymentMethodEnumerationMobileApp PaymentMethodEnumeration = "mobileApp"
	// PaymentMethodEnumerationVoucher represents voucher
	// Payment with coupons or vouchers.
	PaymentMethodEnumerationVoucher PaymentMethodEnumeration = "voucher"
	// PaymentMethodEnumerationToken represents token
	// Payment with physical tokens.
	PaymentMethodEnumerationToken PaymentMethodEnumeration = "token"
	// PaymentMethodEnumerationWarrant represents warrant
	// Payment with warrant issued by an organisation (e.g. Army, government).
	PaymentMethodEnumerationWarrant PaymentMethodEnumeration = "warrant"
	// PaymentMethodEnumerationMileagePoints represents mileagePoints
	// Payment in mileage points.
	PaymentMethodEnumerationMileagePoints PaymentMethodEnumeration = "mileagePoints"
	// PaymentMethodEnumerationOther represents other
	// Other means of payment .
	PaymentMethodEnumerationOther PaymentMethodEnumeration = "other"
)

// BookingChargeTypeEnumeration represents the BookingChargeTypeEnumeration enumeration
// Allowed values for BookingPayment +v1.1
type BookingChargeTypeEnumeration string

const (
	// BookingChargeTypeEnumerationFullAmount represents fullAmount
	// Purchase and payment.
	BookingChargeTypeEnumerationFullAmount BookingChargeTypeEnumeration = "fullAmount"
	// BookingChargeTypeEnumerationBlockFullAmountOnCard represents blockFullAmountOnCard
	BookingChargeTypeEnumerationBlockFullAmountOnCard BookingChargeTypeEnumeration = "blockFullAmountOnCard"
	// BookingChargeTypeEnumerationDeposit represents deposit
	// Purchase with deferred  payment.
	BookingChargeTypeEnumerationDeposit BookingChargeTypeEnumeration = "deposit"
	// BookingChargeTypeEnumerationNone represents none
	BookingChargeTypeEnumerationNone BookingChargeTypeEnumeration = "none"
	// BookingChargeTypeEnumerationOther represents other
	// Reervation but not necessarily payment
	BookingChargeTypeEnumerationOther BookingChargeTypeEnumeration = "other"
)

// SanitaryFacilityEnumeration represents the SanitaryFacilityEnumeration enumeration
// Allowed values for Sanitary Facility Type.
type SanitaryFacilityEnumeration string

const (
	// SanitaryFacilityEnumerationNone represents none
	SanitaryFacilityEnumerationNone SanitaryFacilityEnumeration = "none"
	// SanitaryFacilityEnumerationToilet represents toilet
	SanitaryFacilityEnumerationToilet SanitaryFacilityEnumeration = "toilet"
	// SanitaryFacilityEnumerationWheelchairAccessToilet represents wheelchairAccessToilet
	SanitaryFacilityEnumerationWheelchairAccessToilet SanitaryFacilityEnumeration = "wheelchairAccessToilet"
	// SanitaryFacilityEnumerationShower represents shower
	SanitaryFacilityEnumerationShower SanitaryFacilityEnumeration = "shower"
	// SanitaryFacilityEnumerationWashingAndChangeFacilities represents washingAndChangeFacilities
	SanitaryFacilityEnumerationWashingAndChangeFacilities SanitaryFacilityEnumeration = "washingAndChangeFacilities"
	// SanitaryFacilityEnumerationBabyChange represents babyChange
	SanitaryFacilityEnumerationBabyChange SanitaryFacilityEnumeration = "babyChange"
	// SanitaryFacilityEnumerationWheelchairBabyChange represents wheelchairBabyChange
	SanitaryFacilityEnumerationWheelchairBabyChange SanitaryFacilityEnumeration = "wheelchairBabyChange"
	// SanitaryFacilityEnumerationShoeShiner represents shoeShiner
	SanitaryFacilityEnumerationShoeShiner SanitaryFacilityEnumeration = "shoeShiner"
	// SanitaryFacilityEnumerationOther represents other
	SanitaryFacilityEnumerationOther SanitaryFacilityEnumeration = "other"
)

// TicketTypeEnumeration represents the TicketTypeEnumeration enumeration
// Allowed value for Ticket Types.
type TicketTypeEnumeration string

const (
	// TicketTypeEnumerationStandard represents standard
	TicketTypeEnumerationStandard TicketTypeEnumeration = "standard"
	// TicketTypeEnumerationPromotion represents promotion
	TicketTypeEnumerationPromotion TicketTypeEnumeration = "promotion"
	// TicketTypeEnumerationConcession represents concession
	TicketTypeEnumerationConcession TicketTypeEnumeration = "concession"
	// TicketTypeEnumerationGroup represents group
	TicketTypeEnumerationGroup TicketTypeEnumeration = "group"
	// TicketTypeEnumerationSeason represents season
	TicketTypeEnumerationSeason TicketTypeEnumeration = "season"
	// TicketTypeEnumerationCarnet represents carnet
	TicketTypeEnumerationCarnet TicketTypeEnumeration = "carnet"
	// TicketTypeEnumerationTravelCard represents travelCard
	TicketTypeEnumerationTravelCard TicketTypeEnumeration = "travelCard"
	// TicketTypeEnumerationOther represents other
	TicketTypeEnumerationOther TicketTypeEnumeration = "other"
	// TicketTypeEnumerationAll represents all
	TicketTypeEnumerationAll TicketTypeEnumeration = "all"
)

// TicketingServiceFacilityEnumeration represents the TicketingServiceFacilityEnumeration enumeration
// Allowed value for Ticketing Service.
type TicketingServiceFacilityEnumeration string

const (
	// TicketingServiceFacilityEnumerationPurchase represents purchase
	TicketingServiceFacilityEnumerationPurchase TicketingServiceFacilityEnumeration = "purchase"
	// TicketingServiceFacilityEnumerationCollection represents collection
	TicketingServiceFacilityEnumerationCollection TicketingServiceFacilityEnumeration = "collection"
	// TicketingServiceFacilityEnumerationCardTopUp represents cardTopUp
	TicketingServiceFacilityEnumerationCardTopUp TicketingServiceFacilityEnumeration = "cardTopUp"
	// TicketingServiceFacilityEnumerationReservations represents reservations
	TicketingServiceFacilityEnumerationReservations TicketingServiceFacilityEnumeration = "reservations"
	// TicketingServiceFacilityEnumerationExchange represents exchange
	TicketingServiceFacilityEnumerationExchange TicketingServiceFacilityEnumeration = "exchange"
	// TicketingServiceFacilityEnumerationRefund represents refund
	TicketingServiceFacilityEnumerationRefund TicketingServiceFacilityEnumeration = "refund"
	// TicketingServiceFacilityEnumerationRenewal represents renewal
	TicketingServiceFacilityEnumerationRenewal TicketingServiceFacilityEnumeration = "renewal"
	// TicketingServiceFacilityEnumerationExcessFares represents excessFares
	TicketingServiceFacilityEnumerationExcessFares TicketingServiceFacilityEnumeration = "excessFares"
	// TicketingServiceFacilityEnumerationOther represents other
	TicketingServiceFacilityEnumerationOther TicketingServiceFacilityEnumeration = "other"
	// TicketingServiceFacilityEnumerationAll represents all
	TicketingServiceFacilityEnumerationAll TicketingServiceFacilityEnumeration = "all"
)

// ClassOfUseRefStructure represents the ClassOfUseRefStructure element
// Type for a reference to a CLASS OF USE.
type ClassOfUseRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfPaymentMethodRefsRelStructure represents the TypeOfPaymentMethodRefs_RelStructure element
// Type for a collection of one or more references to a  TYPE OF PAYMENT METHOD.
type TypeOfPaymentMethodRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfPaymentMethodRef []TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef" json:"TypeOfPaymentMethodRef"`
}

// TypeOfPaymentMethodRefStructure represents the TypeOfPaymentMethodRefStructure element
// Type for a reference to a TYPE OF PAYMENT METHOD. +v1.2.2
type TypeOfPaymentMethodRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfServiceRefStructure represents the TypeOfServiceRefStructure element
// Type for a reference to a TYPE OF SERVICE.
type TypeOfServiceRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfServiceRefsRelStructure represents the typeOfServiceRefs_RelStructure element
// Type for a list of TYPEs OF SERVICE.
type TypeOfServiceRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfServiceRef []TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
}

// TypeOfProductCategoryRefStructure represents the TypeOfProductCategoryRefStructure element
// Type for a reference to a TYPE OF PRODUCT CATEGORY.
type TypeOfProductCategoryRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfProductCategoryRefsRelStructure represents the typeOfProductCategoryRefs_RelStructure element
// Type for a list of TYPEs OF PRODUCT CATEGORY.
type TypeOfProductCategoryRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfProductCategoryRef []TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
}

// ClassOfUseRef represents the ClassOfUseRef element
// Reference to a CLASS OF USE.
type ClassOfUseRef struct {
	ClassOfUseRefStructure
}

// TypeOfPaymentMethodRef represents the TypeOfPaymentMethodRef element
// Reference to a TYPE OF PAYMENT METHOD.
type TypeOfPaymentMethodRef struct {
	TypeOfPaymentMethodRefStructure
}

// TypeOfServiceRef represents the TypeOfServiceRef element
// Reference to a TYPE OF SERVICE.
type TypeOfServiceRef struct {
	TypeOfServiceRefStructure
}

// TypeOfProductCategoryRef represents the TypeOfProductCategoryRef element
// Reference to a TYPE OF PRODUCT CATEGORY. Product of a JOURNEY. e.g. ICS, Thales etc
// See ERA B.4 7037 Characteristic description code.
type TypeOfProductCategoryRef struct {
	TypeOfProductCategoryRefStructure
}

// ClassOfUseValueStructure represents the ClassOfUse_ValueStructure element
// Type for a TYPE OF CLASS OF USE.
type ClassOfUseValueStructure struct {
	TypeOfValueVersionStructure
	// Fixed class associated with this CLASS OF USE.
	FareClass *FareClassEnumeration `xml:"FareClass,omitempty" json:"FareClass,omitempty"`
}

// BookingArrangementsStructure represents the BookingArrangementsStructure element
// Type for BOOKING ARRANGEMENTs.
type BookingArrangementsStructure struct {
	// Contact for Booking. +v1.1
	BookingContact *ContactStructure `xml:"BookingContact,omitempty" json:"BookingContact,omitempty"`
	// Allowed Ways of Making a BOOKING.
	BookingMethods *BookingMethodEnumeration `xml:"BookingMethods,omitempty" json:"BookingMethods,omitempty"`
	// Who can make a booking. Default is public.
	BookingAccess *BookingAccessEnumeration `xml:"BookingAccess,omitempty" json:"BookingAccess,omitempty"`
	// When Booking can be made. +V1.1
	BookWhen *PurchaseWhenEnumeration `xml:"BookWhen,omitempty" json:"BookWhen,omitempty"`
	// When purchase can be made.  +V1.1
	BuyWhen *PurchaseMomentEnumeration `xml:"BuyWhen,omitempty" json:"BuyWhen,omitempty"`
	// Latest time in day that booking can be made.
	LatestBookingTime *string `xml:"LatestBookingTime,omitempty" json:"LatestBookingTime,omitempty"`
	// Minimum interval in advance of departure day or time that Service may be ordered.
	MinimumBookingPeriod *string `xml:"MinimumBookingPeriod,omitempty" json:"MinimumBookingPeriod,omitempty"`
	// Maximum interval in advance of departure day or time that Service may be ordered. +V1.2..2
	MaximumBookingPeriod *string `xml:"MaximumBookingPeriod,omitempty" json:"MaximumBookingPeriod,omitempty"`
	// URL for booking. +V1.1
	BookingUrl *string `xml:"BookingUrl,omitempty" json:"BookingUrl,omitempty"`
	// Note about booking the FLEXIBLE LINE.
	BookingNote *MultilingualString `xml:"BookingNote,omitempty" json:"BookingNote,omitempty"`
}

// ServiceBookingArrangementsStructure represents the ServiceBookingArrangementsStructure element
// Type for SERVICE BOOKING ARRANGEMENTs.
type ServiceBookingArrangementsStructure struct {
	BookingArrangementsStructure
	// Minimum period for which a booking can be mad +v.1.2.2
	MinimumBookingDuration *string `xml:"MinimumBookingDuration,omitempty" json:"MinimumBookingDuration,omitempty"`
	// Maximum period for which a booking can be mad +v.1.2.2
	MaximumBookingDuration *string `xml:"MaximumBookingDuration,omitempty" json:"MaximumBookingDuration,omitempty"`
	// Whether a deposit is required. +v1.2.2
	DepositRequired *bool `xml:"DepositRequired,omitempty" json:"DepositRequired,omitempty"`
	// Nature of booking fee. v1.2.2
	BookingChargeType *BookingChargeTypeEnumeration `xml:"BookingChargeType,omitempty" json:"BookingChargeType,omitempty"`
}

// TypeOfPaymentMethodValueStructure represents the TypeOfPaymentMethod_ValueStructure element
// Type for a TYPE OF TYPE OF PAYMENT METHOD.
type TypeOfPaymentMethodValueStructure struct {
	TypeOfValueVersionStructure
	// Payment method value.
	PaymentMethod *PaymentMethodEnumeration `xml:"PaymentMethod,omitempty" json:"PaymentMethod,omitempty"`
	// Whether PAYMENT METHOD can be used for automated payments.
	AutomatedUse *bool `xml:"AutomatedUse,omitempty" json:"AutomatedUse,omitempty"`
}

// TypesOfServiceInFrameRelStructure represents the typesOfServiceInFrame_RelStructure element
// Type for containment in frame of TYPE OF SERVICE.
type TypesOfServiceInFrameRelStructure struct {
	ContainmentAggregationStructure
	TypeOfService []TypeOfService `xml:"TypeOfService" json:"TypeOfService"`
}

// TypeOfServiceStructure represents the TypeOfServiceStructure element
// Type for a TYPE OF SERVICE.
type TypeOfServiceStructure struct {
	TypeOfEntityVersionStructure
}

// TypeOfProductCategoryStructure represents the TypeOfProductCategoryStructure element
// Type for a TYPE OF PRODUCT CATEGORY.
type TypeOfProductCategoryStructure struct {
	TypeOfEntityVersionStructure
	// An alternative code that uniquely identifies the PRODUCT CATEGORY. Specifically for use in AVMS systems that require an alias, if code is different from main identifier. For VDV compatibility.
	ExternalProductCategoryRef *ExternalObjectRefStructure `xml:"ExternalProductCategoryRef,omitempty" json:"ExternalProductCategoryRef,omitempty"`
	// The presentation colours to use for this TYPE OF PRODUCT CATEGORY. +v2.1
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
}

// ClassOfUse represents the ClassOfUse element
// Defines an Classification of users who may make use of a component or amenity.
type ClassOfUse struct {
	ClassOfUseValueStructure
}

// TypeOfPaymentMethod represents the TypeOfPaymentMethod element
// Defines an open classification  payment methods. + v1.1
type TypeOfPaymentMethod struct {
	TypeOfPaymentMethodValueStructure
}

// TypeOfService represents the TypeOfService element
// Classification of a Service.
type TypeOfService struct {
	TypeOfServiceStructure
}

// TypeOfProductCategory represents the TypeOfProductCategory element
// Classification of a PRODUCT CATEGORY.
type TypeOfProductCategory struct {
	TypeOfProductCategoryStructure
}

// UicProductCharacteristicEnumeration represents the UicProductCharacteristicEnumeration enumeration
// UIC Product Characteristic UIC 7139 Code list.
type UicProductCharacteristicEnumeration string

const (
	// UicProductCharacteristicEnumerationTariffCommunVoyageurs represents tariffCommunVoyageurs
	UicProductCharacteristicEnumerationTariffCommunVoyageurs UicProductCharacteristicEnumeration = "tariffCommunVoyageurs"
	// UicProductCharacteristicEnumerationAllInclusivePrice represents allInclusivePrice
	UicProductCharacteristicEnumerationAllInclusivePrice UicProductCharacteristicEnumeration = "allInclusivePrice"
	// UicProductCharacteristicEnumerationEastWestTariff represents eastWestTariff
	UicProductCharacteristicEnumerationEastWestTariff UicProductCharacteristicEnumeration = "eastWestTariff"
	// UicProductCharacteristicEnumerationTrainWithTcvAndMarketPrice represents trainWithTcvAndMarketPrice
	UicProductCharacteristicEnumerationTrainWithTcvAndMarketPrice UicProductCharacteristicEnumeration = "trainWithTcvAndMarketPrice"
	// UicProductCharacteristicEnumerationNoPublishedTariff represents noPublishedTariff
	UicProductCharacteristicEnumerationNoPublishedTariff UicProductCharacteristicEnumeration = "noPublishedTariff"
)

// UicRateTypeEnumeration represents the UicRateTypeEnumeration enumeration
// UIC Rate Type UIC 5263Code list.
type UicRateTypeEnumeration string

const (
	// UicRateTypeEnumerationNormal represents normal
	UicRateTypeEnumerationNormal UicRateTypeEnumeration = "normal"
	// UicRateTypeEnumerationDiscountInTrainOtherThanTgv represents discountInTrainOtherThanTGV
	UicRateTypeEnumerationDiscountInTrainOtherThanTgv UicRateTypeEnumeration = "discountInTrainOtherThanTGV"
	// UicRateTypeEnumerationSpecialFare represents specialFare
	UicRateTypeEnumerationSpecialFare UicRateTypeEnumeration = "specialFare"
	// UicRateTypeEnumerationSupplement represents supplement
	UicRateTypeEnumerationSupplement UicRateTypeEnumeration = "supplement"
	// UicRateTypeEnumerationNoPublishedTariff represents noPublishedTariff
	UicRateTypeEnumerationNoPublishedTariff UicRateTypeEnumeration = "noPublishedTariff"
)

// SiteFacilitySetsInFrameRelStructure represents the siteFacilitySetsInFrame_RelStructure element
// Type for containment in frame of SERVICE FACILITY SETs.
type SiteFacilitySetsInFrameRelStructure struct {
	ContainmentAggregationStructure
	SiteFacilitySet []SiteFacilitySet `xml:"SiteFacilitySet" json:"SiteFacilitySet"`
}

// ServiceFacilitySetsInFrameRelStructure represents the serviceFacilitySetsInFrame_RelStructure element
// Type for containment in frame of SERVICE FACILITY SETs.
type ServiceFacilitySetsInFrameRelStructure struct {
	ContainmentAggregationStructure
	ServiceFacilitySet []ServiceFacilitySet `xml:"ServiceFacilitySet" json:"ServiceFacilitySet"`
}

// FacilitySetVersionStructure represents the FacilitySet_VersionStructure element
// Type for a FACILITY.
type FacilitySetVersionStructure struct {
	DataManagedObjectStructure
	// Provider of FACILITY SET.
	ProvidedByRef *OrganisationRefStructure `xml:"ProvidedByRef,omitempty" json:"ProvidedByRef,omitempty"`
	// Description of FACILITY SET.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	TypeOfFacilityRef *TypeOfFacilityRef `xml:"TypeOfFacilityRef,omitempty" json:"TypeOfFacilityRef,omitempty"`
	// Arbitrary user defined Faciliy.
	OtherFacilities *TypesOfEquipmentRelStructure `xml:"otherFacilities,omitempty" json:"otherFacilities,omitempty"`
	// List of ACCESSIBILITY INFORMATION FACILITies.
	AccessibilityInfoFacilityList *AccessibilityInfoFacilityList `xml:"AccessibilityInfoFacilityList,omitempty" json:"AccessibilityInfoFacilityList,omitempty"`
	// List of ASSISTANCE FACILITies.
	AssistanceFacilityList *AssistanceFacilityList `xml:"AssistanceFacilityList,omitempty" json:"AssistanceFacilityList,omitempty"`
	// List of TYPEs of ACCESSIBILITY TOOLs.
	AccessibilityToolList *AccessibilityToolList `xml:"AccessibilityToolList,omitempty" json:"AccessibilityToolList,omitempty"`
	CarServiceFacilityList *CarServiceFacilityList `xml:"CarServiceFacilityList,omitempty" json:"CarServiceFacilityList,omitempty"`
	CateringFacilityList *CateringFacilityList `xml:"CateringFacilityList,omitempty" json:"CateringFacilityList,omitempty"`
	FamilyFacilityList *FamilyFacilityList `xml:"FamilyFacilityList,omitempty" json:"FamilyFacilityList,omitempty"`
	// List of Fare Classes.
	FareClasses *FareClasses `xml:"FareClasses,omitempty" json:"FareClasses,omitempty"`
	GenderLimitation *GenderLimitation `xml:"GenderLimitation,omitempty" json:"GenderLimitation,omitempty"`
	MealFacilityList *MealFacilityList `xml:"MealFacilityList,omitempty" json:"MealFacilityList,omitempty"`
	MedicalFacilityList *MedicalFacilityList `xml:"MedicalFacilityList,omitempty" json:"MedicalFacilityList,omitempty"`
	MobilityFacilityList *MobilityFacilityList `xml:"MobilityFacilityList,omitempty" json:"MobilityFacilityList,omitempty"`
	NuisanceFacilityList *NuisanceFacilityList `xml:"NuisanceFacilityList,omitempty" json:"NuisanceFacilityList,omitempty"`
	PassengerCommsFacilityList *PassengerCommsFacilityList `xml:"PassengerCommsFacilityList,omitempty" json:"PassengerCommsFacilityList,omitempty"`
	// List of PASSENGER INFORMATION Equipments.
	PassengerInformationEquipmentList *PassengerInformationEquipmentEnumeration `xml:"PassengerInformationEquipmentList,omitempty" json:"PassengerInformationEquipmentList,omitempty"`
	// List of PASSENGER INFORMATION FACILITies.
	PassengerInformationFacilityList *PassengerInformationFacilityList `xml:"PassengerInformationFacilityList,omitempty" json:"PassengerInformationFacilityList,omitempty"`
	RetailFacilityList *RetailFacilityList `xml:"RetailFacilityList,omitempty" json:"RetailFacilityList,omitempty"`
	SafetyFacilityList *SafetyFacilityList `xml:"SafetyFacilityList,omitempty" json:"SafetyFacilityList,omitempty"`
	SanitaryFacilityList *SanitaryFacilityList `xml:"SanitaryFacilityList,omitempty" json:"SanitaryFacilityList,omitempty"`
	TicketingFacilityList *TicketingFacilityList `xml:"TicketingFacilityList,omitempty" json:"TicketingFacilityList,omitempty"`
	TicketingServiceFacilityList *TicketingServiceFacilityList `xml:"TicketingServiceFacilityList,omitempty" json:"TicketingServiceFacilityList,omitempty"`
}

// ServiceFacilitySetsRelStructure represents the serviceFacilitySets_RelStructure element
// SERVICE FACILITY SETs associated with entity.
type ServiceFacilitySetsRelStructure struct {
	ContainmentAggregationStructure
	ServiceFacilitySetRef []ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	ServiceFacilitySet []ServiceFacilitySet `xml:"ServiceFacilitySet,omitempty" json:"ServiceFacilitySet,omitempty"`
}

// ServiceFacilitySetVersionStructure represents the ServiceFacilitySet_VersionStructure element
// Type for a SERVICE FACILITY.
type ServiceFacilitySetVersionStructure struct {
	FacilitySetVersionStructure
	// List of Vehicle Access FACILITies. +v1.1
	VehicleAccessFacilityList *VehicleAccessFacilityList `xml:"VehicleAccessFacilityList,omitempty" json:"VehicleAccessFacilityList,omitempty"`
	// List of ACCOMMODATION Access rights.
	AccommodationAccessList *AccommodationAccessList `xml:"AccommodationAccessList,omitempty" json:"AccommodationAccessList,omitempty"`
	// List of Accommodation FACILITies.
	AccommodationFacilityList *AccommodationFacilityList `xml:"AccommodationFacilityList,omitempty" json:"AccommodationFacilityList,omitempty"`
	BoardingPermission *BoardingPermission `xml:"BoardingPermission,omitempty" json:"BoardingPermission,omitempty"`
	BookingProcessFacilityList *BookingProcessFacilityList `xml:"BookingProcessFacilityList,omitempty" json:"BookingProcessFacilityList,omitempty"`
	CouchetteFacilityList *CouchetteFacilityList `xml:"CouchetteFacilityList,omitempty" json:"CouchetteFacilityList,omitempty"`
	GroupBookingFacility *GroupBookingFacility `xml:"GroupBookingFacility,omitempty" json:"GroupBookingFacility,omitempty"`
	LuggageCarriageFacilityList *LuggageCarriageFacilityList `xml:"LuggageCarriageFacilityList,omitempty" json:"LuggageCarriageFacilityList,omitempty"`
	ServiceReservationFacilityList *ServiceReservationFacilityList `xml:"ServiceReservationFacilityList,omitempty" json:"ServiceReservationFacilityList,omitempty"`
	UicProductCharacteristicList *UicProductCharacteristicList `xml:"UicProductCharacteristicList,omitempty" json:"UicProductCharacteristicList,omitempty"`
	UicTrainRate *UicTrainRate `xml:"UicTrainRate,omitempty" json:"UicTrainRate,omitempty"`
	// Accommodation available on service.
	Accommodations *AccommodationsRelStructure `xml:"accommodations,omitempty" json:"accommodations,omitempty"`
	// Permission to stay on board the service.
	OnboardStays *OnboardStaysRelStructure `xml:"onboardStays,omitempty" json:"onboardStays,omitempty"`
}

// SiteFacilitySetsRelStructure represents the siteFacilitySets_RelStructure element
// SITE FACILITies associated with entity.
type SiteFacilitySetsRelStructure struct {
	ContainmentAggregationStructure
	SiteFacilitySetRef []SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	SiteFacilitySet []SiteFacilitySet `xml:"SiteFacilitySet,omitempty" json:"SiteFacilitySet,omitempty"`
}

// SiteFacilitySetStructure represents the SiteFacilitySetStructure element
// Type for a SITEFACILITY.
type SiteFacilitySetStructure struct {
	FacilitySetVersionStructure
	// List of ACCESS FACILITies. + v1.1
	AccessFacilityList *AccessFacilityList `xml:"AccessFacilityList,omitempty" json:"AccessFacilityList,omitempty"`
	// List of EMERGENCY SERVICE FACILITies.
	EmergencyServiceList *EmergencyServiceList `xml:"EmergencyServiceList,omitempty" json:"EmergencyServiceList,omitempty"`
	// List of HIRE FACILITies.
	HireFacilityList *HireFacilityList `xml:"HireFacilityList,omitempty" json:"HireFacilityList,omitempty"`
	// List of LUGGAGE LOCKER FACILITies.
	LuggageLockerFacilityList *LuggageLockerFacilityList `xml:"LuggageLockerFacilityList,omitempty" json:"LuggageLockerFacilityList,omitempty"`
	// List of LUGGAGE SERVICE FACILITies.
	LuggageServiceFacilityList *LuggageServiceFacilityList `xml:"LuggageServiceFacilityList,omitempty" json:"LuggageServiceFacilityList,omitempty"`
	// List of MONEY FACILITies.
	MoneyFacilityList *MoneyFacilityList `xml:"MoneyFacilityList,omitempty" json:"MoneyFacilityList,omitempty"`
	// List of PARKING FACILITies.
	ParkingFacilityList *ParkingFacilityList `xml:"ParkingFacilityList,omitempty" json:"ParkingFacilityList,omitempty"`
	// Classification of STAFFING.
	Staffing *Staffing `xml:"Staffing,omitempty" json:"Staffing,omitempty"`
}

// TypesOfFacilityRelStructure represents the typesOfFacility_RelStructure element
// Type for a list of TYPE OF FACILITYs.
type TypesOfFacilityRelStructure struct {
	ContainmentAggregationStructure
	TypeOfFacilityRef []TypeOfFacilityRef `xml:"TypeOfFacilityRef,omitempty" json:"TypeOfFacilityRef,omitempty"`
	// A TYPE OF FACILITY specifying access rights for the FACILITY ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	TypeOfFacility []TypeOfFacility `xml:"TypeOfFacility,omitempty" json:"TypeOfFacility,omitempty"`
}

// TypeOfFacilityVersionStructure represents the TypeOfFacility_VersionStructure element
// Type for TYPE OF FACILITY.
type TypeOfFacilityVersionStructure struct {
	TypeOfEntityVersionStructure
}

// AccommodationsRelStructure represents the accommodations_RelStructure element
// Type for containment in frame of SERVICE FACILITY SETs.
type AccommodationsRelStructure struct {
	ContainmentAggregationStructure
	AccommodationRef []AccommodationRef `xml:"AccommodationRef,omitempty" json:"AccommodationRef,omitempty"`
	Accommodation []Accommodation `xml:"Accommodation,omitempty" json:"Accommodation,omitempty"`
}

// AccommodationVersionedChildStructure represents the Accommodation_VersionedChildStructure element
// Type for allowed combinations of ACCOMMODATION.
type AccommodationVersionedChildStructure struct {
	VersionedChildStructure
	// Name of Accomodation _v1.1
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	ServiceFacilitySetRef *ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	// Fare class of ACCOMMODATION.
	FareClass *FareClass `xml:"FareClass,omitempty" json:"FareClass,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	// Type of ACCOMMODATION. . Default is seating.
	AccommodationFacility *AccommodationFacility `xml:"AccommodationFacility,omitempty" json:"AccommodationFacility,omitempty"`
	// Type of Couchette.
	CouchetteFacility *CouchetteFacility `xml:"CouchetteFacility,omitempty" json:"CouchetteFacility,omitempty"`
	MaximumNumberOfBerths *int `xml:"MaximumNumberOfBerths,omitempty" json:"MaximumNumberOfBerths,omitempty"`
	// Classification of BERTH FACILITY.
	BerthFacility *BerthFacility `xml:"BerthFacility,omitempty" json:"BerthFacility,omitempty"`
	ShowerFacility *SanitaryFacilityEnumeration `xml:"ShowerFacility,omitempty" json:"ShowerFacility,omitempty"`
	// Toilet facilities for ACCOMMODATION.
	ToiletFacility *SanitaryFacilityEnumeration `xml:"ToiletFacility,omitempty" json:"ToiletFacility,omitempty"`
	GenderLimitation *GenderLimitation `xml:"GenderLimitation,omitempty" json:"GenderLimitation,omitempty"`
	NuisanceFacilityList *NuisanceFacilityList `xml:"NuisanceFacilityList,omitempty" json:"NuisanceFacilityList,omitempty"`
	PassengerCommsFacilityList *PassengerCommsFacilityList `xml:"PassengerCommsFacilityList,omitempty" json:"PassengerCommsFacilityList,omitempty"`
}

// OnboardStaysRelStructure represents the onboardStays_RelStructure element
// Type for containment in frame of SERVICE FACILITY SETs.
type OnboardStaysRelStructure struct {
	ContainmentAggregationStructure
	OnboardStay []OnboardStay `xml:"OnboardStay" json:"OnboardStay"`
}

// OnboardStayVersionedChlldStructure represents the OnboardStay_VersionedChlldStructure element
// Type for allowed combinations of boarding permission.
type OnboardStayVersionedChlldStructure struct {
	VersionedChildStructure
	// Name of ON BOARD STay +v1.1
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	ServiceFacilitySetRef *ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	// Fare class of Boarding permission.
	FareClass *FareClass `xml:"FareClass,omitempty" json:"FareClass,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	// Type of Accommodation . Default is seating.
	BoardingPermission *BoardingPermission `xml:"BoardingPermission,omitempty" json:"BoardingPermission,omitempty"`
	// Period allowed for boarding/ alighting before journey start /end.
	Period *string `xml:"Period,omitempty" json:"Period,omitempty"`
}

// FacilitySet represents the FacilitySet element
// Facility. Set of enumerated FACILITY values (names based on TPEG classifications, augmented with UIC etc.).
type FacilitySet struct {
	FacilitySetVersionStructure
}

// ServiceFacilitySet represents the ServiceFacilitySet element
// Service FACILITY. Set of enumerated FACILITY values (Where available names are based on TPEG classifications, augmented with UIC etc.).
type ServiceFacilitySet struct {
	ServiceFacilitySetVersionStructure
}

// SiteFacilitySet represents the SiteFacilitySet element
// Set of enumerated FACILITY values that are relevant to a SITE (names based on TPEG classifications, augmented with UIC etc.).
type SiteFacilitySet struct {
	SiteFacilitySetStructure
}

// TypeOfFacility represents the TypeOfFacility element
// A classification of FACILITYs expressing their general functionalities and local functional characteristics specific to the operator. Types of FACILITYs like e.g. throw-away ticket, throw-away ticket unit, value card, electronic purse allowing access, public transport credit card etc. may be used to define these categories.
type TypeOfFacility struct {
	TypeOfFacilityVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// Accommodation represents the Accommodation element
// Allowed combinations of accommodation.
type Accommodation struct {
	AccommodationVersionedChildStructure
}

// OnboardStay represents the OnboardStay element
// Boarding permission to board early or stay on board late.
type OnboardStay struct {
	OnboardStayVersionedChlldStructure
}

// AccessFacility represents the AccessFacility element
// Classification of SITE  ACCESS FACILITY.
type AccessFacility struct {
	Value AccessFacilityEnumeration `xml:",chardata" json:"value"`
}

// AccessFacilityList represents the AccessFacilityList element
// List of SITE ACCESS FACILITies.
type AccessFacilityList struct {
	Value AccessFacilityEnumeration `xml:"value" json:"value"`
}

// VehicleAccessFacility represents the VehicleAccessFacility element
// Classification of VEHICLE ACCESS FACILITY.
type VehicleAccessFacility struct {
	Value VehicleAccessFacilityEnumeration `xml:",chardata" json:"value"`
}

// VehicleAccessFacilityList represents the VehicleAccessFacilityList element
// List of VEHICLE ACCESS FACILITies.
type VehicleAccessFacilityList struct {
	Value VehicleAccessFacilityEnumeration `xml:"value" json:"value"`
}

// AccessibilityInfoFacility represents the AccessibilityInfoFacility element
// Classification of ACCESSIBILITY INFO FACILITY type - TPEG pti23.
type AccessibilityInfoFacility struct {
	Value AccessibilityInfoFacilityEnumeration `xml:",chardata" json:"value"`
}

// AccessibilityInfoFacilityList represents the AccessibilityInfoFacilityList element
// List of ACCESSIBILITY INFO FACILITies.
type AccessibilityInfoFacilityList struct {
	Value AccessibilityInfoFacilityEnumeration `xml:"value" json:"value"`
}

// AccessibilityTool represents the AccessibilityTool element
// Classification of ACCESSIBILITY TOOLs.
type AccessibilityTool struct {
	Value AccessibilityToolEnumeration `xml:",chardata" json:"value"`
}

// AccessibilityToolList represents the AccessibilityToolList element
// List of ACCESSIBILITY TOOLs.
type AccessibilityToolList struct {
	Value AccessibilityToolEnumeration `xml:"value" json:"value"`
}

// AccommodationAccess represents the AccommodationAccess element
// Classification of ACCOMMODATION ACCESS type -
type AccommodationAccess struct {
	Value AccommodationAccessEnumeration `xml:",chardata" json:"value"`
}

// AccommodationAccessList represents the AccommodationAccessList element
// List of ACCOMMODATION ACCESS.
type AccommodationAccessList struct {
	Value AccommodationAccessEnumeration `xml:"value" json:"value"`
}

// AccommodationFacility represents the AccommodationFacility element
// Classification of ACCOMMODATION FACILITY type - TPEG pti23.
type AccommodationFacility struct {
	Value AccommodationFacilityEnumeration `xml:",chardata" json:"value"`
}

// AccommodationFacilityList represents the AccommodationFacilityList element
// List of ACCOMMODATION FACILITies.
type AccommodationFacilityList struct {
	Value AccommodationFacilityEnumeration `xml:"value" json:"value"`
}

// AssistanceFacility represents the AssistanceFacility element
// Classification of ASSISTANCE FACILITY.
type AssistanceFacility struct {
	Value AssistanceFacilityEnumeration `xml:",chardata" json:"value"`
}

// AssistanceFacilityList represents the AssistanceFacilityList element
// List of ASSISTANCE FACILITies.
type AssistanceFacilityList struct {
	Value AssistanceFacilityEnumeration `xml:"value" json:"value"`
}

// BerthFacility represents the BerthFacility element
// Classification of BERTHFACILITY type - TPEG pti23.
type BerthFacility struct {
	Value BerthFacilityEnumeration `xml:",chardata" json:"value"`
}

// BoardingPermission represents the BoardingPermission element
// Classification of BOARDING PERMISSION - UIC 7161 Code list.
type BoardingPermission struct {
	Value BoardingPermissionEnumeration `xml:",chardata" json:"value"`
}

// BookingProcessFacility represents the BookingProcessFacility element
// Classification of BOOKING PROCESS FACILITY type - UIC 7037 Code list.
type BookingProcessFacility struct {
	Value BookingProcessEnumeration `xml:",chardata" json:"value"`
}

// BookingProcessFacilityList represents the BookingProcessFacilityList element
// List of BOOKING PROCESS FACILITies UIC 7037 Code list.
type BookingProcessFacilityList struct {
	Value BookingProcessEnumeration `xml:"value" json:"value"`
}

// CouchetteFacility represents the CouchetteFacility element
// Classification of COUCHETTE FACILITY type - TPEG pti23.
type CouchetteFacility struct {
	Value CouchetteFacilityEnumeration `xml:",chardata" json:"value"`
}

// CouchetteFacilityList represents the CouchetteFacilityList element
// List of COUCHETTE FACILITies.
type CouchetteFacilityList struct {
	Value CouchetteFacilityEnumeration `xml:"value" json:"value"`
}

// EmergencyService represents the EmergencyService element
// Classification of EMERGENCY SERVICE FACILITY.
type EmergencyService struct {
	Value EmergencyServiceEnumeration `xml:",chardata" json:"value"`
}

// EmergencyServiceList represents the EmergencyServiceList element
// List of EMERGENCY SERVICE FACILITies.
type EmergencyServiceList struct {
	Value EmergencyServiceEnumeration `xml:"value" json:"value"`
}

// FamilyFacility represents the FamilyFacility element
// Classification of FAMILY FACILITies.
type FamilyFacility struct {
	Value FamilyFacilityEnumeration `xml:",chardata" json:"value"`
}

// FamilyFacilityList represents the FamilyFacilityList element
// List of FAMILY FACILITies.
type FamilyFacilityList struct {
	Value FamilyFacilityEnumeration `xml:"value" json:"value"`
}

// FareClass represents the FareClass element
// Classification of FARE CLASSes.
type FareClass struct {
	Value FareClassEnumeration `xml:",chardata" json:"value"`
}

// FareClasses represents the FareClasses element
// List of FARE CLASSes.
type FareClasses struct {
	Value FareClassEnumeration `xml:"value" json:"value"`
}

// GroupBookingFacility represents the GroupBookingFacility element
// Classification of GROUP FACILITY type - TPEG pti23.
type GroupBookingFacility struct {
	Value GroupBookingEnumeration `xml:",chardata" json:"value"`
}

// HireFacility represents the HireFacility element
// Classification of Hire FACILITY.
type HireFacility struct {
	Value HireFacilityEnumeration `xml:",chardata" json:"value"`
}

// HireFacilityList represents the HireFacilityList element
// List of Hire FACILITies.
type HireFacilityList struct {
	Value HireFacilityEnumeration `xml:"value" json:"value"`
}

// LuggageCarriageFacility represents the LuggageCarriageFacility element
// Classification of LUGGAGE CARRIAGE FACILITY type.
type LuggageCarriageFacility struct {
	Value LuggageCarriageEnumeration `xml:",chardata" json:"value"`
}

// LuggageCarriageFacilityList represents the LuggageCarriageFacilityList element
// List of LUGGAGE CARRIAGE FACILITies.
type LuggageCarriageFacilityList struct {
	Value LuggageCarriageEnumeration `xml:"value" json:"value"`
}

// LuggageLockerFacility represents the LuggageLockerFacility element
// Classification of LUGGAGE LOCKER FACILITY type.
type LuggageLockerFacility struct {
	Value LuggageLockerFacilityEnumeration `xml:",chardata" json:"value"`
}

// LuggageLockerFacilityList represents the LuggageLockerFacilityList element
// List of LUGGAGE LOCKER FACILITies.
type LuggageLockerFacilityList struct {
	Value LuggageLockerFacilityEnumeration `xml:"value" json:"value"`
}

// LuggageServiceFacility represents the LuggageServiceFacility element
// Classification of LUGGAGE SERVICE FACILITies.
type LuggageServiceFacility struct {
	Value LuggageServiceFacilityEnumeration `xml:",chardata" json:"value"`
}

// LuggageServiceFacilityList represents the LuggageServiceFacilityList element
// List of LUGGAGE SERVICE FACILITies.
type LuggageServiceFacilityList struct {
	Value LuggageServiceFacilityEnumeration `xml:"value" json:"value"`
}

// MealFacility represents the MealFacility element
// Classification of MEAL FACILITY type.
type MealFacility struct {
	Value MealFacilityEnumeration `xml:",chardata" json:"value"`
}

// MealFacilityList represents the MealFacilityList element
// List of MEAL FACILITies.
type MealFacilityList struct {
	Value MealFacilityEnumeration `xml:"value" json:"value"`
}

// MobilityFacility represents the MobilityFacility element
// Classification of MOBILITY FACILITY.
type MobilityFacility struct {
	Value MobilityFacilityEnumeration `xml:",chardata" json:"value"`
}

// MobilityFacilityList represents the MobilityFacilityList element
// List of MOBILITY FACILITies.
type MobilityFacilityList struct {
	Value MobilityFacilityEnumeration `xml:"value" json:"value"`
}

// MoneyFacility represents the MoneyFacility element
// Classification of MONEY FACILITY.
type MoneyFacility struct {
	Value MoneyFacilityEnumeration `xml:",chardata" json:"value"`
}

// MoneyFacilityList represents the MoneyFacilityList element
// List of MONEY FACILITies.
type MoneyFacilityList struct {
	Value MoneyFacilityEnumeration `xml:"value" json:"value"`
}

// NuisanceFacility represents the NuisanceFacility element
// Classification of NUISANCE FACILITY type - TPEG pti23.
type NuisanceFacility struct {
	Value NuisanceFacilityEnumeration `xml:"value" json:"value"`
}

// NuisanceFacilityList represents the NuisanceFacilityList element
// List of NUISANCE FACILITies.
type NuisanceFacilityList struct {
	Value NuisanceFacilityEnumeration `xml:"value" json:"value"`
}

// ParkingFacility represents the ParkingFacility element
// Classification of PARKING FACILITY.
type ParkingFacility struct {
	Value ParkingFacilityEnumeration `xml:",chardata" json:"value"`
}

// ParkingFacilityList represents the ParkingFacilityList element
// List of PARKING FACILITies.
type ParkingFacilityList struct {
	Value ParkingFacilityEnumeration `xml:"value" json:"value"`
}

// CarServiceFacility represents the CarServiceFacility element
// Classification of CAR SERVICE FACILITY.
type CarServiceFacility struct {
	Value CarServiceFacilityEnumeration `xml:",chardata" json:"value"`
}

// CarServiceFacilityList represents the CarServiceFacilityList element
// List of CAR SERVICE FACILITies.
type CarServiceFacilityList struct {
	Value CarServiceFacilityEnumeration `xml:"value" json:"value"`
}

// PassengerInformationFacility represents the PassengerInformationFacility element
// Classification of PASSENGER INFO FACILITY type - TPEG pti23.
type PassengerInformationFacility struct {
	Value PassengerInformationFacilityEnumeration `xml:",chardata" json:"value"`
}

// PassengerInformationFacilityList represents the PassengerInformationFacilityList element
// List of PASSENGER INFO FACILITies.
type PassengerInformationFacilityList struct {
	Value PassengerInformationFacilityEnumeration `xml:"value" json:"value"`
}

// PassengerCommsFacility represents the PassengerCommsFacility element
// Classification of PASSENGER COMMS FACILITY type - TPEG pti23.
type PassengerCommsFacility struct {
	Value PassengerCommsFacilityEnumeration `xml:",chardata" json:"value"`
}

// PassengerCommsFacilityList represents the PassengerCommsFacilityList element
// List of PASSENGER COMMS FACILITies.
type PassengerCommsFacilityList struct {
	Value PassengerCommsFacilityEnumeration `xml:"value" json:"value"`
}

// CateringFacility represents the CateringFacility element
// Classification of CATERING FACILITY type - TPEG pti23.
type CateringFacility struct {
	Value CateringFacilityEnumeration `xml:",chardata" json:"value"`
}

// CateringFacilityList represents the CateringFacilityList element
// List of CATERING FACILITies.
type CateringFacilityList struct {
	Value CateringFacilityEnumeration `xml:"value" json:"value"`
}

// ServiceReservationFacility represents the ServiceReservationFacility element
// Classification of RESERVATION FACILITY type - UIC 7037 Code list.
type ServiceReservationFacility struct {
	Value ReservationEnumeration `xml:",chardata" json:"value"`
}

// ServiceReservationFacilityList represents the ServiceReservationFacilityList element
// List of RESERVATION FACILITies UIC 7037 Code list.
type ServiceReservationFacilityList struct {
	Value ReservationEnumeration `xml:"value" json:"value"`
}

// ReservedSpaceFacility represents the ReservedSpaceFacility element
// Classification of RESERVED SPACE FACILITY.
type ReservedSpaceFacility struct {
	Value ReservedSpaceFacilityEnumeration `xml:",chardata" json:"value"`
}

// ReservedSpaceFacilityList represents the ReservedSpaceFacilityList element
// List of RESERVED SPACE FACILITies.
type ReservedSpaceFacilityList struct {
	Value ReservedSpaceFacilityEnumeration `xml:"value" json:"value"`
}

// RetailFacility represents the RetailFacility element
// Classification of RETAIL FACILITY.
type RetailFacility struct {
	Value RetailFacilityEnumeration `xml:",chardata" json:"value"`
}

// RetailFacilityList represents the RetailFacilityList element
// List of RETAIL FACILITies.
type RetailFacilityList struct {
	Value RetailFacilityEnumeration `xml:"value" json:"value"`
}

// SafetyFacility represents the SafetyFacility element
// Classification of SAFETY FACILITY type - TPEG pti23.
type SafetyFacility struct {
	Value SafetyFacilityEnumeration `xml:",chardata" json:"value"`
}

// SafetyFacilityList represents the SafetyFacilityList element
// List of SAFETY FACILITies.
type SafetyFacilityList struct {
	Value SafetyFacilityEnumeration `xml:"value" json:"value"`
}

// SanitaryFacility represents the SanitaryFacility element
// Classification of Sanitary FACILITY type - TPEG pti23.
type SanitaryFacility struct {
	Value SanitaryFacilityEnumeration `xml:",chardata" json:"value"`
}

// SanitaryFacilityList represents the SanitaryFacilityList element
// List of SANITARY FACILITies.
type SanitaryFacilityList struct {
	Value SanitaryFacilityEnumeration `xml:"value" json:"value"`
}

// GenderLimitation represents the GenderLimitation element
// Classification GENDER LIMITATION.
type GenderLimitation struct {
	Value GenderLimitationEnumeration `xml:",chardata" json:"value"`
}

// Staffing represents the Staffing element
// Classification of STAFFING.
type Staffing struct {
	Value StaffingEnumeration `xml:",chardata" json:"value"`
}

// ScopeOfTicket represents the ScopeOfTicket element
// Classification of SCOPEs of TICKET, eg national international.
type ScopeOfTicket struct {
	Value ScopeOfTicketEnumeration `xml:",chardata" json:"value"`
}

// ScopeOfTicketList represents the ScopeOfTicketList element
// List of SCOPEs of TICKET.
type ScopeOfTicketList struct {
	Value ScopeOfTicketEnumeration `xml:"value" json:"value"`
}

// TicketingFacility represents the TicketingFacility element
// Classification of TICKETING FACILITY type - eg TicketOffice, Machine, etc.
type TicketingFacility struct {
	Value TicketingFacilityEnumeration `xml:",chardata" json:"value"`
}

// TicketingFacilityList represents the TicketingFacilityList element
// List of TICKETING FACILITies.
type TicketingFacilityList struct {
	Value TicketingFacilityEnumeration `xml:"value" json:"value"`
}

// TicketingServiceFacility represents the TicketingServiceFacility element
// Classification of TICKETING FACILITY type - TPEG pti23.
type TicketingServiceFacility struct {
	Value TicketingServiceFacilityEnumeration `xml:",chardata" json:"value"`
}

// TicketingServiceFacilityList represents the TicketingServiceFacilityList element
// List of TICKETING SERVICE FACILITies, e.g. purchase, collection. top up.
type TicketingServiceFacilityList struct {
	Value TicketingServiceFacilityEnumeration `xml:"value" json:"value"`
}

// UicTrainRate represents the UicTrainRate element
// Classification of UIC Rate Type FACILITY type - UIC 5163 Code list.
type UicTrainRate struct {
	Value UicRateTypeEnumeration `xml:",chardata" json:"value"`
}

// UicProductCharacteristic represents the UicProductCharacteristic element
// Classification of UIC Product Characteristics type - UIC 7139 Code list.
type UicProductCharacteristic struct {
	Value UicProductCharacteristicEnumeration `xml:",chardata" json:"value"`
}

// UicProductCharacteristicList represents the UicProductCharacteristicList element
// List of UIC Product Characteristics UIC 7139 Code list.
type UicProductCharacteristicList struct {
	Value UicProductCharacteristicEnumeration `xml:"value" json:"value"`
}

// MedicalFacility represents the MedicalFacility element
// Classification of MEDICAL FACILITY type - TPEG pti23.
type MedicalFacility struct {
	Value MedicalFacilityEnumeration `xml:",chardata" json:"value"`
}

// MedicalFacilityList represents the MedicalFacilityList element
// List of MEDICAL FACILITies.
type MedicalFacilityList struct {
	Value MedicalFacilityEnumeration `xml:"value" json:"value"`
}

// CheckProcessTypeEnumeration represents the CheckProcessTypeEnumeration enumeration
// Allowed values for a CHECK CONSTRAINT process.
type CheckProcessTypeEnumeration string

const (
	// CheckProcessTypeEnumerationNone represents none
	CheckProcessTypeEnumerationNone CheckProcessTypeEnumeration = "none"
	// CheckProcessTypeEnumerationUnknown represents unknown
	CheckProcessTypeEnumerationUnknown CheckProcessTypeEnumeration = "unknown"
	// CheckProcessTypeEnumerationBoarding represents boarding
	CheckProcessTypeEnumerationBoarding CheckProcessTypeEnumeration = "boarding"
	// CheckProcessTypeEnumerationAlighting represents alighting
	CheckProcessTypeEnumerationAlighting CheckProcessTypeEnumeration = "alighting"
	// CheckProcessTypeEnumerationTicketPurchase represents ticketPurchase
	CheckProcessTypeEnumerationTicketPurchase CheckProcessTypeEnumeration = "ticketPurchase"
	// CheckProcessTypeEnumerationTicketCollection represents ticketCollection
	CheckProcessTypeEnumerationTicketCollection CheckProcessTypeEnumeration = "ticketCollection"
	// CheckProcessTypeEnumerationTicketValidation represents ticketValidation
	CheckProcessTypeEnumerationTicketValidation CheckProcessTypeEnumeration = "ticketValidation"
	// CheckProcessTypeEnumerationBaggageCheckIn represents baggageCheckIn
	CheckProcessTypeEnumerationBaggageCheckIn CheckProcessTypeEnumeration = "baggageCheckIn"
	// CheckProcessTypeEnumerationCheckout represents checkout
	CheckProcessTypeEnumerationCheckout CheckProcessTypeEnumeration = "checkout"
	// CheckProcessTypeEnumerationOversizeBaggageCheckIn represents oversizeBaggageCheckIn
	CheckProcessTypeEnumerationOversizeBaggageCheckIn CheckProcessTypeEnumeration = "oversizeBaggageCheckIn"
	// CheckProcessTypeEnumerationOversizeBaggageReclaim represents oversizeBaggageReclaim
	CheckProcessTypeEnumerationOversizeBaggageReclaim CheckProcessTypeEnumeration = "oversizeBaggageReclaim"
	// CheckProcessTypeEnumerationBaggageReclaim represents baggageReclaim
	CheckProcessTypeEnumerationBaggageReclaim CheckProcessTypeEnumeration = "baggageReclaim"
	// CheckProcessTypeEnumerationLeftLuggageDeposit represents leftLuggageDeposit
	CheckProcessTypeEnumerationLeftLuggageDeposit CheckProcessTypeEnumeration = "leftLuggageDeposit"
	// CheckProcessTypeEnumerationLeftLuggageReclaim represents leftLuggageReclaim
	CheckProcessTypeEnumerationLeftLuggageReclaim CheckProcessTypeEnumeration = "leftLuggageReclaim"
	// CheckProcessTypeEnumerationFirstclassCheckin represents firstclassCheckin
	CheckProcessTypeEnumerationFirstclassCheckin CheckProcessTypeEnumeration = "firstclassCheckin"
	// CheckProcessTypeEnumerationSpecialNeedsCheckin represents specialNeedsCheckin
	CheckProcessTypeEnumerationSpecialNeedsCheckin CheckProcessTypeEnumeration = "specialNeedsCheckin"
	// CheckProcessTypeEnumerationBaggageSecurityCheck represents baggageSecurityCheck
	CheckProcessTypeEnumerationBaggageSecurityCheck CheckProcessTypeEnumeration = "baggageSecurityCheck"
	// CheckProcessTypeEnumerationSecurityCheck represents securityCheck
	CheckProcessTypeEnumerationSecurityCheck CheckProcessTypeEnumeration = "securityCheck"
	// CheckProcessTypeEnumerationOutgoingPassportControl represents outgoingPassportControl
	CheckProcessTypeEnumerationOutgoingPassportControl CheckProcessTypeEnumeration = "outgoingPassportControl"
	// CheckProcessTypeEnumerationIncomingPassportControl represents incomingPassportControl
	CheckProcessTypeEnumerationIncomingPassportControl CheckProcessTypeEnumeration = "incomingPassportControl"
	// CheckProcessTypeEnumerationFasttrackDepartures represents fasttrackDepartures
	CheckProcessTypeEnumerationFasttrackDepartures CheckProcessTypeEnumeration = "fasttrackDepartures"
	// CheckProcessTypeEnumerationFasttrackArrivals represents fasttrackArrivals
	CheckProcessTypeEnumerationFasttrackArrivals CheckProcessTypeEnumeration = "fasttrackArrivals"
	// CheckProcessTypeEnumerationIncomingDutyFree represents incomingDutyFree
	CheckProcessTypeEnumerationIncomingDutyFree CheckProcessTypeEnumeration = "incomingDutyFree"
	// CheckProcessTypeEnumerationOutgoingDutyFree represents outgoingDutyFree
	CheckProcessTypeEnumerationOutgoingDutyFree CheckProcessTypeEnumeration = "outgoingDutyFree"
	// CheckProcessTypeEnumerationTaxRefunds represents taxRefunds
	CheckProcessTypeEnumerationTaxRefunds CheckProcessTypeEnumeration = "taxRefunds"
	// CheckProcessTypeEnumerationOutgoingCustoms represents outgoingCustoms
	CheckProcessTypeEnumerationOutgoingCustoms CheckProcessTypeEnumeration = "outgoingCustoms"
	// CheckProcessTypeEnumerationIncomingCustoms represents incomingCustoms
	CheckProcessTypeEnumerationIncomingCustoms CheckProcessTypeEnumeration = "incomingCustoms"
	// CheckProcessTypeEnumerationWaitForLift represents waitForLift
	CheckProcessTypeEnumerationWaitForLift CheckProcessTypeEnumeration = "waitForLift"
	// CheckProcessTypeEnumerationIngress represents ingress
	CheckProcessTypeEnumerationIngress CheckProcessTypeEnumeration = "ingress"
	// CheckProcessTypeEnumerationEgress represents egress
	CheckProcessTypeEnumerationEgress CheckProcessTypeEnumeration = "egress"
	// CheckProcessTypeEnumerationQueue represents queue
	CheckProcessTypeEnumerationQueue CheckProcessTypeEnumeration = "queue"
	// CheckProcessTypeEnumerationVehicleLoading represents vehicleLoading
	CheckProcessTypeEnumerationVehicleLoading CheckProcessTypeEnumeration = "vehicleLoading"
	// CheckProcessTypeEnumerationVehicleUnloading represents vehicleUnloading
	CheckProcessTypeEnumerationVehicleUnloading CheckProcessTypeEnumeration = "vehicleUnloading"
	// CheckProcessTypeEnumerationOther represents other
	CheckProcessTypeEnumerationOther CheckProcessTypeEnumeration = "other"
)

// CheckServiceEnumeration represents the CheckServiceEnumeration enumeration
// Allowed values for a CHECK CONSTRAINT service.
type CheckServiceEnumeration string

const (
	// CheckServiceEnumerationSelfService represents selfService
	CheckServiceEnumerationSelfService CheckServiceEnumeration = "selfService"
	// CheckServiceEnumerationCounterService represents counterService
	CheckServiceEnumerationCounterService CheckServiceEnumeration = "counterService"
	// CheckServiceEnumerationAnyService represents anyService
	CheckServiceEnumerationAnyService CheckServiceEnumeration = "anyService"
	// CheckServiceEnumerationOther represents other
	CheckServiceEnumerationOther CheckServiceEnumeration = "other"
)

// AccessFeatureEnumeration represents the AccessFeatureEnumeration enumeration
// Allowed values for an access feature.
type AccessFeatureEnumeration string

const (
	// AccessFeatureEnumerationLift represents lift
	AccessFeatureEnumerationLift AccessFeatureEnumeration = "lift"
	// AccessFeatureEnumerationEscalator represents escalator
	AccessFeatureEnumerationEscalator AccessFeatureEnumeration = "escalator"
	// AccessFeatureEnumerationFreightElevator represents freightElevator
	AccessFeatureEnumerationFreightElevator AccessFeatureEnumeration = "freightElevator"
	// AccessFeatureEnumerationTravelator represents travelator
	AccessFeatureEnumerationTravelator AccessFeatureEnumeration = "travelator"
	// AccessFeatureEnumerationRamp represents ramp
	AccessFeatureEnumerationRamp AccessFeatureEnumeration = "ramp"
	// AccessFeatureEnumerationStairs represents stairs
	AccessFeatureEnumerationStairs AccessFeatureEnumeration = "stairs"
	// AccessFeatureEnumerationSeriesOfStairs represents seriesOfStairs
	AccessFeatureEnumerationSeriesOfStairs AccessFeatureEnumeration = "seriesOfStairs"
	// AccessFeatureEnumerationShuttle represents shuttle
	AccessFeatureEnumerationShuttle AccessFeatureEnumeration = "shuttle"
	// AccessFeatureEnumerationCrossing represents crossing
	AccessFeatureEnumerationCrossing AccessFeatureEnumeration = "crossing"
	// AccessFeatureEnumerationBarrier represents barrier
	AccessFeatureEnumerationBarrier AccessFeatureEnumeration = "barrier"
	// AccessFeatureEnumerationNarrowEntrance represents narrowEntrance
	AccessFeatureEnumerationNarrowEntrance AccessFeatureEnumeration = "narrowEntrance"
	// AccessFeatureEnumerationHall represents hall
	AccessFeatureEnumerationHall AccessFeatureEnumeration = "hall"
	// AccessFeatureEnumerationConcourse represents concourse
	AccessFeatureEnumerationConcourse AccessFeatureEnumeration = "concourse"
	// AccessFeatureEnumerationConfinedSpace represents confinedSpace
	AccessFeatureEnumerationConfinedSpace AccessFeatureEnumeration = "confinedSpace"
	// AccessFeatureEnumerationQueueManagement represents queueManagement
	AccessFeatureEnumerationQueueManagement AccessFeatureEnumeration = "queueManagement"
	// AccessFeatureEnumerationNone represents none
	AccessFeatureEnumerationNone AccessFeatureEnumeration = "none"
	// AccessFeatureEnumerationUnknown represents unknown
	AccessFeatureEnumerationUnknown AccessFeatureEnumeration = "unknown"
	// AccessFeatureEnumerationOther represents other
	AccessFeatureEnumerationOther AccessFeatureEnumeration = "other"
	// AccessFeatureEnumerationOpenSpace represents openSpace
	AccessFeatureEnumerationOpenSpace AccessFeatureEnumeration = "openSpace"
	// AccessFeatureEnumerationStreet represents street
	AccessFeatureEnumerationStreet AccessFeatureEnumeration = "street"
	// AccessFeatureEnumerationPavement represents pavement
	AccessFeatureEnumerationPavement AccessFeatureEnumeration = "pavement"
	// AccessFeatureEnumerationFootpath represents footpath
	AccessFeatureEnumerationFootpath AccessFeatureEnumeration = "footpath"
	// AccessFeatureEnumerationPassage represents passage
	AccessFeatureEnumerationPassage AccessFeatureEnumeration = "passage"
)

// CongestionEnumeration represents the CongestionEnumeration enumeration
// Allowed values for a congestion.
type CongestionEnumeration string

const (
	// CongestionEnumerationNoWaiting represents noWaiting
	CongestionEnumerationNoWaiting CongestionEnumeration = "noWaiting"
	// CongestionEnumerationQueue represents queue
	CongestionEnumerationQueue CongestionEnumeration = "queue"
	// CongestionEnumerationCrowding represents crowding
	CongestionEnumerationCrowding CongestionEnumeration = "crowding"
	// CongestionEnumerationFull represents full
	CongestionEnumerationFull CongestionEnumeration = "full"
)

// CheckDirectionEnumeration represents the CheckDirectionEnumeration enumeration
// Allowed values for CHECK CONSTRAINT direction.
type CheckDirectionEnumeration string

const (
	// CheckDirectionEnumerationForwards represents forwards
	CheckDirectionEnumerationForwards CheckDirectionEnumeration = "forwards"
	// CheckDirectionEnumerationBackwards represents backwards
	CheckDirectionEnumerationBackwards CheckDirectionEnumeration = "backwards"
	// CheckDirectionEnumerationBothWays represents bothWays
	CheckDirectionEnumerationBothWays CheckDirectionEnumeration = "bothWays"
)

// TypeOfCongestionRefStructure represents the TypeOfCongestionRefStructure element
// Type for a TYPE OF CONGESTION.
type TypeOfCongestionRefStructure struct {
	TypeOfValueRefStructure
}

// CheckConstraintRefStructure represents the CheckConstraintRefStructure element
// Type for a reference to a CHECK CONSTRAINT.
type CheckConstraintRefStructure struct {
	AssignmentRefStructure
}

// CheckConstraintDelayRefStructure represents the CheckConstraintDelayRefStructure element
// Type for a reference to a CHECK CONSTRAINT DELAY.
type CheckConstraintDelayRefStructure struct {
	AssignmentRefStructure
}

// CheckConstraintThroughputRefStructure represents the CheckConstraintThroughputRefStructure element
// Type for a reference to a CHECK CONSTRAINT THROUGHPUT.
type CheckConstraintThroughputRefStructure struct {
	AssignmentRefStructure
}

// TypeOfCongestionRef represents the TypeOfCongestionRef element
// Reference to a TYPE OF CONGESTION.
type TypeOfCongestionRef struct {
	TypeOfCongestionRefStructure
}

// CheckConstraintRef represents the CheckConstraintRef element
// Identifier of a CHECK CONSTRAINT.
type CheckConstraintRef struct {
	CheckConstraintRefStructure
}

// CheckConstraintDelayRef represents the CheckConstraintDelayRef element
// Identifier of a CHECK CONSTRAINT DELAY.
type CheckConstraintDelayRef struct {
	CheckConstraintDelayRefStructure
}

// CheckConstraintThroughputRef represents the CheckConstraintThroughputRef element
// Identifier of a CHECK CONSTRAINT THROUGHPUT.
type CheckConstraintThroughputRef struct {
	CheckConstraintThroughputRefStructure
}

// CheckConstraintInFrameRelStructure represents the checkConstraintInFrame_RelStructure element
// Type for containment in frame of CHECK CONSTRAINTs.
type CheckConstraintInFrameRelStructure struct {
	ContainmentAggregationStructure
	CheckConstraint []CheckConstraint `xml:"CheckConstraint" json:"CheckConstraint"`
}

// CheckConstraintDelaysInFrameRelStructure represents the checkConstraintDelaysInFrame_RelStructure element
// Type for containment in frame of CHECK CONSTRAINT DELAYs.
type CheckConstraintDelaysInFrameRelStructure struct {
	ContainmentAggregationStructure
	CheckConstraintDelay []CheckConstraintDelay `xml:"CheckConstraintDelay" json:"CheckConstraintDelay"`
}

// CheckConstraintThroughputsInFrameRelStructure represents the checkConstraintThroughputsInFrame_RelStructure element
// Type for containment in frame of CHECK CONSTRAINT DELAYs.
type CheckConstraintThroughputsInFrameRelStructure struct {
	ContainmentAggregationStructure
	CheckConstraintDelay []CheckConstraintDelay `xml:"CheckConstraintDelay" json:"CheckConstraintDelay"`
}

// CheckConstraintsRelStructure represents the checkConstraints_RelStructure element
// Type for a list of CHECK CONSTRAINTs.
type CheckConstraintsRelStructure struct {
	ContainmentAggregationStructure
	CheckConstraintRef []CheckConstraintRef `xml:"CheckConstraintRef,omitempty" json:"CheckConstraintRef,omitempty"`
	// Process associated with a Place, typically giving rise to a delay to the traveller.
	CheckConstraint []CheckConstraint `xml:"CheckConstraint,omitempty" json:"CheckConstraint,omitempty"`
}

// CheckConstraintVersionStructure represents the CheckConstraint_VersionStructure element
// Type for a CHECK CONSTRAINT.
type CheckConstraintVersionStructure struct {
	AssignmentVersionStructure1
	PlaceRef *PlaceRef `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
	// For CHECK CONSTRAINTs associated with PATH LINKs, the direction in which the check applies. Forwards = from/to, backwards = to/from. For Check constraints associated with an external ENTRANCE, forwards is into the SITE, backwards is out of the SITE.
	CheckDirection *CheckDirectionEnumeration `xml:"CheckDirection,omitempty" json:"CheckDirection,omitempty"`
	// Type of process that may occur at CHECK CONSTRAINT.
	CheckProcess *CheckProcessTypeEnumeration `xml:"CheckProcess,omitempty" json:"CheckProcess,omitempty"`
	// Nature of service that may occur at CHECK CONSTRAINT.
	CheckService *CheckServiceEnumeration `xml:"CheckService,omitempty" json:"CheckService,omitempty"`
	// Type of physical feature that may slow use of CHECK CONSTRAINT.
	AccessFeatureType *AccessFeatureEnumeration `xml:"AccessFeatureType,omitempty" json:"AccessFeatureType,omitempty"`
	// Type of crowding that may slow use of CHECK CONSTRAINT.
	Congestion *CongestionEnumeration `xml:"Congestion,omitempty" json:"Congestion,omitempty"`
	TypeOfCongestionRef *TypeOfCongestionRef `xml:"TypeOfCongestionRef,omitempty" json:"TypeOfCongestionRef,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	TypeOfEquipmentRef *TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	FacilityRef *FacilityRef `xml:"FacilityRef,omitempty" json:"FacilityRef,omitempty"`
	RetailDeviceRef *RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	ActivatedEquipmentRef *ActivatedEquipmentRef `xml:"ActivatedEquipmentRef,omitempty" json:"ActivatedEquipmentRef,omitempty"`
	BatteryEquipmentRef *BatteryEquipmentRef `xml:"BatteryEquipmentRef,omitempty" json:"BatteryEquipmentRef,omitempty"`
	RefuellingEquipmentRef *RefuellingEquipmentRef `xml:"RefuellingEquipmentRef,omitempty" json:"RefuellingEquipmentRef,omitempty"`
	VehicleChargingEquipmentRef *VehicleChargingEquipmentRef `xml:"VehicleChargingEquipmentRef,omitempty" json:"VehicleChargingEquipmentRef,omitempty"`
	AssistanceBookingServiceRef *AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef *CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef *RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef *MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef *HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef *CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef *MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef *LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef *LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef *LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef *ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef *CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef *AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef *TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef *LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	VehicleReleaseEquipmentRef *VehicleReleaseEquipmentRef `xml:"VehicleReleaseEquipmentRef,omitempty" json:"VehicleReleaseEquipmentRef,omitempty"`
	TicketValidatorEquipmentRef *TicketValidatorEquipmentRef `xml:"TicketValidatorEquipmentRef,omitempty" json:"TicketValidatorEquipmentRef,omitempty"`
	TicketingEquipmentRef *TicketingEquipmentRef `xml:"TicketingEquipmentRef,omitempty" json:"TicketingEquipmentRef,omitempty"`
	PassengerInformationEquipmentRef *PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef *CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef *TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef *SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef *ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef *LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef *WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef *WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef *SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef *PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef *RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef *StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef *QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef *TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef *EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef *LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef *LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef *CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef *RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef *EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef *HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef *GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef *PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef *SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef *RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef *PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef *HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef *PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef *SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef *WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef *AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef *VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef *PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	EquipmentRef *EquipmentRef `xml:"EquipmentRef,omitempty" json:"EquipmentRef,omitempty"`
	// Delays for CHECK CONSTRAINT .process.
	Delays *CheckConstraintDelaysRelStructure `xml:"delays,omitempty" json:"delays,omitempty"`
	// Throughput for CHECK CONSTRAINT.
	Throughput *CheckConstraintThroughputsRelStructure `xml:"throughput,omitempty" json:"throughput,omitempty"`
}

// CheckConstraintDelaysRelStructure represents the checkConstraintDelays_RelStructure element
// A collection of one or more CHECK CONSTRAINTs.
type CheckConstraintDelaysRelStructure struct {
	StrictContainmentAggregationStructure
	CheckConstraintDelayRef []CheckConstraintDelayRef `xml:"CheckConstraintDelayRef,omitempty" json:"CheckConstraintDelayRef,omitempty"`
	CheckConstraintDelay []CheckConstraintDelay `xml:"CheckConstraintDelay,omitempty" json:"CheckConstraintDelay,omitempty"`
}

// CheckConstraintDelayVersionStructure represents the CheckConstraintDelay_VersionStructure element
// Type for a CHECK CONSTRAINT DELAY.
type CheckConstraintDelayVersionStructure struct {
	AssignmentVersionStructure1
	// Reference to a CHECK CONSTRAINT. Can be omitted if given by context.
	CheckConstraintRef *CheckConstraintRef `xml:"CheckConstraintRef,omitempty" json:"CheckConstraintRef,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	// Minimum duration needed to pass through CHECK CONSTRAINT.
	MinimumLikelyDelay *string `xml:"MinimumLikelyDelay,omitempty" json:"MinimumLikelyDelay,omitempty"`
	// Average duration expected to pass through Check.
	AverageDelay *string `xml:"AverageDelay,omitempty" json:"AverageDelay,omitempty"`
	// Maximum duration expected to pass through CHECK CONSTRAINT.
	MaximumLikelyDelay *string `xml:"MaximumLikelyDelay,omitempty" json:"MaximumLikelyDelay,omitempty"`
}

// CheckConstraintThroughputsRelStructure represents the checkConstraintThroughputs_RelStructure element
// A collection of one or more CHECK CONSTRAINTs.
type CheckConstraintThroughputsRelStructure struct {
	StrictContainmentAggregationStructure
	CheckConstraintThroughputRef []CheckConstraintThroughputRef `xml:"CheckConstraintThroughputRef,omitempty" json:"CheckConstraintThroughputRef,omitempty"`
	CheckConstraintThroughput []CheckConstraintThroughput `xml:"CheckConstraintThroughput,omitempty" json:"CheckConstraintThroughput,omitempty"`
}

// CheckConstraintThroughputVersionStructure represents the CheckConstraintThroughput_VersionStructure element
// Type for a CHECK CONSTRAINT THROUGHPUT.
type CheckConstraintThroughputVersionStructure struct {
	AssignmentVersionStructure1
	CheckConstraintRef *CheckConstraintRef `xml:"CheckConstraintRef,omitempty" json:"CheckConstraintRef,omitempty"`
	// Interval for measurement.
	Period *string `xml:"Period,omitempty" json:"Period,omitempty"`
	// Maximum number of passengers.
	MaximumPassengers *int `xml:"MaximumPassengers,omitempty" json:"MaximumPassengers,omitempty"`
	// Average number of passengers.
	AveragePassengers *int `xml:"AveragePassengers,omitempty" json:"AveragePassengers,omitempty"`
	// Maximum number of wheelchair passengers.
	WheelchairPassengers *int `xml:"WheelchairPassengers,omitempty" json:"WheelchairPassengers,omitempty"`
}

// TypeOfCongestionValueStructure represents the TypeOfCongestion_ValueStructure element
// Type for a TYPE OF CONGESTION.
type TypeOfCongestionValueStructure struct {
	TypeOfEntityVersionStructure
}

// CheckConstraint represents the CheckConstraint element
// Characteristics of a SITE COMPONENT representing a process, such as check-in, security
// screening, ticket control or immigration, that may potentially incur a time penalty that should be allowed for when journey planning. Used to mark PATH LINKs to determine transit routes through interchanges.
type CheckConstraint struct {
	CheckConstraintVersionStructure
}

// CheckConstraintDelay represents the CheckConstraintDelay element
// Time penalty associated with a CHECK CONSTRAINT.
type CheckConstraintDelay struct {
	CheckConstraintDelayVersionStructure
}

// CheckConstraintThroughput represents the CheckConstraintThroughput element
// Throughput of a CHECK CONSTRAINT. the number of passengers who can pass through it.
type CheckConstraintThroughput struct {
	CheckConstraintThroughputVersionStructure
}

// TypeOfCongestion represents the TypeOfCongestion element
// A classification of CONGESTIONs according to their functional purpose.
type TypeOfCongestion struct {
	TypeOfCongestionValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// AssistedBoardingLocationEnumeration represents the AssistedBoardingLocationEnumeration enumeration
// Allowed values for  assisted boarding locations.
type AssistedBoardingLocationEnumeration string

const (
	// AssistedBoardingLocationEnumerationBoardAtAnyDoor represents boardAtAnyDoor
	AssistedBoardingLocationEnumerationBoardAtAnyDoor AssistedBoardingLocationEnumeration = "boardAtAnyDoor"
	// AssistedBoardingLocationEnumerationBoardOnlyAtSpecifiedPositions represents boardOnlyAtSpecifiedPositions
	AssistedBoardingLocationEnumerationBoardOnlyAtSpecifiedPositions AssistedBoardingLocationEnumeration = "boardOnlyAtSpecifiedPositions"
	// AssistedBoardingLocationEnumerationUnknown represents unknown
	AssistedBoardingLocationEnumerationUnknown AssistedBoardingLocationEnumeration = "unknown"
)

// AssistanceNeededEnumeration represents the AssistanceNeededEnumeration enumeration
// Allowed values for  assistance needed.
type AssistanceNeededEnumeration string

const (
	// AssistanceNeededEnumerationLevelAccess represents levelAccess
	AssistanceNeededEnumerationLevelAccess AssistanceNeededEnumeration = "levelAccess"
	// AssistanceNeededEnumerationStepNegotiation represents stepNegotiation
	AssistanceNeededEnumerationStepNegotiation AssistanceNeededEnumeration = "stepNegotiation"
	// AssistanceNeededEnumerationRampRequired represents rampRequired
	AssistanceNeededEnumerationRampRequired AssistanceNeededEnumeration = "rampRequired"
	// AssistanceNeededEnumerationHoistRequired represents hoistRequired
	AssistanceNeededEnumerationHoistRequired AssistanceNeededEnumeration = "hoistRequired"
	// AssistanceNeededEnumerationUnknown represents unknown
	AssistanceNeededEnumerationUnknown AssistanceNeededEnumeration = "unknown"
)

// VehicleEquipmentRefStructure represents the VehicleEquipmentRefStructure element
// Type for a reference to a WHEELCHAIR VEHICLE EQUIPMENT.
type VehicleEquipmentRefStructure struct {
	PassengerEquipmentRefStructure
}

// AccessVehicleEquipmentRefStructure represents the AccessVehicleEquipmentRefStructure element
// Type for a reference to an ACCESS VEHICLE EQUIPMENT.
type AccessVehicleEquipmentRefStructure struct {
	VehicleEquipmentRefStructure
}

// WheelchairVehicleRefStructure represents the WheelchairVehicleRefStructure element
// Type for a reference to a WHEELCHAIR VEHICLE EQUIPMENT.
type WheelchairVehicleRefStructure struct {
	VehicleEquipmentRefStructure
}

// VehicleEquipmentRef represents the VehicleEquipmentRef element
// Reference to a WHEELCHAIR VEHICLE EQUIPMENT.
type VehicleEquipmentRef struct {
	VehicleEquipmentRefStructure
}

// AccessVehicleEquipmentRef represents the AccessVehicleEquipmentRef element
// Reference to an ACCESS VEHICLE EQUIPMENT.
type AccessVehicleEquipmentRef struct {
	AccessVehicleEquipmentRefStructure
}

// WheelchairVehicleRef represents the WheelchairVehicleRef element
// Reference to a WHEELCHAIR VEHICLE EQUIPMENT.
type WheelchairVehicleRef struct {
	WheelchairVehicleRefStructure
}

// FuelTypeEnumeration represents the FuelTypeEnumeration enumeration
// Allowed values for type of fuel.
type FuelTypeEnumeration string

const (
	// FuelTypeEnumerationBattery represents battery
	FuelTypeEnumerationBattery FuelTypeEnumeration = "battery"
	// FuelTypeEnumerationBiodiesel represents biodiesel
	FuelTypeEnumerationBiodiesel FuelTypeEnumeration = "biodiesel"
	// FuelTypeEnumerationDiesel represents diesel
	FuelTypeEnumerationDiesel FuelTypeEnumeration = "diesel"
	// FuelTypeEnumerationDieselBatteryHybrid represents dieselBatteryHybrid
	FuelTypeEnumerationDieselBatteryHybrid FuelTypeEnumeration = "dieselBatteryHybrid"
	// FuelTypeEnumerationElectricContact represents electricContact
	FuelTypeEnumerationElectricContact FuelTypeEnumeration = "electricContact"
	// FuelTypeEnumerationElectricity represents electricity
	FuelTypeEnumerationElectricity FuelTypeEnumeration = "electricity"
	// FuelTypeEnumerationEthanol represents ethanol
	FuelTypeEnumerationEthanol FuelTypeEnumeration = "ethanol"
	// FuelTypeEnumerationHydrogen represents hydrogen
	FuelTypeEnumerationHydrogen FuelTypeEnumeration = "hydrogen"
	// FuelTypeEnumerationLiquidGas represents liquidGas
	FuelTypeEnumerationLiquidGas FuelTypeEnumeration = "liquidGas"
	// FuelTypeEnumerationTpg represents tpg
	FuelTypeEnumerationTpg FuelTypeEnumeration = "tpg"
	// FuelTypeEnumerationMethane represents methane
	FuelTypeEnumerationMethane FuelTypeEnumeration = "methane"
	// FuelTypeEnumerationNaturalGas represents naturalGas
	FuelTypeEnumerationNaturalGas FuelTypeEnumeration = "naturalGas"
	// FuelTypeEnumerationPetrol represents petrol
	FuelTypeEnumerationPetrol FuelTypeEnumeration = "petrol"
	// FuelTypeEnumerationPetrolBatteryHybrid represents petrolBatteryHybrid
	FuelTypeEnumerationPetrolBatteryHybrid FuelTypeEnumeration = "petrolBatteryHybrid"
	// FuelTypeEnumerationPetrolLeaded represents petrolLeaded
	FuelTypeEnumerationPetrolLeaded FuelTypeEnumeration = "petrolLeaded"
	// FuelTypeEnumerationPetrolUnleaded represents petrolUnleaded
	FuelTypeEnumerationPetrolUnleaded FuelTypeEnumeration = "petrolUnleaded"
	// FuelTypeEnumerationNone represents none
	FuelTypeEnumerationNone FuelTypeEnumeration = "none"
	// FuelTypeEnumerationOther represents other
	FuelTypeEnumerationOther FuelTypeEnumeration = "other"
)

// PropulsionTypeEnumeration represents the PropulsionTypeEnumeration enumeration
// Allowed values for type of power +v1.2.2
type PropulsionTypeEnumeration string

const (
	// PropulsionTypeEnumerationCombustion represents combustion
	PropulsionTypeEnumerationCombustion PropulsionTypeEnumeration = "combustion"
	// PropulsionTypeEnumerationElectric represents electric
	PropulsionTypeEnumerationElectric PropulsionTypeEnumeration = "electric"
	// PropulsionTypeEnumerationElectricAssist represents electricAssist
	PropulsionTypeEnumerationElectricAssist PropulsionTypeEnumeration = "electricAssist"
	// PropulsionTypeEnumerationHybrid represents hybrid
	PropulsionTypeEnumerationHybrid PropulsionTypeEnumeration = "hybrid"
	// PropulsionTypeEnumerationHuman represents human
	PropulsionTypeEnumerationHuman PropulsionTypeEnumeration = "human"
	// PropulsionTypeEnumerationOther represents other
	PropulsionTypeEnumerationOther PropulsionTypeEnumeration = "other"
)

// LicenceRequirementsEnumeration represents the LicenceRequirementsEnumeration enumeration
// Allowed values for licence requirements
type LicenceRequirementsEnumeration string

const (
	// LicenceRequirementsEnumerationFull represents full
	LicenceRequirementsEnumerationFull LicenceRequirementsEnumeration = "full"
	// LicenceRequirementsEnumerationProvisional represents provisional
	LicenceRequirementsEnumerationProvisional LicenceRequirementsEnumeration = "provisional"
	// LicenceRequirementsEnumerationAdditional represents additional
	LicenceRequirementsEnumerationAdditional LicenceRequirementsEnumeration = "additional"
	// LicenceRequirementsEnumerationNone represents none
	LicenceRequirementsEnumerationNone LicenceRequirementsEnumeration = "none"
)

// VehicleOrientationEnumeration represents the VehicleOrientationEnumeration enumeration
// Allowed values for Vehicle Orientation.
type VehicleOrientationEnumeration string

const (
	// VehicleOrientationEnumerationForwards represents forwards
	VehicleOrientationEnumerationForwards VehicleOrientationEnumeration = "forwards"
	// VehicleOrientationEnumerationBackwards represents backwards
	VehicleOrientationEnumerationBackwards VehicleOrientationEnumeration = "backwards"
	// VehicleOrientationEnumerationUnknown represents unknown
	VehicleOrientationEnumerationUnknown VehicleOrientationEnumeration = "unknown"
)

// SimpleVehicleCategoryEnumeration represents the SimpleVehicleCategoryEnumeration enumeration
// Allowed values for Personal Vehicle Categories +v1.2.2
type SimpleVehicleCategoryEnumeration string

const (
	// SimpleVehicleCategoryEnumerationScooter represents scooter
	SimpleVehicleCategoryEnumerationScooter SimpleVehicleCategoryEnumeration = "scooter"
	// SimpleVehicleCategoryEnumerationCycle represents cycle
	SimpleVehicleCategoryEnumerationCycle SimpleVehicleCategoryEnumeration = "cycle"
	// SimpleVehicleCategoryEnumerationTricycle represents tricycle
	SimpleVehicleCategoryEnumerationTricycle SimpleVehicleCategoryEnumeration = "tricycle"
	// SimpleVehicleCategoryEnumerationTandem represents tandem
	SimpleVehicleCategoryEnumerationTandem SimpleVehicleCategoryEnumeration = "tandem"
	// SimpleVehicleCategoryEnumerationMoped represents moped
	SimpleVehicleCategoryEnumerationMoped SimpleVehicleCategoryEnumeration = "moped"
	// SimpleVehicleCategoryEnumerationMotorcycle represents motorcycle
	SimpleVehicleCategoryEnumerationMotorcycle SimpleVehicleCategoryEnumeration = "motorcycle"
	// SimpleVehicleCategoryEnumerationQuadbike represents quadbike
	SimpleVehicleCategoryEnumerationQuadbike SimpleVehicleCategoryEnumeration = "quadbike"
	// SimpleVehicleCategoryEnumerationCar represents car
	SimpleVehicleCategoryEnumerationCar SimpleVehicleCategoryEnumeration = "car"
	// SimpleVehicleCategoryEnumerationMicroCar represents microCar
	SimpleVehicleCategoryEnumerationMicroCar SimpleVehicleCategoryEnumeration = "microCar"
	// SimpleVehicleCategoryEnumerationMiniCar represents miniCar
	SimpleVehicleCategoryEnumerationMiniCar SimpleVehicleCategoryEnumeration = "miniCar"
	// SimpleVehicleCategoryEnumerationSmallCar represents smallCar
	SimpleVehicleCategoryEnumerationSmallCar SimpleVehicleCategoryEnumeration = "smallCar"
	// SimpleVehicleCategoryEnumerationMediumCar represents mediumCar
	SimpleVehicleCategoryEnumerationMediumCar SimpleVehicleCategoryEnumeration = "mediumCar"
	// SimpleVehicleCategoryEnumerationLargeCar represents largeCar
	SimpleVehicleCategoryEnumerationLargeCar SimpleVehicleCategoryEnumeration = "largeCar"
	// SimpleVehicleCategoryEnumerationMinivan represents minivan
	SimpleVehicleCategoryEnumerationMinivan SimpleVehicleCategoryEnumeration = "minivan"
	// SimpleVehicleCategoryEnumerationTransporter represents transporter
	SimpleVehicleCategoryEnumerationTransporter SimpleVehicleCategoryEnumeration = "transporter"
	// SimpleVehicleCategoryEnumerationVan represents van
	SimpleVehicleCategoryEnumerationVan SimpleVehicleCategoryEnumeration = "van"
	// SimpleVehicleCategoryEnumerationSnowmobile represents snowmobile
	SimpleVehicleCategoryEnumerationSnowmobile SimpleVehicleCategoryEnumeration = "snowmobile"
)

// TransportTypeRefsRelStructure represents the transportTypeRefs_RelStructure element
// Type for a list of TRANSPORT TYPEs.
type TransportTypeRefsRelStructure struct {
	OneToManyRelationshipStructure
	SimpleVehicleTypeRef []SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef []CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef []TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef []VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef []TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
}

// TransportTypeRefStructure represents the TransportTypeRefStructure element
// Type for a reference to a TRANSPORT TYPE.
type TransportTypeRefStructure struct {
	VersionOfObjectRefStructure
}

// VehicleTypeRefsRelStructure represents the vehicleTypeRefs_RelStructure element
// Type for a list of VEHICLE TYPEs.
type VehicleTypeRefsRelStructure struct {
	OneToManyRelationshipStructure
	CompoundTrainRef []CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef []TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef []VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
}

// VehicleTypeRefStructure represents the VehicleTypeRefStructure element
// Type for a reference to a VEHICLE TYPE.
type VehicleTypeRefStructure struct {
	TransportTypeRefStructure
}

// SimpleVehicleTypeRefsRelStructure represents the simpleVehicleTypeRefs_RelStructure element
// Type for a list of PERSONAL TRANSPORT TYPEs.
type SimpleVehicleTypeRefsRelStructure struct {
	OneToManyRelationshipStructure
	SimpleVehicleTypeRef []SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef" json:"SimpleVehicleTypeRef"`
}

// SimpleVehicleTypeRefStructure represents the SimpleVehicleTypeRefStructure element
// Type for a reference to a PERSONAL TRANSPORT TYPE.
type SimpleVehicleTypeRefStructure struct {
	TransportTypeRefStructure
}

// VehicleRequirementRefStructure represents the VehicleRequirementRefStructure element
// Type for a reference to a VEHICLE REQUIREMENT.
type VehicleRequirementRefStructure struct {
	VersionOfObjectRefStructure
}

// PassengerCarryingRequirementRefStructure represents the PassengerCarryingRequirementRefStructure element
// Type for a reference to a PASSENGER CARRYING REQUIREMENT.
type PassengerCarryingRequirementRefStructure struct {
	VehicleRequirementRefStructure
}

// PassengerCapacityRefStructure represents the PassengerCapacityRefStructure element
// Type for a reference to a PASSENGER CAPACITY.
type PassengerCapacityRefStructure struct {
	VersionOfObjectRefStructure
}

// VehicleManoeuvringRequirementRefStructure represents the VehicleManoeuvringRequirementRefStructure element
// Type for a reference to a VEHICLE REQUIREMENT.
type VehicleManoeuvringRequirementRefStructure struct {
	VehicleRequirementRefStructure
}

// FacilityRequirementRefStructure represents the FacilityRequirementRefStructure element
// Type for a reference to a FACILITY REQUIRMENT.
type FacilityRequirementRefStructure struct {
	VehicleRequirementRefStructure
}

// VehicleRefsRelStructure represents the vehicleRefs_RelStructure element
// Type for a list of VEHICLEs.
type VehicleRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehicleRef []VehicleRef `xml:"VehicleRef" json:"VehicleRef"`
}

// VehicleRefStructure represents the VehicleRefStructure element
// Type for a reference to a VEHICLE.
type VehicleRefStructure struct {
	VersionOfObjectRefStructure
}

// VehicleModelRefStructure represents the VehicleModelRefStructure element
// Type for a reference to a VEHICLE MODEL.
type VehicleModelRefStructure struct {
	VersionOfObjectRefStructure
}

// VehicleEquipmentProfileRefsRelStructure represents the vehicleEquipmentProfileRefs_RelStructure element
// Type for a list of VEHICLE EQUIPMENT PROFILEs.
type VehicleEquipmentProfileRefsRelStructure struct {
	OneToManyRelationshipStructure
	ChargingEquipmentProfileRef []ChargingEquipmentProfileRef `xml:"ChargingEquipmentProfileRef,omitempty" json:"ChargingEquipmentProfileRef,omitempty"`
	VehicleEquipmentProfileRef []VehicleEquipmentProfileRef `xml:"VehicleEquipmentProfileRef,omitempty" json:"VehicleEquipmentProfileRef,omitempty"`
}

// VehicleEquipmentProfileRefStructure represents the VehicleEquipmentProfileRefStructure element
// Type for a reference to a VEHICLE EQUIPMENT PROFILE.
type VehicleEquipmentProfileRefStructure struct {
	VersionOfObjectRefStructure
}

// VehicleEquipmentProfileMemberRefsRelStructure represents the vehicleEquipmentProfileMemberRefs_RelStructure element
// Type for a list of VEHICLE EQUIPMENT PROFILE MEMBERs.
type VehicleEquipmentProfileMemberRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehicleEquipmentProfileMemberRef []VehicleEquipmentProfileMemberRef `xml:"VehicleEquipmentProfileMemberRef" json:"VehicleEquipmentProfileMemberRef"`
}

// VehicleEquipmentProfileMemberRefStructure represents the VehicleEquipmentProfileMemberRefStructure element
// Type for a reference to a VEHICLE EQUIPMENT PROFILE MEMBER.
type VehicleEquipmentProfileMemberRefStructure struct {
	VersionOfObjectRefStructure
}

// VehicleProfileRefStructure represents the VehicleProfileRefStructure element
// Type for a reference to a VEHICLE PROFILE.
type VehicleProfileRefStructure struct {
	VersionOfObjectRefStructure
}

// PurposeOfEquipmentProfileRefStructure represents the PurposeOfEquipmentProfileRefStructure element
// Type for a reference to a PURPOSE OF EQUIPMENT PROFILE.
type PurposeOfEquipmentProfileRefStructure struct {
	TypeOfValueRefStructure
}

// AcceptedDriverPermitRefStructure represents the AcceptedDriverPermitRefStructure element
// Type for a reference to a ACCEPTED DRIVER PERMIT.
type AcceptedDriverPermitRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfDriverPermitRefStructure represents the TypeOfDriverPermitRefStructure element
// Type for a reference to a TYPE OF DRIVER PERMIT.
type TypeOfDriverPermitRefStructure struct {
	TypeOfValueRefStructure
}

// TransportTypeRef represents the TransportTypeRef element
// Reference to a TRANSPORT TYPE. +v1.2.2
type TransportTypeRef struct {
	TransportTypeRefStructure
}

// VehicleTypeRef represents the VehicleTypeRef element
// Reference to a VEHICLE TYPE.
type VehicleTypeRef struct {
	VehicleTypeRefStructure
}

// SimpleVehicleTypeRef represents the SimpleVehicleTypeRef element
// Reference to a PERSONAL TRANSPORT TYPE. +v1.2.2
type SimpleVehicleTypeRef struct {
	SimpleVehicleTypeRefStructure
}

// VehicleRequirementRef represents the VehicleRequirementRef element
// Reference to a VEHICLE REQUIREMENT.
type VehicleRequirementRef struct {
	VehicleRequirementRefStructure
}

// PassengerCarryingRequirementRef represents the PassengerCarryingRequirementRef element
// Reference to a PASSENGER CARRYING REQUIREMENT.
type PassengerCarryingRequirementRef struct {
	PassengerCarryingRequirementRefStructure
}

// PassengerCapacityRef represents the PassengerCapacityRef element
// Reference to a PASSENGER CAPACITY.
type PassengerCapacityRef struct {
	PassengerCapacityRefStructure
}

// VehicleManoeuvringRequirementRef represents the VehicleManoeuvringRequirementRef element
// Reference to a VEHICLE MANOEUVRING REQUIREMENT.
type VehicleManoeuvringRequirementRef struct {
	VehicleManoeuvringRequirementRefStructure
}

// FacilityRequirementRef represents the FacilityRequirementRef element
// Reference to a FACILITY REQUIREMENT.
type FacilityRequirementRef struct {
	FacilityRequirementRefStructure
}

// VehicleRef represents the VehicleRef element
// Reference to a VEHICLE.
type VehicleRef struct {
	VehicleRefStructure
}

// VehicleModelRef represents the VehicleModelRef element
// Reference to a VEHICLE MODEL.
type VehicleModelRef struct {
	VehicleModelRefStructure
}

// VehicleEquipmentProfileRef represents the VehicleEquipmentProfileRef element
// Reference to a VEHICLE EQUIPMENT PROFILE.
type VehicleEquipmentProfileRef struct {
	VehicleEquipmentProfileRefStructure
}

// VehicleEquipmentProfileMemberRef represents the VehicleEquipmentProfileMemberRef element
// Reference to a VEHICLE EQUIPMENT PROFILE MEMBER.
type VehicleEquipmentProfileMemberRef struct {
	VehicleEquipmentProfileMemberRefStructure
}

// VehicleProfileRef represents the VehicleProfileRef element
// Reference to a VEHICLE PROFILE
type VehicleProfileRef struct {
	VehicleProfileRefStructure
}

// PurposeOfEquipmentProfileRef represents the PurposeOfEquipmentProfileRef element
// Reference to a PURPOSE OF EQUIPMENT PROFILE.
type PurposeOfEquipmentProfileRef struct {
	PurposeOfEquipmentProfileRefStructure
}

// AcceptedDriverPermitRef represents the AcceptedDriverPermitRef element
// Reference to a ACCEPTED DRIVER PERMIT.
type AcceptedDriverPermitRef struct {
	AcceptedDriverPermitRefStructure
}

// TypeOfDriverPermitRef represents the TypeOfDriverPermitRef element
// Reference to a TYPE OF DRIVER PERMIT.
type TypeOfDriverPermitRef struct {
	TypeOfDriverPermitRefStructure
}

// VehicleEquipmentsRelStructure represents the vehicleEquipments_RelStructure element
// List of VEHICLE EQUIPMENT.
type VehicleEquipmentsRelStructure struct {
	ContainmentAggregationStructure
	AccessVehicleEquipment []AccessVehicleEquipment `xml:"AccessVehicleEquipment,omitempty" json:"AccessVehicleEquipment,omitempty"`
	WheelchairVehicleEquipment []WheelchairVehicleEquipment `xml:"WheelchairVehicleEquipment,omitempty" json:"WheelchairVehicleEquipment,omitempty"`
}

// ActualVehicleEquipmentVersionStructure represents the ActualVehicleEquipment_VersionStructure element
// Abstract Type for an ACTUAL VEHICLE EQUIPMENT.
type ActualVehicleEquipmentVersionStructure struct {
	PassengerEquipmentVersionStructure
	// Units of EQUIPMENT.
	Units *int `xml:"Units,omitempty" json:"Units,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	RetailDeviceRef *RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	ActivatedEquipmentRef *ActivatedEquipmentRef `xml:"ActivatedEquipmentRef,omitempty" json:"ActivatedEquipmentRef,omitempty"`
	BatteryEquipmentRef *BatteryEquipmentRef `xml:"BatteryEquipmentRef,omitempty" json:"BatteryEquipmentRef,omitempty"`
	RefuellingEquipmentRef *RefuellingEquipmentRef `xml:"RefuellingEquipmentRef,omitempty" json:"RefuellingEquipmentRef,omitempty"`
	VehicleChargingEquipmentRef *VehicleChargingEquipmentRef `xml:"VehicleChargingEquipmentRef,omitempty" json:"VehicleChargingEquipmentRef,omitempty"`
	AssistanceBookingServiceRef *AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef *CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef *RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef *MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef *HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef *CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef *MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef *LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef *LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef *LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef *ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef *CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef *AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef *TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef *LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	VehicleReleaseEquipmentRef *VehicleReleaseEquipmentRef `xml:"VehicleReleaseEquipmentRef,omitempty" json:"VehicleReleaseEquipmentRef,omitempty"`
	TicketValidatorEquipmentRef *TicketValidatorEquipmentRef `xml:"TicketValidatorEquipmentRef,omitempty" json:"TicketValidatorEquipmentRef,omitempty"`
	TicketingEquipmentRef *TicketingEquipmentRef `xml:"TicketingEquipmentRef,omitempty" json:"TicketingEquipmentRef,omitempty"`
	PassengerInformationEquipmentRef *PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef *CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef *TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef *SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef *ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef *LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef *WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef *WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef *SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef *PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef *RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef *StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef *QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef *TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef *EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef *LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef *LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef *CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef *RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef *EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef *HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef *GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef *PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef *SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef *RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef *PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef *HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef *PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef *SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef *WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef *AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef *VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef *PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	EquipmentRef *EquipmentRef `xml:"EquipmentRef,omitempty" json:"EquipmentRef,omitempty"`
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
}

// AccessVehicleEquipmentVersionStructure represents the AccessVehicleEquipment_VersionStructure element
// Type for an ACCESS VEHICLE EQUIPMENT.
type AccessVehicleEquipmentVersionStructure struct {
	ActualVehicleEquipmentVersionStructure
	// Low floor VEHICLES can use stop and be accessible.
	LowFloor *bool `xml:"LowFloor,omitempty" json:"LowFloor,omitempty"`
	// High floor VEHICLES can use stop.
	HighFloor *bool `xml:"HighFloor,omitempty" json:"HighFloor,omitempty"`
	// VEHICLE Hoist can be used at VEHICLE has a hoist or lift  for wheelchairs.
	Hoist *bool `xml:"Hoist,omitempty" json:"Hoist,omitempty"`
	// Whether  a ramp may be used to access VEHICLE.
	Ramp *bool `xml:"Ramp,omitempty" json:"Ramp,omitempty"`
	// Maximum weight that the EQUIPMENT can bear.
	BearingCapacity *float64 `xml:"BearingCapacity,omitempty" json:"BearingCapacity,omitempty"`
	// Number of steps to board or alight from VEHICLE.
	NumberOfSteps *int `xml:"NumberOfSteps,omitempty" json:"NumberOfSteps,omitempty"`
	// Maximum step height to board.
	BoardingHeight *float64 `xml:"BoardingHeight,omitempty" json:"BoardingHeight,omitempty"`
	// Length of the EQUIPMENT be it hoist or ramp. When fully extended and only the part outside the VEHICLE.
	EquipmentLength *float64 `xml:"EquipmentLength,omitempty" json:"EquipmentLength,omitempty"`
	// Width of the EQUIPMENT be it hoist or ramp. When fully extended and only the part outside the VEHICLE.
	EquipmentWidth *float64 `xml:"EquipmentWidth,omitempty" json:"EquipmentWidth,omitempty"`
	// Normal gap between VEHICLE and platform.
	GapToPlatform *float64 `xml:"GapToPlatform,omitempty" json:"GapToPlatform,omitempty"`
	// Width of access area.
	WidthOfAccessArea *float64 `xml:"WidthOfAccessArea,omitempty" json:"WidthOfAccessArea,omitempty"`
	// Height of access area.
	HeightOfAccessArea *float64 `xml:"HeightOfAccessArea,omitempty" json:"HeightOfAccessArea,omitempty"`
	// Whether there are automatic doors.
	AutomaticDoors *bool `xml:"AutomaticDoors,omitempty" json:"AutomaticDoors,omitempty"`
	// Mobility needs for which access is suitable.
	SuitableFor *MobilityEnumeration `xml:"SuitableFor,omitempty" json:"SuitableFor,omitempty"`
	// Nature of assistance needed to board - level Access allows self-boarding.
	AssistanceNeeded *AssistanceNeededEnumeration `xml:"AssistanceNeeded,omitempty" json:"AssistanceNeeded,omitempty"`
	// Whether special position on platform  is needed for boarding.
	AssistedBoardingLocation *AssistedBoardingLocationEnumeration `xml:"AssistedBoardingLocation,omitempty" json:"AssistedBoardingLocation,omitempty"`
	// Whether a Guide Dog is allowed.
	GuideDogsAllowed *bool `xml:"GuideDogsAllowed,omitempty" json:"GuideDogsAllowed,omitempty"`
}

// WheelchairVehicleEquipmentVersionStructure represents the WheelchairVehicleEquipment_VersionStructure element
// Type for a WHEELCHAIR VEHICLE EQUIPMENT.
type WheelchairVehicleEquipmentVersionStructure struct {
	ActualVehicleEquipmentVersionStructure
	// Whether there are any wheelchair spaces. Should be true if Number of Wheelchair spaces is greater than zero.
	HasWheelchairSpaces *bool `xml:"HasWheelchairSpaces,omitempty" json:"HasWheelchairSpaces,omitempty"`
	// Number of wheelchair places on vehicle.
	NumberOfWheelchairAreas *int `xml:"NumberOfWheelchairAreas,omitempty" json:"NumberOfWheelchairAreas,omitempty"`
	// Width of Access Area.
	WidthOfAccessArea *float64 `xml:"WidthOfAccessArea,omitempty" json:"WidthOfAccessArea,omitempty"`
	// Length of Access Area.
	LengthOfAccessArea *float64 `xml:"LengthOfAccessArea,omitempty" json:"LengthOfAccessArea,omitempty"`
	// Height of Access Area.
	HeightOfAccessArea *float64 `xml:"HeightOfAccessArea,omitempty" json:"HeightOfAccessArea,omitempty"`
	// Height of Access Area.
	WheelchairTurningCircle *float64 `xml:"WheelchairTurningCircle,omitempty" json:"WheelchairTurningCircle,omitempty"`
	// Whether there is a companion seat.
	CompanionSeat *bool `xml:"CompanionSeat,omitempty" json:"CompanionSeat,omitempty"`
}

// ActualVehicleEquipment represents the ActualVehicleEquipment element
// An item of EQUIPMENT of a particular type actually available in an individual VEHICLE.
type ActualVehicleEquipment struct {
	ActualVehicleEquipmentVersionStructure
}

// AccessVehicleEquipment represents the AccessVehicleEquipment element
// Specialisation of VEHICLE EQUIPMENT for ACCESS providing information such as low floor, ramp, access area dimensions, etc.
type AccessVehicleEquipment struct {
	AccessVehicleEquipmentVersionStructure
}

// WheelchairVehicleEquipment represents the WheelchairVehicleEquipment element
// Specialisation of VEHICLE EQUIPMENT for Wheel chair accessibility on board a VEHICLE providing information such as the number of wheel chair areas and the access dimensions.
type WheelchairVehicleEquipment struct {
	WheelchairVehicleEquipmentVersionStructure
}

// SignContentEnumeration represents the SignContentEnumeration enumeration
// Allowed values for Sign content.
type SignContentEnumeration string

const (
	// SignContentEnumerationSignContentEnumerationEntrance represents entrance
	SignContentEnumerationSignContentEnumerationEntrance SignContentEnumeration = "entrance"
	// SignContentEnumerationSignContentEnumerationExit represents exit
	SignContentEnumerationSignContentEnumerationExit SignContentEnumeration = "exit"
	// SignContentEnumerationSignContentEnumerationEmergencyExit represents emergencyExit
	SignContentEnumerationSignContentEnumerationEmergencyExit SignContentEnumeration = "emergencyExit"
	// SignContentEnumerationSignContentEnumerationTransportMode represents transportMode
	SignContentEnumerationSignContentEnumerationTransportMode SignContentEnumeration = "transportMode"
	// SignContentEnumerationSignContentEnumerationNoSmoking represents noSmoking
	SignContentEnumerationSignContentEnumerationNoSmoking SignContentEnumeration = "noSmoking"
	// SignContentEnumerationSignContentEnumerationTickets represents tickets
	SignContentEnumerationSignContentEnumerationTickets SignContentEnumeration = "tickets"
	// SignContentEnumerationSignContentEnumerationAssistance represents assistance
	SignContentEnumerationSignContentEnumerationAssistance SignContentEnumeration = "assistance"
	// SignContentEnumerationSignContentEnumerationSosPhone represents sosPhone
	SignContentEnumerationSignContentEnumerationSosPhone SignContentEnumeration = "sosPhone"
	// SignContentEnumerationSignContentEnumerationTouchPoint represents touchPoint
	SignContentEnumerationSignContentEnumerationTouchPoint SignContentEnumeration = "touchPoint"
	// SignContentEnumerationSignContentEnumerationMeetingPoint represents meetingPoint
	SignContentEnumerationSignContentEnumerationMeetingPoint SignContentEnumeration = "meetingPoint"
	// SignContentEnumerationSignContentEnumerationTransportModePoint represents transportModePoint
	SignContentEnumerationSignContentEnumerationTransportModePoint SignContentEnumeration = "transportModePoint"
	// SignContentEnumerationSignContentEnumerationOther represents other
	SignContentEnumerationSignContentEnumerationOther SignContentEnumeration = "other"
)

// PlaceSignRefStructure represents the PlaceSignRefStructure element
// Type for a reference to an PLACE SIGN.
type PlaceSignRefStructure struct {
	PlaceEquipmentRefStructure
}

// GeneralSignRefStructure represents the GeneralSignRefStructure element
// Type for a reference to an GENERAL SIGN.
type GeneralSignRefStructure struct {
	PlaceEquipmentRefStructure
}

// HeadingSignRefStructure represents the HeadingSignRefStructure element
// Type for a reference to an HEADING SIGN.
type HeadingSignRefStructure struct {
	PlaceEquipmentRefStructure
}

// SignEquipmentRef represents the SignEquipmentRef element
// Identifier of an SIGN EQUIPMENT.
type SignEquipmentRef struct {
	PlaceEquipmentRefStructure
}

// PlaceSignRef represents the PlaceSignRef element
// Identifier of an PLACE SIGN.
type PlaceSignRef struct {
	PlaceSignRefStructure
}

// GeneralSignRef represents the GeneralSignRef element
// Identifier of an GENERAL SIGN.
type GeneralSignRef struct {
	GeneralSignRefStructure
}

// HeadingSignRef represents the HeadingSignRef element
// Identifier of an HEADING SIGN.
type HeadingSignRef struct {
	HeadingSignRefStructure
}

// BeaconTypeEnumeration represents the BeaconTypeEnumeration enumeration
// Allowed values for Beacon Type.
type BeaconTypeEnumeration string

const (
	// BeaconTypeEnumerationBle represents ble
	// bluetooth low energy
	BeaconTypeEnumerationBle BeaconTypeEnumeration = "ble"
	// BeaconTypeEnumerationUwb represents uwb
	// ultra wide band
	BeaconTypeEnumerationUwb BeaconTypeEnumeration = "uwb"
	// BeaconTypeEnumerationWifi represents wifi
	// In some cases the beacon is a wifi hot spot.
	BeaconTypeEnumerationWifi BeaconTypeEnumeration = "wifi"
)

// BeaconDirectionEnumeration represents the BeaconDirectionEnumeration enumeration
// Allowed values for communication direction of beacon.
type BeaconDirectionEnumeration string

const (
	// BeaconDirectionEnumerationUnidirectional represents unidirectional
	// Normal unidirectional beacon. Usually a backend is then mandatory.
	BeaconDirectionEnumerationUnidirectional BeaconDirectionEnumeration = "unidirectional"
	// BeaconDirectionEnumerationBidirectional represents bidirectional
	// The beacon is able to do bidirectional transmissions.
	BeaconDirectionEnumerationBidirectional BeaconDirectionEnumeration = "bidirectional"
)

// BeaconProtocolEnumeration represents the BeaconProtocolEnumeration enumeration
// Allowed values for beacon protocols.
type BeaconProtocolEnumeration string

const (
	// BeaconProtocolEnumerationIBeacon represents iBeacon
	// Apple beacon protocol
	BeaconProtocolEnumerationIBeacon BeaconProtocolEnumeration = "iBeacon"
	// BeaconProtocolEnumerationEddystone represents Eddystone
	// Android beacons
	BeaconProtocolEnumerationEddystone BeaconProtocolEnumeration = "Eddystone"
	// BeaconProtocolEnumerationVdv431 represents VDV431
	// Usage of VDV 431
	BeaconProtocolEnumerationVdv431 BeaconProtocolEnumeration = "VDV431"
)

// AudioAnnouncementTypeEnumeration represents the AudioAnnouncementTypeEnumeration enumeration
// Allowed values for AudioAnnouncements
type AudioAnnouncementTypeEnumeration string

const (
	// AudioAnnouncementTypeEnumerationOnDemand represents onDemand
	AudioAnnouncementTypeEnumerationOnDemand AudioAnnouncementTypeEnumeration = "onDemand"
	// AudioAnnouncementTypeEnumerationAutomatic represents automatic
	AudioAnnouncementTypeEnumerationAutomatic AudioAnnouncementTypeEnumeration = "automatic"
)

// AudioTriggerMethodEnumeration represents the AudioTriggerMethodEnumeration enumeration
// Allowed values for AudioTriggersMethod
type AudioTriggerMethodEnumeration string

const (
	// AudioTriggerMethodEnumerationPresenceDetector represents presenceDetector
	AudioTriggerMethodEnumerationPresenceDetector AudioTriggerMethodEnumeration = "presenceDetector"
	// AudioTriggerMethodEnumerationMobileApp represents mobileApp
	AudioTriggerMethodEnumerationMobileApp AudioTriggerMethodEnumeration = "mobileApp"
	// AudioTriggerMethodEnumerationInternetPage represents internetPage
	AudioTriggerMethodEnumerationInternetPage AudioTriggerMethodEnumeration = "internetPage"
	// AudioTriggerMethodEnumerationSpecificDevice represents specificDevice
	AudioTriggerMethodEnumerationSpecificDevice AudioTriggerMethodEnumeration = "specificDevice"
	// AudioTriggerMethodEnumerationPushButton represents pushButton
	AudioTriggerMethodEnumerationPushButton AudioTriggerMethodEnumeration = "pushButton"
	// AudioTriggerMethodEnumerationOther represents other
	AudioTriggerMethodEnumerationOther AudioTriggerMethodEnumeration = "other"
)

// ToiletsTypeEnumeration represents the ToiletsTypeEnumeration enumeration
// Allowed values for Toilet Type.
type ToiletsTypeEnumeration string

const (
	// ToiletsTypeEnumerationSeated represents seated
	ToiletsTypeEnumerationSeated ToiletsTypeEnumeration = "seated"
	// ToiletsTypeEnumerationUrinal represents urinal
	ToiletsTypeEnumerationUrinal ToiletsTypeEnumeration = "urinal"
	// ToiletsTypeEnumerationSquat represents squat
	ToiletsTypeEnumerationSquat ToiletsTypeEnumeration = "squat"
	// ToiletsTypeEnumerationSeatedAndUrinal represents seatedAndUrinal
	// Both seated and urinal positions are available in the toilet.
	ToiletsTypeEnumerationSeatedAndUrinal ToiletsTypeEnumeration = "seatedAndUrinal"
)

// SanitaryEquipmentRefStructure represents the SanitaryEquipmentRefStructure element
// Type for a reference to an SANITARY FACILITY EQUIPMENT.
type SanitaryEquipmentRefStructure struct {
	PassengerEquipmentRefStructure
}

// PassengerSafetyEquipmentRefStructure represents the PassengerSafetyEquipmentRefStructure element
// Type for a reference to an PASSENGER SAFETY EQUIPMENT.
type PassengerSafetyEquipmentRefStructure struct {
	PassengerEquipmentRefStructure
}

// HelpPointEquipmentRefStructure represents the HelpPointEquipmentRefStructure element
// Type for a reference to an HELP POINT EQUIPMENT.
type HelpPointEquipmentRefStructure struct {
	PassengerEquipmentRefStructure
}

// PassengerBeaconEquipmentRefStructure represents the PassengerBeaconEquipmentRefStructure element
// Type for a reference to an BEACON EQUIPMENT.
type PassengerBeaconEquipmentRefStructure struct {
	PassengerEquipmentRefStructure
}

// RubbishDisposalEquipmentRefStructure represents the RubbishDisposalEquipmentRefStructure element
// Type for a reference to an RUBBISH DISPOSAL EQUIPMENT.
type RubbishDisposalEquipmentRefStructure struct {
	PassengerEquipmentRefStructure
}

// SanitaryEquipmentRef represents the SanitaryEquipmentRef element
// Identifier of an SANITARY FACILITY EQUIPMENT.
type SanitaryEquipmentRef struct {
	SanitaryEquipmentRefStructure
}

// PassengerSafetyEquipmentRef represents the PassengerSafetyEquipmentRef element
// Identifier of an PASSENGER SAFETY EQUIPMENT.
type PassengerSafetyEquipmentRef struct {
	PassengerSafetyEquipmentRefStructure
}

// HelpPointEquipmentRef represents the HelpPointEquipmentRef element
// Reference of an HELP POINT EQUIPMENT.
type HelpPointEquipmentRef struct {
	HelpPointEquipmentRefStructure
}

// PassengerBeaconEquipmentRef represents the PassengerBeaconEquipmentRef element
// Reference of an BEACON EQUIPMENT.
type PassengerBeaconEquipmentRef struct {
	PassengerBeaconEquipmentRefStructure
}

// RubbishDisposalEquipmentRef represents the RubbishDisposalEquipmentRef element
// Identifier of an RUBBISH DISPOSAL EQUIPMENT.
type RubbishDisposalEquipmentRef struct {
	RubbishDisposalEquipmentRefStructure
}

// DeliveryVariantTypeEnumeration represents the DeliveryVariantTypeEnumeration enumeration
// Allowed values for Notice delivery media type.
type DeliveryVariantTypeEnumeration string

const (
	// DeliveryVariantTypeEnumerationAny represents any
	DeliveryVariantTypeEnumerationAny DeliveryVariantTypeEnumeration = "any"
	// DeliveryVariantTypeEnumerationPrinted represents printed
	DeliveryVariantTypeEnumerationPrinted DeliveryVariantTypeEnumeration = "printed"
	// DeliveryVariantTypeEnumerationTextToSpeech represents textToSpeech
	DeliveryVariantTypeEnumerationTextToSpeech DeliveryVariantTypeEnumeration = "textToSpeech"
	// DeliveryVariantTypeEnumerationRecordedAnnouncement represents recordedAnnouncement
	DeliveryVariantTypeEnumerationRecordedAnnouncement DeliveryVariantTypeEnumeration = "recordedAnnouncement"
	// DeliveryVariantTypeEnumerationWeb represents web
	DeliveryVariantTypeEnumerationWeb DeliveryVariantTypeEnumeration = "web"
	// DeliveryVariantTypeEnumerationMobile represents mobile
	DeliveryVariantTypeEnumerationMobile DeliveryVariantTypeEnumeration = "mobile"
	// DeliveryVariantTypeEnumerationOther represents other
	DeliveryVariantTypeEnumerationOther DeliveryVariantTypeEnumeration = "other"
)

// PublicityChannelEnumeration represents the PublicityChannelEnumeration enumeration
// Allowed values for Publicity Channel.
type PublicityChannelEnumeration string

const (
	// PublicityChannelEnumerationAll represents all
	// INTERCHANGE is considered a possible connection between journeys.
	PublicityChannelEnumerationAll PublicityChannelEnumeration = "all"
	// PublicityChannelEnumerationPrintedMedia represents printedMedia
	// INTERCHANGE is advertised to public as a possible connection between journeys.
	PublicityChannelEnumerationPrintedMedia PublicityChannelEnumeration = "printedMedia"
	// PublicityChannelEnumerationDynamicMedia represents dynamicMedia
	// INTERCHANGE is actively managed as a possible connection between journeys and passengers are informed of real-time alterations.
	PublicityChannelEnumerationDynamicMedia PublicityChannelEnumeration = "dynamicMedia"
	// PublicityChannelEnumerationNone represents none
	PublicityChannelEnumerationNone PublicityChannelEnumeration = "none"
)

// NoticeRefStructure represents the NoticeRefStructure element
// Type for a reference to a NOTICE.
type NoticeRefStructure struct {
	VersionOfObjectRefStructure
}

// NoticeAssignmentRefStructure represents the NoticeAssignmentRefStructure element
// Type for a reference to a NOTICE ASSIGNMENT.
type NoticeAssignmentRefStructure struct {
	AssignmentRefStructure
}

// DeliveryVariantRefStructure represents the DeliveryVariantRefStructure element
// Type for a reference to a DELIVERY VARIANT.
type DeliveryVariantRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfNoticeRefStructure represents the TypeOfNoticeRefStructure element
// Type for a reference to a TYPE OF NOTICE.
type TypeOfNoticeRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfDeliveryVariantRefStructure represents the TypeOfDeliveryVariantRefStructure element
// Type for a reference to a TYPE OF DELIVERY VARIANT.
type TypeOfDeliveryVariantRefStructure struct {
	TypeOfValueRefStructure
}

// NoticeRef represents the NoticeRef element
// Reference to a NOTICE i.e. footnote, note,  announcement or other informational text element.
type NoticeRef struct {
	NoticeRefStructure
}

// DeliveryVariantRef represents the DeliveryVariantRef element
// Reference to a DELIVERY VARIANT.
type DeliveryVariantRef struct {
	DeliveryVariantRefStructure
}

// TypeOfNoticeRef represents the TypeOfNoticeRef element
// Reference to a TYPE OF NOTICE.
type TypeOfNoticeRef struct {
	TypeOfNoticeRefStructure
}

// TypeOfDeliveryVariantRef represents the TypeOfDeliveryVariantRef element
// Reference to a TYPE OF DELIVERY VARIANT.
type TypeOfDeliveryVariantRef struct {
	TypeOfDeliveryVariantRefStructure
}

// NoticesInFrameRelStructure represents the noticesInFrame_RelStructure element
// Type for containment in frame of  NOTICEs.
type NoticesInFrameRelStructure struct {
	ContainmentAggregationStructure
	Notice []Notice `xml:"Notice" json:"Notice"`
}

// NoticesRelStructure represents the notices_RelStructure element
// Type for a list of NOTICEs.
type NoticesRelStructure struct {
	ContainmentAggregationStructure
	NoticeRef []NoticeRef `xml:"NoticeRef,omitempty" json:"NoticeRef,omitempty"`
	Notice []Notice `xml:"Notice,omitempty" json:"Notice,omitempty"`
}

// NoticeVersionStructure represents the Notice_VersionStructure element
// Type for NOTICE.
type NoticeVersionStructure struct {
	DataManagedObjectStructure
	// Name of Notice. Use Text for content.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name of Notice. Use Text for content. +v1.1.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Text content of NOTICe.
	Text *MultilingualString `xml:"Text,omitempty" json:"Text,omitempty"`
	// Alternative code associated with Notice.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Alternative short code associated with Notice.
	ShortCode *string `xml:"ShortCode,omitempty" json:"ShortCode,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	TypeOfNoticeRef *TypeOfNoticeRef `xml:"TypeOfNoticeRef,omitempty" json:"TypeOfNoticeRef,omitempty"`
	// Whether NOTICE is advertised to public. This may be overridden on an assignment.
	CanBeAdvertised *bool `xml:"CanBeAdvertised,omitempty" json:"CanBeAdvertised,omitempty"`
	// Text to show to Driver or Staff for the Notice.
	DriverDisplayText *MultilingualString `xml:"DriverDisplayText,omitempty" json:"DriverDisplayText,omitempty"`
	// Variations on NOTICE for different media.
	Variants *DeliveryVariantsRelStructure `xml:"variants,omitempty" json:"variants,omitempty"`
}

// DeliveryVariantsRelStructure represents the deliveryVariants_RelStructure element
// Type for a list of DELIVERY VARIANTs.
type DeliveryVariantsRelStructure struct {
	StrictContainmentAggregationStructure
	DeliveryVariant []DeliveryVariant `xml:"DeliveryVariant" json:"DeliveryVariant"`
}

// DeliveryVariantVersionStructure represents the DeliveryVariant_VersionStructure element
// Type for DELIVERY VARIANT.
type DeliveryVariantVersionStructure struct {
	DataManagedObjectStructure
	// Parent of  DELIVERY VARIANT.
	ParentRef *VersionOfObjectRefStructure `xml:"ParentRef,omitempty" json:"ParentRef,omitempty"`
	// Type of DELIVERY VARIANT.
	DeliveryVariantMediaType *DeliveryVariantTypeEnumeration `xml:"DeliveryVariantMediaType,omitempty" json:"DeliveryVariantMediaType,omitempty"`
	TypeOfDeliveryVariantRef *TypeOfDeliveryVariantRef `xml:"TypeOfDeliveryVariantRef,omitempty" json:"TypeOfDeliveryVariantRef,omitempty"`
	// NOTICE variant  text.
	VariantText *MultilingualString `xml:"VariantText,omitempty" json:"VariantText,omitempty"`
	// Presentation Order of variant.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// TypeOfNoticeValueStructure represents the TypeOfNotice_ValueStructure element
// Type for a TYPE OF NOTICe.
type TypeOfNoticeValueStructure struct {
	TypeOfEntityVersionStructure
}

// TypeOfDeliveryVariantValueStructure represents the TypeOfDeliveryVariant_ValueStructure element
// Type for a TYPE OF DELIVERY VARIANT.
type TypeOfDeliveryVariantValueStructure struct {
	TypeOfEntityVersionStructure
}

// Notice represents the Notice element
// A note or footnote about any aspect of a service, e.g. an announcement, notice, etc. May have different DELIVERY VARIANTs for different media.
type Notice struct {
	NoticeVersionStructure
}

// DeliveryVariant represents the DeliveryVariant element
// A variant text of a NOTICE for use in a specific media or delivery channel (voice, printed material, etc).
type DeliveryVariant struct {
	DeliveryVariantVersionStructure
}

// TypeOfNotice represents the TypeOfNotice element
// A classification of a NOTICE according to its functional purpose.
type TypeOfNotice struct {
	TypeOfNoticeValueStructure
}

// TypeOfDeliveryVariant represents the TypeOfDeliveryVariant element
// A classification of DELIVERY VARIANT according to its functional purpose.
type TypeOfDeliveryVariant struct {
	TypeOfDeliveryVariantValueStructure
}

// NoticeAssignmentsInFrameRelStructure represents the noticeAssignmentsInFrame_RelStructure element
// Type for containment in frame of NOTICE ASSIGNMENTs.
type NoticeAssignmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	SalesNoticeAssignment []SalesNoticeAssignment `xml:"SalesNoticeAssignment,omitempty" json:"SalesNoticeAssignment,omitempty"`
	NoticeAssignment []NoticeAssignment `xml:"NoticeAssignment,omitempty" json:"NoticeAssignment,omitempty"`
}

// NoticeAssignmentsRelStructure represents the noticeAssignments_RelStructure element
// Type for a list of NOTICE ASSIGNMENTs.
type NoticeAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	SalesNoticeAssignment []SalesNoticeAssignment `xml:"SalesNoticeAssignment,omitempty" json:"SalesNoticeAssignment,omitempty"`
	NoticeAssignment []NoticeAssignment `xml:"NoticeAssignment,omitempty" json:"NoticeAssignment,omitempty"`
	NoticeAssignmentView []NoticeAssignmentView `xml:"NoticeAssignmentView,omitempty" json:"NoticeAssignmentView,omitempty"`
}

// NoticeAssignmentVersionStructure represents the NoticeAssignment_VersionStructure element
// Type for NOTICE ASSIGNMENT.
type NoticeAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	NoticeRef *NoticeRef `xml:"NoticeRef,omitempty" json:"NoticeRef,omitempty"`
	// A group of Notiices.
	GroupOfNoticesRef *GeneralGroupOfEntitiesRefStructure `xml:"GroupOfNoticesRef,omitempty" json:"GroupOfNoticesRef,omitempty"`
	Notice *Notice `xml:"Notice,omitempty" json:"Notice,omitempty"`
	// Object with which NOTICE is associated. If given by context can be omitted.
	NoticedObjectRef *VersionOfObjectRefStructure `xml:"NoticedObjectRef,omitempty" json:"NoticedObjectRef,omitempty"`
	TripRef *TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef *TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef *SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef *TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef *NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	LinkSequenceRef *LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
	ParentCommonSectionRef *ParentCommonSectionRef `xml:"ParentCommonSectionRef,omitempty" json:"ParentCommonSectionRef,omitempty"`
	CommonSectionRef *CommonSectionRef `xml:"CommonSectionRef,omitempty" json:"CommonSectionRef,omitempty"`
	LineSectionRef *LineSectionRef `xml:"LineSectionRef,omitempty" json:"LineSectionRef,omitempty"`
	FareSectionRef *FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	GeneralSectionRef *GeneralSectionRef `xml:"GeneralSectionRef,omitempty" json:"GeneralSectionRef,omitempty"`
	SectionRef *SectionRef `xml:"SectionRef,omitempty" json:"SectionRef,omitempty"`
	// POINT at which applicability of NOTICE starts.
	StartPointInPatternRef *PointInSequenceRefStructure `xml:"StartPointInPatternRef,omitempty" json:"StartPointInPatternRef,omitempty"`
	// POINT at which applicabiity of NOTICE endsIf absent same as Start Point.
	EndPointInPatternRef *PointInSequenceRefStructure `xml:"EndPointInPatternRef,omitempty" json:"EndPointInPatternRef,omitempty"`
	// Mark associated with NOTICE.
	Mark *string `xml:"Mark,omitempty" json:"Mark,omitempty"`
	// URL for image associated with NOTICE.
	MarkUrl *string `xml:"MarkUrl,omitempty" json:"MarkUrl,omitempty"`
	// How NOTICE is to be publicised. Default is all.
	PublicityChannel *PublicityChannelEnumeration `xml:"PublicityChannel,omitempty" json:"PublicityChannel,omitempty"`
	// Whether NOTICE is advertised to public.
	Advertised *bool `xml:"Advertised,omitempty" json:"Advertised,omitempty"`
}

// NoticeAssignmentViewsRelStructure represents the noticeAssignmentViews_RelStructure element
// Type for a list of NOTICE ASSIGNMENT VIEWs.
type NoticeAssignmentViewsRelStructure struct {
	ContainmentAggregationStructure
	NoticeAssignmentView []NoticeAssignmentView `xml:"NoticeAssignmentView" json:"NoticeAssignmentView"`
}

// NoticeAssignmentDerivedViewStructure represents the NoticeAssignment_DerivedViewStructure element
// Type for NOTICE ASSIGNMENT View.
type NoticeAssignmentDerivedViewStructure struct {
	DerivedViewStructure
	// Name of ASSIGNMENT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	NoticeRef *NoticeRef `xml:"NoticeRef,omitempty" json:"NoticeRef,omitempty"`
	// Mark associated with NOTICE.
	Mark *string `xml:"Mark,omitempty" json:"Mark,omitempty"`
	// URL for image associated with NOTICE.
	MarkUrl *string `xml:"MarkUrl,omitempty" json:"MarkUrl,omitempty"`
	// How NOTICE is to be publicised. Default is all.
	PublicityChannel *PublicityChannelEnumeration `xml:"PublicityChannel,omitempty" json:"PublicityChannel,omitempty"`
	// Whether NOTICE is advertised to public.
	Advertised *bool `xml:"Advertised,omitempty" json:"Advertised,omitempty"`
	// Text content of NOTICe.
	Text *MultilingualString `xml:"Text,omitempty" json:"Text,omitempty"`
	// Alternative code associated with Notice.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Alternative short code associated with Notice.
	ShortCode *string `xml:"ShortCode,omitempty" json:"ShortCode,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	TypeOfNoticeRef *TypeOfNoticeRef `xml:"TypeOfNoticeRef,omitempty" json:"TypeOfNoticeRef,omitempty"`
	// Whether NOTICE is advertised to public. This may be overridden on an assignment.
	CanBeAdvertised *bool `xml:"CanBeAdvertised,omitempty" json:"CanBeAdvertised,omitempty"`
	// Order of Assignment.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// NoticeAssignment represents the NoticeAssignment element
// The assignment of a NOTICE showing an exception in a JOURNEY PATTERN, a COMMON SECTION, or a VEHICLE JOURNEY, possibly specifying at which POINT IN JOURNEY PATTERN the validity of the NOTICE starts and ends respectively.
type NoticeAssignment struct {
	NoticeAssignmentVersionStructure
}

// NoticeAssignmentView represents the NoticeAssignmentView element
// View of a NOTICE ASSIGNMENT. for use in a specific context such as a CALL. This can be used to embed the notice itself in the context.
type NoticeAssignmentView struct {
	NoticeAssignmentDerivedViewStructure
	// Name of ASSIGNMENT.
	Name interface{} `xml:"Name,omitempty" json:"Name,omitempty"`
}

// DirectionTypeEnumeration represents the DirectionTypeEnumeration enumeration
// Allowed values for DIRECTION.
type DirectionTypeEnumeration string

const (
	// DirectionTypeEnumerationInbound represents inbound
	DirectionTypeEnumerationInbound DirectionTypeEnumeration = "inbound"
	// DirectionTypeEnumerationOutbound represents outbound
	DirectionTypeEnumerationOutbound DirectionTypeEnumeration = "outbound"
	// DirectionTypeEnumerationClockwise represents clockwise
	DirectionTypeEnumerationClockwise DirectionTypeEnumeration = "clockwise"
	// DirectionTypeEnumerationAnticlockwise represents anticlockwise
	DirectionTypeEnumerationAnticlockwise DirectionTypeEnumeration = "anticlockwise"
)

// DirectionRefStructure represents the DirectionRefStructure element
// Type for a reference to a DIRECTION.
type DirectionRefStructure struct {
	TypeOfValueRefStructure
}

// RouteRefStructure represents the RouteRefStructure element
// Type for a reference to a ROUTE.
type RouteRefStructure struct {
	LinkSequenceRefStructure
}

// RouteRefsRelStructure represents the routeRefs_RelStructure element
// Type for a list of references to a ROUTE.
type RouteRefsRelStructure struct {
	OneToManyRelationshipStructure
	RouteRef []RouteRef `xml:"RouteRef" json:"RouteRef"`
}

// RoutePointRefStructure represents the RoutePointRefStructure element
// Type for a reference to a ROUTE POINT.
type RoutePointRefStructure struct {
	PointRefStructure
}

// RouteLinkRefStructure represents the RouteLinkRefStructure element
// Type for a reference to a ROUTE LINK.
type RouteLinkRefStructure struct {
	LinkRefStructure
}

// RouteLinkRefByValueStructure represents the RouteLinkRefByValueStructure element
// Type for a reference to a ROUTE LINK BY VALUE.
type RouteLinkRefByValueStructure struct {
	LinkRefByValueStructure
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
}

// PointOnRouteRefStructure represents the PointOnRouteRefStructure element
// Type for a reference to a POINT ON ROUTE.
type PointOnRouteRefStructure struct {
	PointInSequenceRefStructure
}

// ModeRestrictionAssessmentRefStructure represents the ModeRestrictionAssessmentRefStructure element
// Type for a reference to a MODE RESTRICTION ASSESSMENT.
type ModeRestrictionAssessmentRefStructure struct {
	VersionOfObjectRefStructure
}

// DirectionType represents the DirectionType element
// A Direction of a ROUTE. One of a restricted set of values. Default is "Outbound"
type DirectionType struct {
	Value DirectionTypeEnumeration `xml:",chardata" json:"value"`
}

// DirectionRef represents the DirectionRef element
// Reference to a DIRECTION.
type DirectionRef struct {
	DirectionRefStructure
}

// RouteRef represents the RouteRef element
// Reference to a ROUTE.
type RouteRef struct {
	RouteRefStructure
}

// RoutePointRef represents the RoutePointRef element
// Reference to a ROUTE POINT.
type RoutePointRef struct {
	RoutePointRefStructure
}

// RouteLinkRef represents the RouteLinkRef element
// Reference to a ROUTE LINK.
type RouteLinkRef struct {
	RouteLinkRefStructure
}

// RouteLinkRefByValue represents the RouteLinkRefByValue element
// Reference to a ROUTE LINK BY VALUE.
type RouteLinkRefByValue struct {
	RouteLinkRefByValueStructure
}

// PointOnRouteRef represents the PointOnRouteRef element
// Reference to POINT ON ROUTE.
type PointOnRouteRef struct {
	PointOnRouteRefStructure
}

// ModeRestrictionAssessmentRef represents the ModeRestrictionAssessmentRef element
// Reference to MODE RESTRICTION ASSESSMENT. +v1.2.2
type ModeRestrictionAssessmentRef struct {
	ModeRestrictionAssessmentRefStructure
}

// GroupsOfLinesInFrameRelStructure represents the groupsOfLinesInFrame_RelStructure element
// Type for containment in frame of GROUP OF LINEs.
type GroupsOfLinesInFrameRelStructure struct {
	ContainmentAggregationStructure
	GroupOfLines []GroupOfLines `xml:"GroupOfLines" json:"GroupOfLines"`
}

// NetworksInFrameRelStructure represents the networksInFrame_RelStructure element
// Type for containment in frame of NETWORKs.
type NetworksInFrameRelStructure struct {
	ContainmentAggregationStructure
	Network []Network `xml:"Network" json:"Network"`
}

// PurposesOfGroupingInFrameRelStructure represents the purposesOfGroupingInFrame_RelStructure element
// Type for containment in frame of PURPOSE OF GROUPING.
type PurposesOfGroupingInFrameRelStructure struct {
	ContainmentAggregationStructure
	PurposeOfGrouping []PurposeOfGrouping `xml:"PurposeOfGrouping" json:"PurposeOfGrouping"`
}

// DestinationDisplaysInFrameRelStructure represents the destinationDisplaysInFrame_RelStructure element
// Type for containment in frame of DESTINATION DISPLAY.
type DestinationDisplaysInFrameRelStructure struct {
	ContainmentAggregationStructure
	DestinationDisplay []DestinationDisplay `xml:"DestinationDisplay" json:"DestinationDisplay"`
}

// GroupOfLinesVersionStructure represents the GroupOfLines_VersionStructure element
// Type for GROUP OF LINES.
type GroupOfLinesVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Whether contents of Group should be used to exclude (true) from a large list . The default is include  (i.e.false)
	UseToExclude *bool `xml:"UseToExclude,omitempty" json:"UseToExclude,omitempty"`
	// LINEs in GROUP OF LINEs.
	Members *LineRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	// Primary LINE in GROUP OF LINEs, if relevant.
	MainLineRef *LineRefStructure `xml:"MainLineRef,omitempty" json:"MainLineRef,omitempty"`
	// Primary Transport MODE of NETWORK.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	TransportSubmode *TransportSubmode `xml:"TransportSubmode,omitempty" json:"TransportSubmode,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	// Classification of GROUP OF LINES. +v1.1
	GroupOfLinesType *GroupOfLinesTypeEnumeration `xml:"GroupOfLinesType,omitempty" json:"GroupOfLinesType,omitempty"`
	// Payment Methods allowed on LINE. +v1.1
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
	// TYPES OF PAYMENT yment Methods allowed on LINE. +v1.1
	TypesOfPaymentMethod *TypeOfPaymentMethodValueStructure `xml:"typesOfPaymentMethod,omitempty" json:"typesOfPaymentMethod,omitempty"`
	// PURCHASE MOMENT types allowed on LINE. +v1.1
	PurchaseMoment *PurchaseMomentEnumeration `xml:"PurchaseMoment,omitempty" json:"PurchaseMoment,omitempty"`
}

// LinesInFrameRelStructure represents the linesInFrame_RelStructure element
// Type for containment in frame of LINe.
type LinesInFrameRelStructure struct {
	ContainmentAggregationStructure
	FlexibleLine []FlexibleLine `xml:"FlexibleLine,omitempty" json:"FlexibleLine,omitempty"`
	Line []Line `xml:"Line,omitempty" json:"Line,omitempty"`
}

// LineVersionStructure represents the Line_VersionStructure element
// Type for a LINE.
type LineVersionStructure struct {
	DataManagedObjectStructure
	// Name of LINE.
	Name MultilingualString `xml:"Name" json:"Name"`
	// Short name of LINE.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Description of LINE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Transport MODE of LINE.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	TransportSubmode *TransportSubmode `xml:"TransportSubmode,omitempty" json:"TransportSubmode,omitempty"`
	// Web link for LINE.
	Url *string `xml:"Url,omitempty" json:"Url,omitempty"`
	// Public identifier of a LINe.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// An alternative  code that uniquely identifies the LINE specifically for use in AVMS systems. For VDV compatibility.
	ExternalLineRef *ExternalObjectRefStructure `xml:"ExternalLineRef,omitempty" json:"ExternalLineRef,omitempty"`
	// A line should always have an AUTHORITY, even when the information is provided in a ResponsibilitySet.
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	// An OPERATOR should be set, even when the same as the AUTHORITY. In some cases OPERATOR or AUTHORITY are managed through a ResponsibilitySet. However, for compatibility OperatorRef and AuthorityRef still should be filled in.
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	// Additional OPERATORs for LINE.
	AdditionalOperators *TransportOrganisationRefsRelStructure `xml:"additionalOperators,omitempty" json:"additionalOperators,omitempty"`
	// Additional transport MODEs for LINE.
	OtherModes *ModeRefsRelStructure `xml:"otherModes,omitempty" json:"otherModes,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	// Classification of LINE. +v1.1.
	LineType *LineTypeEnumeration `xml:"LineType,omitempty" json:"LineType,omitempty"`
	TypeOfLineRef *TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
	// An default product classification for all journeys of the lin e for use in AVMS systems. For VDV compatibility. +v1.1
	ExternalProductCategoryRef *ExternalObjectRefStructure `xml:"ExternalProductCategoryRef,omitempty" json:"ExternalProductCategoryRef,omitempty"`
	TypeOfProductCategoryRef *TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfServiceRef *TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	// Whether real-time data is normally available for LINE.
	Monitored *bool `xml:"Monitored,omitempty" json:"Monitored,omitempty"`
	// Routes that follow the LINE.
	Routes *RouteRefsRelStructure `xml:"routes,omitempty" json:"routes,omitempty"`
	// GROUPS OF LINEs that can be used to represent LINE.
	RepresentedByGroupRef *GroupOfLinesRefStructure `xml:"RepresentedByGroupRef,omitempty" json:"RepresentedByGroupRef,omitempty"`
	// Presentation values to use when rendering LINE, such as a colour.
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// Alternative Presentation values to use when rendering LINE, such as a colour.
	AlternativePresentation *PresentationStructure `xml:"AlternativePresentation,omitempty" json:"AlternativePresentation,omitempty"`
	// Presentation values to use in printed material for LINE, such as a colour. +v1.1
	PrintedPresentation *PrintPresentationStructure `xml:"PrintedPresentation,omitempty" json:"PrintedPresentation,omitempty"`
	// Payment Methods allowed on LINE. +v1.1
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
	// TYPES OF PAYMENT yment Methods allowed on LINE. +v1.1
	TypesOfPaymentMethod *TypeOfPaymentMethodValueStructure `xml:"typesOfPaymentMethod,omitempty" json:"typesOfPaymentMethod,omitempty"`
	// PURCHASE MOMENT types allowed on LINE. +v1.1
	PurchaseMoment *PurchaseMomentEnumeration `xml:"PurchaseMoment,omitempty" json:"PurchaseMoment,omitempty"`
	// CantactDetails for Line +V1.1
	ContactDetails *ContactStructure `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// Allowed directions for routes of LINE.
	AllowedDirections *AllowedLineDirectionsRelStructure `xml:"allowedDirections,omitempty" json:"allowedDirections,omitempty"`
	// NOTICES assigned to LINE.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// Timetable documents associated with the LINE, e.g pdf files
	DocumentLinks *InfoLinksRelStructure `xml:"documentLinks,omitempty" json:"documentLinks,omitempty"`
}

// NetworkVersionStructure represents the Network_VersionStructure element
// Type for a NETWORK.
type NetworkVersionStructure struct {
	GroupOfLinesVersionStructure
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	// Groups of OPERATORs  AUTHORTies or OPERATORS) (in NETWORK.
	GroupsOfOperators *GroupsOfOperatorsRefsRelStructure `xml:"groupsOfOperators,omitempty" json:"groupsOfOperators,omitempty"`
	// Groups of LINEs in NETWORK.
	GroupsOfLines *GroupsOfLinesInFrameRelStructure `xml:"groupsOfLines,omitempty" json:"groupsOfLines,omitempty"`
	// TARIFF ZONEs in NETWORK.
	TariffZones *TariffZoneRefsRelStructure `xml:"tariffZones,omitempty" json:"tariffZones,omitempty"`
}

// DestinationDisplayVersionStructure represents the DestinationDisplay_VersionStructure element
// Type for a DESTINATION DISPLAY.
type DestinationDisplayVersionStructure struct {
	DataManagedObjectStructure
	// Name of destination on DESTINATION DISPLAY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name on DESTINATION DISPLAY.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Name of destination to show on side of VEHICLE.
	SideText *MultilingualString `xml:"SideText,omitempty" json:"SideText,omitempty"`
	// Name of destination to show on front of VEHICLE.
	FrontText *MultilingualString `xml:"FrontText,omitempty" json:"FrontText,omitempty"`
	// Text to show to Driver or Staff for the DESTINATION DISPLAY.
	DriverDisplayText *MultilingualString `xml:"DriverDisplayText,omitempty" json:"DriverDisplayText,omitempty"`
	// Short code associated with Destination display used vehicle display controller which describes the format of the destination text in the front and side display in the vehicle. (VDV).
	ShortCode *string `xml:"ShortCode,omitempty" json:"ShortCode,omitempty"`
	// Public code to show for Destination.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Preferred presentation attributes to use when rendering destiation on maps, etc. +v1.1
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// Headings that distinguish the route by which the service runs to the Destination  Name .
	Vias *ViasRelStructure `xml:"vias,omitempty" json:"vias,omitempty"`
	// DEITINATION DISPLAY VARIANT for DESTINATION DISPLAY. Variants may  be for use in a specifc context or on a specifc media, or a combination of both.
	Variants *DestinationDisplayVariantsRelStructure `xml:"variants,omitempty" json:"variants,omitempty"`
}

// DestinationDisplayVariantsRelStructure represents the destinationDisplayVariants_RelStructure element
// Type for a list of DESTINATION DISPLAY VARIANTs.
type DestinationDisplayVariantsRelStructure struct {
	StrictContainmentAggregationStructure
	DestinationDisplayVariant []DestinationDisplayVariant `xml:"DestinationDisplayVariant" json:"DestinationDisplayVariant"`
}

// DestinationDisplayVariantVersionStructure represents the DestinationDisplayVariant_VersionStructure element
// Type for DESTINATION DISPLAY VARIANT.
type DestinationDisplayVariantVersionStructure struct {
	DataManagedObjectStructure
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	// Context in which to use the secondary name.  Default is 'any'+v1.1
	DestinationDisplayContext *DestinationDisplayContextEnumeration `xml:"DestinationDisplayContext,omitempty" json:"DestinationDisplayContext,omitempty"`
	// Type of DESTINATION DISPLAY VARIANT. Default is 'any'.
	DestinationDisplayVariantMediaType DeliveryVariantTypeEnumeration `xml:"DestinationDisplayVariantMediaType" json:"DestinationDisplayVariantMediaType"`
	// Name of destination on DESTINATION DISPLAY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name on DESTINATION DISPLAY.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Name of destination to show on side of VEHICLE.
	SideText *MultilingualString `xml:"SideText,omitempty" json:"SideText,omitempty"`
	// Name of destination to show on front of VEHICLE.
	FrontText *MultilingualString `xml:"FrontText,omitempty" json:"FrontText,omitempty"`
	// Text to show to Driver or Staff for the DESTINATION DISPLAY.
	DriverDisplayText *MultilingualString `xml:"DriverDisplayText,omitempty" json:"DriverDisplayText,omitempty"`
	// Presentation values to use when rendering DESTINATION DISPLAY VARIANT, such as a colour.
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// Destinations that the Service goes via.
	Vias *ViasRelStructure `xml:"vias,omitempty" json:"vias,omitempty"`
}

// ViasRelStructure represents the vias_RelStructure element
// Type for a list of VIA Names.
type ViasRelStructure struct {
	StrictContainmentAggregationStructure
	// There are no vias shown. This is the default.
	None *EmptyType `xml:"None,omitempty" json:"None,omitempty"`
	// A secondary heading  (e.g. ROUTE POINT or other place) showing intermediate places on the way to a destination.
	Via []ViaVersionedChildStructure `xml:"Via,omitempty" json:"Via,omitempty"`
}

// ViaVersionedChildStructure represents the Via_VersionedChildStructure element
// A secondary heading  (e.g. ROUTE POINT or other place) showing intermediate places on the way to a destination.
type ViaVersionedChildStructure struct {
	VersionedChildStructure
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	DestinationDisplayView *DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
	// Arbitrary text name of VIA point. May be place name or other string.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	// Classification of meaning of via:
	ViaType *ViaTypeEnumeration `xml:"ViaType,omitempty" json:"ViaType,omitempty"`
}

// AllowedLineDirectionsRelStructure represents the allowedLineDirections_RelStructure element
// Type for a list of ALLOWED LINE DIRECTIONs.
type AllowedLineDirectionsRelStructure struct {
	ContainmentAggregationStructure
	AllowedLineDirectionRef []AllowedLineDirectionRef `xml:"AllowedLineDirectionRef,omitempty" json:"AllowedLineDirectionRef,omitempty"`
	AllowedLineDirection []AllowedLineDirection `xml:"AllowedLineDirection,omitempty" json:"AllowedLineDirection,omitempty"`
}

// AllowedLineDirectionVersionStructure represents the AllowedLineDirection_VersionStructure element
// Type for an ALLOWED LINE DIRECTION.
type AllowedLineDirectionVersionStructure struct {
	DataManagedObjectStructure
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	DirectionRef DirectionRef `xml:"DirectionRef" json:"DirectionRef"`
	// Pesentation to use for DIRECTION. +v1.1..
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
}

// LinesInDirectionRefsRelStructure represents the linesInDirectionRefs_RelStructure element
// Type for a list of LINE in a specific DIRECTION
type LinesInDirectionRefsRelStructure struct {
	ContainmentAggregationStructure
	LineInDirectionRef []LineInDirectionRef `xml:"LineInDirectionRef" json:"LineInDirectionRef"`
}

// LineInDirectionRefStructure represents the LineInDirectionRef_Structure element
// Type for a Reference to a LINE in a specific DIRECTION
type LineInDirectionRefStructure struct {
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	// Alternative  LINE Reference  for AVMS system.
	ExternalLineRef *ExternalObjectRefStructure `xml:"ExternalLineRef,omitempty" json:"ExternalLineRef,omitempty"`
	// Alternative DIRECTION Reference  for AVMS system.
	ExternalDirectionRef *ExternalObjectRefStructure `xml:"ExternalDirectionRef,omitempty" json:"ExternalDirectionRef,omitempty"`
}

// NetworkDerivedViewStructure represents the Network_DerivedViewStructure element
// Type for a NETWORK VIEW.
type NetworkDerivedViewStructure struct {
	DerivedViewStructure
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	// Name of NETWORK.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// TRANSPORT MODE of NETWORK.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
}

// LineDerivedViewStructure represents the Line_DerivedViewStructure element
// Type for a LINE VIEW.
type LineDerivedViewStructure struct {
	DerivedViewStructure
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	// Identifier of LINE.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Name of LINE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short name of LINE.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// TRANSPORT MODE of LINE.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	TransportSubmode *TransportSubmode `xml:"TransportSubmode,omitempty" json:"TransportSubmode,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	TypeOfLineRef *TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
}

// DestinationDisplayViewsRelStructure represents the destinationDisplayViews_RelStructure element
// Type for a list of DSETINATION DISPLAY VIEWs.
type DestinationDisplayViewsRelStructure struct {
	ContainmentAggregationStructure
	DestinationDisplayRef []DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	DestinationDisplayView []DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
}

// DestinationDisplayDerivedViewStructure represents the DestinationDisplay_DerivedViewStructure element
// Type for Simplified DESTINATION DISPLAY.
type DestinationDisplayDerivedViewStructure struct {
	DerivedViewStructure
	// A list of alternative Key values for an element.
	KeyList *KeyList `xml:"keyList,omitempty" json:"keyList,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	// Name of destination on DESTINATION DISPLAY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name on DESTINATION DISPLAY.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Name of destination to show on side of VEHICLE.
	SideText *MultilingualString `xml:"SideText,omitempty" json:"SideText,omitempty"`
	// Name of destination to show on front of VEHICLE.
	FrontText *MultilingualString `xml:"FrontText,omitempty" json:"FrontText,omitempty"`
	// Text to show to Driver or Staff for the DESTINATION DISPLAY.
	DriverDisplayText *MultilingualString `xml:"DriverDisplayText,omitempty" json:"DriverDisplayText,omitempty"`
	// Short code associated with Destination display used vehicle display controller which describes the format of the destination text in the front and side display in the vehicle. (VDV).
	ShortCode *string `xml:"ShortCode,omitempty" json:"ShortCode,omitempty"`
	// Public code to show for Destination.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
}

// TypeOfLineValueStructure represents the TypeOfLine_ValueStructure element
// Type for a TYPE OF LINE. +v1.1
type TypeOfLineValueStructure struct {
	TypeOfEntityVersionStructure
}

// GroupOfLines represents the GroupOfLines element
// A grouping of LINEs which will be commonly referenced for a specific purpose.
type GroupOfLines struct {
	GroupOfLinesVersionStructure
}

// Line represents the Line element
// A group of ROUTEs which is generally known to the public by a similar name or number.
type Line struct {
	LineVersionStructure
}

// Network represents the Network element
// A named grouping of LINEs under which a Transport network is known.
type Network struct {
	NetworkVersionStructure
}

// DestinationDisplay represents the DestinationDisplay element
// An advertised destination of a specific JOURNEY PATTERN, usually displayed on a head sign or at other on-board locations.
type DestinationDisplay struct {
	DestinationDisplayVersionStructure
}

// DestinationDisplayVariant represents the DestinationDisplayVariant element
// A variant text of a DESTINATION DISPLAY for informational purposes.
type DestinationDisplayVariant struct {
	DestinationDisplayVariantVersionStructure
}

// AllowedLineDirection represents the AllowedLineDirection element
// A set of allowed DIRECTIONs that can be used on a given ROUTE.
type AllowedLineDirection struct {
	AllowedLineDirectionVersionStructure
}

// LineInDirectionRef represents the LineInDirectionRef element
// Refrence to LINE in a specific DIRECTION
type LineInDirectionRef struct {
	LineInDirectionRefStructure
}

// NetworkView represents the NetworkView element
// Simplified view of a NETWORK.
type NetworkView struct {
	NetworkDerivedViewStructure
}

// LineView represents the LineView element
// Simplified view of a LINE.
type LineView struct {
	LineDerivedViewStructure
}

// DestinationDisplayView represents the DestinationDisplayView element
// Simplified view of a DESTINATION DISPLAY. Includes derived properties of the DESTINATION DISPLAY.
type DestinationDisplayView struct {
	DestinationDisplayDerivedViewStructure
}

// TypeOfLine represents the TypeOfLine element
// A classification of a LINE according to its functional purpose. +v1.1.
type TypeOfLine struct {
	TypeOfLineValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// SignEquipmentVersionStructure represents the SignEquipment_VersionStructure element
// Type for SIGN EQUIPMENT.
type SignEquipmentVersionStructure struct {
	PlaceEquipmentVersionStructure
	// Height of SIGN in metres.
	Height *float64 `xml:"Height,omitempty" json:"Height,omitempty"`
	// Width of sign in metres.
	Width *float64 `xml:"Width,omitempty" json:"Width,omitempty"`
	// Height of bottom edge of sign from floor in metres.
	HeightFromFloor *float64 `xml:"HeightFromFloor,omitempty" json:"HeightFromFloor,omitempty"`
	// Description of location of sign.
	Placement *MultilingualString `xml:"Placement,omitempty" json:"Placement,omitempty"`
	// Graphic for sign.
	BrandGraphic *string `xml:"BrandGraphic,omitempty" json:"BrandGraphic,omitempty"`
	// Graphic or sign.
	SignGraphic *string `xml:"SignGraphic,omitempty" json:"SignGraphic,omitempty"`
	// Whether SIGN is machine readable.
	MachineReadable *bool `xml:"MachineReadable,omitempty" json:"MachineReadable,omitempty"`
	// Whether SIGN is readable in Braille. +v1.1
	AsBraille *bool `xml:"AsBraille,omitempty" json:"AsBraille,omitempty"`
	// How the display may be read by the audio tool. +v1.1
	AudioTriggerMethod *AudioTriggerMethodEnumeration `xml:"AudioTriggerMethod,omitempty" json:"AudioTriggerMethod,omitempty"`
	// Presentatuon characteristics including font size +v1.1 .
	PrintedPresentation *PrintPresentationStructure `xml:"PrintedPresentation,omitempty" json:"PrintedPresentation,omitempty"`
	// Luminance gap between text and background. A ratio of at least 3 is expected. +v1.1
	Contrast *float64 `xml:"Contrast,omitempty" json:"Contrast,omitempty"`
	// Character font size.
	FontSize *FontSizeEnumeration `xml:"FontSize,omitempty" json:"FontSize,omitempty"`
}

// PlaceSignStructure represents the PlaceSignStructure element
// Type for a PLACE SIGN.
type PlaceSignStructure struct {
	SignEquipmentVersionStructure
	// Name of Stop.
	PlaceName MultilingualString `xml:"PlaceName" json:"PlaceName"`
	PlaceRef *PlaceRef `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
}

// HeadingSignStructure represents the HeadingSignStructure element
// Type for a HEADING SIGN.
type HeadingSignStructure struct {
	SignEquipmentVersionStructure
	// Name of Stop.
	PlaceName MultilingualString `xml:"PlaceName" json:"PlaceName"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	// Content of Stop.
	LineName *MultilingualString `xml:"LineName,omitempty" json:"LineName,omitempty"`
	// Description of MODE of LINE.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	TransportSubmode *TransportSubmode `xml:"TransportSubmode,omitempty" json:"TransportSubmode,omitempty"`
	// Graphic or sign for schematic map of lien from STOP PLACE.
	LineMap *string `xml:"LineMap,omitempty" json:"LineMap,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	// Content of Stop.
	DirectionName *MultilingualString `xml:"DirectionName,omitempty" json:"DirectionName,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	// Public Code for Line.
	LinePublicCode *string `xml:"LinePublicCode,omitempty" json:"LinePublicCode,omitempty"`
}

// GeneralSignStructure represents the GeneralSignStructure element
// Type for an GENERAL SIGN.
type GeneralSignStructure struct {
	SignEquipmentVersionStructure
	// Content of Sign.
	Content *MultilingualString `xml:"Content,omitempty" json:"Content,omitempty"`
	// Classification of content as standard category.
	SignContentType *SignContentEnumeration `xml:"SignContentType,omitempty" json:"SignContentType,omitempty"`
}

// SignEquipment represents the SignEquipment element
// Specialisation of PLACE EQUIPMENT for signs (heading signs, etc.).
type SignEquipment struct {
	SignEquipmentVersionStructure
}

// PlaceSign represents the PlaceSign element
// Sign with Place name for a PLACE. E.g. 'Waterloo'
type PlaceSign struct {
	PlaceSignStructure
}

// HeadingSign represents the HeadingSign element
// Specialisation of SIGN EQUIPMENT for headings providing information like direction name, line name, etc.
type HeadingSign struct {
	HeadingSignStructure
}

// GeneralSign represents the GeneralSign element
// Specialisation of SIGN EQUIPMENT sor signs which are not HEADING SIGNs nor PLACE SIGNs.
type GeneralSign struct {
	GeneralSignStructure
}

// TactileWarningStripEnumeration represents the TactileWarningStripEnumeration enumeration
// Allowed values for TactileWarningStrip
type TactileWarningStripEnumeration string

const (
	// TactileWarningStripEnumerationTactileStripAtBeginning represents tactileStripAtBeginning
	TactileWarningStripEnumerationTactileStripAtBeginning TactileWarningStripEnumeration = "tactileStripAtBeginning"
	// TactileWarningStripEnumerationTactileStripAtEnd represents tactileStripAtEnd
	TactileWarningStripEnumerationTactileStripAtEnd TactileWarningStripEnumeration = "tactileStripAtEnd"
	// TactileWarningStripEnumerationTactileStripAtBothEnds represents tactileStripAtBothEnds
	TactileWarningStripEnumerationTactileStripAtBothEnds TactileWarningStripEnumeration = "tactileStripAtBothEnds"
	// TactileWarningStripEnumerationNoTactileStrip represents noTactileStrip
	TactileWarningStripEnumerationNoTactileStrip TactileWarningStripEnumeration = "noTactileStrip"
	// TactileWarningStripEnumerationUnknown represents unknown
	TactileWarningStripEnumerationUnknown TactileWarningStripEnumeration = "unknown"
)

// LightingEnumeration represents the LightingEnumeration enumeration
// Allowed value for Lighting.
type LightingEnumeration string

const (
	// LightingEnumerationWellLit represents wellLit
	LightingEnumerationWellLit LightingEnumeration = "wellLit"
	// LightingEnumerationPoorlyLit represents poorlyLit
	LightingEnumerationPoorlyLit LightingEnumeration = "poorlyLit"
	// LightingEnumerationUnlit represents unlit
	LightingEnumerationUnlit LightingEnumeration = "unlit"
	// LightingEnumerationUnknown represents unknown
	LightingEnumerationUnknown LightingEnumeration = "unknown"
	// LightingEnumerationOther represents other
	LightingEnumerationOther LightingEnumeration = "other"
)

// LightingOnMethodEnumeration represents the LightingOnMethodEnumeration enumeration
// Allowed values for lighting method.
type LightingOnMethodEnumeration string

const (
	// LightingOnMethodEnumerationMovementDetector represents movementDetector
	LightingOnMethodEnumerationMovementDetector LightingOnMethodEnumeration = "movementDetector"
	// LightingOnMethodEnumerationStepDetector represents stepDetector
	LightingOnMethodEnumerationStepDetector LightingOnMethodEnumeration = "stepDetector"
	// LightingOnMethodEnumerationSwitchOnTheWall represents switchOnTheWall
	LightingOnMethodEnumerationSwitchOnTheWall LightingOnMethodEnumeration = "switchOnTheWall"
	// LightingOnMethodEnumerationAtDoorOpening represents atDoorOpening
	LightingOnMethodEnumerationAtDoorOpening LightingOnMethodEnumeration = "atDoorOpening"
	// LightingOnMethodEnumerationOnlyAtNight represents onlyAtNight
	LightingOnMethodEnumerationOnlyAtNight LightingOnMethodEnumeration = "onlyAtNight"
	// LightingOnMethodEnumerationAlwaysOn represents alwaysOn
	LightingOnMethodEnumerationAlwaysOn LightingOnMethodEnumeration = "alwaysOn"
	// LightingOnMethodEnumerationOther represents other
	LightingOnMethodEnumerationOther LightingOnMethodEnumeration = "other"
)

// DirectionOfUseEnumeration represents the DirectionOfUseEnumeration enumeration
// Allowed values for direction of use.
type DirectionOfUseEnumeration string

const (
	// DirectionOfUseEnumerationUp represents up
	DirectionOfUseEnumerationUp DirectionOfUseEnumeration = "up"
	// DirectionOfUseEnumerationDown represents down
	DirectionOfUseEnumerationDown DirectionOfUseEnumeration = "down"
	// DirectionOfUseEnumerationBoth represents both
	DirectionOfUseEnumerationBoth DirectionOfUseEnumeration = "both"
)

// SurfaceTypeEnumeration represents the SurfaceTypeEnumeration enumeration
// Allowed value for surface.
type SurfaceTypeEnumeration string

const (
	// SurfaceTypeEnumerationSurfaceTypeEnumerationAsphalt represents asphalt
	SurfaceTypeEnumerationSurfaceTypeEnumerationAsphalt SurfaceTypeEnumeration = "asphalt"
	// SurfaceTypeEnumerationSurfaceTypeEnumerationBricks represents bricks
	SurfaceTypeEnumerationSurfaceTypeEnumerationBricks SurfaceTypeEnumeration = "bricks"
	// SurfaceTypeEnumerationSurfaceTypeEnumerationCobbles represents cobbles
	SurfaceTypeEnumerationSurfaceTypeEnumerationCobbles SurfaceTypeEnumeration = "cobbles"
	// SurfaceTypeEnumerationSurfaceTypeEnumerationEarth represents earth
	SurfaceTypeEnumerationSurfaceTypeEnumerationEarth SurfaceTypeEnumeration = "earth"
	// SurfaceTypeEnumerationSurfaceTypeEnumerationGrass represents grass
	SurfaceTypeEnumerationSurfaceTypeEnumerationGrass SurfaceTypeEnumeration = "grass"
	// SurfaceTypeEnumerationSurfaceTypeEnumerationLooseSurface represents looseSurface
	SurfaceTypeEnumerationSurfaceTypeEnumerationLooseSurface SurfaceTypeEnumeration = "looseSurface"
	// SurfaceTypeEnumerationSurfaceTypeEnumerationPavingStones represents pavingStones
	SurfaceTypeEnumerationSurfaceTypeEnumerationPavingStones SurfaceTypeEnumeration = "pavingStones"
	// SurfaceTypeEnumerationSurfaceTypeEnumerationRoughSurface represents roughSurface
	SurfaceTypeEnumerationSurfaceTypeEnumerationRoughSurface SurfaceTypeEnumeration = "roughSurface"
	// SurfaceTypeEnumerationSurfaceTypeEnumerationSmooth represents smooth
	SurfaceTypeEnumerationSurfaceTypeEnumerationSmooth SurfaceTypeEnumeration = "smooth"
	// SurfaceTypeEnumerationSurfaceTypeEnumerationOther represents other
	SurfaceTypeEnumerationSurfaceTypeEnumerationOther SurfaceTypeEnumeration = "other"
)

// HandrailEnumeration represents the HandrailEnumeration enumeration
// Allowed values for Sides of handrail.
type HandrailEnumeration string

const (
	// HandrailEnumerationNone represents none
	HandrailEnumerationNone HandrailEnumeration = "none"
	// HandrailEnumerationOneSide represents oneSide
	HandrailEnumerationOneSide HandrailEnumeration = "oneSide"
	// HandrailEnumerationBothSides represents bothSides
	HandrailEnumerationBothSides HandrailEnumeration = "bothSides"
)

// GradientEnumeration represents the GradientEnumeration enumeration
// Allowed values for Gradient steepness.
type GradientEnumeration string

const (
	// GradientEnumerationGradientEnumerationVerySteep represents verySteep
	GradientEnumerationGradientEnumerationVerySteep GradientEnumeration = "verySteep"
	// GradientEnumerationGradientEnumerationSteep represents steep
	GradientEnumerationGradientEnumerationSteep GradientEnumeration = "steep"
	// GradientEnumerationGradientEnumerationMedium represents medium
	GradientEnumerationGradientEnumerationMedium GradientEnumeration = "medium"
	// GradientEnumerationGradientEnumerationGentle represents gentle
	GradientEnumerationGradientEnumerationGentle GradientEnumeration = "gentle"
	// GradientEnumerationGradientEnumerationLevel represents level
	GradientEnumerationGradientEnumerationLevel GradientEnumeration = "level"
)

// EntranceAttentionEnumeration represents the EntranceAttentionEnumeration enumeration
// Allowed values for entrance attention device.
type EntranceAttentionEnumeration string

const (
	// EntranceAttentionEnumerationNone represents none
	EntranceAttentionEnumerationNone EntranceAttentionEnumeration = "none"
	// EntranceAttentionEnumerationDoorbell represents doorbell
	EntranceAttentionEnumerationDoorbell EntranceAttentionEnumeration = "doorbell"
	// EntranceAttentionEnumerationHelpPoint represents helpPoint
	EntranceAttentionEnumerationHelpPoint EntranceAttentionEnumeration = "helpPoint"
	// EntranceAttentionEnumerationIntercom represents intercom
	EntranceAttentionEnumerationIntercom EntranceAttentionEnumeration = "intercom"
	// EntranceAttentionEnumerationOther represents other
	EntranceAttentionEnumerationOther EntranceAttentionEnumeration = "other"
)

// CrossingTypeEnumeration represents the CrossingTypeEnumeration enumeration
// Allowed values for CROSSING EQUIPMENT.
type CrossingTypeEnumeration string

const (
	// CrossingTypeEnumerationLevelCrossing represents levelCrossing
	CrossingTypeEnumerationLevelCrossing CrossingTypeEnumeration = "levelCrossing"
	// CrossingTypeEnumerationBarrowCrossing represents barrowCrossing
	CrossingTypeEnumerationBarrowCrossing CrossingTypeEnumeration = "barrowCrossing"
	// CrossingTypeEnumerationRoadCrossing represents roadCrossing
	CrossingTypeEnumerationRoadCrossing CrossingTypeEnumeration = "roadCrossing"
	// CrossingTypeEnumerationRoadCrossingWithIsland represents roadCrossingWithIsland
	CrossingTypeEnumerationRoadCrossingWithIsland CrossingTypeEnumeration = "roadCrossingWithIsland"
	// CrossingTypeEnumerationOther represents other
	CrossingTypeEnumerationOther CrossingTypeEnumeration = "other"
)

// NecessaryForceEnumeration represents the NecessaryForceEnumeration enumeration
// Allowed values for the necessary force to open a door.
type NecessaryForceEnumeration string

const (
	// NecessaryForceEnumerationNoForce represents noForce
	NecessaryForceEnumerationNoForce NecessaryForceEnumeration = "noForce"
	// NecessaryForceEnumerationLightForce represents lightForce
	NecessaryForceEnumerationLightForce NecessaryForceEnumeration = "lightForce"
	// NecessaryForceEnumerationMediumForce represents mediumForce
	NecessaryForceEnumerationMediumForce NecessaryForceEnumeration = "mediumForce"
	// NecessaryForceEnumerationHeavyForce represents heavyForce
	NecessaryForceEnumerationHeavyForce NecessaryForceEnumeration = "heavyForce"
	// NecessaryForceEnumerationUnknown represents unknown
	NecessaryForceEnumerationUnknown NecessaryForceEnumeration = "unknown"
)

// MarkingStatusEnumeration represents the MarkingStatusEnumeration enumeration
// Allowed values for the status of the ground marking
type MarkingStatusEnumeration string

const (
	// MarkingStatusEnumerationNone represents none
	MarkingStatusEnumerationNone MarkingStatusEnumeration = "none"
	// MarkingStatusEnumerationGood represents good
	MarkingStatusEnumerationGood MarkingStatusEnumeration = "good"
	// MarkingStatusEnumerationWorn represents worn
	MarkingStatusEnumerationWorn MarkingStatusEnumeration = "worn"
	// MarkingStatusEnumerationHazardous represents hazardous
	MarkingStatusEnumerationHazardous MarkingStatusEnumeration = "hazardous"
	// MarkingStatusEnumerationUnknown represents unknown
	MarkingStatusEnumerationUnknown MarkingStatusEnumeration = "unknown"
)

// VisualObstacleEnumeration represents the VisualObstacleEnumeration enumeration
// Allowed values for the visual obstacles on crossings
type VisualObstacleEnumeration string

const (
	// VisualObstacleEnumerationNone represents none
	VisualObstacleEnumerationNone VisualObstacleEnumeration = "none"
	// VisualObstacleEnumerationCarParking represents carParking
	VisualObstacleEnumerationCarParking VisualObstacleEnumeration = "carParking"
	// VisualObstacleEnumerationVegetation represents vegetation
	VisualObstacleEnumerationVegetation VisualObstacleEnumeration = "vegetation"
	// VisualObstacleEnumerationBuilding represents building
	VisualObstacleEnumerationBuilding VisualObstacleEnumeration = "building"
	// VisualObstacleEnumerationStreetFurniture represents streetFurniture
	VisualObstacleEnumerationStreetFurniture VisualObstacleEnumeration = "streetFurniture"
	// VisualObstacleEnumerationOther represents other
	VisualObstacleEnumerationOther VisualObstacleEnumeration = "other"
)

// BollardCrossingEnumeration represents the BollardCrossingEnumeration enumeration
// Allowed values for the bollards on crossings
type BollardCrossingEnumeration string

const (
	// BollardCrossingEnumerationNone represents none
	BollardCrossingEnumerationNone BollardCrossingEnumeration = "none"
	// BollardCrossingEnumerationContrasted represents contrasted
	// Bollards on both sides and well contrasted with the environment.
	BollardCrossingEnumerationContrasted BollardCrossingEnumeration = "contrasted"
	// BollardCrossingEnumerationYes represents yes
	// Bollards on either side of the crossing (with no information about the contrast).
	BollardCrossingEnumerationYes BollardCrossingEnumeration = "yes"
	// BollardCrossingEnumerationPartial represents partial
	// Bollards only on one side of the crossing.
	BollardCrossingEnumerationPartial BollardCrossingEnumeration = "partial"
	// BollardCrossingEnumerationLimited represents limited
	// Bollards present but too low or poorly positioned in relation to the crossing.
	BollardCrossingEnumerationLimited BollardCrossingEnumeration = "limited"
)

// EntranceTurningSpacePositionEnumeration represents the EntranceTurningSpacePositionEnumeration enumeration
// Allowed values for the positions of a turning space for an Entrance.
type EntranceTurningSpacePositionEnumeration string

const (
	// EntranceTurningSpacePositionEnumerationNone represents none
	EntranceTurningSpacePositionEnumerationNone EntranceTurningSpacePositionEnumeration = "none"
	// EntranceTurningSpacePositionEnumerationOutside represents outside
	EntranceTurningSpacePositionEnumerationOutside EntranceTurningSpacePositionEnumeration = "outside"
	// EntranceTurningSpacePositionEnumerationInside represents inside
	EntranceTurningSpacePositionEnumerationInside EntranceTurningSpacePositionEnumeration = "inside"
	// EntranceTurningSpacePositionEnumerationInsideAndOutside represents insideAndOutside
	EntranceTurningSpacePositionEnumerationInsideAndOutside EntranceTurningSpacePositionEnumeration = "insideAndOutside"
)

// DoorHandleEnumeration represents the DoorHandleEnumeration enumeration
// Allowed values for the type of handle for a door.
type DoorHandleEnumeration string

const (
	// DoorHandleEnumerationNone represents none
	DoorHandleEnumerationNone DoorHandleEnumeration = "none"
	// DoorHandleEnumerationLever represents lever
	// Lever handle
	DoorHandleEnumerationLever DoorHandleEnumeration = "lever"
	// DoorHandleEnumerationButton represents button
	DoorHandleEnumerationButton DoorHandleEnumeration = "button"
	// DoorHandleEnumerationKnob represents knob
	DoorHandleEnumerationKnob DoorHandleEnumeration = "knob"
	// DoorHandleEnumerationCrashBar represents crashBar
	// Panic bar
	DoorHandleEnumerationCrashBar DoorHandleEnumeration = "crashBar"
	// DoorHandleEnumerationDoorHandle represents doorHandle
	// Door handle
	DoorHandleEnumerationDoorHandle DoorHandleEnumeration = "doorHandle"
	// DoorHandleEnumerationGrabRail represents grabRail
	// Grab rail or grab handle
	DoorHandleEnumerationGrabRail DoorHandleEnumeration = "grabRail"
	// DoorHandleEnumerationWindowLever represents windowLever
	// Window lever
	DoorHandleEnumerationWindowLever DoorHandleEnumeration = "windowLever"
	// DoorHandleEnumerationVertical represents vertical
	// Marshal's baton, vertical bar
	DoorHandleEnumerationVertical DoorHandleEnumeration = "vertical"
	// DoorHandleEnumerationOther represents other
	DoorHandleEnumerationOther DoorHandleEnumeration = "other"
)

// SafetyEdgeEnumeration represents the SafetyEdgeEnumeration enumeration
// Allowed values for Sides of Safety Edge.
type SafetyEdgeEnumeration string

const (
	// SafetyEdgeEnumerationNone represents none
	SafetyEdgeEnumerationNone SafetyEdgeEnumeration = "none"
	// SafetyEdgeEnumerationOneSide represents oneSide
	SafetyEdgeEnumerationOneSide SafetyEdgeEnumeration = "oneSide"
	// SafetyEdgeEnumerationBothSides represents bothSides
	SafetyEdgeEnumerationBothSides SafetyEdgeEnumeration = "bothSides"
)

// RampTurningSpacePositionEnumeration represents the RampTurningSpacePositionEnumeration enumeration
// Allowed values for the positions of a turning space for a ramp.
type RampTurningSpacePositionEnumeration string

const (
	// RampTurningSpacePositionEnumerationNone represents none
	RampTurningSpacePositionEnumerationNone RampTurningSpacePositionEnumeration = "none"
	// RampTurningSpacePositionEnumerationBottom represents bottom
	RampTurningSpacePositionEnumerationBottom RampTurningSpacePositionEnumeration = "bottom"
	// RampTurningSpacePositionEnumerationTop represents top
	RampTurningSpacePositionEnumerationTop RampTurningSpacePositionEnumeration = "top"
	// RampTurningSpacePositionEnumerationTopAndBottom represents topAndBottom
	RampTurningSpacePositionEnumerationTopAndBottom RampTurningSpacePositionEnumeration = "topAndBottom"
)

// StepConditionEnumeration represents the StepConditionEnumeration enumeration
// Allowed values forthe Step Condition
type StepConditionEnumeration string

const (
	// StepConditionEnumerationEven represents even
	// The staircase has regular steps, all of the same height and depth.
	StepConditionEnumerationEven StepConditionEnumeration = "even"
	// StepConditionEnumerationUneven represents uneven
	// The steps are not all the same size.
	StepConditionEnumerationUneven StepConditionEnumeration = "uneven"
	// StepConditionEnumerationRough represents rough
	// The steps are very different in size, some may be missing or steeply sloped.
	StepConditionEnumerationRough StepConditionEnumeration = "rough"
)

// StairRampEnumeration represents the StairRampEnumeration enumeration
// Allowed values for the stair ramp.
type StairRampEnumeration string

const (
	// StairRampEnumerationNone represents none
	StairRampEnumerationNone StairRampEnumeration = "none"
	// StairRampEnumerationBicycle represents bicycle
	// A narrow ramp on the side, designed to push a bicycle.
	StairRampEnumerationBicycle StairRampEnumeration = "bicycle"
	// StairRampEnumerationLuggage represents luggage
	// A ramp on the side, designed to roll a suitcase.
	StairRampEnumerationLuggage StairRampEnumeration = "luggage"
	// StairRampEnumerationStroller represents stroller
	// A pair of ramps with steps in between, intended for pushing a stroller.
	StairRampEnumerationStroller StairRampEnumeration = "stroller"
	// StairRampEnumerationOther represents other
	// Another type of handrail included in the staircase itself.
	StairRampEnumerationOther StairRampEnumeration = "other"
	// StairRampEnumerationUnknown represents unknown
	StairRampEnumerationUnknown StairRampEnumeration = "unknown"
)

// ReachedFloorAnnouncementEnumeration represents the ReachedFloorAnnouncementEnumeration enumeration
// Allowed values for the Reached Floor Announcement
type ReachedFloorAnnouncementEnumeration string

const (
	// ReachedFloorAnnouncementEnumerationNone represents none
	ReachedFloorAnnouncementEnumerationNone ReachedFloorAnnouncementEnumeration = "none"
	// ReachedFloorAnnouncementEnumerationVisual represents visual
	ReachedFloorAnnouncementEnumerationVisual ReachedFloorAnnouncementEnumeration = "visual"
	// ReachedFloorAnnouncementEnumerationTactile represents tactile
	ReachedFloorAnnouncementEnumerationTactile ReachedFloorAnnouncementEnumeration = "tactile"
	// ReachedFloorAnnouncementEnumerationAudio represents audio
	ReachedFloorAnnouncementEnumerationAudio ReachedFloorAnnouncementEnumeration = "audio"
	// ReachedFloorAnnouncementEnumerationVisualAndAudio represents visualAndAudio
	ReachedFloorAnnouncementEnumerationVisualAndAudio ReachedFloorAnnouncementEnumeration = "visualAndAudio"
	// ReachedFloorAnnouncementEnumerationVisualAndAudioAndTactile represents visualAndAudioAndTactile
	ReachedFloorAnnouncementEnumerationVisualAndAudioAndTactile ReachedFloorAnnouncementEnumeration = "visualAndAudioAndTactile"
)

// AccessEquipmentRefStructure represents the AccessEquipmentRefStructure element
// Type for a reference to an ACCESS EQUIPMENT.
type AccessEquipmentRefStructure struct {
	PlaceEquipmentRefStructure
}

// EntranceEquipmentRefStructure represents the EntranceEquipmentRefStructure element
// Type for a reference to an ENTRANCE EQUIPMENT.
type EntranceEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// RampEquipmentRefStructure represents the RampEquipmentRefStructure element
// Type for a reference to an RAMP EQUIPMENT.
type RampEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// CrossingEquipmentRefStructure represents the CrossingEquipmentRefStructure element
// Type for a reference to an CROSSING EQUIPMENT.
type CrossingEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// LiftEquipmentRefStructure represents the LiftEquipmentRefStructure element
// Type for a reference to an LIFT EQUIPMENT.
type LiftEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// LiftCallEquipmentRefStructure represents the LiftCallEquipmentRefStructure element
// Type for a reference to an LIFT call EQUIPMENT.
type LiftCallEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// EscalatorEquipmentRefStructure represents the EscalatorEquipmentRefStructure element
// Type for a reference to an ESCALATOR EQUIPMENT.
type EscalatorEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// TravelatorEquipmentRefStructure represents the TravelatorEquipmentRefStructure element
// Type for a reference to an TRAVELATOR EQUIPMENT.
type TravelatorEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// QueueingEquipmentRefStructure represents the QueueingEquipmentRefStructure element
// Type for a reference to an QUEUEING EQUIPMENT.
type QueueingEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// StaircaseEquipmentRefStructure represents the StaircaseEquipmentRefStructure element
// Type for a reference to an STAIRCASE EQUIPMENT.
type StaircaseEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// RoughSurfaceRefStructure represents the RoughSurfaceRefStructure element
// Type for a reference to an ROUGH SURFACE.
type RoughSurfaceRefStructure struct {
	AccessEquipmentRefStructure
}

// PlaceLightingEquipmentRefStructure represents the PlaceLightingEquipmentRefStructure element
// Type for a reference to an PLACE LIGHTING EQUIPMENT.
type PlaceLightingEquipmentRefStructure struct {
	AccessEquipmentRefStructure
}

// AccessEquipmentRef represents the AccessEquipmentRef element
// Identifier of an ACCESS EQUIPMENT.
type AccessEquipmentRef struct {
	AccessEquipmentRefStructure
}

// EntranceEquipmentRef represents the EntranceEquipmentRef element
// Identifier of an ENTRANCE EQUIPMENT.
type EntranceEquipmentRef struct {
	EntranceEquipmentRefStructure
}

// RampEquipmentRef represents the RampEquipmentRef element
// Identifier of an RAMP EQUIPMENT.
type RampEquipmentRef struct {
	AccessEquipmentRefStructure
}

// CrossingEquipmentRef represents the CrossingEquipmentRef element
// Identifier of an CROSSING EQUIPMENT.
type CrossingEquipmentRef struct {
	AccessEquipmentRefStructure
}

// LiftEquipmentRef represents the LiftEquipmentRef element
// Identifier of an LIFT EQUIPMENT.
type LiftEquipmentRef struct {
	AccessEquipmentRefStructure
}

// LiftCallEquipmentRef represents the LiftCallEquipmentRef element
// Identifier of an LIFT call EQUIPMENT.
type LiftCallEquipmentRef struct {
	AccessEquipmentRefStructure
}

// EscalatorEquipmentRef represents the EscalatorEquipmentRef element
// Identifier of an ESCALATOR EQUIPMENT.
type EscalatorEquipmentRef struct {
	AccessEquipmentRefStructure
}

// TravelatorEquipmentRef represents the TravelatorEquipmentRef element
// Identifier of an ENTRANCE EQUIPMENT.
type TravelatorEquipmentRef struct {
	TravelatorEquipmentRefStructure
}

// QueueingEquipmentRef represents the QueueingEquipmentRef element
// Identifier of an QUEUEING EQUIPMENT.
type QueueingEquipmentRef struct {
	AccessEquipmentRefStructure
}

// StaircaseEquipmentRef represents the StaircaseEquipmentRef element
// Identifier of an STAIRCASE EQUIPMENT.
type StaircaseEquipmentRef struct {
	StaircaseEquipmentRefStructure
}

// RoughSurfaceRef represents the RoughSurfaceRef element
// Identifier of an ROUGH SURFACE.
type RoughSurfaceRef struct {
	RoughSurfaceRefStructure
}

// PlaceLightingEquipmentRef represents the PlaceLightingEquipmentRef element
// Identifier of an PLACE LIGHTING EQUIPMENT.
type PlaceLightingEquipmentRef struct {
	AccessEquipmentRefStructure
}

// PathDirectionEnumeration represents the PathDirectionEnumeration enumeration
// Allowed values for flow direction.
type PathDirectionEnumeration string

const (
	// PathDirectionEnumerationOneWay represents oneWay
	PathDirectionEnumerationOneWay PathDirectionEnumeration = "oneWay"
	// PathDirectionEnumerationTwoWay represents twoWay
	PathDirectionEnumerationTwoWay PathDirectionEnumeration = "twoWay"
)

// TransitionEnumeration represents the TransitionEnumeration enumeration
// Allowed values for path transition.
type TransitionEnumeration string

const (
	// TransitionEnumerationTransitionEnumerationUp represents up
	TransitionEnumerationTransitionEnumerationUp TransitionEnumeration = "up"
	// TransitionEnumerationTransitionEnumerationDown represents down
	TransitionEnumerationTransitionEnumerationDown TransitionEnumeration = "down"
	// TransitionEnumerationTransitionEnumerationLevel represents level
	TransitionEnumerationTransitionEnumerationLevel TransitionEnumeration = "level"
	// TransitionEnumerationTransitionEnumerationUpAndDown represents upAndDown
	TransitionEnumerationTransitionEnumerationUpAndDown TransitionEnumeration = "upAndDown"
	// TransitionEnumerationTransitionEnumerationDownAndUp represents downAndUp
	TransitionEnumerationTransitionEnumerationDownAndUp TransitionEnumeration = "downAndUp"
)

// PathHeadingEnumeration represents the PathHeadingEnumeration enumeration
// Allowed values for path heading.
type PathHeadingEnumeration string

const (
	// PathHeadingEnumerationLeft represents left
	PathHeadingEnumerationLeft PathHeadingEnumeration = "left"
	// PathHeadingEnumerationRight represents right
	PathHeadingEnumerationRight PathHeadingEnumeration = "right"
	// PathHeadingEnumerationForward represents forward
	PathHeadingEnumerationForward PathHeadingEnumeration = "forward"
	// PathHeadingEnumerationBack represents back
	PathHeadingEnumerationBack PathHeadingEnumeration = "back"
)

// NavigationTypeEnumeration represents the NavigationTypeEnumeration enumeration
// Allowed values for Navigation type.
type NavigationTypeEnumeration string

const (
	// NavigationTypeEnumerationHallToQuay represents hallToQuay
	NavigationTypeEnumerationHallToQuay NavigationTypeEnumeration = "hallToQuay"
	// NavigationTypeEnumerationHallToStreet represents hallToStreet
	NavigationTypeEnumerationHallToStreet NavigationTypeEnumeration = "hallToStreet"
	// NavigationTypeEnumerationQuayToHall represents quayToHall
	NavigationTypeEnumerationQuayToHall NavigationTypeEnumeration = "quayToHall"
	// NavigationTypeEnumerationQuayToQuay represents quayToQuay
	NavigationTypeEnumerationQuayToQuay NavigationTypeEnumeration = "quayToQuay"
	// NavigationTypeEnumerationQuayToStreet represents quayToStreet
	NavigationTypeEnumerationQuayToStreet NavigationTypeEnumeration = "quayToStreet"
	// NavigationTypeEnumerationStreetToHall represents streetToHall
	NavigationTypeEnumerationStreetToHall NavigationTypeEnumeration = "streetToHall"
	// NavigationTypeEnumerationStreetToQuay represents streetToQuay
	NavigationTypeEnumerationStreetToQuay NavigationTypeEnumeration = "streetToQuay"
	// NavigationTypeEnumerationStreetToSpace represents streetToSpace
	NavigationTypeEnumerationStreetToSpace NavigationTypeEnumeration = "streetToSpace"
	// NavigationTypeEnumerationSpaceToStreet represents spaceToStreet
	NavigationTypeEnumerationSpaceToStreet NavigationTypeEnumeration = "spaceToStreet"
	// NavigationTypeEnumerationSpaceToHall represents spaceToHall
	NavigationTypeEnumerationSpaceToHall NavigationTypeEnumeration = "spaceToHall"
	// NavigationTypeEnumerationHallToSpace represents hallToSpace
	NavigationTypeEnumerationHallToSpace NavigationTypeEnumeration = "hallToSpace"
	// NavigationTypeEnumerationSpaceToSpace represents spaceToSpace
	NavigationTypeEnumerationSpaceToSpace NavigationTypeEnumeration = "spaceToSpace"
	// NavigationTypeEnumerationOther represents other
	NavigationTypeEnumerationOther NavigationTypeEnumeration = "other"
)

// TiltTypeEnumeration represents the TiltTypeEnumeration enumeration
// Allowed values for tilt. +v1.1
type TiltTypeEnumeration string

const (
	// TiltTypeEnumerationStrongLeftTilt represents strongLeftTilt
	TiltTypeEnumerationStrongLeftTilt TiltTypeEnumeration = "strongLeftTilt"
	// TiltTypeEnumerationMediumLeftTilt represents mediumLeftTilt
	TiltTypeEnumerationMediumLeftTilt TiltTypeEnumeration = "mediumLeftTilt"
	// TiltTypeEnumerationNearlyFlat represents nearlyFlat
	TiltTypeEnumerationNearlyFlat TiltTypeEnumeration = "nearlyFlat"
	// TiltTypeEnumerationMediumRightTilt represents mediumRightTilt
	TiltTypeEnumerationMediumRightTilt TiltTypeEnumeration = "mediumRightTilt"
	// TiltTypeEnumerationStrongRightTilt represents strongRightTilt
	TiltTypeEnumerationStrongRightTilt TiltTypeEnumeration = "strongRightTilt"
	// TiltTypeEnumerationUnknown represents unknown
	TiltTypeEnumerationUnknown TiltTypeEnumeration = "unknown"
)

// FlooringTypeEnumeration represents the FlooringTypeEnumeration enumeration
// Allowed values for flooring.
type FlooringTypeEnumeration string

const (
	// FlooringTypeEnumerationCarpet represents carpet
	FlooringTypeEnumerationCarpet FlooringTypeEnumeration = "carpet"
	// FlooringTypeEnumerationConcrete represents concrete
	FlooringTypeEnumerationConcrete FlooringTypeEnumeration = "concrete"
	// FlooringTypeEnumerationAsphalt represents asphalt
	FlooringTypeEnumerationAsphalt FlooringTypeEnumeration = "asphalt"
	// FlooringTypeEnumerationCork represents cork
	FlooringTypeEnumerationCork FlooringTypeEnumeration = "cork"
	// FlooringTypeEnumerationFibreglassGrating represents fibreglassGrating
	FlooringTypeEnumerationFibreglassGrating FlooringTypeEnumeration = "fibreglassGrating"
	// FlooringTypeEnumerationGlazedCeramicTiles represents glazedCeramicTiles
	FlooringTypeEnumerationGlazedCeramicTiles FlooringTypeEnumeration = "glazedCeramicTiles"
	// FlooringTypeEnumerationPlasticMatting represents plasticMatting
	FlooringTypeEnumerationPlasticMatting FlooringTypeEnumeration = "plasticMatting"
	// FlooringTypeEnumerationCeramicTiles represents ceramicTiles
	FlooringTypeEnumerationCeramicTiles FlooringTypeEnumeration = "ceramicTiles"
	// FlooringTypeEnumerationRubber represents rubber
	FlooringTypeEnumerationRubber FlooringTypeEnumeration = "rubber"
	// FlooringTypeEnumerationSteelPlate represents steelPlate
	FlooringTypeEnumerationSteelPlate FlooringTypeEnumeration = "steelPlate"
	// FlooringTypeEnumerationVinyl represents vinyl
	FlooringTypeEnumerationVinyl FlooringTypeEnumeration = "vinyl"
	// FlooringTypeEnumerationWood represents wood
	FlooringTypeEnumerationWood FlooringTypeEnumeration = "wood"
	// FlooringTypeEnumerationStone represents stone
	FlooringTypeEnumerationStone FlooringTypeEnumeration = "stone"
	// FlooringTypeEnumerationGrass represents grass
	FlooringTypeEnumerationGrass FlooringTypeEnumeration = "grass"
	// FlooringTypeEnumerationEarth represents earth
	FlooringTypeEnumerationEarth FlooringTypeEnumeration = "earth"
	// FlooringTypeEnumerationGravel represents gravel
	FlooringTypeEnumerationGravel FlooringTypeEnumeration = "gravel"
	// FlooringTypeEnumerationUneven represents uneven
	FlooringTypeEnumerationUneven FlooringTypeEnumeration = "uneven"
	// FlooringTypeEnumerationUnknown represents unknown
	FlooringTypeEnumerationUnknown FlooringTypeEnumeration = "unknown"
	// FlooringTypeEnumerationOther represents other
	FlooringTypeEnumerationOther FlooringTypeEnumeration = "other"
)

// BorderTypeEnumeration represents the BorderTypeEnumeration enumeration
// Allowed values for border types
type BorderTypeEnumeration string

const (
	// BorderTypeEnumerationWall represents wall
	BorderTypeEnumerationWall BorderTypeEnumeration = "wall"
	// BorderTypeEnumerationGrass represents grass
	BorderTypeEnumerationGrass BorderTypeEnumeration = "grass"
	// BorderTypeEnumerationEarth represents earth
	BorderTypeEnumerationEarth BorderTypeEnumeration = "earth"
	// BorderTypeEnumerationBarrier represents barrier
	BorderTypeEnumerationBarrier BorderTypeEnumeration = "barrier"
	// BorderTypeEnumerationRoad represents road
	BorderTypeEnumerationRoad BorderTypeEnumeration = "road"
	// BorderTypeEnumerationCyclingLane represents cyclingLane
	BorderTypeEnumerationCyclingLane BorderTypeEnumeration = "cyclingLane"
	// BorderTypeEnumerationStep represents step
	BorderTypeEnumerationStep BorderTypeEnumeration = "step"
	// BorderTypeEnumerationRail represents rail
	BorderTypeEnumerationRail BorderTypeEnumeration = "rail"
	// BorderTypeEnumerationPlants represents plants
	BorderTypeEnumerationPlants BorderTypeEnumeration = "plants"
	// BorderTypeEnumerationTrees represents trees
	BorderTypeEnumerationTrees BorderTypeEnumeration = "trees"
	// BorderTypeEnumerationMud represents mud
	BorderTypeEnumerationMud BorderTypeEnumeration = "mud"
	// BorderTypeEnumerationSolidEdge represents solidEdge
	BorderTypeEnumerationSolidEdge BorderTypeEnumeration = "solidEdge"
	// BorderTypeEnumerationWater represents water
	BorderTypeEnumerationWater BorderTypeEnumeration = "water"
	// BorderTypeEnumerationGravel represents gravel
	BorderTypeEnumerationGravel BorderTypeEnumeration = "gravel"
	// BorderTypeEnumerationHandrail represents handrail
	BorderTypeEnumerationHandrail BorderTypeEnumeration = "handrail"
	// BorderTypeEnumerationNoPhysicalBorder represents noPhysicalBorder
	BorderTypeEnumerationNoPhysicalBorder BorderTypeEnumeration = "noPhysicalBorder"
	// BorderTypeEnumerationOtherPhysicalBorder represents otherPhysicalBorder
	BorderTypeEnumerationOtherPhysicalBorder BorderTypeEnumeration = "otherPhysicalBorder"
	// BorderTypeEnumerationUnknown represents unknown
	BorderTypeEnumerationUnknown BorderTypeEnumeration = "unknown"
	// BorderTypeEnumerationOther represents other
	BorderTypeEnumerationOther BorderTypeEnumeration = "other"
)

// PathLinkRefsRelStructure represents the pathLinkRefs_RelStructure element
// Type for a list of references to a PATH LINK.
type PathLinkRefsRelStructure struct {
	OneToManyRelationshipStructure
	PathLinkRef []PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	PathLinkRefByValue []PathLinkRefByValue `xml:"PathLinkRefByValue,omitempty" json:"PathLinkRefByValue,omitempty"`
}

// PathLinkRefStructure represents the PathLinkRefStructure element
// Type for a reference to a PATH LINK.
type PathLinkRefStructure struct {
	LinkRefStructure
}

// PathLinkRefByValueStructure represents the PathLinkRefByValueStructure element
// Type for a reference to a PATH LINK BY VALUE.
type PathLinkRefByValueStructure struct {
	LinkRefByValueStructure
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
}

// PathJunctionRefStructure represents the PathJunctionRefStructure element
// Type for a reference to a PATH JUNCTION.
type PathJunctionRefStructure struct {
	PlaceRefStructure
}

// NavigationPathRefsRelStructure represents the navigationPathRefs_RelStructure element
// Type for a list of references to a NAVIGATION PATH.
type NavigationPathRefsRelStructure struct {
	OneToManyRelationshipStructure
	NavigationPathRef []NavigationPathRef `xml:"NavigationPathRef" json:"NavigationPathRef"`
}

// NavigationPathRefStructure represents the NavigationPathRefStructure element
// Type for reference to a NAVIGATION PATH.
type NavigationPathRefStructure struct {
	LinkSequenceRefStructure
}

// PlaceInSequenceRefStructure represents the PlaceInSequenceRefStructure element
// Type for reference to a PLACE IN SEQUENCE.
type PlaceInSequenceRefStructure struct {
	PointInSequenceRefStructure
}

// PathLinkInSequenceRefStructure represents the PathLinkInSequenceRefStructure element
// Type for Reference to a PATH LINK IN SEQUENCE.
type PathLinkInSequenceRefStructure struct {
	LinkInSequenceRefStructure
}

// PathLinkRef represents the PathLinkRef element
// Reference to a PATH LINK.
type PathLinkRef struct {
	PathLinkRefStructure
}

// PathLinkRefByValue represents the PathLinkRefByValue element
// Reference to a PATH LINK BY VALUE.
type PathLinkRefByValue struct {
	PathLinkRefByValueStructure
}

// PathJunctionRef represents the PathJunctionRef element
// Reference to a PATH JUNCTION.
type PathJunctionRef struct {
	PathJunctionRefStructure
}

// NavigationPathRef represents the NavigationPathRef element
// Reference to a NAVIGATION PATH.
type NavigationPathRef struct {
	NavigationPathRefStructure
}

// PlaceInSequenceRef represents the PlaceInSequenceRef element
// Reference to a PLACE IN SEQUENCE. If given by context does not need to be stated.
type PlaceInSequenceRef struct {
	PlaceInSequenceRefStructure
}

// PathLinkInSequenceRef represents the PathLinkInSequenceRef element
// Reference to a PATH LINK IN SEQUENCE. If given by context does not need to be stated.
type PathLinkInSequenceRef struct {
	PathLinkInSequenceRefStructure
}

// AccessEquipmentVersionStructure represents the AccessEquipment_VersionStructure element
// Type for an ACCESS EQUIPMENT.
type AccessEquipmentVersionStructure struct {
	PlaceEquipmentVersionStructure
	// Width of EQUIPMENT or entrance to EQUIPMENT (e.g. Lift).
	Width *float64 `xml:"Width,omitempty" json:"Width,omitempty"`
	// Height of EQUIPMENT or entrance to EQUIPMENT (e.g. Lift).
	Height *float64 `xml:"Height,omitempty" json:"Height,omitempty"`
	// Direction in which EQUIPMENT. can be used. Default is both.
	DirectionOfUse *DirectionOfUseEnumeration `xml:"DirectionOfUse,omitempty" json:"DirectionOfUse,omitempty"`
	// Number of passengers per minute that can use EQUIPMENT.
	PassengersPerMinute *int `xml:"PassengersPerMinute,omitempty" json:"PassengersPerMinute,omitempty"`
	// Relative weighting to be given to this item of EQUIPMENT.
	RelativeWeighting *int `xml:"RelativeWeighting,omitempty" json:"RelativeWeighting,omitempty"`
	// Whether the access is safe for a guide dog. +v1.1
	SafeForGuideDog *bool `xml:"SafeForGuideDog,omitempty" json:"SafeForGuideDog,omitempty"`
}

// RoughSurfaceStructure represents the RoughSurfaceStructure element
// Type for a ROUGH SURFACE.
type RoughSurfaceStructure struct {
	AccessEquipmentVersionStructure
	// Type of Surface.
	SurfaceType SurfaceTypeEnumeration `xml:"SurfaceType" json:"SurfaceType"`
	// Whether there is visual contrast compared to the immediate surroundings.
	VisualContrast *bool `xml:"VisualContrast,omitempty" json:"VisualContrast,omitempty"`
	// Whether equipment is suitable for cycles.
	SuitableForCycles *bool `xml:"SuitableForCycles,omitempty" json:"SuitableForCycles,omitempty"`
}

// PlaceLightingVersionStructure represents the PlaceLighting_VersionStructure element
// Type for a PLACE LIGHTING EQUIPMENT.
type PlaceLightingVersionStructure struct {
	AccessEquipmentVersionStructure
	// Nature of Lighting.
	Lighting *LightingEnumeration `xml:"Lighting,omitempty" json:"Lighting,omitempty"`
	// Whether Place is always lit.
	AlwaysLit *bool `xml:"AlwaysLit,omitempty" json:"AlwaysLit,omitempty"`
	// Method by which lighting is switched on. v1.1
	LightingOnMethod *LightingOnMethodEnumeration `xml:"LightingOnMethod,omitempty" json:"LightingOnMethod,omitempty"`
}

// StairEquipmentVersionStructure represents the StairEquipment_VersionStructure element
// Type for a STAIR EQUIPMENT.
type StairEquipmentVersionStructure struct {
	AccessEquipmentVersionStructure
	// Depth of Stairs.
	Depth *float64 `xml:"Depth,omitempty" json:"Depth,omitempty"`
	// Number of Steps on Stairs.
	NumberOfSteps *int `xml:"NumberOfSteps,omitempty" json:"NumberOfSteps,omitempty"`
	// Depth of an individual step, in metres rounded to the nearest cm.
	StepHeight *float64 `xml:"StepHeight,omitempty" json:"StepHeight,omitempty"`
	// The length of the step, in metres rounded to the nearest cm.
	StepLength *float64 `xml:"StepLength,omitempty" json:"StepLength,omitempty"`
	// Whether there is a colour contrast on step nosings.
	StepColourContrast *bool `xml:"StepColourContrast,omitempty" json:"StepColourContrast,omitempty"`
	// Indicates the regularity of the steps.
	StepCondition *StepConditionEnumeration `xml:"StepCondition,omitempty" json:"StepCondition,omitempty"`
	// Type of handrail.
	HandrailType *HandrailEnumeration `xml:"HandrailType,omitempty" json:"HandrailType,omitempty"`
	// Height of handrail from step.
	HandrailHeight *float64 `xml:"HandrailHeight,omitempty" json:"HandrailHeight,omitempty"`
	// Height of any additional lower handrail from step.
	LowerHandrailHeight *float64 `xml:"LowerHandrailHeight,omitempty" json:"LowerHandrailHeight,omitempty"`
	// Indicates the presence of signage that can be read tactilely (in Braille for example) on the handrail.
	TactileWriting *bool `xml:"TactileWriting,omitempty" json:"TactileWriting,omitempty"`
	// Indicates the presence and type of a ramp included within the staircase.
	StairRamp *StairRampEnumeration `xml:"StairRamp,omitempty" json:"StairRamp,omitempty"`
	// Properties of top of staircase.
	TopEnd *StairEndStructure `xml:"TopEnd,omitempty" json:"TopEnd,omitempty"`
	// Properties of bottom of staircase.
	BottomEnd *StairEndStructure `xml:"BottomEnd,omitempty" json:"BottomEnd,omitempty"`
}

// EscalatorEquipmentVersionStructure represents the EscalatorEquipment_VersionStructure element
// Type for an ESCALATOR EQUIPMENT.
type EscalatorEquipmentVersionStructure struct {
	StairEquipmentVersionStructure
	// Whether there are buttons to start the ESCALATOR if it is not moving, and whether these buttons are intended and suited for the visually impaired.
	TactileActuators *bool `xml:"TactileActuators,omitempty" json:"TactileActuators,omitempty"`
	// Whether ESCALATOR is Energy Saving.
	EnergySaving *bool `xml:"EnergySaving,omitempty" json:"EnergySaving,omitempty"`
	// Whether dogs must be carried on ESCALATOR. +v1.1
	DogsMustBeCarried *bool `xml:"DogsMustBeCarried,omitempty" json:"DogsMustBeCarried,omitempty"`
	// Whether ESCALATOR has a landing. +v1.1
	EscalatorWithLanding *bool `xml:"EscalatorWithLanding,omitempty" json:"EscalatorWithLanding,omitempty"`
	// Whether the escalator is equipped with a remote operation control system.
	MonitoringRemoteControl *bool `xml:"MonitoringRemoteControl,omitempty" json:"MonitoringRemoteControl,omitempty"`
}

// StaircaseEquipmentVersionStructure represents the StaircaseEquipment_VersionStructure element
// Type for a STAIRCASE EQUIPMENT.
type StaircaseEquipmentVersionStructure struct {
	StairEquipmentVersionStructure
	// Whether Handrail is continuous across staircase.
	ContinuousHandrail *bool `xml:"ContinuousHandrail,omitempty" json:"ContinuousHandrail,omitempty"`
	// Whether openwork stairs (no riser). +v1.1
	WithoutRiser *bool `xml:"WithoutRiser,omitempty" json:"WithoutRiser,omitempty"`
	// Whether Stairs are spiral.
	SpiralStair *bool `xml:"SpiralStair,omitempty" json:"SpiralStair,omitempty"`
	// Number of flights of Stairs.
	NumberOfFlights *int `xml:"NumberOfFlights,omitempty" json:"NumberOfFlights,omitempty"`
	// Flight of stairs.
	Flights *StairFlightsRelStructure `xml:"flights,omitempty" json:"flights,omitempty"`
}

// StairFlightsRelStructure represents the stairFlights_RelStructure element
// Type for a list of FLIGHTs.
type StairFlightsRelStructure struct {
	StrictContainmentAggregationStructure
	// FLIGHT of Stairs.
	StairFlight []StairFlight `xml:"StairFlight" json:"StairFlight"`
}

// StairFlightVersionedChildStructure represents the StairFlight_VersionedChildStructure element
// Flight of stairs.
type StairFlightVersionedChildStructure struct {
	VersionedChildStructure
	// Depth of Stairs.
	Depth *float64 `xml:"Depth,omitempty" json:"Depth,omitempty"`
	// Number of Steps on Stairs.
	NumberOfSteps *int `xml:"NumberOfSteps,omitempty" json:"NumberOfSteps,omitempty"`
	// Depth of an individual step, in metres rounded to the nearest cm.
	StepHeight *float64 `xml:"StepHeight,omitempty" json:"StepHeight,omitempty"`
	// The length of the step, in metres rounded to the nearest cm.
	StepLength *float64 `xml:"StepLength,omitempty" json:"StepLength,omitempty"`
	// Whether there is a colour contrast on step nosings.
	StepColourContrast *bool `xml:"StepColourContrast,omitempty" json:"StepColourContrast,omitempty"`
	// Indicates the regularity of the steps.
	StepCondition *StepConditionEnumeration `xml:"StepCondition,omitempty" json:"StepCondition,omitempty"`
	// Type of handrail.
	HandrailType *HandrailEnumeration `xml:"HandrailType,omitempty" json:"HandrailType,omitempty"`
	// Height of handrail from step.
	HandrailHeight *float64 `xml:"HandrailHeight,omitempty" json:"HandrailHeight,omitempty"`
	// Height of any additional lower handrail from step.
	LowerHandrailHeight *float64 `xml:"LowerHandrailHeight,omitempty" json:"LowerHandrailHeight,omitempty"`
	// Indicates the presence of signage that can be read tactilely (in Braille for example) on the handrail.
	TactileWriting *bool `xml:"TactileWriting,omitempty" json:"TactileWriting,omitempty"`
	// Indicates the presence and type of a ramp included within the staircase.
	StairRamp *StairRampEnumeration `xml:"StairRamp,omitempty" json:"StairRamp,omitempty"`
	// Properties of top of staircase.
	TopEnd *StairEndStructure `xml:"TopEnd,omitempty" json:"TopEnd,omitempty"`
	// Properties of bottom of staircase.
	BottomEnd *StairEndStructure `xml:"BottomEnd,omitempty" json:"BottomEnd,omitempty"`
	// Whether Handrail is continuous from previous stage.
	ContinuousHandrail *bool `xml:"ContinuousHandrail,omitempty" json:"ContinuousHandrail,omitempty"`
}

// StairEndStructure represents the StairEndStructure element
// End of Flight of stairs.
type StairEndStructure struct {
	// Whether there is a handrail that continues from previous section.
	ContinuingHandrail *bool `xml:"ContinuingHandrail,omitempty" json:"ContinuingHandrail,omitempty"`
	// Whether there is a textured ground surface.
	TexturedSurface *bool `xml:"TexturedSurface,omitempty" json:"TexturedSurface,omitempty"`
	// Whether there is a colour contrast.
	VisualContrast *bool `xml:"VisualContrast,omitempty" json:"VisualContrast,omitempty"`
}

// TravelatorEquipmentVersionStructure represents the TravelatorEquipment_VersionStructure element
// Type for a TRAVELATOR EQUIPMENT.
type TravelatorEquipmentVersionStructure struct {
	AccessEquipmentVersionStructure
	// Whether there are buttons to start the TRAVELATOR if it is not moving, and whether these buttons are intended and suited for the visually impaired.
	TactileActuators *bool `xml:"TactileActuators,omitempty" json:"TactileActuators,omitempty"`
	// Whether Travelator is Energy Saving.
	EnergySaving *bool `xml:"EnergySaving,omitempty" json:"EnergySaving,omitempty"`
	// Speed of travelator.
	Speed *float64 `xml:"Speed,omitempty" json:"Speed,omitempty"`
	// Length (integer in meters).+v1.1
	Length *float64 `xml:"Length,omitempty" json:"Length,omitempty"`
	// Maximum gradient in degrees for inclined moving walks.+v1.1
	Gradient *float64 `xml:"Gradient,omitempty" json:"Gradient,omitempty"`
	// Whether the moving walk has an escalator part. +v1.1
	IntegratesAnEscalatorPart *bool `xml:"IntegratesAnEscalatorPart,omitempty" json:"IntegratesAnEscalatorPart,omitempty"`
}

// LiftEquipmentVersionStructure represents the LiftEquipment_VersionStructure element
// Type for a LIFT EQUIPMENT.
type LiftEquipmentVersionStructure struct {
	AccessEquipmentVersionStructure
	// Depth of lift.
	Depth *float64 `xml:"Depth,omitempty" json:"Depth,omitempty"`
	// Maximum load in Kilos.
	MaximumLoad *float64 `xml:"MaximumLoad,omitempty" json:"MaximumLoad,omitempty"`
	// Whether lift is judged wheelchair passable.
	WheelchairPassable *bool `xml:"WheelchairPassable,omitempty" json:"WheelchairPassable,omitempty"`
	// Turning circle within Lift for a wheelchair.
	WheelchairTurningCircle *float64 `xml:"WheelchairTurningCircle,omitempty" json:"WheelchairTurningCircle,omitempty"`
	// Internal width of lift.
	InternalWidth *float64 `xml:"InternalWidth,omitempty" json:"InternalWidth,omitempty"`
	// Internal height of lift.
	InternalHeight *float64 `xml:"InternalHeight,omitempty" json:"InternalHeight,omitempty"`
	// Type of handrail.
	HandrailType *HandrailEnumeration `xml:"HandrailType,omitempty" json:"HandrailType,omitempty"`
	// Height of handrail from floor.
	HandrailHeight *float64 `xml:"HandrailHeight,omitempty" json:"HandrailHeight,omitempty"`
	// Height of lower handrail from floor.
	LowerHandrailHeight *float64 `xml:"LowerHandrailHeight,omitempty" json:"LowerHandrailHeight,omitempty"`
	// Indicates the presence of signage that can be read tactilely (in Braille for example) on the handrail.
	TactileWriting *bool `xml:"TactileWriting,omitempty" json:"TactileWriting,omitempty"`
	// Height of call button from ground (outside the cabin).
	CallButtonHeight *float64 `xml:"CallButtonHeight,omitempty" json:"CallButtonHeight,omitempty"`
	// Height of direction call button from ground (outside the cabin).
	DirectionButtonHeight *float64 `xml:"DirectionButtonHeight,omitempty" json:"DirectionButtonHeight,omitempty"`
	// Whether buttons are raised (inside and outside the cabin).
	RaisedButtons *bool `xml:"RaisedButtons,omitempty" json:"RaisedButtons,omitempty"`
	// Whether buttons have braille (inside and outside the cabin).
	BrailleButtons *bool `xml:"BrailleButtons,omitempty" json:"BrailleButtons,omitempty"`
	// Indicates whether there is a tactile marker on the go to ground floor button (inside the cabin). +v1.1
	TactileGroundFloorButton *bool `xml:"TactileGroundFloorButton,omitempty" json:"TactileGroundFloorButton,omitempty"`
	// Indicates a tactile marker on the floor under, or aligned with, the buttons (outside the cabin). +v1.1
	GroundMarkAlignedWithButton *bool `xml:"GroundMarkAlignedWithButton,omitempty" json:"GroundMarkAlignedWithButton,omitempty"`
	// Whether lift is a through loader.
	ThroughLoader *bool `xml:"ThroughLoader,omitempty" json:"ThroughLoader,omitempty"`
	// Whether Lift has a mirror on opposite side.
	MirrorOnOppositeSide *bool `xml:"MirrorOnOppositeSide,omitempty" json:"MirrorOnOppositeSide,omitempty"`
	// Whether Lift has an attendant.
	Attendant *bool `xml:"Attendant,omitempty" json:"Attendant,omitempty"`
	// Whether lift is automatic.
	Automatic *bool `xml:"Automatic,omitempty" json:"Automatic,omitempty"`
	// Whether the floor selection is made outside the lift.+v1.1
	ExternalFloorSelection *bool `xml:"ExternalFloorSelection,omitempty" json:"ExternalFloorSelection,omitempty"`
	// Whether lift has alarm button.
	AlarmButton *bool `xml:"AlarmButton,omitempty" json:"AlarmButton,omitempty"`
	// Whether all buttons have tactile markers suited for the visually impaired.
	TactileActuators *bool `xml:"TactileActuators,omitempty" json:"TactileActuators,omitempty"`
	// Whether Lift has AudioAnnouncements.
	AudioAnnouncements *bool `xml:"AudioAnnouncements,omitempty" json:"AudioAnnouncements,omitempty"`
	// DEPRECATED - Spelling correction  renamed to audio announcements. THis value will be dropped at  - so
	AccousticAnnouncements *bool `xml:"AccousticAnnouncements,omitempty" json:"AccousticAnnouncements,omitempty"`
	// Whether the elevator car has a visual, tactile or audible display to announce the floor reached. This is different from AudioAnnouncements since AudioAnnouncements can be about different topics than reached floor (closing doors, up-down movement, etc.), and the ReachedFloorAnnouncement can be visual or tactile, and not only audio.
	ReachedFloorAnnouncement *ReachedFloorAnnouncementEnumeration `xml:"ReachedFloorAnnouncement,omitempty" json:"ReachedFloorAnnouncement,omitempty"`
	// Indicates existence of a Magnetic Induction Loop. +v1.1
	MagneticInductionLoop *bool `xml:"MagneticInductionLoop,omitempty" json:"MagneticInductionLoop,omitempty"`
	// Whether Lift has good signage to find it.
	SignageToLift *bool `xml:"SignageToLift,omitempty" json:"SignageToLift,omitempty"`
	// Whether equipment is suitable for cycles.
	SuitableForCycles *bool `xml:"SuitableForCycles,omitempty" json:"SuitableForCycles,omitempty"`
	// Indicates buttons height (in metres, uppermost button inside the cabin).
	ButtonsHeight *float64 `xml:"ButtonsHeight,omitempty" json:"ButtonsHeight,omitempty"`
}

// LiftCallEquipmentVersionStructure represents the LiftCallEquipment_VersionStructure element
type LiftCallEquipmentVersionStructure struct {
	AccessEquipmentVersionStructure
	// Height of call button from ground.
	CallButtonHeight *float64 `xml:"CallButtonHeight,omitempty" json:"CallButtonHeight,omitempty"`
	// Whether buttons are raised.
	RaisedButtons *bool `xml:"RaisedButtons,omitempty" json:"RaisedButtons,omitempty"`
	// Whether buttons have braille.
	BrailleButtons *bool `xml:"BrailleButtons,omitempty" json:"BrailleButtons,omitempty"`
	// Indicates a tactile marker on floor under the buttons (or aligned with). +v1.1
	GroundMarkAlignedWithButton *bool `xml:"GroundMarkAlignedWithButton,omitempty" json:"GroundMarkAlignedWithButton,omitempty"`
	// Whether LIFT has AudioAnnouncements.
	AudioAnnouncements *bool `xml:"AudioAnnouncements,omitempty" json:"AudioAnnouncements,omitempty"`
	// Indicates existence of a magnetic induction loop. +v1.1
	MagneticInductionLoop *bool `xml:"MagneticInductionLoop,omitempty" json:"MagneticInductionLoop,omitempty"`
	// The direction from which to approach the door(s).
	DoorOrientation []CompassBearing8Enumeration `xml:"DoorOrientation,omitempty" json:"DoorOrientation,omitempty"`
	// Whether the lift is equipped with a remote operation control system
	MonitoringRemoteControl *bool `xml:"MonitoringRemoteControl,omitempty" json:"MonitoringRemoteControl,omitempty"`
}

// RampEquipmentVersionStructure represents the RampEquipment_VersionStructure element
// Type for a RAMP EQUIPMENT.
type RampEquipmentVersionStructure struct {
	AccessEquipmentVersionStructure
	// Length of ramp in metres. In the case of a mobile ramp associated with a vehicle this element is used to convey the length the ramp needs to be extended from the vehicle. This indicates the minimally necessary width of the Quay.
	Length *float64 `xml:"Length,omitempty" json:"Length,omitempty"`
	// Maximum load in kilograms. Mainly used for mobile ramps.
	MaximumLoad *float64 `xml:"MaximumLoad,omitempty" json:"MaximumLoad,omitempty"`
	// Gradient of ramp in degrees.
	Gradient *int `xml:"Gradient,omitempty" json:"Gradient,omitempty"`
	// Gradient of ramp fixed values.+v1.1
	GradientType *GradientEnumeration `xml:"GradientType,omitempty" json:"GradientType,omitempty"`
	// Whether ramp is on a pedestal.
	Pedestal *bool `xml:"Pedestal,omitempty" json:"Pedestal,omitempty"`
	// Type of handrail.
	HandrailType *HandrailEnumeration `xml:"HandrailType,omitempty" json:"HandrailType,omitempty"`
	// Height of handrail.
	HandrailHeight *float64 `xml:"HandrailHeight,omitempty" json:"HandrailHeight,omitempty"`
	// Height of any additional lower handrail.
	LowerHandrailHeight *float64 `xml:"LowerHandrailHeight,omitempty" json:"LowerHandrailHeight,omitempty"`
	// Indicates the presence of signage that can be read tactilely (in Braille for example) on the handrail.
	TactileWriting *bool `xml:"TactileWriting,omitempty" json:"TactileWriting,omitempty"`
	// Whether ramp has tactile guidance strips.
	TactileGuidanceStrips *bool `xml:"TactileGuidanceStrips,omitempty" json:"TactileGuidanceStrips,omitempty"`
	// Whether ramp has visual guidance bands or guidance strips.
	VisualGuidanceBands *bool `xml:"VisualGuidanceBands,omitempty" json:"VisualGuidanceBands,omitempty"`
	// Whether ramp is temporary or permanent.
	Temporary *bool `xml:"Temporary,omitempty" json:"Temporary,omitempty"`
	// Whether equipment is suitable for cycles.
	SuitableForCycles *bool `xml:"SuitableForCycles,omitempty" json:"SuitableForCycles,omitempty"`
	// The maximum distance between two resting levels, in metres rounded to the nearest cm. It is recommended to install a rest platform at the bottom and top of each ramp, as well as every 10 metres in the case of a long ramp.
	RestStopDistance *float64 `xml:"RestStopDistance,omitempty" json:"RestStopDistance,omitempty"`
	// Whether there is a wheel guard (side border intended to block the wheel of the wheelchair to prevent falls).
	SafetyEdge *SafetyEdgeEnumeration `xml:"SafetyEdge,omitempty" json:"SafetyEdge,omitempty"`
	// Position of the manoeuvring space (for wheelchairs).
	TurningSpace *RampTurningSpacePositionEnumeration `xml:"TurningSpace,omitempty" json:"TurningSpace,omitempty"`
}

// EntranceEquipmentVersionStructure represents the EntranceEquipment_VersionStructure element
// Type for an ENTRANCE EQUIPMENT.
type EntranceEquipmentVersionStructure struct {
	AccessEquipmentVersionStructure
	// Whether there is a door in the entrance. If false, opening does not have door.
	Door *bool `xml:"Door,omitempty" json:"Door,omitempty"`
	// Pointing towards outside (or, for doors within a StopPlace, to label the side as outside).
	DoorOrientation *CompassBearing8Enumeration `xml:"DoorOrientation,omitempty" json:"DoorOrientation,omitempty"`
	// Type of door handle.
	DoorHandleOutside *DoorHandleEnumeration `xml:"DoorHandleOutside,omitempty" json:"DoorHandleOutside,omitempty"`
	DoorHandleInside *DoorHandleEnumeration `xml:"DoorHandleInside,omitempty" json:"DoorHandleInside,omitempty"`
	// Whether the door is kept open.
	KeptOpen *bool `xml:"KeptOpen,omitempty" json:"KeptOpen,omitempty"`
	// Whether door is revolving. Only applies if door is specified.
	RevolvingDoor *bool `xml:"RevolvingDoor,omitempty" json:"RevolvingDoor,omitempty"`
	// Whether there is a physical barrier across the doorway.
	Barrier *bool `xml:"Barrier,omitempty" json:"Barrier,omitempty"`
	// Number of gates in barrier or entrance.
	NumberOfGates *int `xml:"NumberOfGates,omitempty" json:"NumberOfGates,omitempty"`
	// Staffing of entrance or barrier.
	Staffing *StaffingEnumeration `xml:"Staffing,omitempty" json:"Staffing,omitempty"`
	// Whether entrance requires staff for use.
	EntranceRequiresStaffing *bool `xml:"EntranceRequiresStaffing,omitempty" json:"EntranceRequiresStaffing,omitempty"`
	// Whether passage requires ticket.
	EntranceRequiresTicket *bool `xml:"EntranceRequiresTicket,omitempty" json:"EntranceRequiresTicket,omitempty"`
	// Whether passage requires passport.
	EntranceRequiresPassport *bool `xml:"EntranceRequiresPassport,omitempty" json:"EntranceRequiresPassport,omitempty"`
	// Whether there is a drop Kerb outside door.
	DropKerbOutside *bool `xml:"DropKerbOutside,omitempty" json:"DropKerbOutside,omitempty"`
	// Whether door has acoustic sensors.
	AcousticSensor *bool `xml:"AcousticSensor,omitempty" json:"AcousticSensor,omitempty"`
	// Whether doors are automatic.
	AutomaticDoor *bool `xml:"AutomaticDoor,omitempty" json:"AutomaticDoor,omitempty"`
	// Indicates door control element height. This could be e.g. a door handle or a door button.
	DoorControlElementHeight *float64 `xml:"DoorControlElementHeight,omitempty" json:"DoorControlElementHeight,omitempty"`
	// Whether door is made of glass.
	GlassDoor *bool `xml:"GlassDoor,omitempty" json:"GlassDoor,omitempty"`
	// Whether there is an airlock. +v1.1
	Airlock *bool `xml:"Airlock,omitempty" json:"Airlock,omitempty"`
	// Door can be passed in a wheel chair.
	WheelchairPassable *bool `xml:"WheelchairPassable,omitempty" json:"WheelchairPassable,omitempty"`
	// Can be passed in a wheel chair unaided.
	WheelchairUnaided *bool `xml:"WheelchairUnaided,omitempty" json:"WheelchairUnaided,omitempty"`
	// Whether there is an audio or video communication needed for access. +v1.1
	AudioOrVideoIntercom *bool `xml:"AudioOrVideoIntercom,omitempty" json:"AudioOrVideoIntercom,omitempty"`
	// Nature of doorbell help point etc needed to operate door.
	EntranceAttention *EntranceAttentionEnumeration `xml:"EntranceAttention,omitempty" json:"EntranceAttention,omitempty"`
	// Whether there is a tactile doorstep mark. +v1.1
	DoorstepMark *bool `xml:"DoorstepMark,omitempty" json:"DoorstepMark,omitempty"`
	// Necessary force to open the door. +v1.1
	NecessaryForceToOpen *NecessaryForceEnumeration `xml:"NecessaryForceToOpen,omitempty" json:"NecessaryForceToOpen,omitempty"`
	// Whether equipment is suitable for cycles.
	SuitableForCycles *bool `xml:"SuitableForCycles,omitempty" json:"SuitableForCycles,omitempty"`
	// Whether there is an audio signal indicating passing through.
	AudioPassthroughIndicator *bool `xml:"AudioPassthroughIndicator,omitempty" json:"AudioPassthroughIndicator,omitempty"`
	// When there is a removable ramp, whether the entrance has a dedicated doorbell to ask for the ramp.
	RampDoorbell *bool `xml:"RampDoorbell,omitempty" json:"RampDoorbell,omitempty"`
	// Whether the entrance is easily identifiable in its environment taking into account architecture, signage and visual contrast.
	Recognizable *bool `xml:"Recognizable,omitempty" json:"Recognizable,omitempty"`
	// Position of the turning space: the manoeuvring space for wheelchairs is a space left in the immediate vicinity of the door to operate it correctly and is (should be) materialised by a rectangle located at the base of the door.
	TurningSpacePosition *EntranceTurningSpacePositionEnumeration `xml:"TurningSpacePosition,omitempty" json:"TurningSpacePosition,omitempty"`
	// Turning circle within the turning space for a wheelchair.
	WheelchairTurningCircle *float64 `xml:"WheelchairTurningCircle,omitempty" json:"WheelchairTurningCircle,omitempty"`
}

// QueueingEquipmentVersionStructure represents the QueueingEquipment_VersionStructure element
// Type for a QUEUEING EQUIPMENT.
type QueueingEquipmentVersionStructure struct {
	AccessEquipmentVersionStructure
	// Number of queue server points.
	NumberOfServers *int `xml:"NumberOfServers,omitempty" json:"NumberOfServers,omitempty"`
	// Whether queueing are is controlled by cattle bars.
	RailedQueue *bool `xml:"RailedQueue,omitempty" json:"RailedQueue,omitempty"`
	// Whether queue is controlled by numbered tickets.
	TicketedQueue *bool `xml:"TicketedQueue,omitempty" json:"TicketedQueue,omitempty"`
	// Whether there is priority access for disabled (no-queue).+v1.1
	DisabledPriority *bool `xml:"DisabledPriority,omitempty" json:"DisabledPriority,omitempty"`
	// Whether queuing may be done seated.+v1.1
	QueuingSeatedPossible *bool `xml:"QueuingSeatedPossible,omitempty" json:"QueuingSeatedPossible,omitempty"`
}

// CrossingEquipmentVersionStructure represents the CrossingEquipment_VersionStructure element
// Type for a CROSSING EQUIPMENT.
type CrossingEquipmentVersionStructure struct {
	AccessEquipmentVersionStructure
	// Type of CROSSING.
	CrossingType *CrossingTypeEnumeration `xml:"CrossingType,omitempty" json:"CrossingType,omitempty"`
	// Whether CROSSING is marked as Zebra.
	ZebraCrossing *bool `xml:"ZebraCrossing,omitempty" json:"ZebraCrossing,omitempty"`
	// Whether there are lights for pedestrians to cross by.
	PedestrianLights *bool `xml:"PedestrianLights,omitempty" json:"PedestrianLights,omitempty"`
	// Whether crossing has Acoustic Device sensors.
	AcousticDeviceSensors *bool `xml:"AcousticDeviceSensors,omitempty" json:"AcousticDeviceSensors,omitempty"`
	// Whether crossing has Acoustic Crossing aids.
	AcousticCrossingAids *bool `xml:"AcousticCrossingAids,omitempty" json:"AcousticCrossingAids,omitempty"`
	// Whether crossing has tactile guidance strips.
	TactileGuidanceStrips *bool `xml:"TactileGuidanceStrips,omitempty" json:"TactileGuidanceStrips,omitempty"`
	// Whether crossing has tactile warning strip. +v1.1
	TactileWarningStrip *TactileWarningStripEnumeration `xml:"TactileWarningStrip,omitempty" json:"TactileWarningStrip,omitempty"`
	// Whether crossing has visual guidance bands or guidance strips.
	VisualGuidanceBands *bool `xml:"VisualGuidanceBands,omitempty" json:"VisualGuidanceBands,omitempty"`
	// Whether crossing has dropped Kerb.
	DroppedKerb *bool `xml:"DroppedKerb,omitempty" json:"DroppedKerb,omitempty"`
	// Whether equipment is suitable for cycles.
	SuitableForCycles *bool `xml:"SuitableForCycles,omitempty" json:"SuitableForCycles,omitempty"`
	// Status of the ground marking of the crossing.
	MarkingStatus *MarkingStatusEnumeration `xml:"MarkingStatus,omitempty" json:"MarkingStatus,omitempty"`
	// Indicates the presence of a device delivering vibrations to facilitate the crossing of visually impaired people.
	VibratingCrossingAids *bool `xml:"VibratingCrossingAids,omitempty" json:"VibratingCrossingAids,omitempty"`
	// Indicates whether the pedestrian crossing is convex, curved (it goes up then down).
	BumpCrossing *bool `xml:"BumpCrossing,omitempty" json:"BumpCrossing,omitempty"`
	// Indicates the presence and type of visual obstacle to visibility. The visual obstacle is an element, positioned up to 5 metres upstream of the crossing, and which hinders the pedestrian from seeing and being seen when crossing.
	VisualObstacle *VisualObstacleEnumeration `xml:"VisualObstacle,omitempty" json:"VisualObstacle,omitempty"`
	// Indicates the presence of bollards intended to protect pedestrians.
	BollardCrossing *BollardCrossingEnumeration `xml:"BollardCrossing,omitempty" json:"BollardCrossing,omitempty"`
}

// AccessEquipment represents the AccessEquipment element
// Specialisation of PLACE EQUIPMENT dedicated to access (e.g. lifts, entrances, stairs, ramps, etc.).
type AccessEquipment struct {
	AccessEquipmentVersionStructure
}

// RoughSurface represents the RoughSurface element
// Specialisation of PLACE EQUIPMENT for rough surfaces, giving properties of surface texture, mainly for impaired person information.
type RoughSurface struct {
	RoughSurfaceStructure
}

// PlaceLighting represents the PlaceLighting element
// Specialisation of PLACE EQUIPMENT for LIGHTING EQUIPMENT (e.g. lamp post).
type PlaceLighting struct {
	PlaceLightingVersionStructure
}

// StairEquipment represents the StairEquipment element
// Specialisation of ACCESS EQUIPMENT for stairs (stair, escalator, staircase, etc.).
type StairEquipment struct {
	StairEquipmentVersionStructure
}

// EscalatorEquipment represents the EscalatorEquipment element
// Specialisation of STAIR EQUIPMENT for ESCALATORs.
type EscalatorEquipment struct {
	EscalatorEquipmentVersionStructure
}

// StaircaseEquipment represents the StaircaseEquipment element
// Specialisation of STAIR EQUIPMENT for stair cases.
type StaircaseEquipment struct {
	StaircaseEquipmentVersionStructure
}

// StairFlight represents the StairFlight element
// SAn individual flight of a STAIR CASE.
type StairFlight struct {
	StairFlightVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// TravelatorEquipment represents the TravelatorEquipment element
// Specialisation of PLACE EQUIPMENT for TRAVELATORs (provides travelator attributes like speed, etc.).
type TravelatorEquipment struct {
	TravelatorEquipmentVersionStructure
}

// LiftEquipment represents the LiftEquipment element
// Specialisation of PLACE ACCESS EQUIPMENT for LIFTs (provides lift characteristics like depth, maximum load, etc.).
type LiftEquipment struct {
	LiftEquipmentVersionStructure
}

// LiftCallEquipment represents the LiftCallEquipment element
// Specialisation of PLACE ACCESS EQUIPMENT for calling LIFTs (provides specific characteristics that may differ from floor to floor like button height, door, etc.).
type LiftCallEquipment struct {
	LiftCallEquipmentVersionStructure
}

// RampEquipment represents the RampEquipment element
// Specialisation of PLACE ACCESS EQUIPMENT for ramps (provides ramp characteristics like length, gradient, etc.).
type RampEquipment struct {
	RampEquipmentVersionStructure
}

// EntranceEquipment represents the EntranceEquipment element
// Specialisation of PLACE ACCESS EQUIPMENT for ENTRANCEs (door, barrier, revolving door, etc.).
type EntranceEquipment struct {
	EntranceEquipmentVersionStructure
}

// QueueingEquipment represents the QueueingEquipment element
// Specialisation of PLACE ACCESS EQUIPMENT dedicated to queuing.
type QueueingEquipment struct {
	QueueingEquipmentVersionStructure
}

// CrossingEquipment represents the CrossingEquipment element
// Specialisation of PLACE ACCESS EQUIPMENT for CROSSING EQUIPMENTs (zebra, pedestrian lights, acoustic device sensors, tactile guide strips, etc.).
type CrossingEquipment struct {
	CrossingEquipmentVersionStructure
}

// LockerTypeEnumeration represents the LockerTypeEnumeration enumeration
// Allowed value for Locker Type.
type LockerTypeEnumeration string

const (
	// LockerTypeEnumerationLeftLuggageOffice represents leftLuggageOffice
	LockerTypeEnumerationLeftLuggageOffice LockerTypeEnumeration = "leftLuggageOffice"
	// LockerTypeEnumerationLockers represents lockers
	LockerTypeEnumerationLockers LockerTypeEnumeration = "lockers"
	// LockerTypeEnumerationOversizeLockers represents oversizeLockers
	LockerTypeEnumerationOversizeLockers LockerTypeEnumeration = "oversizeLockers"
	// LockerTypeEnumerationBikeRack represents bikeRack
	LockerTypeEnumerationBikeRack LockerTypeEnumeration = "bikeRack"
	// LockerTypeEnumerationBikeCarriage represents bikeCarriage
	LockerTypeEnumerationBikeCarriage LockerTypeEnumeration = "bikeCarriage"
	// LockerTypeEnumerationOther represents other
	LockerTypeEnumerationOther LockerTypeEnumeration = "other"
)

// LockingTypeEnumeration represents the LockingTypeEnumeration enumeration
// Allowed value for type of locking mechanism.+v1.1.
type LockingTypeEnumeration string

const (
	// LockingTypeEnumerationKey represents key
	LockingTypeEnumerationKey LockingTypeEnumeration = "key"
	// LockingTypeEnumerationKeyboard represents keyboard
	LockingTypeEnumerationKeyboard LockingTypeEnumeration = "keyboard"
	// LockingTypeEnumerationMechanicalNumbering represents mechanicalNumbering
	LockingTypeEnumerationMechanicalNumbering LockingTypeEnumeration = "mechanicalNumbering"
	// LockingTypeEnumerationContactless represents contactless
	LockingTypeEnumerationContactless LockingTypeEnumeration = "contactless"
	// LockingTypeEnumerationMobileApp represents mobileApp
	LockingTypeEnumerationMobileApp LockingTypeEnumeration = "mobileApp"
	// LockingTypeEnumerationOther represents other
	LockingTypeEnumerationOther LockingTypeEnumeration = "other"
)

// SiteEquipmentRefStructure represents the SiteEquipmentRefStructure element
// Type for a reference to an SITE EQUIPMENT.
type SiteEquipmentRefStructure struct {
	PlaceEquipmentRefStructure
}

// WaitingEquipmentRefStructure represents the WaitingEquipmentRefStructure element
// Type for a reference to an WAITING EQUIPMENT.
type WaitingEquipmentRefStructure struct {
	SiteEquipmentRefStructure
}

// WaitingRoomEquipmentRefStructure represents the WaitingRoomEquipmentRefStructure element
// Type for a reference to an WAITING ROOM EQUIPMENT.
type WaitingRoomEquipmentRefStructure struct {
	SiteEquipmentRefStructure
}

// LuggageLockerEquipmentRefStructure represents the LuggageLockerEquipmentRefStructure element
// Type for a reference to an LUGGAGE LOCKER EQUIPMENT.
type LuggageLockerEquipmentRefStructure struct {
	SiteEquipmentRefStructure
}

// ShelterEquipmentRefStructure represents the ShelterEquipmentRefStructure element
// Type for a reference to an SHELTER EQUIPMENT.
type ShelterEquipmentRefStructure struct {
	SiteEquipmentRefStructure
}

// SeatingEquipmentRefStructure represents the SeatingEquipmentRefStructure element
// Type for a reference to an SEATING EQUIPMENT.
type SeatingEquipmentRefStructure struct {
	SiteEquipmentRefStructure
}

// TrolleyStandEquipmentRefStructure represents the TrolleyStandEquipmentRefStructure element
// Type for a reference to an TROLLEY STAND EQUIPMENT.
type TrolleyStandEquipmentRefStructure struct {
	SiteEquipmentRefStructure
}

// SiteEquipmentRef represents the SiteEquipmentRef element
// Identifier of an SITE EQUIPMENT.
type SiteEquipmentRef struct {
	SiteEquipmentRefStructure
}

// WaitingEquipmentRef represents the WaitingEquipmentRef element
// Identifier of an WAITING EQUIPMENT.
type WaitingEquipmentRef struct {
	WaitingEquipmentRefStructure
}

// WaitingRoomEquipmentRef represents the WaitingRoomEquipmentRef element
// Identifier of an WAITING ROOM EQUIPMENT.
type WaitingRoomEquipmentRef struct {
	WaitingRoomEquipmentRefStructure
}

// LuggageLockerEquipmentRef represents the LuggageLockerEquipmentRef element
// Identifier of an LUGGAGE LOCKER EQUIPMENT.
type LuggageLockerEquipmentRef struct {
	LuggageLockerEquipmentRefStructure
}

// ShelterEquipmentRef represents the ShelterEquipmentRef element
// Identifier of an SHELTER EQUIPMENT.
type ShelterEquipmentRef struct {
	ShelterEquipmentRefStructure
}

// SeatingEquipmentRef represents the SeatingEquipmentRef element
// Identifier of an SEATING EQUIPMENT.
type SeatingEquipmentRef struct {
	SeatingEquipmentRefStructure
}

// TrolleyStandEquipmentRef represents the TrolleyStandEquipmentRef element
// Identifier of an TROLLEY STAND EQUIPMENT.
type TrolleyStandEquipmentRef struct {
	TrolleyStandEquipmentRefStructure
}

// SiteEquipmentVersionStructure represents the SiteEquipment_VersionStructure element
// Type for a SITE EQUIPMENT.
type SiteEquipmentVersionStructure struct {
	PlaceEquipmentVersionStructure
}

// LuggageLockerEquipmentVersionStructure represents the LuggageLockerEquipment_VersionStructure element
// Type for a Luggage Locker.
type LuggageLockerEquipmentVersionStructure struct {
	SiteEquipmentVersionStructure
	// Number of LOCKERs.
	NumberOfLockers *int `xml:"NumberOfLockers,omitempty" json:"NumberOfLockers,omitempty"`
	// Width of Locker.
	LockerWidth *float64 `xml:"LockerWidth,omitempty" json:"LockerWidth,omitempty"`
	// Height of Locker.
	LockerHeight *float64 `xml:"LockerHeight,omitempty" json:"LockerHeight,omitempty"`
	// Depth of Locker.
	LockerDepth *float64 `xml:"LockerDepth,omitempty" json:"LockerDepth,omitempty"`
	// Type of Locker.
	LockerType *LockerTypeEnumeration `xml:"LockerType,omitempty" json:"LockerType,omitempty"`
	// Type of lock. +v1.1
	LockingType *LockingTypeEnumeration `xml:"LockingType,omitempty" json:"LockingType,omitempty"`
	// Whether a wheelchair may be stored in the locker. +v1.1
	WheelchairAccepted *bool `xml:"WheelchairAccepted,omitempty" json:"WheelchairAccepted,omitempty"`
	// Whether a visually impaired person may use the mechanism. +v1.
	BlindAccessible *bool `xml:"BlindAccessible,omitempty" json:"BlindAccessible,omitempty"`
}

// WaitingEquipmentVersionStructure represents the WaitingEquipment_VersionStructure element
// Type for Waiting EQUIPMENT.
type WaitingEquipmentVersionStructure struct {
	SiteEquipmentVersionStructure
	// Number of seats in Area.
	Seats *int `xml:"Seats,omitempty" json:"Seats,omitempty"`
	// Width of area.
	Width *float64 `xml:"Width,omitempty" json:"Width,omitempty"`
	// Length of Area.
	Length *float64 `xml:"Length,omitempty" json:"Length,omitempty"`
	// Whether area is step free.
	StepFree *bool `xml:"StepFree,omitempty" json:"StepFree,omitempty"`
	// Width of Wheelchair Area.
	WheelchairAreaWidth *float64 `xml:"WheelchairAreaWidth,omitempty" json:"WheelchairAreaWidth,omitempty"`
	// Width of Wheelchair Area.
	WheelchairAreaLength *float64 `xml:"WheelchairAreaLength,omitempty" json:"WheelchairAreaLength,omitempty"`
	// Whether smoking is allowed in area.
	SmokingAllowed *bool `xml:"SmokingAllowed,omitempty" json:"SmokingAllowed,omitempty"`
	// Whether shelter has heating.
	Heated *bool `xml:"Heated,omitempty" json:"Heated,omitempty"`
	// Whether shelter has air conditioining.
	AirConditioned *bool `xml:"AirConditioned,omitempty" json:"AirConditioned,omitempty"`
}

// WaitingRoomEquipmentVersionStructure represents the WaitingRoomEquipment_VersionStructure element
// Type for a Waiting Room EQUIPMENT.
type WaitingRoomEquipmentVersionStructure struct {
	WaitingEquipmentVersionStructure
	// Class of fare needed to use waiting room.
	FareClass *FareClassEnumeration `xml:"FareClass,omitempty" json:"FareClass,omitempty"`
	// Whether waiting room is only for women.
	WomenOnly *bool `xml:"WomenOnly,omitempty" json:"WomenOnly,omitempty"`
	// Sanitary facility.
	Sanitary *SanitaryFacilityEnumeration `xml:"Sanitary,omitempty" json:"Sanitary,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
}

// TrolleyStandEquipmentVersionStructure represents the TrolleyStandEquipment_VersionStructure element
// Type for a Trolley Stand EQUIPMENT.
type TrolleyStandEquipmentVersionStructure struct {
	SiteEquipmentVersionStructure
	// Whether Trolley is free or if a payment is required.
	FreeToUse *bool `xml:"FreeToUse,omitempty" json:"FreeToUse,omitempty"`
	// Charge for using a trolley.
	Charge *float64 `xml:"Charge,omitempty" json:"Charge,omitempty"`
	// Currency of Charge for using the facility.
	Currency *string `xml:"Currency,omitempty" json:"Currency,omitempty"`
	// Allowed methods of payment.
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
}

// ShelterEquipmentVersionStructure represents the ShelterEquipment_VersionStructure element
// Type for a SHELTER EQUIPMENT.
type ShelterEquipmentVersionStructure struct {
	WaitingEquipmentVersionStructure
	// Whether shelter is enclosed.
	Enclosed *bool `xml:"Enclosed,omitempty" json:"Enclosed,omitempty"`
	// Distance from Kerb / boarding point.
	DistanceFromNearestKerb *float64 `xml:"DistanceFromNearestKerb,omitempty" json:"DistanceFromNearestKerb,omitempty"`
}

// SeatingEquipmentVersionStructure represents the SeatingEquipment_VersionStructure element
// Type for a SEATING EQUIPMENT.
type SeatingEquipmentVersionStructure struct {
	WaitingEquipmentVersionStructure
	// Whether there is an armrest. +v1.1
	ArmRest *bool `xml:"ArmRest,omitempty" json:"ArmRest,omitempty"`
	// Whether the seat has a backrest to rest your back (default is true). +v2.0
	BackRest *bool `xml:"BackRest,omitempty" json:"BackRest,omitempty"`
	// Height of the seating. +v1.1
	SeatHeight *float64 `xml:"SeatHeight,omitempty" json:"SeatHeight,omitempty"`
}

// SiteEquipment represents the SiteEquipment element
// Specialisation of PLACE EQUIPMENT for SITEs (e.g. LUGGAGE LOCKER, WAITING EQUIPMENT, TROLLEY STAND, etc.)
type SiteEquipment struct {
	SiteEquipmentVersionStructure
}

// LuggageLockerEquipment represents the LuggageLockerEquipment element
// Specialisation of SITE EQUIPMENT for LUGGAGE LOCKERs.
type LuggageLockerEquipment struct {
	LuggageLockerEquipmentVersionStructure
}

// WaitingEquipment represents the WaitingEquipment element
// Specialisation of SITE EQUIPMENT for WAITING EQUIPMENTs (shelter, waiting room, etc.).
type WaitingEquipment struct {
	WaitingEquipmentVersionStructure
}

// WaitingRoomEquipment represents the WaitingRoomEquipment element
// Specialisation of WAITING EQUIPMENT for WAITING ROOMs, classified by TYPE OF WAITING ROOM.
type WaitingRoomEquipment struct {
	WaitingRoomEquipmentVersionStructure
}

// TrolleyStandEquipment represents the TrolleyStandEquipment element
// Specialisation of SITE EQUIPMENT for TROLLEY STANDs.
type TrolleyStandEquipment struct {
	TrolleyStandEquipmentVersionStructure
}

// ShelterEquipment represents the ShelterEquipment element
// Specialisation of WAITING EQUIPMENT for a SHELTER.
type ShelterEquipment struct {
	ShelterEquipmentVersionStructure
}

// SeatingEquipment represents the SeatingEquipment element
// Specialisation of WAITING EQUIPMENT describing the properties of seating.
type SeatingEquipment struct {
	SeatingEquipmentVersionStructure
}

// QueueManagementEnumeration represents the QueueManagementEnumeration enumeration
// Allowed value for Queue Management.
type QueueManagementEnumeration string

const (
	// QueueManagementEnumerationNone represents none
	QueueManagementEnumerationNone QueueManagementEnumeration = "none"
	// QueueManagementEnumerationMaze represents maze
	QueueManagementEnumerationMaze QueueManagementEnumeration = "maze"
	// QueueManagementEnumerationSeparateLines represents separateLines
	QueueManagementEnumerationSeparateLines QueueManagementEnumeration = "separateLines"
	// QueueManagementEnumerationTicketed represents ticketed
	QueueManagementEnumerationTicketed QueueManagementEnumeration = "ticketed"
	// QueueManagementEnumerationOther represents other
	QueueManagementEnumerationOther QueueManagementEnumeration = "other"
)

// TicketValidatorEnumeration represents the TicketValidatorEnumeration enumeration
// Allowed value for Ticket Validator.
type TicketValidatorEnumeration string

const (
	// TicketValidatorEnumerationPaperStamp represents paperStamp
	TicketValidatorEnumerationPaperStamp TicketValidatorEnumeration = "paperStamp"
	// TicketValidatorEnumerationContactLess represents contactLess
	TicketValidatorEnumerationContactLess TicketValidatorEnumeration = "contactLess"
	// TicketValidatorEnumerationMagnetic represents magnetic
	TicketValidatorEnumerationMagnetic TicketValidatorEnumeration = "magnetic"
	// TicketValidatorEnumerationOther represents other
	TicketValidatorEnumerationOther TicketValidatorEnumeration = "other"
)

// TicketingEquipmentRefStructure represents the TicketingEquipmentRefStructure element
// Type for a reference to a TICKETING EQUIPMENT.
type TicketingEquipmentRefStructure struct {
	EquipmentRefStructure
}

// TicketValidatorEquipmentRefStructure represents the TicketValidatorEquipmentRefStructure element
// Type for a reference to a TICKET VALIDATOR.
type TicketValidatorEquipmentRefStructure struct {
	EquipmentRefStructure
}

// TicketingEquipmentRef represents the TicketingEquipmentRef element
// Identifier of a TICKETING EQUIPMENT.
type TicketingEquipmentRef struct {
	TicketingEquipmentRefStructure
}

// TicketValidatorEquipmentRef represents the TicketValidatorEquipmentRef element
// Identifier of a TICKET VALIDATOR.
type TicketValidatorEquipmentRef struct {
	TicketValidatorEquipmentRefStructure
}

// TicketingEquipmentVersionStructure represents the TicketingEquipment_VersionStructure element
// Type for a TICKETING EQUIPMENT.
type TicketingEquipmentVersionStructure struct {
	PassengerEquipmentVersionStructure
	// Modes for which ticketing services apply.
	VehicleModes *AllModesEnumeration `xml:"VehicleModes,omitempty" json:"VehicleModes,omitempty"`
	// Whether there are ticket machines.
	TicketMachines *bool `xml:"TicketMachines,omitempty" json:"TicketMachines,omitempty"`
	// Number of ticket machines.
	NumberOfMachines *int `xml:"NumberOfMachines,omitempty" json:"NumberOfMachines,omitempty"`
	// Height of the ticket machine interface. +v1.1
	HeightOfMachineInterface *float64 `xml:"HeightOfMachineInterface,omitempty" json:"HeightOfMachineInterface,omitempty"`
	TicketingFacilityList *TicketingFacilityList `xml:"TicketingFacilityList,omitempty" json:"TicketingFacilityList,omitempty"`
	TicketingServiceFacilityList *TicketingServiceFacilityList `xml:"TicketingServiceFacilityList,omitempty" json:"TicketingServiceFacilityList,omitempty"`
	// Whether there is a distinct ticket office.
	TicketOffice *bool `xml:"TicketOffice,omitempty" json:"TicketOffice,omitempty"`
	// Whether there is a ticket counter.
	TicketCounter *bool `xml:"TicketCounter,omitempty" json:"TicketCounter,omitempty"`
	// Number of ticket windows.
	NumberOfTills *int `xml:"NumberOfTills,omitempty" json:"NumberOfTills,omitempty"`
	// Queue management.
	QueueManagement *QueueManagementEnumeration `xml:"QueueManagement,omitempty" json:"QueueManagement,omitempty"`
	// Payment methods allowed.
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
	// Types of Ticket available.
	TicketTypesAvailable *TicketTypeEnumeration `xml:"TicketTypesAvailable,omitempty" json:"TicketTypesAvailable,omitempty"`
	// Scope of Ticket available.
	ScopeOfTicketsAvailable *ScopeOfTicketEnumeration `xml:"ScopeOfTicketsAvailable,omitempty" json:"ScopeOfTicketsAvailable,omitempty"`
	// Whether there is a low counter for accessibility.
	LowCounterAccess *bool `xml:"LowCounterAccess,omitempty" json:"LowCounterAccess,omitempty"`
	// Height of counter for accessibility.
	HeightOfLowCounter *float64 `xml:"HeightOfLowCounter,omitempty" json:"HeightOfLowCounter,omitempty"`
	// Whether there are induction loops.
	InductionLoops *bool `xml:"InductionLoops,omitempty" json:"InductionLoops,omitempty"`
	// Indicates whether there is a tactile interface +v1.1.
	TactileInterfaceAvailable *bool `xml:"TactileInterfaceAvailable,omitempty" json:"TactileInterfaceAvailable,omitempty"`
	// Indicates whether there is an accessible audio interface (allowing a use closed eyes). +v1.1
	AudioInterfaceAvailable *bool `xml:"AudioInterfaceAvailable,omitempty" json:"AudioInterfaceAvailable,omitempty"`
	// Indicates a priority access for disabled (no-queue). +v1.1
	DisabledPriority *bool `xml:"DisabledPriority,omitempty" json:"DisabledPriority,omitempty"`
	// Indicates whether equipment may be used while seated in a wheelchair. +v1.1
	WheelchairSuitable *bool `xml:"WheelchairSuitable,omitempty" json:"WheelchairSuitable,omitempty"`
}

// TicketValidatorEquipmentVersionStructure represents the TicketValidatorEquipment_VersionStructure element
// Type for a TICKET VALIDATOR EQUIPMENT.
type TicketValidatorEquipmentVersionStructure struct {
	PassengerEquipmentVersionStructure
	// Types of validation supported by validator.
	TicketValidatorType *TicketValidatorEnumeration `xml:"TicketValidatorType,omitempty" json:"TicketValidatorType,omitempty"`
	// Whether there is audio validation feedback.+v1.1.
	AudioValidationFeedback *bool `xml:"AudioValidationFeedback,omitempty" json:"AudioValidationFeedback,omitempty"`
	// Whether there is visual validation feedback. +v1.1.
	VisualValidationFeedback *bool `xml:"VisualValidationFeedback,omitempty" json:"VisualValidationFeedback,omitempty"`
	// Whether there is tactical validation feedback.+v1.1.
	TactileValidationFeedback *bool `xml:"TactileValidationFeedback,omitempty" json:"TactileValidationFeedback,omitempty"`
	// Free text describing use of validator  (how title may be presented, how to find validator, etc.). +v1.1.
	ValidationGuidance *MultilingualString `xml:"ValidationGuidance,omitempty" json:"ValidationGuidance,omitempty"`
}

// TicketingEquipment represents the TicketingEquipment element
// Specialisation of PASSENGER EQUIPMENT for ticketing.
type TicketingEquipment struct {
	TicketingEquipmentVersionStructure
}

// TicketValidatorEquipment represents the TicketValidatorEquipment element
// Specialisation of INSTALLED EQUIPMENT describing a ticket validator.
type TicketValidatorEquipment struct {
	TicketValidatorEquipmentVersionStructure
}

// CycleStorageEnumeration represents the CycleStorageEnumeration enumeration
// Allowed value for Cycle Storage.
type CycleStorageEnumeration string

const (
	// CycleStorageEnumerationRacks represents racks
	CycleStorageEnumerationRacks CycleStorageEnumeration = "racks"
	// CycleStorageEnumerationDocks represents docks
	CycleStorageEnumerationDocks CycleStorageEnumeration = "docks"
	// CycleStorageEnumerationBars represents bars
	CycleStorageEnumerationBars CycleStorageEnumeration = "bars"
	// CycleStorageEnumerationRailings represents railings
	CycleStorageEnumerationRailings CycleStorageEnumeration = "railings"
	// CycleStorageEnumerationCycleScheme represents cycleScheme
	CycleStorageEnumerationCycleScheme CycleStorageEnumeration = "cycleScheme"
	// CycleStorageEnumerationLockers represents lockers
	CycleStorageEnumerationLockers CycleStorageEnumeration = "lockers"
	// CycleStorageEnumerationFreestanding represents freestanding
	CycleStorageEnumerationFreestanding CycleStorageEnumeration = "freestanding"
	// CycleStorageEnumerationOther represents other
	CycleStorageEnumerationOther CycleStorageEnumeration = "other"
)

// LockingMechanismEnumeration represents the LockingMechanismEnumeration enumeration
// Allowed value for LOCKING MECHANISM
type LockingMechanismEnumeration string

const (
	// LockingMechanismEnumerationNone represents none
	LockingMechanismEnumerationNone LockingMechanismEnumeration = "none"
	// LockingMechanismEnumerationDock represents dock
	LockingMechanismEnumerationDock LockingMechanismEnumeration = "dock"
	// LockingMechanismEnumerationImmobilisingLock represents immobilisingLock
	LockingMechanismEnumerationImmobilisingLock LockingMechanismEnumeration = "immobilisingLock"
	// LockingMechanismEnumerationSeparateLockingDevice represents separateLockingDevice
	LockingMechanismEnumerationSeparateLockingDevice LockingMechanismEnumeration = "separateLockingDevice"
	// LockingMechanismEnumerationOther represents other
	LockingMechanismEnumerationOther LockingMechanismEnumeration = "other"
)

// CycleStorageEquipmentRefStructure represents the CycleStorageEquipmentRefStructure element
// Type for a reference to an CYCLE STORAGE EQUIPMENT.
type CycleStorageEquipmentRefStructure struct {
	InstalledEquipmentRefStructure
}

// VehicleReleaseEquipmentRefStructure represents the VehicleReleaseEquipmentRefStructure element
// Type for a reference to an VEHICLE RELEASE EQUIPMENT.
type VehicleReleaseEquipmentRefStructure struct {
	InstalledEquipmentRefStructure
}

// CycleStorageEquipmentRef represents the CycleStorageEquipmentRef element
// Identifier of an CYCLE STORAGE EQUIPMENT.
type CycleStorageEquipmentRef struct {
	CycleStorageEquipmentRefStructure
}

// VehicleReleaseEquipmentRef represents the VehicleReleaseEquipmentRef element
// Identifier of an VEHICLE RELEASE EQUIPMENT.
type VehicleReleaseEquipmentRef struct {
	VehicleReleaseEquipmentRefStructure
}

// CycleStorageEquipmentVersionStructure represents the CycleStorageEquipment_VersionStructure element
// Type for a CYCLE STORAGE EQUIPMENT.
type CycleStorageEquipmentVersionStructure struct {
	PlaceEquipmentVersionStructure
	// Number of spaces available.
	NumberOfSpaces *int `xml:"NumberOfSpaces,omitempty" json:"NumberOfSpaces,omitempty"`
	// Type of storage.
	CycleStorageType *CycleStorageEnumeration `xml:"CycleStorageType,omitempty" json:"CycleStorageType,omitempty"`
	// whether shelter is enclosed.
	Cage *bool `xml:"Cage,omitempty" json:"Cage,omitempty"`
	// Whether storage is covered.
	Covered *bool `xml:"Covered,omitempty" json:"Covered,omitempty"`
}

// VehicleReleaseEquipmentVersionStructure represents the VehicleReleaseEquipment_VersionStructure element
// Type for a VEHICLE RELEASE EQUIPMENT.
type VehicleReleaseEquipmentVersionStructure struct {
	InstalledEquipmentVersionStructure
	// whether shelter is enclosed.
	RemoteControl *bool `xml:"RemoteControl,omitempty" json:"RemoteControl,omitempty"`
	// Whether reservation is required.
	LocalControl *bool `xml:"LocalControl,omitempty" json:"LocalControl,omitempty"`
	// Type of locking mechnaism.
	LockingMechanism *LockingMechanismEnumeration `xml:"LockingMechanism,omitempty" json:"LockingMechanism,omitempty"`
}

// CycleStorageEquipment represents the CycleStorageEquipment element
// Specialisation of PLACE EQUIPMENT for cycle storage.
type CycleStorageEquipment struct {
	CycleStorageEquipmentVersionStructure
}

// VehicleReleaseEquipment represents the VehicleReleaseEquipment element
// Specialisation of PLACE EQUIPMENT for VEHICLE RELEASE. +v1.2.2
type VehicleReleaseEquipment struct {
	VehicleReleaseEquipmentVersionStructure
}

// SanitaryEquipmentVersionStructure represents the SanitaryEquipment_VersionStructure element
// Type for a SANITARY FACILITY EQUIPMENT.
type SanitaryEquipmentVersionStructure struct {
	PassengerEquipmentVersionStructure
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// Gender required to use facility.
	Gender *GenderLimitationEnumeration `xml:"Gender,omitempty" json:"Gender,omitempty"`
	SanitaryFacilityList *SanitaryFacilityList `xml:"SanitaryFacilityList,omitempty" json:"SanitaryFacilityList,omitempty"`
	// Number of Toilets
	NumberOfToilets *int `xml:"NumberOfToilets,omitempty" json:"NumberOfToilets,omitempty"`
	// Whether toilets are free to use.
	FreeToUse *bool `xml:"FreeToUse,omitempty" json:"FreeToUse,omitempty"`
	// Charge for using the facility.
	Charge *float64 `xml:"Charge,omitempty" json:"Charge,omitempty"`
	// Currency of Charge for using the facility.
	Currency *string `xml:"Currency,omitempty" json:"Currency,omitempty"`
	// Methods of payment allowed.
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
	// Whether chaneg is available. +v1.1
	ChangeAvailable *bool `xml:"ChangeAvailable,omitempty" json:"ChangeAvailable,omitempty"`
	// Turning circle radius for a wheelchair.
	WheelchairTurningCircle *float64 `xml:"WheelchairTurningCircle,omitempty" json:"WheelchairTurningCircle,omitempty"`
	// Height of the support bar (when there is one). +v1.1
	SupportBarHeight *float64 `xml:"SupportBarHeight,omitempty" json:"SupportBarHeight,omitempty"`
	// Whether a call button is available. +v1.1
	CallButtonAvailable *bool `xml:"CallButtonAvailable,omitempty" json:"CallButtonAvailable,omitempty"`
	// Whether there is a facility for the disposal of sharps in toilet.
	SharpsDisposal *bool `xml:"SharpsDisposal,omitempty" json:"SharpsDisposal,omitempty"`
	// Staffing of facility.
	Staffing *StaffingEnumeration `xml:"Staffing,omitempty" json:"Staffing,omitempty"`
	// Whether toilet may be locked end thus a key is needed (or an equivalent tool) to access.+v1.1
	LockedAccess *bool `xml:"LockedAccess,omitempty" json:"LockedAccess,omitempty"`
	// Key issuing scheme under which facility is accessible.
	KeyScheme *string `xml:"KeyScheme,omitempty" json:"KeyScheme,omitempty"`
	// Whether the toilets have a sink allowing hand washing with soap.
	HandWashing *bool `xml:"HandWashing,omitempty" json:"HandWashing,omitempty"`
	// Whether the tap inside the toilet supplies drinking water.
	DrinkingWater *bool `xml:"DrinkingWater,omitempty" json:"DrinkingWater,omitempty"`
	// Indicates the position of using the toilet.
	ToiletsType *ToiletsTypeEnumeration `xml:"ToiletsType,omitempty" json:"ToiletsType,omitempty"`
}

// PassengerSafetyEquipmentVersionStructure represents the PassengerSafetyEquipment_VersionStructure element
// Type for a PASSENGER SAFETY EQUIPMENT.
type PassengerSafetyEquipmentVersionStructure struct {
	PassengerEquipmentVersionStructure
	// Whether there is CCTV.
	Cctv *bool `xml:"Cctv,omitempty" json:"Cctv,omitempty"`
	// Whether lift there is mobile phone coverage.
	MobilePhoneCoverage *bool `xml:"MobilePhoneCoverage,omitempty" json:"MobilePhoneCoverage,omitempty"`
	// Whether there is a panic button.
	PanicButton *bool `xml:"PanicButton,omitempty" json:"PanicButton,omitempty"`
	// Whether there is an SOS panel.
	SosPanel *bool `xml:"SosPanel,omitempty" json:"SosPanel,omitempty"`
	// Height of SOS panel.
	HeightOfSosPanel *float64 `xml:"HeightOfSosPanel,omitempty" json:"HeightOfSosPanel,omitempty"`
	// Type of Lighting in area.
	Lighting *LightingEnumeration `xml:"Lighting,omitempty" json:"Lighting,omitempty"`
	// Whether there are Audio Announcements. +v1.1
	AudioAnnouncements *bool `xml:"AudioAnnouncements,omitempty" json:"AudioAnnouncements,omitempty"`
	// DEPRECATED - Renamed to AudioAnnouncements for consistency.  Old value kept for backwards compatibility - will be dropped in future release.
	AcousticAnnouncements *bool `xml:"AcousticAnnouncements,omitempty" json:"AcousticAnnouncements,omitempty"`
	// Triggering type for Audio Announcements. +v1.1
	AudioAnnouncementType *AudioAnnouncementTypeEnumeration `xml:"AudioAnnouncementType,omitempty" json:"AudioAnnouncementType,omitempty"`
	// How to trigger Acoustic Announcements. +v1.1
	AudioAnnouncementsTrigger *AudioTriggerMethodEnumeration `xml:"AudioAnnouncementsTrigger,omitempty" json:"AudioAnnouncementsTrigger,omitempty"`
}

// HelpPointEquipmentVersionStructure represents the HelpPointEquipment_VersionStructure element
// Type for a HELP POINT EQUIPMENT.
type HelpPointEquipmentVersionStructure struct {
	PassengerEquipmentVersionStructure
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// Height of HELP POINT from ground.
	HeightFromGround *float64 `xml:"HeightFromGround,omitempty" json:"HeightFromGround,omitempty"`
	// Whether help point is a phone.
	Phone *bool `xml:"Phone,omitempty" json:"Phone,omitempty"`
	// Whether there is an induction loop.
	InductionLoop *bool `xml:"InductionLoop,omitempty" json:"InductionLoop,omitempty"`
	// Whether there is an indication that there is an induction loop.
	InductionLoopSign *bool `xml:"InductionLoopSign,omitempty" json:"InductionLoopSign,omitempty"`
	// Whether there is a button to request a vehicle to stop.
	StopRequestButton *bool `xml:"StopRequestButton,omitempty" json:"StopRequestButton,omitempty"`
	// Timeout for a stop request. After this interval after pressing request button  a request will be ignored and a new request must be made.
	StopRequestTimeout *string `xml:"StopRequestTimeout,omitempty" json:"StopRequestTimeout,omitempty"`
}

// PassengerBeaconEquipmentVersionStructure represents the PassengerBeaconEquipment_VersionStructure element
// Type for a BEACON EQUIPMENT.
type PassengerBeaconEquipmentVersionStructure struct {
	PassengerEquipmentVersionStructure
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// The type of the beacon.
	BeaconType *BeaconTypeEnumeration `xml:"BeaconType,omitempty" json:"BeaconType,omitempty"`
	// If the Beacon is unidirectional or bidirectional.
	BeaconDirection *BeaconDirectionEnumeration `xml:"BeaconDirection,omitempty" json:"BeaconDirection,omitempty"`
	// The relevant Beacon Protocol used.
	BeaconProtocol *BeaconProtocolEnumeration `xml:"BeaconProtocol,omitempty" json:"BeaconProtocol,omitempty"`
	// The to reach the back end system for the usage of the beacon.
	BeaconBackendUrl *string `xml:"BeaconBackendUrl,omitempty" json:"BeaconBackendUrl,omitempty"`
}

// RubbishDisposalEquipmentVersionStructure represents the RubbishDisposalEquipment_VersionStructure element
// Type for RUBBISH DISPOSAL EQUIPMENT.
type RubbishDisposalEquipmentVersionStructure struct {
	PassengerEquipmentVersionStructure
	// Whether there are disposal facilities for needles or medical sharps.
	SharpsDisposal *bool `xml:"SharpsDisposal,omitempty" json:"SharpsDisposal,omitempty"`
	// Whether there is separation for recycling.
	Recycling *bool `xml:"Recycling,omitempty" json:"Recycling,omitempty"`
}

// SanitaryEquipment represents the SanitaryEquipment element
// A SANITARY FACILITY , e.g. WC, Shower, baby change.
type SanitaryEquipment struct {
	SanitaryEquipmentVersionStructure
}

// PassengerSafetyEquipment represents the PassengerSafetyEquipment element
// Specialisation of PASSENGER EQUIPMENT for passenger safety features, e.g. panic button, SOS phone.
type PassengerSafetyEquipment struct {
	PassengerSafetyEquipmentVersionStructure
}

// HelpPointEquipment represents the HelpPointEquipment element
// Specialisation of PASSENGER EQUIPMENT for HELP POINT.
type HelpPointEquipment struct {
	HelpPointEquipmentVersionStructure
}

// PassengerBeaconEquipment represents the PassengerBeaconEquipment element
// Specialisation of PASSENGER EQUIPMENT for Beacons. For SSID or UUID always use PublicCode. Be aware that when using VEHICLE TYPE or VEHICLE PROFILE only the type of the beacon can be described. The information aboutn the relevent real beacon often can only be provided when the actual VEHICLE is known.
type PassengerBeaconEquipment struct {
	PassengerBeaconEquipmentVersionStructure
}

// RubbishDisposalEquipment represents the RubbishDisposalEquipment element
// Equipment for Passengers relating to a Rubbish disposal.
type RubbishDisposalEquipment struct {
	RubbishDisposalEquipmentVersionStructure
}

// LocalServiceRefStructure represents the LocalServiceRefStructure element
// Type for a reference to a LOCAL SERVICE.
type LocalServiceRefStructure struct {
	EquipmentRefStructure
}

// TicketingServiceRefStructure represents the TicketingServiceRefStructure element
// Type for a reference to an TICKETING SERVICE.
type TicketingServiceRefStructure struct {
	LocalServiceRefStructure
}

// AssistanceServiceRefStructure represents the AssistanceServiceRefStructure element
// Type for a reference to an ASSISTANCE SERVICE.
type AssistanceServiceRefStructure struct {
	LocalServiceRefStructure
}

// CustomerServiceRefStructure represents the CustomerServiceRefStructure element
// Type for a reference to an CUSTOMER SERVICE.
type CustomerServiceRefStructure struct {
	LocalServiceRefStructure
}

// ComplaintsServiceRefStructure represents the ComplaintsServiceRefStructure element
// Type for a reference to an COMPLAINTS SERVICE.
type ComplaintsServiceRefStructure struct {
	LocalServiceRefStructure
}

// LostPropertyServiceRefStructure represents the LostPropertyServiceRefStructure element
// Type for a reference to an LOST PROPERTY SERVICE.
type LostPropertyServiceRefStructure struct {
	LocalServiceRefStructure
}

// LuggageServiceRefStructure represents the LuggageServiceRefStructure element
// Type for a reference to an LUGGAGE SERVICE.
type LuggageServiceRefStructure struct {
	LocalServiceRefStructure
}

// LeftLuggageServiceRefStructure represents the LeftLuggageServiceRefStructure element
// Type for a reference to an LEFT LUGGAGE SERVICE.
type LeftLuggageServiceRefStructure struct {
	LocalServiceRefStructure
}

// MeetingPointServiceRefStructure represents the MeetingPointServiceRefStructure element
// Type for a reference to an MEETING POINT SERVICE.
type MeetingPointServiceRefStructure struct {
	LocalServiceRefStructure
}

// LocalServiceRef represents the LocalServiceRef element
// Reference to a LOCAL SERVICE.
type LocalServiceRef struct {
	LocalServiceRefStructure
}

// TicketingServiceRef represents the TicketingServiceRef element
// Identifier of an TICKETING SERVICE.
type TicketingServiceRef struct {
	TicketingServiceRefStructure
}

// AssistanceServiceRef represents the AssistanceServiceRef element
// Identifier of an ASSISTANCE SERVICE.
type AssistanceServiceRef struct {
	AssistanceServiceRefStructure
}

// CustomerServiceRef represents the CustomerServiceRef element
// Identifier of an CUSTOMER SERVICE.
type CustomerServiceRef struct {
	CustomerServiceRefStructure
}

// ComplaintsServiceRef represents the ComplaintsServiceRef element
// Identifier of an COMPLAINTS SERVICE.
type ComplaintsServiceRef struct {
	ComplaintsServiceRefStructure
}

// LostPropertyServiceRef represents the LostPropertyServiceRef element
// Identifier of an LOST PROPERTY SERVICE.
type LostPropertyServiceRef struct {
	LostPropertyServiceRefStructure
}

// LuggageServiceRef represents the LuggageServiceRef element
// Identifier of an LUGGAGE SERVICE.
type LuggageServiceRef struct {
	LuggageServiceRefStructure
}

// LeftLuggageServiceRef represents the LeftLuggageServiceRef element
// Identifier of an LEFT LUGGAGE SERVICE.
type LeftLuggageServiceRef struct {
	LeftLuggageServiceRefStructure
}

// MeetingPointServiceRef represents the MeetingPointServiceRef element
// Identifier of an MEETING POINT SERVICE.
type MeetingPointServiceRef struct {
	MeetingPointServiceRefStructure
}

// TypeOfServiceFeatureRefStructure represents the TypeOfServiceFeatureRefStructure element
// Type for a reference to a TYPE OF SERVICE FEATURE.
type TypeOfServiceFeatureRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfServiceFeatureRefsRelStructure represents the typeOfServiceFeatureRefs_RelStructure element
// Type for a list of references to a TYPEs of SERVICE FEATURE.
type TypeOfServiceFeatureRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfServiceFeatureRef []TypeOfServiceFeatureRef `xml:"TypeOfServiceFeatureRef" json:"TypeOfServiceFeatureRef"`
}

// TypeOfServiceFeatureRef represents the TypeOfServiceFeatureRef element
// Reference to a TYPE OF SERVICE FEATURE.
type TypeOfServiceFeatureRef struct {
	TypeOfServiceFeatureRefStructure
}

// LocalServicesRelStructure represents the localServices_RelStructure element
// Type for a list of LOCAL SERVICEs.
type LocalServicesRelStructure struct {
	ContainmentAggregationStructure
	AssistanceBookingServiceRef []AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef []CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef []RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef []MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef []HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef []CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef []MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef []LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef []LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef []LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef []ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef []CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef []AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef []TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef []LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	AssistanceBookingService []AssistanceBookingService `xml:"AssistanceBookingService,omitempty" json:"AssistanceBookingService,omitempty"`
	CateringService []CateringService `xml:"CateringService,omitempty" json:"CateringService,omitempty"`
	RetailService []RetailService `xml:"RetailService,omitempty" json:"RetailService,omitempty"`
	MoneyService []MoneyService `xml:"MoneyService,omitempty" json:"MoneyService,omitempty"`
	HireService []HireService `xml:"HireService,omitempty" json:"HireService,omitempty"`
	CommunicationService []CommunicationService `xml:"CommunicationService,omitempty" json:"CommunicationService,omitempty"`
	MeetingPointService []MeetingPointService `xml:"MeetingPointService,omitempty" json:"MeetingPointService,omitempty"`
	LostPropertyService []LostPropertyService `xml:"LostPropertyService,omitempty" json:"LostPropertyService,omitempty"`
	LeftLuggageService []LeftLuggageService `xml:"LeftLuggageService,omitempty" json:"LeftLuggageService,omitempty"`
	ComplaintsService []ComplaintsService `xml:"ComplaintsService,omitempty" json:"ComplaintsService,omitempty"`
	CustomerService []CustomerService `xml:"CustomerService,omitempty" json:"CustomerService,omitempty"`
	LuggageService []LuggageService `xml:"LuggageService,omitempty" json:"LuggageService,omitempty"`
	AssistanceService []AssistanceService `xml:"AssistanceService,omitempty" json:"AssistanceService,omitempty"`
	TicketingService []TicketingService `xml:"TicketingService,omitempty" json:"TicketingService,omitempty"`
}

// LocalServiceVersionStructure represents the LocalService_VersionStructure element
// Type for a LOCAL SERVICE.
type LocalServiceVersionStructure struct {
	EquipmentVersionStructure
	// Classification of FEATUREs.
	TypesOfServiceFeature *TypeOfServiceFeatureRefsRelStructure `xml:"typesOfServiceFeature,omitempty" json:"typesOfServiceFeature,omitempty"`
}

// TicketingServiceVersionStructure represents the TicketingService_VersionStructure element
// Type for Ticketing Service.
type TicketingServiceVersionStructure struct {
	LocalServiceVersionStructure
	// Modes for which TICKETING SERVICEs apply.
	VehicleModes *VehicleModeEnumeration `xml:"VehicleModes,omitempty" json:"VehicleModes,omitempty"`
	// Service available.
	TicketingServiceList *TicketingServiceFacilityEnumeration `xml:"TicketingServiceList,omitempty" json:"TicketingServiceList,omitempty"`
	// Ticket Types available.
	TicketTypeList []TicketTypeEnumeration `xml:"TicketTypeList,omitempty" json:"TicketTypeList,omitempty"`
	// Whether there is a ticket counter staffed by humans.
	TicketCounterService *bool `xml:"TicketCounterService,omitempty" json:"TicketCounterService,omitempty"`
	// Whether there is online purchase for collection.
	OnlinePurchaseForCollection *bool `xml:"OnlinePurchaseForCollection,omitempty" json:"OnlinePurchaseForCollection,omitempty"`
	// Whether there is online purchase for eticket.
	OnlinePurchaseForEticket *bool `xml:"OnlinePurchaseForETicket,omitempty" json:"OnlinePurchaseForETicket,omitempty"`
	// Whether there is online purchase for self print.
	OnlinePurchaseForSelfPrintTicket *bool `xml:"OnlinePurchaseForSelfPrintTicket,omitempty" json:"OnlinePurchaseForSelfPrintTicket,omitempty"`
	// Whether there is mobile device tickets.
	MobileDeviceTickets *bool `xml:"MobileDeviceTickets,omitempty" json:"MobileDeviceTickets,omitempty"`
	// Method of payment allowed.
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
}

// AssistanceServiceVersionStructure represents the AssistanceService_VersionStructure element
// Type for an ASSISTANCE SERVICE.
type AssistanceServiceVersionStructure struct {
	LocalServiceVersionStructure
	AssistanceFacilityList *AssistanceFacilityList `xml:"AssistanceFacilityList,omitempty" json:"AssistanceFacilityList,omitempty"`
	// Availability of assistance service.
	AssistanceAvailability *AssistanceAvailabilityEnumeration `xml:"AssistanceAvailability,omitempty" json:"AssistanceAvailability,omitempty"`
	// Staffing service.
	Staffing *StaffingEnumeration `xml:"Staffing,omitempty" json:"Staffing,omitempty"`
	AccessibilityToolList *AccessibilityToolEnumeration `xml:"AccessibilityToolList,omitempty" json:"AccessibilityToolList,omitempty"`
	// Languages spoken for assistance.
	Languages *string `xml:"Languages,omitempty" json:"Languages,omitempty"`
	// Whether staff are accessibility trained.
	AccessibilityTrainedStaff *bool `xml:"AccessibilityTrainedStaff,omitempty" json:"AccessibilityTrainedStaff,omitempty"`
	// Emergency service assistance available.
	EmergencyServiceList *EmergencyServiceEnumeration `xml:"EmergencyServiceList,omitempty" json:"EmergencyServiceList,omitempty"`
	// Safety facilities.
	SafetyFacilityList *SafetyFacilityEnumeration `xml:"SafetyFacilityList,omitempty" json:"SafetyFacilityList,omitempty"`
}

// LuggageServiceVersionStructure represents the LuggageService_VersionStructure element
// Type for LUGGAGE SERVICE.
type LuggageServiceVersionStructure struct {
	LocalServiceVersionStructure
	// LUGGAGE SERVICEs available.
	LuggageServiceFacilityList *LuggageServiceFacilityEnumeration `xml:"LuggageServiceFacilityList,omitempty" json:"LuggageServiceFacilityList,omitempty"`
	// Whether there are trolleys.
	LuggageTrolleys *bool `xml:"LuggageTrolleys,omitempty" json:"LuggageTrolleys,omitempty"`
	// Whether there are wheel chair trolleys.
	WheelchairLuggageTrolleys *bool `xml:"WheelchairLuggageTrolleys,omitempty" json:"WheelchairLuggageTrolleys,omitempty"`
	// Whether the service is free to use.
	FreeToUse *bool `xml:"FreeToUse,omitempty" json:"FreeToUse,omitempty"`
	// Maximum width of luggage accepted by service.
	MaximumBagWidth *float64 `xml:"MaximumBagWidth,omitempty" json:"MaximumBagWidth,omitempty"`
	// Maximum height of luggage accepted by service.
	MaximumBagHeight *float64 `xml:"MaximumBagHeight,omitempty" json:"MaximumBagHeight,omitempty"`
	// Maximum depth of luggage accepted by service.
	MaximumBagDepth *float64 `xml:"MaximumBagDepth,omitempty" json:"MaximumBagDepth,omitempty"`
	// Maximum weight of the luggage. +v1.1
	MaximumBagWeight *float64 `xml:"MaximumBagWeight,omitempty" json:"MaximumBagWeight,omitempty"`
	// Maximum weight of the luggage (in kilograms).
	LuggageMaximalWeigth *float64 `xml:"LuggageMaximalWeigth,omitempty" json:"LuggageMaximalWeigth,omitempty"`
}

// CustomerServiceVersionStructure represents the CustomerService_VersionStructure element
// Type for CUSTOMER SERVICE.
type CustomerServiceVersionStructure struct {
	LocalServiceVersionStructure
}

// ComplaintsServiceVersionStructure represents the ComplaintsService_VersionStructure element
// Type for a COMPLAINTS SERVICE.
type ComplaintsServiceVersionStructure struct {
	CustomerServiceVersionStructure
}

// LeftLuggageServiceVersionStructure represents the LeftLuggageService_VersionStructure element
// Type for a LEFT LUGGAGE SERVICE.
type LeftLuggageServiceVersionStructure struct {
	CustomerServiceVersionStructure
	// Whether left luggage is a counter service.
	CounterService *bool `xml:"CounterService,omitempty" json:"CounterService,omitempty"`
	// Whether there are self service lockers.
	SelfServiceLockers *bool `xml:"SelfServiceLockers,omitempty" json:"SelfServiceLockers,omitempty"`
	// Whether there is a fee per bag.
	FeePerBag *bool `xml:"FeePerBag,omitempty" json:"FeePerBag,omitempty"`
	// Whether there is a locker fee.
	LockerFee *bool `xml:"LockerFee,omitempty" json:"LockerFee,omitempty"`
	// Width of Locker.
	MaximumBagWidth *float64 `xml:"MaximumBagWidth,omitempty" json:"MaximumBagWidth,omitempty"`
	// Height of Locker.
	MaximumBagHeight *float64 `xml:"MaximumBagHeight,omitempty" json:"MaximumBagHeight,omitempty"`
	// Depth of Locker.
	MaximumBagDepth *float64 `xml:"MaximumBagDepth,omitempty" json:"MaximumBagDepth,omitempty"`
	// Maximum weight of the luggage. +v1.1
	MaximumBagWeight *float64 `xml:"MaximumBagWeight,omitempty" json:"MaximumBagWeight,omitempty"`
	// Maximum time for which luggage can be left. +V1.1
	MaximumDuration *string `xml:"MaximumDuration,omitempty" json:"MaximumDuration,omitempty"`
}

// LostPropertyServiceVersionStructure represents the LostPropertyService_VersionStructure element
// Type for a LOST PROPERTY SERVICE.
type LostPropertyServiceVersionStructure struct {
	CustomerServiceVersionStructure
	// Period for which lost property is kept - after this time it may be disposed of. +V1.1
	PropertyKeptForDuration *string `xml:"PropertyKeptForDuration,omitempty" json:"PropertyKeptForDuration,omitempty"`
}

// MeetingPointServiceVersionStructure represents the MeetingPointService_VersionStructure element
// Type for a MEETING POINT SERVICE.
type MeetingPointServiceVersionStructure struct {
	CustomerServiceVersionStructure
	// Type of MEETING POINT.
	MeetingPointServiceType MeetingPointEnumeration `xml:"MeetingPointServiceType" json:"MeetingPointServiceType"`
	// Label of meeting point.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
}

// LocalService represents the LocalService element
// A named service relating to the use of the SITE or transport services at a particular location, for example porterage, assistance for disabled users, booking offices etc.
type LocalService struct {
	LocalServiceVersionStructure
}

// TicketingService represents the TicketingService element
// Specialisation of LOCAL SERVICE for ticketing, providing ticket counter and online purchase information, also associated with payment method and TYPE OF TICKET.
type TicketingService struct {
	TicketingServiceVersionStructure
}

// AssistanceService represents the AssistanceService element
// Specialisation of LOCAL SERVICE for ASSISTANCE providing information like language, accessibility trained staff, etc.
type AssistanceService struct {
	AssistanceServiceVersionStructure
}

// LuggageService represents the LuggageService element
// Specialisation of CUSTOMER SERVICE for luggage services (provides luggage service facilities and characteristics like luggage trolley, free to use, etc.).
type LuggageService struct {
	LuggageServiceVersionStructure
}

// CustomerService represents the CustomerService element
// Generic specialisation of LOCAL SERVICE for CUSTOMER SERVICEs (lost properties, meeting point, complaints, etc.).
type CustomerService struct {
	CustomerServiceVersionStructure
}

// ComplaintsService represents the ComplaintsService element
// Specialisation of CUSTOMER SERVICE for COMPLAINTs.
type ComplaintsService struct {
	ComplaintsServiceVersionStructure
}

// LeftLuggageService represents the LeftLuggageService element
// Specialisation of CUSTOMER SERVICE for left luggage (provides left luggage information like self service locker, locker free, etc.).
type LeftLuggageService struct {
	LeftLuggageServiceVersionStructure
}

// LostPropertyService represents the LostPropertyService element
// Specialisation of CUSTOMER SERVICE for lost properties.
type LostPropertyService struct {
	LostPropertyServiceVersionStructure
}

// MeetingPointService represents the MeetingPointService element
// Specialisation of CUSTOMER SERVICE for meeting points (provides characteristics like description, label, etc.).
type MeetingPointService struct {
	MeetingPointServiceVersionStructure
}

// HireServiceEnumeration represents the HireServiceEnumeration enumeration
// Allowed values for HIRE SERVICE.
type HireServiceEnumeration string

const (
	// HireServiceEnumerationScooterHire represents scooterHire
	HireServiceEnumerationScooterHire HireServiceEnumeration = "scooterHire"
	// HireServiceEnumerationCycleHire represents cycleHire
	HireServiceEnumerationCycleHire HireServiceEnumeration = "cycleHire"
	// HireServiceEnumerationMotorcycleHire represents motorcycleHire
	HireServiceEnumerationMotorcycleHire HireServiceEnumeration = "motorcycleHire"
	// HireServiceEnumerationCarHire represents carHire
	HireServiceEnumerationCarHire HireServiceEnumeration = "carHire"
	// HireServiceEnumerationVehicleHire represents vehicleHire
	HireServiceEnumerationVehicleHire HireServiceEnumeration = "vehicleHire"
	// HireServiceEnumerationBoatHire represents boatHire
	HireServiceEnumerationBoatHire HireServiceEnumeration = "boatHire"
	// HireServiceEnumerationRecreationalDeviceHire represents recreationalDeviceHire
	HireServiceEnumerationRecreationalDeviceHire HireServiceEnumeration = "recreationalDeviceHire"
)

// MoneyServiceEnumeration represents the MoneyServiceEnumeration enumeration
// Allowed values for MONEY SERVICE.
type MoneyServiceEnumeration string

const (
	// MoneyServiceEnumerationCashMachine represents cashMachine
	MoneyServiceEnumerationCashMachine MoneyServiceEnumeration = "cashMachine"
	// MoneyServiceEnumerationBank represents bank
	MoneyServiceEnumerationBank MoneyServiceEnumeration = "bank"
	// MoneyServiceEnumerationInsurance represents insurance
	MoneyServiceEnumerationInsurance MoneyServiceEnumeration = "insurance"
	// MoneyServiceEnumerationBureauDeChange represents bureauDeChange
	MoneyServiceEnumerationBureauDeChange MoneyServiceEnumeration = "bureauDeChange"
	// MoneyServiceEnumerationCustomsOffice represents customsOffice
	MoneyServiceEnumerationCustomsOffice MoneyServiceEnumeration = "customsOffice"
)

// RetailServiceEnumeration represents the RetailServiceEnumeration enumeration
// Allowed values for RETAIL SERVICE.
type RetailServiceEnumeration string

const (
	// RetailServiceEnumerationFood represents food
	RetailServiceEnumerationFood RetailServiceEnumeration = "food"
	// RetailServiceEnumerationHealthHygieneBeauty represents healthHygieneBeauty
	RetailServiceEnumerationHealthHygieneBeauty RetailServiceEnumeration = "healthHygieneBeauty"
	// RetailServiceEnumerationNewspaperTobacco represents newspaperTobacco
	RetailServiceEnumerationNewspaperTobacco RetailServiceEnumeration = "newspaperTobacco"
	// RetailServiceEnumerationFashionAccessories represents fashionAccessories
	RetailServiceEnumerationFashionAccessories RetailServiceEnumeration = "fashionAccessories"
	// RetailServiceEnumerationBankFinanceInsurance represents bankFinanceInsurance
	RetailServiceEnumerationBankFinanceInsurance RetailServiceEnumeration = "bankFinanceInsurance"
	// RetailServiceEnumerationTourism represents tourism
	RetailServiceEnumerationTourism RetailServiceEnumeration = "tourism"
	// RetailServiceEnumerationPhotoBooth represents photoBooth
	RetailServiceEnumerationPhotoBooth RetailServiceEnumeration = "photoBooth"
)

// CommunicationServiceRefStructure represents the CommunicationServiceRefStructure element
// Type for a reference to an COMMUNICATION SERVICE.
type CommunicationServiceRefStructure struct {
	LocalServiceRefStructure
}

// HireServiceRefStructure represents the HireServiceRefStructure element
// Type for a reference to an HIRE SERVICE.
type HireServiceRefStructure struct {
	LocalServiceRefStructure
}

// MoneyServiceRefStructure represents the MoneyServiceRefStructure element
// Type for a reference to an MONEY SERVICE.
type MoneyServiceRefStructure struct {
	LocalServiceRefStructure
}

// RetailServiceRefStructure represents the RetailServiceRefStructure element
// Type for a reference to an RETAIL SERVICE.
type RetailServiceRefStructure struct {
	LocalServiceRefStructure
}

// CateringServiceRefStructure represents the CateringServiceRefStructure element
// Type for a reference to an CATERING SERVICE.
type CateringServiceRefStructure struct {
	LocalServiceRefStructure
}

// CommunicationServiceRef represents the CommunicationServiceRef element
// Identifier of an COMMUNICATION SERVICE.
type CommunicationServiceRef struct {
	CommunicationServiceRefStructure
}

// HireServiceRef represents the HireServiceRef element
// Identifier of an HIRE SERVICE.
type HireServiceRef struct {
	HireServiceRefStructure
}

// MoneyServiceRef represents the MoneyServiceRef element
// Identifier of an MONEY SERVICE.
type MoneyServiceRef struct {
	MoneyServiceRefStructure
}

// RetailServiceRef represents the RetailServiceRef element
// Identifier of an RETAIL SERVICE.
type RetailServiceRef struct {
	RetailServiceRefStructure
}

// CateringServiceRef represents the CateringServiceRef element
// Identifier of an CATERING SERVICE.
type CateringServiceRef struct {
	CateringServiceRefStructure
}

// CommunicationServiceVersionStructure represents the CommunicationService_VersionStructure element
// Type for Communication Service.
type CommunicationServiceVersionStructure struct {
	LocalServiceVersionStructure
	// COMMUNICATION SERVICEs available.
	ServiceList CommunicationServiceEnumeration `xml:"ServiceList" json:"ServiceList"`
}

// HireServiceVersionStructure represents the HireService_VersionStructure element
// Type for HIRE SERVICE.
type HireServiceVersionStructure struct {
	LocalServiceVersionStructure
	// HIRE SERVICEs available.
	ServiceList []HireServiceEnumeration `xml:"ServiceList" json:"ServiceList"`
}

// MoneyServiceVersionStructure represents the MoneyService_VersionStructure element
// Type for MONEY SERVICE.
type MoneyServiceVersionStructure struct {
	LocalServiceVersionStructure
	// MONEY SERVICEs available.
	ServiceList MoneyServiceEnumeration `xml:"ServiceList" json:"ServiceList"`
}

// RetailServiceVersionStructure represents the RetailService_VersionStructure element
// Type for RETAIL SERVICE.
type RetailServiceVersionStructure struct {
	LocalServiceVersionStructure
	// RETAIL SERVICEs available.
	ServiceList RetailServiceEnumeration `xml:"ServiceList" json:"ServiceList"`
}

// CateringServiceVersionStructure represents the CateringService_VersionStructure element
// Type for CATERING SERVICE.
type CateringServiceVersionStructure struct {
	LocalServiceVersionStructure
	// CATERING SERVICEs available.
	ServiceList CateringServiceEnumeration `xml:"ServiceList" json:"ServiceList"`
}

// CommunicationService represents the CommunicationService element
// Specialisation of LOCAL SERVICE dedicated to communication services.
type CommunicationService struct {
	CommunicationServiceVersionStructure
}

// HireService represents the HireService element
// Specialisation of LOCAL SERVICE dedicated to hire services (e.g. cycle hire, car hire).
type HireService struct {
	HireServiceVersionStructure
}

// MoneyService represents the MoneyService element
// Specialisation of LOCAL SERVICE dedicated to money services.
type MoneyService struct {
	MoneyServiceVersionStructure
}

// RetailService represents the RetailService element
// Specialisation of LOCAL SERVICE dedicated to retail services.
type RetailService struct {
	RetailServiceVersionStructure
}

// CateringService represents the CateringService element
// Specialisation of LOCAL SERVICE dedicated to catering service.
type CateringService struct {
	CateringServiceVersionStructure
}

// ExplicitEquipmentsRelStructure represents the explicitEquipments_RelStructure element
// Type for a list of LOCAL SERVICEs.
type ExplicitEquipmentsRelStructure struct {
	ContainmentAggregationStructure
	PassengerInformationEquipmentRef []PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef []CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef []TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef []SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef []ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef []LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef []WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef []WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef []SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef []PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef []RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef []StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef []QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef []TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef []EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef []LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef []LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef []CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef []RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef []EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef []HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef []GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef []PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef []SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef []RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef []PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef []HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef []PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef []SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef []WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef []AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef []VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef []PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	RetailDevice []RetailDevice `xml:"RetailDevice,omitempty" json:"RetailDevice,omitempty"`
	BatteryEquipment []BatteryEquipment `xml:"BatteryEquipment,omitempty" json:"BatteryEquipment,omitempty"`
	VehicleReleaseEquipment []VehicleReleaseEquipment `xml:"VehicleReleaseEquipment,omitempty" json:"VehicleReleaseEquipment,omitempty"`
	RefuellingEquipment []RefuellingEquipment `xml:"RefuellingEquipment,omitempty" json:"RefuellingEquipment,omitempty"`
	VehicleChargingEquipment []VehicleChargingEquipment `xml:"VehicleChargingEquipment,omitempty" json:"VehicleChargingEquipment,omitempty"`
	CycleStorageEquipment []CycleStorageEquipment `xml:"CycleStorageEquipment,omitempty" json:"CycleStorageEquipment,omitempty"`
	SeatingEquipment []SeatingEquipment `xml:"SeatingEquipment,omitempty" json:"SeatingEquipment,omitempty"`
	ShelterEquipment []ShelterEquipment `xml:"ShelterEquipment,omitempty" json:"ShelterEquipment,omitempty"`
	TrolleyStandEquipment []TrolleyStandEquipment `xml:"TrolleyStandEquipment,omitempty" json:"TrolleyStandEquipment,omitempty"`
	WaitingRoomEquipment []WaitingRoomEquipment `xml:"WaitingRoomEquipment,omitempty" json:"WaitingRoomEquipment,omitempty"`
	CrossingEquipment []CrossingEquipment `xml:"CrossingEquipment,omitempty" json:"CrossingEquipment,omitempty"`
	QueueingEquipment []QueueingEquipment `xml:"QueueingEquipment,omitempty" json:"QueueingEquipment,omitempty"`
	EntranceEquipment []EntranceEquipment `xml:"EntranceEquipment,omitempty" json:"EntranceEquipment,omitempty"`
	RampEquipment []RampEquipment `xml:"RampEquipment,omitempty" json:"RampEquipment,omitempty"`
	LiftCallEquipment []LiftCallEquipment `xml:"LiftCallEquipment,omitempty" json:"LiftCallEquipment,omitempty"`
	LiftEquipment []LiftEquipment `xml:"LiftEquipment,omitempty" json:"LiftEquipment,omitempty"`
	TravelatorEquipment []TravelatorEquipment `xml:"TravelatorEquipment,omitempty" json:"TravelatorEquipment,omitempty"`
	StaircaseEquipment []StaircaseEquipment `xml:"StaircaseEquipment,omitempty" json:"StaircaseEquipment,omitempty"`
	EscalatorEquipment []EscalatorEquipment `xml:"EscalatorEquipment,omitempty" json:"EscalatorEquipment,omitempty"`
	PlaceLighting []PlaceLighting `xml:"PlaceLighting,omitempty" json:"PlaceLighting,omitempty"`
	RoughSurface []RoughSurface `xml:"RoughSurface,omitempty" json:"RoughSurface,omitempty"`
	GeneralSign []GeneralSign `xml:"GeneralSign,omitempty" json:"GeneralSign,omitempty"`
	HeadingSign []HeadingSign `xml:"HeadingSign,omitempty" json:"HeadingSign,omitempty"`
	PlaceSign []PlaceSign `xml:"PlaceSign,omitempty" json:"PlaceSign,omitempty"`
	SignEquipment []SignEquipment `xml:"SignEquipment,omitempty" json:"SignEquipment,omitempty"`
	PassengerInformationEquipment []PassengerInformationEquipment `xml:"PassengerInformationEquipment,omitempty" json:"PassengerInformationEquipment,omitempty"`
	RubbishDisposalEquipment []RubbishDisposalEquipment `xml:"RubbishDisposalEquipment,omitempty" json:"RubbishDisposalEquipment,omitempty"`
	PassengerBeaconEquipment []PassengerBeaconEquipment `xml:"PassengerBeaconEquipment,omitempty" json:"PassengerBeaconEquipment,omitempty"`
	HelpPointEquipment []HelpPointEquipment `xml:"HelpPointEquipment,omitempty" json:"HelpPointEquipment,omitempty"`
	PassengerSafetyEquipment []PassengerSafetyEquipment `xml:"PassengerSafetyEquipment,omitempty" json:"PassengerSafetyEquipment,omitempty"`
	SanitaryEquipment []SanitaryEquipment `xml:"SanitaryEquipment,omitempty" json:"SanitaryEquipment,omitempty"`
	TicketValidatorEquipment []TicketValidatorEquipment `xml:"TicketValidatorEquipment,omitempty" json:"TicketValidatorEquipment,omitempty"`
	TicketingEquipment []TicketingEquipment `xml:"TicketingEquipment,omitempty" json:"TicketingEquipment,omitempty"`
	WheelchairVehicleEquipment []WheelchairVehicleEquipment `xml:"WheelchairVehicleEquipment,omitempty" json:"WheelchairVehicleEquipment,omitempty"`
	AccessVehicleEquipment []AccessVehicleEquipment `xml:"AccessVehicleEquipment,omitempty" json:"AccessVehicleEquipment,omitempty"`
	AssistanceBookingServiceRef []AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef []CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef []RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef []MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef []HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef []CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef []MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef []LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef []LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef []LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef []ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef []CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef []AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef []TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef []LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	AssistanceBookingService []AssistanceBookingService `xml:"AssistanceBookingService,omitempty" json:"AssistanceBookingService,omitempty"`
	CateringService []CateringService `xml:"CateringService,omitempty" json:"CateringService,omitempty"`
	RetailService []RetailService `xml:"RetailService,omitempty" json:"RetailService,omitempty"`
	MoneyService []MoneyService `xml:"MoneyService,omitempty" json:"MoneyService,omitempty"`
	HireService []HireService `xml:"HireService,omitempty" json:"HireService,omitempty"`
	CommunicationService []CommunicationService `xml:"CommunicationService,omitempty" json:"CommunicationService,omitempty"`
	MeetingPointService []MeetingPointService `xml:"MeetingPointService,omitempty" json:"MeetingPointService,omitempty"`
	LostPropertyService []LostPropertyService `xml:"LostPropertyService,omitempty" json:"LostPropertyService,omitempty"`
	LeftLuggageService []LeftLuggageService `xml:"LeftLuggageService,omitempty" json:"LeftLuggageService,omitempty"`
	ComplaintsService []ComplaintsService `xml:"ComplaintsService,omitempty" json:"ComplaintsService,omitempty"`
	CustomerService []CustomerService `xml:"CustomerService,omitempty" json:"CustomerService,omitempty"`
	LuggageService []LuggageService `xml:"LuggageService,omitempty" json:"LuggageService,omitempty"`
	AssistanceService []AssistanceService `xml:"AssistanceService,omitempty" json:"AssistanceService,omitempty"`
	TicketingService []TicketingService `xml:"TicketingService,omitempty" json:"TicketingService,omitempty"`
	OtherPlaceEquipment []OtherPlaceEquipment `xml:"OtherPlaceEquipment,omitempty" json:"OtherPlaceEquipment,omitempty"`
}

// ExplicitPlaceEquipmentsRelStructure represents the explicitPlaceEquipments_RelStructure element
// Items of fixed EQUIPMENT that may be located in places within the STOP PLACE.
type ExplicitPlaceEquipmentsRelStructure struct {
	ContainmentAggregationStructure
	OtherPlaceEquipment []OtherPlaceEquipment `xml:"OtherPlaceEquipment,omitempty" json:"OtherPlaceEquipment,omitempty"`
	RoughSurface []RoughSurface `xml:"RoughSurface,omitempty" json:"RoughSurface,omitempty"`
	EntranceEquipment []EntranceEquipment `xml:"EntranceEquipment,omitempty" json:"EntranceEquipment,omitempty"`
	StaircaseEquipment []StaircaseEquipment `xml:"StaircaseEquipment,omitempty" json:"StaircaseEquipment,omitempty"`
	LiftEquipment []LiftEquipment `xml:"LiftEquipment,omitempty" json:"LiftEquipment,omitempty"`
	LiftCallEquipment []LiftCallEquipment `xml:"LiftCallEquipment,omitempty" json:"LiftCallEquipment,omitempty"`
	EscalatorEquipment []EscalatorEquipment `xml:"EscalatorEquipment,omitempty" json:"EscalatorEquipment,omitempty"`
	TravelatorEquipment []TravelatorEquipment `xml:"TravelatorEquipment,omitempty" json:"TravelatorEquipment,omitempty"`
	RampEquipment []RampEquipment `xml:"RampEquipment,omitempty" json:"RampEquipment,omitempty"`
	QueueingEquipment []QueueingEquipment `xml:"QueueingEquipment,omitempty" json:"QueueingEquipment,omitempty"`
	CrossingEquipment []CrossingEquipment `xml:"CrossingEquipment,omitempty" json:"CrossingEquipment,omitempty"`
	PlaceLighting []PlaceLighting `xml:"PlaceLighting,omitempty" json:"PlaceLighting,omitempty"`
	// PLACE SIGN. Sign indicating name of STOP PLACE. t.
	PlaceSign []PlaceSignStructure `xml:"PlaceSign,omitempty" json:"PlaceSign,omitempty"`
	// Sign identifying a direction to a PLACE.
	HeadingSign []HeadingSignStructure `xml:"HeadingSign,omitempty" json:"HeadingSign,omitempty"`
	// PLACE SIGN.
	GeneralSign []GeneralSignStructure `xml:"GeneralSign,omitempty" json:"GeneralSign,omitempty"`
	// Specialisation of PASSENGER EQUIPMENT for a help point.
	HelpPointEquipment []HelpPointEquipment `xml:"HelpPointEquipment,omitempty" json:"HelpPointEquipment,omitempty"`
	// Specialisation of PASSENGER EQUIPMENT for passenger safety.
	PassengerSafetyEquipment []PassengerSafetyEquipment `xml:"PassengerSafetyEquipment,omitempty" json:"PassengerSafetyEquipment,omitempty"`
	// Specialisation of EQUIPMENT for Rubbish disposal, describing bins, rubbish types, etc.
	RubbishDisposalEquipment []RubbishDisposalEquipment `xml:"RubbishDisposalEquipment,omitempty" json:"RubbishDisposalEquipment,omitempty"`
	// Specialisation of PASSENGER EQUIPMENT for sanitary facilities. e.g. WC, Shower, baby change.
	SanitaryEquipment []SanitaryEquipment `xml:"SanitaryEquipment,omitempty" json:"SanitaryEquipment,omitempty"`
	TicketingEquipment []TicketingEquipment `xml:"TicketingEquipment,omitempty" json:"TicketingEquipment,omitempty"`
	TicketValidatorEquipment []TicketValidatorEquipment `xml:"TicketValidatorEquipment,omitempty" json:"TicketValidatorEquipment,omitempty"`
}

// ExplicitLocalServicesRelStructure represents the explicitLocalServices_RelStructure element
// Items of LOCAL SERVICE EQUIPMENT that may be located in PLACEs within the SITE.
type ExplicitLocalServicesRelStructure struct {
	ContainmentAggregationStructure
	AssistanceBookingServiceRef []AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef []CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef []RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef []MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef []HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef []CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef []MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef []LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef []LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef []LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef []ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef []CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef []AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef []TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef []LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	AssistanceBookingService []AssistanceBookingService `xml:"AssistanceBookingService,omitempty" json:"AssistanceBookingService,omitempty"`
	CateringService []CateringService `xml:"CateringService,omitempty" json:"CateringService,omitempty"`
	RetailService []RetailService `xml:"RetailService,omitempty" json:"RetailService,omitempty"`
	MoneyService []MoneyService `xml:"MoneyService,omitempty" json:"MoneyService,omitempty"`
	HireService []HireService `xml:"HireService,omitempty" json:"HireService,omitempty"`
	CommunicationService []CommunicationService `xml:"CommunicationService,omitempty" json:"CommunicationService,omitempty"`
	MeetingPointService []MeetingPointService `xml:"MeetingPointService,omitempty" json:"MeetingPointService,omitempty"`
	LostPropertyService []LostPropertyService `xml:"LostPropertyService,omitempty" json:"LostPropertyService,omitempty"`
	LeftLuggageService []LeftLuggageService `xml:"LeftLuggageService,omitempty" json:"LeftLuggageService,omitempty"`
	ComplaintsService []ComplaintsService `xml:"ComplaintsService,omitempty" json:"ComplaintsService,omitempty"`
	CustomerService []CustomerService `xml:"CustomerService,omitempty" json:"CustomerService,omitempty"`
	LuggageService []LuggageService `xml:"LuggageService,omitempty" json:"LuggageService,omitempty"`
	AssistanceService []AssistanceService `xml:"AssistanceService,omitempty" json:"AssistanceService,omitempty"`
	TicketingService []TicketingService `xml:"TicketingService,omitempty" json:"TicketingService,omitempty"`
}

// SiteElementVersionStructure represents the SiteElement_VersionStructure element
// Type for a SITE ELEMENT.
type SiteElementVersionStructure struct {
	AddressablePlaceVersionStructure
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// Allowed MODEs to access SITE ELEMENT.
	AccessModes *AccessModeEnumeration `xml:"AccessModes,omitempty" json:"AccessModes,omitempty"`
	// Further suffix to name that may be used in some contexts.
	NameSuffix *MultilingualString `xml:"NameSuffix,omitempty" json:"NameSuffix,omitempty"`
	// Alternative names.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// Name of a Road that crosses the Road the street near the SITE ELEMENT that can be used to describe its relative location.
	CrossRoad *MultilingualString `xml:"CrossRoad,omitempty" json:"CrossRoad,omitempty"`
	// Name of a Landmark near the SITE ELEMENT that can be used to describe its relative location.
	Landmark *MultilingualString `xml:"Landmark,omitempty" json:"Landmark,omitempty"`
	// Whether the component is available for public use or is restricted.
	PublicUse *PublicUseEnumeration `xml:"PublicUse,omitempty" json:"PublicUse,omitempty"`
	// Whether the component is Indoors or outdoors. Default is Indoors.
	Covered *CoveredEnumeration `xml:"Covered,omitempty" json:"Covered,omitempty"`
	// Whether the component is within a gated area or freely accessible without a pass or ticket.
	Gated *GatedEnumeration `xml:"Gated,omitempty" json:"Gated,omitempty"`
	// Whether the component is lit or not. Default is well Lit.
	Lighting *LightingEnumeration `xml:"Lighting,omitempty" json:"Lighting,omitempty"`
	// Whether all areas of the component are wheelchair accessible.
	AllAreasWheelchairAccessible *bool `xml:"AllAreasWheelchairAccessible,omitempty" json:"AllAreasWheelchairAccessible,omitempty"`
	// Total number of people that component can contain.
	PersonCapacity *int `xml:"PersonCapacity,omitempty" json:"PersonCapacity,omitempty"`
	// Presentation defaults for SITE ELEMENT. +V1.2.2
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// Facilities available at SITe.
	Facilities *SiteFacilitySetsRelStructure `xml:"facilities,omitempty" json:"facilities,omitempty"`
}

// SiteVersionStructure represents the Site_VersionStructure element
// Type for an identified and data managed element making up a STOP PLACE.
type SiteVersionStructure struct {
	SiteElementVersionStructure
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	TopographicPlaceView *TopographicPlaceView `xml:"TopographicPlaceView,omitempty" json:"TopographicPlaceView,omitempty"`
	// Additional Topographic Places in which SITE is located.
	AdditionalTopographicPlaces *TopographicPlaceRefsRelStructure `xml:"additionalTopographicPlaces,omitempty" json:"additionalTopographicPlaces,omitempty"`
	// Type of SITE.
	SiteType *SiteTypeEnumeration `xml:"SiteType,omitempty" json:"SiteType,omitempty"`
	// Whether SITE is at centre of TOPOGRAPHIC PLACE.
	AtCentre *bool `xml:"AtCentre,omitempty" json:"AtCentre,omitempty"`
	Locale *Locale `xml:"Locale,omitempty" json:"Locale,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// Reference to OPERATOR of SITE - derived details can be included.
	OperatingOrganisationView *OrganisationDerivedViewStructure `xml:"OperatingOrganisationView,omitempty" json:"OperatingOrganisationView,omitempty"`
	// Reference to another SITE of which this SITE is deemed to be a subzone.
	ParentSiteRef *SiteRefStructure `xml:"ParentSiteRef,omitempty" json:"ParentSiteRef,omitempty"`
	// Any references to another SITE of which this STOP PLACE is deemed to be a nearby but distinct.
	AdjacentSites *SiteRefsRelStructure `xml:"adjacentSites,omitempty" json:"adjacentSites,omitempty"`
	// Most specific TOPOGRAPHIC PLACE within which the SITE lies. The TOPOGRAPHIC model can be used to determine what other places this also implies.
	ContainedInPlaceRef *TopographicPlaceRefStructure `xml:"ContainedInPlaceRef,omitempty" json:"ContainedInPlaceRef,omitempty"`
	// LEVELs found within SITe.
	Levels *LevelsRelStructure `xml:"levels,omitempty" json:"levels,omitempty"`
	// Entrances to and within SITE.
	Entrances *SiteEntrancesRelStructure `xml:"entrances,omitempty" json:"entrances,omitempty"`
	// EQUIPMENT PLACEs within SITE COMPONENT.
	EquipmentPlaces *EquipmentPlacesRelStructure `xml:"equipmentPlaces,omitempty" json:"equipmentPlaces,omitempty"`
	// Items of fixed EQUIPMENT that may be located in places within the SITE  ELEMENT.
	PlaceEquipments *PlaceEquipmentsRelStructure `xml:"placeEquipments,omitempty" json:"placeEquipments,omitempty"`
	// LOCAL SERVICEs that may be located in PLACEs within the SITE ELEMENT.
	LocalServices *LocalServicesRelStructure `xml:"localServices,omitempty" json:"localServices,omitempty"`
}

// SiteComponentVersionStructure represents the SiteComponent_VersionStructure element
// A component of a SITE COMPONENT.
type SiteComponentVersionStructure struct {
	SiteElementVersionStructure
	// Reference to parent of SITE, if any.
	SiteRef *SiteRefStructure `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	LevelRef *LevelRef `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	// Impediments to navigation from processes or barriers. For example security, check in etc.
	CheckConstraints *CheckConstraintsRelStructure `xml:"checkConstraints,omitempty" json:"checkConstraints,omitempty"`
	// EQUIPMENT PLACEs within SITE COMPONENT.
	EquipmentPlaces *EquipmentPlacesRelStructure `xml:"equipmentPlaces,omitempty" json:"equipmentPlaces,omitempty"`
	// Items of fixed EQUIPMENT that may be located in places within the SITE  ELEMENT.
	PlaceEquipments *PlaceEquipmentsRelStructure `xml:"placeEquipments,omitempty" json:"placeEquipments,omitempty"`
	// LOCAL SERVICEs that may be located in PLACEs within the SITE ELEMENT.
	LocalServices *LocalServicesRelStructure `xml:"localServices,omitempty" json:"localServices,omitempty"`
}

// SiteEntrancesRelStructure represents the siteEntrances_RelStructure element
// Type for a list of ENTRANCEs.
type SiteEntrancesRelStructure struct {
	ContainmentAggregationStructure
	StopPlaceVehicleEntranceRef []StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef []StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef []ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef []ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef []ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef []PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef []PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef []EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	PointOfInterestVehicleEntrance []PointOfInterestVehicleEntrance `xml:"PointOfInterestVehicleEntrance,omitempty" json:"PointOfInterestVehicleEntrance,omitempty"`
	PointOfInterestEntrance []PointOfInterestEntrance `xml:"PointOfInterestEntrance,omitempty" json:"PointOfInterestEntrance,omitempty"`
	ParkingPassengerEntrance []ParkingPassengerEntrance `xml:"ParkingPassengerEntrance,omitempty" json:"ParkingPassengerEntrance,omitempty"`
	ParkingEntranceForVehicles []ParkingEntranceForVehicles `xml:"ParkingEntranceForVehicles,omitempty" json:"ParkingEntranceForVehicles,omitempty"`
	StopPlaceVehicleEntrance []StopPlaceVehicleEntrance `xml:"StopPlaceVehicleEntrance,omitempty" json:"StopPlaceVehicleEntrance,omitempty"`
	StopPlaceEntrance []StopPlaceEntrance `xml:"StopPlaceEntrance,omitempty" json:"StopPlaceEntrance,omitempty"`
	// Entrance to a SITE.
	Entrance []Entrance `xml:"Entrance,omitempty" json:"Entrance,omitempty"`
}

// SiteEntranceVersionStructure represents the SiteEntrance_VersionStructure element
// Type for SITE ENTRANCe.
type SiteEntranceVersionStructure struct {
	SiteComponentVersionStructure
	// Alternative identifier of ENTRANCE shown to Public.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Label of ENTRANCE.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// Classification of ENTRANCE. Use EQUIPMENT element to describe in further detail.
	EntranceType *EntranceEnumeration `xml:"EntranceType,omitempty" json:"EntranceType,omitempty"`
	// Whether ENTRANCE is external to STOP PLACE. Default is true.
	IsExternal *bool `xml:"IsExternal,omitempty" json:"IsExternal,omitempty"`
	// Whether ENTRANCE can be used for entry. Default is true.
	IsEntry *bool `xml:"IsEntry,omitempty" json:"IsEntry,omitempty"`
	// Whether ENTRANCE can be used for exit. Default is true.
	IsExit *bool `xml:"IsExit,omitempty" json:"IsExit,omitempty"`
	// Width of ENTRANCE in metres.
	Width *float64 `xml:"Width,omitempty" json:"Width,omitempty"`
	// Height of ENTRANCE In metres.
	Height *float64 `xml:"Height,omitempty" json:"Height,omitempty"`
	// Whether nearest crossing to ENTRANCE has dropped kerb.
	DroppedKerbOutside *bool `xml:"DroppedKerbOutside,omitempty" json:"DroppedKerbOutside,omitempty"`
	// Whether there is a drop off point close by to ENTRANCE.
	DropOffPointClose *bool `xml:"DropOffPointClose,omitempty" json:"DropOffPointClose,omitempty"`
}

// VehicleEntrancesRelStructure represents the vehicleEntrances_RelStructure element
// Type for a list of VEHICLE ENTRANCEs.
type VehicleEntrancesRelStructure struct {
	ContainmentAggregationStructure
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef" json:"VehicleEntranceRef"`
}

// VehicleEntranceVersionStructure represents the VehicleEntrance_VersionStructure element
// Type for a VEHICLE ENTRANCE.
type VehicleEntranceVersionStructure struct {
	SiteEntranceVersionStructure
	// Whether private vehicles can use this entrance.
	Public *bool `xml:"Public,omitempty" json:"Public,omitempty"`
}

// LevelsRelStructure represents the levels_RelStructure element
// Type for a list of LEVELs.
type LevelsRelStructure struct {
	ContainmentAggregationStructure
	LevelRef []LevelRef `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	// Level of a Building or SITE.
	Level []Level `xml:"Level,omitempty" json:"Level,omitempty"`
}

// LevelVersionStructure represents the Level_VersionStructure element
// Type for a SITE LEVEL.
type LevelVersionStructure struct {
	DataManagedObjectStructure
	// Name of LEVEL.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name of LEVEL.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Description of LEVEL.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Public code for LEVEL.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Whether level is for public use.
	PublicUse *bool `xml:"PublicUse,omitempty" json:"PublicUse,omitempty"`
	// Order of LEVELs. The level numbers are not absolute, but only give a relative order within the SITE. 0 should be the ground floor, even when it is often difficult to determine which one that is in a complex structure. Complex buildings can be modelled with multiple SITEs and referenced by SiteRef.
	RelativeLevelOrder *int `xml:"RelativeLevelOrder,omitempty" json:"RelativeLevelOrder,omitempty"`
	// Accessibility values associated with LEVEL.
	AccessibilityAssessment *AccessibilityAssessmentVersionedChildStructure `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// Whether all areas of the LEVEL are wheelchair accessible.
	AllAreasWheelchairAccessible *bool `xml:"AllAreasWheelchairAccessible,omitempty" json:"AllAreasWheelchairAccessible,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
}

// AccessZonesRelStructure represents the accessZones_RelStructure element
// Type for a list of ACCESS ZONEs.
type AccessZonesRelStructure struct {
	ContainmentAggregationStructure
	AccessZoneRef []AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	// ACCESS ZONE of a building or SITE.
	AccessZone []AccessZone `xml:"AccessZone,omitempty" json:"AccessZone,omitempty"`
}

// AccessZoneVersionStructure represents the AccessZone_VersionStructure element
// Type for an ACCESS ZONE.
type AccessZoneVersionStructure struct {
	ZoneVersionStructure
	// Accessibility values associated with ACCESS ZONE.
	AccessibilityAssessment *AccessibilityAssessmentVersionedChildStructure `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// Whether all areas of the ACCESS ZONE are wheelchair accessible.
	AllAreasWheelchairAccessible *bool `xml:"AllAreasWheelchairAccessible,omitempty" json:"AllAreasWheelchairAccessible,omitempty"`
}

// ServiceSiteVersionStructure represents the ServiceSite_VersionStructure element
// Type for an identified and data managed element making up a STOP PLACE.
type ServiceSiteVersionStructure struct {
	SiteVersionStructure
}

// SiteElement represents the SiteElement element
// A physical PLACE to which passengers may go. May have ACCESSIBILITY ASSESMENT and other properties to describe it.
type SiteElement struct {
	SiteElementVersionStructure
}

// Site represents the Site element
// A type of PLACE, such as a STOP PLACE, POINT OF INTEREST or ADDRESS, to which passengers may wish to travel.
type Site struct {
	SiteVersionStructure
}

// SiteComponent represents the SiteComponent element
// An element of a SITE describing part of its structure. SITE COMPONENTs share common properties for accessibility and other features.
type SiteComponent struct {
	SiteComponentVersionStructure
}

// Entrance represents the Entrance element
// A physical entrance or exit to/from a SITE. May be a door, barrier, gate or other recognizable point of access.
type Entrance struct {
	SiteEntranceVersionStructure
}

// VehicleEntrance represents the VehicleEntrance element
// A physical entrance or exit to/from a SITE for a VEHICLE. May be a door, barrier, gate or other recognizable point of access.
type VehicleEntrance struct {
	VehicleEntranceVersionStructure
	// POINTs in GROUP OF POINTs.
	Members interface{} `xml:"members,omitempty" json:"members,omitempty"`
}

// Level represents the Level element
// An identified storey (ground, first, basement, mezzanine, etc) within an interchange building or SITE on which SITE COMPONENTs reside. A PATH LINK may connect components on different levels.
type Level struct {
	LevelVersionStructure
}

// AccessZone represents the AccessZone element
// An identified storey (ground, first, basement, mezzanine, etc) within an interchange building or SITE on which SITE COMPONENTs reside. A PATH LINK may connect components on different ACCESS ZONEs.
type AccessZone struct {
	AccessZoneVersionStructure
}

// ServiceSite represents the ServiceSite element
// A sub-type of SITE which is of specific interest for the operator (e.g. where a joint service or a joint fee is proposed).
type ServiceSite struct {
	ServiceSiteVersionStructure
}

// EquipmentPlacesRelStructure represents the equipmentPlaces_RelStructure element
// Type for a list of EQUIPMENT PLACEs.
type EquipmentPlacesRelStructure struct {
	ContainmentAggregationStructure
	EquipmentPlaceRef []EquipmentPlaceRef `xml:"EquipmentPlaceRef,omitempty" json:"EquipmentPlaceRef,omitempty"`
	EquipmentPlace []EquipmentPlace `xml:"EquipmentPlace,omitempty" json:"EquipmentPlace,omitempty"`
}

// EquipmentPlaceVersionStructure represents the EquipmentPlace_VersionStructure element
// Type for an EQUIPMENT PLACE.
type EquipmentPlaceVersionStructure struct {
	SiteElementVersionStructure
	// Positions of EQUIPMENT.
	EquipmentPositions *EquipmentPositionsRelStructure `xml:"equipmentPositions,omitempty" json:"equipmentPositions,omitempty"`
	// Items of EQUIPMENT that may be located in an EQUIPMENT PLACE.
	PlaceEquipments *EquipmentsRelStructure `xml:"placeEquipments,omitempty" json:"placeEquipments,omitempty"`
}

// EquipmentPositionsRelStructure represents the equipmentPositions_RelStructure element
// Type for a list of EQUIPMENT POSITIONs.
type EquipmentPositionsRelStructure struct {
	StrictContainmentAggregationStructure
	EquipmentPosition []EquipmentPosition `xml:"EquipmentPosition" json:"EquipmentPosition"`
}

// EquipmentPositionStructure represents the EquipmentPositionStructure element
// Type for EQUIPMENT POSITION.
type EquipmentPositionStructure struct {
	DataManagedObjectStructure
	RetailDeviceRef *RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	ActivatedEquipmentRef *ActivatedEquipmentRef `xml:"ActivatedEquipmentRef,omitempty" json:"ActivatedEquipmentRef,omitempty"`
	BatteryEquipmentRef *BatteryEquipmentRef `xml:"BatteryEquipmentRef,omitempty" json:"BatteryEquipmentRef,omitempty"`
	RefuellingEquipmentRef *RefuellingEquipmentRef `xml:"RefuellingEquipmentRef,omitempty" json:"RefuellingEquipmentRef,omitempty"`
	VehicleChargingEquipmentRef *VehicleChargingEquipmentRef `xml:"VehicleChargingEquipmentRef,omitempty" json:"VehicleChargingEquipmentRef,omitempty"`
	AssistanceBookingServiceRef *AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef *CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef *RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef *MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef *HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef *CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef *MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef *LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef *LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef *LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef *ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef *CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef *AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef *TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef *LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	VehicleReleaseEquipmentRef *VehicleReleaseEquipmentRef `xml:"VehicleReleaseEquipmentRef,omitempty" json:"VehicleReleaseEquipmentRef,omitempty"`
	TicketValidatorEquipmentRef *TicketValidatorEquipmentRef `xml:"TicketValidatorEquipmentRef,omitempty" json:"TicketValidatorEquipmentRef,omitempty"`
	TicketingEquipmentRef *TicketingEquipmentRef `xml:"TicketingEquipmentRef,omitempty" json:"TicketingEquipmentRef,omitempty"`
	PassengerInformationEquipmentRef *PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef *CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef *TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef *SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef *ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef *LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef *WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef *WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef *SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef *PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef *RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef *StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef *QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef *TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef *EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef *LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef *LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef *CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef *RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef *EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef *HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef *GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef *PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef *SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef *RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef *PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef *HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef *PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef *SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef *WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef *AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef *VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef *PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	EquipmentRef *EquipmentRef `xml:"EquipmentRef,omitempty" json:"EquipmentRef,omitempty"`
	// Description of location of EQUIPMENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Absolute location of EQUIPMENT.
	Location *LocationStructure `xml:"Location,omitempty" json:"Location,omitempty"`
	// Location . If absent, use top left corner of containing space. If present should be an entrance or other specific point within the on the Space containing the EQUIPMENT.
	ReferencePointRef *PointRefStructure `xml:"ReferencePointRef,omitempty" json:"ReferencePointRef,omitempty"`
	// Horizontal offset from reference point.
	Xoffset *float64 `xml:"XOffset,omitempty" json:"XOffset,omitempty"`
	// Vertical offset from reference point.
	Yoffset *float64 `xml:"YOffset,omitempty" json:"YOffset,omitempty"`
}

// EquipmentPlace represents the EquipmentPlace element
// Designated Place within a SITE for a locating EQUIPMENT.
type EquipmentPlace struct {
	EquipmentPlaceVersionStructure
}

// EquipmentPosition represents the EquipmentPosition element
// The precise position within an EQUIPMENT PLACE where particular EQUIPMENT is placed.
type EquipmentPosition struct {
	EquipmentPositionStructure
}

// PlugTypeEnumeration represents the PlugTypeEnumeration enumeration
// Values for Plug Types +v1.2.2
type PlugTypeEnumeration string

const (
	// PlugTypeEnumerationUndefined represents undefined
	PlugTypeEnumerationUndefined PlugTypeEnumeration = "undefined"
	// PlugTypeEnumerationType1 represents type1
	PlugTypeEnumerationType1 PlugTypeEnumeration = "type1"
	// PlugTypeEnumerationType2 represents type2
	PlugTypeEnumerationType2 PlugTypeEnumeration = "type2"
	// PlugTypeEnumerationType3 represents type3
	PlugTypeEnumerationType3 PlugTypeEnumeration = "type3"
	// PlugTypeEnumerationTypeE represents typeE
	PlugTypeEnumerationTypeE PlugTypeEnumeration = "typeE"
	// PlugTypeEnumerationTypeF represents typeF
	PlugTypeEnumerationTypeF PlugTypeEnumeration = "typeF"
	// PlugTypeEnumerationTypeG represents typeG
	PlugTypeEnumerationTypeG PlugTypeEnumeration = "typeG"
	// PlugTypeEnumerationTypeJ represents typeJ
	PlugTypeEnumerationTypeJ PlugTypeEnumeration = "typeJ"
	// PlugTypeEnumerationCombinedChargingSystem represents combinedChargingSystem
	PlugTypeEnumerationCombinedChargingSystem PlugTypeEnumeration = "combinedChargingSystem"
	// PlugTypeEnumerationCcsCombo1Plug represents ccsCombo1Plug
	PlugTypeEnumerationCcsCombo1Plug PlugTypeEnumeration = "ccsCombo1Plug"
	// PlugTypeEnumerationCcsCombo2Plug represents ccsCombo2Plug
	PlugTypeEnumerationCcsCombo2Plug PlugTypeEnumeration = "ccsCombo2Plug"
	// PlugTypeEnumerationTesla represents tesla
	PlugTypeEnumerationTesla PlugTypeEnumeration = "tesla"
	// PlugTypeEnumerationNema520 represents nema5-20
	PlugTypeEnumerationNema520 PlugTypeEnumeration = "nema5-20"
	// PlugTypeEnumerationAvcon represents avcon
	PlugTypeEnumerationAvcon PlugTypeEnumeration = "avcon"
	// PlugTypeEnumerationChadeMo represents CHAdeMO
	PlugTypeEnumerationChadeMo PlugTypeEnumeration = "CHAdeMO"
	// PlugTypeEnumerationShockproof represents shockproof
	PlugTypeEnumerationShockproof PlugTypeEnumeration = "shockproof"
)

// CouplingTypeEnumeration represents the CouplingTypeEnumeration enumeration
// Values for Coupling Types +v1.2.2
type CouplingTypeEnumeration string

const (
	// CouplingTypeEnumerationUndefined represents undefined
	CouplingTypeEnumerationUndefined CouplingTypeEnumeration = "undefined"
	// CouplingTypeEnumerationPlug represents plug
	CouplingTypeEnumerationPlug CouplingTypeEnumeration = "plug"
	// CouplingTypeEnumerationPantographAbove represents pantographAbove
	// DEPRECATED. Will be panthograph.
	CouplingTypeEnumerationPantographAbove CouplingTypeEnumeration = "pantographAbove"
	// CouplingTypeEnumerationPantograph represents pantograph
	CouplingTypeEnumerationPantograph CouplingTypeEnumeration = "pantograph"
	// CouplingTypeEnumerationInduction represents induction
	CouplingTypeEnumerationInduction CouplingTypeEnumeration = "induction"
	// CouplingTypeEnumerationOther represents other
	CouplingTypeEnumerationOther CouplingTypeEnumeration = "other"
)

// CurrentTypeEnumeration represents the CurrentTypeEnumeration enumeration
// Values for Current Types +v1.2.2
type CurrentTypeEnumeration string

const (
	// CurrentTypeEnumerationUndefined represents undefined
	CurrentTypeEnumerationUndefined CurrentTypeEnumeration = "undefined"
	// CurrentTypeEnumeration1_PhaseAC represents 1-PhaseAC
	CurrentTypeEnumeration1_PhaseAC CurrentTypeEnumeration = "1-PhaseAC"
	// CurrentTypeEnumeration3_PhaseAC represents 3-PhaseAC
	CurrentTypeEnumeration3_PhaseAC CurrentTypeEnumeration = "3-PhaseAC"
	// CurrentTypeEnumerationDc represents DC
	CurrentTypeEnumerationDc CurrentTypeEnumeration = "DC"
)

// VehicleChargingEquipmentRefStructure represents the VehicleChargingEquipmentRefStructure element
// Type for a reference to an VEHICLE CHARGING EQUIPMENT.
type VehicleChargingEquipmentRefStructure struct {
	EquipmentRefStructure
}

// RefuellingEquipmentRefStructure represents the RefuellingEquipmentRefStructure element
// Type for a reference to an REFUELLING EQUIPMENT.
type RefuellingEquipmentRefStructure struct {
	EquipmentRefStructure
}

// BatteryEquipmentRefStructure represents the BatteryEquipmentRefStructure element
// Type for a reference to an BATTERY EQUIPMENT.
type BatteryEquipmentRefStructure struct {
	EquipmentRefStructure
}

// TypeOfBatteryChemistryRefStructure represents the TypeOfBatteryChemistryRefStructure element
// Type for a reference to a TYPE OF BATTERY CHEMISTRY.
type TypeOfBatteryChemistryRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfPlugRefStructure represents the TypeOfPlugRefStructure element
// Type for a reference to a TYPE OF PLUG.
type TypeOfPlugRefStructure struct {
	TypeOfValueRefStructure
}

// VehicleChargingEquipmentRef represents the VehicleChargingEquipmentRef element
// Identifier of an VEHICLE CHARGING EQUIPMENT.
type VehicleChargingEquipmentRef struct {
	VehicleChargingEquipmentRefStructure
}

// RefuellingEquipmentRef represents the RefuellingEquipmentRef element
// Identifier of an REFUELLING EQUIPMENT. +v1.2.2
type RefuellingEquipmentRef struct {
	RefuellingEquipmentRefStructure
}

// BatteryEquipmentRef represents the BatteryEquipmentRef element
// Identifier of an BATTERY EQUIPMENT. +v1.2.2
type BatteryEquipmentRef struct {
	BatteryEquipmentRefStructure
}

// TypeOfBatteryChemistryRef represents the TypeOfBatteryChemistryRef element
// Reference to a TYPE OF BATTERY CHEMISTRY. +v1.2.2
type TypeOfBatteryChemistryRef struct {
	TypeOfBatteryChemistryRefStructure
}

// TypeOfPlugRef represents the TypeOfPlugRef element
// Reference to a TYPE OF PLUG. +v1.2.2
type TypeOfPlugRef struct {
	TypeOfPlugRefStructure
}

// VehicleChargingEquipmentVersionStructure represents the VehicleChargingEquipment_VersionStructure element
// Type for a VEHICLE CHARGING EQUIPMENT.
type VehicleChargingEquipmentVersionStructure struct {
	PlaceEquipmentVersionStructure
	// whether shelter is enclosed.
	FreeRecharging *bool `xml:"FreeRecharging,omitempty" json:"FreeRecharging,omitempty"`
	// Whether reservation is required.
	ReservationRequired *bool `xml:"ReservationRequired,omitempty" json:"ReservationRequired,omitempty"`
	// Type of storage.
	ReservationUrl *string `xml:"ReservationUrl,omitempty" json:"ReservationUrl,omitempty"`
	// Maximum charging power of the grid
	// supply [W]. The sum of the current
	// power of all connected charging
	// points cannot exceed this value.
	MaximumPower *float64 `xml:"MaximumPower,omitempty" json:"MaximumPower,omitempty"`
	// Grid Voltage to the equipment.
	GridVoltage *float64 `xml:"GridVoltage,omitempty" json:"GridVoltage,omitempty"`
}

// RefuellingEquipmentVersionStructure represents the RefuellingEquipment_VersionStructure element
// Type for a REFUELLING EQUIPMENT.
type RefuellingEquipmentVersionStructure struct {
	PlaceEquipmentVersionStructure
	// The type of fuel used by a vehicle of the type.
	FuelType *FuelTypeEnumeration `xml:"FuelType,omitempty" json:"FuelType,omitempty"`
}

// BatteryEquipmentVersionStructure represents the BatteryEquipment_VersionStructure element
// Type for a BATTERY EQUIPMENT.
type BatteryEquipmentVersionStructure struct {
	PlaceEquipmentVersionStructure
	// Battery capacity stated by the manufacturer in Watt Hours [Wh]
	BatteryCapacity *float64 `xml:"BatteryCapacity,omitempty" json:"BatteryCapacity,omitempty"`
	// Usable battery capacity stated in Watt Hours [Wh]
	BatteryUsableCapacity *float64 `xml:"BatteryUsableCapacity,omitempty" json:"BatteryUsableCapacity,omitempty"`
	// Voltage for battery in volts.
	NominalVoltage *float64 `xml:"NominalVoltage,omitempty" json:"NominalVoltage,omitempty"`
	// Maximum charging power of the grid
	// supply [W]. The sum of the current
	// power of all connected charging
	// points cannot exceed this value.
	MaximumChargingPower *float64 `xml:"MaximumChargingPower,omitempty" json:"MaximumChargingPower,omitempty"`
	TypeOfBatteryChemistryRef *TypeOfBatteryChemistryRef `xml:"TypeOfBatteryChemistryRef,omitempty" json:"TypeOfBatteryChemistryRef,omitempty"`
}

// TypeOfBatteryChemistryValueStructure represents the TypeOfBatteryChemistry_ValueStructure element
// Type for a TYPE OF BATTERY CHEMISTRY. +v1.2.2
type TypeOfBatteryChemistryValueStructure struct {
	TypeOfEntityVersionStructure
}

// TypeOfPlugValueStructure represents the TypeOfPlug_ValueStructure element
// Type for a TYPE OF PLUG. +v1.2.2
type TypeOfPlugValueStructure struct {
	TypeOfEntityVersionStructure
}

// VehicleChargingEquipment represents the VehicleChargingEquipment element
// Specialisation of PLACE EQUIPMENT for vehicle charging.
type VehicleChargingEquipment struct {
	VehicleChargingEquipmentVersionStructure
}

// RefuellingEquipment represents the RefuellingEquipment element
// Specialisation of PLACE EQUIPMENT for REFUELLING. +v1.2.2
type RefuellingEquipment struct {
	RefuellingEquipmentVersionStructure
}

// BatteryEquipment represents the BatteryEquipment element
// Specialisation of INSTALLED EQUIPMENT for BATTERY. +v1.2.2
type BatteryEquipment struct {
	BatteryEquipmentVersionStructure
}

// TypeOfBatteryChemistry represents the TypeOfBatteryChemistry element
// A classification of a BATTERY CHEMISTRY  +v1.2.2
type TypeOfBatteryChemistry struct {
	TypeOfBatteryChemistryValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// TypeOfPlug represents the TypeOfPlug element
// A classification of a PLUG  +v1.2.2
type TypeOfPlug struct {
	TypeOfPlugValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// ChargingEquipmentProfileRefStructure represents the ChargingEquipmentProfileRefStructure element
// Type for a reference to an CHARGING EQUIPMENT PROFILE.
type ChargingEquipmentProfileRefStructure struct {
	VehicleEquipmentProfileRefStructure
}

// ChargingEquipmentProfileRef represents the ChargingEquipmentProfileRef element
// Identifier of an CHARGING EQUIPMENT PROFILE. +v1.2.2
type ChargingEquipmentProfileRef struct {
	ChargingEquipmentProfileRefStructure
}

// TransmissionEnumeration represents the TransmissionEnumeration enumeration
// Allowed values for Vehicle Transmission. +v1.2.2
type TransmissionEnumeration string

const (
	// TransmissionEnumerationAutomatic represents automatic
	TransmissionEnumerationAutomatic TransmissionEnumeration = "automatic"
	// TransmissionEnumerationAutomatic4WheelDrive represents automatic4WheelDrive
	TransmissionEnumerationAutomatic4WheelDrive TransmissionEnumeration = "automatic4WheelDrive"
	// TransmissionEnumerationManual represents manual
	TransmissionEnumerationManual TransmissionEnumeration = "manual"
	// TransmissionEnumerationManual4WheelDrive represents manual4WheelDrive
	TransmissionEnumerationManual4WheelDrive TransmissionEnumeration = "manual4WheelDrive"
)

// ChildSeatEnumeration represents the ChildSeatEnumeration enumeration
// Allowed values for ChildSeat. +v1.2.2
type ChildSeatEnumeration string

const (
	// ChildSeatEnumerationBaby represents baby
	ChildSeatEnumerationBaby ChildSeatEnumeration = "baby"
	// ChildSeatEnumerationSmallChild represents smallChild
	ChildSeatEnumerationSmallChild ChildSeatEnumeration = "smallChild"
	// ChildSeatEnumerationOlderChild represents olderChild
	ChildSeatEnumerationOlderChild ChildSeatEnumeration = "olderChild"
	// ChildSeatEnumerationNone represents none
	ChildSeatEnumerationNone ChildSeatEnumeration = "none"
	// ChildSeatEnumerationOther represents other
	ChildSeatEnumerationOther ChildSeatEnumeration = "other"
)

// VehicleModelProfileRefStructure represents the VehicleModelProfileRefStructure element
// Type for a reference to a VEHICLE MODEL PROFILE.
type VehicleModelProfileRefStructure struct {
	VersionOfObjectRefStructure
}

// CarModelProfileRefStructure represents the CarModelProfileRefStructure element
// Type for a reference to a CAR MODEL PROFILE.
type CarModelProfileRefStructure struct {
	VehicleModelProfileRefStructure
}

// CycleModelProfileRefStructure represents the CycleModelProfileRefStructure element
// Type for a reference to a CYCLE MODEL PROFILE.
type CycleModelProfileRefStructure struct {
	VehicleModelProfileRefStructure
}

// VehicleModelProfileRef represents the VehicleModelProfileRef element
// Reference to a VEHICLE MODEL PROFILE +V1.2.2
type VehicleModelProfileRef struct {
	VehicleModelProfileRefStructure
}

// CarModelProfileRef represents the CarModelProfileRef element
// Reference to a CAR MODEL PROFILE. +V1.2.2
type CarModelProfileRef struct {
	CarModelProfileRefStructure
}

// CycleModelProfileRef represents the CycleModelProfileRef element
// Reference to a CYCLE MODEL PROFILE. +V1.2.2
type CycleModelProfileRef struct {
	CycleModelProfileRefStructure
}

// FleetRefsRelStructure represents the fleetRefs_RelStructure element
// Type for a list of FLEETs.
type FleetRefsRelStructure struct {
	OneToManyRelationshipStructure
	FleetRef []FleetRef `xml:"FleetRef" json:"FleetRef"`
}

// FleetRefStructure represents the FleetRefStructure element
// Type for a reference to a FLEET.
type FleetRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// TypeOfFleetRefStructure represents the TypeOfFleetRefStructure element
// Type for a reference to a TYPE OF FLEET.
type TypeOfFleetRefStructure struct {
	TypeOfValueRefStructure
}

// FleetRef represents the FleetRef element
// Reference to a FLEET. +v1.2.2
type FleetRef struct {
	FleetRefStructure
}

// TypeOfFleetRef represents the TypeOfFleetRef element
// Reference to a TYPE OF FLEET. +v1.2.2
type TypeOfFleetRef struct {
	TypeOfFleetRefStructure
}

// VehicleModelsInFrameRelStructure represents the vehicleModelsInFrame_RelStructure element
// Type for containment in frame of VEHICLE MODELs.
type VehicleModelsInFrameRelStructure struct {
	ContainmentAggregationStructure
	VehicleModel []VehicleModel `xml:"VehicleModel" json:"VehicleModel"`
}

// TransportTypeVersionStructure represents the TransportType_VersionStructure element
// Type for a TRANSPORT TYPE.
type TransportTypeVersionStructure struct {
	DataManagedObjectStructure
	// Name of TRANSPORT TYPE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name of TRANSPORT TYPE.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Description of TRANSPORT TYPE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Euroclass of the vehicle type.
	EuroClass *string `xml:"EuroClass,omitempty" json:"EuroClass,omitempty"`
	// Whether vehicles of the type have a reversing direction.
	ReversingDirection *bool `xml:"ReversingDirection,omitempty" json:"ReversingDirection,omitempty"`
	// Whether vehicles of the type are self-propelled.
	SelfPropelled *bool `xml:"SelfPropelled,omitempty" json:"SelfPropelled,omitempty"`
	// Type of power used +v1.2.2
	PropulsionType *PropulsionTypeEnumeration `xml:"PropulsionType,omitempty" json:"PropulsionType,omitempty"`
	// The type of fuel used by a vehicle of the type. +1.2.2
	FuelType *FuelTypeEnumeration `xml:"FuelType,omitempty" json:"FuelType,omitempty"`
	// The type of fuel used by a vehicle of the type. DEPRECATED NAME v1.2.2
	TypeOfFuel *FuelTypeEnumeration `xml:"TypeOfFuel,omitempty" json:"TypeOfFuel,omitempty"`
	// Maximum range between refuelling. +v1.2.2
	MaximumRange *float64 `xml:"MaximumRange,omitempty" json:"MaximumRange,omitempty"`
	// MODE of Vehicle transport associated with VEHICLE TYPE. +v1.2.2
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	// Total Number of passengers that VEHICLE TYPE can carry.
	PassengerCapacity *PassengerCapacityStructure `xml:"PassengerCapacity,omitempty" json:"PassengerCapacity,omitempty"`
}

// VehicleTypeVersionStructure represents the VehicleType_VersionStructure element
// Type for a VEHICLE TYPE.
type VehicleTypeVersionStructure struct {
	TransportTypeVersionStructure
	// Break down of Capacities by FARE CLASS.
	Capacities *PassengerCapacitiesRelStructure `xml:"capacities,omitempty" json:"capacities,omitempty"`
	// Whether Vehicle is low floor to facilitate access by the mobility impaired.
	LowFloor *bool `xml:"LowFloor,omitempty" json:"LowFloor,omitempty"`
	// Whether vehicle has lift or ramp to facilitate wheelchair access.
	HasLiftOrRamp *bool `xml:"HasLiftOrRamp,omitempty" json:"HasLiftOrRamp,omitempty"`
	// Whether vehicle has hoist for wheelchair access.
	HasHoist *bool `xml:"HasHoist,omitempty" json:"HasHoist,omitempty"`
	// Maximum step height to board. +v1.1
	BoardingHeight *float64 `xml:"BoardingHeight,omitempty" json:"BoardingHeight,omitempty"`
	// Expected maximal gap between VEHICLE and platform. +v1.1
	GapToPlatform *float64 `xml:"GapToPlatform,omitempty" json:"GapToPlatform,omitempty"`
	// The length of a VEHICLE of the type.
	Length *float64 `xml:"Length,omitempty" json:"Length,omitempty"`
	// The width of a VEHICLE of the type. +v1.1
	Width *float64 `xml:"Width,omitempty" json:"Width,omitempty"`
	// The height of a VEHICLE of the type. +v1.1
	Height *float64 `xml:"Height,omitempty" json:"Height,omitempty"`
	// The weight of a VEHICLE of the type. +v1.1
	Weight *float64 `xml:"Weight,omitempty" json:"Weight,omitempty"`
	// The height of the first axle of a VEHICLE of the type.
	FirstAxleHeight *float64 `xml:"FirstAxleHeight,omitempty" json:"FirstAxleHeight,omitempty"`
	// Included in definition of VEHICLE.
	IncludedIn *VehicleTypeRefStructure `xml:"IncludedIn,omitempty" json:"IncludedIn,omitempty"`
	// Classification of type as being of a particular VEHICLE MODEL.
	ClassifiedAsRef *VehicleModelRefStructure `xml:"ClassifiedAsRef,omitempty" json:"ClassifiedAsRef,omitempty"`
	// Facilities of VEHICLE TYPE.
	Facilities *ServiceFacilitySetsRelStructure `xml:"facilities,omitempty" json:"facilities,omitempty"`
	// Capacity that VEHICLE TYPE should meet - indicates minimum number of seats of each type.
	CanCarry *PassengerCarryingRequirementsRelStructure `xml:"canCarry,omitempty" json:"canCarry,omitempty"`
	// Manoeuvring capabilities that VEHICLE TYPE should meet.
	CanManoeuvre *VehicleManoeuvringRequirementsRelStructure `xml:"canManoeuvre,omitempty" json:"canManoeuvre,omitempty"`
	// FACILITIES requirements that VEHICLE TYPE should meet.
	SatisfiesFacilityRequirements *FacilityRequirementsRelStructure `xml:"satisfiesFacilityRequirements,omitempty" json:"satisfiesFacilityRequirements,omitempty"`
}

// SimpleVehicleTypeVersionStructure represents the SimpleVehicleType_VersionStructure element
// Type for a PERSONAL TRANSPORT TYPE.
type SimpleVehicleTypeVersionStructure struct {
	TransportTypeVersionStructure
	// The length of a VEHICLE of the type.
	Length *float64 `xml:"Length,omitempty" json:"Length,omitempty"`
	// The width of a VEHICLE of the type. +v1.1
	Width *float64 `xml:"Width,omitempty" json:"Width,omitempty"`
	// The height of a VEHICLE of the type. +v1.1
	Height *float64 `xml:"Height,omitempty" json:"Height,omitempty"`
	// The weight of a VEHICLE of the type. +v1.1
	Weight *float64 `xml:"Weight,omitempty" json:"Weight,omitempty"`
	// The height of the first axle of a VEHICLE of the type.
	FirstAxleHeight *float64 `xml:"FirstAxleHeight,omitempty" json:"FirstAxleHeight,omitempty"`
	// Licence requirements to use.
	LicenceRequirements *LicenceRequirementsEnumeration `xml:"LicenceRequirements,omitempty" json:"LicenceRequirements,omitempty"`
	// Category of vehicle.
	VehicleCategory *SimpleVehicleCategoryEnumeration `xml:"VehicleCategory,omitempty" json:"VehicleCategory,omitempty"`
	// Minumum age to use TRANSPORT TYPE.
	MinimumAge *int `xml:"MinimumAge,omitempty" json:"MinimumAge,omitempty"`
	// Whether vehicle can be carried easily, e.g. scooter, skateboard, foldable bicycle.
	Portable *bool `xml:"Portable,omitempty" json:"Portable,omitempty"`
	// Types of driver licence that are accepted for simple vehicle type.  +v2.0
	AcceptedDriverPermits *AcceptedDriverPermitsRelStructure `xml:"acceptedDriverPermits,omitempty" json:"acceptedDriverPermits,omitempty"`
}

// AcceptedDriverPermitsRelStructure represents the acceptedDriverPermits_RelStructure element
// Type for a list of ACCEPTED DRIVER PERMITs.
type AcceptedDriverPermitsRelStructure struct {
	ContainmentAggregationStructure
	AcceptedDriverPermit []AcceptedDriverPermit `xml:"AcceptedDriverPermit" json:"AcceptedDriverPermit"`
}

// AcceptedDriverPermitVersionStructure represents the AcceptedDriverPermit_VersionStructure element
// Type for an ACCEPTED DRIVER PERMIT.
type AcceptedDriverPermitVersionStructure struct {
	DataManagedObjectStructure
	// Name of an ACCEPTED DRIVER PERMIT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	TypeOfDriverPermitRef *TypeOfDriverPermitRef `xml:"TypeOfDriverPermitRef,omitempty" json:"TypeOfDriverPermitRef,omitempty"`
}

// VehicleRequirementVersionStructure represents the VehicleRequirement_VersionStructure element
// Type for a VEHICLE REQUIREMENT.
type VehicleRequirementVersionStructure struct {
	DataManagedObjectStructure
	// Name of FACILITY REQUIREMENT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
}

// PassengerCarryingRequirementsRelStructure represents the passengerCarryingRequirements_RelStructure element
// Type for a list of PASSENGER CARRYING Requirements.
type PassengerCarryingRequirementsRelStructure struct {
	ContainmentAggregationStructure
	PassengerCarryingRequirementRef []PassengerCarryingRequirementRef `xml:"PassengerCarryingRequirementRef,omitempty" json:"PassengerCarryingRequirementRef,omitempty"`
	PassengerCarryingRequirement []PassengerCarryingRequirement `xml:"PassengerCarryingRequirement,omitempty" json:"PassengerCarryingRequirement,omitempty"`
}

// PassengerCarryingRequirementVersionStructure represents the PassengerCarryingRequirement_VersionStructure element
// Type for a PASSENGER CARRYING REQUIREMENT.
type PassengerCarryingRequirementVersionStructure struct {
	VehicleRequirementVersionStructure
	PassengerCapacity *PassengerCapacity `xml:"PassengerCapacity,omitempty" json:"PassengerCapacity,omitempty"`
	// Whether Vehicle is low floor to facilitate access by the mobility impaired.
	LowFloor *bool `xml:"LowFloor,omitempty" json:"LowFloor,omitempty"`
	// Whether vehicle has lift or ramp to facilitate wheelchair access.
	HasLiftOrRamp *bool `xml:"HasLiftOrRamp,omitempty" json:"HasLiftOrRamp,omitempty"`
	// Whether vehicle has hoist for wheelchair access.
	HasHoist *bool `xml:"HasHoist,omitempty" json:"HasHoist,omitempty"`
	// Maximum step height to board. +v1.1
	BoardingHeight *float64 `xml:"BoardingHeight,omitempty" json:"BoardingHeight,omitempty"`
	// Expected maximal gap between VEHICLE and platform. +v1.1
	GapToPlatform *float64 `xml:"GapToPlatform,omitempty" json:"GapToPlatform,omitempty"`
}

// PassengerCapacitiesRelStructure represents the passengerCapacities_RelStructure element
// Type for a list of PASSENGER CAPACITY REQUIREMENTs.
type PassengerCapacitiesRelStructure struct {
	OneToManyRelationshipStructure
	PassengerCapacityRef []PassengerCapacityRef `xml:"PassengerCapacityRef,omitempty" json:"PassengerCapacityRef,omitempty"`
	PassengerCapacity []PassengerCapacity `xml:"PassengerCapacity,omitempty" json:"PassengerCapacity,omitempty"`
}

// PassengerCapacityStructure represents the PassengerCapacityStructure element
// Capacity for a VEHICLE TYPE and Class.
type PassengerCapacityStructure struct {
	DataManagedObjectStructure
	// Edit care class for which capacity is specifyed. Default is any, i.e. capacity is for all classes.
	FareClass *FareClassEnumeration `xml:"FareClass,omitempty" json:"FareClass,omitempty"`
	// The total capacity of vehicles of the type. For a requirement this is the minimum needed.
	TotalCapacity *int `xml:"TotalCapacity,omitempty" json:"TotalCapacity,omitempty"`
	// The seating capacity of vehicles of the type. For a requirement this is the minimum needed.
	SeatingCapacity *int `xml:"SeatingCapacity,omitempty" json:"SeatingCapacity,omitempty"`
	// The standing capacity of vehicles of the type. For a requirement this is the minimum needed.
	StandingCapacity *int `xml:"StandingCapacity,omitempty" json:"StandingCapacity,omitempty"`
	// The number of special places on vehicles of the type, e.g. seats for the disabled. For a requirement this is the minimum needed.
	SpecialPlaceCapacity *int `xml:"SpecialPlaceCapacity,omitempty" json:"SpecialPlaceCapacity,omitempty"`
	// The number of push chair places on vehicles of the type. For a requirement this is the minimum needed.
	PushchairCapacity *int `xml:"PushchairCapacity,omitempty" json:"PushchairCapacity,omitempty"`
	// The number of wheelchairs places on vehicles of the type. For a requirement this is the minimum needed.
	WheelchairPlaceCapacity *int `xml:"WheelchairPlaceCapacity,omitempty" json:"WheelchairPlaceCapacity,omitempty"`
}

// PassengerCarryingPassengerCarryingViewStructure represents the PassengerCarryingPassengerCarrying_ViewStructure element
// Type for a PASSENGER CARRYING REQUIREMENT.
type PassengerCarryingPassengerCarryingViewStructure struct {
	DerivedViewStructure
	PassengerCapacity *PassengerCapacity `xml:"PassengerCapacity,omitempty" json:"PassengerCapacity,omitempty"`
	// Whether Vehicle is low floor to facilitate access by the mobility impaired.
	LowFloor *bool `xml:"LowFloor,omitempty" json:"LowFloor,omitempty"`
	// Whether vehicle has lift or ramp to facilitate wheelchair access.
	HasLiftOrRamp *bool `xml:"HasLiftOrRamp,omitempty" json:"HasLiftOrRamp,omitempty"`
	// Whether vehicle has hoist for wheelchair access.
	HasHoist *bool `xml:"HasHoist,omitempty" json:"HasHoist,omitempty"`
	// Maximum step height to board. +v1.1
	BoardingHeight *float64 `xml:"BoardingHeight,omitempty" json:"BoardingHeight,omitempty"`
	// Expected maximal gap between VEHICLE and platform. +v1.1
	GapToPlatform *float64 `xml:"GapToPlatform,omitempty" json:"GapToPlatform,omitempty"`
}

// VehicleManoeuvringRequirementsRelStructure represents the vehicleManoeuvringRequirements_RelStructure element
// Type for a list of PASSENGER CARRYING REQUIREMENTs.
type VehicleManoeuvringRequirementsRelStructure struct {
	ContainmentAggregationStructure
	VehicleManoeuvringRequirementRef []VehicleManoeuvringRequirementRef `xml:"VehicleManoeuvringRequirementRef,omitempty" json:"VehicleManoeuvringRequirementRef,omitempty"`
	// An area within a Site. May be connected to Quays by PATH LINKs.
	VehicleManoeuvringRequirement []VehicleManoeuvringRequirement `xml:"VehicleManoeuvringRequirement,omitempty" json:"VehicleManoeuvringRequirement,omitempty"`
}

// VehicleManoeuvringRequirementVersionStructure represents the VehicleManoeuvringRequirement_VersionStructure element
// Type for a VEHICLE Manoeuvring REQUIREMENT.
type VehicleManoeuvringRequirementVersionStructure struct {
	VehicleRequirementVersionStructure
	// Whether vehicle must be reversible.
	Reversible *bool `xml:"Reversible,omitempty" json:"Reversible,omitempty"`
	// Minimum distance needed to turn vehicle.
	MinimumTurningCircle *float64 `xml:"MinimumTurningCircle,omitempty" json:"MinimumTurningCircle,omitempty"`
	// Minimum distance needed to overtake.
	MinimumOvertakingWidth *float64 `xml:"MinimumOvertakingWidth,omitempty" json:"MinimumOvertakingWidth,omitempty"`
	// Minimum distance needed to accommodate vehicle.
	MinimumLength *float64 `xml:"MinimumLength,omitempty" json:"MinimumLength,omitempty"`
}

// FacilityRequirementsRelStructure represents the facilityRequirements_RelStructure element
// Type for a list of FACILITY REQUIREMENTs.
type FacilityRequirementsRelStructure struct {
	ContainmentAggregationStructure
	FacilityRequirementRef []FacilityRequirementRef `xml:"FacilityRequirementRef,omitempty" json:"FacilityRequirementRef,omitempty"`
	FacilityRequirement []FacilityRequirement `xml:"FacilityRequirement,omitempty" json:"FacilityRequirement,omitempty"`
}

// FacilityRequirementVersionStructure represents the FacilityRequirement_VersionStructure element
// Type for a FACILITY REQUIREMENT.
type FacilityRequirementVersionStructure struct {
	VehicleRequirementVersionStructure
	// Facilities required for VEHICLE.
	FacilitySets *ServiceFacilitySetsRelStructure `xml:"facilitySets,omitempty" json:"facilitySets,omitempty"`
}

// VehiclesRelStructure represents the vehicles_RelStructure element
// Type for a list of VEHICLEs.
type VehiclesRelStructure struct {
	ContainmentAggregationStructure
	VehicleRef []VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	// An area within a Site. May be connected to Quays by PATH LINKs.
	Vehicle []Vehicle `xml:"Vehicle,omitempty" json:"Vehicle,omitempty"`
}

// VehicleVersionStructure represents the Vehicle_VersionStructure element
// Type for a VEHICLE.
type VehicleVersionStructure struct {
	DataManagedObjectStructure
	// Name of VEHICLE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name of VEHICLE.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Description +V1.2.2
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Licence plate of VEHICLE.
	RegistrationNumber *string `xml:"RegistrationNumber,omitempty" json:"RegistrationNumber,omitempty"`
	// Date of registration or commissioning - may be used to determine age of the vehice.
	RegistrationDate *time.Time `xml:"RegistrationDate,omitempty" json:"RegistrationDate,omitempty"`
	// Operational Number of VEHICLE.
	OperationalNumber *string `xml:"OperationalNumber,omitempty" json:"OperationalNumber,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	VehicleModelRef *VehicleModelRef `xml:"VehicleModelRef,omitempty" json:"VehicleModelRef,omitempty"`
	CycleModelProfileRef *CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef *CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
	// ACTUAL EQUIPMENT found in VEHICLE.
	ActualVehicleEquipments *EquipmentsRelStructure `xml:"actualVehicleEquipments,omitempty" json:"actualVehicleEquipments,omitempty"`
}

// VehicleModelVersionStructure represents the VehicleModel_VersionStructure element
// Type for a VEHICLE MODEL.
type VehicleModelVersionStructure struct {
	DataManagedObjectStructure
	// Name of VEHICLE MODEL.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VEHICLE MODEL.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Manufacturer of VEHICLE MODEL.
	Manufacturer *MultilingualString `xml:"Manufacturer,omitempty" json:"Manufacturer,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	// Equipment profiles assoicated with model +v1.2.2
	EquipmentProfiles *VehicleEquipmentProfileRefsRelStructure `xml:"equipmentProfiles,omitempty" json:"equipmentProfiles,omitempty"`
	CycleModelProfileRef *CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef *CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
}

// VehicleEquipmentProfileVersionStructure represents the VehicleEquipmentProfile_VersionStructure element
// Type for a VEHICLE EQUIPMENT PROFILE.
type VehicleEquipmentProfileVersionStructure struct {
	DataManagedObjectStructure
	// Name of VEHICLE EQUIPMENT PROFILE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VEHICLE EQUIPMENT PROFILE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	RetailDeviceRef *RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	ActivatedEquipmentRef *ActivatedEquipmentRef `xml:"ActivatedEquipmentRef,omitempty" json:"ActivatedEquipmentRef,omitempty"`
	BatteryEquipmentRef *BatteryEquipmentRef `xml:"BatteryEquipmentRef,omitempty" json:"BatteryEquipmentRef,omitempty"`
	RefuellingEquipmentRef *RefuellingEquipmentRef `xml:"RefuellingEquipmentRef,omitempty" json:"RefuellingEquipmentRef,omitempty"`
	VehicleChargingEquipmentRef *VehicleChargingEquipmentRef `xml:"VehicleChargingEquipmentRef,omitempty" json:"VehicleChargingEquipmentRef,omitempty"`
	AssistanceBookingServiceRef *AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef *CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef *RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef *MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef *HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef *CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef *MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef *LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef *LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef *LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef *ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef *CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef *AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef *TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef *LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	VehicleReleaseEquipmentRef *VehicleReleaseEquipmentRef `xml:"VehicleReleaseEquipmentRef,omitempty" json:"VehicleReleaseEquipmentRef,omitempty"`
	TicketValidatorEquipmentRef *TicketValidatorEquipmentRef `xml:"TicketValidatorEquipmentRef,omitempty" json:"TicketValidatorEquipmentRef,omitempty"`
	TicketingEquipmentRef *TicketingEquipmentRef `xml:"TicketingEquipmentRef,omitempty" json:"TicketingEquipmentRef,omitempty"`
	PassengerInformationEquipmentRef *PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef *CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef *TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef *SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef *ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef *LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef *WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef *WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef *SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef *PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef *RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef *StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef *QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef *TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef *EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef *LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef *LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef *CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef *RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef *EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef *HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef *GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef *PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef *SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef *RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef *PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef *HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef *PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef *SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef *WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef *AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef *VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef *PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	EquipmentRef *EquipmentRef `xml:"EquipmentRef,omitempty" json:"EquipmentRef,omitempty"`
	// Number of units of EQUIPMENT.
	Units *int `xml:"Units,omitempty" json:"Units,omitempty"`
	// Manufacturer VEHICLE MODEL.
	Manufacturer *MultilingualString `xml:"Manufacturer,omitempty" json:"Manufacturer,omitempty"`
	TypeOfEquipmentRef *TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	PurposeOfEquipmentProfileRef *PurposeOfEquipmentProfileRef `xml:"PurposeOfEquipmentProfileRef,omitempty" json:"PurposeOfEquipmentProfileRef,omitempty"`
	// Members of Vehicle Profile.  +v2.0
	VehicleEquipmentProfileMembers *VehicleEquipmentProfileMembersRelStructure `xml:"vehicleEquipmentProfileMembers,omitempty" json:"vehicleEquipmentProfileMembers,omitempty"`
}

// VehicleEquipmentProfileMembersRelStructure represents the vehicleEquipmentProfileMembers_RelStructure element
// Type for a list of VEHICLE EQUIPMENT PROFILE MEMBERs.
type VehicleEquipmentProfileMembersRelStructure struct {
	StrictContainmentAggregationStructure
	VehicleEquipmentProfileMember []VehicleEquipmentProfileMember `xml:"VehicleEquipmentProfileMember" json:"VehicleEquipmentProfileMember"`
}

// VehicleEquipmentProfileMemberVersionStructure represents the VehicleEquipmentProfileMember_VersionStructure element
// Type for a VEHICLE EQUIPMENT PROFILE MEMBER.
type VehicleEquipmentProfileMemberVersionStructure struct {
	VersionedChildStructure
	// Name of VEHICLE EQUIPMENT PROFILE MEMBER.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VEHICLE EQUIPMENT PROFILE MEMBER.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Number of units of EQUIPMENT.
	MinimumUnits *int `xml:"MinimumUnits,omitempty" json:"MinimumUnits,omitempty"`
	TypeOfEquipmentRef *TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
}

// PurposeOfEquipmentProfileValueStructure represents the PurposeOfEquipmentProfile_ValueStructure element
// Type for a PURPOSE OF EQUIPMENT.
type PurposeOfEquipmentProfileValueStructure struct {
	TypeOfValueVersionStructure
}

// TypeOfDriverPermitValueStructure represents the TypeOfDriverPermit_ValueStructure element
// Type for a TYPE OF DRIVER PERMIT.
type TypeOfDriverPermitValueStructure struct {
	TypeOfValueVersionStructure
}

// TransportType represents the TransportType element
// A classification of any type of VEHICLE according to its properties.
type TransportType struct {
	TransportTypeVersionStructure
}

// VehicleType represents the VehicleType element
// A classification of public transport vehicles according to the vehicle scheduling requirements in mode and capacity (e.g. standard bus, double-deck, ...).
type VehicleType struct {
	VehicleTypeVersionStructure
}

// SimpleVehicleType represents the SimpleVehicleType element
// A classification of personal use vehicles according to their properties, +v1.2.2
type SimpleVehicleType struct {
	SimpleVehicleTypeVersionStructure
}

// AcceptedDriverPermit represents the AcceptedDriverPermit element
// Accepted TYPE OF DRIVER PERMIT for a given SIMPLE VEHICLE TYPE. +V2.0
type AcceptedDriverPermit struct {
	AcceptedDriverPermitVersionStructure
}

// VehicleRequirement represents the VehicleRequirement element
// Requirements for service.
type VehicleRequirement struct {
	VehicleRequirementVersionStructure
}

// PassengerCarryingRequirement represents the PassengerCarryingRequirement element
// Requirements for carrying passengers on a service.
type PassengerCarryingRequirement struct {
	PassengerCarryingRequirementVersionStructure
}

// PassengerCapacity represents the PassengerCapacity element
// Capacity for a VEHICLE TYPE and Class.
type PassengerCapacity struct {
	PassengerCapacityStructure
	// Identifier of PASSENGER CAPACITY.
	Id string `xml:"id,attr" json:"id"`
}

// PassengerCarryingRequirementsView represents the PassengerCarryingRequirementsView element
// Requirements for carrying passengers.
type PassengerCarryingRequirementsView struct {
	PassengerCarryingRequirementVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// VehicleManoeuvringRequirement represents the VehicleManoeuvringRequirement element
// Requirements for carrying passengers.
type VehicleManoeuvringRequirement struct {
	VehicleManoeuvringRequirementVersionStructure
}

// FacilityRequirement represents the FacilityRequirement element
// Requirements for carrying passengers.
type FacilityRequirement struct {
	FacilityRequirementVersionStructure
}

// Vehicle represents the Vehicle element
// A public transport vehicle used for carrying passengers.
type Vehicle struct {
	VehicleVersionStructure
}

// VehicleModel represents the VehicleModel element
// A classification of public transport vehicles according to the vehicle scheduling requirements in MODE and capacity (e.g. standard bus, double-deck, ...).
type VehicleModel struct {
	VehicleModelVersionStructure
}

// VehicleEquipmentProfile represents the VehicleEquipmentProfile element
// Each instantiation of this ENTITY gives the number of items of one TYPE OF EQUIPMENT a VEHICLE MODEL should contain for a given PURPOSE OF EQUIPMENT PROFILE. The set of instantiations for one VEHICLE MODEL and one purpose gives one complete 'profile'.
type VehicleEquipmentProfile struct {
	VehicleEquipmentProfileVersionStructure
}

// VehicleEquipmentProfileMember represents the VehicleEquipmentProfileMember element
// A element within a VEHICLE EQUIPMENT PROFILE specifying the number of units of a given a TYPE OF EQUIPMENT.
type VehicleEquipmentProfileMember struct {
	VehicleEquipmentProfileMemberVersionStructure
}

// PurposeOfEquipmentProfile represents the PurposeOfEquipmentProfile element
// A functional purpose which requires a certain set of EQUIPMENT of different types put together in a VEHICLE EQUIPMENT PROFILE or STOP POINT EQUIPMENT PROFILE.
type PurposeOfEquipmentProfile struct {
	PurposeOfEquipmentProfileValueStructure
}

// TypeOfDriverPermit represents the TypeOfDriverPermit element
// A type of driving license (e.g. https://en.wikipedia.org/wiki/European_driving_licence ). +v2.0
type TypeOfDriverPermit struct {
	TypeOfDriverPermitValueStructure
}

// ChargingEquipmenProfilesInFrameRelStructure represents the chargingEquipmenProfilesInFrame_RelStructure element
// Type for containment in frame of CHARGING EQUIPMENT PROFILEs.
type ChargingEquipmenProfilesInFrameRelStructure struct {
	ContainmentAggregationStructure
	// Charging equipment profile for VEHICLE.
	ChargingEquipmentProfile []ChargingEquipmentProfile `xml:"ChargingEquipmentProfile" json:"ChargingEquipmentProfile"`
}

// ChargingEquipmentProfileVersionStructure represents the ChargingEquipmentProfile_VersionStructure element
// Type for a CHARGING EQUIPMENT PROFILE.
type ChargingEquipmentProfileVersionStructure struct {
	VehicleEquipmentProfileVersionStructure
	// Type of coupling. See allowed values.
	CouplingType *CouplingTypeEnumeration `xml:"CouplingType,omitempty" json:"CouplingType,omitempty"`
	// Type of Plug. See allowed values.
	PlugType *PlugTypeEnumeration `xml:"PlugType,omitempty" json:"PlugType,omitempty"`
	TypeOfPlugRef *TypeOfPlugRef `xml:"TypeOfPlugRef,omitempty" json:"TypeOfPlugRef,omitempty"`
	// Type of current. See allowed values.
	CurrentType *CurrentTypeEnumeration `xml:"CurrentType,omitempty" json:"CurrentType,omitempty"`
	// CHarging voltage in Volts.
	ChargingVoltage *float64 `xml:"ChargingVoltage,omitempty" json:"ChargingVoltage,omitempty"`
	// Maximum charging power in Watts, available, determining how long charging willtake
	MaximumChargingPower *float64 `xml:"MaximumChargingPower,omitempty" json:"MaximumChargingPower,omitempty"`
	// Normal period need to set up charging.
	PreparationDuration *string `xml:"PreparationDuration,omitempty" json:"PreparationDuration,omitempty"`
	// Normal time to decouple after charging.
	FinalisationDuration *string `xml:"FinalisationDuration,omitempty" json:"FinalisationDuration,omitempty"`
}

// ChargingEquipmentProfile represents the ChargingEquipmentProfile element
// Specialisation of VEHICLE EQUIPMENT PROFILE describing vehicle charging features.
type ChargingEquipmentProfile struct {
	ChargingEquipmentProfileVersionStructure
}

// ModesOfOperationRelStructure represents the modesOfOperationRelStructure element
// SUBMODEs  associated with entity.
type ModesOfOperationRelStructure struct {
	ContainmentAggregationStructure
	PersonalModeOfOperation []PersonalModeOfOperation `xml:"PersonalModeOfOperation,omitempty" json:"PersonalModeOfOperation,omitempty"`
	AlternativeModeOfOperation []AlternativeModeOfOperation `xml:"AlternativeModeOfOperation,omitempty" json:"AlternativeModeOfOperation,omitempty"`
	VehiclePooling []VehiclePooling `xml:"VehiclePooling,omitempty" json:"VehiclePooling,omitempty"`
	VehicleSharing []VehicleSharing `xml:"VehicleSharing,omitempty" json:"VehicleSharing,omitempty"`
	VehicleRental []VehicleRental `xml:"VehicleRental,omitempty" json:"VehicleRental,omitempty"`
	FlexibleOperation []FlexibleOperation `xml:"FlexibleOperation,omitempty" json:"FlexibleOperation,omitempty"`
	ScheduledOperation []ScheduledOperation `xml:"ScheduledOperation,omitempty" json:"ScheduledOperation,omitempty"`
}

// ModeOfOperationValueStructure represents the ModeOfOperation_ValueStructure element
// Type for a MODE OF OPERATION.
type ModeOfOperationValueStructure struct {
	TypeOfValueVersionStructure
	TypeOfModeOfOperationRef *TypeOfModeOfOperationRef `xml:"TypeOfModeOfOperationRef,omitempty" json:"TypeOfModeOfOperationRef,omitempty"`
	// SUBMODEs associated with MODE OF OPERATION.
	Submodes *SubmodesRelStructure `xml:"submodes,omitempty" json:"submodes,omitempty"`
}

// ConventionalModeOfOperationValueStructure represents the ConventionalModeOfOperation_ValueStructure element
// Type for a CONVENTIONAL MODE OF OPERATION.
type ConventionalModeOfOperationValueStructure struct {
	ModeOfOperationValueStructure
}

// ScheduledModeOfOperationValueStructure represents the ScheduledModeOfOperation_ValueStructure element
// Type for a SCHEDULED  MODE OF OPERATION.
type ScheduledModeOfOperationValueStructure struct {
	ConventionalModeOfOperationValueStructure
	// Allowed values for SCHEDULED  MODE OF OPERATION.
	ScheduledOperationType *ScheduledOperationTypeEnumeration `xml:"ScheduledOperationType,omitempty" json:"ScheduledOperationType,omitempty"`
}

// FlexibleModeOfOperationValueStructure represents the FlexibleModeOfOperation_ValueStructure element
// Type for a FLEXIBLE MODE OF OPERATION.
type FlexibleModeOfOperationValueStructure struct {
	ConventionalModeOfOperationValueStructure
	// Allowed values for FLEXIBLE  MODE OF OPERATION.
	FlexibleOperationType *FlexibleOperationTypeEnumeration `xml:"FlexibleOperationType,omitempty" json:"FlexibleOperationType,omitempty"`
}

// AlternativeModeOfOperationValueStructure represents the AlternativeModeOfOperation_ValueStructure element
// Type for a ALTERNATIVE MODE OF OPERATION.
type AlternativeModeOfOperationValueStructure struct {
	ModeOfOperationValueStructure
}

// VehicleRentalModeOfOperationValueStructure represents the VehicleRentalModeOfOperation_ValueStructure element
// Type for a VEHICLE RENTAL MODE OF OPERATION.
type VehicleRentalModeOfOperationValueStructure struct {
	AlternativeModeOfOperationValueStructure
	// Allowed values for VEHICLE RENTAL MODE.OF OPERATION.
	VehicleRentalType *VehicleRentalTypeEnumeration `xml:"VehicleRentalType,omitempty" json:"VehicleRentalType,omitempty"`
}

// VehicleSharingModeOfOperationValueStructure represents the VehicleSharingModeOfOperation_ValueStructure element
// Type for a VEHICLE SHARING MODE OF OPERATION.
type VehicleSharingModeOfOperationValueStructure struct {
	AlternativeModeOfOperationValueStructure
	// Allowed values for VEHICLE SHARING MODE.OF OPERATION.
	VehicleSharingType *VehicleSharingTypeEnumeration `xml:"VehicleSharingType,omitempty" json:"VehicleSharingType,omitempty"`
}

// VehiclePoolingModeOfOperationValueStructure represents the VehiclePoolingModeOfOperation_ValueStructure element
// Type for a VEHICLE POOLING MODE OF OPERATION.
type VehiclePoolingModeOfOperationValueStructure struct {
	AlternativeModeOfOperationValueStructure
	// Allowed values for VEHICLE POOLING MODE.OF OPERATION.
	VehiclePoolingType *VehiclePoolingTypeEnumeration `xml:"VehiclePoolingType,omitempty" json:"VehiclePoolingType,omitempty"`
}

// PersonalModeOfOperationValueStructure represents the PersonalModeOfOperation_ValueStructure element
// Type for a PERSONAL MODE OF OPERATION.
type PersonalModeOfOperationValueStructure struct {
	ModeOfOperationValueStructure
	// Allowed values for PERSONAL MODE OF OPERATION.
	PersonalOperationType *PersonalOperationTypeEnumeration `xml:"PersonalOperationType,omitempty" json:"PersonalOperationType,omitempty"`
}

// TypeOfModeOfOperationValueStructure represents the TypeOfModeOfOperation_ValueStructure element
// Type for a TYPE OF MODE OF OPERATION.
type TypeOfModeOfOperationValueStructure struct {
	TypeOfEntityVersionStructure
}

// ScheduledOperation represents the ScheduledOperation element
// The operation of a transportation using any kind of vehicle with a predefined time table. +v1.2.2
type ScheduledOperation struct {
	ScheduledModeOfOperationValueStructure
}

// FlexibleOperation represents the FlexibleOperation element
// Passenger transport operation linked to a fixed network/schedule but offering flexibility, in order for instance, to optimise the service or to satisfy passenger demand. +v1.2.2
type FlexibleOperation struct {
	FlexibleModeOfOperationValueStructure
}

// AlternativeModeOfOperation represents the AlternativeModeOfOperation element
// Any publicly advertised mode of operation different from the CONVENTIONAL MODE OF OPERATION, for example: VEHICLE SHARING, VEHICLE RENTAL, VEHICLE POOLING. +v1.2.2
type AlternativeModeOfOperation struct {
	AlternativeModeOfOperationValueStructure
}

// VehicleRental represents the VehicleRental element
// An ALTERNATIVE MODE OF OPERATION of a vehicle, part of a FLEET (in general privately owned), available for use for a certain period of time and fee, with the constraint to bring it back at specified agencies. +v1.2.2
type VehicleRental struct {
	VehicleRentalModeOfOperationValueStructure
}

// VehicleSharing represents the VehicleSharing element
// Short term VEHICLE RENTAL where the vehicle can be taken from and parked at different places in the urban area, possibly without the constraint to bring back the vehicle to a specific location. +v1.2.2
type VehicleSharing struct {
	VehicleSharingModeOfOperationValueStructure
}

// VehiclePooling represents the VehiclePooling element
// An ALTERNATIVE MODE OF OPERATION of a privately-owned vehicle consisting in sharing the vehicle for a trip between the driver who is at the same time performing a trip and at least another traveller. +v1.2.2
type VehiclePooling struct {
	VehiclePoolingModeOfOperationValueStructure
}

// PersonalModeOfOperation represents the PersonalModeOfOperation element
// A non-advertised mode of operation of vehicles by persons using their own vehicle. +v1.2.2
type PersonalModeOfOperation struct {
	PersonalModeOfOperationValueStructure
}

// TypeOfModeOfOperation represents the TypeOfModeOfOperation element
// A classification for a MODE OF OPERATION. +v1.2.2
type TypeOfModeOfOperation struct {
	TypeOfModeOfOperationValueStructure
}

// ServicedOrganisationTypeEnumeration represents the ServicedOrganisationTypeEnumeration enumeration
// Allowed values for SERVICED ORGANISATION type.
type ServicedOrganisationTypeEnumeration string

const (
	// ServicedOrganisationTypeEnumerationSchool represents school
	ServicedOrganisationTypeEnumerationSchool ServicedOrganisationTypeEnumeration = "school"
	// ServicedOrganisationTypeEnumerationCollege represents college
	ServicedOrganisationTypeEnumerationCollege ServicedOrganisationTypeEnumeration = "college"
	// ServicedOrganisationTypeEnumerationUniversity represents university
	ServicedOrganisationTypeEnumerationUniversity ServicedOrganisationTypeEnumeration = "university"
	// ServicedOrganisationTypeEnumerationMilitaryBase represents militaryBase
	ServicedOrganisationTypeEnumerationMilitaryBase ServicedOrganisationTypeEnumeration = "militaryBase"
	// ServicedOrganisationTypeEnumerationWorks represents works
	ServicedOrganisationTypeEnumerationWorks ServicedOrganisationTypeEnumeration = "works"
	// ServicedOrganisationTypeEnumerationRetaiilCentre represents retaiilCentre
	ServicedOrganisationTypeEnumerationRetaiilCentre ServicedOrganisationTypeEnumeration = "retaiilCentre"
	// ServicedOrganisationTypeEnumerationHospital represents hospital
	ServicedOrganisationTypeEnumerationHospital ServicedOrganisationTypeEnumeration = "hospital"
	// ServicedOrganisationTypeEnumerationGovernmentOffice represents governmentOffice
	ServicedOrganisationTypeEnumerationGovernmentOffice ServicedOrganisationTypeEnumeration = "governmentOffice"
	// ServicedOrganisationTypeEnumerationOther represents other
	ServicedOrganisationTypeEnumerationOther ServicedOrganisationTypeEnumeration = "other"
)

// OtherOrganisationRefStructure represents the OtherOrganisationRefStructure element
// Type for a reference to an OTHER ORGANISATION.
type OtherOrganisationRefStructure struct {
	OrganisationRefStructure
}

// TravelAgentRefStructure represents the TravelAgentRefStructure element
// Type for a reference to a TRAVEL AGENT.
type TravelAgentRefStructure struct {
	OtherOrganisationRefStructure
}

// ServicedOrganisationRefStructure represents the ServicedOrganisationRefStructure element
// Type for a reference to a SERVICED ORGANISATION.
type ServicedOrganisationRefStructure struct {
	OtherOrganisationRefStructure
}

// ManagementAgentRefStructure represents the ManagementAgentRefStructure element
// Type for a reference to a MANAGEMENT AGENT.
type ManagementAgentRefStructure struct {
	OtherOrganisationRefStructure
}

// GeneralOrganisationRefStructure represents the GeneralOrganisationRefStructure element
// Type for a reference to a GENERAL ORGANISATION.
type GeneralOrganisationRefStructure struct {
	OtherOrganisationRefStructure
}

// OtherOrganisationRef represents the OtherOrganisationRef element
// Reference to an OTHER ORGANISATION.
type OtherOrganisationRef struct {
	OtherOrganisationRefStructure
}

// TravelAgentRef represents the TravelAgentRef element
// Reference to a TRAVEL AGENT.
type TravelAgentRef struct {
	TravelAgentRefStructure
}

// ServicedOrganisationRef represents the ServicedOrganisationRef element
// Reference to a SERVICED ORGANISATION.
type ServicedOrganisationRef struct {
	ServicedOrganisationRefStructure
}

// ManagementAgentRef represents the ManagementAgentRef element
// Reference to a MANAGEMENT AGENT.
type ManagementAgentRef struct {
	ManagementAgentRefStructure
}

// GeneralOrganisationRef represents the GeneralOrganisationRef element
// Reference to a GENERAL ORGANISATION.
type GeneralOrganisationRef struct {
	GeneralOrganisationRefStructure
}

// OtherOrganisationVersionStructure represents the OtherOrganisation_VersionStructure element
// Type for an OTHER ORGANISATION.
type OtherOrganisationVersionStructure struct {
	OrganisationVersionStructure
	// Address of ORGANISATION.
	Address *PostalAddressVersionStructure `xml:"Address,omitempty" json:"Address,omitempty"`
}

// TravelAgentVersionStructure represents the TravelAgent_VersionStructure element
// Type for an OTHER ORGANISATION.
type TravelAgentVersionStructure struct {
	OtherOrganisationVersionStructure
}

// ManagementAgentVersionStructure represents the ManagementAgent_VersionStructure element
// Type for an OTHER ORGANISATION.
type ManagementAgentVersionStructure struct {
	OtherOrganisationVersionStructure
}

// GeneralOrganisationVersionStructure represents the GeneralOrganisation_VersionStructure element
// Type for an GENERAL ORGANISATION.
type GeneralOrganisationVersionStructure struct {
	OtherOrganisationVersionStructure
}

// ServicedOrganisationVersionStructure represents the ServicedOrganisation_VersionStructure element
// Type for an OTHER ORGANISATION.
type ServicedOrganisationVersionStructure struct {
	OtherOrganisationVersionStructure
	ServiceCalendarRef *ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	// Type of serviced ORGANISATION.
	ServicedOrganisationType *ServicedOrganisationTypeEnumeration `xml:"ServicedOrganisationType,omitempty" json:"ServicedOrganisationType,omitempty"`
}

// OrganisationDayTypeVersionStructure represents the OrganisationDayType_VersionStructure element
// Type for an ORGANISATION. DAY TYPE.
type OrganisationDayTypeVersionStructure struct {
	DayTypeVersionStructure
	IsServiceDay *bool `xml:"IsServiceDay,omitempty" json:"IsServiceDay,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
}

// OtherOrganisation represents the OtherOrganisation element
// Generic ORGANISATION being neither an AUTHORITY, neither a public transport OPERATOR (TRAVEL AGENT, MANAGEMENT AGENT, etc.).
type OtherOrganisation struct {
	OtherOrganisationVersionStructure
}

// TravelAgent represents the TravelAgent element
// A travel agent who can retail travel products.
type TravelAgent struct {
	TravelAgentVersionStructure
}

// ManagementAgent represents the ManagementAgent element
// ORGANISATION that manages data or a SITE or FACILITY.
type ManagementAgent struct {
	ManagementAgentVersionStructure
}

// GeneralOrganisation represents the GeneralOrganisation element
// Any type of GENERAL ORGANISATION.
type GeneralOrganisation struct {
	GeneralOrganisationVersionStructure
}

// ServicedOrganisation represents the ServicedOrganisation element
// ORGANISATION for which Service is provided, e.g. school college.
type ServicedOrganisation struct {
	ServicedOrganisationVersionStructure
}

// OrganisationDayType represents the OrganisationDayType element
// DAY TYPE defined as being available on days when ORGANISATION is open and requires service.
type OrganisationDayType struct {
	OrganisationDayTypeVersionStructure
}

// ModalLinkRefByValueStructure represents the ModalLinkRefByValueStructure element
// Type for a reference to a LINK.
type ModalLinkRefByValueStructure struct {
	LinkRefByValueStructure
	VehicleMode *VehicleMode `xml:"VehicleMode,omitempty" json:"VehicleMode,omitempty"`
}

// ModalLinkRefByValue2Structure represents the ModalLinkRefByValue2Structure element
// Type for a reference to a LINK.
type ModalLinkRefByValue2Structure struct {
	// Start POINT of LINK.
	FromPointRef PointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// End POINT of LINK.
	ToPointRef PointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
	TypeOfLinkRef *TypeOfLinkRef `xml:"TypeOfLinkRef,omitempty" json:"TypeOfLinkRef,omitempty"`
	VehicleMode *VehicleMode `xml:"VehicleMode,omitempty" json:"VehicleMode,omitempty"`
	// Type of LINK.
	NameOfClass *string `xml:"nameOfClass,attr,omitempty" json:"nameOfClass,omitempty"`
	// Date reference was first created.
	Created *time.Time `xml:"created,attr,omitempty" json:"created,omitempty"`
	// Date reference was last changed.
	Changed *time.Time `xml:"changed,attr,omitempty" json:"changed,omitempty"`
	// Version number of referenced entity.
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
}

// ModalLinkRefByValue represents the ModalLinkRefByValue element
// Reference to a LINK using its end values.
type ModalLinkRefByValue struct {
	ModalLinkRefByValueStructure
}

// SchematicMapRefStructure represents the SchematicMapRefStructure element
// Type for a reference to a SCHEMATIC MAP.
type SchematicMapRefStructure struct {
	VersionOfObjectRefStructure
}

// SchematicMapMemberRefStructure represents the SchematicMapMemberRefStructure element
// Type for a reference a SCHEMATIC MAP MEMBER.
type SchematicMapMemberRefStructure struct {
	VersionOfObjectRefStructure
}

// SchematicMapRef represents the SchematicMapRef element
// Reference to a SCHEMATIC MAP.
type SchematicMapRef struct {
	SchematicMapRefStructure
}

// SchematicMapMemberRef represents the SchematicMapMemberRef element
// Reference to a SCHEMATIC MAP MEMBER.
type SchematicMapMemberRef struct {
	SchematicMapMemberRefStructure
}

// SchematicMapsInFrameRelStructure represents the schematicMapsInFrame_RelStructure element
// Type for containment in frame of T SCHEMATIC MAPs.
type SchematicMapsInFrameRelStructure struct {
	ContainmentAggregationStructure
	SchematicMap []SchematicMap `xml:"SchematicMap" json:"SchematicMap"`
}

// SchematicMapVersionStructure represents the SchematicMap_VersionStructure element
// Type for a SCHEMATIC MAP.
type SchematicMapVersionStructure struct {
	DataManagedObjectStructure
	// Name of SCHEMATIC MAP.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Short Name.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// image for map.
	ImageUri *string `xml:"ImageUri,omitempty" json:"ImageUri,omitempty"`
	// Parent Entity for map that is depicted by it , e.g. a Station, Site,o, Line or Line group.
	DepictedObjectRef *VersionOfObjectRefStructure `xml:"DepictedObjectRef,omitempty" json:"DepictedObjectRef,omitempty"`
	// Elements found in SCHEMATIC MAP.
	Members *SchematicMapMembersRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// SchematicMapMembersRelStructure represents the schematicMapMembers_RelStructure element
// Type for a list of SCHEMATIC MAP.
type SchematicMapMembersRelStructure struct {
	StrictContainmentAggregationStructure
	// An element linked to a SCHEMATIC MAP MEMBER.
	SchematicMapMember []SchematicMapMemberVersionedChildStructure `xml:"SchematicMapMember" json:"SchematicMapMember"`
}

// SchematicMapMemberVersionedChildStructure represents the SchematicMapMember_VersionedChildStructure element
// Type for a SCHEMATIC MAP MEMBER.
type SchematicMapMemberVersionedChildStructure struct {
	VersionedChildStructure
	// Name of Element.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	TripLegRef *TripLegRef `xml:"TripLegRef,omitempty" json:"TripLegRef,omitempty"`
	IndividualPassengerInfoRef *IndividualPassengerInfoRef `xml:"IndividualPassengerInfoRef,omitempty" json:"IndividualPassengerInfoRef,omitempty"`
	VehiclePoolingDriverInfoRef *VehiclePoolingDriverInfoRef `xml:"VehiclePoolingDriverInfoRef,omitempty" json:"VehiclePoolingDriverInfoRef,omitempty"`
	IndividualTravellerRef *IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	ServiceAccessCodeRef *ServiceAccessCodeRef `xml:"ServiceAccessCodeRef,omitempty" json:"ServiceAccessCodeRef,omitempty"`
	TravelDocumentRef *TravelDocumentRef `xml:"TravelDocumentRef,omitempty" json:"TravelDocumentRef,omitempty"`
	RepeatedTripFareRequestRef *RepeatedTripFareRequestRef `xml:"RepeatedTripFareRequestRef,omitempty" json:"RepeatedTripFareRequestRef,omitempty"`
	SingleTripFareRequestRef *SingleTripFareRequestRef `xml:"SingleTripFareRequestRef,omitempty" json:"SingleTripFareRequestRef,omitempty"`
	FareRequestRef *FareRequestRef `xml:"FareRequestRef,omitempty" json:"FareRequestRef,omitempty"`
	StopFinderRequestRef *StopFinderRequestRef `xml:"StopFinderRequestRef,omitempty" json:"StopFinderRequestRef,omitempty"`
	StopEventRequestRef *StopEventRequestRef `xml:"StopEventRequestRef,omitempty" json:"StopEventRequestRef,omitempty"`
	ScheduleRequestRef *ScheduleRequestRef `xml:"ScheduleRequestRef,omitempty" json:"ScheduleRequestRef,omitempty"`
	TripPlanRequestRef *TripPlanRequestRef `xml:"TripPlanRequestRef,omitempty" json:"TripPlanRequestRef,omitempty"`
	CustomerPaymentMeansRef *CustomerPaymentMeansRef `xml:"CustomerPaymentMeansRef,omitempty" json:"CustomerPaymentMeansRef,omitempty"`
	MediumApplicationInstanceRef *MediumApplicationInstanceRef `xml:"MediumApplicationInstanceRef,omitempty" json:"MediumApplicationInstanceRef,omitempty"`
	MobileDeviceRef *MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef *EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef *SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	ResidentialQualificationEligibilityRef *ResidentialQualificationEligibilityRef `xml:"ResidentialQualificationEligibilityRef,omitempty" json:"ResidentialQualificationEligibilityRef,omitempty"`
	CommercialProfileEligibilityRef *CommercialProfileEligibilityRef `xml:"CommercialProfileEligibilityRef,omitempty" json:"CommercialProfileEligibilityRef,omitempty"`
	UserProfileEligibilityRef *UserProfileEligibilityRef `xml:"UserProfileEligibilityRef,omitempty" json:"UserProfileEligibilityRef,omitempty"`
	CustomerAccountRef *CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	FareContractRef *FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	VehicleTypeZoneRestrictionRef *VehicleTypeZoneRestrictionRef `xml:"VehicleTypeZoneRestrictionRef,omitempty" json:"VehicleTypeZoneRestrictionRef,omitempty"`
	StartTimeAtStopPointRef *StartTimeAtStopPointRef `xml:"StartTimeAtStopPointRef,omitempty" json:"StartTimeAtStopPointRef,omitempty"`
	ResidentialQualificationRef *ResidentialQualificationRef `xml:"ResidentialQualificationRef,omitempty" json:"ResidentialQualificationRef,omitempty"`
	TypeOfConcessionRef *TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	TypeOfUsageParameterRef *TypeOfUsageParameterRef `xml:"TypeOfUsageParameterRef,omitempty" json:"TypeOfUsageParameterRef,omitempty"`
	TariffObjectRef *TariffObjectRef `xml:"TariffObjectRef,omitempty" json:"TariffObjectRef,omitempty"`
	ParkingTariffRef *ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef *TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	TypeOfFareTableRef *TypeOfFareTableRef `xml:"TypeOfFareTableRef,omitempty" json:"TypeOfFareTableRef,omitempty"`
	FareTableRowRef *FareTableRowRef `xml:"FareTableRowRef,omitempty" json:"FareTableRowRef,omitempty"`
	FareTableColumnRef *FareTableColumnRef `xml:"FareTableColumnRef,omitempty" json:"FareTableColumnRef,omitempty"`
	TimeUnitRef *TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	GeographicalUnitRef *GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	ControllableElementInSequenceRef *ControllableElementInSequenceRef `xml:"ControllableElementInSequenceRef,omitempty" json:"ControllableElementInSequenceRef,omitempty"`
	FareStructureElementInSequenceRef *FareStructureElementInSequenceRef `xml:"FareStructureElementInSequenceRef,omitempty" json:"FareStructureElementInSequenceRef,omitempty"`
	AccessRightInProductRef *AccessRightInProductRef `xml:"AccessRightInProductRef,omitempty" json:"AccessRightInProductRef,omitempty"`
	CellRef *CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	CustomerPurchasePackagePriceRef *CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef *ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef *TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef *TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef *QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef *ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef *ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef *GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef *GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef *UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef *SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef *SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef *DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef *FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef *FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef *CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef *FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef *FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CustomerPurchasePackageElementRef *CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
	CustomerPurchasePackageRef *CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	ControllableElementRef *ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	ValidableElementRef *ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	AdditionalDriverOptionRef *AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef *RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef *RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef *SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef *SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef *MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef *InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef *FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef *SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef *UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef *StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef *RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef *RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef *LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef *EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef *EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef *EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef *GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef *CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef *VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef *CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef *UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef *ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef *SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef *PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef *ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef *TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef *ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef *RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef *ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef *ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef *CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef *ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef *BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef *PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
	SeriesConstraintRef *SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	SalesOfferPackageElementRef *SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	DistanceMatrixElementInverseRef *DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
	DistanceMatrixElementRef *DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	FareStructureElementRef *FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	FulfilmentMethodRef *FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	CappingRuleRef *CappingRuleRef `xml:"CappingRuleRef,omitempty" json:"CappingRuleRef,omitempty"`
	EntitlementProductRef *EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef *ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	TimeIntervalRef *TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	GeographicalIntervalRef *GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	ParkingChargeBandRef *ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef *TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	FareQuotaFactorRef *FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef *FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef *QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	GeographicalStructureFactorRef *GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	PriceableObjectRef *PriceableObjectRef `xml:"PriceableObjectRef,omitempty" json:"PriceableObjectRef,omitempty"`
	MonthValidityOffsetRef *MonthValidityOffsetRef `xml:"MonthValidityOffsetRef,omitempty" json:"MonthValidityOffsetRef,omitempty"`
	LimitingRuleRef *LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef *DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef *PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	PricingServiceRef *PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	RoundingStepRef *RoundingStepRef `xml:"RoundingStepRef,omitempty" json:"RoundingStepRef,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	PricingParameterSetRef *PricingParameterSetRef `xml:"PricingParameterSetRef,omitempty" json:"PricingParameterSetRef,omitempty"`
	FlexibleServicePropertiesRef *FlexibleServicePropertiesRef `xml:"FlexibleServicePropertiesRef,omitempty" json:"FlexibleServicePropertiesRef,omitempty"`
	DriverTripTimeRef *DriverTripTimeRef `xml:"DriverTripTimeRef,omitempty" json:"DriverTripTimeRef,omitempty"`
	DriverTripRef *DriverTripRef `xml:"DriverTripRef,omitempty" json:"DriverTripRef,omitempty"`
	DutyPartRef *DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
	AccountableElementRef *AccountableElementRef `xml:"AccountableElementRef,omitempty" json:"AccountableElementRef,omitempty"`
	DutyRef *DutyRef `xml:"DutyRef,omitempty" json:"DutyRef,omitempty"`
	ReliefOpportunityRef *ReliefOpportunityRef `xml:"ReliefOpportunityRef,omitempty" json:"ReliefOpportunityRef,omitempty"`
	CourseOfJourneysRef *CourseOfJourneysRef `xml:"CourseOfJourneysRef,omitempty" json:"CourseOfJourneysRef,omitempty"`
	DriverRef *DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
	VehicleServicePartRef *VehicleServicePartRef `xml:"VehicleServicePartRef,omitempty" json:"VehicleServicePartRef,omitempty"`
	VehicleServiceRef *VehicleServiceRef `xml:"VehicleServiceRef,omitempty" json:"VehicleServiceRef,omitempty"`
	CompoundBlockRef *CompoundBlockRef `xml:"CompoundBlockRef,omitempty" json:"CompoundBlockRef,omitempty"`
	TrainBlockPartRef *TrainBlockPartRef `xml:"TrainBlockPartRef,omitempty" json:"TrainBlockPartRef,omitempty"`
	BlockPartRef *BlockPartRef `xml:"BlockPartRef,omitempty" json:"BlockPartRef,omitempty"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef *BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	JourneyPartCoupleRef *JourneyPartCoupleRef `xml:"JourneyPartCoupleRef,omitempty" json:"JourneyPartCoupleRef,omitempty"`
	CoupledJourneyRef *CoupledJourneyRef `xml:"CoupledJourneyRef,omitempty" json:"CoupledJourneyRef,omitempty"`
	JourneyPartRef *JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	TimetabledPassingTimeRef *TimetabledPassingTimeRef `xml:"TimetabledPassingTimeRef,omitempty" json:"TimetabledPassingTimeRef,omitempty"`
	EstimatedPassingTimeRef *EstimatedPassingTimeRef `xml:"EstimatedPassingTimeRef,omitempty" json:"EstimatedPassingTimeRef,omitempty"`
	ObservedPassingTimeRef *ObservedPassingTimeRef `xml:"ObservedPassingTimeRef,omitempty" json:"ObservedPassingTimeRef,omitempty"`
	TargetPassingTimeRef *TargetPassingTimeRef `xml:"TargetPassingTimeRef,omitempty" json:"TargetPassingTimeRef,omitempty"`
	PassingTimeRef *PassingTimeRef `xml:"PassingTimeRef,omitempty" json:"PassingTimeRef,omitempty"`
	InterchangeRuleTimingRef *InterchangeRuleTimingRef `xml:"InterchangeRuleTimingRef,omitempty" json:"InterchangeRuleTimingRef,omitempty"`
	InterchangeRuleRef *InterchangeRuleRef `xml:"InterchangeRuleRef,omitempty" json:"InterchangeRuleRef,omitempty"`
	ServiceJourneyPatternInterchangeRef *ServiceJourneyPatternInterchangeRef `xml:"ServiceJourneyPatternInterchangeRef,omitempty" json:"ServiceJourneyPatternInterchangeRef,omitempty"`
	ServiceJourneyInterchangeRef *ServiceJourneyInterchangeRef `xml:"ServiceJourneyInterchangeRef,omitempty" json:"ServiceJourneyInterchangeRef,omitempty"`
	DefaultInterchangeRef *DefaultInterchangeRef `xml:"DefaultInterchangeRef,omitempty" json:"DefaultInterchangeRef,omitempty"`
	InterchangeRef *InterchangeRef `xml:"InterchangeRef,omitempty" json:"InterchangeRef,omitempty"`
	JourneyMeetingRef *JourneyMeetingRef `xml:"JourneyMeetingRef,omitempty" json:"JourneyMeetingRef,omitempty"`
	SupplyContractRef *SupplyContractRef `xml:"SupplyContractRef,omitempty" json:"SupplyContractRef,omitempty"`
	TrainNumberRef *TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	RoutingConstraintZoneRef *RoutingConstraintZoneRef `xml:"RoutingConstraintZoneRef,omitempty" json:"RoutingConstraintZoneRef,omitempty"`
	VehiclePositionAlignmentRef *VehiclePositionAlignmentRef `xml:"VehiclePositionAlignmentRef,omitempty" json:"VehiclePositionAlignmentRef,omitempty"`
	VehicleQuayAlignmentRef *VehicleQuayAlignmentRef `xml:"VehicleQuayAlignmentRef,omitempty" json:"VehicleQuayAlignmentRef,omitempty"`
	LogicalDisplayRef *LogicalDisplayRef `xml:"LogicalDisplayRef,omitempty" json:"LogicalDisplayRef,omitempty"`
	ParkingPropertiesRef *ParkingPropertiesRef `xml:"ParkingPropertiesRef,omitempty" json:"ParkingPropertiesRef,omitempty"`
	ParkingCapacityRef *ParkingCapacityRef `xml:"ParkingCapacityRef,omitempty" json:"ParkingCapacityRef,omitempty"`
	LineNetworkRef *LineNetworkRef `xml:"LineNetworkRef,omitempty" json:"LineNetworkRef,omitempty"`
	RouteInstructionRef *RouteInstructionRef `xml:"RouteInstructionRef,omitempty" json:"RouteInstructionRef,omitempty"`
	FlexiblePointPropertiesRef *FlexiblePointPropertiesRef `xml:"FlexiblePointPropertiesRef,omitempty" json:"FlexiblePointPropertiesRef,omitempty"`
	FlexibleLinkPropertiesRef *FlexibleLinkPropertiesRef `xml:"FlexibleLinkPropertiesRef,omitempty" json:"FlexibleLinkPropertiesRef,omitempty"`
	TimeDemandProfileRef *TimeDemandProfileRef `xml:"TimeDemandProfileRef,omitempty" json:"TimeDemandProfileRef,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	VehicleTypePreferenceRef *VehicleTypePreferenceRef `xml:"VehicleTypePreferenceRef,omitempty" json:"VehicleTypePreferenceRef,omitempty"`
	JourneyPatternHeadwayRef *JourneyPatternHeadwayRef `xml:"JourneyPatternHeadwayRef,omitempty" json:"JourneyPatternHeadwayRef,omitempty"`
	JourneyPatternLayoverRef *JourneyPatternLayoverRef `xml:"JourneyPatternLayoverRef,omitempty" json:"JourneyPatternLayoverRef,omitempty"`
	JourneyPatternRunTimeRef *JourneyPatternRunTimeRef `xml:"JourneyPatternRunTimeRef,omitempty" json:"JourneyPatternRunTimeRef,omitempty"`
	JourneyPatternWaitTimeRef *JourneyPatternWaitTimeRef `xml:"JourneyPatternWaitTimeRef,omitempty" json:"JourneyPatternWaitTimeRef,omitempty"`
	DefaultServiceJourneyTimeRef *DefaultServiceJourneyTimeRef `xml:"DefaultServiceJourneyTimeRef,omitempty" json:"DefaultServiceJourneyTimeRef,omitempty"`
	DefaultDeadRunRunTimeRef *DefaultDeadRunRunTimeRef `xml:"DefaultDeadRunRunTimeRef,omitempty" json:"DefaultDeadRunRunTimeRef,omitempty"`
	TurnaroundTimeLimitTimeRef *TurnaroundTimeLimitTimeRef `xml:"TurnaroundTimeLimitTimeRef,omitempty" json:"TurnaroundTimeLimitTimeRef,omitempty"`
	JourneyTimingRef *JourneyTimingRef `xml:"JourneyTimingRef,omitempty" json:"JourneyTimingRef,omitempty"`
	CrewBaseRef *CrewBaseRef `xml:"CrewBaseRef,omitempty" json:"CrewBaseRef,omitempty"`
	TrainComponentRef *TrainComponentRef `xml:"TrainComponentRef,omitempty" json:"TrainComponentRef,omitempty"`
	TrainElementRef *TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	TrainInCompoundTrainRef *TrainInCompoundTrainRef `xml:"TrainInCompoundTrainRef,omitempty" json:"TrainInCompoundTrainRef,omitempty"`
	PassengerSeatRef *PassengerSeatRef `xml:"PassengerSeatRef,omitempty" json:"PassengerSeatRef,omitempty"`
	TravelDocumentSecurityListingRef *TravelDocumentSecurityListingRef `xml:"TravelDocumentSecurityListingRef,omitempty" json:"TravelDocumentSecurityListingRef,omitempty"`
	MediumAccessDeviceSecurityListingRef *MediumAccessDeviceSecurityListingRef `xml:"MediumAccessDeviceSecurityListingRef,omitempty" json:"MediumAccessDeviceSecurityListingRef,omitempty"`
	RetailDeviceSecurityListingRef *RetailDeviceSecurityListingRef `xml:"RetailDeviceSecurityListingRef,omitempty" json:"RetailDeviceSecurityListingRef,omitempty"`
	CustomerAccountSecurityListingRef *CustomerAccountSecurityListingRef `xml:"CustomerAccountSecurityListingRef,omitempty" json:"CustomerAccountSecurityListingRef,omitempty"`
	FareContractSecurityListingRef *FareContractSecurityListingRef `xml:"FareContractSecurityListingRef,omitempty" json:"FareContractSecurityListingRef,omitempty"`
	CustomerSecurityListingRef *CustomerSecurityListingRef `xml:"CustomerSecurityListingRef,omitempty" json:"CustomerSecurityListingRef,omitempty"`
	WhitelistRef *WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	BlacklistRef *BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
	SchematicMapMemberRef *SchematicMapMemberRef `xml:"SchematicMapMemberRef,omitempty" json:"SchematicMapMemberRef,omitempty"`
	SchematicMapRef *SchematicMapRef `xml:"SchematicMapRef,omitempty" json:"SchematicMapRef,omitempty"`
	CycleModelProfileRef *CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef *CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
	ModeRestrictionAssessmentRef *ModeRestrictionAssessmentRef `xml:"ModeRestrictionAssessmentRef,omitempty" json:"ModeRestrictionAssessmentRef,omitempty"`
	DeliveryVariantRef *DeliveryVariantRef `xml:"DeliveryVariantRef,omitempty" json:"DeliveryVariantRef,omitempty"`
	NoticeRef *NoticeRef `xml:"NoticeRef,omitempty" json:"NoticeRef,omitempty"`
	VehicleProfileRef *VehicleProfileRef `xml:"VehicleProfileRef,omitempty" json:"VehicleProfileRef,omitempty"`
	VehicleEquipmentProfileMemberRef *VehicleEquipmentProfileMemberRef `xml:"VehicleEquipmentProfileMemberRef,omitempty" json:"VehicleEquipmentProfileMemberRef,omitempty"`
	ChargingEquipmentProfileRef *ChargingEquipmentProfileRef `xml:"ChargingEquipmentProfileRef,omitempty" json:"ChargingEquipmentProfileRef,omitempty"`
	VehicleEquipmentProfileRef *VehicleEquipmentProfileRef `xml:"VehicleEquipmentProfileRef,omitempty" json:"VehicleEquipmentProfileRef,omitempty"`
	VehicleModelRef *VehicleModelRef `xml:"VehicleModelRef,omitempty" json:"VehicleModelRef,omitempty"`
	VehicleRef *VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	PassengerCapacityRef *PassengerCapacityRef `xml:"PassengerCapacityRef,omitempty" json:"PassengerCapacityRef,omitempty"`
	FacilityRequirementRef *FacilityRequirementRef `xml:"FacilityRequirementRef,omitempty" json:"FacilityRequirementRef,omitempty"`
	VehicleManoeuvringRequirementRef *VehicleManoeuvringRequirementRef `xml:"VehicleManoeuvringRequirementRef,omitempty" json:"VehicleManoeuvringRequirementRef,omitempty"`
	PassengerCarryingRequirementRef *PassengerCarryingRequirementRef `xml:"PassengerCarryingRequirementRef,omitempty" json:"PassengerCarryingRequirementRef,omitempty"`
	VehicleRequirementRef *VehicleRequirementRef `xml:"VehicleRequirementRef,omitempty" json:"VehicleRequirementRef,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	OnboardStayRef *OnboardStayRef `xml:"OnboardStayRef,omitempty" json:"OnboardStayRef,omitempty"`
	AccommodationRef *AccommodationRef `xml:"AccommodationRef,omitempty" json:"AccommodationRef,omitempty"`
	ServiceFacilitySetRef *ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	SiteFacilitySetRef *SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	FacilitySetRef *FacilitySetRef `xml:"FacilitySetRef,omitempty" json:"FacilitySetRef,omitempty"`
	FacilityRef *FacilityRef `xml:"FacilityRef,omitempty" json:"FacilityRef,omitempty"`
	OperatingDepartmentRef *OperatingDepartmentRef `xml:"OperatingDepartmentRef,omitempty" json:"OperatingDepartmentRef,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	LevelRef *LevelRef `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	ModeRef *ModeRef `xml:"ModeRef,omitempty" json:"ModeRef,omitempty"`
	SubmodeRef *SubmodeRef `xml:"SubmodeRef,omitempty" json:"SubmodeRef,omitempty"`
	OpenTransportModeRef *OpenTransportModeRef `xml:"OpenTransportModeRef,omitempty" json:"OpenTransportModeRef,omitempty"`
	TopographicProjectionRef *TopographicProjectionRef `xml:"TopographicProjectionRef,omitempty" json:"TopographicProjectionRef,omitempty"`
	ComplexFeatureProjectionRef *ComplexFeatureProjectionRef `xml:"ComplexFeatureProjectionRef,omitempty" json:"ComplexFeatureProjectionRef,omitempty"`
	LinkSequenceProjectionRef *LinkSequenceProjectionRef `xml:"LinkSequenceProjectionRef,omitempty" json:"LinkSequenceProjectionRef,omitempty"`
	ZoneProjectionRef *ZoneProjectionRef `xml:"ZoneProjectionRef,omitempty" json:"ZoneProjectionRef,omitempty"`
	LinkProjectionRef *LinkProjectionRef `xml:"LinkProjectionRef,omitempty" json:"LinkProjectionRef,omitempty"`
	PointProjectionRef *PointProjectionRef `xml:"PointProjectionRef,omitempty" json:"PointProjectionRef,omitempty"`
	TripRef *TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef *TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef *SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef *TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef *NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	LinkSequenceRef *LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
	ContactRef *ContactRef `xml:"ContactRef,omitempty" json:"ContactRef,omitempty"`
	SalesTransactionRef *SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	OfferedTravelSpecificationRef *OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	RequestedTravelSpecificationRef *RequestedTravelSpecificationRef `xml:"RequestedTravelSpecificationRef,omitempty" json:"RequestedTravelSpecificationRef,omitempty"`
	TravelSpecificationRef *TravelSpecificationRef `xml:"TravelSpecificationRef,omitempty" json:"TravelSpecificationRef,omitempty"`
	FareContractEntryRef *FareContractEntryRef `xml:"FareContractEntryRef,omitempty" json:"FareContractEntryRef,omitempty"`
	LogEntryRef *LogEntryRef `xml:"LogEntryRef,omitempty" json:"LogEntryRef,omitempty"`
	AlternativeNameRef *AlternativeNameRef `xml:"AlternativeNameRef,omitempty" json:"AlternativeNameRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	DefaultConnectionRef *DefaultConnectionRef `xml:"DefaultConnectionRef,omitempty" json:"DefaultConnectionRef,omitempty"`
	SiteConnectionRef *SiteConnectionRef `xml:"SiteConnectionRef,omitempty" json:"SiteConnectionRef,omitempty"`
	ConnectionRef *ConnectionRef `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	AccessRef *AccessRef `xml:"AccessRef,omitempty" json:"AccessRef,omitempty"`
	HailAndRideAreaRef *HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef *FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef *FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
	FlexibleStopPlaceRef *FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	PathJunctionRef *PathJunctionRef `xml:"PathJunctionRef,omitempty" json:"PathJunctionRef,omitempty"`
	EquipmentPlaceRef *EquipmentPlaceRef `xml:"EquipmentPlaceRef,omitempty" json:"EquipmentPlaceRef,omitempty"`
	EquipmentPositionRef *EquipmentPositionRef `xml:"EquipmentPositionRef,omitempty" json:"EquipmentPositionRef,omitempty"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	VehiclePoolingMeetingPlaceRef *VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef *VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	GarageRef *GarageRef `xml:"GarageRef,omitempty" json:"GarageRef,omitempty"`
	VehicleStoppingPositionRef *VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef *VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef *AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef *StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef *VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef *ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef *PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef *StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef *StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef *ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef *ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef *ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef *PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef *PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef *VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef *EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef *SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef *SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	AddressablePlaceRef *AddressablePlaceRef `xml:"AddressablePlaceRef,omitempty" json:"AddressablePlaceRef,omitempty"`
	PostalAddressRef *PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef *RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef *AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
	OnwardVehicleMeetingLinkRef *OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef *VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef *ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef *LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef *WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef *RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef *RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef *ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef *PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef *RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	UicOperatingPeriodRef *UicOperatingPeriodRef `xml:"UicOperatingPeriodRef,omitempty" json:"UicOperatingPeriodRef,omitempty"`
	OperatingPeriodRef *OperatingPeriodRef `xml:"OperatingPeriodRef,omitempty" json:"OperatingPeriodRef,omitempty"`
	OperatingDayRef *OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	ServiceCalendarRef *ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	AlternativeTextRef *AlternativeTextRef `xml:"AlternativeTextRef,omitempty" json:"AlternativeTextRef,omitempty"`
	AvailabilityConditionRef *AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	ValidityRuleParameterRef *ValidityRuleParameterRef `xml:"ValidityRuleParameterRef,omitempty" json:"ValidityRuleParameterRef,omitempty"`
	ValidityTriggerRef *ValidityTriggerRef `xml:"ValidityTriggerRef,omitempty" json:"ValidityTriggerRef,omitempty"`
	ValidityConditionRef *ValidityConditionRef `xml:"ValidityConditionRef,omitempty" json:"ValidityConditionRef,omitempty"`
	ResponsibilityRoleRef *ResponsibilityRoleRef `xml:"ResponsibilityRoleRef,omitempty" json:"ResponsibilityRoleRef,omitempty"`
	ControlCentreRef *ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	OrganisationalUnitRef *OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	DepartmentRef *DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
	OrganisationPartRef *OrganisationPartRef `xml:"OrganisationPartRef,omitempty" json:"OrganisationPartRef,omitempty"`
	AllAuthoritiesRef *AllAuthoritiesRef `xml:"AllAuthoritiesRef,omitempty" json:"AllAuthoritiesRef,omitempty"`
	AllOperatorsRef *AllOperatorsRef `xml:"AllOperatorsRef,omitempty" json:"AllOperatorsRef,omitempty"`
	AllPublicTransportOrganisationsRef *AllPublicTransportOrganisationsRef `xml:"AllPublicTransportOrganisationsRef,omitempty" json:"AllPublicTransportOrganisationsRef,omitempty"`
	AllTransportOrganisationsRef *AllTransportOrganisationsRef `xml:"AllTransportOrganisationsRef,omitempty" json:"AllTransportOrganisationsRef,omitempty"`
	AllOrganisationsRef *AllOrganisationsRef `xml:"AllOrganisationsRef,omitempty" json:"AllOrganisationsRef,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	ResponsibilitySetRef *ResponsibilitySetRef `xml:"ResponsibilitySetRef,omitempty" json:"ResponsibilitySetRef,omitempty"`
	DestinationDisplayVariantRef *DestinationDisplayVariantRef `xml:"DestinationDisplayVariantRef,omitempty" json:"DestinationDisplayVariantRef,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	AllowedLineDirectionRef *AllowedLineDirectionRef `xml:"AllowedLineDirectionRef,omitempty" json:"AllowedLineDirectionRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	GroupOfCustomerPurchasePackagesRef *GroupOfCustomerPurchasePackagesRef `xml:"GroupOfCustomerPurchasePackagesRef,omitempty" json:"GroupOfCustomerPurchasePackagesRef,omitempty"`
	PoolOfVehiclesRef *PoolOfVehiclesRef `xml:"PoolOfVehiclesRef,omitempty" json:"PoolOfVehiclesRef,omitempty"`
	GroupOfSalesOfferPackagesRef *GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
	GroupOfDistanceMatrixElementsRef *GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfDistributionChannelsRef *GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	GroupOfSingleJourneysRef *GroupOfSingleJourneysRef `xml:"GroupOfSingleJourneysRef,omitempty" json:"GroupOfSingleJourneysRef,omitempty"`
	StandardFareTableRef *StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef *FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	PriceGroupRef *PriceGroupRef `xml:"PriceGroupRef,omitempty" json:"PriceGroupRef,omitempty"`
	RhythmicalJourneyGroupRef *RhythmicalJourneyGroupRef `xml:"RhythmicalJourneyGroupRef,omitempty" json:"RhythmicalJourneyGroupRef,omitempty"`
	HeadwayJourneyGroupRef *HeadwayJourneyGroupRef `xml:"HeadwayJourneyGroupRef,omitempty" json:"HeadwayJourneyGroupRef,omitempty"`
	JourneyFrequencyGroupRef *JourneyFrequencyGroupRef `xml:"JourneyFrequencyGroupRef,omitempty" json:"JourneyFrequencyGroupRef,omitempty"`
	GroupOfServicesRef *GroupOfServicesRef `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	GroupOfStopPlacesRef *GroupOfStopPlacesRef `xml:"GroupOfStopPlacesRef,omitempty" json:"GroupOfStopPlacesRef,omitempty"`
	PointOfInterestHierarchyRef *PointOfInterestHierarchyRef `xml:"PointOfInterestHierarchyRef,omitempty" json:"PointOfInterestHierarchyRef,omitempty"`
	GroupOfTimingLinksRef *GroupOfTimingLinksRef `xml:"GroupOfTimingLinksRef,omitempty" json:"GroupOfTimingLinksRef,omitempty"`
	FleetRef *FleetRef `xml:"FleetRef,omitempty" json:"FleetRef,omitempty"`
	GroupOfOperatorsRef *GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	GroupOfPlacesRef *GroupOfPlacesRef `xml:"GroupOfPlacesRef,omitempty" json:"GroupOfPlacesRef,omitempty"`
	ParentSectionRef *ParentSectionRef `xml:"ParentSectionRef,omitempty" json:"ParentSectionRef,omitempty"`
	ParentCommonSectionRef *ParentCommonSectionRef `xml:"ParentCommonSectionRef,omitempty" json:"ParentCommonSectionRef,omitempty"`
	CommonSectionRef *CommonSectionRef `xml:"CommonSectionRef,omitempty" json:"CommonSectionRef,omitempty"`
	LineSectionRef *LineSectionRef `xml:"LineSectionRef,omitempty" json:"LineSectionRef,omitempty"`
	FareSectionRef *FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	GeneralSectionRef *GeneralSectionRef `xml:"GeneralSectionRef,omitempty" json:"GeneralSectionRef,omitempty"`
	SectionRef *SectionRef `xml:"SectionRef,omitempty" json:"SectionRef,omitempty"`
	GroupOfTariffZonesRef *GroupOfTariffZonesRef `xml:"GroupOfTariffZonesRef,omitempty" json:"GroupOfTariffZonesRef,omitempty"`
	LogRef *LogRef `xml:"LogRef,omitempty" json:"LogRef,omitempty"`
	GroupOfTimebandsRef *GroupOfTimebandsRef `xml:"GroupOfTimebandsRef,omitempty" json:"GroupOfTimebandsRef,omitempty"`
	PlaceRef *PlaceRef `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
	MobilityServiceConstraintZoneRef *MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef *StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef *TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef *AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef *AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef *FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef *TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef *ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
	LayerRef *LayerRef `xml:"LayerRef,omitempty" json:"LayerRef,omitempty"`
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef *GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	GeneralGroupOfEntitiesRef *GeneralGroupOfEntitiesRef `xml:"GeneralGroupOfEntitiesRef,omitempty" json:"GeneralGroupOfEntitiesRef,omitempty"`
	MobilityJourneyFrameRef *MobilityJourneyFrameRef `xml:"MobilityJourneyFrameRef,omitempty" json:"MobilityJourneyFrameRef,omitempty"`
	MobilityServiceFrameRef *MobilityServiceFrameRef `xml:"MobilityServiceFrameRef,omitempty" json:"MobilityServiceFrameRef,omitempty"`
	SalesTransactionFrameRef *SalesTransactionFrameRef `xml:"SalesTransactionFrameRef,omitempty" json:"SalesTransactionFrameRef,omitempty"`
	FareFrameRef *FareFrameRef `xml:"FareFrameRef,omitempty" json:"FareFrameRef,omitempty"`
	ServiceFrameRef *ServiceFrameRef `xml:"ServiceFrameRef,omitempty" json:"ServiceFrameRef,omitempty"`
	DriverScheduleFrameRef *DriverScheduleFrameRef `xml:"DriverScheduleFrameRef,omitempty" json:"DriverScheduleFrameRef,omitempty"`
	VehicleScheduleFrameRef *VehicleScheduleFrameRef `xml:"VehicleScheduleFrameRef,omitempty" json:"VehicleScheduleFrameRef,omitempty"`
	TimetableFrameRef *TimetableFrameRef `xml:"TimetableFrameRef,omitempty" json:"TimetableFrameRef,omitempty"`
	SiteFrameRef *SiteFrameRef `xml:"SiteFrameRef,omitempty" json:"SiteFrameRef,omitempty"`
	InfrastructureFrameRef *InfrastructureFrameRef `xml:"InfrastructureFrameRef,omitempty" json:"InfrastructureFrameRef,omitempty"`
	GeneralFrameRef *GeneralFrameRef `xml:"GeneralFrameRef,omitempty" json:"GeneralFrameRef,omitempty"`
	ResourceFrameRef *ResourceFrameRef `xml:"ResourceFrameRef,omitempty" json:"ResourceFrameRef,omitempty"`
	ServiceCalendarFrameRef *ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	CompositeFrameRef *CompositeFrameRef `xml:"CompositeFrameRef,omitempty" json:"CompositeFrameRef,omitempty"`
	ParkingBayConditionRef *ParkingBayConditionRef `xml:"ParkingBayConditionRef,omitempty" json:"ParkingBayConditionRef,omitempty"`
	RentalAvailabilityRef *RentalAvailabilityRef `xml:"RentalAvailabilityRef,omitempty" json:"RentalAvailabilityRef,omitempty"`
	ParkingBayStatusRef *ParkingBayStatusRef `xml:"ParkingBayStatusRef,omitempty" json:"ParkingBayStatusRef,omitempty"`
	TypeOfMediumAccessDeviceRef *TypeOfMediumAccessDeviceRef `xml:"TypeOfMediumAccessDeviceRef,omitempty" json:"TypeOfMediumAccessDeviceRef,omitempty"`
	TypeOfProofRef *TypeOfProofRef `xml:"TypeOfProofRef,omitempty" json:"TypeOfProofRef,omitempty"`
	DistributionChannelRef *DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	ChargingMomentRef *ChargingMomentRef `xml:"ChargingMomentRef,omitempty" json:"ChargingMomentRef,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	PurposeOfJourneyPartitionRef *PurposeOfJourneyPartitionRef `xml:"PurposeOfJourneyPartitionRef,omitempty" json:"PurposeOfJourneyPartitionRef,omitempty"`
	TimingAlgorithmTypeRef *TimingAlgorithmTypeRef `xml:"TimingAlgorithmTypeRef,omitempty" json:"TimingAlgorithmTypeRef,omitempty"`
	TypeOfParkingRef *TypeOfParkingRef `xml:"TypeOfParkingRef,omitempty" json:"TypeOfParkingRef,omitempty"`
	PointOfInterestClassificationRef *PointOfInterestClassificationRef `xml:"PointOfInterestClassificationRef,omitempty" json:"PointOfInterestClassificationRef,omitempty"`
	TypeOfActivationRef *TypeOfActivationRef `xml:"TypeOfActivationRef,omitempty" json:"TypeOfActivationRef,omitempty"`
	TypeOfFleetRef *TypeOfFleetRef `xml:"TypeOfFleetRef,omitempty" json:"TypeOfFleetRef,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	TypeOfDriverPermitRef *TypeOfDriverPermitRef `xml:"TypeOfDriverPermitRef,omitempty" json:"TypeOfDriverPermitRef,omitempty"`
	AcceptedDriverPermitRef *AcceptedDriverPermitRef `xml:"AcceptedDriverPermitRef,omitempty" json:"AcceptedDriverPermitRef,omitempty"`
	PurposeOfEquipmentProfileRef *PurposeOfEquipmentProfileRef `xml:"PurposeOfEquipmentProfileRef,omitempty" json:"PurposeOfEquipmentProfileRef,omitempty"`
	TypeOfProductCategoryRef *TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfPaymentMethodRef *TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	TypeOfOperationRef *TypeOfOperationRef `xml:"TypeOfOperationRef,omitempty" json:"TypeOfOperationRef,omitempty"`
	TypeOfCodespaceAssignmentRef *TypeOfCodespaceAssignmentRef `xml:"TypeOfCodespaceAssignmentRef,omitempty" json:"TypeOfCodespaceAssignmentRef,omitempty"`
	BrandingRef *BrandingRef `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	TypeOfResponsibilityRoleRef *TypeOfResponsibilityRoleRef `xml:"TypeOfResponsibilityRoleRef,omitempty" json:"TypeOfResponsibilityRoleRef,omitempty"`
	PurposeOfGroupingRef *PurposeOfGroupingRef `xml:"PurposeOfGroupingRef,omitempty" json:"PurposeOfGroupingRef,omitempty"`
	TypeOfRetailDeviceRef *TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef,omitempty" json:"TypeOfRetailDeviceRef,omitempty"`
	CustomerAccountStatusRef *CustomerAccountStatusRef `xml:"CustomerAccountStatusRef,omitempty" json:"CustomerAccountStatusRef,omitempty"`
	TypeOfCustomerAccountRef *TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef,omitempty" json:"TypeOfCustomerAccountRef,omitempty"`
	TypeOfFareContractEntryRef *TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef,omitempty" json:"TypeOfFareContractEntryRef,omitempty"`
	TypeOfFareContractRef *TypeOfFareContractRef `xml:"TypeOfFareContractRef,omitempty" json:"TypeOfFareContractRef,omitempty"`
	TypeOfAccessRightAssignmentRef *TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef,omitempty" json:"TypeOfAccessRightAssignmentRef,omitempty"`
	TypeOfSalesOfferPackageRef *TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	TypeOfFareStructureElementRef *TypeOfFareStructureElementRef `xml:"TypeOfFareStructureElementRef,omitempty" json:"TypeOfFareStructureElementRef,omitempty"`
	TypeOfTariffRef *TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	AllDistributionChannelsRef *AllDistributionChannelsRef `xml:"AllDistributionChannelsRef,omitempty" json:"AllDistributionChannelsRef,omitempty"`
	TypeOfMachineReadabilityRef *TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef,omitempty" json:"TypeOfMachineReadabilityRef,omitempty"`
	TypeOfTravelDocumentRef *TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	TypeOfMobilityServiceRef *TypeOfMobilityServiceRef `xml:"TypeOfMobilityServiceRef,omitempty" json:"TypeOfMobilityServiceRef,omitempty"`
	TypeOfFareProductRef *TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	TypeOfFareStructureFactorRef *TypeOfFareStructureFactorRef `xml:"TypeOfFareStructureFactorRef,omitempty" json:"TypeOfFareStructureFactorRef,omitempty"`
	TypeOfPricingRuleRef *TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef,omitempty" json:"TypeOfPricingRuleRef,omitempty"`
	TypeOfFlexibleServiceRef *TypeOfFlexibleServiceRef `xml:"TypeOfFlexibleServiceRef,omitempty" json:"TypeOfFlexibleServiceRef,omitempty"`
	TypeOfPassengerInformationEquipmentRef *TypeOfPassengerInformationEquipmentRef `xml:"TypeOfPassengerInformationEquipmentRef,omitempty" json:"TypeOfPassengerInformationEquipmentRef,omitempty"`
	TypeOfTimeDemandTypeRef *TypeOfTimeDemandTypeRef `xml:"TypeOfTimeDemandTypeRef,omitempty" json:"TypeOfTimeDemandTypeRef,omitempty"`
	TypeOfJourneyPatternRef *TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	TypeOfSecurityListRef *TypeOfSecurityListRef `xml:"TypeOfSecurityListRef,omitempty" json:"TypeOfSecurityListRef,omitempty"`
	TypeOfPlugRef *TypeOfPlugRef `xml:"TypeOfPlugRef,omitempty" json:"TypeOfPlugRef,omitempty"`
	TypeOfBatteryChemistryRef *TypeOfBatteryChemistryRef `xml:"TypeOfBatteryChemistryRef,omitempty" json:"TypeOfBatteryChemistryRef,omitempty"`
	TypeOfServiceFeatureRef *TypeOfServiceFeatureRef `xml:"TypeOfServiceFeatureRef,omitempty" json:"TypeOfServiceFeatureRef,omitempty"`
	TypeOfDeliveryVariantRef *TypeOfDeliveryVariantRef `xml:"TypeOfDeliveryVariantRef,omitempty" json:"TypeOfDeliveryVariantRef,omitempty"`
	TypeOfNoticeRef *TypeOfNoticeRef `xml:"TypeOfNoticeRef,omitempty" json:"TypeOfNoticeRef,omitempty"`
	TypeOfCongestionRef *TypeOfCongestionRef `xml:"TypeOfCongestionRef,omitempty" json:"TypeOfCongestionRef,omitempty"`
	TypeOfServiceRef *TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	TypeOfFacilityRef *TypeOfFacilityRef `xml:"TypeOfFacilityRef,omitempty" json:"TypeOfFacilityRef,omitempty"`
	TypeOfModeOfOperationRef *TypeOfModeOfOperationRef `xml:"TypeOfModeOfOperationRef,omitempty" json:"TypeOfModeOfOperationRef,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	TypeOfEquipmentRef *TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	TypeOfProjectionRef *TypeOfProjectionRef `xml:"TypeOfProjectionRef,omitempty" json:"TypeOfProjectionRef,omitempty"`
	TypeOfFeatureRef *TypeOfFeatureRef `xml:"TypeOfFeatureRef,omitempty" json:"TypeOfFeatureRef,omitempty"`
	TypeOfLinkSequenceRef *TypeOfLinkSequenceRef `xml:"TypeOfLinkSequenceRef,omitempty" json:"TypeOfLinkSequenceRef,omitempty"`
	TypeOfOrganisationPartRef *TypeOfOrganisationPartRef `xml:"TypeOfOrganisationPartRef,omitempty" json:"TypeOfOrganisationPartRef,omitempty"`
	TypeOfOrganisationRef *TypeOfOrganisationRef `xml:"TypeOfOrganisationRef,omitempty" json:"TypeOfOrganisationRef,omitempty"`
	TypeOfPlaceRef *TypeOfPlaceRef `xml:"TypeOfPlaceRef,omitempty" json:"TypeOfPlaceRef,omitempty"`
	TypeOfTransferRef *TypeOfTransferRef `xml:"TypeOfTransferRef,omitempty" json:"TypeOfTransferRef,omitempty"`
	TypeOfZoneRef *TypeOfZoneRef `xml:"TypeOfZoneRef,omitempty" json:"TypeOfZoneRef,omitempty"`
	TypeOfLinkRef *TypeOfLinkRef `xml:"TypeOfLinkRef,omitempty" json:"TypeOfLinkRef,omitempty"`
	TypeOfPointRef *TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
	TypeOfLineRef *TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
	TypeOfValidityRef *TypeOfValidityRef `xml:"TypeOfValidityRef,omitempty" json:"TypeOfValidityRef,omitempty"`
	TypeOfFrameRef *TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	DataSourceRef *DataSourceRef `xml:"DataSourceRef,omitempty" json:"DataSourceRef,omitempty"`
	VersionRef *VersionRef `xml:"VersionRef,omitempty" json:"VersionRef,omitempty"`
	VersionOfObjectRef *VersionOfObjectRef `xml:"VersionOfObjectRef,omitempty" json:"VersionOfObjectRef,omitempty"`
	// Whether element is to be hidden on map.
	Hide *bool `xml:"Hide,omitempty" json:"Hide,omitempty"`
	// Whether element is to be displayed on map as an icon.
	DisplayAsIcon *bool `xml:"DisplayAsIcon,omitempty" json:"DisplayAsIcon,omitempty"`
	InfoLink *InfoLink `xml:"InfoLink,omitempty" json:"InfoLink,omitempty"`
	// X pixel coordinate of member on map image  from origin at Bottom Left.
	X *float32 `xml:"x,omitempty" json:"x,omitempty"`
	// Y pixel coordinate from origin at Bottom Left.
	Y *float32 `xml:"y,omitempty" json:"y,omitempty"`
	TopographicProjection *TopographicProjection `xml:"TopographicProjection,omitempty" json:"TopographicProjection,omitempty"`
	ZoneProjection *ZoneProjection `xml:"ZoneProjection,omitempty" json:"ZoneProjection,omitempty"`
	ComplexFeatureProjection *ComplexFeatureProjection `xml:"ComplexFeatureProjection,omitempty" json:"ComplexFeatureProjection,omitempty"`
	LinkSequenceProjection *LinkSequenceProjection `xml:"LinkSequenceProjection,omitempty" json:"LinkSequenceProjection,omitempty"`
	LinkProjection *LinkProjection `xml:"LinkProjection,omitempty" json:"LinkProjection,omitempty"`
	PointProjection *PointProjection `xml:"PointProjection,omitempty" json:"PointProjection,omitempty"`
}

// SchematicMap represents the SchematicMap element
// A projection of a set of ENTITies onto a bitmap image so as to support hyperlinked interactions.
type SchematicMap struct {
	SchematicMapVersionStructure
}

// SecuritylistRefsRelStructure represents the securitylistRefs_RelStructure element
// Type for a list of SECURITY LIST.s.
type SecuritylistRefsRelStructure struct {
	OneToManyRelationshipStructure
	WhitelistRef []WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	BlacklistRef []BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
}

// SecurityListRefStructure represents the SecurityListRefStructure element
// Type for Reference to a SECURITY LIST..
type SecurityListRefStructure struct {
	VersionOfObjectRefStructure
}

// BlacklistRefsRelStructure represents the blacklistRefs_RelStructure element
// Type for a list of BLACKLISTs.
type BlacklistRefsRelStructure struct {
	OneToManyRelationshipStructure
	BlacklistRef []BlacklistRef `xml:"BlacklistRef" json:"BlacklistRef"`
}

// BlacklistRefStructure represents the BlacklistRefStructure element
// Type for Reference to a BLACKLIST.
type BlacklistRefStructure struct {
	SecurityListRefStructure
}

// WhitelistRefsRelStructure represents the whitelistRefs_RelStructure element
// Type for a list of WHITELISTs.
type WhitelistRefsRelStructure struct {
	OneToManyRelationshipStructure
	WhitelistRef []WhitelistRef `xml:"WhitelistRef" json:"WhitelistRef"`
}

// WhitelistRefStructure represents the WhitelistRefStructure element
// Type for Reference to a WHITELIST.
type WhitelistRefStructure struct {
	SecurityListRefStructure
}

// SecurityListingRefsRelStructure represents the SecurityListingRefs_RelStructure element
// Type for a list of references to SECURITY LISTING.
type SecurityListingRefsRelStructure struct {
	OneToManyRelationshipStructure
	TravelDocumentSecurityListingRef []TravelDocumentSecurityListingRef `xml:"TravelDocumentSecurityListingRef,omitempty" json:"TravelDocumentSecurityListingRef,omitempty"`
	MediumAccessDeviceSecurityListingRef []MediumAccessDeviceSecurityListingRef `xml:"MediumAccessDeviceSecurityListingRef,omitempty" json:"MediumAccessDeviceSecurityListingRef,omitempty"`
	RetailDeviceSecurityListingRef []RetailDeviceSecurityListingRef `xml:"RetailDeviceSecurityListingRef,omitempty" json:"RetailDeviceSecurityListingRef,omitempty"`
	CustomerAccountSecurityListingRef []CustomerAccountSecurityListingRef `xml:"CustomerAccountSecurityListingRef,omitempty" json:"CustomerAccountSecurityListingRef,omitempty"`
	FareContractSecurityListingRef []FareContractSecurityListingRef `xml:"FareContractSecurityListingRef,omitempty" json:"FareContractSecurityListingRef,omitempty"`
	CustomerSecurityListingRef []CustomerSecurityListingRef `xml:"CustomerSecurityListingRef,omitempty" json:"CustomerSecurityListingRef,omitempty"`
}

// SecurityListingRefStructure represents the SecurityListingRefStructure element
// Type for Reference to a SECURITY LISTING.
type SecurityListingRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfSecurityListRefsRelStructure represents the typeOfSecurityListRefs_RelStructure element
// Type for a list of TYPEs OF SECURITY LIST.
type TypeOfSecurityListRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfSecurityListRef []TypeOfSecurityListRef `xml:"TypeOfSecurityListRef" json:"TypeOfSecurityListRef"`
}

// TypeOfSecurityListRefStructure represents the TypeOfSecurityListRefStructure element
// Type for Reference to a TYPE OF SECURITY LIST.
type TypeOfSecurityListRefStructure struct {
	TypeOfValueRefStructure
}

// SecurityListRef represents the SecurityListRef element
// Reference to a SECURITY LIST..
type SecurityListRef struct {
	SecurityListRefStructure
}

// BlacklistRef represents the BlacklistRef element
// Reference to a BLACKLIST.
type BlacklistRef struct {
	BlacklistRefStructure
}

// WhitelistRef represents the WhitelistRef element
// Reference to a WHITELIST.
type WhitelistRef struct {
	WhitelistRefStructure
}

// SecurityListingRef represents the SecurityListingRef element
// Reference to a SECURITY LISTING.
type SecurityListingRef struct {
	SecurityListingRefStructure
}

// TypeOfSecurityListRef represents the TypeOfSecurityListRef element
// Reference to a TYPE OF SECURITY LIST.
type TypeOfSecurityListRef struct {
	TypeOfSecurityListRefStructure
}

// BlacklistsInFrameRelStructure represents the blacklistsInFrame_RelStructure element
// Type for containment in frame of BLACK LISTS.
type BlacklistsInFrameRelStructure struct {
	FrameContainmentStructure
	Blacklist []Blacklist `xml:"Blacklist" json:"Blacklist"`
}

// WhitelistsInFrameRelStructure represents the whitelistsInFrame_RelStructure element
// Type for containment in frame of BLACK LISTS. +v1.1
type WhitelistsInFrameRelStructure struct {
	FrameContainmentStructure
	Whitelist []Whitelist `xml:"Whitelist" json:"Whitelist"`
}

// SecurityListsRelStructure represents the securityLists_RelStructure element
// Type for a list of SECURITY LISTs. +v1.1
type SecurityListsRelStructure struct {
	ContainmentAggregationStructure
	WhitelistRef []WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	BlacklistRef []BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
}

// SecurityListVersionStructure represents the SecurityList_VersionStructure element
// Type for SECURITY LIST. +v1.1
type SecurityListVersionStructure struct {
	DataManagedObjectStructure
	// Name of SECURITY LIST.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of SECURITY LIST.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	TypeOfSecurityListRef *TypeOfSecurityListRef `xml:"TypeOfSecurityListRef,omitempty" json:"TypeOfSecurityListRef,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// Items in SECURITY LIST.
	SecurityListings *SecurityListingsRelStructure `xml:"securityListings,omitempty" json:"securityListings,omitempty"`
}

// SecurityListingsRelStructure represents the securityListings_RelStructure element
// Type for a list of SECURITY LISTINGs.
type SecurityListingsRelStructure struct {
	ContainmentAggregationStructure
	MediumAccessDeviceSecurityListing []MediumAccessDeviceSecurityListing `xml:"MediumAccessDeviceSecurityListing,omitempty" json:"MediumAccessDeviceSecurityListing,omitempty"`
	TravelDocumentSecurityListing []TravelDocumentSecurityListing `xml:"TravelDocumentSecurityListing,omitempty" json:"TravelDocumentSecurityListing,omitempty"`
	RetailDeviceSecurityListing []RetailDeviceSecurityListing `xml:"RetailDeviceSecurityListing,omitempty" json:"RetailDeviceSecurityListing,omitempty"`
	FareContractSecurityListing []FareContractSecurityListing `xml:"FareContractSecurityListing,omitempty" json:"FareContractSecurityListing,omitempty"`
	CustomerSecurityListing []CustomerSecurityListing `xml:"CustomerSecurityListing,omitempty" json:"CustomerSecurityListing,omitempty"`
	CustomerAccountSecurityListing []CustomerAccountSecurityListing `xml:"CustomerAccountSecurityListing,omitempty" json:"CustomerAccountSecurityListing,omitempty"`
}

// SecurityListingVersionedChildStructure represents the SecurityListing_VersionedChildStructure element
// Type for SECURITY LISTING.
type SecurityListingVersionedChildStructure struct {
	VersionedChildStructure
	// Name of SECURITY LISTING.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	WhitelistRef *WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	BlacklistRef *BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
	// order within list
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// TypesOfSecurityListRelStructure represents the typesOfSecurityList_RelStructure element
// Type for a list of TYPE OF SECURITY LISTs. +v1.1
type TypesOfSecurityListRelStructure struct {
	ContainmentAggregationStructure
	TypeOfSecurityListRef []TypeOfSecurityListRef `xml:"TypeOfSecurityListRef,omitempty" json:"TypeOfSecurityListRef,omitempty"`
	TypeOfSecurityList []TypeOfSecurityList `xml:"TypeOfSecurityList,omitempty" json:"TypeOfSecurityList,omitempty"`
}

// TypeOfSecurityListVersionStructure represents the TypeOfSecurityList_VersionStructure element
// Type for TYPE OF SECURITY LIST. +v1.1
type TypeOfSecurityListVersionStructure struct {
	TypeOfEntityVersionStructure
}

// BlacklistsRelStructure represents the blacklists_RelStructure element
// Type for a list of BLACKLISTs.
type BlacklistsRelStructure struct {
	ContainmentAggregationStructure
	BlacklistRef []BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
	Blacklist []Blacklist `xml:"Blacklist,omitempty" json:"Blacklist,omitempty"`
}

// BlacklistVersionStructure represents the Blacklist_VersionStructure element
// Type for BLACKLIST.
type BlacklistVersionStructure struct {
	SecurityListVersionStructure
}

// WhitelistsRelStructure represents the whitelists_RelStructure element
// Type for a list of WHITELISTs. +v1.1
type WhitelistsRelStructure struct {
	ContainmentAggregationStructure
	WhitelistRef []WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	Whitelist []Whitelist `xml:"Whitelist,omitempty" json:"Whitelist,omitempty"`
}

// WhitelistVersionStructure represents the Whitelist_VersionStructure element
// Type for WHITELIST. +v1.1
type WhitelistVersionStructure struct {
	SecurityListVersionStructure
}

// SecurityList represents the SecurityList element
// A list of items whose status is to be accepted or denied for a process such as purchase or validation.
type SecurityList struct {
	SecurityListVersionStructure
}

// TypeOfSecurityList represents the TypeOfSecurityList element
// A classification of SECURITY LIST. +v1.1
type TypeOfSecurityList struct {
	TypeOfSecurityListVersionStructure
}

// Blacklist represents the Blacklist element
// A list of items (TRAVEL DOCUMENTs,  CONTRACTs etc) the validity of which has been cancelled temporarily or permanently, for a specific reason like loss of the document, technical malfunction, no credit on bank account, offences committed by the customer, etc.
type Blacklist struct {
	BlacklistVersionStructure
}

// Whitelist represents the Whitelist element
// A list of  items (TRAVEL DOCUMENTs, CONTRACTs, etc) explicitly approved for processing.+v1.1
type Whitelist struct {
	WhitelistVersionStructure
}

// SeatAllocationMethodEnumeration represents the SeatAllocationMethodEnumeration enumeration
// Allowed values for Seat Allocation Method.
type SeatAllocationMethodEnumeration string

const (
	// SeatAllocationMethodEnumerationAutoAssigned represents autoAssigned
	// A seat will be assigned automatically by an algorithm.
	SeatAllocationMethodEnumerationAutoAssigned SeatAllocationMethodEnumeration = "autoAssigned"
	// SeatAllocationMethodEnumerationSeatMap represents seatMap
	// The passenger may choose a specific seat from the available seats.
	SeatAllocationMethodEnumerationSeatMap SeatAllocationMethodEnumeration = "seatMap"
	// SeatAllocationMethodEnumerationOpenSeating represents openSeating
	// It is not possible to  reserve a specific seat.
	SeatAllocationMethodEnumerationOpenSeating SeatAllocationMethodEnumeration = "openSeating"
)

// PassengerSeatRefStructure represents the PassengerSeatRefStructure element
// Type for a reference to a  PASSENGER SEAT .
type PassengerSeatRefStructure struct {
	VersionOfObjectRefStructure
}

// PassengerSeatRef represents the PassengerSeatRef element
// Reference to a  PASSENGER SEAT +v1.1
type PassengerSeatRef struct {
	PassengerSeatRefStructure
}

// TrainElementTypeEnumeration represents the TrainElementTypeEnumeration enumeration
// Allowed values for TYPE OF TRAIN ELEMENT.
type TrainElementTypeEnumeration string

const (
	// TrainElementTypeEnumerationBuffetCar represents buffetCar
	TrainElementTypeEnumerationBuffetCar TrainElementTypeEnumeration = "buffetCar"
	// TrainElementTypeEnumerationCarriage represents carriage
	TrainElementTypeEnumerationCarriage TrainElementTypeEnumeration = "carriage"
	// TrainElementTypeEnumerationEngine represents engine
	TrainElementTypeEnumerationEngine TrainElementTypeEnumeration = "engine"
	// TrainElementTypeEnumerationCarTransporter represents carTransporter
	TrainElementTypeEnumerationCarTransporter TrainElementTypeEnumeration = "carTransporter"
	// TrainElementTypeEnumerationSleeperCarriage represents sleeperCarriage
	TrainElementTypeEnumerationSleeperCarriage TrainElementTypeEnumeration = "sleeperCarriage"
	// TrainElementTypeEnumerationLuggageVan represents luggageVan
	TrainElementTypeEnumerationLuggageVan TrainElementTypeEnumeration = "luggageVan"
	// TrainElementTypeEnumerationRestaurantCarriage represents restaurantCarriage
	TrainElementTypeEnumerationRestaurantCarriage TrainElementTypeEnumeration = "restaurantCarriage"
	// TrainElementTypeEnumerationOther represents other
	TrainElementTypeEnumerationOther TrainElementTypeEnumeration = "other"
)

// TrainSizeEnumeration represents the TrainSizeEnumeration enumeration
// The size of a train in relative terms.
type TrainSizeEnumeration string

const (
	// TrainSizeEnumerationNormal represents normal
	TrainSizeEnumerationNormal TrainSizeEnumeration = "normal"
	// TrainSizeEnumerationShort represents short
	TrainSizeEnumerationShort TrainSizeEnumeration = "short"
	// TrainSizeEnumerationLong represents long
	TrainSizeEnumerationLong TrainSizeEnumeration = "long"
)

// TrainRefStructure represents the TrainRefStructure element
// Type for a reference to a TRAIN.
type TrainRefStructure struct {
	VehicleTypeRefStructure
}

// CompoundTrainRefStructure represents the CompoundTrainRefStructure element
// Type for a reference to a COMPOUND TRAIN.
type CompoundTrainRefStructure struct {
	VehicleTypeRefStructure
}

// TrainInCompoundTrainRefStructure represents the TrainInCompoundTrainRefStructure element
// Type for a reference to a TRAIN IN COMPOUND TRAIN.
type TrainInCompoundTrainRefStructure struct {
	VersionOfObjectRefStructure
}

// TrainElementRefStructure represents the TrainElementRefStructure element
// Type for a reference to a TRAIN ELEMENT.
type TrainElementRefStructure struct {
	VersionOfObjectRefStructure
}

// TrainComponentRefStructure represents the TrainComponentRefStructure element
// Type for a reference to a TRAIN COMPONENT.
type TrainComponentRefStructure struct {
	OrderedVersionOfObjectRefStructure
}

// TrainRef represents the TrainRef element
// Reference to a TRAIN.
type TrainRef struct {
	TrainRefStructure
}

// CompoundTrainRef represents the CompoundTrainRef element
// Reference to a COMPOUND TRAIN.
type CompoundTrainRef struct {
	CompoundTrainRefStructure
}

// TrainInCompoundTrainRef represents the TrainInCompoundTrainRef element
// Reference to a TRAIN IN COMPOUND TRAIN.
type TrainInCompoundTrainRef struct {
	TrainInCompoundTrainRefStructure
}

// TrainElementRef represents the TrainElementRef element
// Reference to a TRAIN ELEMENT.
type TrainElementRef struct {
	TrainElementRefStructure
}

// TrainComponentRef represents the TrainComponentRef element
// Reference to a TRAIN COMPONENT.
type TrainComponentRef struct {
	TrainComponentRefStructure
}

// VehicleModelProfilesInFrameRelStructure represents the vehicleModelProfilesInFrame_RelStructure element
// Type for containment in frame of VEHICLE MODEL  PROFILEs.
type VehicleModelProfilesInFrameRelStructure struct {
	ContainmentAggregationStructure
	CarModelProfile []CarModelProfile `xml:"CarModelProfile,omitempty" json:"CarModelProfile,omitempty"`
	CycleModelProfile []CycleModelProfile `xml:"CycleModelProfile,omitempty" json:"CycleModelProfile,omitempty"`
}

// VehicleModelProfileVersionStructure represents the VehicleModelProfile_VersionStructure element
// Type for a VEHICLE MODEL PROFILE.
type VehicleModelProfileVersionStructure struct {
	DataManagedObjectStructure
	// Name of VEHICLE MODEL PROFILE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Number of gears.
	NumberOfGears *int `xml:"NumberOfGears,omitempty" json:"NumberOfGears,omitempty"`
	// Type of Child seat.
	ChildSeat *ChildSeatEnumeration `xml:"ChildSeat,omitempty" json:"ChildSeat,omitempty"`
	// Maximum range between refuelling for vehicles of the MODEL PROFILE..
	RangeBetweenRefuelling *float64 `xml:"RangeBetweenRefuelling,omitempty" json:"RangeBetweenRefuelling,omitempty"`
	// Whether vehicle can be carried easily, e.g., scooter, skateboard, collapsible bicycle.
	IsPortable *bool `xml:"IsPortable,omitempty" json:"IsPortable,omitempty"`
}

// CarModelProfileVersionStructure represents the CarModelProfile_VersionStructure element
// Type for a CAR MODEL PROFILE.
type CarModelProfileVersionStructure struct {
	VehicleModelProfileVersionStructure
	// Number of seats.
	Seats *int `xml:"Seats,omitempty" json:"Seats,omitempty"`
	// Number of doors on VEHICLE of VEHICLE MODEL.
	Doors *int `xml:"Doors,omitempty" json:"Doors,omitempty"`
	// Type of gear transmission
	Transmission *TransmissionEnumeration `xml:"Transmission,omitempty" json:"Transmission,omitempty"`
	// Whether there is cruise-control
	CruiseControl *bool `xml:"CruiseControl,omitempty" json:"CruiseControl,omitempty"`
	// Whether VEHICLE has satellite navigation.
	SatNav *bool `xml:"SatNav,omitempty" json:"SatNav,omitempty"`
	// Whether VEHICLE has removable chains.
	AirConditioning *bool `xml:"AirConditioning,omitempty" json:"AirConditioning,omitempty"`
	// Whether vehicle is convertible
	Convertible *bool `xml:"Convertible,omitempty" json:"Convertible,omitempty"`
	// Whether VEHICLE has UsbPowerSockets.
	UsbPowerSockets *bool `xml:"UsbPowerSockets,omitempty" json:"UsbPowerSockets,omitempty"`
	// Whether VEHICLE has winter tyres.
	WinterTyres *bool `xml:"WinterTyres,omitempty" json:"WinterTyres,omitempty"`
	// Whether vehicel has remopvable chains.
	Chains *bool `xml:"Chains,omitempty" json:"Chains,omitempty"`
	// Whether VEHICLE has a trailer hitch.
	TrailerHitch *bool `xml:"TrailerHitch,omitempty" json:"TrailerHitch,omitempty"`
	// WHether VEHICLE has a roof rack.
	RoofRack *bool `xml:"RoofRack,omitempty" json:"RoofRack,omitempty"`
	// Whether VEHICLE has a cycle  rack.
	CycleRack *bool `xml:"CycleRack,omitempty" json:"CycleRack,omitempty"`
	// Whether VEHICLE has a ski rack.
	SkiRack *bool `xml:"SkiRack,omitempty" json:"SkiRack,omitempty"`
}

// CycleModelProfileVersionStructure represents the CycleModelProfile_VersionStructure element
// Type for a CYCLE MODEL PROFILE.
type CycleModelProfileVersionStructure struct {
	VehicleModelProfileVersionStructure
	// Description of gearing.
	GearTypeDescriotion *MultilingualString `xml:"GearTypeDescriotion,omitempty" json:"GearTypeDescriotion,omitempty"`
	// Whether there is a Battery
	Battery *bool `xml:"Battery,omitempty" json:"Battery,omitempty"`
	// Whether there are lights.
	Lamps *bool `xml:"Lamps,omitempty" json:"Lamps,omitempty"`
	// Whether there is a helmet.
	Helmet *bool `xml:"Helmet,omitempty" json:"Helmet,omitempty"`
	// Whether there is a pump.
	Pump *bool `xml:"Pump,omitempty" json:"Pump,omitempty"`
	// Whether there is a lockable luggafe container.
	Locker *bool `xml:"Locker,omitempty" json:"Locker,omitempty"`
	// Whether there is a basket.
	Basket *bool `xml:"Basket,omitempty" json:"Basket,omitempty"`
	// Whether there is a lock,
	Lock *bool `xml:"Lock,omitempty" json:"Lock,omitempty"`
}

// VehicleModelProfile represents the VehicleModelProfile element
// A set of characteristics of equipment installed on-board and characterising a VEHICLE MODEL PROFILE. +v1.2.2
type VehicleModelProfile struct {
	VehicleModelProfileVersionStructure
}

// CarModelProfile represents the CarModelProfile element
// A set of characteristics of equipment installed on-board and characterising a CAR MODEL PROFILE. +v1.2.2
type CarModelProfile struct {
	CarModelProfileVersionStructure
}

// CycleModelProfile represents the CycleModelProfile element
// A set of characteristics of equipment installed on-board and characterising a CYCLE MODEL PROFILE. +v1.2.2
type CycleModelProfile struct {
	CycleModelProfileVersionStructure
}

// VehicleEquipmenProfilesInFrameRelStructure represents the vehicleEquipmenProfilesInFrame_RelStructure element
// Type for containment in frame of VEHICLE EQUIPMENT PROFILEs.
type VehicleEquipmenProfilesInFrameRelStructure struct {
	ContainmentAggregationStructure
	VehicleEquipmentProfile []VehicleEquipmentProfile `xml:"VehicleEquipmentProfile,omitempty" json:"VehicleEquipmentProfile,omitempty"`
	ChargingEquipmentProfile []ChargingEquipmentProfile `xml:"ChargingEquipmentProfile,omitempty" json:"ChargingEquipmentProfile,omitempty"`
}

// VehiclesInFrameRelStructure represents the vehiclesInFrame_RelStructure element
// Type for containment in frame of VEHICLE TYPEs.
type VehiclesInFrameRelStructure struct {
	ContainmentAggregationStructure
	TrainElement []TrainElement `xml:"TrainElement,omitempty" json:"TrainElement,omitempty"`
	Vehicle []Vehicle `xml:"Vehicle,omitempty" json:"Vehicle,omitempty"`
}

// VehicleTypesInFrameRelStructure represents the vehicleTypesInFrame_RelStructure element
// Type for containment in frame of VEHICLE TYPEs.
type VehicleTypesInFrameRelStructure struct {
	ContainmentAggregationStructure
	CompoundTrain []CompoundTrain `xml:"CompoundTrain,omitempty" json:"CompoundTrain,omitempty"`
	Train []Train `xml:"Train,omitempty" json:"Train,omitempty"`
	VehicleType []VehicleType `xml:"VehicleType,omitempty" json:"VehicleType,omitempty"`
	SimpleVehicleType []SimpleVehicleType `xml:"SimpleVehicleType,omitempty" json:"SimpleVehicleType,omitempty"`
}

// TrainVersionStructure represents the Train_VersionStructure element
// Type for TRAIN.
type TrainVersionStructure struct {
	VehicleTypeVersionStructure
	TrainSize *TrainSize `xml:"TrainSize,omitempty" json:"TrainSize,omitempty"`
	// Ordered collection of TRAIN COMPONENTs making up TRAIN.
	Components *TrainComponentsRelStructure `xml:"components,omitempty" json:"components,omitempty"`
}

// TrainSizeStructure represents the TrainSizeStructure element
// Type for a TRAIN SIZE REQUIREMENT.
type TrainSizeStructure struct {
	// Number of cars needed in TRAIN.
	NumberOfCars *int `xml:"NumberOfCars,omitempty" json:"NumberOfCars,omitempty"`
	// Nature of Train Size., Short, long, normal. Default is normal.
	TrainSizeType *TrainSizeEnumeration `xml:"TrainSizeType,omitempty" json:"TrainSizeType,omitempty"`
}

// CompoundTrainVersionStructure represents the CompoundTrain_VersionStructure element
// Type for COMPOUND TRAIN.
type CompoundTrainVersionStructure struct {
	VehicleTypeVersionStructure
	// Ordered collection of TRAIN in COMPOUND TRAINs making up COMPOUND TRAIN. Each references a TRAIN.
	Components *TrainsInCompoundTrainRelStructure `xml:"components,omitempty" json:"components,omitempty"`
}

// TrainElementVersionStructure represents the TrainElement_VersionStructure element
// Type for a TRAIN ELEMENT.
type TrainElementVersionStructure struct {
	DataManagedObjectStructure
	// Name of TRAIN ELEMENT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of TRAIN ELEMENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Type of TRAIN ELEMENT.
	TrainElementType *TrainElementTypeEnumeration `xml:"TrainElementType,omitempty" json:"TrainElementType,omitempty"`
	FareClasses *FareClasses `xml:"FareClasses,omitempty" json:"FareClasses,omitempty"`
	// Total Number of passengers that TRAIN ELEMENT. can carry.
	PassengerCapacity *PassengerCapacityStructure `xml:"PassengerCapacity,omitempty" json:"PassengerCapacity,omitempty"`
	Capacities *PassengerCapacitiesRelStructure `xml:"capacities,omitempty" json:"capacities,omitempty"`
	// The length of a TRAIN ELEMENT.
	Length *float64 `xml:"Length,omitempty" json:"Length,omitempty"`
	// The width of a TRAIN ELEMENT.
	Width *float64 `xml:"Width,omitempty" json:"Width,omitempty"`
	TrainSize *TrainSize `xml:"TrainSize,omitempty" json:"TrainSize,omitempty"`
	Facilities *ServiceFacilitySetsRelStructure `xml:"facilities,omitempty" json:"facilities,omitempty"`
	// Actual EQUIPMENT on element.
	Equipments *EquipmentsRelStructure `xml:"equipments,omitempty" json:"equipments,omitempty"`
}

// TrainComponentsRelStructure represents the trainComponents_RelStructure element
// Type for a list of TRAIN COMPONENTs.
type TrainComponentsRelStructure struct {
	ContainmentAggregationStructure
	TrainComponentRef []TrainComponentRef `xml:"TrainComponentRef,omitempty" json:"TrainComponentRef,omitempty"`
	// An area within a Site. May be connected to Quays by PATH LINKs.
	TrainComponent []TrainComponent `xml:"TrainComponent,omitempty" json:"TrainComponent,omitempty"`
}

// TrainComponentVersionStructure represents the TrainComponent_VersionStructure element
// Type for a TRAIN COMPONENT.
type TrainComponentVersionStructure struct {
	DataManagedObjectStructure
	// Label for TRAIN COMPONENT.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// Description of TRAIN COMPONENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Reference to a TRAIN.
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	// Reference to a TRAIN ELEMENT.
	TrainElementRef *TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	TrainElement *TrainElement `xml:"TrainElement,omitempty" json:"TrainElement,omitempty"`
	// Orientation of the  TRAIN ELEMENT within the TRAIN. +v1.1.
	OperationalOrientation *VehicleOrientationEnumeration `xml:"OperationalOrientation,omitempty" json:"OperationalOrientation,omitempty"`
	// Order of TRAIN COMPONENT within TRAIN.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// TrainsInCompoundTrainRelStructure represents the trainsInCompoundTrain_RelStructure element
// Type for a list of TRAIN IN COMPOUND TRAIN.
type TrainsInCompoundTrainRelStructure struct {
	StrictContainmentAggregationStructure
	// An instance of a TRAIN making up a COMPOUND TRAIN.
	TrainInCompoundTrain []TrainInCompoundTrainVersionedChildStructure `xml:"TrainInCompoundTrain" json:"TrainInCompoundTrain"`
}

// TrainInCompoundTrainVersionedChildStructure represents the TrainInCompoundTrain_VersionedChildStructure element
// Type for a TRAIN IN COMPOUND TRAIN.
type TrainInCompoundTrainVersionedChildStructure struct {
	VersionedChildStructure
	// Description of TRAIN IN COMPOUND TRAIN.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Reference to a TRAIN ELEMENT.
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	// Reference to a TRAIN.
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	Train *Train `xml:"Train,omitempty" json:"Train,omitempty"`
	// Label for TRAIN IN COMPOUND TRAIN.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// Orientation of the  TRAIN IN COMPOUND TRAIN
	OperationalOrientation *VehicleOrientationEnumeration `xml:"OperationalOrientation,omitempty" json:"OperationalOrientation,omitempty"`
	// Whether the component order of the TRAIN IN COMPOUND TRAIN is reversed compared to the order in the TRAIN.
	ReversedOrientation *bool `xml:"ReversedOrientation,omitempty" json:"ReversedOrientation,omitempty"`
	// Order of TRAIN IN COMPOUND TRAIN within TRAIN.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// TrainComponentDerivedViewStructure represents the TrainComponent_DerivedViewStructure element
// Type for TRAIN COMPONENT VIEW.
type TrainComponentDerivedViewStructure struct {
	DerivedViewStructure
	TrainComponentRef *TrainComponentRef `xml:"TrainComponentRef,omitempty" json:"TrainComponentRef,omitempty"`
	// Label for TRAIN COMPONENT.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// Description of TRAIN COMPONENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Reference to a TRAIN ELEMENT.
	TrainElementRef *TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	FareClasses *FareClasses `xml:"FareClasses,omitempty" json:"FareClasses,omitempty"`
	// Type of TRAIN ELEMENT.
	TrainElementType *TrainElementTypeEnumeration `xml:"TrainElementType,omitempty" json:"TrainElementType,omitempty"`
	// Order of TRAIN COMPONENT within TRAIN.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// Train represents the Train element
// A vehicle composed of TRAIN ELEMENTs in a certain order, i.e. of wagons assembled together and propelled by a locomotive or one of the wagons.
type Train struct {
	TrainVersionStructure
}

// TrainSize represents the TrainSize element
// Requirements for TRAIN SIZe.
type TrainSize struct {
	TrainSizeStructure
}

// CompoundTrain represents the CompoundTrain element
// A vehicle composed of COMPOUND TRAIN ELEMENTs in a certain order, i.e. of wagons assembled together and propelled by a locomotive or one of the wagons.
type CompoundTrain struct {
	CompoundTrainVersionStructure
}

// TrainElement represents the TrainElement element
// An elementary component of a TRAIN (e.g. wagon, locomotive).
type TrainElement struct {
	TrainElementVersionStructure
}

// TrainComponent represents the TrainComponent element
// A specification of the order of TRAIN ELEMENTs in a TRAIN.
type TrainComponent struct {
	TrainComponentVersionStructure
}

// TrainComponentView represents the TrainComponentView element
// Simplified view of TRAIN COMPONENT.
type TrainComponentView struct {
	TrainComponentDerivedViewStructure
}

// DataObjectRequestStructure represents the DataObjectRequestStructure element
// Type for Service Request Type for one or more NeTEx Data Objects,
type DataObjectRequestStructure struct {
	AbstractFunctionalServiceRequestStructure
	// One or more Request filters that specify tthe data to be included in output. Multiple filters are logically ANDed.
	Topics Topics `xml:"topics" json:"topics"`
	// Policies to apply when fetching data specified by Topics.
	Policy *NetworkFrameRequestPolicyStructure `xml:"Policy,omitempty" json:"Policy,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
}

// Topics represents the topics element
type Topics struct {
	NetworkFrameTopic NetworkFrameTopic `xml:"NetworkFrameTopic" json:"NetworkFrameTopic"`
}

// DataObjectSubscriptionStructure represents the DataObjectSubscriptionStructure element
// Data type for Subscription Request for  NeTEx Data Object  Service.
type DataObjectSubscriptionStructure struct {
	AbstractSubscriptionStructure
	DataObjectRequest DataObjectRequest `xml:"DataObjectRequest" json:"DataObjectRequest"`
	// Policy to use when processing Network Subscriptions.
	SubscriptionPolicy *NetworkFrameSubscriptionPolicyStructure `xml:"SubscriptionPolicy,omitempty" json:"SubscriptionPolicy,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
}

// DeliveriesStructure represents the DeliveriesStructure element
// Type for Deliveries for  Service.
type DeliveriesStructure struct {
	// Delivery for Stop Event service.
	DataObjectDelivery []DataObjectDelivery `xml:"DataObjectDelivery" json:"DataObjectDelivery"`
}

// DataObjectDeliveryStructure represents the DataObjectDeliveryStructure element
// Data type for Delivery for  Service containing  one or more  NeTEx  Data Objects,.
type DataObjectDeliveryStructure struct {
	AbstractServiceDeliveryStructure
	DataObjectRequest *DataObjectRequest `xml:"DataObjectRequest,omitempty" json:"DataObjectRequest,omitempty"`
	// NeTEx Entities of any type.
	DataObjects *DataObjectsRelStructure `xml:"dataObjects,omitempty" json:"dataObjects,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
}

// DataObjectCapabilitiesResponseStructure represents the DataObjectCapabilitiesResponseStructure element
// Type for Delivery for DATA OBJECT Service.
type DataObjectCapabilitiesResponseStructure struct {
	AbstractServiceCapabilitiesResponseStructure
	DataObjectServiceCapabilities *DataObjectServiceCapabilities `xml:"DataObjectServiceCapabilities,omitempty" json:"DataObjectServiceCapabilities,omitempty"`
	DataObjectPermissions *DataObjectPermissions `xml:"DataObjectPermissions,omitempty" json:"DataObjectPermissions,omitempty"`
	Extensions *Extensions `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	// Version number of response. Fixed
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
}

// DataObjectServiceCapabilitiesStructure represents the DataObjectServiceCapabilitiesStructure element
// Type for DATA OBJECT Capabilities. This is a stub - needs developing .
type DataObjectServiceCapabilitiesStructure struct {
	AbstractCapabilitiesStructure
	// Available Filtering Capabilities.
	TopicFiltering *TopicFiltering `xml:"TopicFiltering,omitempty" json:"TopicFiltering,omitempty"`
	// Available Request Policy capabilities.
	RequestPolicy *DataObjectCapabilityRequestPolicyStructure `xml:"RequestPolicy,omitempty" json:"RequestPolicy,omitempty"`
	// Available Subscription Policy capabilities.
	SubscriptionPolicy *SubscriptionPolicy `xml:"SubscriptionPolicy,omitempty" json:"SubscriptionPolicy,omitempty"`
	// Available Optional Response capabilities.
	ResponseFeatures *interface{} `xml:"ResponseFeatures,omitempty" json:"ResponseFeatures,omitempty"`
}

// TopicFiltering represents the TopicFiltering element
type TopicFiltering struct {
	// Whether results can be filtered by VistitType, e.g. arrivals, departures. Default True.
	FilterByFrame *bool `xml:"FilterByFrame,omitempty" json:"FilterByFrame,omitempty"`
}

// SubscriptionPolicy represents the SubscriptionPolicy element
type SubscriptionPolicy struct {
	// Whether incremental updates can be specified for updates Default is ' true'.
	HasIncrementalUpdates *bool `xml:"HasIncrementalUpdates,omitempty" json:"HasIncrementalUpdates,omitempty"`
}

// DataObjectCapabilityRequestPolicyStructure represents the DataObjectCapabilityRequestPolicyStructure element
// Type for Monitoring Service Capability Request Policy.
type DataObjectCapabilityRequestPolicyStructure struct {
	CapabilityRequestPolicyStructure
}

// DataObjectServicePermissionStructure represents the DataObjectServicePermissionStructure element
// Type for Monitoring Service Permission.
type DataObjectServicePermissionStructure struct {
	Value float32 `xml:",chardata" json:"value"`
}

// DataObjectRequest represents the DataObjectRequest element
// Service Request for one or more  NeTEx Data Objects,.
type DataObjectRequest struct {
	DataObjectRequestStructure
}

// DataObjectSubscriptionRequest represents the DataObjectSubscriptionRequest element
// Request for a subscription to NeTEx Data Object Service.
type DataObjectSubscriptionRequest struct {
	DataObjectSubscriptionStructure
}

// DataObjectDelivery represents the DataObjectDelivery element
// Delivery for NeTEx   Service containing  one or more  NeTEx  Data Objects,.
type DataObjectDelivery struct {
	DataObjectDeliveryStructure
}

// DataObjectCapabilitiesRequest represents the DataObjectCapabilitiesRequest element
// Request for information about DATA OBJECT Service Capabilities. Answered with DataObjectCapabilitiesResponse.
type DataObjectCapabilitiesRequest struct {
	ServiceCapabilitiesRequestStructure
}

// DataObjectCapabilitiesResponse represents the DataObjectCapabilitiesResponse element
// Capabilities for DATA OBJECT Service. Answers a DataObjectCapabilitiesRequest.
type DataObjectCapabilitiesResponse struct {
	DataObjectCapabilitiesResponseStructure
}

// DataObjectServiceCapabilities represents the DataObjectServiceCapabilities element
// Capabilities of DataObject Service.
type DataObjectServiceCapabilities struct {
	DataObjectServiceCapabilitiesStructure
}

// DataObjectPermissions represents the DataObjectPermissions element
// Participants permissions to use the service, Only returned if requested.
type DataObjectPermissions struct {
	// Permission for a single participant or all participants to use an aspect of the service.
	DataObjectPermission []DataObjectServicePermissionStructure `xml:"DataObjectPermission,omitempty" json:"DataObjectPermission,omitempty"`
}

// ServiceCalendarFrameRefStructure represents the ServiceCalendarFrameRefStructure element
// Type for a reference to a SERVICE CALENDAR FRAME.
type ServiceCalendarFrameRefStructure struct {
	VersionFrameRefStructure
}

// ServiceCalendarFrameRef represents the ServiceCalendarFrameRef element
// Reference to a SERVICE CALENDAR FRAME.
type ServiceCalendarFrameRef struct {
	ServiceCalendarFrameRefStructure
}

// ServiceCalendarFrameVersionFrameStructure represents the ServiceCalendarFrame_VersionFrameStructure element
// Type for a SERVICE CALENDAR.
type ServiceCalendarFrameVersionFrameStructure struct {
	CommonVersionFrameStructure
	ServiceCalendar *ServiceCalendar `xml:"ServiceCalendar,omitempty" json:"ServiceCalendar,omitempty"`
	// Reusable DAY TYPE  in SERVICE CALENDAR FRAME.
	DayTypes *DayTypesInFrameRelStructure `xml:"dayTypes,omitempty" json:"dayTypes,omitempty"`
	// Reusable TIMEBANDs used in SERVICE CALENDAR FRAME.
	Timebands *TimebandsInFrameRelStructure `xml:"timebands,omitempty" json:"timebands,omitempty"`
	// GROUPs OF TIMEBANDs   in SERVICE CALENDAR FRAME.
	GroupOfTimebands *GroupOfTimebandsInFrameRelStructure `xml:"groupOfTimebands,omitempty" json:"groupOfTimebands,omitempty"`
	// Days found in Calendar between start and end date. Dates must fall between the start and end date of the calendar.  There is a day for every date in the calendar validity period. Days do not have to be explicitly declared if there is no additional information.
	OperatingDays *OperatingDaysInFrameRelStructure `xml:"operatingDays,omitempty" json:"operatingDays,omitempty"`
	// OPERATING PERIODs belonging to calendar. Named periods. Must fall within the overall validity period of the calendar.
	OperatingPeriods *OperatingPeriodsInFrameRelStructure `xml:"operatingPeriods,omitempty" json:"operatingPeriods,omitempty"`
	// Assignments of DAY TYPEs to specific OPERATING DAYs. The same DAY TYPE may be assigned to multiple Operating dates, and vice versa.
	DayTypeAssignments *DayTypeAssignmentsInFrameRelStructure `xml:"dayTypeAssignments,omitempty" json:"dayTypeAssignments,omitempty"`
}

// ServiceCalendarFrame represents the ServiceCalendarFrame element
// A SERVICE CALENDAR. A coherent set of OPERATING DAYS and DAY TYPES comprising a Calendar.  that may be used to state the temporal VALIDITY of other NeTEx entities such as Timetables, STOP PLACEs, etc. Covers a PERIOD with a collection of assignments of OPERATING DAYS to DAY TYPES.
type ServiceCalendarFrame struct {
	ServiceCalendarFrameVersionFrameStructure
}

// ResourceFrameRefStructure represents the ResourceFrameRefStructure element
// Type for a reference to a RESOURCE FRAME.
type ResourceFrameRefStructure struct {
	VersionFrameRefStructure
}

// ResourceFrameRef represents the ResourceFrameRef element
// Reference to a RESOURCE FRAME.
type ResourceFrameRef struct {
	ResourceFrameRefStructure
}

// ResourceFrameVersionFrameStructure represents the ResourceFrame_VersionFrameStructure element
// Type for a RESOURCE.
type ResourceFrameVersionFrameStructure struct {
	CommonVersionFrameStructure
	// Definitions of DATA SOURCE included in frame.
	DataSources *DataSourcesInFrameRelStructure `xml:"dataSources,omitempty" json:"dataSources,omitempty"`
	// RESPONSIBILITY Roles used in frame.
	ResponsibilityRoles *ResponsibilityRolesInFrameRelStructure `xml:"responsibilityRoles,omitempty" json:"responsibilityRoles,omitempty"`
	// RESPONSIBILITY SETs used in frame.
	ResponsibilitySets *ResponsibilitySetsInFrameRelStructure `xml:"responsibilitySets,omitempty" json:"responsibilitySets,omitempty"`
	// VALUE SETs and  TYPE OF VALUEs in frame.
	TypesOfValue *TypesOfValueInFrameRelStructure `xml:"typesOfValue,omitempty" json:"typesOfValue,omitempty"`
	// Reusable CONTACTs in frame.
	Contacts *ContactsRelStructure `xml:"contacts,omitempty" json:"contacts,omitempty"`
	// ORGANISATIONs in frame.
	Organisations *OrganisationsInFrameRelStructure `xml:"organisations,omitempty" json:"organisations,omitempty"`
	// GROUPs OF OPERATORs in frame.
	GroupsOfOperators *GroupsOfOperatorsInFrameRelStructure `xml:"groupsOfOperators,omitempty" json:"groupsOfOperators,omitempty"`
	// OPERATIONAL CONTEXTs in frame.
	OperationalContexts *OperationalContextsInFrameRelStructure `xml:"operationalContexts,omitempty" json:"operationalContexts,omitempty"`
	// CONTROL CENTREs in frame.
	ControlCentres *ControlCentresInFrameRelStructure `xml:"controlCentres,omitempty" json:"controlCentres,omitempty"`
	// OPEN MODES in FRAME
	OpenModes *OpenModesRelStructure `xml:"openModes,omitempty" json:"openModes,omitempty"`
	// MODES OF OPERATION in frame.
	ModesOfOperation *ModesOfOperationRelStructure `xml:"modesOfOperation,omitempty" json:"modesOfOperation,omitempty"`
	// EQUIPMENTs in frame.
	Equipments *EquipmentsInFrameRelStructure `xml:"equipments,omitempty" json:"equipments,omitempty"`
	// SITE FACILITY SETs in frame . +v1.2.2
	SiteFacilitySets *SiteFacilitySetsInFrameRelStructure `xml:"siteFacilitySets,omitempty" json:"siteFacilitySets,omitempty"`
	// SERVICE FACILITY SETs in frame . +v1.2.2
	ServiceFacilitySets *ServiceFacilitySetsInFrameRelStructure `xml:"serviceFacilitySets,omitempty" json:"serviceFacilitySets,omitempty"`
	// VEHICLE TYPEs in frame.
	VehicleTypes *VehicleTypesInFrameRelStructure `xml:"vehicleTypes,omitempty" json:"vehicleTypes,omitempty"`
	// VEHICLE MODELs in frame.
	VehicleModels *VehicleModelsInFrameRelStructure `xml:"vehicleModels,omitempty" json:"vehicleModels,omitempty"`
	// VEHICLE EQUIPMENT PROFILEs in frame.
	VehicleEquipmentProfiles *VehicleEquipmenProfilesInFrameRelStructure `xml:"vehicleEquipmentProfiles,omitempty" json:"vehicleEquipmentProfiles,omitempty"`
	// VEHICLE MODEL PROFILEs in frame. +v1.2.2
	VehicleModelProfiles *VehicleModelProfilesInFrameRelStructure `xml:"vehicleModelProfiles,omitempty" json:"vehicleModelProfiles,omitempty"`
	// VEHICLEs in frame.
	Vehicles *VehiclesInFrameRelStructure `xml:"vehicles,omitempty" json:"vehicles,omitempty"`
	// SCHEMATIC MAP in frame.
	SchematicMaps *SchematicMapsInFrameRelStructure `xml:"schematicMaps,omitempty" json:"schematicMaps,omitempty"`
	// GROUPs of ENTITIEs in frame.
	GroupsOfEntities *GroupOfEntitiesInFrameRelStructure `xml:"groupsOfEntities,omitempty" json:"groupsOfEntities,omitempty"`
	// ZONEs in FRAME
	Zones *ZonesInFrameRelStructure `xml:"zones,omitempty" json:"zones,omitempty"`
	// BLACK LISTs in FRAME.
	Blacklists *BlacklistsInFrameRelStructure `xml:"blacklists,omitempty" json:"blacklists,omitempty"`
	// WHITE LISTs in FRAME.
	Whitelists *WhitelistsInFrameRelStructure `xml:"whitelists,omitempty" json:"whitelists,omitempty"`
}

// ResourceFrame represents the ResourceFrame element
// A coherent set of reference values for TYPE OF VALUEs , ORGANISATIONs, VEHICLE TYPEs etc that have a common validity, as specified by a set of frame VALIDITY CONDITIONs. Used to define common resources that will be referenced by other types of FRAME.
type ResourceFrame struct {
	ResourceFrameVersionFrameStructure
}

// EntityEntityStructure represents the Entity_EntityStructure element
// Type for a ENTITY. Will contain one or more versions of the appropriate ENTITY IN VERSION.
type EntityEntityStructure struct {
	EntityStructure
	// Versions of theENTITY.
	Versions EntitiesInVersionRelStructure `xml:"versions" json:"versions"`
	// Date ENTITY was first created.
	Created *time.Time `xml:"created,attr,omitempty" json:"created,omitempty"`
	// Date ENTITY or version was last changed.
	Changed *time.Time `xml:"changed,attr,omitempty" json:"changed,omitempty"`
}

// EntityEntity represents the Entity_Entity element
// ENTITY. Will contain one or more ENTITY IN VERSIONs.
type EntityEntity struct {
	EntityEntityStructure
}

// EntityInVersionInFrameRelStructure represents the entityInVersionInFrame_RelStructure element
// Type for an ENTITIY IN VERSION IN FRAME member.
type EntityInVersionInFrameRelStructure struct {
	ContainmentAggregationStructure
	TripLegRef []TripLegRef `xml:"TripLegRef,omitempty" json:"TripLegRef,omitempty"`
	IndividualPassengerInfoRef []IndividualPassengerInfoRef `xml:"IndividualPassengerInfoRef,omitempty" json:"IndividualPassengerInfoRef,omitempty"`
	VehiclePoolingDriverInfoRef []VehiclePoolingDriverInfoRef `xml:"VehiclePoolingDriverInfoRef,omitempty" json:"VehiclePoolingDriverInfoRef,omitempty"`
	IndividualTravellerRef []IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	ServiceAccessCodeRef []ServiceAccessCodeRef `xml:"ServiceAccessCodeRef,omitempty" json:"ServiceAccessCodeRef,omitempty"`
	TravelDocumentRef []TravelDocumentRef `xml:"TravelDocumentRef,omitempty" json:"TravelDocumentRef,omitempty"`
	RepeatedTripFareRequestRef []RepeatedTripFareRequestRef `xml:"RepeatedTripFareRequestRef,omitempty" json:"RepeatedTripFareRequestRef,omitempty"`
	SingleTripFareRequestRef []SingleTripFareRequestRef `xml:"SingleTripFareRequestRef,omitempty" json:"SingleTripFareRequestRef,omitempty"`
	FareRequestRef []FareRequestRef `xml:"FareRequestRef,omitempty" json:"FareRequestRef,omitempty"`
	StopFinderRequestRef []StopFinderRequestRef `xml:"StopFinderRequestRef,omitempty" json:"StopFinderRequestRef,omitempty"`
	StopEventRequestRef []StopEventRequestRef `xml:"StopEventRequestRef,omitempty" json:"StopEventRequestRef,omitempty"`
	ScheduleRequestRef []ScheduleRequestRef `xml:"ScheduleRequestRef,omitempty" json:"ScheduleRequestRef,omitempty"`
	TripPlanRequestRef []TripPlanRequestRef `xml:"TripPlanRequestRef,omitempty" json:"TripPlanRequestRef,omitempty"`
	CustomerPaymentMeansRef []CustomerPaymentMeansRef `xml:"CustomerPaymentMeansRef,omitempty" json:"CustomerPaymentMeansRef,omitempty"`
	MediumApplicationInstanceRef []MediumApplicationInstanceRef `xml:"MediumApplicationInstanceRef,omitempty" json:"MediumApplicationInstanceRef,omitempty"`
	MobileDeviceRef []MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef []EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef []SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	ResidentialQualificationEligibilityRef []ResidentialQualificationEligibilityRef `xml:"ResidentialQualificationEligibilityRef,omitempty" json:"ResidentialQualificationEligibilityRef,omitempty"`
	CommercialProfileEligibilityRef []CommercialProfileEligibilityRef `xml:"CommercialProfileEligibilityRef,omitempty" json:"CommercialProfileEligibilityRef,omitempty"`
	UserProfileEligibilityRef []UserProfileEligibilityRef `xml:"UserProfileEligibilityRef,omitempty" json:"UserProfileEligibilityRef,omitempty"`
	CustomerAccountRef []CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	FareContractRef []FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
	CustomerRef []CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	VehicleTypeZoneRestrictionRef []VehicleTypeZoneRestrictionRef `xml:"VehicleTypeZoneRestrictionRef,omitempty" json:"VehicleTypeZoneRestrictionRef,omitempty"`
	StartTimeAtStopPointRef []StartTimeAtStopPointRef `xml:"StartTimeAtStopPointRef,omitempty" json:"StartTimeAtStopPointRef,omitempty"`
	ResidentialQualificationRef []ResidentialQualificationRef `xml:"ResidentialQualificationRef,omitempty" json:"ResidentialQualificationRef,omitempty"`
	TypeOfConcessionRef []TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	TypeOfUsageParameterRef []TypeOfUsageParameterRef `xml:"TypeOfUsageParameterRef,omitempty" json:"TypeOfUsageParameterRef,omitempty"`
	TariffObjectRef []TariffObjectRef `xml:"TariffObjectRef,omitempty" json:"TariffObjectRef,omitempty"`
	ParkingTariffRef []ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef []TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	TypeOfFareTableRef []TypeOfFareTableRef `xml:"TypeOfFareTableRef,omitempty" json:"TypeOfFareTableRef,omitempty"`
	FareTableRowRef []FareTableRowRef `xml:"FareTableRowRef,omitempty" json:"FareTableRowRef,omitempty"`
	FareTableColumnRef []FareTableColumnRef `xml:"FareTableColumnRef,omitempty" json:"FareTableColumnRef,omitempty"`
	TimeUnitRef []TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	GeographicalUnitRef []GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	ControllableElementInSequenceRef []ControllableElementInSequenceRef `xml:"ControllableElementInSequenceRef,omitempty" json:"ControllableElementInSequenceRef,omitempty"`
	FareStructureElementInSequenceRef []FareStructureElementInSequenceRef `xml:"FareStructureElementInSequenceRef,omitempty" json:"FareStructureElementInSequenceRef,omitempty"`
	AccessRightInProductRef []AccessRightInProductRef `xml:"AccessRightInProductRef,omitempty" json:"AccessRightInProductRef,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	CustomerPurchasePackagePriceRef []CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef []ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef []TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef []TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef []QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef []ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef []ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef []GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef []GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef []UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef []SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef []SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef []DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef []FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef []FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef []CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef []FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef []FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CustomerPurchasePackageElementRef []CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
	CustomerPurchasePackageRef []CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	ControllableElementRef []ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	ValidableElementRef []ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	AdditionalDriverOptionRef []AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef []RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef []RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef []SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef []SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef []MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef []InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef []FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef []SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef []UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef []StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef []RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef []RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef []LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef []EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef []EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef []EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef []GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef []CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef []VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef []CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef []UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef []ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef []SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef []PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef []ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef []TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef []ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef []RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef []ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef []ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef []CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef []ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef []BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef []PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
	SeriesConstraintRef []SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	SalesOfferPackageElementRef []SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	SalesOfferPackageRef []SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	DistanceMatrixElementInverseRef []DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
	DistanceMatrixElementRef []DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	FareStructureElementRef []FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	FulfilmentMethodRef []FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	CappingRuleRef []CappingRuleRef `xml:"CappingRuleRef,omitempty" json:"CappingRuleRef,omitempty"`
	EntitlementProductRef []EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef []SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef []PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef []AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef []UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef []ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef []CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef []SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef []FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef []ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	TimeIntervalRef []TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	GeographicalIntervalRef []GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	ParkingChargeBandRef []ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef []TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	FareQuotaFactorRef []FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef []FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef []QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	GeographicalStructureFactorRef []GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	PriceableObjectRef []PriceableObjectRef `xml:"PriceableObjectRef,omitempty" json:"PriceableObjectRef,omitempty"`
	MonthValidityOffsetRef []MonthValidityOffsetRef `xml:"MonthValidityOffsetRef,omitempty" json:"MonthValidityOffsetRef,omitempty"`
	LimitingRuleRef []LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef []DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef []PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	PricingServiceRef []PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	RoundingStepRef []RoundingStepRef `xml:"RoundingStepRef,omitempty" json:"RoundingStepRef,omitempty"`
	RoundingRef []RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	PricingParameterSetRef []PricingParameterSetRef `xml:"PricingParameterSetRef,omitempty" json:"PricingParameterSetRef,omitempty"`
	FlexibleServicePropertiesRef []FlexibleServicePropertiesRef `xml:"FlexibleServicePropertiesRef,omitempty" json:"FlexibleServicePropertiesRef,omitempty"`
	DriverTripTimeRef []DriverTripTimeRef `xml:"DriverTripTimeRef,omitempty" json:"DriverTripTimeRef,omitempty"`
	DriverTripRef []DriverTripRef `xml:"DriverTripRef,omitempty" json:"DriverTripRef,omitempty"`
	DutyPartRef []DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
	AccountableElementRef []AccountableElementRef `xml:"AccountableElementRef,omitempty" json:"AccountableElementRef,omitempty"`
	DutyRef []DutyRef `xml:"DutyRef,omitempty" json:"DutyRef,omitempty"`
	ReliefOpportunityRef []ReliefOpportunityRef `xml:"ReliefOpportunityRef,omitempty" json:"ReliefOpportunityRef,omitempty"`
	CourseOfJourneysRef []CourseOfJourneysRef `xml:"CourseOfJourneysRef,omitempty" json:"CourseOfJourneysRef,omitempty"`
	DriverRef []DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
	VehicleServicePartRef []VehicleServicePartRef `xml:"VehicleServicePartRef,omitempty" json:"VehicleServicePartRef,omitempty"`
	VehicleServiceRef []VehicleServiceRef `xml:"VehicleServiceRef,omitempty" json:"VehicleServiceRef,omitempty"`
	CompoundBlockRef []CompoundBlockRef `xml:"CompoundBlockRef,omitempty" json:"CompoundBlockRef,omitempty"`
	TrainBlockPartRef []TrainBlockPartRef `xml:"TrainBlockPartRef,omitempty" json:"TrainBlockPartRef,omitempty"`
	BlockPartRef []BlockPartRef `xml:"BlockPartRef,omitempty" json:"BlockPartRef,omitempty"`
	TrainBlockRef []TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef []BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	JourneyPartCoupleRef []JourneyPartCoupleRef `xml:"JourneyPartCoupleRef,omitempty" json:"JourneyPartCoupleRef,omitempty"`
	CoupledJourneyRef []CoupledJourneyRef `xml:"CoupledJourneyRef,omitempty" json:"CoupledJourneyRef,omitempty"`
	JourneyPartRef []JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	TimetabledPassingTimeRef []TimetabledPassingTimeRef `xml:"TimetabledPassingTimeRef,omitempty" json:"TimetabledPassingTimeRef,omitempty"`
	EstimatedPassingTimeRef []EstimatedPassingTimeRef `xml:"EstimatedPassingTimeRef,omitempty" json:"EstimatedPassingTimeRef,omitempty"`
	ObservedPassingTimeRef []ObservedPassingTimeRef `xml:"ObservedPassingTimeRef,omitempty" json:"ObservedPassingTimeRef,omitempty"`
	TargetPassingTimeRef []TargetPassingTimeRef `xml:"TargetPassingTimeRef,omitempty" json:"TargetPassingTimeRef,omitempty"`
	PassingTimeRef []PassingTimeRef `xml:"PassingTimeRef,omitempty" json:"PassingTimeRef,omitempty"`
	InterchangeRuleTimingRef []InterchangeRuleTimingRef `xml:"InterchangeRuleTimingRef,omitempty" json:"InterchangeRuleTimingRef,omitempty"`
	InterchangeRuleRef []InterchangeRuleRef `xml:"InterchangeRuleRef,omitempty" json:"InterchangeRuleRef,omitempty"`
	ServiceJourneyPatternInterchangeRef []ServiceJourneyPatternInterchangeRef `xml:"ServiceJourneyPatternInterchangeRef,omitempty" json:"ServiceJourneyPatternInterchangeRef,omitempty"`
	ServiceJourneyInterchangeRef []ServiceJourneyInterchangeRef `xml:"ServiceJourneyInterchangeRef,omitempty" json:"ServiceJourneyInterchangeRef,omitempty"`
	DefaultInterchangeRef []DefaultInterchangeRef `xml:"DefaultInterchangeRef,omitempty" json:"DefaultInterchangeRef,omitempty"`
	InterchangeRef []InterchangeRef `xml:"InterchangeRef,omitempty" json:"InterchangeRef,omitempty"`
	JourneyMeetingRef []JourneyMeetingRef `xml:"JourneyMeetingRef,omitempty" json:"JourneyMeetingRef,omitempty"`
	SupplyContractRef []SupplyContractRef `xml:"SupplyContractRef,omitempty" json:"SupplyContractRef,omitempty"`
	TrainNumberRef []TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	RoutingConstraintZoneRef []RoutingConstraintZoneRef `xml:"RoutingConstraintZoneRef,omitempty" json:"RoutingConstraintZoneRef,omitempty"`
	VehiclePositionAlignmentRef []VehiclePositionAlignmentRef `xml:"VehiclePositionAlignmentRef,omitempty" json:"VehiclePositionAlignmentRef,omitempty"`
	VehicleQuayAlignmentRef []VehicleQuayAlignmentRef `xml:"VehicleQuayAlignmentRef,omitempty" json:"VehicleQuayAlignmentRef,omitempty"`
	LogicalDisplayRef []LogicalDisplayRef `xml:"LogicalDisplayRef,omitempty" json:"LogicalDisplayRef,omitempty"`
	ParkingPropertiesRef []ParkingPropertiesRef `xml:"ParkingPropertiesRef,omitempty" json:"ParkingPropertiesRef,omitempty"`
	ParkingCapacityRef []ParkingCapacityRef `xml:"ParkingCapacityRef,omitempty" json:"ParkingCapacityRef,omitempty"`
	LineNetworkRef []LineNetworkRef `xml:"LineNetworkRef,omitempty" json:"LineNetworkRef,omitempty"`
	RouteInstructionRef []RouteInstructionRef `xml:"RouteInstructionRef,omitempty" json:"RouteInstructionRef,omitempty"`
	FlexiblePointPropertiesRef []FlexiblePointPropertiesRef `xml:"FlexiblePointPropertiesRef,omitempty" json:"FlexiblePointPropertiesRef,omitempty"`
	FlexibleLinkPropertiesRef []FlexibleLinkPropertiesRef `xml:"FlexibleLinkPropertiesRef,omitempty" json:"FlexibleLinkPropertiesRef,omitempty"`
	TimeDemandProfileRef []TimeDemandProfileRef `xml:"TimeDemandProfileRef,omitempty" json:"TimeDemandProfileRef,omitempty"`
	TimeDemandTypeRef []TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	VehicleTypePreferenceRef []VehicleTypePreferenceRef `xml:"VehicleTypePreferenceRef,omitempty" json:"VehicleTypePreferenceRef,omitempty"`
	JourneyPatternHeadwayRef []JourneyPatternHeadwayRef `xml:"JourneyPatternHeadwayRef,omitempty" json:"JourneyPatternHeadwayRef,omitempty"`
	JourneyPatternLayoverRef []JourneyPatternLayoverRef `xml:"JourneyPatternLayoverRef,omitempty" json:"JourneyPatternLayoverRef,omitempty"`
	JourneyPatternRunTimeRef []JourneyPatternRunTimeRef `xml:"JourneyPatternRunTimeRef,omitempty" json:"JourneyPatternRunTimeRef,omitempty"`
	JourneyPatternWaitTimeRef []JourneyPatternWaitTimeRef `xml:"JourneyPatternWaitTimeRef,omitempty" json:"JourneyPatternWaitTimeRef,omitempty"`
	DefaultServiceJourneyTimeRef []DefaultServiceJourneyTimeRef `xml:"DefaultServiceJourneyTimeRef,omitempty" json:"DefaultServiceJourneyTimeRef,omitempty"`
	DefaultDeadRunRunTimeRef []DefaultDeadRunRunTimeRef `xml:"DefaultDeadRunRunTimeRef,omitempty" json:"DefaultDeadRunRunTimeRef,omitempty"`
	TurnaroundTimeLimitTimeRef []TurnaroundTimeLimitTimeRef `xml:"TurnaroundTimeLimitTimeRef,omitempty" json:"TurnaroundTimeLimitTimeRef,omitempty"`
	JourneyTimingRef []JourneyTimingRef `xml:"JourneyTimingRef,omitempty" json:"JourneyTimingRef,omitempty"`
	CrewBaseRef []CrewBaseRef `xml:"CrewBaseRef,omitempty" json:"CrewBaseRef,omitempty"`
	TrainComponentRef []TrainComponentRef `xml:"TrainComponentRef,omitempty" json:"TrainComponentRef,omitempty"`
	TrainElementRef []TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	TrainInCompoundTrainRef []TrainInCompoundTrainRef `xml:"TrainInCompoundTrainRef,omitempty" json:"TrainInCompoundTrainRef,omitempty"`
	PassengerSeatRef []PassengerSeatRef `xml:"PassengerSeatRef,omitempty" json:"PassengerSeatRef,omitempty"`
	TravelDocumentSecurityListingRef []TravelDocumentSecurityListingRef `xml:"TravelDocumentSecurityListingRef,omitempty" json:"TravelDocumentSecurityListingRef,omitempty"`
	MediumAccessDeviceSecurityListingRef []MediumAccessDeviceSecurityListingRef `xml:"MediumAccessDeviceSecurityListingRef,omitempty" json:"MediumAccessDeviceSecurityListingRef,omitempty"`
	RetailDeviceSecurityListingRef []RetailDeviceSecurityListingRef `xml:"RetailDeviceSecurityListingRef,omitempty" json:"RetailDeviceSecurityListingRef,omitempty"`
	CustomerAccountSecurityListingRef []CustomerAccountSecurityListingRef `xml:"CustomerAccountSecurityListingRef,omitempty" json:"CustomerAccountSecurityListingRef,omitempty"`
	FareContractSecurityListingRef []FareContractSecurityListingRef `xml:"FareContractSecurityListingRef,omitempty" json:"FareContractSecurityListingRef,omitempty"`
	CustomerSecurityListingRef []CustomerSecurityListingRef `xml:"CustomerSecurityListingRef,omitempty" json:"CustomerSecurityListingRef,omitempty"`
	WhitelistRef []WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	BlacklistRef []BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
	SchematicMapMemberRef []SchematicMapMemberRef `xml:"SchematicMapMemberRef,omitempty" json:"SchematicMapMemberRef,omitempty"`
	SchematicMapRef []SchematicMapRef `xml:"SchematicMapRef,omitempty" json:"SchematicMapRef,omitempty"`
	CycleModelProfileRef []CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef []CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
	ModeRestrictionAssessmentRef []ModeRestrictionAssessmentRef `xml:"ModeRestrictionAssessmentRef,omitempty" json:"ModeRestrictionAssessmentRef,omitempty"`
	DeliveryVariantRef []DeliveryVariantRef `xml:"DeliveryVariantRef,omitempty" json:"DeliveryVariantRef,omitempty"`
	NoticeRef []NoticeRef `xml:"NoticeRef,omitempty" json:"NoticeRef,omitempty"`
	VehicleProfileRef []VehicleProfileRef `xml:"VehicleProfileRef,omitempty" json:"VehicleProfileRef,omitempty"`
	VehicleEquipmentProfileMemberRef []VehicleEquipmentProfileMemberRef `xml:"VehicleEquipmentProfileMemberRef,omitempty" json:"VehicleEquipmentProfileMemberRef,omitempty"`
	ChargingEquipmentProfileRef []ChargingEquipmentProfileRef `xml:"ChargingEquipmentProfileRef,omitempty" json:"ChargingEquipmentProfileRef,omitempty"`
	VehicleEquipmentProfileRef []VehicleEquipmentProfileRef `xml:"VehicleEquipmentProfileRef,omitempty" json:"VehicleEquipmentProfileRef,omitempty"`
	VehicleModelRef []VehicleModelRef `xml:"VehicleModelRef,omitempty" json:"VehicleModelRef,omitempty"`
	VehicleRef []VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	PassengerCapacityRef []PassengerCapacityRef `xml:"PassengerCapacityRef,omitempty" json:"PassengerCapacityRef,omitempty"`
	FacilityRequirementRef []FacilityRequirementRef `xml:"FacilityRequirementRef,omitempty" json:"FacilityRequirementRef,omitempty"`
	VehicleManoeuvringRequirementRef []VehicleManoeuvringRequirementRef `xml:"VehicleManoeuvringRequirementRef,omitempty" json:"VehicleManoeuvringRequirementRef,omitempty"`
	PassengerCarryingRequirementRef []PassengerCarryingRequirementRef `xml:"PassengerCarryingRequirementRef,omitempty" json:"PassengerCarryingRequirementRef,omitempty"`
	VehicleRequirementRef []VehicleRequirementRef `xml:"VehicleRequirementRef,omitempty" json:"VehicleRequirementRef,omitempty"`
	SimpleVehicleTypeRef []SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef []CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef []TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef []VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef []TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	OnboardStayRef []OnboardStayRef `xml:"OnboardStayRef,omitempty" json:"OnboardStayRef,omitempty"`
	AccommodationRef []AccommodationRef `xml:"AccommodationRef,omitempty" json:"AccommodationRef,omitempty"`
	ServiceFacilitySetRef []ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	SiteFacilitySetRef []SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	FacilitySetRef []FacilitySetRef `xml:"FacilitySetRef,omitempty" json:"FacilitySetRef,omitempty"`
	FacilityRef []FacilityRef `xml:"FacilityRef,omitempty" json:"FacilityRef,omitempty"`
	OperatingDepartmentRef []OperatingDepartmentRef `xml:"OperatingDepartmentRef,omitempty" json:"OperatingDepartmentRef,omitempty"`
	OperationalContextRef []OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	LevelRef []LevelRef `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	ModeRef []ModeRef `xml:"ModeRef,omitempty" json:"ModeRef,omitempty"`
	SubmodeRef []SubmodeRef `xml:"SubmodeRef,omitempty" json:"SubmodeRef,omitempty"`
	OpenTransportModeRef []OpenTransportModeRef `xml:"OpenTransportModeRef,omitempty" json:"OpenTransportModeRef,omitempty"`
	TopographicProjectionRef []TopographicProjectionRef `xml:"TopographicProjectionRef,omitempty" json:"TopographicProjectionRef,omitempty"`
	ComplexFeatureProjectionRef []ComplexFeatureProjectionRef `xml:"ComplexFeatureProjectionRef,omitempty" json:"ComplexFeatureProjectionRef,omitempty"`
	LinkSequenceProjectionRef []LinkSequenceProjectionRef `xml:"LinkSequenceProjectionRef,omitempty" json:"LinkSequenceProjectionRef,omitempty"`
	ZoneProjectionRef []ZoneProjectionRef `xml:"ZoneProjectionRef,omitempty" json:"ZoneProjectionRef,omitempty"`
	LinkProjectionRef []LinkProjectionRef `xml:"LinkProjectionRef,omitempty" json:"LinkProjectionRef,omitempty"`
	PointProjectionRef []PointProjectionRef `xml:"PointProjectionRef,omitempty" json:"PointProjectionRef,omitempty"`
	TripRef []TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef []TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef []SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef []SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef []DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef []DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef []SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef []TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef []ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef []DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef []VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef []ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef []ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef []DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef []JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef []TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef []NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef []RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	LinkSequenceRef []LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
	ContactRef []ContactRef `xml:"ContactRef,omitempty" json:"ContactRef,omitempty"`
	SalesTransactionRef []SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	OfferedTravelSpecificationRef []OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	RequestedTravelSpecificationRef []RequestedTravelSpecificationRef `xml:"RequestedTravelSpecificationRef,omitempty" json:"RequestedTravelSpecificationRef,omitempty"`
	TravelSpecificationRef []TravelSpecificationRef `xml:"TravelSpecificationRef,omitempty" json:"TravelSpecificationRef,omitempty"`
	FareContractEntryRef []FareContractEntryRef `xml:"FareContractEntryRef,omitempty" json:"FareContractEntryRef,omitempty"`
	LogEntryRef []LogEntryRef `xml:"LogEntryRef,omitempty" json:"LogEntryRef,omitempty"`
	AlternativeNameRef []AlternativeNameRef `xml:"AlternativeNameRef,omitempty" json:"AlternativeNameRef,omitempty"`
	TimebandRef []TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	FareDayTypeRef []FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef []DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	DefaultConnectionRef []DefaultConnectionRef `xml:"DefaultConnectionRef,omitempty" json:"DefaultConnectionRef,omitempty"`
	SiteConnectionRef []SiteConnectionRef `xml:"SiteConnectionRef,omitempty" json:"SiteConnectionRef,omitempty"`
	ConnectionRef []ConnectionRef `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	AccessRef []AccessRef `xml:"AccessRef,omitempty" json:"AccessRef,omitempty"`
	HailAndRideAreaRef []HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef []FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef []FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
	FlexibleStopPlaceRef []FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	PathJunctionRef []PathJunctionRef `xml:"PathJunctionRef,omitempty" json:"PathJunctionRef,omitempty"`
	EquipmentPlaceRef []EquipmentPlaceRef `xml:"EquipmentPlaceRef,omitempty" json:"EquipmentPlaceRef,omitempty"`
	EquipmentPositionRef []EquipmentPositionRef `xml:"EquipmentPositionRef,omitempty" json:"EquipmentPositionRef,omitempty"`
	TopographicPlaceRef []TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	VehiclePoolingMeetingPlaceRef []VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef []VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	GarageRef []GarageRef `xml:"GarageRef,omitempty" json:"GarageRef,omitempty"`
	VehicleStoppingPositionRef []VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef []VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef []BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef []AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef []TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef []QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef []StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef []VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef []MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef []VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef []ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef []VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef []VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef []TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef []ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef []PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef []StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef []StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef []ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef []ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef []ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef []PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef []PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef []EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef []SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef []TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef []StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef []ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef []PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef []ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef []SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef []SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	AddressablePlaceRef []AddressablePlaceRef `xml:"AddressablePlaceRef,omitempty" json:"AddressablePlaceRef,omitempty"`
	PostalAddressRef []PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef []RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef []AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
	OnwardVehicleMeetingLinkRef []OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef []VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef []ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef []LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef []TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef []WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef []RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef []RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef []ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef []PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef []RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	VehicleMeetingPointRef []VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef []WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef []RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef []RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef []TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef []BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef []ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef []BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef []FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef []ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef []GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef []ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef []ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef []TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef []RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef []PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	UicOperatingPeriodRef []UicOperatingPeriodRef `xml:"UicOperatingPeriodRef,omitempty" json:"UicOperatingPeriodRef,omitempty"`
	OperatingPeriodRef []OperatingPeriodRef `xml:"OperatingPeriodRef,omitempty" json:"OperatingPeriodRef,omitempty"`
	OperatingDayRef []OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	ServiceCalendarRef []ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	AlternativeTextRef []AlternativeTextRef `xml:"AlternativeTextRef,omitempty" json:"AlternativeTextRef,omitempty"`
	AvailabilityConditionRef []AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	ValidityRuleParameterRef []ValidityRuleParameterRef `xml:"ValidityRuleParameterRef,omitempty" json:"ValidityRuleParameterRef,omitempty"`
	ValidityTriggerRef []ValidityTriggerRef `xml:"ValidityTriggerRef,omitempty" json:"ValidityTriggerRef,omitempty"`
	ValidityConditionRef []ValidityConditionRef `xml:"ValidityConditionRef,omitempty" json:"ValidityConditionRef,omitempty"`
	ResponsibilityRoleRef []ResponsibilityRoleRef `xml:"ResponsibilityRoleRef,omitempty" json:"ResponsibilityRoleRef,omitempty"`
	ControlCentreRef []ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	OrganisationalUnitRef []OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	DepartmentRef []DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
	OrganisationPartRef []OrganisationPartRef `xml:"OrganisationPartRef,omitempty" json:"OrganisationPartRef,omitempty"`
	AllAuthoritiesRef []AllAuthoritiesRef `xml:"AllAuthoritiesRef,omitempty" json:"AllAuthoritiesRef,omitempty"`
	AllOperatorsRef []AllOperatorsRef `xml:"AllOperatorsRef,omitempty" json:"AllOperatorsRef,omitempty"`
	AllPublicTransportOrganisationsRef []AllPublicTransportOrganisationsRef `xml:"AllPublicTransportOrganisationsRef,omitempty" json:"AllPublicTransportOrganisationsRef,omitempty"`
	AllTransportOrganisationsRef []AllTransportOrganisationsRef `xml:"AllTransportOrganisationsRef,omitempty" json:"AllTransportOrganisationsRef,omitempty"`
	AllOrganisationsRef []AllOrganisationsRef `xml:"AllOrganisationsRef,omitempty" json:"AllOrganisationsRef,omitempty"`
	RetailConsortiumRef []RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef []OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef []GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef []ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef []ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef []TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef []OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef []AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef []OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef []OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	ResponsibilitySetRef []ResponsibilitySetRef `xml:"ResponsibilitySetRef,omitempty" json:"ResponsibilitySetRef,omitempty"`
	DestinationDisplayVariantRef []DestinationDisplayVariantRef `xml:"DestinationDisplayVariantRef,omitempty" json:"DestinationDisplayVariantRef,omitempty"`
	DestinationDisplayRef []DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	AllowedLineDirectionRef []AllowedLineDirectionRef `xml:"AllowedLineDirectionRef,omitempty" json:"AllowedLineDirectionRef,omitempty"`
	FlexibleLineRef []FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef []LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	GroupOfCustomerPurchasePackagesRef []GroupOfCustomerPurchasePackagesRef `xml:"GroupOfCustomerPurchasePackagesRef,omitempty" json:"GroupOfCustomerPurchasePackagesRef,omitempty"`
	PoolOfVehiclesRef []PoolOfVehiclesRef `xml:"PoolOfVehiclesRef,omitempty" json:"PoolOfVehiclesRef,omitempty"`
	GroupOfSalesOfferPackagesRef []GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
	GroupOfDistanceMatrixElementsRef []GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfDistributionChannelsRef []GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	GroupOfSingleJourneysRef []GroupOfSingleJourneysRef `xml:"GroupOfSingleJourneysRef,omitempty" json:"GroupOfSingleJourneysRef,omitempty"`
	StandardFareTableRef []StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef []FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	PriceGroupRef []PriceGroupRef `xml:"PriceGroupRef,omitempty" json:"PriceGroupRef,omitempty"`
	RhythmicalJourneyGroupRef []RhythmicalJourneyGroupRef `xml:"RhythmicalJourneyGroupRef,omitempty" json:"RhythmicalJourneyGroupRef,omitempty"`
	HeadwayJourneyGroupRef []HeadwayJourneyGroupRef `xml:"HeadwayJourneyGroupRef,omitempty" json:"HeadwayJourneyGroupRef,omitempty"`
	JourneyFrequencyGroupRef []JourneyFrequencyGroupRef `xml:"JourneyFrequencyGroupRef,omitempty" json:"JourneyFrequencyGroupRef,omitempty"`
	GroupOfServicesRef []GroupOfServicesRef `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	GroupOfStopPlacesRef []GroupOfStopPlacesRef `xml:"GroupOfStopPlacesRef,omitempty" json:"GroupOfStopPlacesRef,omitempty"`
	PointOfInterestHierarchyRef []PointOfInterestHierarchyRef `xml:"PointOfInterestHierarchyRef,omitempty" json:"PointOfInterestHierarchyRef,omitempty"`
	GroupOfTimingLinksRef []GroupOfTimingLinksRef `xml:"GroupOfTimingLinksRef,omitempty" json:"GroupOfTimingLinksRef,omitempty"`
	FleetRef []FleetRef `xml:"FleetRef,omitempty" json:"FleetRef,omitempty"`
	GroupOfOperatorsRef []GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	GroupOfPlacesRef []GroupOfPlacesRef `xml:"GroupOfPlacesRef,omitempty" json:"GroupOfPlacesRef,omitempty"`
	ParentSectionRef []ParentSectionRef `xml:"ParentSectionRef,omitempty" json:"ParentSectionRef,omitempty"`
	ParentCommonSectionRef []ParentCommonSectionRef `xml:"ParentCommonSectionRef,omitempty" json:"ParentCommonSectionRef,omitempty"`
	CommonSectionRef []CommonSectionRef `xml:"CommonSectionRef,omitempty" json:"CommonSectionRef,omitempty"`
	LineSectionRef []LineSectionRef `xml:"LineSectionRef,omitempty" json:"LineSectionRef,omitempty"`
	FareSectionRef []FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	GeneralSectionRef []GeneralSectionRef `xml:"GeneralSectionRef,omitempty" json:"GeneralSectionRef,omitempty"`
	SectionRef []SectionRef `xml:"SectionRef,omitempty" json:"SectionRef,omitempty"`
	GroupOfTariffZonesRef []GroupOfTariffZonesRef `xml:"GroupOfTariffZonesRef,omitempty" json:"GroupOfTariffZonesRef,omitempty"`
	LogRef []LogRef `xml:"LogRef,omitempty" json:"LogRef,omitempty"`
	GroupOfTimebandsRef []GroupOfTimebandsRef `xml:"GroupOfTimebandsRef,omitempty" json:"GroupOfTimebandsRef,omitempty"`
	PlaceRef []PlaceRef `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
	MobilityServiceConstraintZoneRef []MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef []StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef []TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef []AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef []AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef []FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef []TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef []ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
	LayerRef []LayerRef `xml:"LayerRef,omitempty" json:"LayerRef,omitempty"`
	NetworkRef []NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef []GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	GeneralGroupOfEntitiesRef []GeneralGroupOfEntitiesRef `xml:"GeneralGroupOfEntitiesRef,omitempty" json:"GeneralGroupOfEntitiesRef,omitempty"`
	MobilityJourneyFrameRef []MobilityJourneyFrameRef `xml:"MobilityJourneyFrameRef,omitempty" json:"MobilityJourneyFrameRef,omitempty"`
	MobilityServiceFrameRef []MobilityServiceFrameRef `xml:"MobilityServiceFrameRef,omitempty" json:"MobilityServiceFrameRef,omitempty"`
	SalesTransactionFrameRef []SalesTransactionFrameRef `xml:"SalesTransactionFrameRef,omitempty" json:"SalesTransactionFrameRef,omitempty"`
	FareFrameRef []FareFrameRef `xml:"FareFrameRef,omitempty" json:"FareFrameRef,omitempty"`
	ServiceFrameRef []ServiceFrameRef `xml:"ServiceFrameRef,omitempty" json:"ServiceFrameRef,omitempty"`
	DriverScheduleFrameRef []DriverScheduleFrameRef `xml:"DriverScheduleFrameRef,omitempty" json:"DriverScheduleFrameRef,omitempty"`
	VehicleScheduleFrameRef []VehicleScheduleFrameRef `xml:"VehicleScheduleFrameRef,omitempty" json:"VehicleScheduleFrameRef,omitempty"`
	TimetableFrameRef []TimetableFrameRef `xml:"TimetableFrameRef,omitempty" json:"TimetableFrameRef,omitempty"`
	SiteFrameRef []SiteFrameRef `xml:"SiteFrameRef,omitempty" json:"SiteFrameRef,omitempty"`
	InfrastructureFrameRef []InfrastructureFrameRef `xml:"InfrastructureFrameRef,omitempty" json:"InfrastructureFrameRef,omitempty"`
	GeneralFrameRef []GeneralFrameRef `xml:"GeneralFrameRef,omitempty" json:"GeneralFrameRef,omitempty"`
	ResourceFrameRef []ResourceFrameRef `xml:"ResourceFrameRef,omitempty" json:"ResourceFrameRef,omitempty"`
	ServiceCalendarFrameRef []ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	CompositeFrameRef []CompositeFrameRef `xml:"CompositeFrameRef,omitempty" json:"CompositeFrameRef,omitempty"`
	ParkingBayConditionRef []ParkingBayConditionRef `xml:"ParkingBayConditionRef,omitempty" json:"ParkingBayConditionRef,omitempty"`
	RentalAvailabilityRef []RentalAvailabilityRef `xml:"RentalAvailabilityRef,omitempty" json:"RentalAvailabilityRef,omitempty"`
	ParkingBayStatusRef []ParkingBayStatusRef `xml:"ParkingBayStatusRef,omitempty" json:"ParkingBayStatusRef,omitempty"`
	TypeOfMediumAccessDeviceRef []TypeOfMediumAccessDeviceRef `xml:"TypeOfMediumAccessDeviceRef,omitempty" json:"TypeOfMediumAccessDeviceRef,omitempty"`
	TypeOfProofRef []TypeOfProofRef `xml:"TypeOfProofRef,omitempty" json:"TypeOfProofRef,omitempty"`
	DistributionChannelRef []DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	ChargingMomentRef []ChargingMomentRef `xml:"ChargingMomentRef,omitempty" json:"ChargingMomentRef,omitempty"`
	PriceUnitRef []PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	PurposeOfJourneyPartitionRef []PurposeOfJourneyPartitionRef `xml:"PurposeOfJourneyPartitionRef,omitempty" json:"PurposeOfJourneyPartitionRef,omitempty"`
	TimingAlgorithmTypeRef []TimingAlgorithmTypeRef `xml:"TimingAlgorithmTypeRef,omitempty" json:"TimingAlgorithmTypeRef,omitempty"`
	TypeOfParkingRef []TypeOfParkingRef `xml:"TypeOfParkingRef,omitempty" json:"TypeOfParkingRef,omitempty"`
	PointOfInterestClassificationRef []PointOfInterestClassificationRef `xml:"PointOfInterestClassificationRef,omitempty" json:"PointOfInterestClassificationRef,omitempty"`
	TypeOfActivationRef []TypeOfActivationRef `xml:"TypeOfActivationRef,omitempty" json:"TypeOfActivationRef,omitempty"`
	TypeOfFleetRef []TypeOfFleetRef `xml:"TypeOfFleetRef,omitempty" json:"TypeOfFleetRef,omitempty"`
	DirectionRef []DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	TypeOfDriverPermitRef []TypeOfDriverPermitRef `xml:"TypeOfDriverPermitRef,omitempty" json:"TypeOfDriverPermitRef,omitempty"`
	AcceptedDriverPermitRef []AcceptedDriverPermitRef `xml:"AcceptedDriverPermitRef,omitempty" json:"AcceptedDriverPermitRef,omitempty"`
	PurposeOfEquipmentProfileRef []PurposeOfEquipmentProfileRef `xml:"PurposeOfEquipmentProfileRef,omitempty" json:"PurposeOfEquipmentProfileRef,omitempty"`
	TypeOfProductCategoryRef []TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfPaymentMethodRef []TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	ClassOfUseRef []ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	TypeOfOperationRef []TypeOfOperationRef `xml:"TypeOfOperationRef,omitempty" json:"TypeOfOperationRef,omitempty"`
	TypeOfCodespaceAssignmentRef []TypeOfCodespaceAssignmentRef `xml:"TypeOfCodespaceAssignmentRef,omitempty" json:"TypeOfCodespaceAssignmentRef,omitempty"`
	BrandingRef []BrandingRef `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	TypeOfResponsibilityRoleRef []TypeOfResponsibilityRoleRef `xml:"TypeOfResponsibilityRoleRef,omitempty" json:"TypeOfResponsibilityRoleRef,omitempty"`
	PurposeOfGroupingRef []PurposeOfGroupingRef `xml:"PurposeOfGroupingRef,omitempty" json:"PurposeOfGroupingRef,omitempty"`
	TypeOfRetailDeviceRef []TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef,omitempty" json:"TypeOfRetailDeviceRef,omitempty"`
	CustomerAccountStatusRef []CustomerAccountStatusRef `xml:"CustomerAccountStatusRef,omitempty" json:"CustomerAccountStatusRef,omitempty"`
	TypeOfCustomerAccountRef []TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef,omitempty" json:"TypeOfCustomerAccountRef,omitempty"`
	TypeOfFareContractEntryRef []TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef,omitempty" json:"TypeOfFareContractEntryRef,omitempty"`
	TypeOfFareContractRef []TypeOfFareContractRef `xml:"TypeOfFareContractRef,omitempty" json:"TypeOfFareContractRef,omitempty"`
	TypeOfAccessRightAssignmentRef []TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef,omitempty" json:"TypeOfAccessRightAssignmentRef,omitempty"`
	TypeOfSalesOfferPackageRef []TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	TypeOfFareStructureElementRef []TypeOfFareStructureElementRef `xml:"TypeOfFareStructureElementRef,omitempty" json:"TypeOfFareStructureElementRef,omitempty"`
	TypeOfTariffRef []TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	AllDistributionChannelsRef []AllDistributionChannelsRef `xml:"AllDistributionChannelsRef,omitempty" json:"AllDistributionChannelsRef,omitempty"`
	TypeOfMachineReadabilityRef []TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef,omitempty" json:"TypeOfMachineReadabilityRef,omitempty"`
	TypeOfTravelDocumentRef []TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	TypeOfMobilityServiceRef []TypeOfMobilityServiceRef `xml:"TypeOfMobilityServiceRef,omitempty" json:"TypeOfMobilityServiceRef,omitempty"`
	TypeOfFareProductRef []TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	TypeOfFareStructureFactorRef []TypeOfFareStructureFactorRef `xml:"TypeOfFareStructureFactorRef,omitempty" json:"TypeOfFareStructureFactorRef,omitempty"`
	TypeOfPricingRuleRef []TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef,omitempty" json:"TypeOfPricingRuleRef,omitempty"`
	TypeOfFlexibleServiceRef []TypeOfFlexibleServiceRef `xml:"TypeOfFlexibleServiceRef,omitempty" json:"TypeOfFlexibleServiceRef,omitempty"`
	TypeOfPassengerInformationEquipmentRef []TypeOfPassengerInformationEquipmentRef `xml:"TypeOfPassengerInformationEquipmentRef,omitempty" json:"TypeOfPassengerInformationEquipmentRef,omitempty"`
	TypeOfTimeDemandTypeRef []TypeOfTimeDemandTypeRef `xml:"TypeOfTimeDemandTypeRef,omitempty" json:"TypeOfTimeDemandTypeRef,omitempty"`
	TypeOfJourneyPatternRef []TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	TypeOfSecurityListRef []TypeOfSecurityListRef `xml:"TypeOfSecurityListRef,omitempty" json:"TypeOfSecurityListRef,omitempty"`
	TypeOfPlugRef []TypeOfPlugRef `xml:"TypeOfPlugRef,omitempty" json:"TypeOfPlugRef,omitempty"`
	TypeOfBatteryChemistryRef []TypeOfBatteryChemistryRef `xml:"TypeOfBatteryChemistryRef,omitempty" json:"TypeOfBatteryChemistryRef,omitempty"`
	TypeOfServiceFeatureRef []TypeOfServiceFeatureRef `xml:"TypeOfServiceFeatureRef,omitempty" json:"TypeOfServiceFeatureRef,omitempty"`
	TypeOfDeliveryVariantRef []TypeOfDeliveryVariantRef `xml:"TypeOfDeliveryVariantRef,omitempty" json:"TypeOfDeliveryVariantRef,omitempty"`
	TypeOfNoticeRef []TypeOfNoticeRef `xml:"TypeOfNoticeRef,omitempty" json:"TypeOfNoticeRef,omitempty"`
	TypeOfCongestionRef []TypeOfCongestionRef `xml:"TypeOfCongestionRef,omitempty" json:"TypeOfCongestionRef,omitempty"`
	TypeOfServiceRef []TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	TypeOfFacilityRef []TypeOfFacilityRef `xml:"TypeOfFacilityRef,omitempty" json:"TypeOfFacilityRef,omitempty"`
	TypeOfModeOfOperationRef []TypeOfModeOfOperationRef `xml:"TypeOfModeOfOperationRef,omitempty" json:"TypeOfModeOfOperationRef,omitempty"`
	PersonalModeOfOperationRef []PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef []VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef []VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef []VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef []FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef []ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	TypeOfEquipmentRef []TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	TypeOfProjectionRef []TypeOfProjectionRef `xml:"TypeOfProjectionRef,omitempty" json:"TypeOfProjectionRef,omitempty"`
	TypeOfFeatureRef []TypeOfFeatureRef `xml:"TypeOfFeatureRef,omitempty" json:"TypeOfFeatureRef,omitempty"`
	TypeOfLinkSequenceRef []TypeOfLinkSequenceRef `xml:"TypeOfLinkSequenceRef,omitempty" json:"TypeOfLinkSequenceRef,omitempty"`
	TypeOfOrganisationPartRef []TypeOfOrganisationPartRef `xml:"TypeOfOrganisationPartRef,omitempty" json:"TypeOfOrganisationPartRef,omitempty"`
	TypeOfOrganisationRef []TypeOfOrganisationRef `xml:"TypeOfOrganisationRef,omitempty" json:"TypeOfOrganisationRef,omitempty"`
	TypeOfPlaceRef []TypeOfPlaceRef `xml:"TypeOfPlaceRef,omitempty" json:"TypeOfPlaceRef,omitempty"`
	TypeOfTransferRef []TypeOfTransferRef `xml:"TypeOfTransferRef,omitempty" json:"TypeOfTransferRef,omitempty"`
	TypeOfZoneRef []TypeOfZoneRef `xml:"TypeOfZoneRef,omitempty" json:"TypeOfZoneRef,omitempty"`
	TypeOfLinkRef []TypeOfLinkRef `xml:"TypeOfLinkRef,omitempty" json:"TypeOfLinkRef,omitempty"`
	TypeOfPointRef []TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
	TypeOfLineRef []TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
	TypeOfValidityRef []TypeOfValidityRef `xml:"TypeOfValidityRef,omitempty" json:"TypeOfValidityRef,omitempty"`
	TypeOfFrameRef []TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	DataSourceRef []DataSourceRef `xml:"DataSourceRef,omitempty" json:"DataSourceRef,omitempty"`
	VersionRef []VersionRef `xml:"VersionRef,omitempty" json:"VersionRef,omitempty"`
	VersionOfObjectRef []VersionOfObjectRef `xml:"VersionOfObjectRef,omitempty" json:"VersionOfObjectRef,omitempty"`
	ServiceLinkRefByValue []ServiceLinkRefByValue `xml:"ServiceLinkRefByValue,omitempty" json:"ServiceLinkRefByValue,omitempty"`
	LineLinkRefByValue []LineLinkRefByValue `xml:"LineLinkRefByValue,omitempty" json:"LineLinkRefByValue,omitempty"`
	TimingLinkRefByValue []TimingLinkRefByValue `xml:"TimingLinkRefByValue,omitempty" json:"TimingLinkRefByValue,omitempty"`
	WireLinkRefByValue []WireLinkRefByValue `xml:"WireLinkRefByValue,omitempty" json:"WireLinkRefByValue,omitempty"`
	RoadLinkRefByValue []RoadLinkRefByValue `xml:"RoadLinkRefByValue,omitempty" json:"RoadLinkRefByValue,omitempty"`
	RailwayLinkRefByValue []RailwayLinkRefByValue `xml:"RailwayLinkRefByValue,omitempty" json:"RailwayLinkRefByValue,omitempty"`
	ActivationLinkRefByValue []ActivationLinkRefByValue `xml:"ActivationLinkRefByValue,omitempty" json:"ActivationLinkRefByValue,omitempty"`
	ModalLinkRefByValue []ModalLinkRefByValue `xml:"ModalLinkRefByValue,omitempty" json:"ModalLinkRefByValue,omitempty"`
	PathLinkRefByValue []PathLinkRefByValue `xml:"PathLinkRefByValue,omitempty" json:"PathLinkRefByValue,omitempty"`
	RouteLinkRefByValue []RouteLinkRefByValue `xml:"RouteLinkRefByValue,omitempty" json:"RouteLinkRefByValue,omitempty"`
	LinkRefByValue []LinkRefByValue `xml:"LinkRefByValue,omitempty" json:"LinkRefByValue,omitempty"`
}

// VersionFrameMembersRelStructure represents the versionFrameMembers_RelStructure element
// A collection of one or more VERSION FRAME MEMBERS.
type VersionFrameMembersRelStructure struct {
	ContainmentAggregationStructure
	// Member of a VERSION FRAME.
	EntityInVersionInFrameRef []EntityInVersionInFrameRefStructure `xml:"EntityInVersionInFrameRef,omitempty" json:"EntityInVersionInFrameRef,omitempty"`
	Fleet []Fleet `xml:"Fleet,omitempty" json:"Fleet,omitempty"`
	IndividualPassengerInfo []IndividualPassengerInfo `xml:"IndividualPassengerInfo,omitempty" json:"IndividualPassengerInfo,omitempty"`
	VehiclePoolingDriverInfo []VehiclePoolingDriverInfo `xml:"VehiclePoolingDriverInfo,omitempty" json:"VehiclePoolingDriverInfo,omitempty"`
	IndividualTraveller []IndividualTraveller `xml:"IndividualTraveller,omitempty" json:"IndividualTraveller,omitempty"`
	ParkingBayCondition []ParkingBayCondition `xml:"ParkingBayCondition,omitempty" json:"ParkingBayCondition,omitempty"`
	RentalAvailability []RentalAvailability `xml:"RentalAvailability,omitempty" json:"RentalAvailability,omitempty"`
	Smartcard []Smartcard `xml:"Smartcard,omitempty" json:"Smartcard,omitempty"`
	EmvCard []EmvCard `xml:"EmvCard,omitempty" json:"EmvCard,omitempty"`
	MobileDevice []MobileDevice `xml:"MobileDevice,omitempty" json:"MobileDevice,omitempty"`
	MediumAccessDevice []MediumAccessDevice `xml:"MediumAccessDevice,omitempty" json:"MediumAccessDevice,omitempty"`
	ServiceAccessCode []ServiceAccessCode `xml:"ServiceAccessCode,omitempty" json:"ServiceAccessCode,omitempty"`
	TravelDocument []TravelDocument `xml:"TravelDocument,omitempty" json:"TravelDocument,omitempty"`
	CustomerAccount []CustomerAccount `xml:"CustomerAccount,omitempty" json:"CustomerAccount,omitempty"`
	SalesTransaction []SalesTransaction `xml:"SalesTransaction,omitempty" json:"SalesTransaction,omitempty"`
	OfferedTravelSpecification []OfferedTravelSpecification `xml:"OfferedTravelSpecification,omitempty" json:"OfferedTravelSpecification,omitempty"`
	RequestedTravelSpecification []RequestedTravelSpecification `xml:"RequestedTravelSpecification,omitempty" json:"RequestedTravelSpecification,omitempty"`
	TravelSpecification []TravelSpecification1 `xml:"TravelSpecification,omitempty" json:"TravelSpecification,omitempty"`
	NetexOrgUkNetexTravelSpecification []TravelSpecification2 `xml:"TravelSpecification_,omitempty" json:"TravelSpecification_,omitempty"`
	FareContractEntry []FareContractEntry `xml:"FareContractEntry_,omitempty" json:"FareContractEntry_,omitempty"`
	FareContract []FareContract `xml:"FareContract,omitempty" json:"FareContract,omitempty"`
	Customer []Customer `xml:"Customer,omitempty" json:"Customer,omitempty"`
	ParkingTariff []ParkingTariff `xml:"ParkingTariff,omitempty" json:"ParkingTariff,omitempty"`
	GroupOfSalesOfferPackages []GroupOfSalesOfferPackages `xml:"GroupOfSalesOfferPackages,omitempty" json:"GroupOfSalesOfferPackages,omitempty"`
	DistributionChannel []DistributionChannel `xml:"DistributionChannel,omitempty" json:"DistributionChannel,omitempty"`
	Tariff []Tariff `xml:"Tariff,omitempty" json:"Tariff,omitempty"`
	CustomerPurchasePackage []CustomerPurchasePackage `xml:"CustomerPurchasePackage,omitempty" json:"CustomerPurchasePackage,omitempty"`
	SalesOfferPackage []SalesOfferPackage `xml:"SalesOfferPackage,omitempty" json:"SalesOfferPackage,omitempty"`
	FulfilmentMethod []FulfilmentMethod `xml:"FulfilmentMethod,omitempty" json:"FulfilmentMethod,omitempty"`
	CappingRule []CappingRule `xml:"CappingRule,omitempty" json:"CappingRule,omitempty"`
	EntitlementProduct []EntitlementProduct `xml:"EntitlementProduct,omitempty" json:"EntitlementProduct,omitempty"`
	SupplementProduct []SupplementProduct `xml:"SupplementProduct,omitempty" json:"SupplementProduct,omitempty"`
	PreassignedFareProduct []PreassignedFareProduct `xml:"PreassignedFareProduct,omitempty" json:"PreassignedFareProduct,omitempty"`
	AmountOfPriceUnitProduct []AmountOfPriceUnitProduct `xml:"AmountOfPriceUnitProduct,omitempty" json:"AmountOfPriceUnitProduct,omitempty"`
	CappedDiscountRight []CappedDiscountRight `xml:"CappedDiscountRight,omitempty" json:"CappedDiscountRight,omitempty"`
	UsageDiscountRight []UsageDiscountRight `xml:"UsageDiscountRight,omitempty" json:"UsageDiscountRight,omitempty"`
	ThirdPartyProduct []ThirdPartyProduct `xml:"ThirdPartyProduct,omitempty" json:"ThirdPartyProduct,omitempty"`
	SaleDiscountRight []SaleDiscountRight `xml:"SaleDiscountRight,omitempty" json:"SaleDiscountRight,omitempty"`
	ServiceAccessRight []ServiceAccessRight1 `xml:"ServiceAccessRight,omitempty" json:"ServiceAccessRight,omitempty"`
	NetexOrgUkNetexServiceAccessRight []ServiceAccessRight2 `xml:"ServiceAccessRight_,omitempty" json:"ServiceAccessRight_,omitempty"`
	TimeInterval []TimeInterval `xml:"TimeInterval,omitempty" json:"TimeInterval,omitempty"`
	FareQuotaFactor []FareQuotaFactor `xml:"FareQuotaFactor,omitempty" json:"FareQuotaFactor,omitempty"`
	FareDemandFactor []FareDemandFactor `xml:"FareDemandFactor,omitempty" json:"FareDemandFactor,omitempty"`
	QualityStructureFactor []QualityStructureFactor `xml:"QualityStructureFactor,omitempty" json:"QualityStructureFactor,omitempty"`
	ControllableElement []ControllableElement `xml:"ControllableElement,omitempty" json:"ControllableElement,omitempty"`
	ValidableElement []ValidableElement `xml:"ValidableElement,omitempty" json:"ValidableElement,omitempty"`
	AdditionalDriverOption []AdditionalDriverOption `xml:"AdditionalDriverOption,omitempty" json:"AdditionalDriverOption,omitempty"`
	RentalOption []RentalOption `xml:"RentalOption,omitempty" json:"RentalOption,omitempty"`
	RentalPenaltyPolicy []RentalPenaltyPolicy `xml:"RentalPenaltyPolicy,omitempty" json:"RentalPenaltyPolicy,omitempty"`
	VehiclePoolerProfile []VehiclePoolerProfile `xml:"VehiclePoolerProfile,omitempty" json:"VehiclePoolerProfile,omitempty"`
	SalesOfferPackageEntitlementRequired []SalesOfferPackageEntitlementRequired `xml:"SalesOfferPackageEntitlementRequired,omitempty" json:"SalesOfferPackageEntitlementRequired,omitempty"`
	SalesOfferPackageEntitlementGiven []SalesOfferPackageEntitlementGiven `xml:"SalesOfferPackageEntitlementGiven,omitempty" json:"SalesOfferPackageEntitlementGiven,omitempty"`
	MinimumStay []MinimumStay `xml:"MinimumStay,omitempty" json:"MinimumStay,omitempty"`
	Interchanging []Interchanging `xml:"Interchanging,omitempty" json:"Interchanging,omitempty"`
	Suspending []Suspending `xml:"Suspending,omitempty" json:"Suspending,omitempty"`
	UsageValidityPeriod []UsageValidityPeriod `xml:"UsageValidityPeriod,omitempty" json:"UsageValidityPeriod,omitempty"`
	FrequencyOfUse []FrequencyOfUse `xml:"FrequencyOfUse,omitempty" json:"FrequencyOfUse,omitempty"`
	StepLimit []StepLimit `xml:"StepLimit,omitempty" json:"StepLimit,omitempty"`
	Routing []Routing `xml:"Routing,omitempty" json:"Routing,omitempty"`
	RoundTrip []RoundTrip `xml:"RoundTrip,omitempty" json:"RoundTrip,omitempty"`
	LuggageAllowance []LuggageAllowance `xml:"LuggageAllowance,omitempty" json:"LuggageAllowance,omitempty"`
	EntitlementRequired []EntitlementRequired `xml:"EntitlementRequired,omitempty" json:"EntitlementRequired,omitempty"`
	EntitlementGiven []EntitlementGiven `xml:"EntitlementGiven,omitempty" json:"EntitlementGiven,omitempty"`
	EligibilityChangePolicy []EligibilityChangePolicy `xml:"EligibilityChangePolicy,omitempty" json:"EligibilityChangePolicy,omitempty"`
	CompanionProfile []CompanionProfile `xml:"CompanionProfile,omitempty" json:"CompanionProfile,omitempty"`
	GroupTicket []GroupTicket `xml:"GroupTicket,omitempty" json:"GroupTicket,omitempty"`
	CommercialProfile []CommercialProfile `xml:"CommercialProfile,omitempty" json:"CommercialProfile,omitempty"`
	UserProfile []UserProfile `xml:"UserProfile,omitempty" json:"UserProfile,omitempty"`
	Subscribing []Subscribing `xml:"Subscribing,omitempty" json:"Subscribing,omitempty"`
	PenaltyPolicy []PenaltyPolicy `xml:"PenaltyPolicy,omitempty" json:"PenaltyPolicy,omitempty"`
	ChargingPolicy []ChargingPolicy `xml:"ChargingPolicy,omitempty" json:"ChargingPolicy,omitempty"`
	Cancelling []Cancelling `xml:"Cancelling,omitempty" json:"Cancelling,omitempty"`
	Reserving []Reserving `xml:"Reserving,omitempty" json:"Reserving,omitempty"`
	PurchaseWindow []PurchaseWindow `xml:"PurchaseWindow,omitempty" json:"PurchaseWindow,omitempty"`
	Transferability []Transferability `xml:"Transferability,omitempty" json:"Transferability,omitempty"`
	Replacing []Replacing `xml:"Replacing,omitempty" json:"Replacing,omitempty"`
	Refunding []Refunding `xml:"Refunding,omitempty" json:"Refunding,omitempty"`
	Exchanging []Exchanging `xml:"Exchanging,omitempty" json:"Exchanging,omitempty"`
	Reselling []Reselling `xml:"Reselling,omitempty" json:"Reselling,omitempty"`
	GeographicalInterval []GeographicalInterval `xml:"GeographicalInterval,omitempty" json:"GeographicalInterval,omitempty"`
	SeriesConstraint []SeriesConstraint `xml:"SeriesConstraint,omitempty" json:"SeriesConstraint,omitempty"`
	CustomerPurchasePackageElement []CustomerPurchasePackageElement `xml:"CustomerPurchasePackageElement,omitempty" json:"CustomerPurchasePackageElement,omitempty"`
	ParkingChargeBand []ParkingChargeBand `xml:"ParkingChargeBand,omitempty" json:"ParkingChargeBand,omitempty"`
	SalesOfferPackageElement []SalesOfferPackageElement `xml:"SalesOfferPackageElement,omitempty" json:"SalesOfferPackageElement,omitempty"`
	FareStructureElement []FareStructureElement `xml:"FareStructureElement,omitempty" json:"FareStructureElement,omitempty"`
	TimeStructureFactor []TimeStructureFactor `xml:"TimeStructureFactor,omitempty" json:"TimeStructureFactor,omitempty"`
	TimeUnit []TimeUnit `xml:"TimeUnit,omitempty" json:"TimeUnit,omitempty"`
	DistanceMatrixElement []DistanceMatrixElement `xml:"DistanceMatrixElement,omitempty" json:"DistanceMatrixElement,omitempty"`
	GeographicalStructureFactor []GeographicalStructureFactor `xml:"GeographicalStructureFactor,omitempty" json:"GeographicalStructureFactor,omitempty"`
	GeographicalUnit []GeographicalUnit `xml:"GeographicalUnit,omitempty" json:"GeographicalUnit,omitempty"`
	FareUnit []FareUnit `xml:"FareUnit,omitempty" json:"FareUnit,omitempty"`
	FareInterval []FareInterval `xml:"FareInterval,omitempty" json:"FareInterval,omitempty"`
	FareStructureFactor []FareStructureFactor `xml:"FareStructureFactor,omitempty" json:"FareStructureFactor,omitempty"`
	PricingService []PricingService `xml:"PricingService,omitempty" json:"PricingService,omitempty"`
	LimitingRuleInContext []LimitingRuleInContext `xml:"LimitingRuleInContext,omitempty" json:"LimitingRuleInContext,omitempty"`
	LimitingRule []LimitingRule `xml:"LimitingRule,omitempty" json:"LimitingRule,omitempty"`
	DiscountingRule []DiscountingRule `xml:"DiscountingRule,omitempty" json:"DiscountingRule,omitempty"`
	PricingRule []PricingRule `xml:"PricingRule,omitempty" json:"PricingRule,omitempty"`
	MonthValidityOffset []MonthValidityOffset `xml:"MonthValidityOffset,omitempty" json:"MonthValidityOffset,omitempty"`
	Rounding []Rounding `xml:"Rounding,omitempty" json:"Rounding,omitempty"`
	PricingParameterSet []PricingParameterSet `xml:"PricingParameterSet,omitempty" json:"PricingParameterSet,omitempty"`
	ReliefOpportunity []ReliefOpportunity `xml:"ReliefOpportunity,omitempty" json:"ReliefOpportunity,omitempty"`
	CourseOfJourneys []CourseOfJourneys `xml:"CourseOfJourneys,omitempty" json:"CourseOfJourneys,omitempty"`
	VehicleServicePart []VehicleServicePart `xml:"VehicleServicePart,omitempty" json:"VehicleServicePart,omitempty"`
	VehicleService []VehicleService `xml:"VehicleService,omitempty" json:"VehicleService,omitempty"`
	TrainBlockPart []TrainBlockPart `xml:"TrainBlockPart,omitempty" json:"TrainBlockPart,omitempty"`
	CompoundBlock []CompoundBlock `xml:"CompoundBlock,omitempty" json:"CompoundBlock,omitempty"`
	BlockPart []BlockPart `xml:"BlockPart,omitempty" json:"BlockPart,omitempty"`
	TrainBlock []TrainBlock `xml:"TrainBlock,omitempty" json:"TrainBlock,omitempty"`
	Block []Block `xml:"Block,omitempty" json:"Block,omitempty"`
	DriverTripTime []DriverTripTime `xml:"DriverTripTime,omitempty" json:"DriverTripTime,omitempty"`
	DriverTrip []DriverTrip `xml:"DriverTrip,omitempty" json:"DriverTrip,omitempty"`
	DutyPart []DutyPart `xml:"DutyPart,omitempty" json:"DutyPart,omitempty"`
	AccountableElement []AccountableElement `xml:"AccountableElement,omitempty" json:"AccountableElement,omitempty"`
	Duty []Duty `xml:"Duty,omitempty" json:"Duty,omitempty"`
	TimeDemandProfile []TimeDemandProfile `xml:"TimeDemandProfile,omitempty" json:"TimeDemandProfile,omitempty"`
	VehicleTypeStopAssignment []VehicleTypeStopAssignment `xml:"VehicleTypeStopAssignment,omitempty" json:"VehicleTypeStopAssignment,omitempty"`
	TrainComponentLabelAssignment []TrainComponentLabelAssignment `xml:"TrainComponentLabelAssignment,omitempty" json:"TrainComponentLabelAssignment,omitempty"`
	TrainNumber []TrainNumber `xml:"TrainNumber,omitempty" json:"TrainNumber,omitempty"`
	FlexibleServiceProperties []FlexibleServiceProperties `xml:"FlexibleServiceProperties,omitempty" json:"FlexibleServiceProperties,omitempty"`
	JourneyPartCouple []JourneyPartCouple `xml:"JourneyPartCouple,omitempty" json:"JourneyPartCouple,omitempty"`
	CoupledJourney []CoupledJourney `xml:"CoupledJourney,omitempty" json:"CoupledJourney,omitempty"`
	JourneyPart []JourneyPart `xml:"JourneyPart,omitempty" json:"JourneyPart,omitempty"`
	InterchangeRule []InterchangeRule `xml:"InterchangeRule,omitempty" json:"InterchangeRule,omitempty"`
	ServiceJourneyPatternInterchange []ServiceJourneyPatternInterchange `xml:"ServiceJourneyPatternInterchange,omitempty" json:"ServiceJourneyPatternInterchange,omitempty"`
	ServiceJourneyInterchange []ServiceJourneyInterchange `xml:"ServiceJourneyInterchange,omitempty" json:"ServiceJourneyInterchange,omitempty"`
	DefaultInterchange []DefaultInterchange `xml:"DefaultInterchange,omitempty" json:"DefaultInterchange,omitempty"`
	JourneyMeeting []JourneyMeeting `xml:"JourneyMeeting,omitempty" json:"JourneyMeeting,omitempty"`
	SingleJourney []SingleJourney `xml:"SingleJourney,omitempty" json:"SingleJourney,omitempty"`
	DatedSpecialService []DatedSpecialService `xml:"DatedSpecialService,omitempty" json:"DatedSpecialService,omitempty"`
	NormalDatedVehicleJourney []NormalDatedVehicleJourney `xml:"NormalDatedVehicleJourney,omitempty" json:"NormalDatedVehicleJourney,omitempty"`
	DatedVehicleJourney []DatedVehicleJourney `xml:"DatedVehicleJourney,omitempty" json:"DatedVehicleJourney,omitempty"`
	SpecialService []SpecialService `xml:"SpecialService,omitempty" json:"SpecialService,omitempty"`
	DeadRun []DeadRun `xml:"DeadRun,omitempty" json:"DeadRun,omitempty"`
	ServiceJourney []ServiceJourney `xml:"ServiceJourney,omitempty" json:"ServiceJourney,omitempty"`
	DatedServiceJourney []DatedServiceJourney `xml:"DatedServiceJourney,omitempty" json:"DatedServiceJourney,omitempty"`
	TemplateServiceJourney []TemplateServiceJourney `xml:"TemplateServiceJourney,omitempty" json:"TemplateServiceJourney,omitempty"`
	TemplateVehicleJourney []TemplateVehicleJourney `xml:"TemplateVehicleJourney,omitempty" json:"TemplateVehicleJourney,omitempty"`
	VehicleJourney []VehicleJourney `xml:"VehicleJourney,omitempty" json:"VehicleJourney,omitempty"`
	PointOfInterestClassificationHierarchy []PointOfInterestClassificationHierarchy `xml:"PointOfInterestClassificationHierarchy,omitempty" json:"PointOfInterestClassificationHierarchy,omitempty"`
	TimeDemandType []TimeDemandType `xml:"TimeDemandType,omitempty" json:"TimeDemandType,omitempty"`
	VehicleJourneyStopAssignment []VehicleJourneyStopAssignment `xml:"VehicleJourneyStopAssignment,omitempty" json:"VehicleJourneyStopAssignment,omitempty"`
	FlexibleStopAssignment []FlexibleStopAssignment `xml:"FlexibleStopAssignment,omitempty" json:"FlexibleStopAssignment,omitempty"`
	NavigationPathAssignment []NavigationPathAssignment `xml:"NavigationPathAssignment,omitempty" json:"NavigationPathAssignment,omitempty"`
	TrainStopAssignment []TrainStopAssignment `xml:"TrainStopAssignment,omitempty" json:"TrainStopAssignment,omitempty"`
	DynamicStopAssignment []DynamicStopAssignment `xml:"DynamicStopAssignment,omitempty" json:"DynamicStopAssignment,omitempty"`
	PassengerStopAssignment []PassengerStopAssignment `xml:"PassengerStopAssignment,omitempty" json:"PassengerStopAssignment,omitempty"`
	LogicalDisplay []LogicalDisplay `xml:"LogicalDisplay,omitempty" json:"LogicalDisplay,omitempty"`
	LineNetwork []LineNetwork `xml:"LineNetwork,omitempty" json:"LineNetwork,omitempty"`
	ModeRestrictionAssessment []ModeRestrictionAssessment `xml:"ModeRestrictionAssessment,omitempty" json:"ModeRestrictionAssessment,omitempty"`
	RouteInstruction []RouteInstruction `xml:"RouteInstruction,omitempty" json:"RouteInstruction,omitempty"`
	TrainComponent []TrainComponent `xml:"TrainComponent,omitempty" json:"TrainComponent,omitempty"`
	TrainElement []TrainElement `xml:"TrainElement,omitempty" json:"TrainElement,omitempty"`
	CompoundTrain []CompoundTrain `xml:"CompoundTrain,omitempty" json:"CompoundTrain,omitempty"`
	Train []Train `xml:"Train,omitempty" json:"Train,omitempty"`
	CycleModelProfile []CycleModelProfile `xml:"CycleModelProfile,omitempty" json:"CycleModelProfile,omitempty"`
	CarModelProfile []CarModelProfile `xml:"CarModelProfile,omitempty" json:"CarModelProfile,omitempty"`
	Whitelist []Whitelist `xml:"Whitelist,omitempty" json:"Whitelist,omitempty"`
	Blacklist []Blacklist `xml:"Blacklist,omitempty" json:"Blacklist,omitempty"`
	SchematicMap []SchematicMap `xml:"SchematicMap,omitempty" json:"SchematicMap,omitempty"`
	PersonalModeOfOperation []PersonalModeOfOperation `xml:"PersonalModeOfOperation,omitempty" json:"PersonalModeOfOperation,omitempty"`
	AlternativeModeOfOperation []AlternativeModeOfOperation `xml:"AlternativeModeOfOperation,omitempty" json:"AlternativeModeOfOperation,omitempty"`
	VehiclePooling []VehiclePooling `xml:"VehiclePooling,omitempty" json:"VehiclePooling,omitempty"`
	VehicleSharing []VehicleSharing `xml:"VehicleSharing,omitempty" json:"VehicleSharing,omitempty"`
	VehicleRental []VehicleRental `xml:"VehicleRental,omitempty" json:"VehicleRental,omitempty"`
	FlexibleOperation []FlexibleOperation `xml:"FlexibleOperation,omitempty" json:"FlexibleOperation,omitempty"`
	ScheduledOperation []ScheduledOperation `xml:"ScheduledOperation,omitempty" json:"ScheduledOperation,omitempty"`
	ChargingEquipmentProfile []ChargingEquipmentProfile `xml:"ChargingEquipmentProfile,omitempty" json:"ChargingEquipmentProfile,omitempty"`
	VehicleEquipmentProfile []VehicleEquipmentProfile `xml:"VehicleEquipmentProfile,omitempty" json:"VehicleEquipmentProfile,omitempty"`
	VehicleModel []VehicleModel `xml:"VehicleModel,omitempty" json:"VehicleModel,omitempty"`
	Vehicle []Vehicle `xml:"Vehicle,omitempty" json:"Vehicle,omitempty"`
	PassengerCarryingRequirementsView []PassengerCarryingRequirementsView `xml:"PassengerCarryingRequirementsView,omitempty" json:"PassengerCarryingRequirementsView,omitempty"`
	FacilityRequirement []FacilityRequirement `xml:"FacilityRequirement,omitempty" json:"FacilityRequirement,omitempty"`
	VehicleManoeuvringRequirement []VehicleManoeuvringRequirement `xml:"VehicleManoeuvringRequirement,omitempty" json:"VehicleManoeuvringRequirement,omitempty"`
	PassengerCarryingRequirement []PassengerCarryingRequirement `xml:"PassengerCarryingRequirement,omitempty" json:"PassengerCarryingRequirement,omitempty"`
	AcceptedDriverPermit []AcceptedDriverPermit `xml:"AcceptedDriverPermit,omitempty" json:"AcceptedDriverPermit,omitempty"`
	SimpleVehicleType []SimpleVehicleType `xml:"SimpleVehicleType,omitempty" json:"SimpleVehicleType,omitempty"`
	VehicleType []VehicleType `xml:"VehicleType,omitempty" json:"VehicleType,omitempty"`
	TransportType []TransportType `xml:"TransportType,omitempty" json:"TransportType,omitempty"`
	EquipmentPosition []EquipmentPosition `xml:"EquipmentPosition,omitempty" json:"EquipmentPosition,omitempty"`
	Level []Level `xml:"Level,omitempty" json:"Level,omitempty"`
	AllowedLineDirection []AllowedLineDirection `xml:"AllowedLineDirection,omitempty" json:"AllowedLineDirection,omitempty"`
	DestinationDisplayVariant []DestinationDisplayVariant `xml:"DestinationDisplayVariant,omitempty" json:"DestinationDisplayVariant,omitempty"`
	DestinationDisplay []DestinationDisplay `xml:"DestinationDisplay,omitempty" json:"DestinationDisplay,omitempty"`
	FlexibleLine []FlexibleLine `xml:"FlexibleLine,omitempty" json:"FlexibleLine,omitempty"`
	Line []Line `xml:"Line,omitempty" json:"Line,omitempty"`
	DeliveryVariant []DeliveryVariant `xml:"DeliveryVariant,omitempty" json:"DeliveryVariant,omitempty"`
	Notice []Notice `xml:"Notice,omitempty" json:"Notice,omitempty"`
	OperationalContext []OperationalContext `xml:"OperationalContext,omitempty" json:"OperationalContext,omitempty"`
	OnlineService []OnlineService `xml:"OnlineService,omitempty" json:"OnlineService,omitempty"`
	VehicleRentalService []VehicleRentalService `xml:"VehicleRentalService,omitempty" json:"VehicleRentalService,omitempty"`
	VehicleSharingService []VehicleSharingService `xml:"VehicleSharingService,omitempty" json:"VehicleSharingService,omitempty"`
	ChauffeuredVehicleService []ChauffeuredVehicleService `xml:"ChauffeuredVehicleService,omitempty" json:"ChauffeuredVehicleService,omitempty"`
	CarPoolingService []CarPoolingService `xml:"CarPoolingService,omitempty" json:"CarPoolingService,omitempty"`
	TaxiService []TaxiService `xml:"TaxiService,omitempty" json:"TaxiService,omitempty"`
	AssistanceBookingService []AssistanceBookingService `xml:"AssistanceBookingService,omitempty" json:"AssistanceBookingService,omitempty"`
	CateringService []CateringService `xml:"CateringService,omitempty" json:"CateringService,omitempty"`
	RetailService []RetailService `xml:"RetailService,omitempty" json:"RetailService,omitempty"`
	MoneyService []MoneyService `xml:"MoneyService,omitempty" json:"MoneyService,omitempty"`
	HireService []HireService `xml:"HireService,omitempty" json:"HireService,omitempty"`
	CommunicationService []CommunicationService `xml:"CommunicationService,omitempty" json:"CommunicationService,omitempty"`
	MeetingPointService []MeetingPointService `xml:"MeetingPointService,omitempty" json:"MeetingPointService,omitempty"`
	LostPropertyService []LostPropertyService `xml:"LostPropertyService,omitempty" json:"LostPropertyService,omitempty"`
	LeftLuggageService []LeftLuggageService `xml:"LeftLuggageService,omitempty" json:"LeftLuggageService,omitempty"`
	ComplaintsService []ComplaintsService `xml:"ComplaintsService,omitempty" json:"ComplaintsService,omitempty"`
	CustomerService []CustomerService `xml:"CustomerService,omitempty" json:"CustomerService,omitempty"`
	LuggageService []LuggageService `xml:"LuggageService,omitempty" json:"LuggageService,omitempty"`
	AssistanceService []AssistanceService `xml:"AssistanceService,omitempty" json:"AssistanceService,omitempty"`
	TicketingService []TicketingService `xml:"TicketingService,omitempty" json:"TicketingService,omitempty"`
	RetailDevice []RetailDevice `xml:"RetailDevice,omitempty" json:"RetailDevice,omitempty"`
	BatteryEquipment []BatteryEquipment `xml:"BatteryEquipment,omitempty" json:"BatteryEquipment,omitempty"`
	VehicleReleaseEquipment []VehicleReleaseEquipment `xml:"VehicleReleaseEquipment,omitempty" json:"VehicleReleaseEquipment,omitempty"`
	RefuellingEquipment []RefuellingEquipment `xml:"RefuellingEquipment,omitempty" json:"RefuellingEquipment,omitempty"`
	VehicleChargingEquipment []VehicleChargingEquipment `xml:"VehicleChargingEquipment,omitempty" json:"VehicleChargingEquipment,omitempty"`
	CycleStorageEquipment []CycleStorageEquipment `xml:"CycleStorageEquipment,omitempty" json:"CycleStorageEquipment,omitempty"`
	SeatingEquipment []SeatingEquipment `xml:"SeatingEquipment,omitempty" json:"SeatingEquipment,omitempty"`
	ShelterEquipment []ShelterEquipment `xml:"ShelterEquipment,omitempty" json:"ShelterEquipment,omitempty"`
	TrolleyStandEquipment []TrolleyStandEquipment `xml:"TrolleyStandEquipment,omitempty" json:"TrolleyStandEquipment,omitempty"`
	WaitingRoomEquipment []WaitingRoomEquipment `xml:"WaitingRoomEquipment,omitempty" json:"WaitingRoomEquipment,omitempty"`
	CrossingEquipment []CrossingEquipment `xml:"CrossingEquipment,omitempty" json:"CrossingEquipment,omitempty"`
	QueueingEquipment []QueueingEquipment `xml:"QueueingEquipment,omitempty" json:"QueueingEquipment,omitempty"`
	EntranceEquipment []EntranceEquipment `xml:"EntranceEquipment,omitempty" json:"EntranceEquipment,omitempty"`
	RampEquipment []RampEquipment `xml:"RampEquipment,omitempty" json:"RampEquipment,omitempty"`
	LiftCallEquipment []LiftCallEquipment `xml:"LiftCallEquipment,omitempty" json:"LiftCallEquipment,omitempty"`
	LiftEquipment []LiftEquipment `xml:"LiftEquipment,omitempty" json:"LiftEquipment,omitempty"`
	TravelatorEquipment []TravelatorEquipment `xml:"TravelatorEquipment,omitempty" json:"TravelatorEquipment,omitempty"`
	StaircaseEquipment []StaircaseEquipment `xml:"StaircaseEquipment,omitempty" json:"StaircaseEquipment,omitempty"`
	EscalatorEquipment []EscalatorEquipment `xml:"EscalatorEquipment,omitempty" json:"EscalatorEquipment,omitempty"`
	PlaceLighting []PlaceLighting `xml:"PlaceLighting,omitempty" json:"PlaceLighting,omitempty"`
	RoughSurface []RoughSurface `xml:"RoughSurface,omitempty" json:"RoughSurface,omitempty"`
	GeneralSign []GeneralSign `xml:"GeneralSign,omitempty" json:"GeneralSign,omitempty"`
	HeadingSign []HeadingSign `xml:"HeadingSign,omitempty" json:"HeadingSign,omitempty"`
	PlaceSign []PlaceSign `xml:"PlaceSign,omitempty" json:"PlaceSign,omitempty"`
	SignEquipment []SignEquipment `xml:"SignEquipment,omitempty" json:"SignEquipment,omitempty"`
	PassengerInformationEquipment []PassengerInformationEquipment `xml:"PassengerInformationEquipment,omitempty" json:"PassengerInformationEquipment,omitempty"`
	RubbishDisposalEquipment []RubbishDisposalEquipment `xml:"RubbishDisposalEquipment,omitempty" json:"RubbishDisposalEquipment,omitempty"`
	PassengerBeaconEquipment []PassengerBeaconEquipment `xml:"PassengerBeaconEquipment,omitempty" json:"PassengerBeaconEquipment,omitempty"`
	HelpPointEquipment []HelpPointEquipment `xml:"HelpPointEquipment,omitempty" json:"HelpPointEquipment,omitempty"`
	PassengerSafetyEquipment []PassengerSafetyEquipment `xml:"PassengerSafetyEquipment,omitempty" json:"PassengerSafetyEquipment,omitempty"`
	SanitaryEquipment []SanitaryEquipment `xml:"SanitaryEquipment,omitempty" json:"SanitaryEquipment,omitempty"`
	TicketValidatorEquipment []TicketValidatorEquipment `xml:"TicketValidatorEquipment,omitempty" json:"TicketValidatorEquipment,omitempty"`
	TicketingEquipment []TicketingEquipment `xml:"TicketingEquipment,omitempty" json:"TicketingEquipment,omitempty"`
	WheelchairVehicleEquipment []WheelchairVehicleEquipment `xml:"WheelchairVehicleEquipment,omitempty" json:"WheelchairVehicleEquipment,omitempty"`
	AccessVehicleEquipment []AccessVehicleEquipment `xml:"AccessVehicleEquipment,omitempty" json:"AccessVehicleEquipment,omitempty"`
	ComplexFeature []ComplexFeature `xml:"ComplexFeature,omitempty" json:"ComplexFeature,omitempty"`
	SimpleFeature []SimpleFeature `xml:"SimpleFeature,omitempty" json:"SimpleFeature,omitempty"`
	SpatialFeature []SpatialFeature `xml:"SpatialFeature,omitempty" json:"SpatialFeature,omitempty"`
	SingleJourneyPath []SingleJourneyPath `xml:"SingleJourneyPath,omitempty" json:"SingleJourneyPath,omitempty"`
	ServicePattern []ServicePattern `xml:"ServicePattern,omitempty" json:"ServicePattern,omitempty"`
	NavigationPath []NavigationPath `xml:"NavigationPath,omitempty" json:"NavigationPath,omitempty"`
	ServiceJourneyPattern []ServiceJourneyPattern `xml:"ServiceJourneyPattern,omitempty" json:"ServiceJourneyPattern,omitempty"`
	DeadRunJourneyPattern []DeadRunJourneyPattern `xml:"DeadRunJourneyPattern,omitempty" json:"DeadRunJourneyPattern,omitempty"`
	JourneyPattern []JourneyPattern `xml:"JourneyPattern,omitempty" json:"JourneyPattern,omitempty"`
	FlexibleRoute []FlexibleRoute `xml:"FlexibleRoute,omitempty" json:"FlexibleRoute,omitempty"`
	Route []Route `xml:"Route,omitempty" json:"Route,omitempty"`
	TimingPattern []TimingPattern `xml:"TimingPattern,omitempty" json:"TimingPattern,omitempty"`
	Connection []Connection `xml:"Connection,omitempty" json:"Connection,omitempty"`
	DefaultConnection []DefaultConnection `xml:"DefaultConnection,omitempty" json:"DefaultConnection,omitempty"`
	SiteConnection []SiteConnection `xml:"SiteConnection,omitempty" json:"SiteConnection,omitempty"`
	Access []Access `xml:"Access,omitempty" json:"Access,omitempty"`
	Contact []Contact `xml:"Contact,omitempty" json:"Contact,omitempty"`
	ControlCentre []ControlCentre `xml:"ControlCentre,omitempty" json:"ControlCentre,omitempty"`
	OperatingDepartment []OperatingDepartment `xml:"OperatingDepartment,omitempty" json:"OperatingDepartment,omitempty"`
	OrganisationalUnit []OrganisationalUnit `xml:"OrganisationalUnit,omitempty" json:"OrganisationalUnit,omitempty"`
	Department []Department `xml:"Department,omitempty" json:"Department,omitempty"`
	OrganisationPart []OrganisationPart `xml:"OrganisationPart,omitempty" json:"OrganisationPart,omitempty"`
	RetailConsortium []RetailConsortium `xml:"RetailConsortium,omitempty" json:"RetailConsortium,omitempty"`
	ServicedOrganisation []ServicedOrganisation `xml:"ServicedOrganisation,omitempty" json:"ServicedOrganisation,omitempty"`
	GeneralOrganisation []GeneralOrganisation `xml:"GeneralOrganisation,omitempty" json:"GeneralOrganisation,omitempty"`
	ManagementAgent []ManagementAgent `xml:"ManagementAgent,omitempty" json:"ManagementAgent,omitempty"`
	TravelAgent []TravelAgent `xml:"TravelAgent,omitempty" json:"TravelAgent,omitempty"`
	OtherOrganisation []OtherOrganisation `xml:"OtherOrganisation,omitempty" json:"OtherOrganisation,omitempty"`
	OnlineServiceOperator []OnlineServiceOperator `xml:"OnlineServiceOperator,omitempty" json:"OnlineServiceOperator,omitempty"`
	Authority []Authority `xml:"Authority,omitempty" json:"Authority,omitempty"`
	Operator []Operator `xml:"Operator,omitempty" json:"Operator,omitempty"`
	VehicleMeetingLink []VehicleMeetingLink `xml:"VehicleMeetingLink,omitempty" json:"VehicleMeetingLink,omitempty"`
	ServiceLink []ServiceLink `xml:"ServiceLink,omitempty" json:"ServiceLink,omitempty"`
	SitePathLink []SitePathLink `xml:"SitePathLink,omitempty" json:"SitePathLink,omitempty"`
	PathLink []PathLink `xml:"PathLink,omitempty" json:"PathLink,omitempty"`
	RouteLink []RouteLink `xml:"RouteLink,omitempty" json:"RouteLink,omitempty"`
	TimingLink []TimingLink `xml:"TimingLink,omitempty" json:"TimingLink,omitempty"`
	WireElement []WireElement `xml:"WireElement,omitempty" json:"WireElement,omitempty"`
	RoadElement []RoadElement `xml:"RoadElement,omitempty" json:"RoadElement,omitempty"`
	RailwayElement []RailwayElement `xml:"RailwayElement,omitempty" json:"RailwayElement,omitempty"`
	ActivationLink []ActivationLink `xml:"ActivationLink,omitempty" json:"ActivationLink,omitempty"`
	VehicleMeetingPoint []VehicleMeetingPoint `xml:"VehicleMeetingPoint,omitempty" json:"VehicleMeetingPoint,omitempty"`
	BorderPoint []BorderPoint `xml:"BorderPoint,omitempty" json:"BorderPoint,omitempty"`
	FareScheduledStopPoint []FareScheduledStopPoint `xml:"FareScheduledStopPoint,omitempty" json:"FareScheduledStopPoint,omitempty"`
	ScheduledStopPoint []ScheduledStopPoint `xml:"ScheduledStopPoint,omitempty" json:"ScheduledStopPoint,omitempty"`
	PathJunction []PathJunction `xml:"PathJunction,omitempty" json:"PathJunction,omitempty"`
	RoutePoint []RoutePoint `xml:"RoutePoint,omitempty" json:"RoutePoint,omitempty"`
	ParkingPoint []ParkingPoint `xml:"ParkingPoint,omitempty" json:"ParkingPoint,omitempty"`
	GaragePoint []GaragePoint `xml:"GaragePoint,omitempty" json:"GaragePoint,omitempty"`
	ReliefPoint []ReliefPoint `xml:"ReliefPoint,omitempty" json:"ReliefPoint,omitempty"`
	TimingPoint []TimingPoint `xml:"TimingPoint,omitempty" json:"TimingPoint,omitempty"`
	WireJunction []WireJunction `xml:"WireJunction,omitempty" json:"WireJunction,omitempty"`
	RoadJunction []RoadJunction `xml:"RoadJunction,omitempty" json:"RoadJunction,omitempty"`
	RailwayJunction []RailwayJunction `xml:"RailwayJunction,omitempty" json:"RailwayJunction,omitempty"`
	TrafficControlPoint []TrafficControlPoint `xml:"TrafficControlPoint,omitempty" json:"TrafficControlPoint,omitempty"`
	BeaconPoint []BeaconPoint `xml:"BeaconPoint,omitempty" json:"BeaconPoint,omitempty"`
	ActivationPoint []ActivationPoint `xml:"ActivationPoint,omitempty" json:"ActivationPoint,omitempty"`
	Point []Point `xml:"Point,omitempty" json:"Point,omitempty"`
	LineShape []LineShape `xml:"LineShape,omitempty" json:"LineShape,omitempty"`
	TopographicProjection []TopographicProjection `xml:"TopographicProjection,omitempty" json:"TopographicProjection,omitempty"`
	ZoneProjection []ZoneProjection `xml:"ZoneProjection,omitempty" json:"ZoneProjection,omitempty"`
	ComplexFeatureProjection []ComplexFeatureProjection `xml:"ComplexFeatureProjection,omitempty" json:"ComplexFeatureProjection,omitempty"`
	LinkSequenceProjection []LinkSequenceProjection `xml:"LinkSequenceProjection,omitempty" json:"LinkSequenceProjection,omitempty"`
	LinkProjection []LinkProjection `xml:"LinkProjection,omitempty" json:"LinkProjection,omitempty"`
	PointProjection []PointProjection `xml:"PointProjection,omitempty" json:"PointProjection,omitempty"`
	CompositeFrame []CompositeFrame `xml:"CompositeFrame,omitempty" json:"CompositeFrame,omitempty"`
	MobilityJourneyFrame []MobilityJourneyFrame `xml:"MobilityJourneyFrame,omitempty" json:"MobilityJourneyFrame,omitempty"`
	MobilityServiceFrame []MobilityServiceFrame `xml:"MobilityServiceFrame,omitempty" json:"MobilityServiceFrame,omitempty"`
	SalesTransactionFrame []SalesTransactionFrame `xml:"SalesTransactionFrame,omitempty" json:"SalesTransactionFrame,omitempty"`
	FareFrame []FareFrame `xml:"FareFrame,omitempty" json:"FareFrame,omitempty"`
	DriverScheduleFrame []DriverScheduleFrame `xml:"DriverScheduleFrame,omitempty" json:"DriverScheduleFrame,omitempty"`
	VehicleScheduleFrame []VehicleScheduleFrame `xml:"VehicleScheduleFrame,omitempty" json:"VehicleScheduleFrame,omitempty"`
	ServiceFrame []ServiceFrame `xml:"ServiceFrame,omitempty" json:"ServiceFrame,omitempty"`
	TimetableFrame []TimetableFrame `xml:"TimetableFrame,omitempty" json:"TimetableFrame,omitempty"`
	SiteFrame []SiteFrame `xml:"SiteFrame,omitempty" json:"SiteFrame,omitempty"`
	InfrastructureFrame []InfrastructureFrame `xml:"InfrastructureFrame,omitempty" json:"InfrastructureFrame,omitempty"`
	GeneralFrame []GeneralFrame `xml:"GeneralFrame,omitempty" json:"GeneralFrame,omitempty"`
	ResourceFrame []ResourceFrame `xml:"ResourceFrame,omitempty" json:"ResourceFrame,omitempty"`
	ServiceCalendarFrame []ServiceCalendarFrame `xml:"ServiceCalendarFrame,omitempty" json:"ServiceCalendarFrame,omitempty"`
	UicOperatingPeriod []UicOperatingPeriod `xml:"UicOperatingPeriod,omitempty" json:"UicOperatingPeriod,omitempty"`
	OperatingPeriod []OperatingPeriod `xml:"OperatingPeriod,omitempty" json:"OperatingPeriod,omitempty"`
	OperatingDay []OperatingDay `xml:"OperatingDay,omitempty" json:"OperatingDay,omitempty"`
	ServiceCalendar []ServiceCalendar `xml:"ServiceCalendar,omitempty" json:"ServiceCalendar,omitempty"`
	VehicleSharingPlaceAssignment []VehicleSharingPlaceAssignment `xml:"VehicleSharingPlaceAssignment,omitempty" json:"VehicleSharingPlaceAssignment,omitempty"`
	VehiclePoolingPlaceAssignment []VehiclePoolingPlaceAssignment `xml:"VehiclePoolingPlaceAssignment,omitempty" json:"VehiclePoolingPlaceAssignment,omitempty"`
	TaxiServicePlaceAssignment []TaxiServicePlaceAssignment `xml:"TaxiServicePlaceAssignment,omitempty" json:"TaxiServicePlaceAssignment,omitempty"`
	VehicleServicePlaceAssignment []VehicleServicePlaceAssignment1 `xml:"VehicleServicePlaceAssignment,omitempty" json:"VehicleServicePlaceAssignment,omitempty"`
	NetexOrgUkNetexVehicleServicePlaceAssignment []VehicleServicePlaceAssignment2 `xml:"VehicleServicePlaceAssignment_,omitempty" json:"VehicleServicePlaceAssignment_,omitempty"`
	DynamicVehicleMeetingPointAssignment []DynamicVehicleMeetingPointAssignment `xml:"DynamicVehicleMeetingPointAssignment,omitempty" json:"DynamicVehicleMeetingPointAssignment,omitempty"`
	VehicleMeetingPointAssignment []VehicleMeetingPointAssignment1 `xml:"VehicleMeetingPointAssignment,omitempty" json:"VehicleMeetingPointAssignment,omitempty"`
	NetexOrgUkNetexVehicleMeetingPointAssignment []VehicleMeetingPointAssignment2 `xml:"VehicleMeetingPointAssignment_,omitempty" json:"VehicleMeetingPointAssignment_,omitempty"`
	VehicleAccessCredentialsAssignment []VehicleAccessCredentialsAssignment `xml:"VehicleAccessCredentialsAssignment,omitempty" json:"VehicleAccessCredentialsAssignment,omitempty"`
	DistributionAssignment []DistributionAssignment `xml:"DistributionAssignment,omitempty" json:"DistributionAssignment,omitempty"`
	SalesOfferPackageSubstitution []SalesOfferPackageSubstitution `xml:"SalesOfferPackageSubstitution,omitempty" json:"SalesOfferPackageSubstitution,omitempty"`
	CustomerPurchaseParameterAssignment []CustomerPurchaseParameterAssignment `xml:"CustomerPurchaseParameterAssignment,omitempty" json:"CustomerPurchaseParameterAssignment,omitempty"`
	SpecificParameterAssignment []SpecificParameterAssignment `xml:"SpecificParameterAssignment,omitempty" json:"SpecificParameterAssignment,omitempty"`
	GenericParameterAssignmentInContext []GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
	GenericParameterAssignment []GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	ValidityParameterAssignment []ValidityParameterAssignment `xml:"ValidityParameterAssignment,omitempty" json:"ValidityParameterAssignment,omitempty"`
	AccessRightParameterAssignment []AccessRightParameterAssignment `xml:"AccessRightParameterAssignment,omitempty" json:"AccessRightParameterAssignment,omitempty"`
	JourneyAccounting []JourneyAccounting `xml:"JourneyAccounting,omitempty" json:"JourneyAccounting,omitempty"`
	TimeDemandTypeAssignment []TimeDemandTypeAssignment `xml:"TimeDemandTypeAssignment,omitempty" json:"TimeDemandTypeAssignment,omitempty"`
	TransferRestriction []TransferRestriction `xml:"TransferRestriction,omitempty" json:"TransferRestriction,omitempty"`
	ServiceExclusion []ServiceExclusion `xml:"ServiceExclusion,omitempty" json:"ServiceExclusion,omitempty"`
	DisplayAssignment []DisplayAssignment `xml:"DisplayAssignment,omitempty" json:"DisplayAssignment,omitempty"`
	OvertakingPossibility []OvertakingPossibility `xml:"OvertakingPossibility,omitempty" json:"OvertakingPossibility,omitempty"`
	MeetingRestriction []MeetingRestriction `xml:"MeetingRestriction,omitempty" json:"MeetingRestriction,omitempty"`
	RestrictedManoeuvre []RestrictedManoeuvre `xml:"RestrictedManoeuvre,omitempty" json:"RestrictedManoeuvre,omitempty"`
	VehicleTypeAtPoint []VehicleTypeAtPoint `xml:"VehicleTypeAtPoint,omitempty" json:"VehicleTypeAtPoint,omitempty"`
	ActivationAssignment []ActivationAssignment `xml:"ActivationAssignment,omitempty" json:"ActivationAssignment,omitempty"`
	SalesNoticeAssignment []SalesNoticeAssignment `xml:"SalesNoticeAssignment,omitempty" json:"SalesNoticeAssignment,omitempty"`
	NoticeAssignment []NoticeAssignment `xml:"NoticeAssignment,omitempty" json:"NoticeAssignment,omitempty"`
	CheckConstraintThroughput []CheckConstraintThroughput `xml:"CheckConstraintThroughput,omitempty" json:"CheckConstraintThroughput,omitempty"`
	CheckConstraintDelay []CheckConstraintDelay `xml:"CheckConstraintDelay,omitempty" json:"CheckConstraintDelay,omitempty"`
	CheckConstraint []CheckConstraint `xml:"CheckConstraint,omitempty" json:"CheckConstraint,omitempty"`
	DayTypeAssignment []DayTypeAssignment `xml:"DayTypeAssignment,omitempty" json:"DayTypeAssignment,omitempty"`
	GroupOfTimebands []GroupOfTimebands `xml:"GroupOfTimebands,omitempty" json:"GroupOfTimebands,omitempty"`
	Timeband []Timeband `xml:"Timeband,omitempty" json:"Timeband,omitempty"`
	FareDayType []FareDayType `xml:"FareDayType,omitempty" json:"FareDayType,omitempty"`
	OrganisationDayType []OrganisationDayType `xml:"OrganisationDayType,omitempty" json:"OrganisationDayType,omitempty"`
	DayType []DayType `xml:"DayType,omitempty" json:"DayType,omitempty"`
	PoolOfVehicles []PoolOfVehicles `xml:"PoolOfVehicles,omitempty" json:"PoolOfVehicles,omitempty"`
	GroupOfSingleJourneys []GroupOfSingleJourneys `xml:"GroupOfSingleJourneys,omitempty" json:"GroupOfSingleJourneys,omitempty"`
	GroupOfDistributionChannels []GroupOfDistributionChannels `xml:"GroupOfDistributionChannels,omitempty" json:"GroupOfDistributionChannels,omitempty"`
	GroupOfDistanceMatrixElements []GroupOfDistanceMatrixElements `xml:"GroupOfDistanceMatrixElements,omitempty" json:"GroupOfDistanceMatrixElements,omitempty"`
	PriceGroup []PriceGroup `xml:"PriceGroup,omitempty" json:"PriceGroup,omitempty"`
	StandardFareTable []StandardFareTable `xml:"StandardFareTable,omitempty" json:"StandardFareTable,omitempty"`
	FareTableInContext []FareTableInContext `xml:"FareTableInContext,omitempty" json:"FareTableInContext,omitempty"`
	FareTable []FareTable `xml:"FareTable,omitempty" json:"FareTable,omitempty"`
	GroupOfServices []GroupOfServices `xml:"GroupOfServices,omitempty" json:"GroupOfServices,omitempty"`
	RhythmicalJourneyGroup []RhythmicalJourneyGroup `xml:"RhythmicalJourneyGroup,omitempty" json:"RhythmicalJourneyGroup,omitempty"`
	HeadwayJourneyGroup []HeadwayJourneyGroup `xml:"HeadwayJourneyGroup,omitempty" json:"HeadwayJourneyGroup,omitempty"`
	CrewBase []CrewBase `xml:"CrewBase,omitempty" json:"CrewBase,omitempty"`
	GroupOfTimingLinks []GroupOfTimingLinks `xml:"GroupOfTimingLinks,omitempty" json:"GroupOfTimingLinks,omitempty"`
	Network []Network `xml:"Network,omitempty" json:"Network,omitempty"`
	GroupOfLines []GroupOfLines `xml:"GroupOfLines,omitempty" json:"GroupOfLines,omitempty"`
	GroupOfOperators []GroupOfOperators `xml:"GroupOfOperators,omitempty" json:"GroupOfOperators,omitempty"`
	GroupOfPlaces []GroupOfPlaces `xml:"GroupOfPlaces,omitempty" json:"GroupOfPlaces,omitempty"`
	GroupOfLinkSequences []GroupOfLinkSequences `xml:"GroupOfLinkSequences,omitempty" json:"GroupOfLinkSequences,omitempty"`
	GroupOfTariffZones []GroupOfTariffZones `xml:"GroupOfTariffZones,omitempty" json:"GroupOfTariffZones,omitempty"`
	MobilityServiceConstraintZone []MobilityServiceConstraintZone `xml:"MobilityServiceConstraintZone,omitempty" json:"MobilityServiceConstraintZone,omitempty"`
	RoutingConstraintZone []RoutingConstraintZone `xml:"RoutingConstraintZone,omitempty" json:"RoutingConstraintZone,omitempty"`
	StopArea []StopArea `xml:"StopArea,omitempty" json:"StopArea,omitempty"`
	AccessZone []AccessZone `xml:"AccessZone,omitempty" json:"AccessZone,omitempty"`
	VehicleMeetingPlace []VehicleMeetingPlace1 `xml:"VehicleMeetingPlace,omitempty" json:"VehicleMeetingPlace,omitempty"`
	VehiclePoolingMeetingPlace []VehiclePoolingMeetingPlace `xml:"VehiclePoolingMeetingPlace,omitempty" json:"VehiclePoolingMeetingPlace,omitempty"`
	NetexOrgUkNetexVehicleMeetingPlace []VehicleMeetingPlace2 `xml:"VehicleMeetingPlace_,omitempty" json:"VehicleMeetingPlace_,omitempty"`
	HailAndRideArea []HailAndRideArea `xml:"HailAndRideArea,omitempty" json:"HailAndRideArea,omitempty"`
	FlexibleArea []FlexibleArea `xml:"FlexibleArea,omitempty" json:"FlexibleArea,omitempty"`
	FlexibleQuay []FlexibleQuay `xml:"FlexibleQuay,omitempty" json:"FlexibleQuay,omitempty"`
	FlexibleStopPlace []FlexibleStopPlace `xml:"FlexibleStopPlace,omitempty" json:"FlexibleStopPlace,omitempty"`
	Garage []Garage `xml:"Garage,omitempty" json:"Garage,omitempty"`
	EquipmentPlace []EquipmentPlace `xml:"EquipmentPlace,omitempty" json:"EquipmentPlace,omitempty"`
	TaxiStand []TaxiStand `xml:"TaxiStand,omitempty" json:"TaxiStand,omitempty"`
	VehicleStoppingPlace []VehicleStoppingPlace `xml:"VehicleStoppingPlace,omitempty" json:"VehicleStoppingPlace,omitempty"`
	BoardingPosition []BoardingPosition `xml:"BoardingPosition,omitempty" json:"BoardingPosition,omitempty"`
	AccessSpace []AccessSpace `xml:"AccessSpace,omitempty" json:"AccessSpace,omitempty"`
	Quay []Quay `xml:"Quay,omitempty" json:"Quay,omitempty"`
	PointOfInterestSpace []PointOfInterestSpace `xml:"PointOfInterestSpace,omitempty" json:"PointOfInterestSpace,omitempty"`
	ParkingComponent []ParkingComponent `xml:"ParkingComponent,omitempty" json:"ParkingComponent,omitempty"`
	VehicleStoppingPosition []VehicleStoppingPosition `xml:"VehicleStoppingPosition,omitempty" json:"VehicleStoppingPosition,omitempty"`
	VehiclePoolingParkingArea []VehiclePoolingParkingArea `xml:"VehiclePoolingParkingArea,omitempty" json:"VehiclePoolingParkingArea,omitempty"`
	VehicleSharingParkingArea []VehicleSharingParkingArea `xml:"VehicleSharingParkingArea,omitempty" json:"VehicleSharingParkingArea,omitempty"`
	TaxiParkingArea []TaxiParkingArea `xml:"TaxiParkingArea,omitempty" json:"TaxiParkingArea,omitempty"`
	ParkingArea []ParkingArea `xml:"ParkingArea,omitempty" json:"ParkingArea,omitempty"`
	MonitoredVehicleSharingParkingBay []MonitoredVehicleSharingParkingBay `xml:"MonitoredVehicleSharingParkingBay,omitempty" json:"MonitoredVehicleSharingParkingBay,omitempty"`
	VehiclePoolingParkingBay []VehiclePoolingParkingBay `xml:"VehiclePoolingParkingBay,omitempty" json:"VehiclePoolingParkingBay,omitempty"`
	VehicleSharingParkingBay []VehicleSharingParkingBay `xml:"VehicleSharingParkingBay,omitempty" json:"VehicleSharingParkingBay,omitempty"`
	ParkingBay []ParkingBay `xml:"ParkingBay,omitempty" json:"ParkingBay,omitempty"`
	PointOfInterestVehicleEntrance []PointOfInterestVehicleEntrance `xml:"PointOfInterestVehicleEntrance,omitempty" json:"PointOfInterestVehicleEntrance,omitempty"`
	PointOfInterestEntrance []PointOfInterestEntrance `xml:"PointOfInterestEntrance,omitempty" json:"PointOfInterestEntrance,omitempty"`
	ParkingPassengerEntrance []ParkingPassengerEntrance `xml:"ParkingPassengerEntrance,omitempty" json:"ParkingPassengerEntrance,omitempty"`
	ParkingEntranceForVehicles []ParkingEntranceForVehicles `xml:"ParkingEntranceForVehicles,omitempty" json:"ParkingEntranceForVehicles,omitempty"`
	StopPlaceVehicleEntrance []StopPlaceVehicleEntrance `xml:"StopPlaceVehicleEntrance,omitempty" json:"StopPlaceVehicleEntrance,omitempty"`
	StopPlaceEntrance []StopPlaceEntrance `xml:"StopPlaceEntrance,omitempty" json:"StopPlaceEntrance,omitempty"`
	Entrance []Entrance `xml:"Entrance,omitempty" json:"Entrance,omitempty"`
	PointOfInterest []PointOfInterest `xml:"PointOfInterest,omitempty" json:"PointOfInterest,omitempty"`
	Parking []Parking `xml:"Parking,omitempty" json:"Parking,omitempty"`
	TaxiRank []TaxiRank `xml:"TaxiRank,omitempty" json:"TaxiRank,omitempty"`
	StopPlace []StopPlace `xml:"StopPlace,omitempty" json:"StopPlace,omitempty"`
	ServiceSite []ServiceSite `xml:"ServiceSite,omitempty" json:"ServiceSite,omitempty"`
	TopographicPlace []TopographicPlace `xml:"TopographicPlace,omitempty" json:"TopographicPlace,omitempty"`
	Country []Country `xml:"Country,omitempty" json:"Country,omitempty"`
	AddressablePlace []AddressablePlace `xml:"AddressablePlace,omitempty" json:"AddressablePlace,omitempty"`
	PostalAddress []PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	RoadAddress []RoadAddress `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
	TransportAdministrativeZone []TransportAdministrativeZone `xml:"TransportAdministrativeZone,omitempty" json:"TransportAdministrativeZone,omitempty"`
	AdministrativeZone []AdministrativeZone `xml:"AdministrativeZone,omitempty" json:"AdministrativeZone,omitempty"`
	FareZone []FareZone `xml:"FareZone,omitempty" json:"FareZone,omitempty"`
	TariffZone []TariffZone `xml:"TariffZone,omitempty" json:"TariffZone,omitempty"`
	GeneralZone []GeneralZone `xml:"GeneralZone,omitempty" json:"GeneralZone,omitempty"`
	Zone []Zone `xml:"Zone,omitempty" json:"Zone,omitempty"`
	GroupOfLinks []GroupOfLinks `xml:"GroupOfLinks,omitempty" json:"GroupOfLinks,omitempty"`
	GroupOfPoints []GroupOfPoints `xml:"GroupOfPoints,omitempty" json:"GroupOfPoints,omitempty"`
	Layer []Layer `xml:"Layer,omitempty" json:"Layer,omitempty"`
	GeneralGroupOfEntities []GeneralGroupOfEntities `xml:"GeneralGroupOfEntities,omitempty" json:"GeneralGroupOfEntities,omitempty"`
	ResponsibilityRole []ResponsibilityRole `xml:"ResponsibilityRole,omitempty" json:"ResponsibilityRole,omitempty"`
	ResponsibilitySet []ResponsibilitySet `xml:"ResponsibilitySet,omitempty" json:"ResponsibilitySet,omitempty"`
	ValueSet []ValueSet `xml:"ValueSet,omitempty" json:"ValueSet,omitempty"`
	TypeOfFleet []TypeOfFleet `xml:"TypeOfFleet,omitempty" json:"TypeOfFleet,omitempty"`
	ParkingBayStatus []ParkingBayStatus `xml:"ParkingBayStatus,omitempty" json:"ParkingBayStatus,omitempty"`
	TypeOfMediumAccessDevice []TypeOfMediumAccessDevice `xml:"TypeOfMediumAccessDevice,omitempty" json:"TypeOfMediumAccessDevice,omitempty"`
	TypeOfMachineReadability []TypeOfMachineReadability `xml:"TypeOfMachineReadability,omitempty" json:"TypeOfMachineReadability,omitempty"`
	TypeOfProof []TypeOfProof `xml:"TypeOfProof,omitempty" json:"TypeOfProof,omitempty"`
	TypeOfConcession []TypeOfConcession `xml:"TypeOfConcession,omitempty" json:"TypeOfConcession,omitempty"`
	ChargingMoment []ChargingMoment `xml:"ChargingMoment,omitempty" json:"ChargingMoment,omitempty"`
	TypeOfUsageParameter []TypeOfUsageParameter `xml:"TypeOfUsageParameter,omitempty" json:"TypeOfUsageParameter,omitempty"`
	TypeOfFareTable []TypeOfFareTable `xml:"TypeOfFareTable,omitempty" json:"TypeOfFareTable,omitempty"`
	TypeOfPricingRule []TypeOfPricingRule `xml:"TypeOfPricingRule,omitempty" json:"TypeOfPricingRule,omitempty"`
	PriceUnit []PriceUnit `xml:"PriceUnit,omitempty" json:"PriceUnit,omitempty"`
	TimingAlgorithmType []TimingAlgorithmType `xml:"TimingAlgorithmType,omitempty" json:"TimingAlgorithmType,omitempty"`
	PurposeOfJourneyPartition []PurposeOfJourneyPartition `xml:"PurposeOfJourneyPartition,omitempty" json:"PurposeOfJourneyPartition,omitempty"`
	PointOfInterestClassification []PointOfInterestClassification `xml:"PointOfInterestClassification,omitempty" json:"PointOfInterestClassification,omitempty"`
	TypeOfParking []TypeOfParking `xml:"TypeOfParking,omitempty" json:"TypeOfParking,omitempty"`
	TypeOfServiceFeature []TypeOfServiceFeature `xml:"TypeOfServiceFeature,omitempty" json:"TypeOfServiceFeature,omitempty"`
	Direction []Direction `xml:"Direction,omitempty" json:"Direction,omitempty"`
	TypeOfSecurityList []TypeOfSecurityList `xml:"TypeOfSecurityList,omitempty" json:"TypeOfSecurityList,omitempty"`
	TypeOfDriverPermit []TypeOfDriverPermit `xml:"TypeOfDriverPermit,omitempty" json:"TypeOfDriverPermit,omitempty"`
	PurposeOfEquipmentProfile []PurposeOfEquipmentProfile `xml:"PurposeOfEquipmentProfile,omitempty" json:"PurposeOfEquipmentProfile,omitempty"`
	TypeOfProductCategory []TypeOfProductCategory `xml:"TypeOfProductCategory,omitempty" json:"TypeOfProductCategory,omitempty"`
	TypeOfPaymentMethod []TypeOfPaymentMethod `xml:"TypeOfPaymentMethod,omitempty" json:"TypeOfPaymentMethod,omitempty"`
	ClassOfUse []ClassOfUse `xml:"ClassOfUse,omitempty" json:"ClassOfUse,omitempty"`
	Submode []Submode `xml:"Submode,omitempty" json:"Submode,omitempty"`
	OpenTransportMode []OpenTransportMode `xml:"OpenTransportMode,omitempty" json:"OpenTransportMode,omitempty"`
	TypeOfCodespaceAssignment []TypeOfCodespaceAssignment `xml:"TypeOfCodespaceAssignment,omitempty" json:"TypeOfCodespaceAssignment,omitempty"`
	TypeOfValidity []TypeOfValidity `xml:"TypeOfValidity,omitempty" json:"TypeOfValidity,omitempty"`
	PurposeOfGrouping []PurposeOfGrouping `xml:"PurposeOfGrouping,omitempty" json:"PurposeOfGrouping,omitempty"`
	Branding []Branding `xml:"Branding,omitempty" json:"Branding,omitempty"`
	DataSource []DataSource `xml:"DataSource,omitempty" json:"DataSource,omitempty"`
	TypeOfMobilityService []TypeOfMobilityService `xml:"TypeOfMobilityService,omitempty" json:"TypeOfMobilityService,omitempty"`
	TypeOfRetailDevice []TypeOfRetailDevice `xml:"TypeOfRetailDevice,omitempty" json:"TypeOfRetailDevice,omitempty"`
	CustomerAccountStatus []CustomerAccountStatus `xml:"CustomerAccountStatus,omitempty" json:"CustomerAccountStatus,omitempty"`
	TypeOfCustomerAccount []TypeOfCustomerAccount `xml:"TypeOfCustomerAccount,omitempty" json:"TypeOfCustomerAccount,omitempty"`
	TypeOfFareContractEntry []TypeOfFareContractEntry `xml:"TypeOfFareContractEntry,omitempty" json:"TypeOfFareContractEntry,omitempty"`
	TypeOfFareContract []TypeOfFareContract `xml:"TypeOfFareContract,omitempty" json:"TypeOfFareContract,omitempty"`
	TypeOfTravelDocument []TypeOfTravelDocument `xml:"TypeOfTravelDocument,omitempty" json:"TypeOfTravelDocument,omitempty"`
	TypeOfSalesOfferPackage []TypeOfSalesOfferPackage `xml:"TypeOfSalesOfferPackage,omitempty" json:"TypeOfSalesOfferPackage,omitempty"`
	TypeOfFareProduct []TypeOfFareProduct `xml:"TypeOfFareProduct,omitempty" json:"TypeOfFareProduct,omitempty"`
	TypeOfFareStructureElement []TypeOfFareStructureElement `xml:"TypeOfFareStructureElement,omitempty" json:"TypeOfFareStructureElement,omitempty"`
	TypeOfTariff []TypeOfTariff `xml:"TypeOfTariff,omitempty" json:"TypeOfTariff,omitempty"`
	TypeOfAccessRightAssignment []TypeOfAccessRightAssignment `xml:"TypeOfAccessRightAssignment,omitempty" json:"TypeOfAccessRightAssignment,omitempty"`
	TypeOfFareStructureFactor []TypeOfFareStructureFactor `xml:"TypeOfFareStructureFactor,omitempty" json:"TypeOfFareStructureFactor,omitempty"`
	TypeOfFlexibleService []TypeOfFlexibleService `xml:"TypeOfFlexibleService,omitempty" json:"TypeOfFlexibleService,omitempty"`
	TypeOfTimeDemandType []TypeOfTimeDemandType `xml:"TypeOfTimeDemandType,omitempty" json:"TypeOfTimeDemandType,omitempty"`
	TypeOfPassengerInformationEquipment []TypeOfPassengerInformationEquipment `xml:"TypeOfPassengerInformationEquipment,omitempty" json:"TypeOfPassengerInformationEquipment,omitempty"`
	TypeOfJourneyPattern []TypeOfJourneyPattern `xml:"TypeOfJourneyPattern,omitempty" json:"TypeOfJourneyPattern,omitempty"`
	TypeOfActivation []TypeOfActivation `xml:"TypeOfActivation,omitempty" json:"TypeOfActivation,omitempty"`
	TypeOfModeOfOperation []TypeOfModeOfOperation `xml:"TypeOfModeOfOperation,omitempty" json:"TypeOfModeOfOperation,omitempty"`
	TypeOfPlug []TypeOfPlug `xml:"TypeOfPlug,omitempty" json:"TypeOfPlug,omitempty"`
	TypeOfBatteryChemistry []TypeOfBatteryChemistry `xml:"TypeOfBatteryChemistry,omitempty" json:"TypeOfBatteryChemistry,omitempty"`
	TypeOfLine []TypeOfLine `xml:"TypeOfLine,omitempty" json:"TypeOfLine,omitempty"`
	TypeOfDeliveryVariant []TypeOfDeliveryVariant `xml:"TypeOfDeliveryVariant,omitempty" json:"TypeOfDeliveryVariant,omitempty"`
	TypeOfNotice []TypeOfNotice `xml:"TypeOfNotice,omitempty" json:"TypeOfNotice,omitempty"`
	TypeOfCongestion []TypeOfCongestion `xml:"TypeOfCongestion,omitempty" json:"TypeOfCongestion,omitempty"`
	TypeOfFacility []TypeOfFacility `xml:"TypeOfFacility,omitempty" json:"TypeOfFacility,omitempty"`
	TypeOfService []TypeOfService `xml:"TypeOfService,omitempty" json:"TypeOfService,omitempty"`
	TypeOfEquipment []TypeOfEquipment `xml:"TypeOfEquipment,omitempty" json:"TypeOfEquipment,omitempty"`
	TypeOfFeature []TypeOfFeature `xml:"TypeOfFeature,omitempty" json:"TypeOfFeature,omitempty"`
	TypeOfLinkSequence []TypeOfLinkSequence `xml:"TypeOfLinkSequence,omitempty" json:"TypeOfLinkSequence,omitempty"`
	TypeOfPlace []TypeOfPlace `xml:"TypeOfPlace,omitempty" json:"TypeOfPlace,omitempty"`
	TypeOfTransfer []TypeOfTransfer `xml:"TypeOfTransfer,omitempty" json:"TypeOfTransfer,omitempty"`
	TypeOfOperation []TypeOfOperation `xml:"TypeOfOperation,omitempty" json:"TypeOfOperation,omitempty"`
	TypeOfOrganisationPart []TypeOfOrganisationPart `xml:"TypeOfOrganisationPart,omitempty" json:"TypeOfOrganisationPart,omitempty"`
	TypeOfOrganisation []TypeOfOrganisation `xml:"TypeOfOrganisation,omitempty" json:"TypeOfOrganisation,omitempty"`
	TypeOfZone []TypeOfZone `xml:"TypeOfZone,omitempty" json:"TypeOfZone,omitempty"`
	TypeOfLink []TypeOfLink `xml:"TypeOfLink,omitempty" json:"TypeOfLink,omitempty"`
	TypeOfPoint []TypeOfPoint `xml:"TypeOfPoint,omitempty" json:"TypeOfPoint,omitempty"`
	TypeOfProjection []TypeOfProjection `xml:"TypeOfProjection,omitempty" json:"TypeOfProjection,omitempty"`
	TypeOfFrame []TypeOfFrame `xml:"TypeOfFrame,omitempty" json:"TypeOfFrame,omitempty"`
	TypeOfResponsibilityRole []TypeOfResponsibilityRole `xml:"TypeOfResponsibilityRole,omitempty" json:"TypeOfResponsibilityRole,omitempty"`
	TypeOfEntity []TypeOfEntity `xml:"TypeOfEntity,omitempty" json:"TypeOfEntity,omitempty"`
	TypeOfVersion []TypeOfVersion `xml:"TypeOfVersion,omitempty" json:"TypeOfVersion,omitempty"`
	PassingTimeView []PassingTimeView `xml:"PassingTimeView,omitempty" json:"PassingTimeView,omitempty"`
	SimpleAvailabilityCondition []SimpleAvailabilityCondition `xml:"SimpleAvailabilityCondition,omitempty" json:"SimpleAvailabilityCondition,omitempty"`
	ValidDuring []ValidDuring `xml:"ValidDuring,omitempty" json:"ValidDuring,omitempty"`
	AvailabilityCondition []AvailabilityCondition `xml:"AvailabilityCondition,omitempty" json:"AvailabilityCondition,omitempty"`
	ValidityRuleParameter []ValidityRuleParameter `xml:"ValidityRuleParameter,omitempty" json:"ValidityRuleParameter,omitempty"`
	ValidityTrigger []ValidityTrigger `xml:"ValidityTrigger,omitempty" json:"ValidityTrigger,omitempty"`
	ValidityCondition []ValidityCondition `xml:"ValidityCondition,omitempty" json:"ValidityCondition,omitempty"`
	Version []Version `xml:"Version,omitempty" json:"Version,omitempty"`
}

// GeneralFrameRefStructure represents the GeneralFrameRefStructure element
// Type for a reference to a GENERAL FRAME.
type GeneralFrameRefStructure struct {
	VersionFrameRefStructure
}

// GeneralVersionFrameStructure represents the General_VersionFrameStructure element
// Type for a GENERAL FRAME.
type GeneralVersionFrameStructure struct {
	CommonVersionFrameStructure
	// Entities in GENERAL FRAME.
	Members *GeneralFrameMembersRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// GeneralFrameMembersRelStructure represents the generalFrameMembers_RelStructure element
// A collection of one or more VERSION FRAME MEMBERS.
type GeneralFrameMembersRelStructure struct {
	ContainmentAggregationStructure
	GeneralFrameMember []GeneralFrameMember `xml:"GeneralFrameMember,omitempty" json:"GeneralFrameMember,omitempty"`
	Fleet []Fleet `xml:"Fleet,omitempty" json:"Fleet,omitempty"`
	IndividualPassengerInfo []IndividualPassengerInfo `xml:"IndividualPassengerInfo,omitempty" json:"IndividualPassengerInfo,omitempty"`
	VehiclePoolingDriverInfo []VehiclePoolingDriverInfo `xml:"VehiclePoolingDriverInfo,omitempty" json:"VehiclePoolingDriverInfo,omitempty"`
	IndividualTraveller []IndividualTraveller `xml:"IndividualTraveller,omitempty" json:"IndividualTraveller,omitempty"`
	ParkingBayCondition []ParkingBayCondition `xml:"ParkingBayCondition,omitempty" json:"ParkingBayCondition,omitempty"`
	RentalAvailability []RentalAvailability `xml:"RentalAvailability,omitempty" json:"RentalAvailability,omitempty"`
	Smartcard []Smartcard `xml:"Smartcard,omitempty" json:"Smartcard,omitempty"`
	EmvCard []EmvCard `xml:"EmvCard,omitempty" json:"EmvCard,omitempty"`
	MobileDevice []MobileDevice `xml:"MobileDevice,omitempty" json:"MobileDevice,omitempty"`
	MediumAccessDevice []MediumAccessDevice `xml:"MediumAccessDevice,omitempty" json:"MediumAccessDevice,omitempty"`
	ServiceAccessCode []ServiceAccessCode `xml:"ServiceAccessCode,omitempty" json:"ServiceAccessCode,omitempty"`
	TravelDocument []TravelDocument `xml:"TravelDocument,omitempty" json:"TravelDocument,omitempty"`
	CustomerAccount []CustomerAccount `xml:"CustomerAccount,omitempty" json:"CustomerAccount,omitempty"`
	SalesTransaction []SalesTransaction `xml:"SalesTransaction,omitempty" json:"SalesTransaction,omitempty"`
	OfferedTravelSpecification []OfferedTravelSpecification `xml:"OfferedTravelSpecification,omitempty" json:"OfferedTravelSpecification,omitempty"`
	RequestedTravelSpecification []RequestedTravelSpecification `xml:"RequestedTravelSpecification,omitempty" json:"RequestedTravelSpecification,omitempty"`
	TravelSpecification []TravelSpecification1 `xml:"TravelSpecification,omitempty" json:"TravelSpecification,omitempty"`
	NetexOrgUkNetexTravelSpecification []TravelSpecification2 `xml:"TravelSpecification_,omitempty" json:"TravelSpecification_,omitempty"`
	FareContractEntry []FareContractEntry `xml:"FareContractEntry_,omitempty" json:"FareContractEntry_,omitempty"`
	FareContract []FareContract `xml:"FareContract,omitempty" json:"FareContract,omitempty"`
	Customer []Customer `xml:"Customer,omitempty" json:"Customer,omitempty"`
	ParkingTariff []ParkingTariff `xml:"ParkingTariff,omitempty" json:"ParkingTariff,omitempty"`
	GroupOfSalesOfferPackages []GroupOfSalesOfferPackages `xml:"GroupOfSalesOfferPackages,omitempty" json:"GroupOfSalesOfferPackages,omitempty"`
	DistributionChannel []DistributionChannel `xml:"DistributionChannel,omitempty" json:"DistributionChannel,omitempty"`
	Tariff []Tariff `xml:"Tariff,omitempty" json:"Tariff,omitempty"`
	CustomerPurchasePackage []CustomerPurchasePackage `xml:"CustomerPurchasePackage,omitempty" json:"CustomerPurchasePackage,omitempty"`
	SalesOfferPackage []SalesOfferPackage `xml:"SalesOfferPackage,omitempty" json:"SalesOfferPackage,omitempty"`
	FulfilmentMethod []FulfilmentMethod `xml:"FulfilmentMethod,omitempty" json:"FulfilmentMethod,omitempty"`
	CappingRule []CappingRule `xml:"CappingRule,omitempty" json:"CappingRule,omitempty"`
	EntitlementProduct []EntitlementProduct `xml:"EntitlementProduct,omitempty" json:"EntitlementProduct,omitempty"`
	SupplementProduct []SupplementProduct `xml:"SupplementProduct,omitempty" json:"SupplementProduct,omitempty"`
	PreassignedFareProduct []PreassignedFareProduct `xml:"PreassignedFareProduct,omitempty" json:"PreassignedFareProduct,omitempty"`
	AmountOfPriceUnitProduct []AmountOfPriceUnitProduct `xml:"AmountOfPriceUnitProduct,omitempty" json:"AmountOfPriceUnitProduct,omitempty"`
	CappedDiscountRight []CappedDiscountRight `xml:"CappedDiscountRight,omitempty" json:"CappedDiscountRight,omitempty"`
	UsageDiscountRight []UsageDiscountRight `xml:"UsageDiscountRight,omitempty" json:"UsageDiscountRight,omitempty"`
	ThirdPartyProduct []ThirdPartyProduct `xml:"ThirdPartyProduct,omitempty" json:"ThirdPartyProduct,omitempty"`
	SaleDiscountRight []SaleDiscountRight `xml:"SaleDiscountRight,omitempty" json:"SaleDiscountRight,omitempty"`
	ServiceAccessRight []ServiceAccessRight1 `xml:"ServiceAccessRight,omitempty" json:"ServiceAccessRight,omitempty"`
	NetexOrgUkNetexServiceAccessRight []ServiceAccessRight2 `xml:"ServiceAccessRight_,omitempty" json:"ServiceAccessRight_,omitempty"`
	TimeInterval []TimeInterval `xml:"TimeInterval,omitempty" json:"TimeInterval,omitempty"`
	FareQuotaFactor []FareQuotaFactor `xml:"FareQuotaFactor,omitempty" json:"FareQuotaFactor,omitempty"`
	FareDemandFactor []FareDemandFactor `xml:"FareDemandFactor,omitempty" json:"FareDemandFactor,omitempty"`
	QualityStructureFactor []QualityStructureFactor `xml:"QualityStructureFactor,omitempty" json:"QualityStructureFactor,omitempty"`
	ControllableElement []ControllableElement `xml:"ControllableElement,omitempty" json:"ControllableElement,omitempty"`
	ValidableElement []ValidableElement `xml:"ValidableElement,omitempty" json:"ValidableElement,omitempty"`
	AdditionalDriverOption []AdditionalDriverOption `xml:"AdditionalDriverOption,omitempty" json:"AdditionalDriverOption,omitempty"`
	RentalOption []RentalOption `xml:"RentalOption,omitempty" json:"RentalOption,omitempty"`
	RentalPenaltyPolicy []RentalPenaltyPolicy `xml:"RentalPenaltyPolicy,omitempty" json:"RentalPenaltyPolicy,omitempty"`
	VehiclePoolerProfile []VehiclePoolerProfile `xml:"VehiclePoolerProfile,omitempty" json:"VehiclePoolerProfile,omitempty"`
	SalesOfferPackageEntitlementRequired []SalesOfferPackageEntitlementRequired `xml:"SalesOfferPackageEntitlementRequired,omitempty" json:"SalesOfferPackageEntitlementRequired,omitempty"`
	SalesOfferPackageEntitlementGiven []SalesOfferPackageEntitlementGiven `xml:"SalesOfferPackageEntitlementGiven,omitempty" json:"SalesOfferPackageEntitlementGiven,omitempty"`
	MinimumStay []MinimumStay `xml:"MinimumStay,omitempty" json:"MinimumStay,omitempty"`
	Interchanging []Interchanging `xml:"Interchanging,omitempty" json:"Interchanging,omitempty"`
	Suspending []Suspending `xml:"Suspending,omitempty" json:"Suspending,omitempty"`
	UsageValidityPeriod []UsageValidityPeriod `xml:"UsageValidityPeriod,omitempty" json:"UsageValidityPeriod,omitempty"`
	FrequencyOfUse []FrequencyOfUse `xml:"FrequencyOfUse,omitempty" json:"FrequencyOfUse,omitempty"`
	StepLimit []StepLimit `xml:"StepLimit,omitempty" json:"StepLimit,omitempty"`
	Routing []Routing `xml:"Routing,omitempty" json:"Routing,omitempty"`
	RoundTrip []RoundTrip `xml:"RoundTrip,omitempty" json:"RoundTrip,omitempty"`
	LuggageAllowance []LuggageAllowance `xml:"LuggageAllowance,omitempty" json:"LuggageAllowance,omitempty"`
	EntitlementRequired []EntitlementRequired `xml:"EntitlementRequired,omitempty" json:"EntitlementRequired,omitempty"`
	EntitlementGiven []EntitlementGiven `xml:"EntitlementGiven,omitempty" json:"EntitlementGiven,omitempty"`
	EligibilityChangePolicy []EligibilityChangePolicy `xml:"EligibilityChangePolicy,omitempty" json:"EligibilityChangePolicy,omitempty"`
	CompanionProfile []CompanionProfile `xml:"CompanionProfile,omitempty" json:"CompanionProfile,omitempty"`
	GroupTicket []GroupTicket `xml:"GroupTicket,omitempty" json:"GroupTicket,omitempty"`
	CommercialProfile []CommercialProfile `xml:"CommercialProfile,omitempty" json:"CommercialProfile,omitempty"`
	UserProfile []UserProfile `xml:"UserProfile,omitempty" json:"UserProfile,omitempty"`
	Subscribing []Subscribing `xml:"Subscribing,omitempty" json:"Subscribing,omitempty"`
	PenaltyPolicy []PenaltyPolicy `xml:"PenaltyPolicy,omitempty" json:"PenaltyPolicy,omitempty"`
	ChargingPolicy []ChargingPolicy `xml:"ChargingPolicy,omitempty" json:"ChargingPolicy,omitempty"`
	Cancelling []Cancelling `xml:"Cancelling,omitempty" json:"Cancelling,omitempty"`
	Reserving []Reserving `xml:"Reserving,omitempty" json:"Reserving,omitempty"`
	PurchaseWindow []PurchaseWindow `xml:"PurchaseWindow,omitempty" json:"PurchaseWindow,omitempty"`
	Transferability []Transferability `xml:"Transferability,omitempty" json:"Transferability,omitempty"`
	Replacing []Replacing `xml:"Replacing,omitempty" json:"Replacing,omitempty"`
	Refunding []Refunding `xml:"Refunding,omitempty" json:"Refunding,omitempty"`
	Exchanging []Exchanging `xml:"Exchanging,omitempty" json:"Exchanging,omitempty"`
	Reselling []Reselling `xml:"Reselling,omitempty" json:"Reselling,omitempty"`
	GeographicalInterval []GeographicalInterval `xml:"GeographicalInterval,omitempty" json:"GeographicalInterval,omitempty"`
	SeriesConstraint []SeriesConstraint `xml:"SeriesConstraint,omitempty" json:"SeriesConstraint,omitempty"`
	CustomerPurchasePackageElement []CustomerPurchasePackageElement `xml:"CustomerPurchasePackageElement,omitempty" json:"CustomerPurchasePackageElement,omitempty"`
	ParkingChargeBand []ParkingChargeBand `xml:"ParkingChargeBand,omitempty" json:"ParkingChargeBand,omitempty"`
	SalesOfferPackageElement []SalesOfferPackageElement `xml:"SalesOfferPackageElement,omitempty" json:"SalesOfferPackageElement,omitempty"`
	FareStructureElement []FareStructureElement `xml:"FareStructureElement,omitempty" json:"FareStructureElement,omitempty"`
	TimeStructureFactor []TimeStructureFactor `xml:"TimeStructureFactor,omitempty" json:"TimeStructureFactor,omitempty"`
	TimeUnit []TimeUnit `xml:"TimeUnit,omitempty" json:"TimeUnit,omitempty"`
	DistanceMatrixElement []DistanceMatrixElement `xml:"DistanceMatrixElement,omitempty" json:"DistanceMatrixElement,omitempty"`
	GeographicalStructureFactor []GeographicalStructureFactor `xml:"GeographicalStructureFactor,omitempty" json:"GeographicalStructureFactor,omitempty"`
	GeographicalUnit []GeographicalUnit `xml:"GeographicalUnit,omitempty" json:"GeographicalUnit,omitempty"`
	FareUnit []FareUnit `xml:"FareUnit,omitempty" json:"FareUnit,omitempty"`
	FareInterval []FareInterval `xml:"FareInterval,omitempty" json:"FareInterval,omitempty"`
	FareStructureFactor []FareStructureFactor `xml:"FareStructureFactor,omitempty" json:"FareStructureFactor,omitempty"`
	PricingService []PricingService `xml:"PricingService,omitempty" json:"PricingService,omitempty"`
	LimitingRuleInContext []LimitingRuleInContext `xml:"LimitingRuleInContext,omitempty" json:"LimitingRuleInContext,omitempty"`
	LimitingRule []LimitingRule `xml:"LimitingRule,omitempty" json:"LimitingRule,omitempty"`
	DiscountingRule []DiscountingRule `xml:"DiscountingRule,omitempty" json:"DiscountingRule,omitempty"`
	PricingRule []PricingRule `xml:"PricingRule,omitempty" json:"PricingRule,omitempty"`
	MonthValidityOffset []MonthValidityOffset `xml:"MonthValidityOffset,omitempty" json:"MonthValidityOffset,omitempty"`
	Rounding []Rounding `xml:"Rounding,omitempty" json:"Rounding,omitempty"`
	PricingParameterSet []PricingParameterSet `xml:"PricingParameterSet,omitempty" json:"PricingParameterSet,omitempty"`
	ReliefOpportunity []ReliefOpportunity `xml:"ReliefOpportunity,omitempty" json:"ReliefOpportunity,omitempty"`
	CourseOfJourneys []CourseOfJourneys `xml:"CourseOfJourneys,omitempty" json:"CourseOfJourneys,omitempty"`
	VehicleServicePart []VehicleServicePart `xml:"VehicleServicePart,omitempty" json:"VehicleServicePart,omitempty"`
	VehicleService []VehicleService `xml:"VehicleService,omitempty" json:"VehicleService,omitempty"`
	TrainBlockPart []TrainBlockPart `xml:"TrainBlockPart,omitempty" json:"TrainBlockPart,omitempty"`
	CompoundBlock []CompoundBlock `xml:"CompoundBlock,omitempty" json:"CompoundBlock,omitempty"`
	BlockPart []BlockPart `xml:"BlockPart,omitempty" json:"BlockPart,omitempty"`
	TrainBlock []TrainBlock `xml:"TrainBlock,omitempty" json:"TrainBlock,omitempty"`
	Block []Block `xml:"Block,omitempty" json:"Block,omitempty"`
	DriverTripTime []DriverTripTime `xml:"DriverTripTime,omitempty" json:"DriverTripTime,omitempty"`
	DriverTrip []DriverTrip `xml:"DriverTrip,omitempty" json:"DriverTrip,omitempty"`
	DutyPart []DutyPart `xml:"DutyPart,omitempty" json:"DutyPart,omitempty"`
	AccountableElement []AccountableElement `xml:"AccountableElement,omitempty" json:"AccountableElement,omitempty"`
	Duty []Duty `xml:"Duty,omitempty" json:"Duty,omitempty"`
	TimeDemandProfile []TimeDemandProfile `xml:"TimeDemandProfile,omitempty" json:"TimeDemandProfile,omitempty"`
	VehicleTypeStopAssignment []VehicleTypeStopAssignment `xml:"VehicleTypeStopAssignment,omitempty" json:"VehicleTypeStopAssignment,omitempty"`
	TrainComponentLabelAssignment []TrainComponentLabelAssignment `xml:"TrainComponentLabelAssignment,omitempty" json:"TrainComponentLabelAssignment,omitempty"`
	TrainNumber []TrainNumber `xml:"TrainNumber,omitempty" json:"TrainNumber,omitempty"`
	FlexibleServiceProperties []FlexibleServiceProperties `xml:"FlexibleServiceProperties,omitempty" json:"FlexibleServiceProperties,omitempty"`
	JourneyPartCouple []JourneyPartCouple `xml:"JourneyPartCouple,omitempty" json:"JourneyPartCouple,omitempty"`
	CoupledJourney []CoupledJourney `xml:"CoupledJourney,omitempty" json:"CoupledJourney,omitempty"`
	JourneyPart []JourneyPart `xml:"JourneyPart,omitempty" json:"JourneyPart,omitempty"`
	InterchangeRule []InterchangeRule `xml:"InterchangeRule,omitempty" json:"InterchangeRule,omitempty"`
	ServiceJourneyPatternInterchange []ServiceJourneyPatternInterchange `xml:"ServiceJourneyPatternInterchange,omitempty" json:"ServiceJourneyPatternInterchange,omitempty"`
	ServiceJourneyInterchange []ServiceJourneyInterchange `xml:"ServiceJourneyInterchange,omitempty" json:"ServiceJourneyInterchange,omitempty"`
	DefaultInterchange []DefaultInterchange `xml:"DefaultInterchange,omitempty" json:"DefaultInterchange,omitempty"`
	JourneyMeeting []JourneyMeeting `xml:"JourneyMeeting,omitempty" json:"JourneyMeeting,omitempty"`
	SingleJourney []SingleJourney `xml:"SingleJourney,omitempty" json:"SingleJourney,omitempty"`
	DatedSpecialService []DatedSpecialService `xml:"DatedSpecialService,omitempty" json:"DatedSpecialService,omitempty"`
	NormalDatedVehicleJourney []NormalDatedVehicleJourney `xml:"NormalDatedVehicleJourney,omitempty" json:"NormalDatedVehicleJourney,omitempty"`
	DatedVehicleJourney []DatedVehicleJourney `xml:"DatedVehicleJourney,omitempty" json:"DatedVehicleJourney,omitempty"`
	SpecialService []SpecialService `xml:"SpecialService,omitempty" json:"SpecialService,omitempty"`
	DeadRun []DeadRun `xml:"DeadRun,omitempty" json:"DeadRun,omitempty"`
	ServiceJourney []ServiceJourney `xml:"ServiceJourney,omitempty" json:"ServiceJourney,omitempty"`
	DatedServiceJourney []DatedServiceJourney `xml:"DatedServiceJourney,omitempty" json:"DatedServiceJourney,omitempty"`
	TemplateServiceJourney []TemplateServiceJourney `xml:"TemplateServiceJourney,omitempty" json:"TemplateServiceJourney,omitempty"`
	TemplateVehicleJourney []TemplateVehicleJourney `xml:"TemplateVehicleJourney,omitempty" json:"TemplateVehicleJourney,omitempty"`
	VehicleJourney []VehicleJourney `xml:"VehicleJourney,omitempty" json:"VehicleJourney,omitempty"`
	PointOfInterestClassificationHierarchy []PointOfInterestClassificationHierarchy `xml:"PointOfInterestClassificationHierarchy,omitempty" json:"PointOfInterestClassificationHierarchy,omitempty"`
	TimeDemandType []TimeDemandType `xml:"TimeDemandType,omitempty" json:"TimeDemandType,omitempty"`
	VehicleJourneyStopAssignment []VehicleJourneyStopAssignment `xml:"VehicleJourneyStopAssignment,omitempty" json:"VehicleJourneyStopAssignment,omitempty"`
	FlexibleStopAssignment []FlexibleStopAssignment `xml:"FlexibleStopAssignment,omitempty" json:"FlexibleStopAssignment,omitempty"`
	NavigationPathAssignment []NavigationPathAssignment `xml:"NavigationPathAssignment,omitempty" json:"NavigationPathAssignment,omitempty"`
	TrainStopAssignment []TrainStopAssignment `xml:"TrainStopAssignment,omitempty" json:"TrainStopAssignment,omitempty"`
	DynamicStopAssignment []DynamicStopAssignment `xml:"DynamicStopAssignment,omitempty" json:"DynamicStopAssignment,omitempty"`
	PassengerStopAssignment []PassengerStopAssignment `xml:"PassengerStopAssignment,omitempty" json:"PassengerStopAssignment,omitempty"`
	LogicalDisplay []LogicalDisplay `xml:"LogicalDisplay,omitempty" json:"LogicalDisplay,omitempty"`
	LineNetwork []LineNetwork `xml:"LineNetwork,omitempty" json:"LineNetwork,omitempty"`
	ModeRestrictionAssessment []ModeRestrictionAssessment `xml:"ModeRestrictionAssessment,omitempty" json:"ModeRestrictionAssessment,omitempty"`
	RouteInstruction []RouteInstruction `xml:"RouteInstruction,omitempty" json:"RouteInstruction,omitempty"`
	TrainComponent []TrainComponent `xml:"TrainComponent,omitempty" json:"TrainComponent,omitempty"`
	TrainElement []TrainElement `xml:"TrainElement,omitempty" json:"TrainElement,omitempty"`
	CompoundTrain []CompoundTrain `xml:"CompoundTrain,omitempty" json:"CompoundTrain,omitempty"`
	Train []Train `xml:"Train,omitempty" json:"Train,omitempty"`
	CycleModelProfile []CycleModelProfile `xml:"CycleModelProfile,omitempty" json:"CycleModelProfile,omitempty"`
	CarModelProfile []CarModelProfile `xml:"CarModelProfile,omitempty" json:"CarModelProfile,omitempty"`
	Whitelist []Whitelist `xml:"Whitelist,omitempty" json:"Whitelist,omitempty"`
	Blacklist []Blacklist `xml:"Blacklist,omitempty" json:"Blacklist,omitempty"`
	SchematicMap []SchematicMap `xml:"SchematicMap,omitempty" json:"SchematicMap,omitempty"`
	PersonalModeOfOperation []PersonalModeOfOperation `xml:"PersonalModeOfOperation,omitempty" json:"PersonalModeOfOperation,omitempty"`
	AlternativeModeOfOperation []AlternativeModeOfOperation `xml:"AlternativeModeOfOperation,omitempty" json:"AlternativeModeOfOperation,omitempty"`
	VehiclePooling []VehiclePooling `xml:"VehiclePooling,omitempty" json:"VehiclePooling,omitempty"`
	VehicleSharing []VehicleSharing `xml:"VehicleSharing,omitempty" json:"VehicleSharing,omitempty"`
	VehicleRental []VehicleRental `xml:"VehicleRental,omitempty" json:"VehicleRental,omitempty"`
	FlexibleOperation []FlexibleOperation `xml:"FlexibleOperation,omitempty" json:"FlexibleOperation,omitempty"`
	ScheduledOperation []ScheduledOperation `xml:"ScheduledOperation,omitempty" json:"ScheduledOperation,omitempty"`
	ChargingEquipmentProfile []ChargingEquipmentProfile `xml:"ChargingEquipmentProfile,omitempty" json:"ChargingEquipmentProfile,omitempty"`
	VehicleEquipmentProfile []VehicleEquipmentProfile `xml:"VehicleEquipmentProfile,omitempty" json:"VehicleEquipmentProfile,omitempty"`
	VehicleModel []VehicleModel `xml:"VehicleModel,omitempty" json:"VehicleModel,omitempty"`
	Vehicle []Vehicle `xml:"Vehicle,omitempty" json:"Vehicle,omitempty"`
	PassengerCarryingRequirementsView []PassengerCarryingRequirementsView `xml:"PassengerCarryingRequirementsView,omitempty" json:"PassengerCarryingRequirementsView,omitempty"`
	FacilityRequirement []FacilityRequirement `xml:"FacilityRequirement,omitempty" json:"FacilityRequirement,omitempty"`
	VehicleManoeuvringRequirement []VehicleManoeuvringRequirement `xml:"VehicleManoeuvringRequirement,omitempty" json:"VehicleManoeuvringRequirement,omitempty"`
	PassengerCarryingRequirement []PassengerCarryingRequirement `xml:"PassengerCarryingRequirement,omitempty" json:"PassengerCarryingRequirement,omitempty"`
	AcceptedDriverPermit []AcceptedDriverPermit `xml:"AcceptedDriverPermit,omitempty" json:"AcceptedDriverPermit,omitempty"`
	SimpleVehicleType []SimpleVehicleType `xml:"SimpleVehicleType,omitempty" json:"SimpleVehicleType,omitempty"`
	VehicleType []VehicleType `xml:"VehicleType,omitempty" json:"VehicleType,omitempty"`
	TransportType []TransportType `xml:"TransportType,omitempty" json:"TransportType,omitempty"`
	EquipmentPosition []EquipmentPosition `xml:"EquipmentPosition,omitempty" json:"EquipmentPosition,omitempty"`
	Level []Level `xml:"Level,omitempty" json:"Level,omitempty"`
	AllowedLineDirection []AllowedLineDirection `xml:"AllowedLineDirection,omitempty" json:"AllowedLineDirection,omitempty"`
	DestinationDisplayVariant []DestinationDisplayVariant `xml:"DestinationDisplayVariant,omitempty" json:"DestinationDisplayVariant,omitempty"`
	DestinationDisplay []DestinationDisplay `xml:"DestinationDisplay,omitempty" json:"DestinationDisplay,omitempty"`
	FlexibleLine []FlexibleLine `xml:"FlexibleLine,omitempty" json:"FlexibleLine,omitempty"`
	Line []Line `xml:"Line,omitempty" json:"Line,omitempty"`
	DeliveryVariant []DeliveryVariant `xml:"DeliveryVariant,omitempty" json:"DeliveryVariant,omitempty"`
	Notice []Notice `xml:"Notice,omitempty" json:"Notice,omitempty"`
	OperationalContext []OperationalContext `xml:"OperationalContext,omitempty" json:"OperationalContext,omitempty"`
	OnlineService []OnlineService `xml:"OnlineService,omitempty" json:"OnlineService,omitempty"`
	VehicleRentalService []VehicleRentalService `xml:"VehicleRentalService,omitempty" json:"VehicleRentalService,omitempty"`
	VehicleSharingService []VehicleSharingService `xml:"VehicleSharingService,omitempty" json:"VehicleSharingService,omitempty"`
	ChauffeuredVehicleService []ChauffeuredVehicleService `xml:"ChauffeuredVehicleService,omitempty" json:"ChauffeuredVehicleService,omitempty"`
	CarPoolingService []CarPoolingService `xml:"CarPoolingService,omitempty" json:"CarPoolingService,omitempty"`
	TaxiService []TaxiService `xml:"TaxiService,omitempty" json:"TaxiService,omitempty"`
	AssistanceBookingService []AssistanceBookingService `xml:"AssistanceBookingService,omitempty" json:"AssistanceBookingService,omitempty"`
	CateringService []CateringService `xml:"CateringService,omitempty" json:"CateringService,omitempty"`
	RetailService []RetailService `xml:"RetailService,omitempty" json:"RetailService,omitempty"`
	MoneyService []MoneyService `xml:"MoneyService,omitempty" json:"MoneyService,omitempty"`
	HireService []HireService `xml:"HireService,omitempty" json:"HireService,omitempty"`
	CommunicationService []CommunicationService `xml:"CommunicationService,omitempty" json:"CommunicationService,omitempty"`
	MeetingPointService []MeetingPointService `xml:"MeetingPointService,omitempty" json:"MeetingPointService,omitempty"`
	LostPropertyService []LostPropertyService `xml:"LostPropertyService,omitempty" json:"LostPropertyService,omitempty"`
	LeftLuggageService []LeftLuggageService `xml:"LeftLuggageService,omitempty" json:"LeftLuggageService,omitempty"`
	ComplaintsService []ComplaintsService `xml:"ComplaintsService,omitempty" json:"ComplaintsService,omitempty"`
	CustomerService []CustomerService `xml:"CustomerService,omitempty" json:"CustomerService,omitempty"`
	LuggageService []LuggageService `xml:"LuggageService,omitempty" json:"LuggageService,omitempty"`
	AssistanceService []AssistanceService `xml:"AssistanceService,omitempty" json:"AssistanceService,omitempty"`
	TicketingService []TicketingService `xml:"TicketingService,omitempty" json:"TicketingService,omitempty"`
	RetailDevice []RetailDevice `xml:"RetailDevice,omitempty" json:"RetailDevice,omitempty"`
	BatteryEquipment []BatteryEquipment `xml:"BatteryEquipment,omitempty" json:"BatteryEquipment,omitempty"`
	VehicleReleaseEquipment []VehicleReleaseEquipment `xml:"VehicleReleaseEquipment,omitempty" json:"VehicleReleaseEquipment,omitempty"`
	RefuellingEquipment []RefuellingEquipment `xml:"RefuellingEquipment,omitempty" json:"RefuellingEquipment,omitempty"`
	VehicleChargingEquipment []VehicleChargingEquipment `xml:"VehicleChargingEquipment,omitempty" json:"VehicleChargingEquipment,omitempty"`
	CycleStorageEquipment []CycleStorageEquipment `xml:"CycleStorageEquipment,omitempty" json:"CycleStorageEquipment,omitempty"`
	SeatingEquipment []SeatingEquipment `xml:"SeatingEquipment,omitempty" json:"SeatingEquipment,omitempty"`
	ShelterEquipment []ShelterEquipment `xml:"ShelterEquipment,omitempty" json:"ShelterEquipment,omitempty"`
	TrolleyStandEquipment []TrolleyStandEquipment `xml:"TrolleyStandEquipment,omitempty" json:"TrolleyStandEquipment,omitempty"`
	WaitingRoomEquipment []WaitingRoomEquipment `xml:"WaitingRoomEquipment,omitempty" json:"WaitingRoomEquipment,omitempty"`
	CrossingEquipment []CrossingEquipment `xml:"CrossingEquipment,omitempty" json:"CrossingEquipment,omitempty"`
	QueueingEquipment []QueueingEquipment `xml:"QueueingEquipment,omitempty" json:"QueueingEquipment,omitempty"`
	EntranceEquipment []EntranceEquipment `xml:"EntranceEquipment,omitempty" json:"EntranceEquipment,omitempty"`
	RampEquipment []RampEquipment `xml:"RampEquipment,omitempty" json:"RampEquipment,omitempty"`
	LiftCallEquipment []LiftCallEquipment `xml:"LiftCallEquipment,omitempty" json:"LiftCallEquipment,omitempty"`
	LiftEquipment []LiftEquipment `xml:"LiftEquipment,omitempty" json:"LiftEquipment,omitempty"`
	TravelatorEquipment []TravelatorEquipment `xml:"TravelatorEquipment,omitempty" json:"TravelatorEquipment,omitempty"`
	StaircaseEquipment []StaircaseEquipment `xml:"StaircaseEquipment,omitempty" json:"StaircaseEquipment,omitempty"`
	EscalatorEquipment []EscalatorEquipment `xml:"EscalatorEquipment,omitempty" json:"EscalatorEquipment,omitempty"`
	PlaceLighting []PlaceLighting `xml:"PlaceLighting,omitempty" json:"PlaceLighting,omitempty"`
	RoughSurface []RoughSurface `xml:"RoughSurface,omitempty" json:"RoughSurface,omitempty"`
	GeneralSign []GeneralSign `xml:"GeneralSign,omitempty" json:"GeneralSign,omitempty"`
	HeadingSign []HeadingSign `xml:"HeadingSign,omitempty" json:"HeadingSign,omitempty"`
	PlaceSign []PlaceSign `xml:"PlaceSign,omitempty" json:"PlaceSign,omitempty"`
	SignEquipment []SignEquipment `xml:"SignEquipment,omitempty" json:"SignEquipment,omitempty"`
	PassengerInformationEquipment []PassengerInformationEquipment `xml:"PassengerInformationEquipment,omitempty" json:"PassengerInformationEquipment,omitempty"`
	RubbishDisposalEquipment []RubbishDisposalEquipment `xml:"RubbishDisposalEquipment,omitempty" json:"RubbishDisposalEquipment,omitempty"`
	PassengerBeaconEquipment []PassengerBeaconEquipment `xml:"PassengerBeaconEquipment,omitempty" json:"PassengerBeaconEquipment,omitempty"`
	HelpPointEquipment []HelpPointEquipment `xml:"HelpPointEquipment,omitempty" json:"HelpPointEquipment,omitempty"`
	PassengerSafetyEquipment []PassengerSafetyEquipment `xml:"PassengerSafetyEquipment,omitempty" json:"PassengerSafetyEquipment,omitempty"`
	SanitaryEquipment []SanitaryEquipment `xml:"SanitaryEquipment,omitempty" json:"SanitaryEquipment,omitempty"`
	TicketValidatorEquipment []TicketValidatorEquipment `xml:"TicketValidatorEquipment,omitempty" json:"TicketValidatorEquipment,omitempty"`
	TicketingEquipment []TicketingEquipment `xml:"TicketingEquipment,omitempty" json:"TicketingEquipment,omitempty"`
	WheelchairVehicleEquipment []WheelchairVehicleEquipment `xml:"WheelchairVehicleEquipment,omitempty" json:"WheelchairVehicleEquipment,omitempty"`
	AccessVehicleEquipment []AccessVehicleEquipment `xml:"AccessVehicleEquipment,omitempty" json:"AccessVehicleEquipment,omitempty"`
	ComplexFeature []ComplexFeature `xml:"ComplexFeature,omitempty" json:"ComplexFeature,omitempty"`
	SimpleFeature []SimpleFeature `xml:"SimpleFeature,omitempty" json:"SimpleFeature,omitempty"`
	SpatialFeature []SpatialFeature `xml:"SpatialFeature,omitempty" json:"SpatialFeature,omitempty"`
	SingleJourneyPath []SingleJourneyPath `xml:"SingleJourneyPath,omitempty" json:"SingleJourneyPath,omitempty"`
	ServicePattern []ServicePattern `xml:"ServicePattern,omitempty" json:"ServicePattern,omitempty"`
	NavigationPath []NavigationPath `xml:"NavigationPath,omitempty" json:"NavigationPath,omitempty"`
	ServiceJourneyPattern []ServiceJourneyPattern `xml:"ServiceJourneyPattern,omitempty" json:"ServiceJourneyPattern,omitempty"`
	DeadRunJourneyPattern []DeadRunJourneyPattern `xml:"DeadRunJourneyPattern,omitempty" json:"DeadRunJourneyPattern,omitempty"`
	JourneyPattern []JourneyPattern `xml:"JourneyPattern,omitempty" json:"JourneyPattern,omitempty"`
	FlexibleRoute []FlexibleRoute `xml:"FlexibleRoute,omitempty" json:"FlexibleRoute,omitempty"`
	Route []Route `xml:"Route,omitempty" json:"Route,omitempty"`
	TimingPattern []TimingPattern `xml:"TimingPattern,omitempty" json:"TimingPattern,omitempty"`
	Connection []Connection `xml:"Connection,omitempty" json:"Connection,omitempty"`
	DefaultConnection []DefaultConnection `xml:"DefaultConnection,omitempty" json:"DefaultConnection,omitempty"`
	SiteConnection []SiteConnection `xml:"SiteConnection,omitempty" json:"SiteConnection,omitempty"`
	Access []Access `xml:"Access,omitempty" json:"Access,omitempty"`
	Contact []Contact `xml:"Contact,omitempty" json:"Contact,omitempty"`
	ControlCentre []ControlCentre `xml:"ControlCentre,omitempty" json:"ControlCentre,omitempty"`
	OperatingDepartment []OperatingDepartment `xml:"OperatingDepartment,omitempty" json:"OperatingDepartment,omitempty"`
	OrganisationalUnit []OrganisationalUnit `xml:"OrganisationalUnit,omitempty" json:"OrganisationalUnit,omitempty"`
	Department []Department `xml:"Department,omitempty" json:"Department,omitempty"`
	OrganisationPart []OrganisationPart `xml:"OrganisationPart,omitempty" json:"OrganisationPart,omitempty"`
	RetailConsortium []RetailConsortium `xml:"RetailConsortium,omitempty" json:"RetailConsortium,omitempty"`
	ServicedOrganisation []ServicedOrganisation `xml:"ServicedOrganisation,omitempty" json:"ServicedOrganisation,omitempty"`
	GeneralOrganisation []GeneralOrganisation `xml:"GeneralOrganisation,omitempty" json:"GeneralOrganisation,omitempty"`
	ManagementAgent []ManagementAgent `xml:"ManagementAgent,omitempty" json:"ManagementAgent,omitempty"`
	TravelAgent []TravelAgent `xml:"TravelAgent,omitempty" json:"TravelAgent,omitempty"`
	OtherOrganisation []OtherOrganisation `xml:"OtherOrganisation,omitempty" json:"OtherOrganisation,omitempty"`
	OnlineServiceOperator []OnlineServiceOperator `xml:"OnlineServiceOperator,omitempty" json:"OnlineServiceOperator,omitempty"`
	Authority []Authority `xml:"Authority,omitempty" json:"Authority,omitempty"`
	Operator []Operator `xml:"Operator,omitempty" json:"Operator,omitempty"`
	VehicleMeetingLink []VehicleMeetingLink `xml:"VehicleMeetingLink,omitempty" json:"VehicleMeetingLink,omitempty"`
	ServiceLink []ServiceLink `xml:"ServiceLink,omitempty" json:"ServiceLink,omitempty"`
	SitePathLink []SitePathLink `xml:"SitePathLink,omitempty" json:"SitePathLink,omitempty"`
	PathLink []PathLink `xml:"PathLink,omitempty" json:"PathLink,omitempty"`
	RouteLink []RouteLink `xml:"RouteLink,omitempty" json:"RouteLink,omitempty"`
	TimingLink []TimingLink `xml:"TimingLink,omitempty" json:"TimingLink,omitempty"`
	WireElement []WireElement `xml:"WireElement,omitempty" json:"WireElement,omitempty"`
	RoadElement []RoadElement `xml:"RoadElement,omitempty" json:"RoadElement,omitempty"`
	RailwayElement []RailwayElement `xml:"RailwayElement,omitempty" json:"RailwayElement,omitempty"`
	ActivationLink []ActivationLink `xml:"ActivationLink,omitempty" json:"ActivationLink,omitempty"`
	VehicleMeetingPoint []VehicleMeetingPoint `xml:"VehicleMeetingPoint,omitempty" json:"VehicleMeetingPoint,omitempty"`
	BorderPoint []BorderPoint `xml:"BorderPoint,omitempty" json:"BorderPoint,omitempty"`
	FareScheduledStopPoint []FareScheduledStopPoint `xml:"FareScheduledStopPoint,omitempty" json:"FareScheduledStopPoint,omitempty"`
	ScheduledStopPoint []ScheduledStopPoint `xml:"ScheduledStopPoint,omitempty" json:"ScheduledStopPoint,omitempty"`
	PathJunction []PathJunction `xml:"PathJunction,omitempty" json:"PathJunction,omitempty"`
	RoutePoint []RoutePoint `xml:"RoutePoint,omitempty" json:"RoutePoint,omitempty"`
	ParkingPoint []ParkingPoint `xml:"ParkingPoint,omitempty" json:"ParkingPoint,omitempty"`
	GaragePoint []GaragePoint `xml:"GaragePoint,omitempty" json:"GaragePoint,omitempty"`
	ReliefPoint []ReliefPoint `xml:"ReliefPoint,omitempty" json:"ReliefPoint,omitempty"`
	TimingPoint []TimingPoint `xml:"TimingPoint,omitempty" json:"TimingPoint,omitempty"`
	WireJunction []WireJunction `xml:"WireJunction,omitempty" json:"WireJunction,omitempty"`
	RoadJunction []RoadJunction `xml:"RoadJunction,omitempty" json:"RoadJunction,omitempty"`
	RailwayJunction []RailwayJunction `xml:"RailwayJunction,omitempty" json:"RailwayJunction,omitempty"`
	TrafficControlPoint []TrafficControlPoint `xml:"TrafficControlPoint,omitempty" json:"TrafficControlPoint,omitempty"`
	BeaconPoint []BeaconPoint `xml:"BeaconPoint,omitempty" json:"BeaconPoint,omitempty"`
	ActivationPoint []ActivationPoint `xml:"ActivationPoint,omitempty" json:"ActivationPoint,omitempty"`
	Point []Point `xml:"Point,omitempty" json:"Point,omitempty"`
	LineShape []LineShape `xml:"LineShape,omitempty" json:"LineShape,omitempty"`
	TopographicProjection []TopographicProjection `xml:"TopographicProjection,omitempty" json:"TopographicProjection,omitempty"`
	ZoneProjection []ZoneProjection `xml:"ZoneProjection,omitempty" json:"ZoneProjection,omitempty"`
	ComplexFeatureProjection []ComplexFeatureProjection `xml:"ComplexFeatureProjection,omitempty" json:"ComplexFeatureProjection,omitempty"`
	LinkSequenceProjection []LinkSequenceProjection `xml:"LinkSequenceProjection,omitempty" json:"LinkSequenceProjection,omitempty"`
	LinkProjection []LinkProjection `xml:"LinkProjection,omitempty" json:"LinkProjection,omitempty"`
	PointProjection []PointProjection `xml:"PointProjection,omitempty" json:"PointProjection,omitempty"`
	CompositeFrame []CompositeFrame `xml:"CompositeFrame,omitempty" json:"CompositeFrame,omitempty"`
	MobilityJourneyFrame []MobilityJourneyFrame `xml:"MobilityJourneyFrame,omitempty" json:"MobilityJourneyFrame,omitempty"`
	MobilityServiceFrame []MobilityServiceFrame `xml:"MobilityServiceFrame,omitempty" json:"MobilityServiceFrame,omitempty"`
	SalesTransactionFrame []SalesTransactionFrame `xml:"SalesTransactionFrame,omitempty" json:"SalesTransactionFrame,omitempty"`
	FareFrame []FareFrame `xml:"FareFrame,omitempty" json:"FareFrame,omitempty"`
	DriverScheduleFrame []DriverScheduleFrame `xml:"DriverScheduleFrame,omitempty" json:"DriverScheduleFrame,omitempty"`
	VehicleScheduleFrame []VehicleScheduleFrame `xml:"VehicleScheduleFrame,omitempty" json:"VehicleScheduleFrame,omitempty"`
	ServiceFrame []ServiceFrame `xml:"ServiceFrame,omitempty" json:"ServiceFrame,omitempty"`
	TimetableFrame []TimetableFrame `xml:"TimetableFrame,omitempty" json:"TimetableFrame,omitempty"`
	SiteFrame []SiteFrame `xml:"SiteFrame,omitempty" json:"SiteFrame,omitempty"`
	InfrastructureFrame []InfrastructureFrame `xml:"InfrastructureFrame,omitempty" json:"InfrastructureFrame,omitempty"`
	GeneralFrame []GeneralFrame `xml:"GeneralFrame,omitempty" json:"GeneralFrame,omitempty"`
	ResourceFrame []ResourceFrame `xml:"ResourceFrame,omitempty" json:"ResourceFrame,omitempty"`
	ServiceCalendarFrame []ServiceCalendarFrame `xml:"ServiceCalendarFrame,omitempty" json:"ServiceCalendarFrame,omitempty"`
	UicOperatingPeriod []UicOperatingPeriod `xml:"UicOperatingPeriod,omitempty" json:"UicOperatingPeriod,omitempty"`
	OperatingPeriod []OperatingPeriod `xml:"OperatingPeriod,omitempty" json:"OperatingPeriod,omitempty"`
	OperatingDay []OperatingDay `xml:"OperatingDay,omitempty" json:"OperatingDay,omitempty"`
	ServiceCalendar []ServiceCalendar `xml:"ServiceCalendar,omitempty" json:"ServiceCalendar,omitempty"`
	VehicleSharingPlaceAssignment []VehicleSharingPlaceAssignment `xml:"VehicleSharingPlaceAssignment,omitempty" json:"VehicleSharingPlaceAssignment,omitempty"`
	VehiclePoolingPlaceAssignment []VehiclePoolingPlaceAssignment `xml:"VehiclePoolingPlaceAssignment,omitempty" json:"VehiclePoolingPlaceAssignment,omitempty"`
	TaxiServicePlaceAssignment []TaxiServicePlaceAssignment `xml:"TaxiServicePlaceAssignment,omitempty" json:"TaxiServicePlaceAssignment,omitempty"`
	VehicleServicePlaceAssignment []VehicleServicePlaceAssignment1 `xml:"VehicleServicePlaceAssignment,omitempty" json:"VehicleServicePlaceAssignment,omitempty"`
	NetexOrgUkNetexVehicleServicePlaceAssignment []VehicleServicePlaceAssignment2 `xml:"VehicleServicePlaceAssignment_,omitempty" json:"VehicleServicePlaceAssignment_,omitempty"`
	DynamicVehicleMeetingPointAssignment []DynamicVehicleMeetingPointAssignment `xml:"DynamicVehicleMeetingPointAssignment,omitempty" json:"DynamicVehicleMeetingPointAssignment,omitempty"`
	VehicleMeetingPointAssignment []VehicleMeetingPointAssignment1 `xml:"VehicleMeetingPointAssignment,omitempty" json:"VehicleMeetingPointAssignment,omitempty"`
	NetexOrgUkNetexVehicleMeetingPointAssignment []VehicleMeetingPointAssignment2 `xml:"VehicleMeetingPointAssignment_,omitempty" json:"VehicleMeetingPointAssignment_,omitempty"`
	VehicleAccessCredentialsAssignment []VehicleAccessCredentialsAssignment `xml:"VehicleAccessCredentialsAssignment,omitempty" json:"VehicleAccessCredentialsAssignment,omitempty"`
	DistributionAssignment []DistributionAssignment `xml:"DistributionAssignment,omitempty" json:"DistributionAssignment,omitempty"`
	SalesOfferPackageSubstitution []SalesOfferPackageSubstitution `xml:"SalesOfferPackageSubstitution,omitempty" json:"SalesOfferPackageSubstitution,omitempty"`
	CustomerPurchaseParameterAssignment []CustomerPurchaseParameterAssignment `xml:"CustomerPurchaseParameterAssignment,omitempty" json:"CustomerPurchaseParameterAssignment,omitempty"`
	SpecificParameterAssignment []SpecificParameterAssignment `xml:"SpecificParameterAssignment,omitempty" json:"SpecificParameterAssignment,omitempty"`
	GenericParameterAssignmentInContext []GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
	GenericParameterAssignment []GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	ValidityParameterAssignment []ValidityParameterAssignment `xml:"ValidityParameterAssignment,omitempty" json:"ValidityParameterAssignment,omitempty"`
	AccessRightParameterAssignment []AccessRightParameterAssignment `xml:"AccessRightParameterAssignment,omitempty" json:"AccessRightParameterAssignment,omitempty"`
	JourneyAccounting []JourneyAccounting `xml:"JourneyAccounting,omitempty" json:"JourneyAccounting,omitempty"`
	TimeDemandTypeAssignment []TimeDemandTypeAssignment `xml:"TimeDemandTypeAssignment,omitempty" json:"TimeDemandTypeAssignment,omitempty"`
	TransferRestriction []TransferRestriction `xml:"TransferRestriction,omitempty" json:"TransferRestriction,omitempty"`
	ServiceExclusion []ServiceExclusion `xml:"ServiceExclusion,omitempty" json:"ServiceExclusion,omitempty"`
	DisplayAssignment []DisplayAssignment `xml:"DisplayAssignment,omitempty" json:"DisplayAssignment,omitempty"`
	OvertakingPossibility []OvertakingPossibility `xml:"OvertakingPossibility,omitempty" json:"OvertakingPossibility,omitempty"`
	MeetingRestriction []MeetingRestriction `xml:"MeetingRestriction,omitempty" json:"MeetingRestriction,omitempty"`
	RestrictedManoeuvre []RestrictedManoeuvre `xml:"RestrictedManoeuvre,omitempty" json:"RestrictedManoeuvre,omitempty"`
	VehicleTypeAtPoint []VehicleTypeAtPoint `xml:"VehicleTypeAtPoint,omitempty" json:"VehicleTypeAtPoint,omitempty"`
	ActivationAssignment []ActivationAssignment `xml:"ActivationAssignment,omitempty" json:"ActivationAssignment,omitempty"`
	SalesNoticeAssignment []SalesNoticeAssignment `xml:"SalesNoticeAssignment,omitempty" json:"SalesNoticeAssignment,omitempty"`
	NoticeAssignment []NoticeAssignment `xml:"NoticeAssignment,omitempty" json:"NoticeAssignment,omitempty"`
	CheckConstraintThroughput []CheckConstraintThroughput `xml:"CheckConstraintThroughput,omitempty" json:"CheckConstraintThroughput,omitempty"`
	CheckConstraintDelay []CheckConstraintDelay `xml:"CheckConstraintDelay,omitempty" json:"CheckConstraintDelay,omitempty"`
	CheckConstraint []CheckConstraint `xml:"CheckConstraint,omitempty" json:"CheckConstraint,omitempty"`
	DayTypeAssignment []DayTypeAssignment `xml:"DayTypeAssignment,omitempty" json:"DayTypeAssignment,omitempty"`
	GroupOfTimebands []GroupOfTimebands `xml:"GroupOfTimebands,omitempty" json:"GroupOfTimebands,omitempty"`
	Timeband []Timeband `xml:"Timeband,omitempty" json:"Timeband,omitempty"`
	FareDayType []FareDayType `xml:"FareDayType,omitempty" json:"FareDayType,omitempty"`
	OrganisationDayType []OrganisationDayType `xml:"OrganisationDayType,omitempty" json:"OrganisationDayType,omitempty"`
	DayType []DayType `xml:"DayType,omitempty" json:"DayType,omitempty"`
	PoolOfVehicles []PoolOfVehicles `xml:"PoolOfVehicles,omitempty" json:"PoolOfVehicles,omitempty"`
	GroupOfSingleJourneys []GroupOfSingleJourneys `xml:"GroupOfSingleJourneys,omitempty" json:"GroupOfSingleJourneys,omitempty"`
	GroupOfDistributionChannels []GroupOfDistributionChannels `xml:"GroupOfDistributionChannels,omitempty" json:"GroupOfDistributionChannels,omitempty"`
	GroupOfDistanceMatrixElements []GroupOfDistanceMatrixElements `xml:"GroupOfDistanceMatrixElements,omitempty" json:"GroupOfDistanceMatrixElements,omitempty"`
	PriceGroup []PriceGroup `xml:"PriceGroup,omitempty" json:"PriceGroup,omitempty"`
	StandardFareTable []StandardFareTable `xml:"StandardFareTable,omitempty" json:"StandardFareTable,omitempty"`
	FareTableInContext []FareTableInContext `xml:"FareTableInContext,omitempty" json:"FareTableInContext,omitempty"`
	FareTable []FareTable `xml:"FareTable,omitempty" json:"FareTable,omitempty"`
	GroupOfServices []GroupOfServices `xml:"GroupOfServices,omitempty" json:"GroupOfServices,omitempty"`
	RhythmicalJourneyGroup []RhythmicalJourneyGroup `xml:"RhythmicalJourneyGroup,omitempty" json:"RhythmicalJourneyGroup,omitempty"`
	HeadwayJourneyGroup []HeadwayJourneyGroup `xml:"HeadwayJourneyGroup,omitempty" json:"HeadwayJourneyGroup,omitempty"`
	CrewBase []CrewBase `xml:"CrewBase,omitempty" json:"CrewBase,omitempty"`
	GroupOfTimingLinks []GroupOfTimingLinks `xml:"GroupOfTimingLinks,omitempty" json:"GroupOfTimingLinks,omitempty"`
	Network []Network `xml:"Network,omitempty" json:"Network,omitempty"`
	GroupOfLines []GroupOfLines `xml:"GroupOfLines,omitempty" json:"GroupOfLines,omitempty"`
	GroupOfOperators []GroupOfOperators `xml:"GroupOfOperators,omitempty" json:"GroupOfOperators,omitempty"`
	GroupOfPlaces []GroupOfPlaces `xml:"GroupOfPlaces,omitempty" json:"GroupOfPlaces,omitempty"`
	GroupOfLinkSequences []GroupOfLinkSequences `xml:"GroupOfLinkSequences,omitempty" json:"GroupOfLinkSequences,omitempty"`
	GroupOfTariffZones []GroupOfTariffZones `xml:"GroupOfTariffZones,omitempty" json:"GroupOfTariffZones,omitempty"`
	MobilityServiceConstraintZone []MobilityServiceConstraintZone `xml:"MobilityServiceConstraintZone,omitempty" json:"MobilityServiceConstraintZone,omitempty"`
	RoutingConstraintZone []RoutingConstraintZone `xml:"RoutingConstraintZone,omitempty" json:"RoutingConstraintZone,omitempty"`
	StopArea []StopArea `xml:"StopArea,omitempty" json:"StopArea,omitempty"`
	AccessZone []AccessZone `xml:"AccessZone,omitempty" json:"AccessZone,omitempty"`
	VehicleMeetingPlace []VehicleMeetingPlace1 `xml:"VehicleMeetingPlace,omitempty" json:"VehicleMeetingPlace,omitempty"`
	VehiclePoolingMeetingPlace []VehiclePoolingMeetingPlace `xml:"VehiclePoolingMeetingPlace,omitempty" json:"VehiclePoolingMeetingPlace,omitempty"`
	NetexOrgUkNetexVehicleMeetingPlace []VehicleMeetingPlace2 `xml:"VehicleMeetingPlace_,omitempty" json:"VehicleMeetingPlace_,omitempty"`
	HailAndRideArea []HailAndRideArea `xml:"HailAndRideArea,omitempty" json:"HailAndRideArea,omitempty"`
	FlexibleArea []FlexibleArea `xml:"FlexibleArea,omitempty" json:"FlexibleArea,omitempty"`
	FlexibleQuay []FlexibleQuay `xml:"FlexibleQuay,omitempty" json:"FlexibleQuay,omitempty"`
	FlexibleStopPlace []FlexibleStopPlace `xml:"FlexibleStopPlace,omitempty" json:"FlexibleStopPlace,omitempty"`
	Garage []Garage `xml:"Garage,omitempty" json:"Garage,omitempty"`
	EquipmentPlace []EquipmentPlace `xml:"EquipmentPlace,omitempty" json:"EquipmentPlace,omitempty"`
	TaxiStand []TaxiStand `xml:"TaxiStand,omitempty" json:"TaxiStand,omitempty"`
	VehicleStoppingPlace []VehicleStoppingPlace `xml:"VehicleStoppingPlace,omitempty" json:"VehicleStoppingPlace,omitempty"`
	BoardingPosition []BoardingPosition `xml:"BoardingPosition,omitempty" json:"BoardingPosition,omitempty"`
	AccessSpace []AccessSpace `xml:"AccessSpace,omitempty" json:"AccessSpace,omitempty"`
	Quay []Quay `xml:"Quay,omitempty" json:"Quay,omitempty"`
	PointOfInterestSpace []PointOfInterestSpace `xml:"PointOfInterestSpace,omitempty" json:"PointOfInterestSpace,omitempty"`
	ParkingComponent []ParkingComponent `xml:"ParkingComponent,omitempty" json:"ParkingComponent,omitempty"`
	VehicleStoppingPosition []VehicleStoppingPosition `xml:"VehicleStoppingPosition,omitempty" json:"VehicleStoppingPosition,omitempty"`
	VehiclePoolingParkingArea []VehiclePoolingParkingArea `xml:"VehiclePoolingParkingArea,omitempty" json:"VehiclePoolingParkingArea,omitempty"`
	VehicleSharingParkingArea []VehicleSharingParkingArea `xml:"VehicleSharingParkingArea,omitempty" json:"VehicleSharingParkingArea,omitempty"`
	TaxiParkingArea []TaxiParkingArea `xml:"TaxiParkingArea,omitempty" json:"TaxiParkingArea,omitempty"`
	ParkingArea []ParkingArea `xml:"ParkingArea,omitempty" json:"ParkingArea,omitempty"`
	MonitoredVehicleSharingParkingBay []MonitoredVehicleSharingParkingBay `xml:"MonitoredVehicleSharingParkingBay,omitempty" json:"MonitoredVehicleSharingParkingBay,omitempty"`
	VehiclePoolingParkingBay []VehiclePoolingParkingBay `xml:"VehiclePoolingParkingBay,omitempty" json:"VehiclePoolingParkingBay,omitempty"`
	VehicleSharingParkingBay []VehicleSharingParkingBay `xml:"VehicleSharingParkingBay,omitempty" json:"VehicleSharingParkingBay,omitempty"`
	ParkingBay []ParkingBay `xml:"ParkingBay,omitempty" json:"ParkingBay,omitempty"`
	PointOfInterestVehicleEntrance []PointOfInterestVehicleEntrance `xml:"PointOfInterestVehicleEntrance,omitempty" json:"PointOfInterestVehicleEntrance,omitempty"`
	PointOfInterestEntrance []PointOfInterestEntrance `xml:"PointOfInterestEntrance,omitempty" json:"PointOfInterestEntrance,omitempty"`
	ParkingPassengerEntrance []ParkingPassengerEntrance `xml:"ParkingPassengerEntrance,omitempty" json:"ParkingPassengerEntrance,omitempty"`
	ParkingEntranceForVehicles []ParkingEntranceForVehicles `xml:"ParkingEntranceForVehicles,omitempty" json:"ParkingEntranceForVehicles,omitempty"`
	StopPlaceVehicleEntrance []StopPlaceVehicleEntrance `xml:"StopPlaceVehicleEntrance,omitempty" json:"StopPlaceVehicleEntrance,omitempty"`
	StopPlaceEntrance []StopPlaceEntrance `xml:"StopPlaceEntrance,omitempty" json:"StopPlaceEntrance,omitempty"`
	Entrance []Entrance `xml:"Entrance,omitempty" json:"Entrance,omitempty"`
	PointOfInterest []PointOfInterest `xml:"PointOfInterest,omitempty" json:"PointOfInterest,omitempty"`
	Parking []Parking `xml:"Parking,omitempty" json:"Parking,omitempty"`
	TaxiRank []TaxiRank `xml:"TaxiRank,omitempty" json:"TaxiRank,omitempty"`
	StopPlace []StopPlace `xml:"StopPlace,omitempty" json:"StopPlace,omitempty"`
	ServiceSite []ServiceSite `xml:"ServiceSite,omitempty" json:"ServiceSite,omitempty"`
	TopographicPlace []TopographicPlace `xml:"TopographicPlace,omitempty" json:"TopographicPlace,omitempty"`
	Country []Country `xml:"Country,omitempty" json:"Country,omitempty"`
	AddressablePlace []AddressablePlace `xml:"AddressablePlace,omitempty" json:"AddressablePlace,omitempty"`
	PostalAddress []PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	RoadAddress []RoadAddress `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
	TransportAdministrativeZone []TransportAdministrativeZone `xml:"TransportAdministrativeZone,omitempty" json:"TransportAdministrativeZone,omitempty"`
	AdministrativeZone []AdministrativeZone `xml:"AdministrativeZone,omitempty" json:"AdministrativeZone,omitempty"`
	FareZone []FareZone `xml:"FareZone,omitempty" json:"FareZone,omitempty"`
	TariffZone []TariffZone `xml:"TariffZone,omitempty" json:"TariffZone,omitempty"`
	GeneralZone []GeneralZone `xml:"GeneralZone,omitempty" json:"GeneralZone,omitempty"`
	Zone []Zone `xml:"Zone,omitempty" json:"Zone,omitempty"`
	GroupOfLinks []GroupOfLinks `xml:"GroupOfLinks,omitempty" json:"GroupOfLinks,omitempty"`
	GroupOfPoints []GroupOfPoints `xml:"GroupOfPoints,omitempty" json:"GroupOfPoints,omitempty"`
	Layer []Layer `xml:"Layer,omitempty" json:"Layer,omitempty"`
	GeneralGroupOfEntities []GeneralGroupOfEntities `xml:"GeneralGroupOfEntities,omitempty" json:"GeneralGroupOfEntities,omitempty"`
	ResponsibilityRole []ResponsibilityRole `xml:"ResponsibilityRole,omitempty" json:"ResponsibilityRole,omitempty"`
	ResponsibilitySet []ResponsibilitySet `xml:"ResponsibilitySet,omitempty" json:"ResponsibilitySet,omitempty"`
	ValueSet []ValueSet `xml:"ValueSet,omitempty" json:"ValueSet,omitempty"`
	TypeOfFleet []TypeOfFleet `xml:"TypeOfFleet,omitempty" json:"TypeOfFleet,omitempty"`
	ParkingBayStatus []ParkingBayStatus `xml:"ParkingBayStatus,omitempty" json:"ParkingBayStatus,omitempty"`
	TypeOfMediumAccessDevice []TypeOfMediumAccessDevice `xml:"TypeOfMediumAccessDevice,omitempty" json:"TypeOfMediumAccessDevice,omitempty"`
	TypeOfMachineReadability []TypeOfMachineReadability `xml:"TypeOfMachineReadability,omitempty" json:"TypeOfMachineReadability,omitempty"`
	TypeOfProof []TypeOfProof `xml:"TypeOfProof,omitempty" json:"TypeOfProof,omitempty"`
	TypeOfConcession []TypeOfConcession `xml:"TypeOfConcession,omitempty" json:"TypeOfConcession,omitempty"`
	ChargingMoment []ChargingMoment `xml:"ChargingMoment,omitempty" json:"ChargingMoment,omitempty"`
	TypeOfUsageParameter []TypeOfUsageParameter `xml:"TypeOfUsageParameter,omitempty" json:"TypeOfUsageParameter,omitempty"`
	TypeOfFareTable []TypeOfFareTable `xml:"TypeOfFareTable,omitempty" json:"TypeOfFareTable,omitempty"`
	TypeOfPricingRule []TypeOfPricingRule `xml:"TypeOfPricingRule,omitempty" json:"TypeOfPricingRule,omitempty"`
	PriceUnit []PriceUnit `xml:"PriceUnit,omitempty" json:"PriceUnit,omitempty"`
	TimingAlgorithmType []TimingAlgorithmType `xml:"TimingAlgorithmType,omitempty" json:"TimingAlgorithmType,omitempty"`
	PurposeOfJourneyPartition []PurposeOfJourneyPartition `xml:"PurposeOfJourneyPartition,omitempty" json:"PurposeOfJourneyPartition,omitempty"`
	PointOfInterestClassification []PointOfInterestClassification `xml:"PointOfInterestClassification,omitempty" json:"PointOfInterestClassification,omitempty"`
	TypeOfParking []TypeOfParking `xml:"TypeOfParking,omitempty" json:"TypeOfParking,omitempty"`
	TypeOfServiceFeature []TypeOfServiceFeature `xml:"TypeOfServiceFeature,omitempty" json:"TypeOfServiceFeature,omitempty"`
	Direction []Direction `xml:"Direction,omitempty" json:"Direction,omitempty"`
	TypeOfSecurityList []TypeOfSecurityList `xml:"TypeOfSecurityList,omitempty" json:"TypeOfSecurityList,omitempty"`
	TypeOfDriverPermit []TypeOfDriverPermit `xml:"TypeOfDriverPermit,omitempty" json:"TypeOfDriverPermit,omitempty"`
	PurposeOfEquipmentProfile []PurposeOfEquipmentProfile `xml:"PurposeOfEquipmentProfile,omitempty" json:"PurposeOfEquipmentProfile,omitempty"`
	TypeOfProductCategory []TypeOfProductCategory `xml:"TypeOfProductCategory,omitempty" json:"TypeOfProductCategory,omitempty"`
	TypeOfPaymentMethod []TypeOfPaymentMethod `xml:"TypeOfPaymentMethod,omitempty" json:"TypeOfPaymentMethod,omitempty"`
	ClassOfUse []ClassOfUse `xml:"ClassOfUse,omitempty" json:"ClassOfUse,omitempty"`
	Submode []Submode `xml:"Submode,omitempty" json:"Submode,omitempty"`
	OpenTransportMode []OpenTransportMode `xml:"OpenTransportMode,omitempty" json:"OpenTransportMode,omitempty"`
	TypeOfCodespaceAssignment []TypeOfCodespaceAssignment `xml:"TypeOfCodespaceAssignment,omitempty" json:"TypeOfCodespaceAssignment,omitempty"`
	TypeOfValidity []TypeOfValidity `xml:"TypeOfValidity,omitempty" json:"TypeOfValidity,omitempty"`
	PurposeOfGrouping []PurposeOfGrouping `xml:"PurposeOfGrouping,omitempty" json:"PurposeOfGrouping,omitempty"`
	Branding []Branding `xml:"Branding,omitempty" json:"Branding,omitempty"`
	DataSource []DataSource `xml:"DataSource,omitempty" json:"DataSource,omitempty"`
	TypeOfMobilityService []TypeOfMobilityService `xml:"TypeOfMobilityService,omitempty" json:"TypeOfMobilityService,omitempty"`
	TypeOfRetailDevice []TypeOfRetailDevice `xml:"TypeOfRetailDevice,omitempty" json:"TypeOfRetailDevice,omitempty"`
	CustomerAccountStatus []CustomerAccountStatus `xml:"CustomerAccountStatus,omitempty" json:"CustomerAccountStatus,omitempty"`
	TypeOfCustomerAccount []TypeOfCustomerAccount `xml:"TypeOfCustomerAccount,omitempty" json:"TypeOfCustomerAccount,omitempty"`
	TypeOfFareContractEntry []TypeOfFareContractEntry `xml:"TypeOfFareContractEntry,omitempty" json:"TypeOfFareContractEntry,omitempty"`
	TypeOfFareContract []TypeOfFareContract `xml:"TypeOfFareContract,omitempty" json:"TypeOfFareContract,omitempty"`
	TypeOfTravelDocument []TypeOfTravelDocument `xml:"TypeOfTravelDocument,omitempty" json:"TypeOfTravelDocument,omitempty"`
	TypeOfSalesOfferPackage []TypeOfSalesOfferPackage `xml:"TypeOfSalesOfferPackage,omitempty" json:"TypeOfSalesOfferPackage,omitempty"`
	TypeOfFareProduct []TypeOfFareProduct `xml:"TypeOfFareProduct,omitempty" json:"TypeOfFareProduct,omitempty"`
	TypeOfFareStructureElement []TypeOfFareStructureElement `xml:"TypeOfFareStructureElement,omitempty" json:"TypeOfFareStructureElement,omitempty"`
	TypeOfTariff []TypeOfTariff `xml:"TypeOfTariff,omitempty" json:"TypeOfTariff,omitempty"`
	TypeOfAccessRightAssignment []TypeOfAccessRightAssignment `xml:"TypeOfAccessRightAssignment,omitempty" json:"TypeOfAccessRightAssignment,omitempty"`
	TypeOfFareStructureFactor []TypeOfFareStructureFactor `xml:"TypeOfFareStructureFactor,omitempty" json:"TypeOfFareStructureFactor,omitempty"`
	TypeOfFlexibleService []TypeOfFlexibleService `xml:"TypeOfFlexibleService,omitempty" json:"TypeOfFlexibleService,omitempty"`
	TypeOfTimeDemandType []TypeOfTimeDemandType `xml:"TypeOfTimeDemandType,omitempty" json:"TypeOfTimeDemandType,omitempty"`
	TypeOfPassengerInformationEquipment []TypeOfPassengerInformationEquipment `xml:"TypeOfPassengerInformationEquipment,omitempty" json:"TypeOfPassengerInformationEquipment,omitempty"`
	TypeOfJourneyPattern []TypeOfJourneyPattern `xml:"TypeOfJourneyPattern,omitempty" json:"TypeOfJourneyPattern,omitempty"`
	TypeOfActivation []TypeOfActivation `xml:"TypeOfActivation,omitempty" json:"TypeOfActivation,omitempty"`
	TypeOfModeOfOperation []TypeOfModeOfOperation `xml:"TypeOfModeOfOperation,omitempty" json:"TypeOfModeOfOperation,omitempty"`
	TypeOfPlug []TypeOfPlug `xml:"TypeOfPlug,omitempty" json:"TypeOfPlug,omitempty"`
	TypeOfBatteryChemistry []TypeOfBatteryChemistry `xml:"TypeOfBatteryChemistry,omitempty" json:"TypeOfBatteryChemistry,omitempty"`
	TypeOfLine []TypeOfLine `xml:"TypeOfLine,omitempty" json:"TypeOfLine,omitempty"`
	TypeOfDeliveryVariant []TypeOfDeliveryVariant `xml:"TypeOfDeliveryVariant,omitempty" json:"TypeOfDeliveryVariant,omitempty"`
	TypeOfNotice []TypeOfNotice `xml:"TypeOfNotice,omitempty" json:"TypeOfNotice,omitempty"`
	TypeOfCongestion []TypeOfCongestion `xml:"TypeOfCongestion,omitempty" json:"TypeOfCongestion,omitempty"`
	TypeOfFacility []TypeOfFacility `xml:"TypeOfFacility,omitempty" json:"TypeOfFacility,omitempty"`
	TypeOfService []TypeOfService `xml:"TypeOfService,omitempty" json:"TypeOfService,omitempty"`
	TypeOfEquipment []TypeOfEquipment `xml:"TypeOfEquipment,omitempty" json:"TypeOfEquipment,omitempty"`
	TypeOfFeature []TypeOfFeature `xml:"TypeOfFeature,omitempty" json:"TypeOfFeature,omitempty"`
	TypeOfLinkSequence []TypeOfLinkSequence `xml:"TypeOfLinkSequence,omitempty" json:"TypeOfLinkSequence,omitempty"`
	TypeOfPlace []TypeOfPlace `xml:"TypeOfPlace,omitempty" json:"TypeOfPlace,omitempty"`
	TypeOfTransfer []TypeOfTransfer `xml:"TypeOfTransfer,omitempty" json:"TypeOfTransfer,omitempty"`
	TypeOfOperation []TypeOfOperation `xml:"TypeOfOperation,omitempty" json:"TypeOfOperation,omitempty"`
	TypeOfOrganisationPart []TypeOfOrganisationPart `xml:"TypeOfOrganisationPart,omitempty" json:"TypeOfOrganisationPart,omitempty"`
	TypeOfOrganisation []TypeOfOrganisation `xml:"TypeOfOrganisation,omitempty" json:"TypeOfOrganisation,omitempty"`
	TypeOfZone []TypeOfZone `xml:"TypeOfZone,omitempty" json:"TypeOfZone,omitempty"`
	TypeOfLink []TypeOfLink `xml:"TypeOfLink,omitempty" json:"TypeOfLink,omitempty"`
	TypeOfPoint []TypeOfPoint `xml:"TypeOfPoint,omitempty" json:"TypeOfPoint,omitempty"`
	TypeOfProjection []TypeOfProjection `xml:"TypeOfProjection,omitempty" json:"TypeOfProjection,omitempty"`
	TypeOfFrame []TypeOfFrame `xml:"TypeOfFrame,omitempty" json:"TypeOfFrame,omitempty"`
	TypeOfResponsibilityRole []TypeOfResponsibilityRole `xml:"TypeOfResponsibilityRole,omitempty" json:"TypeOfResponsibilityRole,omitempty"`
	TypeOfEntity []TypeOfEntity `xml:"TypeOfEntity,omitempty" json:"TypeOfEntity,omitempty"`
	TypeOfVersion []TypeOfVersion `xml:"TypeOfVersion,omitempty" json:"TypeOfVersion,omitempty"`
	PassingTimeView []PassingTimeView `xml:"PassingTimeView,omitempty" json:"PassingTimeView,omitempty"`
	SimpleAvailabilityCondition []SimpleAvailabilityCondition `xml:"SimpleAvailabilityCondition,omitempty" json:"SimpleAvailabilityCondition,omitempty"`
	ValidDuring []ValidDuring `xml:"ValidDuring,omitempty" json:"ValidDuring,omitempty"`
	AvailabilityCondition []AvailabilityCondition `xml:"AvailabilityCondition,omitempty" json:"AvailabilityCondition,omitempty"`
	ValidityRuleParameter []ValidityRuleParameter `xml:"ValidityRuleParameter,omitempty" json:"ValidityRuleParameter,omitempty"`
	ValidityTrigger []ValidityTrigger `xml:"ValidityTrigger,omitempty" json:"ValidityTrigger,omitempty"`
	ValidityCondition []ValidityCondition `xml:"ValidityCondition,omitempty" json:"ValidityCondition,omitempty"`
	Version []Version `xml:"Version,omitempty" json:"Version,omitempty"`
	EntityEntity []EntityEntity `xml:"Entity_Entity,omitempty" json:"Entity_Entity,omitempty"`
}

// GeneralFrameMemberRefStructure represents the GeneralFrameMemberRefStructure element
// Type for a reference to a GENERAL FRAME MEMBER.
type GeneralFrameMemberRefStructure struct {
	VersionOfObjectRefStructure
}

// GeneralFrameMemberStructure represents the GeneralFrameMemberStructure element
// Type for a GENERAL FRAME MEMBER.
type GeneralFrameMemberStructure struct {
	VersionedChildStructure
	// Name of Network Version.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	TripLegRef *TripLegRef `xml:"TripLegRef,omitempty" json:"TripLegRef,omitempty"`
	IndividualPassengerInfoRef *IndividualPassengerInfoRef `xml:"IndividualPassengerInfoRef,omitempty" json:"IndividualPassengerInfoRef,omitempty"`
	VehiclePoolingDriverInfoRef *VehiclePoolingDriverInfoRef `xml:"VehiclePoolingDriverInfoRef,omitempty" json:"VehiclePoolingDriverInfoRef,omitempty"`
	IndividualTravellerRef *IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	ServiceAccessCodeRef *ServiceAccessCodeRef `xml:"ServiceAccessCodeRef,omitempty" json:"ServiceAccessCodeRef,omitempty"`
	TravelDocumentRef *TravelDocumentRef `xml:"TravelDocumentRef,omitempty" json:"TravelDocumentRef,omitempty"`
	RepeatedTripFareRequestRef *RepeatedTripFareRequestRef `xml:"RepeatedTripFareRequestRef,omitempty" json:"RepeatedTripFareRequestRef,omitempty"`
	SingleTripFareRequestRef *SingleTripFareRequestRef `xml:"SingleTripFareRequestRef,omitempty" json:"SingleTripFareRequestRef,omitempty"`
	FareRequestRef *FareRequestRef `xml:"FareRequestRef,omitempty" json:"FareRequestRef,omitempty"`
	StopFinderRequestRef *StopFinderRequestRef `xml:"StopFinderRequestRef,omitempty" json:"StopFinderRequestRef,omitempty"`
	StopEventRequestRef *StopEventRequestRef `xml:"StopEventRequestRef,omitempty" json:"StopEventRequestRef,omitempty"`
	ScheduleRequestRef *ScheduleRequestRef `xml:"ScheduleRequestRef,omitempty" json:"ScheduleRequestRef,omitempty"`
	TripPlanRequestRef *TripPlanRequestRef `xml:"TripPlanRequestRef,omitempty" json:"TripPlanRequestRef,omitempty"`
	CustomerPaymentMeansRef *CustomerPaymentMeansRef `xml:"CustomerPaymentMeansRef,omitempty" json:"CustomerPaymentMeansRef,omitempty"`
	MediumApplicationInstanceRef *MediumApplicationInstanceRef `xml:"MediumApplicationInstanceRef,omitempty" json:"MediumApplicationInstanceRef,omitempty"`
	MobileDeviceRef *MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef *EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef *SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	ResidentialQualificationEligibilityRef *ResidentialQualificationEligibilityRef `xml:"ResidentialQualificationEligibilityRef,omitempty" json:"ResidentialQualificationEligibilityRef,omitempty"`
	CommercialProfileEligibilityRef *CommercialProfileEligibilityRef `xml:"CommercialProfileEligibilityRef,omitempty" json:"CommercialProfileEligibilityRef,omitempty"`
	UserProfileEligibilityRef *UserProfileEligibilityRef `xml:"UserProfileEligibilityRef,omitempty" json:"UserProfileEligibilityRef,omitempty"`
	CustomerAccountRef *CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	FareContractRef *FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	VehicleTypeZoneRestrictionRef *VehicleTypeZoneRestrictionRef `xml:"VehicleTypeZoneRestrictionRef,omitempty" json:"VehicleTypeZoneRestrictionRef,omitempty"`
	StartTimeAtStopPointRef *StartTimeAtStopPointRef `xml:"StartTimeAtStopPointRef,omitempty" json:"StartTimeAtStopPointRef,omitempty"`
	ResidentialQualificationRef *ResidentialQualificationRef `xml:"ResidentialQualificationRef,omitempty" json:"ResidentialQualificationRef,omitempty"`
	TypeOfConcessionRef *TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	TypeOfUsageParameterRef *TypeOfUsageParameterRef `xml:"TypeOfUsageParameterRef,omitempty" json:"TypeOfUsageParameterRef,omitempty"`
	TariffObjectRef *TariffObjectRef `xml:"TariffObjectRef,omitempty" json:"TariffObjectRef,omitempty"`
	ParkingTariffRef *ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef *TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	TypeOfFareTableRef *TypeOfFareTableRef `xml:"TypeOfFareTableRef,omitempty" json:"TypeOfFareTableRef,omitempty"`
	FareTableRowRef *FareTableRowRef `xml:"FareTableRowRef,omitempty" json:"FareTableRowRef,omitempty"`
	FareTableColumnRef *FareTableColumnRef `xml:"FareTableColumnRef,omitempty" json:"FareTableColumnRef,omitempty"`
	TimeUnitRef *TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	GeographicalUnitRef *GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	ControllableElementInSequenceRef *ControllableElementInSequenceRef `xml:"ControllableElementInSequenceRef,omitempty" json:"ControllableElementInSequenceRef,omitempty"`
	FareStructureElementInSequenceRef *FareStructureElementInSequenceRef `xml:"FareStructureElementInSequenceRef,omitempty" json:"FareStructureElementInSequenceRef,omitempty"`
	AccessRightInProductRef *AccessRightInProductRef `xml:"AccessRightInProductRef,omitempty" json:"AccessRightInProductRef,omitempty"`
	CellRef *CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	CustomerPurchasePackagePriceRef *CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef *ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef *TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef *TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef *QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef *ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef *ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef *GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef *GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef *UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef *SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef *SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef *DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef *FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef *FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef *CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef *FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef *FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CustomerPurchasePackageElementRef *CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
	CustomerPurchasePackageRef *CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	ControllableElementRef *ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	ValidableElementRef *ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	AdditionalDriverOptionRef *AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef *RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef *RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef *SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef *SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef *MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef *InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef *FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef *SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef *UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef *StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef *RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef *RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef *LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef *EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef *EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef *EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef *GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef *CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef *VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef *CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef *UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef *ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef *SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef *PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef *ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef *TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef *ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef *RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef *ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef *ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef *CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef *ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef *BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef *PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
	SeriesConstraintRef *SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	SalesOfferPackageElementRef *SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	DistanceMatrixElementInverseRef *DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
	DistanceMatrixElementRef *DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	FareStructureElementRef *FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	FulfilmentMethodRef *FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	CappingRuleRef *CappingRuleRef `xml:"CappingRuleRef,omitempty" json:"CappingRuleRef,omitempty"`
	EntitlementProductRef *EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef *ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	TimeIntervalRef *TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	GeographicalIntervalRef *GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	ParkingChargeBandRef *ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef *TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	FareQuotaFactorRef *FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef *FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef *QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	GeographicalStructureFactorRef *GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	PriceableObjectRef *PriceableObjectRef `xml:"PriceableObjectRef,omitempty" json:"PriceableObjectRef,omitempty"`
	MonthValidityOffsetRef *MonthValidityOffsetRef `xml:"MonthValidityOffsetRef,omitempty" json:"MonthValidityOffsetRef,omitempty"`
	LimitingRuleRef *LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef *DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef *PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	PricingServiceRef *PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	RoundingStepRef *RoundingStepRef `xml:"RoundingStepRef,omitempty" json:"RoundingStepRef,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	PricingParameterSetRef *PricingParameterSetRef `xml:"PricingParameterSetRef,omitempty" json:"PricingParameterSetRef,omitempty"`
	FlexibleServicePropertiesRef *FlexibleServicePropertiesRef `xml:"FlexibleServicePropertiesRef,omitempty" json:"FlexibleServicePropertiesRef,omitempty"`
	DriverTripTimeRef *DriverTripTimeRef `xml:"DriverTripTimeRef,omitempty" json:"DriverTripTimeRef,omitempty"`
	DriverTripRef *DriverTripRef `xml:"DriverTripRef,omitempty" json:"DriverTripRef,omitempty"`
	DutyPartRef *DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
	AccountableElementRef *AccountableElementRef `xml:"AccountableElementRef,omitempty" json:"AccountableElementRef,omitempty"`
	DutyRef *DutyRef `xml:"DutyRef,omitempty" json:"DutyRef,omitempty"`
	ReliefOpportunityRef *ReliefOpportunityRef `xml:"ReliefOpportunityRef,omitempty" json:"ReliefOpportunityRef,omitempty"`
	CourseOfJourneysRef *CourseOfJourneysRef `xml:"CourseOfJourneysRef,omitempty" json:"CourseOfJourneysRef,omitempty"`
	DriverRef *DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
	VehicleServicePartRef *VehicleServicePartRef `xml:"VehicleServicePartRef,omitempty" json:"VehicleServicePartRef,omitempty"`
	VehicleServiceRef *VehicleServiceRef `xml:"VehicleServiceRef,omitempty" json:"VehicleServiceRef,omitempty"`
	CompoundBlockRef *CompoundBlockRef `xml:"CompoundBlockRef,omitempty" json:"CompoundBlockRef,omitempty"`
	TrainBlockPartRef *TrainBlockPartRef `xml:"TrainBlockPartRef,omitempty" json:"TrainBlockPartRef,omitempty"`
	BlockPartRef *BlockPartRef `xml:"BlockPartRef,omitempty" json:"BlockPartRef,omitempty"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef *BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	JourneyPartCoupleRef *JourneyPartCoupleRef `xml:"JourneyPartCoupleRef,omitempty" json:"JourneyPartCoupleRef,omitempty"`
	CoupledJourneyRef *CoupledJourneyRef `xml:"CoupledJourneyRef,omitempty" json:"CoupledJourneyRef,omitempty"`
	JourneyPartRef *JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	TimetabledPassingTimeRef *TimetabledPassingTimeRef `xml:"TimetabledPassingTimeRef,omitempty" json:"TimetabledPassingTimeRef,omitempty"`
	EstimatedPassingTimeRef *EstimatedPassingTimeRef `xml:"EstimatedPassingTimeRef,omitempty" json:"EstimatedPassingTimeRef,omitempty"`
	ObservedPassingTimeRef *ObservedPassingTimeRef `xml:"ObservedPassingTimeRef,omitempty" json:"ObservedPassingTimeRef,omitempty"`
	TargetPassingTimeRef *TargetPassingTimeRef `xml:"TargetPassingTimeRef,omitempty" json:"TargetPassingTimeRef,omitempty"`
	PassingTimeRef *PassingTimeRef `xml:"PassingTimeRef,omitempty" json:"PassingTimeRef,omitempty"`
	InterchangeRuleTimingRef *InterchangeRuleTimingRef `xml:"InterchangeRuleTimingRef,omitempty" json:"InterchangeRuleTimingRef,omitempty"`
	InterchangeRuleRef *InterchangeRuleRef `xml:"InterchangeRuleRef,omitempty" json:"InterchangeRuleRef,omitempty"`
	ServiceJourneyPatternInterchangeRef *ServiceJourneyPatternInterchangeRef `xml:"ServiceJourneyPatternInterchangeRef,omitempty" json:"ServiceJourneyPatternInterchangeRef,omitempty"`
	ServiceJourneyInterchangeRef *ServiceJourneyInterchangeRef `xml:"ServiceJourneyInterchangeRef,omitempty" json:"ServiceJourneyInterchangeRef,omitempty"`
	DefaultInterchangeRef *DefaultInterchangeRef `xml:"DefaultInterchangeRef,omitempty" json:"DefaultInterchangeRef,omitempty"`
	InterchangeRef *InterchangeRef `xml:"InterchangeRef,omitempty" json:"InterchangeRef,omitempty"`
	JourneyMeetingRef *JourneyMeetingRef `xml:"JourneyMeetingRef,omitempty" json:"JourneyMeetingRef,omitempty"`
	SupplyContractRef *SupplyContractRef `xml:"SupplyContractRef,omitempty" json:"SupplyContractRef,omitempty"`
	TrainNumberRef *TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	RoutingConstraintZoneRef *RoutingConstraintZoneRef `xml:"RoutingConstraintZoneRef,omitempty" json:"RoutingConstraintZoneRef,omitempty"`
	VehiclePositionAlignmentRef *VehiclePositionAlignmentRef `xml:"VehiclePositionAlignmentRef,omitempty" json:"VehiclePositionAlignmentRef,omitempty"`
	VehicleQuayAlignmentRef *VehicleQuayAlignmentRef `xml:"VehicleQuayAlignmentRef,omitempty" json:"VehicleQuayAlignmentRef,omitempty"`
	LogicalDisplayRef *LogicalDisplayRef `xml:"LogicalDisplayRef,omitempty" json:"LogicalDisplayRef,omitempty"`
	ParkingPropertiesRef *ParkingPropertiesRef `xml:"ParkingPropertiesRef,omitempty" json:"ParkingPropertiesRef,omitempty"`
	ParkingCapacityRef *ParkingCapacityRef `xml:"ParkingCapacityRef,omitempty" json:"ParkingCapacityRef,omitempty"`
	LineNetworkRef *LineNetworkRef `xml:"LineNetworkRef,omitempty" json:"LineNetworkRef,omitempty"`
	RouteInstructionRef *RouteInstructionRef `xml:"RouteInstructionRef,omitempty" json:"RouteInstructionRef,omitempty"`
	FlexiblePointPropertiesRef *FlexiblePointPropertiesRef `xml:"FlexiblePointPropertiesRef,omitempty" json:"FlexiblePointPropertiesRef,omitempty"`
	FlexibleLinkPropertiesRef *FlexibleLinkPropertiesRef `xml:"FlexibleLinkPropertiesRef,omitempty" json:"FlexibleLinkPropertiesRef,omitempty"`
	TimeDemandProfileRef *TimeDemandProfileRef `xml:"TimeDemandProfileRef,omitempty" json:"TimeDemandProfileRef,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	VehicleTypePreferenceRef *VehicleTypePreferenceRef `xml:"VehicleTypePreferenceRef,omitempty" json:"VehicleTypePreferenceRef,omitempty"`
	JourneyPatternHeadwayRef *JourneyPatternHeadwayRef `xml:"JourneyPatternHeadwayRef,omitempty" json:"JourneyPatternHeadwayRef,omitempty"`
	JourneyPatternLayoverRef *JourneyPatternLayoverRef `xml:"JourneyPatternLayoverRef,omitempty" json:"JourneyPatternLayoverRef,omitempty"`
	JourneyPatternRunTimeRef *JourneyPatternRunTimeRef `xml:"JourneyPatternRunTimeRef,omitempty" json:"JourneyPatternRunTimeRef,omitempty"`
	JourneyPatternWaitTimeRef *JourneyPatternWaitTimeRef `xml:"JourneyPatternWaitTimeRef,omitempty" json:"JourneyPatternWaitTimeRef,omitempty"`
	DefaultServiceJourneyTimeRef *DefaultServiceJourneyTimeRef `xml:"DefaultServiceJourneyTimeRef,omitempty" json:"DefaultServiceJourneyTimeRef,omitempty"`
	DefaultDeadRunRunTimeRef *DefaultDeadRunRunTimeRef `xml:"DefaultDeadRunRunTimeRef,omitempty" json:"DefaultDeadRunRunTimeRef,omitempty"`
	TurnaroundTimeLimitTimeRef *TurnaroundTimeLimitTimeRef `xml:"TurnaroundTimeLimitTimeRef,omitempty" json:"TurnaroundTimeLimitTimeRef,omitempty"`
	JourneyTimingRef *JourneyTimingRef `xml:"JourneyTimingRef,omitempty" json:"JourneyTimingRef,omitempty"`
	CrewBaseRef *CrewBaseRef `xml:"CrewBaseRef,omitempty" json:"CrewBaseRef,omitempty"`
	TrainComponentRef *TrainComponentRef `xml:"TrainComponentRef,omitempty" json:"TrainComponentRef,omitempty"`
	TrainElementRef *TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	TrainInCompoundTrainRef *TrainInCompoundTrainRef `xml:"TrainInCompoundTrainRef,omitempty" json:"TrainInCompoundTrainRef,omitempty"`
	PassengerSeatRef *PassengerSeatRef `xml:"PassengerSeatRef,omitempty" json:"PassengerSeatRef,omitempty"`
	TravelDocumentSecurityListingRef *TravelDocumentSecurityListingRef `xml:"TravelDocumentSecurityListingRef,omitempty" json:"TravelDocumentSecurityListingRef,omitempty"`
	MediumAccessDeviceSecurityListingRef *MediumAccessDeviceSecurityListingRef `xml:"MediumAccessDeviceSecurityListingRef,omitempty" json:"MediumAccessDeviceSecurityListingRef,omitempty"`
	RetailDeviceSecurityListingRef *RetailDeviceSecurityListingRef `xml:"RetailDeviceSecurityListingRef,omitempty" json:"RetailDeviceSecurityListingRef,omitempty"`
	CustomerAccountSecurityListingRef *CustomerAccountSecurityListingRef `xml:"CustomerAccountSecurityListingRef,omitempty" json:"CustomerAccountSecurityListingRef,omitempty"`
	FareContractSecurityListingRef *FareContractSecurityListingRef `xml:"FareContractSecurityListingRef,omitempty" json:"FareContractSecurityListingRef,omitempty"`
	CustomerSecurityListingRef *CustomerSecurityListingRef `xml:"CustomerSecurityListingRef,omitempty" json:"CustomerSecurityListingRef,omitempty"`
	WhitelistRef *WhitelistRef `xml:"WhitelistRef,omitempty" json:"WhitelistRef,omitempty"`
	BlacklistRef *BlacklistRef `xml:"BlacklistRef,omitempty" json:"BlacklistRef,omitempty"`
	SchematicMapMemberRef *SchematicMapMemberRef `xml:"SchematicMapMemberRef,omitempty" json:"SchematicMapMemberRef,omitempty"`
	SchematicMapRef *SchematicMapRef `xml:"SchematicMapRef,omitempty" json:"SchematicMapRef,omitempty"`
	CycleModelProfileRef *CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef *CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
	ModeRestrictionAssessmentRef *ModeRestrictionAssessmentRef `xml:"ModeRestrictionAssessmentRef,omitempty" json:"ModeRestrictionAssessmentRef,omitempty"`
	DeliveryVariantRef *DeliveryVariantRef `xml:"DeliveryVariantRef,omitempty" json:"DeliveryVariantRef,omitempty"`
	NoticeRef *NoticeRef `xml:"NoticeRef,omitempty" json:"NoticeRef,omitempty"`
	VehicleProfileRef *VehicleProfileRef `xml:"VehicleProfileRef,omitempty" json:"VehicleProfileRef,omitempty"`
	VehicleEquipmentProfileMemberRef *VehicleEquipmentProfileMemberRef `xml:"VehicleEquipmentProfileMemberRef,omitempty" json:"VehicleEquipmentProfileMemberRef,omitempty"`
	ChargingEquipmentProfileRef *ChargingEquipmentProfileRef `xml:"ChargingEquipmentProfileRef,omitempty" json:"ChargingEquipmentProfileRef,omitempty"`
	VehicleEquipmentProfileRef *VehicleEquipmentProfileRef `xml:"VehicleEquipmentProfileRef,omitempty" json:"VehicleEquipmentProfileRef,omitempty"`
	VehicleModelRef *VehicleModelRef `xml:"VehicleModelRef,omitempty" json:"VehicleModelRef,omitempty"`
	VehicleRef *VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	PassengerCapacityRef *PassengerCapacityRef `xml:"PassengerCapacityRef,omitempty" json:"PassengerCapacityRef,omitempty"`
	FacilityRequirementRef *FacilityRequirementRef `xml:"FacilityRequirementRef,omitempty" json:"FacilityRequirementRef,omitempty"`
	VehicleManoeuvringRequirementRef *VehicleManoeuvringRequirementRef `xml:"VehicleManoeuvringRequirementRef,omitempty" json:"VehicleManoeuvringRequirementRef,omitempty"`
	PassengerCarryingRequirementRef *PassengerCarryingRequirementRef `xml:"PassengerCarryingRequirementRef,omitempty" json:"PassengerCarryingRequirementRef,omitempty"`
	VehicleRequirementRef *VehicleRequirementRef `xml:"VehicleRequirementRef,omitempty" json:"VehicleRequirementRef,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	OnboardStayRef *OnboardStayRef `xml:"OnboardStayRef,omitempty" json:"OnboardStayRef,omitempty"`
	AccommodationRef *AccommodationRef `xml:"AccommodationRef,omitempty" json:"AccommodationRef,omitempty"`
	ServiceFacilitySetRef *ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	SiteFacilitySetRef *SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	FacilitySetRef *FacilitySetRef `xml:"FacilitySetRef,omitempty" json:"FacilitySetRef,omitempty"`
	FacilityRef *FacilityRef `xml:"FacilityRef,omitempty" json:"FacilityRef,omitempty"`
	OperatingDepartmentRef *OperatingDepartmentRef `xml:"OperatingDepartmentRef,omitempty" json:"OperatingDepartmentRef,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	LevelRef *LevelRef `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	ModeRef *ModeRef `xml:"ModeRef,omitempty" json:"ModeRef,omitempty"`
	SubmodeRef *SubmodeRef `xml:"SubmodeRef,omitempty" json:"SubmodeRef,omitempty"`
	OpenTransportModeRef *OpenTransportModeRef `xml:"OpenTransportModeRef,omitempty" json:"OpenTransportModeRef,omitempty"`
	TopographicProjectionRef *TopographicProjectionRef `xml:"TopographicProjectionRef,omitempty" json:"TopographicProjectionRef,omitempty"`
	ComplexFeatureProjectionRef *ComplexFeatureProjectionRef `xml:"ComplexFeatureProjectionRef,omitempty" json:"ComplexFeatureProjectionRef,omitempty"`
	LinkSequenceProjectionRef *LinkSequenceProjectionRef `xml:"LinkSequenceProjectionRef,omitempty" json:"LinkSequenceProjectionRef,omitempty"`
	ZoneProjectionRef *ZoneProjectionRef `xml:"ZoneProjectionRef,omitempty" json:"ZoneProjectionRef,omitempty"`
	LinkProjectionRef *LinkProjectionRef `xml:"LinkProjectionRef,omitempty" json:"LinkProjectionRef,omitempty"`
	PointProjectionRef *PointProjectionRef `xml:"PointProjectionRef,omitempty" json:"PointProjectionRef,omitempty"`
	TripRef *TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripPatternTripRef *TripPatternTripRef `xml:"TripPatternTripRef,omitempty" json:"TripPatternTripRef,omitempty"`
	SingleJourneyPathRef *SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	TimingPatternRef *TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	NavigationPathRef *NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	LinkSequenceRef *LinkSequenceRef `xml:"LinkSequenceRef,omitempty" json:"LinkSequenceRef,omitempty"`
	ContactRef *ContactRef `xml:"ContactRef,omitempty" json:"ContactRef,omitempty"`
	SalesTransactionRef *SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	OfferedTravelSpecificationRef *OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	RequestedTravelSpecificationRef *RequestedTravelSpecificationRef `xml:"RequestedTravelSpecificationRef,omitempty" json:"RequestedTravelSpecificationRef,omitempty"`
	TravelSpecificationRef *TravelSpecificationRef `xml:"TravelSpecificationRef,omitempty" json:"TravelSpecificationRef,omitempty"`
	FareContractEntryRef *FareContractEntryRef `xml:"FareContractEntryRef,omitempty" json:"FareContractEntryRef,omitempty"`
	LogEntryRef *LogEntryRef `xml:"LogEntryRef,omitempty" json:"LogEntryRef,omitempty"`
	AlternativeNameRef *AlternativeNameRef `xml:"AlternativeNameRef,omitempty" json:"AlternativeNameRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	DefaultConnectionRef *DefaultConnectionRef `xml:"DefaultConnectionRef,omitempty" json:"DefaultConnectionRef,omitempty"`
	SiteConnectionRef *SiteConnectionRef `xml:"SiteConnectionRef,omitempty" json:"SiteConnectionRef,omitempty"`
	ConnectionRef *ConnectionRef `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	AccessRef *AccessRef `xml:"AccessRef,omitempty" json:"AccessRef,omitempty"`
	HailAndRideAreaRef *HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef *FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef *FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
	FlexibleStopPlaceRef *FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	PathJunctionRef *PathJunctionRef `xml:"PathJunctionRef,omitempty" json:"PathJunctionRef,omitempty"`
	EquipmentPlaceRef *EquipmentPlaceRef `xml:"EquipmentPlaceRef,omitempty" json:"EquipmentPlaceRef,omitempty"`
	EquipmentPositionRef *EquipmentPositionRef `xml:"EquipmentPositionRef,omitempty" json:"EquipmentPositionRef,omitempty"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	VehiclePoolingMeetingPlaceRef *VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef *VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	GarageRef *GarageRef `xml:"GarageRef,omitempty" json:"GarageRef,omitempty"`
	VehicleStoppingPositionRef *VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef *VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef *AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef *StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef *VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef *ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef *PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef *StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef *StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef *ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef *ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef *ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef *PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef *PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef *VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef *EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef *SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef *SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	AddressablePlaceRef *AddressablePlaceRef `xml:"AddressablePlaceRef,omitempty" json:"AddressablePlaceRef,omitempty"`
	PostalAddressRef *PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef *RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef *AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
	OnwardVehicleMeetingLinkRef *OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef *VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef *ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef *LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef *WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef *RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef *RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef *ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef *PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef *RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	UicOperatingPeriodRef *UicOperatingPeriodRef `xml:"UicOperatingPeriodRef,omitempty" json:"UicOperatingPeriodRef,omitempty"`
	OperatingPeriodRef *OperatingPeriodRef `xml:"OperatingPeriodRef,omitempty" json:"OperatingPeriodRef,omitempty"`
	OperatingDayRef *OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	ServiceCalendarRef *ServiceCalendarRef `xml:"ServiceCalendarRef,omitempty" json:"ServiceCalendarRef,omitempty"`
	AlternativeTextRef *AlternativeTextRef `xml:"AlternativeTextRef,omitempty" json:"AlternativeTextRef,omitempty"`
	AvailabilityConditionRef *AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	ValidityRuleParameterRef *ValidityRuleParameterRef `xml:"ValidityRuleParameterRef,omitempty" json:"ValidityRuleParameterRef,omitempty"`
	ValidityTriggerRef *ValidityTriggerRef `xml:"ValidityTriggerRef,omitempty" json:"ValidityTriggerRef,omitempty"`
	ValidityConditionRef *ValidityConditionRef `xml:"ValidityConditionRef,omitempty" json:"ValidityConditionRef,omitempty"`
	ResponsibilityRoleRef *ResponsibilityRoleRef `xml:"ResponsibilityRoleRef,omitempty" json:"ResponsibilityRoleRef,omitempty"`
	ControlCentreRef *ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	OrganisationalUnitRef *OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	DepartmentRef *DepartmentRef `xml:"DepartmentRef,omitempty" json:"DepartmentRef,omitempty"`
	OrganisationPartRef *OrganisationPartRef `xml:"OrganisationPartRef,omitempty" json:"OrganisationPartRef,omitempty"`
	AllAuthoritiesRef *AllAuthoritiesRef `xml:"AllAuthoritiesRef,omitempty" json:"AllAuthoritiesRef,omitempty"`
	AllOperatorsRef *AllOperatorsRef `xml:"AllOperatorsRef,omitempty" json:"AllOperatorsRef,omitempty"`
	AllPublicTransportOrganisationsRef *AllPublicTransportOrganisationsRef `xml:"AllPublicTransportOrganisationsRef,omitempty" json:"AllPublicTransportOrganisationsRef,omitempty"`
	AllTransportOrganisationsRef *AllTransportOrganisationsRef `xml:"AllTransportOrganisationsRef,omitempty" json:"AllTransportOrganisationsRef,omitempty"`
	AllOrganisationsRef *AllOrganisationsRef `xml:"AllOrganisationsRef,omitempty" json:"AllOrganisationsRef,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	ResponsibilitySetRef *ResponsibilitySetRef `xml:"ResponsibilitySetRef,omitempty" json:"ResponsibilitySetRef,omitempty"`
	DestinationDisplayVariantRef *DestinationDisplayVariantRef `xml:"DestinationDisplayVariantRef,omitempty" json:"DestinationDisplayVariantRef,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	AllowedLineDirectionRef *AllowedLineDirectionRef `xml:"AllowedLineDirectionRef,omitempty" json:"AllowedLineDirectionRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	GroupOfCustomerPurchasePackagesRef *GroupOfCustomerPurchasePackagesRef `xml:"GroupOfCustomerPurchasePackagesRef,omitempty" json:"GroupOfCustomerPurchasePackagesRef,omitempty"`
	PoolOfVehiclesRef *PoolOfVehiclesRef `xml:"PoolOfVehiclesRef,omitempty" json:"PoolOfVehiclesRef,omitempty"`
	GroupOfSalesOfferPackagesRef *GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
	GroupOfDistanceMatrixElementsRef *GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfDistributionChannelsRef *GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	GroupOfSingleJourneysRef *GroupOfSingleJourneysRef `xml:"GroupOfSingleJourneysRef,omitempty" json:"GroupOfSingleJourneysRef,omitempty"`
	StandardFareTableRef *StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef *FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	PriceGroupRef *PriceGroupRef `xml:"PriceGroupRef,omitempty" json:"PriceGroupRef,omitempty"`
	RhythmicalJourneyGroupRef *RhythmicalJourneyGroupRef `xml:"RhythmicalJourneyGroupRef,omitempty" json:"RhythmicalJourneyGroupRef,omitempty"`
	HeadwayJourneyGroupRef *HeadwayJourneyGroupRef `xml:"HeadwayJourneyGroupRef,omitempty" json:"HeadwayJourneyGroupRef,omitempty"`
	JourneyFrequencyGroupRef *JourneyFrequencyGroupRef `xml:"JourneyFrequencyGroupRef,omitempty" json:"JourneyFrequencyGroupRef,omitempty"`
	GroupOfServicesRef *GroupOfServicesRef `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	GroupOfStopPlacesRef *GroupOfStopPlacesRef `xml:"GroupOfStopPlacesRef,omitempty" json:"GroupOfStopPlacesRef,omitempty"`
	PointOfInterestHierarchyRef *PointOfInterestHierarchyRef `xml:"PointOfInterestHierarchyRef,omitempty" json:"PointOfInterestHierarchyRef,omitempty"`
	GroupOfTimingLinksRef *GroupOfTimingLinksRef `xml:"GroupOfTimingLinksRef,omitempty" json:"GroupOfTimingLinksRef,omitempty"`
	FleetRef *FleetRef `xml:"FleetRef,omitempty" json:"FleetRef,omitempty"`
	GroupOfOperatorsRef *GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	GroupOfPlacesRef *GroupOfPlacesRef `xml:"GroupOfPlacesRef,omitempty" json:"GroupOfPlacesRef,omitempty"`
	ParentSectionRef *ParentSectionRef `xml:"ParentSectionRef,omitempty" json:"ParentSectionRef,omitempty"`
	ParentCommonSectionRef *ParentCommonSectionRef `xml:"ParentCommonSectionRef,omitempty" json:"ParentCommonSectionRef,omitempty"`
	CommonSectionRef *CommonSectionRef `xml:"CommonSectionRef,omitempty" json:"CommonSectionRef,omitempty"`
	LineSectionRef *LineSectionRef `xml:"LineSectionRef,omitempty" json:"LineSectionRef,omitempty"`
	FareSectionRef *FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	GeneralSectionRef *GeneralSectionRef `xml:"GeneralSectionRef,omitempty" json:"GeneralSectionRef,omitempty"`
	SectionRef *SectionRef `xml:"SectionRef,omitempty" json:"SectionRef,omitempty"`
	GroupOfTariffZonesRef *GroupOfTariffZonesRef `xml:"GroupOfTariffZonesRef,omitempty" json:"GroupOfTariffZonesRef,omitempty"`
	LogRef *LogRef `xml:"LogRef,omitempty" json:"LogRef,omitempty"`
	GroupOfTimebandsRef *GroupOfTimebandsRef `xml:"GroupOfTimebandsRef,omitempty" json:"GroupOfTimebandsRef,omitempty"`
	PlaceRef *PlaceRef `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
	MobilityServiceConstraintZoneRef *MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	StopAreaRef *StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TransportAdministrativeZoneRef *TransportAdministrativeZoneRef `xml:"TransportAdministrativeZoneRef,omitempty" json:"TransportAdministrativeZoneRef,omitempty"`
	AccessZoneRef *AccessZoneRef `xml:"AccessZoneRef,omitempty" json:"AccessZoneRef,omitempty"`
	AdministrativeZoneRef *AdministrativeZoneRef `xml:"AdministrativeZoneRef,omitempty" json:"AdministrativeZoneRef,omitempty"`
	FareZoneRef *FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	TariffZoneRef *TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	ZoneRef *ZoneRef `xml:"ZoneRef,omitempty" json:"ZoneRef,omitempty"`
	LayerRef *LayerRef `xml:"LayerRef,omitempty" json:"LayerRef,omitempty"`
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef *GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	GeneralGroupOfEntitiesRef *GeneralGroupOfEntitiesRef `xml:"GeneralGroupOfEntitiesRef,omitempty" json:"GeneralGroupOfEntitiesRef,omitempty"`
	MobilityJourneyFrameRef *MobilityJourneyFrameRef `xml:"MobilityJourneyFrameRef,omitempty" json:"MobilityJourneyFrameRef,omitempty"`
	MobilityServiceFrameRef *MobilityServiceFrameRef `xml:"MobilityServiceFrameRef,omitempty" json:"MobilityServiceFrameRef,omitempty"`
	SalesTransactionFrameRef *SalesTransactionFrameRef `xml:"SalesTransactionFrameRef,omitempty" json:"SalesTransactionFrameRef,omitempty"`
	FareFrameRef *FareFrameRef `xml:"FareFrameRef,omitempty" json:"FareFrameRef,omitempty"`
	ServiceFrameRef *ServiceFrameRef `xml:"ServiceFrameRef,omitempty" json:"ServiceFrameRef,omitempty"`
	DriverScheduleFrameRef *DriverScheduleFrameRef `xml:"DriverScheduleFrameRef,omitempty" json:"DriverScheduleFrameRef,omitempty"`
	VehicleScheduleFrameRef *VehicleScheduleFrameRef `xml:"VehicleScheduleFrameRef,omitempty" json:"VehicleScheduleFrameRef,omitempty"`
	TimetableFrameRef *TimetableFrameRef `xml:"TimetableFrameRef,omitempty" json:"TimetableFrameRef,omitempty"`
	SiteFrameRef *SiteFrameRef `xml:"SiteFrameRef,omitempty" json:"SiteFrameRef,omitempty"`
	InfrastructureFrameRef *InfrastructureFrameRef `xml:"InfrastructureFrameRef,omitempty" json:"InfrastructureFrameRef,omitempty"`
	GeneralFrameRef *GeneralFrameRef `xml:"GeneralFrameRef,omitempty" json:"GeneralFrameRef,omitempty"`
	ResourceFrameRef *ResourceFrameRef `xml:"ResourceFrameRef,omitempty" json:"ResourceFrameRef,omitempty"`
	ServiceCalendarFrameRef *ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	CompositeFrameRef *CompositeFrameRef `xml:"CompositeFrameRef,omitempty" json:"CompositeFrameRef,omitempty"`
	ParkingBayConditionRef *ParkingBayConditionRef `xml:"ParkingBayConditionRef,omitempty" json:"ParkingBayConditionRef,omitempty"`
	RentalAvailabilityRef *RentalAvailabilityRef `xml:"RentalAvailabilityRef,omitempty" json:"RentalAvailabilityRef,omitempty"`
	ParkingBayStatusRef *ParkingBayStatusRef `xml:"ParkingBayStatusRef,omitempty" json:"ParkingBayStatusRef,omitempty"`
	TypeOfMediumAccessDeviceRef *TypeOfMediumAccessDeviceRef `xml:"TypeOfMediumAccessDeviceRef,omitempty" json:"TypeOfMediumAccessDeviceRef,omitempty"`
	TypeOfProofRef *TypeOfProofRef `xml:"TypeOfProofRef,omitempty" json:"TypeOfProofRef,omitempty"`
	DistributionChannelRef *DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	ChargingMomentRef *ChargingMomentRef `xml:"ChargingMomentRef,omitempty" json:"ChargingMomentRef,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	PurposeOfJourneyPartitionRef *PurposeOfJourneyPartitionRef `xml:"PurposeOfJourneyPartitionRef,omitempty" json:"PurposeOfJourneyPartitionRef,omitempty"`
	TimingAlgorithmTypeRef *TimingAlgorithmTypeRef `xml:"TimingAlgorithmTypeRef,omitempty" json:"TimingAlgorithmTypeRef,omitempty"`
	TypeOfParkingRef *TypeOfParkingRef `xml:"TypeOfParkingRef,omitempty" json:"TypeOfParkingRef,omitempty"`
	PointOfInterestClassificationRef *PointOfInterestClassificationRef `xml:"PointOfInterestClassificationRef,omitempty" json:"PointOfInterestClassificationRef,omitempty"`
	TypeOfActivationRef *TypeOfActivationRef `xml:"TypeOfActivationRef,omitempty" json:"TypeOfActivationRef,omitempty"`
	TypeOfFleetRef *TypeOfFleetRef `xml:"TypeOfFleetRef,omitempty" json:"TypeOfFleetRef,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	TypeOfDriverPermitRef *TypeOfDriverPermitRef `xml:"TypeOfDriverPermitRef,omitempty" json:"TypeOfDriverPermitRef,omitempty"`
	AcceptedDriverPermitRef *AcceptedDriverPermitRef `xml:"AcceptedDriverPermitRef,omitempty" json:"AcceptedDriverPermitRef,omitempty"`
	PurposeOfEquipmentProfileRef *PurposeOfEquipmentProfileRef `xml:"PurposeOfEquipmentProfileRef,omitempty" json:"PurposeOfEquipmentProfileRef,omitempty"`
	TypeOfProductCategoryRef *TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfPaymentMethodRef *TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	TypeOfOperationRef *TypeOfOperationRef `xml:"TypeOfOperationRef,omitempty" json:"TypeOfOperationRef,omitempty"`
	TypeOfCodespaceAssignmentRef *TypeOfCodespaceAssignmentRef `xml:"TypeOfCodespaceAssignmentRef,omitempty" json:"TypeOfCodespaceAssignmentRef,omitempty"`
	BrandingRef *BrandingRef `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	TypeOfResponsibilityRoleRef *TypeOfResponsibilityRoleRef `xml:"TypeOfResponsibilityRoleRef,omitempty" json:"TypeOfResponsibilityRoleRef,omitempty"`
	PurposeOfGroupingRef *PurposeOfGroupingRef `xml:"PurposeOfGroupingRef,omitempty" json:"PurposeOfGroupingRef,omitempty"`
	TypeOfRetailDeviceRef *TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef,omitempty" json:"TypeOfRetailDeviceRef,omitempty"`
	CustomerAccountStatusRef *CustomerAccountStatusRef `xml:"CustomerAccountStatusRef,omitempty" json:"CustomerAccountStatusRef,omitempty"`
	TypeOfCustomerAccountRef *TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef,omitempty" json:"TypeOfCustomerAccountRef,omitempty"`
	TypeOfFareContractEntryRef *TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef,omitempty" json:"TypeOfFareContractEntryRef,omitempty"`
	TypeOfFareContractRef *TypeOfFareContractRef `xml:"TypeOfFareContractRef,omitempty" json:"TypeOfFareContractRef,omitempty"`
	TypeOfAccessRightAssignmentRef *TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef,omitempty" json:"TypeOfAccessRightAssignmentRef,omitempty"`
	TypeOfSalesOfferPackageRef *TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	TypeOfFareStructureElementRef *TypeOfFareStructureElementRef `xml:"TypeOfFareStructureElementRef,omitempty" json:"TypeOfFareStructureElementRef,omitempty"`
	TypeOfTariffRef *TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	AllDistributionChannelsRef *AllDistributionChannelsRef `xml:"AllDistributionChannelsRef,omitempty" json:"AllDistributionChannelsRef,omitempty"`
	TypeOfMachineReadabilityRef *TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef,omitempty" json:"TypeOfMachineReadabilityRef,omitempty"`
	TypeOfTravelDocumentRef *TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	TypeOfMobilityServiceRef *TypeOfMobilityServiceRef `xml:"TypeOfMobilityServiceRef,omitempty" json:"TypeOfMobilityServiceRef,omitempty"`
	TypeOfFareProductRef *TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	TypeOfFareStructureFactorRef *TypeOfFareStructureFactorRef `xml:"TypeOfFareStructureFactorRef,omitempty" json:"TypeOfFareStructureFactorRef,omitempty"`
	TypeOfPricingRuleRef *TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef,omitempty" json:"TypeOfPricingRuleRef,omitempty"`
	TypeOfFlexibleServiceRef *TypeOfFlexibleServiceRef `xml:"TypeOfFlexibleServiceRef,omitempty" json:"TypeOfFlexibleServiceRef,omitempty"`
	TypeOfPassengerInformationEquipmentRef *TypeOfPassengerInformationEquipmentRef `xml:"TypeOfPassengerInformationEquipmentRef,omitempty" json:"TypeOfPassengerInformationEquipmentRef,omitempty"`
	TypeOfTimeDemandTypeRef *TypeOfTimeDemandTypeRef `xml:"TypeOfTimeDemandTypeRef,omitempty" json:"TypeOfTimeDemandTypeRef,omitempty"`
	TypeOfJourneyPatternRef *TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	TypeOfSecurityListRef *TypeOfSecurityListRef `xml:"TypeOfSecurityListRef,omitempty" json:"TypeOfSecurityListRef,omitempty"`
	TypeOfPlugRef *TypeOfPlugRef `xml:"TypeOfPlugRef,omitempty" json:"TypeOfPlugRef,omitempty"`
	TypeOfBatteryChemistryRef *TypeOfBatteryChemistryRef `xml:"TypeOfBatteryChemistryRef,omitempty" json:"TypeOfBatteryChemistryRef,omitempty"`
	TypeOfServiceFeatureRef *TypeOfServiceFeatureRef `xml:"TypeOfServiceFeatureRef,omitempty" json:"TypeOfServiceFeatureRef,omitempty"`
	TypeOfDeliveryVariantRef *TypeOfDeliveryVariantRef `xml:"TypeOfDeliveryVariantRef,omitempty" json:"TypeOfDeliveryVariantRef,omitempty"`
	TypeOfNoticeRef *TypeOfNoticeRef `xml:"TypeOfNoticeRef,omitempty" json:"TypeOfNoticeRef,omitempty"`
	TypeOfCongestionRef *TypeOfCongestionRef `xml:"TypeOfCongestionRef,omitempty" json:"TypeOfCongestionRef,omitempty"`
	TypeOfServiceRef *TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	TypeOfFacilityRef *TypeOfFacilityRef `xml:"TypeOfFacilityRef,omitempty" json:"TypeOfFacilityRef,omitempty"`
	TypeOfModeOfOperationRef *TypeOfModeOfOperationRef `xml:"TypeOfModeOfOperationRef,omitempty" json:"TypeOfModeOfOperationRef,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	TypeOfEquipmentRef *TypeOfEquipmentRef `xml:"TypeOfEquipmentRef,omitempty" json:"TypeOfEquipmentRef,omitempty"`
	TypeOfProjectionRef *TypeOfProjectionRef `xml:"TypeOfProjectionRef,omitempty" json:"TypeOfProjectionRef,omitempty"`
	TypeOfFeatureRef *TypeOfFeatureRef `xml:"TypeOfFeatureRef,omitempty" json:"TypeOfFeatureRef,omitempty"`
	TypeOfLinkSequenceRef *TypeOfLinkSequenceRef `xml:"TypeOfLinkSequenceRef,omitempty" json:"TypeOfLinkSequenceRef,omitempty"`
	TypeOfOrganisationPartRef *TypeOfOrganisationPartRef `xml:"TypeOfOrganisationPartRef,omitempty" json:"TypeOfOrganisationPartRef,omitempty"`
	TypeOfOrganisationRef *TypeOfOrganisationRef `xml:"TypeOfOrganisationRef,omitempty" json:"TypeOfOrganisationRef,omitempty"`
	TypeOfPlaceRef *TypeOfPlaceRef `xml:"TypeOfPlaceRef,omitempty" json:"TypeOfPlaceRef,omitempty"`
	TypeOfTransferRef *TypeOfTransferRef `xml:"TypeOfTransferRef,omitempty" json:"TypeOfTransferRef,omitempty"`
	TypeOfZoneRef *TypeOfZoneRef `xml:"TypeOfZoneRef,omitempty" json:"TypeOfZoneRef,omitempty"`
	TypeOfLinkRef *TypeOfLinkRef `xml:"TypeOfLinkRef,omitempty" json:"TypeOfLinkRef,omitempty"`
	TypeOfPointRef *TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
	TypeOfLineRef *TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
	TypeOfValidityRef *TypeOfValidityRef `xml:"TypeOfValidityRef,omitempty" json:"TypeOfValidityRef,omitempty"`
	TypeOfFrameRef *TypeOfFrameRef `xml:"TypeOfFrameRef,omitempty" json:"TypeOfFrameRef,omitempty"`
	DataSourceRef *DataSourceRef `xml:"DataSourceRef,omitempty" json:"DataSourceRef,omitempty"`
	VersionRef *VersionRef `xml:"VersionRef,omitempty" json:"VersionRef,omitempty"`
	VersionOfObjectRef *VersionOfObjectRef `xml:"VersionOfObjectRef,omitempty" json:"VersionOfObjectRef,omitempty"`
}

// GeneralFrameRef represents the GeneralFrameRef element
// Reference to a GENERAL FRAME.
type GeneralFrameRef struct {
	GeneralFrameRefStructure
}

// GeneralFrame represents the GeneralFrame element
// A General purpose frame that can be used to exchange any NeTEx element. Does not impose any structure.
type GeneralFrame struct {
	GeneralVersionFrameStructure
}

// GeneralFrameMemberRef represents the GeneralFrameMemberRef element
// Reference to a GENERAL FRAME MEMBER.
type GeneralFrameMemberRef struct {
	GeneralFrameMemberRefStructure
}

// GeneralFrameMember represents the GeneralFrameMember element
// An association of an ENTITY in a GENERAL FRAME.
type GeneralFrameMember struct {
	GeneralFrameMemberStructure
}

// ActivatedEquipmentRefStructure represents the ActivatedEquipmentRefStructure element
// Type for a reference to an ACTIVATED EQUIPMENT.
type ActivatedEquipmentRefStructure struct {
	EquipmentRefStructure
}

// ActivationPointRefStructure represents the ActivationPointRefStructure element
// Type for a reference to an ACTIVATION POINT.
type ActivationPointRefStructure struct {
	PointRefStructure
}

// BeaconPointRefStructure represents the BeaconPointRefStructure element
// Type for a reference to a BEACON POINT.
type BeaconPointRefStructure struct {
	ActivationPointRefStructure
}

// TrafficControlPointRefStructure represents the TrafficControlPointRefStructure element
// Type for a reference to a TRAFFIC CONTROL POINT.
type TrafficControlPointRefStructure struct {
	PointRefStructure
}

// ActivationLinkRefStructure represents the ActivationLinkRefStructure element
// Type for a reference to an ACTIVATION LINK.
type ActivationLinkRefStructure struct {
	LinkRefStructure
}

// ActivationLinkRefByValueStructure represents the ActivationLinkRefByValueStructure element
// Type for a reference to a ACTIVATION LINK BY VALUE.
type ActivationLinkRefByValueStructure struct {
	LinkRefByValueStructure
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
}

// ActivationAssignmentRefStructure represents the ActivationAssignmentRefStructure element
// Type for a reference to an ACTIVATION ASSIGNMENT.
type ActivationAssignmentRefStructure struct {
	AssignmentRefStructure
}

// ActivationTypeRefsRelStructure represents the activationTypeRefs_RelStructure element
// Type for a list of TYPEs OF ACTIVATION.
type ActivationTypeRefsRelStructure struct {
	OneToManyRelationshipStructure
	// Reference to a TYPE OF ACTIVATION.
	TypeOfActivationRef []TypeOfActivationRef `xml:"TypeOfActivationRef" json:"TypeOfActivationRef"`
}

// TypeOfActivationRefStructure represents the TypeOfActivationRefStructure element
// Type for a reference to a TYPE OF ACTIVATION.
type TypeOfActivationRefStructure struct {
	TypeOfValueRefStructure
}

// ActivatedEquipmentRef represents the ActivatedEquipmentRef element
// Reference to an ACTIVATED EQUIPMENT.
type ActivatedEquipmentRef struct {
	ActivatedEquipmentRefStructure
}

// ActivationPointRef represents the ActivationPointRef element
// Reference to an ACTIVATION POINT.
type ActivationPointRef struct {
	ActivationPointRefStructure
}

// BeaconPointRef represents the BeaconPointRef element
// Reference to a BEACON POINT.
type BeaconPointRef struct {
	BeaconPointRefStructure
}

// TrafficControlPointRef represents the TrafficControlPointRef element
// Reference to a TRAFFIC CONTROL POINT.
type TrafficControlPointRef struct {
	TrafficControlPointRefStructure
}

// ActivationLinkRef represents the ActivationLinkRef element
// Reference to an ACTIVATION LINK.
type ActivationLinkRef struct {
	ActivationLinkRefStructure
}

// ActivationLinkRefByValue represents the ActivationLinkRefByValue element
// Reference to a ACTIVATION LINK BY VALUE.
type ActivationLinkRefByValue struct {
	ActivationLinkRefByValueStructure
}

// ActivationAssignmentRef represents the ActivationAssignmentRef element
// Reference to an ACTIVATION ASSIGNMENT.
type ActivationAssignmentRef struct {
	ActivationAssignmentRefStructure
}

// TypeOfActivationRef represents the TypeOfActivationRef element
// Reference to a TYPE OF ACTIVATION.
type TypeOfActivationRef struct {
	TypeOfActivationRefStructure
}

// TrafficControlPointsInFrameRelStructure represents the trafficControlPointsInFrame_RelStructure element
// Type for containment in frame of TRAFFIC CONTROL POINTs.
type TrafficControlPointsInFrameRelStructure struct {
	ContainmentAggregationStructure
	TrafficControlPoint []TrafficControlPoint `xml:"TrafficControlPoint" json:"TrafficControlPoint"`
}

// ActivationLinksInFrameRelStructure represents the activationLinksInFrame_RelStructure element
// Type for containment in frame of ACTIVATION LINKs.
type ActivationLinksInFrameRelStructure struct {
	ContainmentAggregationStructure
	// A LINK where a control process is activated when a vehicle passes it.  Activation links are directional - there will be separate links for each direction of a route.
	ActivationLink []ActivationLink `xml:"ActivationLink" json:"ActivationLink"`
}

// ActivationPointsInFrameRelStructure represents the activationPointsInFrame_RelStructure element
// Type for containment in frame of ACTIVATION POINTs.
type ActivationPointsInFrameRelStructure struct {
	ContainmentAggregationStructure
	BeaconPoint []BeaconPoint `xml:"BeaconPoint,omitempty" json:"BeaconPoint,omitempty"`
	ActivationPoint []ActivationPoint `xml:"ActivationPoint,omitempty" json:"ActivationPoint,omitempty"`
}

// ActivatedEquipmentsInFrameRelStructure represents the activatedEquipmentsInFrame_RelStructure element
// Type for containment in frame of ACTIVATION EQUIPMENTs.
type ActivatedEquipmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	ActivatedEquipment []ActivatedEquipment `xml:"ActivatedEquipment" json:"ActivatedEquipment"`
}

// ActivatedEquipmentVersionStructure represents the ActivatedEquipment_VersionStructure element
// Type for an ACTIVATED EQUIPMENT.
type ActivatedEquipmentVersionStructure struct {
	EquipmentVersionStructure
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	TypeOfActivationRef *TypeOfActivationRef `xml:"TypeOfActivationRef,omitempty" json:"TypeOfActivationRef,omitempty"`
	// assignments of ACTIVATED EQUIPMENT.
	Assignments *ActivationAssignmentsRelStructure `xml:"assignments,omitempty" json:"assignments,omitempty"`
}

// ActivationPointVersionStructure represents the ActivationPoint_VersionStructure element
// Type for ACTIVATION POINT.
type ActivationPointVersionStructure struct {
	PointVersionStructure
	// Identifier of ACTIVATION POINT.
	ActivationPointNumber *string `xml:"ActivationPointNumber,omitempty" json:"ActivationPointNumber,omitempty"`
	// Short Name of ACTIVATION POINT.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	TypeOfActivationRef *TypeOfActivationRef `xml:"TypeOfActivationRef,omitempty" json:"TypeOfActivationRef,omitempty"`
}

// BeaconPointVersionStructure represents the BeaconPoint_VersionStructure element
// Type for BEACON POINT.
type BeaconPointVersionStructure struct {
	ActivationPointVersionStructure
}

// TrafficControlPointVersionStructure represents the TrafficControlPoint_VersionStructure element
// Type for TRAFFIC CONTROL POINT.
type TrafficControlPointVersionStructure struct {
	PointVersionStructure
}

// ActivationLinkVersionStructure represents the ActivationLink_VersionStructure element
// Type for an ACTIVATION LINK.
type ActivationLinkVersionStructure struct {
	LinkVersionStructure
	TypeOfActivationRef *TypeOfActivationRef `xml:"TypeOfActivationRef,omitempty" json:"TypeOfActivationRef,omitempty"`
	// ACTIVATION POINT from which ACTIVATION LINK starts.
	FromPointRef ActivationPointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// ACTIVATION POINT at which ACTIVATION LINK ends.
	ToPointRef ActivationPointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
}

// ActivationAssignmentsRelStructure represents the activationAssignments_RelStructure element
// Type for a list of ACTIVATION ASSIGNMENTs.
type ActivationAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	ActivationAssignmentRef []ActivationAssignmentRef `xml:"ActivationAssignmentRef,omitempty" json:"ActivationAssignmentRef,omitempty"`
	ActivationAssignment []ActivationAssignment `xml:"ActivationAssignment,omitempty" json:"ActivationAssignment,omitempty"`
}

// ActivationAssignmentVersionStructure represents the ActivationAssignment_VersionStructure element
// Type for an ACTIVATION ASSIGNMENT.
type ActivationAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	// ACTIVATED EQUIPMENT for which this is the assignment - may be omitted if given by context.
	EquipmentRef *ActivatedEquipmentRefStructure `xml:"EquipmentRef,omitempty" json:"EquipmentRef,omitempty"`
	// ACTIVATION LINK for assignment.
	LinkRef *ActivationLinkRefStructure `xml:"LinkRef,omitempty" json:"LinkRef,omitempty"`
	// ACTIVATION POINT for assignment.
	PointRef *ActivationPointRefStructure `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
}

// TypeOfActivationValueStructure represents the TypeOfActivation_ValueStructure element
// Type for a TYPE OF ACTIVATION.
type TypeOfActivationValueStructure struct {
	TypeOfEntityVersionStructure
}

// ActivatedEquipment represents the ActivatedEquipment element
// An EQUIPMENT activated by the passage of a vehicle at an ACTIVATION POINT or on an ACTIVATION LINK.
type ActivatedEquipment struct {
	ActivatedEquipmentVersionStructure
}

// ActivationPoint represents the ActivationPoint element
// A POINT where a control process is activated when a vehicle passes it. EQUIPMENT may be needed for the activation.
type ActivationPoint struct {
	ActivationPointVersionStructure
}

// BeaconPoint represents the BeaconPoint element
// A POINT where a beacon or similar device to support the automatic detection of vehicles passing by is located.
type BeaconPoint struct {
	BeaconPointVersionStructure
}

// TrafficControlPoint represents the TrafficControlPoint element
// A POINT where the traffic flow can be influenced. Examples are: traffic lights (lanterns), barriers.
type TrafficControlPoint struct {
	TrafficControlPointVersionStructure
}

// ActivationLink represents the ActivationLink element
// A LINK where a control process is activated when a vehicle passes it.
type ActivationLink struct {
	ActivationLinkVersionStructure
}

// ActivationAssignment represents the ActivationAssignment element
// An assignment of an ACTIVATION POINT/LINK to an ACTIVATED EQUIPMENT related on its turn to a TRAFFIC CONTROL POINT. The considered ACTIVATION POINT/LINK will be used to influence the control process for that TRAFFIC CONTROL POINT (e.g. to fix priorities as regards the processing of competing requests from different ACTIVATION POINTs/LINKs).
type ActivationAssignment struct {
	ActivationAssignmentVersionStructure
}

// TypeOfActivation represents the TypeOfActivation element
// A classification of real-time processes that are activated when vehicles passes an ACTIVATION POINT or an ACTIVATION LINK.
type TypeOfActivation struct {
	TypeOfActivationValueStructure
}

// InfrastructurePointRefStructure represents the InfrastructurePointRefStructure element
// Type for Reference to an INFRASTRUCTURE POINT.
type InfrastructurePointRefStructure struct {
	PointRefStructure
}

// RailwayPointRefStructure represents the RailwayPointRefStructure element
// Type for Reference to a RAILWAY POINT.
type RailwayPointRefStructure struct {
	InfrastructurePointRefStructure
}

// RoadPointRefStructure represents the RoadPointRefStructure element
// Type for Reference to a ROAD POINT.
type RoadPointRefStructure struct {
	InfrastructurePointRefStructure
}

// WirePointRefStructure represents the WirePointRefStructure element
// Type for Reference to a WIRE POINT.
type WirePointRefStructure struct {
	InfrastructurePointRefStructure
}

// InfrastructureLinkRefStructure represents the InfrastructureLinkRefStructure element
// Type for Reference to an INFRASTRUCTURE POINT.
type InfrastructureLinkRefStructure struct {
	LinkRefStructure
}

// RailwayLinkRefStructure represents the RailwayLinkRefStructure element
// Type for Reference to a RAILWAY LINK.
type RailwayLinkRefStructure struct {
	InfrastructureLinkRefStructure
}

// RailwayLinkRefByValueStructure represents the RailwayLinkRefByValueStructure element
// Type for a reference to a RAILWAY LINK BY VALUE.
type RailwayLinkRefByValueStructure struct {
	LinkRefByValueStructure
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
}

// RoadLinkRefStructure represents the RoadLinkRefStructure element
// Type for Reference to a ROAD LINK.
type RoadLinkRefStructure struct {
	InfrastructureLinkRefStructure
}

// RoadLinkRefByValueStructure represents the RoadLinkRefByValueStructure element
// Type for a reference to a ROAD LINK BY VALUE.
type RoadLinkRefByValueStructure struct {
	LinkRefByValueStructure
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
}

// WireLinkRefStructure represents the WireLinkRefStructure element
// Type for Reference to a WIRE LINK.
type WireLinkRefStructure struct {
	InfrastructureLinkRefStructure
}

// WireLinkRefByValueStructure represents the WireLinkRefByValueStructure element
// Type for a reference to a WIRE LINK BY VALUE.
type WireLinkRefByValueStructure struct {
	LinkRefByValueStructure
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
}

// InfrastructurePointRef represents the InfrastructurePointRef element
// Reference to an INFRASTRUCTURE POINT.
type InfrastructurePointRef struct {
	InfrastructurePointRefStructure
}

// RailwayPointRef represents the RailwayPointRef element
// Reference to a RAILWAY POINT.
type RailwayPointRef struct {
	RailwayPointRefStructure
}

// RoadPointRef represents the RoadPointRef element
// Reference to a ROAD POINT.
type RoadPointRef struct {
	RoadPointRefStructure
}

// WirePointRef represents the WirePointRef element
// Reference to a WIRE POINT.
type WirePointRef struct {
	WirePointRefStructure
}

// InfrastructureLinkRef represents the InfrastructureLinkRef element
// Reference to an INFRASTRUCTURE LINK.
type InfrastructureLinkRef struct {
	InfrastructureLinkRefStructure
}

// RailwayLinkRef represents the RailwayLinkRef element
// Reference to a RAILWAY LINK.
type RailwayLinkRef struct {
	RailwayLinkRefStructure
}

// RailwayLinkRefByValue represents the RailwayLinkRefByValue element
// Reference to a RAILWAY LINK BY VALUE.
type RailwayLinkRefByValue struct {
	RailwayLinkRefByValueStructure
}

// RoadLinkRef represents the RoadLinkRef element
// Reference to a ROAD LINK.
type RoadLinkRef struct {
	RoadLinkRefStructure
}

// RoadLinkRefByValue represents the RoadLinkRefByValue element
// Reference to a ROAD LINK BY VALUE.
type RoadLinkRefByValue struct {
	RoadLinkRefByValueStructure
}

// WireLinkRef represents the WireLinkRef element
// Reference to a WIRE LINK.
type WireLinkRef struct {
	WireLinkRefStructure
}

// WireLinkRefByValue represents the WireLinkRefByValue element
// Reference to a WIRE LINK BY VALUE.
type WireLinkRefByValue struct {
	WireLinkRefByValueStructure
}

// InfrastructureJunctionsInFrameRelStructure represents the infrastructureJunctionsInFrame_RelStructure element
// Type for containment in frame of INFRASTRUCTURE POINTs.
type InfrastructureJunctionsInFrameRelStructure struct {
	ContainmentAggregationStructure
	RailwayJunction []RailwayJunction `xml:"RailwayJunction,omitempty" json:"RailwayJunction,omitempty"`
	RoadJunction []RoadJunction `xml:"RoadJunction,omitempty" json:"RoadJunction,omitempty"`
	WireJunction []WireJunction `xml:"WireJunction,omitempty" json:"WireJunction,omitempty"`
}

// InfrastructureElementsInFrameRelStructure represents the infrastructureElementsInFrame_RelStructure element
// Type for containment in frame of INFRASTRUCTURE LINKs.
type InfrastructureElementsInFrameRelStructure struct {
	ContainmentAggregationStructure
	RailwayElement []RailwayElement `xml:"RailwayElement,omitempty" json:"RailwayElement,omitempty"`
	RoadElement []RoadElement `xml:"RoadElement,omitempty" json:"RoadElement,omitempty"`
	WireElement []WireElement `xml:"WireElement,omitempty" json:"WireElement,omitempty"`
}

// InfrastructurePointVersionStructure represents the InfrastructurePoint_VersionStructure element
// Type for INFRASTRUCTURE POINT.
type InfrastructurePointVersionStructure struct {
	PointVersionStructure
}

// RailwayJunctionVersionStructure represents the RailwayJunction_VersionStructure element
// Type for RAILWAY JUNCTION.
type RailwayJunctionVersionStructure struct {
	InfrastructurePointVersionStructure
}

// RoadJunctionVersionStructure represents the RoadJunction_VersionStructure element
// Type for ROAD JUNCTION.
type RoadJunctionVersionStructure struct {
	InfrastructurePointVersionStructure
}

// WireJunctionVersionStructure represents the WireJunction_VersionStructure element
// Type for WIRE JUNCTION.
type WireJunctionVersionStructure struct {
	InfrastructurePointVersionStructure
}

// InfrastructureLinkVersionStructure represents the InfrastructureLink_VersionStructure element
// Type for INFRASTRUCTURE LINK.
type InfrastructureLinkVersionStructure struct {
	LinkVersionStructure
}

// RailwayElementVersionStructure represents the RailwayElement_VersionStructure element
// Type for RAILWAY ELEMENT.
type RailwayElementVersionStructure struct {
	InfrastructureLinkVersionStructure
	// Identifier of POINT from which Link starts.
	FromPointRef RailwayPointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// Identifier of POINT at which Link ends.
	ToPointRef RailwayPointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
}

// RoadElementVersionStructure represents the RoadElement_VersionStructure element
// Type for ROAD ELEMENT.
type RoadElementVersionStructure struct {
	InfrastructureLinkVersionStructure
	// Identifier of POINT from which Link starts.
	FromPointRef RoadPointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// Identifier of POINT at which Link ends.
	ToPointRef RoadPointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
}

// WireElementVersionStructure represents the WireElement_VersionStructure element
// Type for WIRE ELEMENT.
type WireElementVersionStructure struct {
	InfrastructureLinkVersionStructure
	// Identifier of POINT from which Link starts.
	FromPointRef WirePointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// Identifier of POINT at which Link ends.
	ToPointRef WirePointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
}

// InfrastructurePoint represents the InfrastructurePoint element
// A supertype including all POINTs of the physical network (e.g. RAILWAY JUNCTION).
type InfrastructurePoint struct {
	InfrastructurePointVersionStructure
}

// RailwayJunction represents the RailwayJunction element
// A type of INFRASTRUCTURE POINT used to describe a RAILWAY network.
type RailwayJunction struct {
	RailwayJunctionVersionStructure
}

// RoadJunction represents the RoadJunction element
// A type of INFRASTRUCTURE POINT used to describe a ROAD network.
type RoadJunction struct {
	RoadJunctionVersionStructure
}

// WireJunction represents the WireJunction element
// A type of INFRASTRUCTURE POINT used to describe a WIRE network.
type WireJunction struct {
	WireJunctionVersionStructure
}

// RailwayElement represents the RailwayElement element
// A type of INFRASTRUCTURE LINK used to describe a RAILWAY network.
type RailwayElement struct {
	RailwayElementVersionStructure
}

// RoadElement represents the RoadElement element
// A type of INFRASTRUCTURE LINK used to describe a ROAD network.
type RoadElement struct {
	RoadElementVersionStructure
}

// WireElement represents the WireElement element
// A type of INFRASTRUCTURE LINK used to describe a WIRE network.
type WireElement struct {
	WireElementVersionStructure
}

// NetworkRestrictionRefStructure represents the NetworkRestrictionRefStructure element
// Type for Reference to a NETWORK RESTRICTION.
type NetworkRestrictionRefStructure struct {
	AssignmentRefStructure
}

// VehicleTypeAtPointRefStructure represents the VehicleTypeAtPointRefStructure element
// Type for Reference to  a VEHICLE TYPE AT POINT.
type VehicleTypeAtPointRefStructure struct {
	NetworkRestrictionRefStructure
}

// InfrastructureLinkRestrictionRefStructure represents the InfrastructureLinkRestrictionRefStructure element
// Type for Reference to a an INFRASTRUCTURE LINK RESTRICTION.
type InfrastructureLinkRestrictionRefStructure struct {
	NetworkRestrictionRefStructure
}

// RestrictedManoeuvreRefStructure represents the RestrictedManoeuvreRefStructure element
// Type for Reference to a MEETING RESTRICTION.
type RestrictedManoeuvreRefStructure struct {
	InfrastructureLinkRestrictionRefStructure
}

// MeetingRestrictionRefStructure represents the MeetingRestrictionRefStructure element
// Type for Reference to a MEETING RESTRICTION.
type MeetingRestrictionRefStructure struct {
	InfrastructureLinkRestrictionRefStructure
}

// OvertakingPossibilityRefStructure represents the OvertakingPossibilityRefStructure element
// Type for Reference to  an  OVERTAKING POSSIBILITY.
type OvertakingPossibilityRefStructure struct {
	NetworkRestrictionRefStructure
}

// NetworkRestrictionRef represents the NetworkRestrictionRef element
// Reference to a NETWORK RESTRICTION.
type NetworkRestrictionRef struct {
	NetworkRestrictionRefStructure
}

// VehicleTypeAtPointRef represents the VehicleTypeAtPointRef element
// Reference to an a VEHICLE TYPE AT POINT.
type VehicleTypeAtPointRef struct {
	VehicleTypeAtPointRefStructure
}

// InfrastructureLinkRestrictionRef represents the InfrastructureLinkRestrictionRef element
// Reference to an INFRASTRUCTURE LINK RESTRICTION.
type InfrastructureLinkRestrictionRef struct {
	InfrastructureLinkRestrictionRefStructure
}

// RestrictedManoeuvreRef represents the RestrictedManoeuvreRef element
// Reference to a MEETING RESTRICTION.
type RestrictedManoeuvreRef struct {
	RestrictedManoeuvreRefStructure
}

// MeetingRestrictionRef represents the MeetingRestrictionRef element
// Reference to a MEETING RESTRICTION.
type MeetingRestrictionRef struct {
	MeetingRestrictionRefStructure
}

// OvertakingPossibilityRef represents the OvertakingPossibilityRef element
// Reference to an  OVERTAKING POSSIBILITY.
type OvertakingPossibilityRef struct {
	OvertakingPossibilityRefStructure
}

// NetworkRestrictionsInFrameRelStructure represents the networkRestrictionsInFrame_RelStructure element
// Type for containment in frame of NETWORK RESTRICTION.
type NetworkRestrictionsInFrameRelStructure struct {
	ContainmentAggregationStructure
	OvertakingPossibility []OvertakingPossibility `xml:"OvertakingPossibility,omitempty" json:"OvertakingPossibility,omitempty"`
	MeetingRestriction []MeetingRestriction `xml:"MeetingRestriction,omitempty" json:"MeetingRestriction,omitempty"`
	RestrictedManoeuvre []RestrictedManoeuvre `xml:"RestrictedManoeuvre,omitempty" json:"RestrictedManoeuvre,omitempty"`
	VehicleTypeAtPoint []VehicleTypeAtPoint `xml:"VehicleTypeAtPoint,omitempty" json:"VehicleTypeAtPoint,omitempty"`
}

// NetworkRestrictionVersionStructure represents the NetworkRestriction_VersionStructure element
// Type for a NETWORK RESTRICTION.
type NetworkRestrictionVersionStructure struct {
	AssignmentVersionStructure1
	// Whether a NETWORK RESTRICTION is allowed or forbidden. Default is true,, i.e.  this is a restriction..
	Restricted bool `xml:"Restricted" json:"Restricted"`
}

// VehicleTypeAtPointVersionStructure represents the VehicleTypeAtPoint_VersionStructure element
// Type for a VEHICLE TYPE AT POINT.
type VehicleTypeAtPointVersionStructure struct {
	NetworkRestrictionVersionStructure
	// Type of VEHICLE to which NETWORK RESTRICTION applies.
	ForVehicleTypeRef TransportTypeRefStructure `xml:"ForVehicleTypeRef" json:"ForVehicleTypeRef"`
	// Number of vehicles allowed at a point at a given time.
	Capacity *int `xml:"Capacity,omitempty" json:"Capacity,omitempty"`
}

// InfrastructureLinkRestrictionVersionStructure represents the InfrastructureLinkRestriction_VersionStructure element
// Type for a NETWORK LINK RESTRICTION.
type InfrastructureLinkRestrictionVersionStructure struct {
	NetworkRestrictionVersionStructure
	// Restriction applies to movements starting from INFRASTRUCTURE LINK identified by this Reference.
	FromLinkRef LinkRefStructure `xml:"FromLinkRef" json:"FromLinkRef"`
	// Restriction applies to movements ending on INFRASTRUCTURE LINK identified by this reference.
	ToLinkRef LinkRefStructure `xml:"ToLinkRef" json:"ToLinkRef"`
}

// RestrictedManoeuvreVersionStructure represents the RestrictedManoeuvre_VersionStructure element
// Type for a MANOEUVRE.
type RestrictedManoeuvreVersionStructure struct {
	InfrastructureLinkRestrictionVersionStructure
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
}

// MeetingRestrictionVersionStructure represents the MeetingRestriction_VersionStructure element
// Type for MEETING RESTRICTION.
type MeetingRestrictionVersionStructure struct {
	InfrastructureLinkRestrictionVersionStructure
	// Type of vehicle that may use forwards direction of INFRASTRUCTURE LINK. For a meeting restriction this is for the forward sense of the link. For overtaking possibility this is for the overtaking vehicle.
	ForVehicleTypeRef *VehicleTypeRefStructure `xml:"ForVehicleTypeRef,omitempty" json:"ForVehicleTypeRef,omitempty"`
	// Type of vehicle that may use backwards direction of INFRASTRUCTURE LINK. For a meeting restriction this is for the vehicle going in the  reveser sense of the link. For overtaking possibility this is for the vehicle being  overtaken.
	AgainstVehicleTypeRef *TransportTypeRefStructure `xml:"AgainstVehicleTypeRef,omitempty" json:"AgainstVehicleTypeRef,omitempty"`
}

// OvertakingPossibilityVersionStructure represents the OvertakingPossibility_VersionStructure element
// Type for an OVERTAKING POSSIBILITY.
type OvertakingPossibilityVersionStructure struct {
	NetworkRestrictionVersionStructure
	// Width at overtaking point.
	OvertakingWidth *float64 `xml:"OvertakingWidth,omitempty" json:"OvertakingWidth,omitempty"`
	// Identifier of an INFRASTRUCTURE LINK over which two vehicles of the specified VEHICLE TYPE may pass in the  directions of the link.
	OvertakingOnLinkRef LinkRefStructure `xml:"OvertakingOnLinkRef" json:"OvertakingOnLinkRef"`
	// Identifier of a point at which two vehicles of the specified VEHICLE TYPE may overtake or not overtake.
	OvertakingAtPointRef *PointRefStructure `xml:"OvertakingAtPointRef,omitempty" json:"OvertakingAtPointRef,omitempty"`
	// TYPE OF VEHICLE  that may overtake.
	OvertakingVehicleTypeRef *TransportTypeRefStructure `xml:"OvertakingVehicleTypeRef,omitempty" json:"OvertakingVehicleTypeRef,omitempty"`
	// TYPE OF VEHICLE  that may be overtaken.
	OvertakenVehicleTypeRef *TransportTypeRefStructure `xml:"OvertakenVehicleTypeRef,omitempty" json:"OvertakenVehicleTypeRef,omitempty"`
}

// NetworkRestriction represents the NetworkRestriction element
// A constraint on use of a network of INFRASTRUCTURE POINTs and INFRASTUCTURE LINKs.
type NetworkRestriction struct {
	NetworkRestrictionVersionStructure
}

// VehicleTypeAtPoint represents the VehicleTypeAtPoint element
// NETWORK RESTRICTION. specifying whether a vehicle of a specified VEHICLE TYPE may visit a point.
type VehicleTypeAtPoint struct {
	VehicleTypeAtPointVersionStructure
}

// InfrastructureLinkRestriction represents the InfrastructureLinkRestriction element
// A NETWORK RESTRICTION on movement between any two network links.
type InfrastructureLinkRestriction struct {
	InfrastructureLinkRestrictionVersionStructure
}

// RestrictedManoeuvre represents the RestrictedManoeuvre element
// A specification of a move for a certain type of vehicle. It specifies from which INFRASTRUCTURE LINK to which other (adjacent) INFRASTRUCTURE LINK a certain can or cannot VEHICLE TYPE cannot proceed, due to physical restrictions.
type RestrictedManoeuvre struct {
	RestrictedManoeuvreVersionStructure
}

// MeetingRestriction represents the MeetingRestriction element
// A pair of INFRASTRUCTURE LINKs where vehicles of specified VEHICLE TYPEs are not allowed to meet.
type MeetingRestriction struct {
	MeetingRestrictionVersionStructure
}

// OvertakingPossibility represents the OvertakingPossibility element
// NETWORK RESTRICTION specifying a POINT or a LINK where vehicles of specified VEHICLE TYPEs are or are  not allowed to overtake each other.
type OvertakingPossibility struct {
	OvertakingPossibilityVersionStructure
	// Identifier of a point at which two vehicles of the specified VEHICLE TYPE may pass.
	OvertakingAtPointRef PointRefStructure `xml:"OvertakingAtPointRef" json:"OvertakingAtPointRef"`
}

// TimingPatternRefStructure represents the TimingPatternRefStructure element
// Type for a reference to a TIMING PATTERN.
type TimingPatternRefStructure struct {
	LinkSequenceRefStructure
}

// TimingPointRefStructure represents the TimingPointRefStructure element
// Type for reference to a TIMING POINT.
type TimingPointRefStructure struct {
	RoutePointRefStructure
}

// TimingLinkRefsRelStructure represents the timingLinkRefs_RelStructure element
// Type for a list of references to TIMING LINKs.
type TimingLinkRefsRelStructure struct {
	OneToManyRelationshipStructure
	TimingLinkRef []TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	TimingLinkRefByValue []TimingLinkRefByValue `xml:"TimingLinkRefByValue,omitempty" json:"TimingLinkRefByValue,omitempty"`
}

// TimingLinkRefStructure represents the TimingLinkRefStructure element
// Type for a reference to a TIMING LINK.
type TimingLinkRefStructure struct {
	LinkRefStructure
}

// TimingLinkRefByValueStructure represents the TimingLinkRefByValueStructure element
// Type for a reference to a TIMING LINK LINK BY VALUE.
type TimingLinkRefByValueStructure struct {
	LinkRefByValueStructure
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
}

// GroupOfTimingLinksRefStructure represents the GroupOfTimingLinksRefStructure element
// Type for a reference to a GROUP OF TIMING LINKs.
type GroupOfTimingLinksRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// TimingPatternRef represents the TimingPatternRef element
// Reference to a TIMING PATTERN.
type TimingPatternRef struct {
	TimingPatternRefStructure
}

// TimingPointRef represents the TimingPointRef element
// Reference to a TIMING POINT. If given by context does not need to be stated.
type TimingPointRef struct {
	TimingPointRefStructure
}

// TimingLinkRef represents the TimingLinkRef element
// Reference to a TIMING LINK.
type TimingLinkRef struct {
	TimingLinkRefStructure
}

// TimingLinkRefByValue represents the TimingLinkRefByValue element
// Reference to a TIMING LINK LINK BY VALUE.
type TimingLinkRefByValue struct {
	TimingLinkRefByValueStructure
}

// GroupOfTimingLinksRef represents the GroupOfTimingLinksRef element
// Reference to a GROUP OF TIMING LINKs.
type GroupOfTimingLinksRef struct {
	GroupOfTimingLinksRefStructure
}

// ReliefPointRefStructure represents the ReliefPointRefStructure element
// Type for a reference to a RELIEF POINT.
type ReliefPointRefStructure struct {
	TimingPointRefStructure
}

// ParkingPointRefStructure represents the ParkingPointRefStructure element
// Type for a reference to a PARKING POINT.
type ParkingPointRefStructure struct {
	ReliefPointRefStructure
}

// GaragePointRefStructure represents the GaragePointRefStructure element
// Type for a reference to a GARAGE POINT.
type GaragePointRefStructure struct {
	ParkingPointRefStructure
}

// GarageRefStructure represents the GarageRefStructure element
// Type for a reference to a GARAGE.
type GarageRefStructure struct {
	AddressablePlaceRefStructure
}

// GarageRefsRelStructure represents the garageRefs_RelStructure element
// Type for a list of references to a GARAGE.
type GarageRefsRelStructure struct {
	OneToManyRelationshipStructure
	GarageRef []GarageRef `xml:"GarageRef" json:"GarageRef"`
}

// CrewBaseRefsRelStructure represents the crewBaseRefs_RelStructure element
// Type for a list of CREW BASEs.
type CrewBaseRefsRelStructure struct {
	StrictContainmentAggregationStructure
	CrewBaseRef []CrewBaseRef `xml:"CrewBaseRef" json:"CrewBaseRef"`
}

// CrewBaseRefStructure represents the CrewBaseRefStructure element
// Type for a reference to a CREW BASE.
type CrewBaseRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// ReliefPointRef represents the ReliefPointRef element
// Reference to a RELIEF POINT.
type ReliefPointRef struct {
	ReliefPointRefStructure
}

// ParkingPointRef represents the ParkingPointRef element
// Reference to a PARKING POINT.
type ParkingPointRef struct {
	ParkingPointRefStructure
}

// GaragePointRef represents the GaragePointRef element
// Reference to a GARAGE POINT.
type GaragePointRef struct {
	GaragePointRefStructure
}

// GarageRef represents the GarageRef element
// Reference to a GARAGE.
type GarageRef struct {
	GarageRefStructure
}

// CrewBaseRef represents the CrewBaseRef element
// Reference to a CREW BASE.
type CrewBaseRef struct {
	CrewBaseRefStructure
}

// TimingPointStatusEnumeration represents the TimingPointStatusEnumeration enumeration
// Allowed values for TYPE OF TIMING POINT.
type TimingPointStatusEnumeration string

const (
	// TimingPointStatusEnumerationTimingPointStatusEnumerationTimingPoint represents timingPoint
	TimingPointStatusEnumerationTimingPointStatusEnumerationTimingPoint TimingPointStatusEnumeration = "timingPoint"
	// TimingPointStatusEnumerationTimingPointStatusEnumerationSecondaryTimingPoint represents secondaryTimingPoint
	TimingPointStatusEnumerationTimingPointStatusEnumerationSecondaryTimingPoint TimingPointStatusEnumeration = "secondaryTimingPoint"
	// TimingPointStatusEnumerationTimingPointStatusEnumerationNotTimingPoint represents notTimingPoint
	TimingPointStatusEnumerationTimingPointStatusEnumerationNotTimingPoint TimingPointStatusEnumeration = "notTimingPoint"
)

// JourneyPatternRefsRelStructure represents the journeyPatternRefs_RelStructure element
// Type for a collection of one or more references to a JOURNEY PATTERN.
type JourneyPatternRefsRelStructure struct {
	OneToManyRelationshipStructure
	ServiceJourneyPatternRef []ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef []ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef []DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef []JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
}

// JourneyPatternRefStructure represents the JourneyPatternRefStructure element
// Type for a reference to a JOURNEY PATTERN.
type JourneyPatternRefStructure struct {
	LinkSequenceRefStructure
}

// DeadRunJourneyPatternRefStructure represents the DeadRunJourneyPatternRefStructure element
// Type for a reference to a DEAD RUN JOURNEY PATTERN.
type DeadRunJourneyPatternRefStructure struct {
	JourneyPatternRefStructure
}

// PointInJourneyPatternRefStructure represents the PointInJourneyPatternRefStructure element
// Type for a reference to a POINT IN JOURNEY PATTERN.
type PointInJourneyPatternRefStructure struct {
	PointInSequenceRefStructure
}

// LinkInJourneyPatternRefStructure represents the LinkInJourneyPatternRefStructure element
// Type for a reference to a LINK IN JOURNEY PATTERN.
type LinkInJourneyPatternRefStructure struct {
	LinkInSequenceRefStructure
}

// TypeOfJourneyPatternRefStructure represents the TypeOfJourneyPatternRefStructure element
// Type for a reference to a TYPE OF JOURNEY PATTERN.
type TypeOfJourneyPatternRefStructure struct {
	TypeOfValueRefStructure
}

// TimingPointInJourneyPatternRefStructure represents the TimingPointInJourneyPatternRefStructure element
// Type for reference to a TIMING POINT JOURNEY PATTERN.
type TimingPointInJourneyPatternRefStructure struct {
	PointInJourneyPatternRefStructure
}

// TimingLinkInJourneyPatternRefStructure represents the TimingLinkInJourneyPatternRefStructure element
// Type for reference to a TIMING LINK JOURNEY PATTERN.
type TimingLinkInJourneyPatternRefStructure struct {
	LinkInJourneyPatternRefStructure
}

// JourneyPatternRef represents the JourneyPatternRef element
// Reference to a JOURNEY PATTERN.
type JourneyPatternRef struct {
	JourneyPatternRefStructure
}

// DeadRunJourneyPatternRef represents the DeadRunJourneyPatternRef element
// Reference to a DEAD RUN JOURNEY PATTERN.
type DeadRunJourneyPatternRef struct {
	DeadRunJourneyPatternRefStructure
}

// PointInJourneyPatternRef represents the PointInJourneyPatternRef element
// Reference to a POINT IN JOURNEY PATTERN. If Given by Context does not need to stated.
type PointInJourneyPatternRef struct {
	PointInJourneyPatternRefStructure
}

// LinkInJourneyPatternRef represents the LinkInJourneyPatternRef element
// Reference to a LINK IN JOURNEY PATTERN. If Given by Context does not need to stated.
type LinkInJourneyPatternRef struct {
	LinkInJourneyPatternRefStructure
}

// TypeOfJourneyPatternRef represents the TypeOfJourneyPatternRef element
// Reference to a TYPE OF JOURNEY PATTERN.
type TypeOfJourneyPatternRef struct {
	TypeOfJourneyPatternRefStructure
}

// TimingPointInJourneyPatternRef represents the TimingPointInJourneyPatternRef element
// Reference to a TIMING POINT IN JOURNEY PATTERN. If given by context does not need to be stated.
type TimingPointInJourneyPatternRef struct {
	TimingPointInJourneyPatternRefStructure
}

// TimingLinkInJourneyPatternRef represents the TimingLinkInJourneyPatternRef element
// Reference to a TIMING LINK IN JOURNEY PATTERN. If given by context does not need to be stated.
type TimingLinkInJourneyPatternRef struct {
	TimingLinkInJourneyPatternRefStructure
}

// JourneyTimingRefStructure represents the JourneyTimingRefStructure element
// Type for a reference to a JOURNEY TIMING.
type JourneyTimingRefStructure struct {
	VersionOfObjectRefStructure
}

// HeadwayRefStructure represents the HeadwayRefStructure element
// Type for a reference to a HEADWAY.
type HeadwayRefStructure struct {
	JourneyTimingRefStructure
}

// TurnaroundTimeLimitTimeRefStructure represents the TurnaroundTimeLimitTimeRefStructure element
// Type for a reference to a TURNAROUND TIME LIMIT TIME.
type TurnaroundTimeLimitTimeRefStructure struct {
	JourneyTimingRefStructure
}

// DefaultDeadRunRunTimeRefStructure represents the DefaultDeadRunRunTimeRefStructure element
// Type for a reference to a DEFAULT DEAD RUN RUN TIME.
type DefaultDeadRunRunTimeRefStructure struct {
	JourneyTimingRefStructure
}

// DefaultServiceJourneyTimeRefStructure represents the DefaultServiceJourneyTimeRefStructure element
// Type for a reference to a DEFAULT SERVICE JOURNEY TIME.
type DefaultServiceJourneyTimeRefStructure struct {
	JourneyTimingRefStructure
}

// JourneyTimingRef represents the JourneyTimingRef element
// Reference to a JOURNEY TIMING.
type JourneyTimingRef struct {
	JourneyTimingRefStructure
}

// HeadwayRef represents the HeadwayRef element
// Reference to a HEADWAY.
type HeadwayRef struct {
	HeadwayRefStructure
}

// TurnaroundTimeLimitTimeRef represents the TurnaroundTimeLimitTimeRef element
// Reference to a TURNAROUND TIME LIMIT TIME.
type TurnaroundTimeLimitTimeRef struct {
	TurnaroundTimeLimitTimeRefStructure
}

// DefaultDeadRunRunTimeRef represents the DefaultDeadRunRunTimeRef element
// Reference to a DEFAULT DEAD RUN RUN TIME.
type DefaultDeadRunRunTimeRef struct {
	DefaultDeadRunRunTimeRefStructure
}

// DefaultServiceJourneyTimeRef represents the DefaultServiceJourneyTimeRef element
// Reference to a DEFAULT SERVICE JOURNEY TIME.
type DefaultServiceJourneyTimeRef struct {
	DefaultServiceJourneyTimeRefStructure
}

// JourneyPatternWaitTimeRefStructure represents the JourneyPatternWaitTimeRefStructure element
// Type for a reference to a JOURNEY PATTERN WAIT TIME.
type JourneyPatternWaitTimeRefStructure struct {
	JourneyTimingRefStructure
}

// JourneyPatternRunTimeRefStructure represents the JourneyPatternRunTimeRefStructure element
// Type for a reference to a JOURNEY PATTERN RUN TIME.
type JourneyPatternRunTimeRefStructure struct {
	JourneyTimingRefStructure
}

// JourneyPatternLayoverRefStructure represents the JourneyPatternLayoverRefStructure element
// Type for a reference to a JOURNEY PATTERN LAYOVER.
type JourneyPatternLayoverRefStructure struct {
	JourneyTimingRefStructure
}

// JourneyPatternHeadwayRefStructure represents the JourneyPatternHeadwayRefStructure element
// Type for a reference to a JOURNEY PATTERN HEADWAY.
type JourneyPatternHeadwayRefStructure struct {
	JourneyTimingRefStructure
}

// JourneyPatternWaitTimeRef represents the JourneyPatternWaitTimeRef element
// Reference to a JOURNEY PATTERN WAIT TIME.
type JourneyPatternWaitTimeRef struct {
	JourneyPatternRunTimeRefStructure
}

// JourneyPatternRunTimeRef represents the JourneyPatternRunTimeRef element
// Reference to a JOURNEY PATTERN RUN TIME.
type JourneyPatternRunTimeRef struct {
	JourneyPatternRunTimeRefStructure
}

// JourneyPatternLayoverRef represents the JourneyPatternLayoverRef element
// Reference to a JOURNEY PATTERN LAYOVER.
type JourneyPatternLayoverRef struct {
	JourneyPatternLayoverRefStructure
}

// JourneyPatternHeadwayRef represents the JourneyPatternHeadwayRef element
// Reference to a JOURNEY PATTERN HEADWAY.
type JourneyPatternHeadwayRef struct {
	JourneyPatternRunTimeRefStructure
}

// TimeDemandTypeRefsRelStructure represents the timeDemandTypeRefs_RelStructure element
// Data type for a collection of one or more references to a TIME DEMAND TYPE.
type TimeDemandTypeRefsRelStructure struct {
	OneToManyRelationshipStructure
	TimeDemandTypeRef []TimeDemandTypeRef `xml:"TimeDemandTypeRef" json:"TimeDemandTypeRef"`
}

// TimeDemandTypeRefStructure represents the TimeDemandTypeRefStructure element
// Type for a reference to a TIME DEMAND TYPE.
type TimeDemandTypeRefStructure struct {
	VersionOfObjectRefStructure
}

// TimeDemandTypeAssignmentRefStructure represents the TimeDemandTypeAssignmentRefStructure element
// Type for a reference to a TIME DEMAND ASSIGNMENT.
type TimeDemandTypeAssignmentRefStructure struct {
	AssignmentRefStructure
}

// TimeDemandProfileRefStructure represents the TimeDemandProfileRefStructure element
// Type for a reference to a TIME DEMAND PROFILE.
type TimeDemandProfileRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfTimeDemandTypeRefStructure represents the TypeOfTimeDemandTypeRefStructure element
// Type for a TYPE OF TIME DEMAND TYPE.
type TypeOfTimeDemandTypeRefStructure struct {
	TypeOfValueRefStructure
}

// VehicleTypePreferenceRefStructure represents the VehicleTypePreferenceRefStructure element
// Type for a reference to a VEHICLE TYPE PREFERENCE.
type VehicleTypePreferenceRefStructure struct {
	JourneyTimingRefStructure
}

// TimeDemandTypeRef represents the TimeDemandTypeRef element
// Reference to a TIME DEMAND TYPE. If given by context need not be stated.
type TimeDemandTypeRef struct {
	TimeDemandTypeRefStructure
}

// TimeDemandTypeAssignmentRef represents the TimeDemandTypeAssignmentRef element
// Reference to a TIME DEMAND ASSIGNMENT.
type TimeDemandTypeAssignmentRef struct {
	TimeDemandTypeAssignmentRefStructure
}

// TimeDemandProfileRef represents the TimeDemandProfileRef element
// Reference to a TIME DEMAND PROFILE.
type TimeDemandProfileRef struct {
	TimeDemandProfileRefStructure
}

// TypeOfTimeDemandTypeRef represents the TypeOfTimeDemandTypeRef element
// Reference to a TYPE OF TIME DEMAND TYPE.
type TypeOfTimeDemandTypeRef struct {
	TypeOfTimeDemandTypeRefStructure
}

// VehicleTypePreferenceRef represents the VehicleTypePreferenceRef element
// Reference to a VEHICLE TYPE PREFERENCE.
type VehicleTypePreferenceRef struct {
	VehicleTypePreferenceRefStructure
}

// JourneyTimingVersionedChildStructure represents the JourneyTiming_VersionedChildStructure element
// Type for JOURNEY TIMING.
type JourneyTimingVersionedChildStructure struct {
	VersionedChildStructure
	// Name of JOURNEY TIMING.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	VehicleMode *VehicleMode `xml:"VehicleMode,omitempty" json:"VehicleMode,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
}

// JourneyWaitTimesRelStructure represents the journeyWaitTimes_RelStructure element
// Type for a list of JOURNEY WAIT TIMEs.
type JourneyWaitTimesRelStructure struct {
	StrictContainmentAggregationStructure
	JourneyWaitTime []JourneyWaitTime `xml:"JourneyWaitTime" json:"JourneyWaitTime"`
}

// JourneyWaitTimeVersionedChildStructure represents the JourneyWaitTime_VersionedChildStructure element
// Type for JOURNEY WAIT TIME.
type JourneyWaitTimeVersionedChildStructure struct {
	JourneyTimingVersionedChildStructure
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	// Wait time as interval.
	WaitTime string `xml:"WaitTime" json:"WaitTime"`
}

// JourneyRunTimesRelStructure represents the journeyRunTimes_RelStructure element
// Type for a list of JOURNEY RUN TIME.
type JourneyRunTimesRelStructure struct {
	StrictContainmentAggregationStructure
	JourneyRunTime []JourneyRunTime `xml:"JourneyRunTime" json:"JourneyRunTime"`
}

// JourneyRunTimeVersionedChildStructure represents the JourneyRunTime_VersionedChildStructure element
// Type for JOURNEY RUN TIME.
type JourneyRunTimeVersionedChildStructure struct {
	JourneyTimingVersionedChildStructure
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	// RUN TIME as an interval.
	RunTime string `xml:"RunTime" json:"RunTime"`
}

// JourneyLayoversRelStructure represents the journeyLayovers_RelStructure element
// Type for a list of JOURNEY LAYOVERs.
type JourneyLayoversRelStructure struct {
	StrictContainmentAggregationStructure
	JourneyLayover []JourneyLayover `xml:"JourneyLayover" json:"JourneyLayover"`
}

// JourneyLayoverStructure represents the JourneyLayoverStructure element
// Type for JOURNEY LAYOVER.
type JourneyLayoverStructure struct {
	JourneyTimingVersionedChildStructure
	// Layover time as interval.
	Layover string `xml:"Layover" json:"Layover"`
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
}

// TurnaroundTimeLimitTimesRelStructure represents the turnaroundTimeLimitTimes_RelStructure element
// Type for a list of properties of TURNAROUND TIME LIMIT.
type TurnaroundTimeLimitTimesRelStructure struct {
	StrictContainmentAggregationStructure
	TurnaroundTimeLimitTime []TurnaroundTimeLimitTime `xml:"TurnaroundTimeLimitTime" json:"TurnaroundTimeLimitTime"`
}

// TurnaroundTimeLimitTimeVersionedChildStructure represents the TurnaroundTimeLimitTime_VersionedChildStructure element
// Type for TURNAROUND TIME LIMIT.
type TurnaroundTimeLimitTimeVersionedChildStructure struct {
	JourneyTimingVersionedChildStructure
	// Minimum turnaround time as an interval.
	MinimumDuration *string `xml:"MinimumDuration,omitempty" json:"MinimumDuration,omitempty"`
	// Maximum turnaround time as an interval.
	MaximumDuration *string `xml:"MaximumDuration,omitempty" json:"MaximumDuration,omitempty"`
}

// JourneyHeadwaysRelStructure represents the journeyHeadways_RelStructure element
// Type for a list of JOURNEY HEADWAY Interval.
type JourneyHeadwaysRelStructure struct {
	StrictContainmentAggregationStructure
	JourneyHeadway []JourneyHeadway `xml:"JourneyHeadway" json:"JourneyHeadway"`
}

// JourneyHeadwayVersionedChildStructure represents the JourneyHeadway_VersionedChildStructure element
// Type for a JOURNEY HEADWAY Interval.
type JourneyHeadwayVersionedChildStructure struct {
	JourneyTimingVersionedChildStructure
	// Scheduled normal headway interval.
	ScheduledHeadwayInterval *string `xml:"ScheduledHeadwayInterval,omitempty" json:"ScheduledHeadwayInterval,omitempty"`
	// Minimum headway interval.
	MinimumHeadwayInterval *string `xml:"MinimumHeadwayInterval,omitempty" json:"MinimumHeadwayInterval,omitempty"`
	// Maximum headway interval.
	MaximumHeadwayInterval *string `xml:"MaximumHeadwayInterval,omitempty" json:"MaximumHeadwayInterval,omitempty"`
}

// HeadwayIntervalStructure represents the HeadwayIntervalStructure element
// Type for a HEADWAY INTERVAL.
type HeadwayIntervalStructure struct {
	// Scheduled normal headway interval.
	ScheduledHeadwayInterval *string `xml:"ScheduledHeadwayInterval,omitempty" json:"ScheduledHeadwayInterval,omitempty"`
	// Minimum headway interval.
	MinimumHeadwayInterval *string `xml:"MinimumHeadwayInterval,omitempty" json:"MinimumHeadwayInterval,omitempty"`
	// Maximum headway interval.
	MaximumHeadwayInterval *string `xml:"MaximumHeadwayInterval,omitempty" json:"MaximumHeadwayInterval,omitempty"`
}

// JourneyTiming represents the JourneyTiming element
// A  time-related information referring to journey timing whose value depends on the time of use and so can be associated with a TIME DEMAND TYPE, TIME BAND or OPERATIONAL CONTEXT.
type JourneyTiming struct {
	JourneyTimingVersionedChildStructure
}

// JourneyWaitTime represents the JourneyWaitTime element
// The time a vehicle has to wait at a specific TIMING POINT IN JOURNEY PATTERN, for a specified TIME DEMAND TYPE. This wait time can be superseded by a VEHICLE JOURNEY WAIT TIME.
type JourneyWaitTime struct {
	JourneyWaitTimeVersionedChildStructure
}

// JourneyRunTime represents the JourneyRunTime element
// The time taken to traverse a TIMING LINK in a particular JOURNEY PATTERN, for a specified TIME DEMAND TYPE. If it exists, it will override the DEFAULT SERVICE JOURNEY RUN TIME and DEFAULT DEAD RUN RUN TIME.
type JourneyRunTime struct {
	JourneyRunTimeVersionedChildStructure
}

// JourneyLayover represents the JourneyLayover element
// Time allowance at the end of each journey on a specified JOURNEY PATTERN, to allow for delays and for other purposes. This layover supersedes any global layover and may be superseded by a specific VEHICLE JOURNEY LAYOVER.
type JourneyLayover struct {
	JourneyLayoverStructure
}

// TurnaroundTimeLimitTime represents the TurnaroundTimeLimitTime element
// The maximum time for which a vehicle may be scheduled to wait at a particular TIMING POINT (often included in a TURN STATION) without being returned to a PARKING POINT. A minimum time for a vehicle to turn its direction may also be recorded. This may be superseded by a DEAD RUN.
type TurnaroundTimeLimitTime struct {
	TurnaroundTimeLimitTimeVersionedChildStructure
}

// JourneyHeadway represents the JourneyHeadway element
// Headway interval information that is available for all the VEHICLE JOURNEYs running on the JOURNEY PATTERN  for a given TIME DEMAND TYPE,  at a given TIMING POINT.  This is a default value that can be superseded by VEHICLE JOURNEY HEADWAY. This information must be consistent with HEADWAY JOURNEY GROUP if available (HEADWAY JOURNEY GROUP being a more detailed way of describing headway services).
type JourneyHeadway struct {
	JourneyHeadwayVersionedChildStructure
}

// JourneyPatternWaitTimesRelStructure represents the journeyPatternWaitTimes_RelStructure element
// Type for a list of JOURNEY PATTERN WAIT TIMEs.
type JourneyPatternWaitTimesRelStructure struct {
	StrictContainmentAggregationStructure
	JourneyPatternWaitTimeRef []JourneyPatternWaitTimeRef `xml:"JourneyPatternWaitTimeRef,omitempty" json:"JourneyPatternWaitTimeRef,omitempty"`
	JourneyPatternWaitTime []JourneyPatternWaitTime `xml:"JourneyPatternWaitTime,omitempty" json:"JourneyPatternWaitTime,omitempty"`
}

// JourneyPatternWaitTimeVersionedChildStructure represents the JourneyPatternWaitTime_VersionedChildStructure element
// Type for JOURNEY PATTERN WAIT TIME.
type JourneyPatternWaitTimeVersionedChildStructure struct {
	JourneyWaitTimeVersionedChildStructure
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
}

// JourneyPatternRunTimesRelStructure represents the journeyPatternRunTimes_RelStructure element
// Type for a list of JOURNEY PATTERN RUN TIMEs.
type JourneyPatternRunTimesRelStructure struct {
	StrictContainmentAggregationStructure
	JourneyPatternRunTimeRef []JourneyPatternRunTimeRef `xml:"JourneyPatternRunTimeRef,omitempty" json:"JourneyPatternRunTimeRef,omitempty"`
	// JOURNEY PATTERN RUN TIME for a specified TIME DEMAND.
	JourneyPatternRunTime []JourneyPatternRunTime `xml:"JourneyPatternRunTime,omitempty" json:"JourneyPatternRunTime,omitempty"`
}

// JourneyPatternRunTimeVersionedChildStructure represents the JourneyPatternRunTime_VersionedChildStructure element
// Type for JOURNEY PATTERN RUN TIME.
type JourneyPatternRunTimeVersionedChildStructure struct {
	JourneyRunTimeVersionedChildStructure
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
}

// JourneyPatternLayoversRelStructure represents the journeyPatternLayovers_RelStructure element
// Type for a list of JOURNEY PATTERN LAYOVERs.
type JourneyPatternLayoversRelStructure struct {
	StrictContainmentAggregationStructure
	// JOURNEY PATTERN LAYOVER for a specified TIME DEMAND TYPE.
	JourneyPatternLayover []JourneyPatternLayover `xml:"JourneyPatternLayover" json:"JourneyPatternLayover"`
}

// JourneyPatternLayoverStructure represents the JourneyPatternLayoverStructure element
// Type for a JOURNEY PATTERN LAYOVER.
type JourneyPatternLayoverStructure struct {
	JourneyLayoverStructure
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
}

// JourneyPatternHeadwaysRelStructure represents the journeyPatternHeadways_RelStructure element
// Type for a list of JOURNEY PATTERN HEADWAYs.
type JourneyPatternHeadwaysRelStructure struct {
	StrictContainmentAggregationStructure
	JourneyPatternHeadway []JourneyPatternHeadway `xml:"JourneyPatternHeadway" json:"JourneyPatternHeadway"`
}

// JourneyPatternHeadwayVersionedChildStructure represents the JourneyPatternHeadway_VersionedChildStructure element
// Type for JOURNEY PATTERN HEADWAY.
type JourneyPatternHeadwayVersionedChildStructure struct {
	JourneyHeadwayVersionedChildStructure
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
}

// JourneyPatternWaitTime represents the JourneyPatternWaitTime element
// The time a vehicle has to wait at a specific TIMING POINT IN JOURNEY PATTERN, for a specified TIME DEMAND TYPE. This wait time can be superseded by a VEHICLE JOURNEY WAIT TIME.
type JourneyPatternWaitTime struct {
	JourneyPatternWaitTimeVersionedChildStructure
}

// JourneyPatternRunTime represents the JourneyPatternRunTime element
// The time taken to traverse a TIMING LINK in a particular JOURNEY PATTERN, for a specified TIME DEMAND TYPE If it exists, it will override the DEFAULT SERVICE JOURNEY RUN TIME and DEFAULT DEAD RUN RUN TIME.
type JourneyPatternRunTime struct {
	JourneyPatternRunTimeVersionedChildStructure
}

// JourneyPatternLayover represents the JourneyPatternLayover element
// Time allowance at the end of each journey on a specified JOURNEY PATTERN, to allow for delays and for other purposes. This layover supersedes any global layover and may be superseded by a specific VEHICLE JOURNEY LAYOVER.
type JourneyPatternLayover struct {
	JourneyPatternLayoverStructure
}

// JourneyPatternHeadway represents the JourneyPatternHeadway element
// Headway interval information that is available for all the VEHICLE JOURNEYs running on the JOURNEY PATTERN. This is a default value that can be superseded by the VEHICLE JOURNEY HEADWAY on a specific journey. This information must be consistent with HEADWAY JOURNEY GROUP if available (HEADWAY JOURNEY GROUP being a more detailed way of describing headway services).
type JourneyPatternHeadway struct {
	JourneyPatternHeadwayVersionedChildStructure
}

// TimingPointsInFrameRelStructure represents the timingPointsInFrame_RelStructure element
// Type for containment in frame of TIMING POINT.
type TimingPointsInFrameRelStructure struct {
	ContainmentAggregationStructure
	TimingPoint []TimingPoint `xml:"TimingPoint" json:"TimingPoint"`
}

// TimingLinksInFrameRelStructure represents the timingLinksInFrame_RelStructure element
// Type for containment in frame of TIMING LINK.
type TimingLinksInFrameRelStructure struct {
	ContainmentAggregationStructure
	TimingLink []TimingLink `xml:"TimingLink" json:"TimingLink"`
}

// TimingPatternsInFrameRelStructure represents the timingPatternsInFrame_RelStructure element
// Type for containment in frame of TIMING PATTERN.
type TimingPatternsInFrameRelStructure struct {
	ContainmentAggregationStructure
	TimingPattern []TimingPattern `xml:"TimingPattern" json:"TimingPattern"`
}

// GroupOfTimingLinksInFrameRelStructure represents the groupOfTimingLinksInFrame_RelStructure element
// Type for containment in frame of GROUP OF TIMING LINKs.
type GroupOfTimingLinksInFrameRelStructure struct {
	ContainmentAggregationStructure
	GroupOfTimingLinks []GroupOfTimingLinks `xml:"GroupOfTimingLinks" json:"GroupOfTimingLinks"`
}

// TimingPointsRelStructure represents the timingPoints_RelStructure element
// Type for a list of TIMING POINTs.
type TimingPointsRelStructure struct {
	ContainmentAggregationStructure
	ParkingPoint []ParkingPoint `xml:"ParkingPoint,omitempty" json:"ParkingPoint,omitempty"`
	GaragePoint []GaragePoint `xml:"GaragePoint,omitempty" json:"GaragePoint,omitempty"`
	ReliefPoint []ReliefPoint `xml:"ReliefPoint,omitempty" json:"ReliefPoint,omitempty"`
	TimingPoint []TimingPoint `xml:"TimingPoint,omitempty" json:"TimingPoint,omitempty"`
}

// TimingPointVersionStructure represents the TimingPoint_VersionStructure element
// Type for TIMING POINT.
type TimingPointVersionStructure struct {
	PointVersionStructure
	// Default Nature of TIMING POINT. Default is primary TIMING POINT.
	TimingPointStatus *TimingPointStatusEnumeration `xml:"TimingPointStatus,omitempty" json:"TimingPointStatus,omitempty"`
	// Default WAIT TIME associated with TIMING POINT. May be overridden on specific POINTs in JOURNEY PATTERNs for POINT.
	AllowedForWaitTime *string `xml:"AllowedForWaitTime,omitempty" json:"AllowedForWaitTime,omitempty"`
}

// TimingLinksRelStructure represents the timingLinks_RelStructure element
// Type for a list of TIMING LINKs.
type TimingLinksRelStructure struct {
	StrictContainmentAggregationStructure
	TimingLink []TimingLink `xml:"TimingLink" json:"TimingLink"`
}

// TimingLinkVersionStructure represents the TimingLink_VersionStructure element
// Type for TIMING LINK.
type TimingLinkVersionStructure struct {
	LinkVersionStructure
	// Identifier of TIMING POINT from which LINK starts.
	FromPointRef TimingPointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// Identifier of TIMING POINT at which LINK ends.
	ToPointRef TimingPointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
	VehicleMode *VehicleMode `xml:"VehicleMode,omitempty" json:"VehicleMode,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
}

// TimingPatternVersionStructure represents the TimingPattern_VersionStructure element
// Type for TIMING PATTERN.
type TimingPatternVersionStructure struct {
	LinkSequenceVersionStructure
	// Route that TIMING PATTERN describes.
	RouteRef *RouteRefStructure `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	DirectionType *DirectionType `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	// Ordered List of points used in TIMING PATTERN. specific to TIMING PATTERN.
	PointsInSequence *TimingPointsInJourneyPatternRelStructure `xml:"pointsInSequence,omitempty" json:"pointsInSequence,omitempty"`
	// List of points used in TIMING PATTERN. May also be defined elsewhere. Can be used to encapsulate TIMING PATTERN with its component POINTS.
	Points *TimingPointsRelStructure `xml:"points,omitempty" json:"points,omitempty"`
	// List of links used in TIMING PATTERN. May also be defined elsewhere. Can be used to encapsulate TIMING PATTERN with its component Link.s.
	Links *TimingLinksRelStructure `xml:"links,omitempty" json:"links,omitempty"`
}

// TimingPointsInJourneyPatternRelStructure represents the timingPointsInJourneyPattern_RelStructure element
// Type for a list of TIMING POINTs.
type TimingPointsInJourneyPatternRelStructure struct {
	StrictContainmentAggregationStructure
	// TIMING POINT.
	TimingPointInJourneyPattern []TimingPointInJourneyPattern `xml:"TimingPointInJourneyPattern" json:"TimingPointInJourneyPattern"`
}

// TimingPointInJourneyPatternVersionedChildStructure represents the TimingPointInJourneyPattern_VersionedChildStructure element
// Type for TIMING POINT IN JOURNEY PATTERN.
type TimingPointInJourneyPatternVersionedChildStructure struct {
	PointInLinkSequenceVersionedChildStructure
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	// Used to disambiguate if multiple links between the same points.
	OnwardTimingLinkRef *TimingLinkRefStructure `xml:"OnwardTimingLinkRef,omitempty" json:"OnwardTimingLinkRef,omitempty"`
	// Whether point is a wait point.
	IsWaitPoint *bool `xml:"IsWaitPoint,omitempty" json:"IsWaitPoint,omitempty"`
	// Wait time as interval. OPTIMISATION assuming default Time Demand. Use this to declare a single wait time Other wise a list of times for different time demands.
	WaitTime *string `xml:"WaitTime,omitempty" json:"WaitTime,omitempty"`
	// Wait times for TIMING POINT. There may be different times for different time demands.
	WaitTimes *JourneyPatternWaitTimesRelStructure `xml:"waitTimes,omitempty" json:"waitTimes,omitempty"`
	// Wait times for TIMING POINT. There may be different times for different time demands.
	Headways *JourneyPatternHeadwaysRelStructure `xml:"headways,omitempty" json:"headways,omitempty"`
	// NOTICEs for TIMING POINT IN JOURNEY PATTERN.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// TimingLinkInJourneyPatternVersionedChildStructure represents the TimingLinkInJourneyPattern_VersionedChildStructure element
// Type for TIMING LINK IN JOURNEY PATTERN.
type TimingLinkInJourneyPatternVersionedChildStructure struct {
	LinkInLinkSequenceVersionedChildStructure
	TimingLinkRef TimingLinkRef `xml:"TimingLinkRef" json:"TimingLinkRef"`
	// run times for this TIMING LINK.
	RunTimes *JourneyRunTimesRelStructure `xml:"runTimes,omitempty" json:"runTimes,omitempty"`
}

// GroupOfTimingLinksRelStructure represents the GroupOfTimingLinks_RelStructure element
// Type for GROUP OF TIMING LINKs.
type GroupOfTimingLinksRelStructure struct {
	GroupOfEntitiesVersionStructure
	// TIMING LINKs in group.
	Members *TimingLinkRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// OnwardTimingLinkDerivedViewStructure represents the OnwardTimingLink_DerivedViewStructure element
// Type for Information about onwards TIMING LINK.
type OnwardTimingLinkDerivedViewStructure struct {
	DerivedViewStructure
	TimingLinkInJourneyPatternRef *TimingLinkInJourneyPatternRef `xml:"TimingLinkInJourneyPatternRef,omitempty" json:"TimingLinkInJourneyPatternRef,omitempty"`
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	// Identifier of POINT at which LINK ends.
	ToPointRef *TimingPointRefStructure `xml:"ToPointRef,omitempty" json:"ToPointRef,omitempty"`
	// Distance for TIMING LINK.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// Run time for TIMING LINK - TIME BAND given by context.
	RunTime *string `xml:"RunTime,omitempty" json:"RunTime,omitempty"`
}

// TimingPoint represents the TimingPoint element
// A POINT against which the timing information necessary to build schedules may be recorded.
type TimingPoint struct {
	TimingPointVersionStructure
}

// TimingLink represents the TimingLink element
// An ordered pair of TIMING POINTs for which run times may be recorded.  Timing links are directional - there will be separate links for each direction of a route.
type TimingLink struct {
	TimingLinkVersionStructure
}

// TimingPattern represents the TimingPattern element
// The subset of a JOURNEY PATTERN made up only of TIMING POINTs IN JOURNEY PATTERN.
type TimingPattern struct {
	TimingPatternVersionStructure
}

// TimingPointInJourneyPattern represents the TimingPointInJourneyPattern element
// A NODE in a JOURNEY PATTERN which is a TIMING POINT.
type TimingPointInJourneyPattern struct {
	TimingPointInJourneyPatternVersionedChildStructure
}

// TimingLinkInJourneyPattern represents the TimingLinkInJourneyPattern element
// The position of a TIMING LINK in a JOURNEY PATTERN. This ENTITY is needed if a TIMING LINK is repeated in the same JOURNEY PATTERN, and separate information is to be stored about each iteration of the TIMING LINK.
type TimingLinkInJourneyPattern struct {
	TimingLinkInJourneyPatternVersionedChildStructure
}

// GroupOfTimingLinks represents the GroupOfTimingLinks element
// A set of TIMING LINKs grouped together according to the similarity of TIME BANDs which are relevant to them. There may be a GROUP OF TIMING LINKS which covers all TIMING LINKs, for use when different GROUPs OF TIMING LINKS are not needed.
type GroupOfTimingLinks struct {
	GroupOfTimingLinksRelStructure
}

// OnwardTimingLinkView represents the OnwardTimingLinkView element
// Information about onwards TIMING LINK.
type OnwardTimingLinkView struct {
	OnwardTimingLinkDerivedViewStructure
	TimingLinkInJourneyPatternRef interface{} `xml:"TimingLinkInJourneyPatternRef,omitempty" json:"TimingLinkInJourneyPatternRef,omitempty"`
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
}

// CrewBasesInFrameRelStructure represents the crewBasesInFrame_RelStructure element
// Type for containment in frame of CREW BASEs.
type CrewBasesInFrameRelStructure struct {
	ContainmentAggregationStructure
	CrewBase []CrewBase `xml:"CrewBase" json:"CrewBase"`
}

// GaragesInFrameRelStructure represents the garagesInFrame_RelStructure element
// Type for containment in frame of GARAGEs.
type GaragesInFrameRelStructure struct {
	ContainmentAggregationStructure
	Garage []Garage `xml:"Garage" json:"Garage"`
}

// ReliefPointsInFrameRelStructure represents the reliefPointsInFrame_RelStructure element
// Type for containment in frame of RELIEF POINTs.
type ReliefPointsInFrameRelStructure struct {
	ContainmentAggregationStructure
	ParkingPoint []ParkingPoint `xml:"ParkingPoint,omitempty" json:"ParkingPoint,omitempty"`
	GaragePoint []GaragePoint `xml:"GaragePoint,omitempty" json:"GaragePoint,omitempty"`
	ReliefPoint []ReliefPoint `xml:"ReliefPoint,omitempty" json:"ReliefPoint,omitempty"`
}

// CrewBaseVersionStructure represents the CrewBase_VersionStructure element
// Type for CREW BASE.
type CrewBaseVersionStructure struct {
	GroupOfEntitiesVersionStructure
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	// garages associated with CREW BASe.
	Garages *GarageRefsRelStructure `xml:"garages,omitempty" json:"garages,omitempty"`
}

// ReliefPointVersionStructure represents the ReliefPoint_VersionStructure element
// Type for RELIEF POINT.
type ReliefPointVersionStructure struct {
	TimingPointVersionStructure
	CrewBaseRef *CrewBaseRef `xml:"CrewBaseRef,omitempty" json:"CrewBaseRef,omitempty"`
}

// ParkingPointVersionStructure represents the ParkingPoint_VersionStructure element
// Type for PARKING POINT.
type ParkingPointVersionStructure struct {
	ReliefPointVersionStructure
}

// GaragePointsRelStructure represents the garagePoints_RelStructure element
// Type for a list of GARAGEs.
type GaragePointsRelStructure struct {
	StrictContainmentAggregationStructure
	GaragePointRef []GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	GaragePoint []GaragePoint `xml:"GaragePoint,omitempty" json:"GaragePoint,omitempty"`
}

// GaragePointVersionStructure represents the GaragePoint_VersionStructure element
// Type for GARAGE POINT.
type GaragePointVersionStructure struct {
	ParkingPointVersionStructure
}

// GarageVersionStructure represents the Garage_VersionStructure element
// Type for GARAGE.
type GarageVersionStructure struct {
	AddressablePlaceVersionStructure
	// Contact details for GARAGE.
	ContactDetails *ContactStructure `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// OPERATORs assoicated with GARAGE.
	Operators *TransportOrganisationRefsRelStructure `xml:"operators,omitempty" json:"operators,omitempty"`
	// GARAGE POINTsin GARAGE
	GaragePoints *GaragePointsRelStructure `xml:"garagePoints,omitempty" json:"garagePoints,omitempty"`
	// CREW BASEs asspicated with GARAGE.
	CrewBases *CrewBaseRefsRelStructure `xml:"crewBases,omitempty" json:"crewBases,omitempty"`
}

// CrewBase represents the CrewBase element
// A place where operating EMPLOYEEs (e.g. drivers) report on and register their worK.
type CrewBase struct {
	CrewBaseVersionStructure
}

// ReliefPoint represents the ReliefPoint element
// A TIMING POINT where a relief is possible, i.e. a driver may take on or hand over a vehicle. The vehicle may sometimes be left unattended.
type ReliefPoint struct {
	ReliefPointVersionStructure
}

// ParkingPoint represents the ParkingPoint element
// A TIMING POINT where vehicles may stay unattended for a long time. A vehicle's return to park at a PARKING POINT marks the end of a BLOCK.
type ParkingPoint struct {
	ParkingPointVersionStructure
}

// GaragePoint represents the GaragePoint element
// A subtype of PARKING POINT located in a GARAGE.
type GaragePoint struct {
	ParkingPointVersionStructure
}

// Garage represents the Garage element
// A facility used for parking and maintaining vehicles. PARKING POINTs in a GARAGE are called GARAGE POINTs.
type Garage struct {
	GarageVersionStructure
}

// FlexibleLineTypeEnumeration represents the FlexibleLineTypeEnumeration enumeration
// Allowed values for Flexible LINE TYPE.
type FlexibleLineTypeEnumeration string

const (
	// FlexibleLineTypeEnumerationCorridorService represents corridorService
	FlexibleLineTypeEnumerationCorridorService FlexibleLineTypeEnumeration = "corridorService"
	// FlexibleLineTypeEnumerationMainRouteWithFlexibleEnds represents mainRouteWithFlexibleEnds
	FlexibleLineTypeEnumerationMainRouteWithFlexibleEnds FlexibleLineTypeEnumeration = "mainRouteWithFlexibleEnds"
	// FlexibleLineTypeEnumerationFlexibleAreasOnly represents flexibleAreasOnly
	FlexibleLineTypeEnumerationFlexibleAreasOnly FlexibleLineTypeEnumeration = "flexibleAreasOnly"
	// FlexibleLineTypeEnumerationHailAndRideSections represents hailAndRideSections
	FlexibleLineTypeEnumerationHailAndRideSections FlexibleLineTypeEnumeration = "hailAndRideSections"
	// FlexibleLineTypeEnumerationFixedStopAreaWide represents fixedStopAreaWide
	FlexibleLineTypeEnumerationFixedStopAreaWide FlexibleLineTypeEnumeration = "fixedStopAreaWide"
	// FlexibleLineTypeEnumerationFreeAreaAreaWide represents freeAreaAreaWide
	FlexibleLineTypeEnumerationFreeAreaAreaWide FlexibleLineTypeEnumeration = "freeAreaAreaWide"
	// FlexibleLineTypeEnumerationMixedFlexible represents mixedFlexible
	FlexibleLineTypeEnumerationMixedFlexible FlexibleLineTypeEnumeration = "mixedFlexible"
	// FlexibleLineTypeEnumerationMixedFlexibleAndFixed represents mixedFlexibleAndFixed
	FlexibleLineTypeEnumerationMixedFlexibleAndFixed FlexibleLineTypeEnumeration = "mixedFlexibleAndFixed"
	// FlexibleLineTypeEnumerationFixed represents fixed
	FlexibleLineTypeEnumerationFixed FlexibleLineTypeEnumeration = "fixed"
	// FlexibleLineTypeEnumerationOther represents other
	FlexibleLineTypeEnumerationOther FlexibleLineTypeEnumeration = "other"
)

// FlexibleRouteTypeEnumeration represents the FlexibleRouteTypeEnumeration enumeration
// Allowed values for Flexible ROUTE TYPE.
type FlexibleRouteTypeEnumeration string

const (
	// FlexibleRouteTypeEnumerationFlexibleAreasOnly represents flexibleAreasOnly
	FlexibleRouteTypeEnumerationFlexibleAreasOnly FlexibleRouteTypeEnumeration = "flexibleAreasOnly"
	// FlexibleRouteTypeEnumerationHailAndRideSections represents hailAndRideSections
	FlexibleRouteTypeEnumerationHailAndRideSections FlexibleRouteTypeEnumeration = "hailAndRideSections"
	// FlexibleRouteTypeEnumerationMixed represents mixed
	FlexibleRouteTypeEnumerationMixed FlexibleRouteTypeEnumeration = "mixed"
	// FlexibleRouteTypeEnumerationFixed represents fixed
	FlexibleRouteTypeEnumerationFixed FlexibleRouteTypeEnumeration = "fixed"
	// FlexibleRouteTypeEnumerationOther represents other
	FlexibleRouteTypeEnumerationOther FlexibleRouteTypeEnumeration = "other"
)

// FlexibleLinkTypeEnumeration represents the FlexibleLinkTypeEnumeration enumeration
// Allowed values for Flexible LINK TYPE.
type FlexibleLinkTypeEnumeration string

const (
	// FlexibleLinkTypeEnumerationHailAndRide represents hailAndRide
	FlexibleLinkTypeEnumerationHailAndRide FlexibleLinkTypeEnumeration = "hailAndRide"
	// FlexibleLinkTypeEnumerationOnDemand represents onDemand
	FlexibleLinkTypeEnumerationOnDemand FlexibleLinkTypeEnumeration = "onDemand"
	// FlexibleLinkTypeEnumerationFixed represents fixed
	FlexibleLinkTypeEnumerationFixed FlexibleLinkTypeEnumeration = "fixed"
	// FlexibleLinkTypeEnumerationOther represents other
	FlexibleLinkTypeEnumerationOther FlexibleLinkTypeEnumeration = "other"
)

// FlexibleLineRefStructure represents the FlexibleLineRefStructure element
// Type for a reference to a FLEXIBLE LINE.
type FlexibleLineRefStructure struct {
	LineRefStructure
}

// FlexibleLineRefsRelStructure represents the flexibleLineRefs_RelStructure element
// Type for a list of references to a FLEXIBLE LINE.
type FlexibleLineRefsRelStructure struct {
	OneToManyRelationshipStructure
	FlexibleLineRef []FlexibleLineRef `xml:"FlexibleLineRef" json:"FlexibleLineRef"`
}

// FlexibleLinkPropertiesRefStructure represents the FlexibleLinkPropertiesRefStructure element
// Type for a reference to a FLEXIBLE LINK PROPERTies.
type FlexibleLinkPropertiesRefStructure struct {
	VersionOfObjectRefStructure
}

// FlexiblePointPropertiesRefStructure represents the FlexiblePointPropertiesRefStructure element
// Type for a reference to a FLEXIBLE POINT PROPERTies.
type FlexiblePointPropertiesRefStructure struct {
	VersionOfObjectRefStructure
}

// FlexibleLineRef represents the FlexibleLineRef element
// Reference to a FLEXIBLE LINE.
type FlexibleLineRef struct {
	FlexibleLineRefStructure
}

// FlexibleLinkPropertiesRef represents the FlexibleLinkPropertiesRef element
// Reference to a FLEXIBLE LINK PROPERTies.
type FlexibleLinkPropertiesRef struct {
	FlexibleLinkPropertiesRefStructure
}

// FlexiblePointPropertiesRef represents the FlexiblePointPropertiesRef element
// Reference to a FLEXIBLE POINT PROPERTies.
type FlexiblePointPropertiesRef struct {
	FlexiblePointPropertiesRefStructure
}

// RouteInstructionRefStructure represents the RouteInstructionRefStructure element
// Type for a reference to a ROUTE INSTRUCTION.
type RouteInstructionRefStructure struct {
	VersionOfObjectRefStructure
}

// RouteInstructionRef represents the RouteInstructionRef element
// Reference to a ROUTE INSTRUCTION.
type RouteInstructionRef struct {
	RouteInstructionRefStructure
}

// RouteInstructionsRelStructure represents the routeInstructions_RelStructure element
// Type for a list of ROUTE INSTRUCTIONs.
type RouteInstructionsRelStructure struct {
	StrictContainmentAggregationStructure
	// A reference to an instruction on how to follow a ROUTE through the network.
	RouteInstructionRef []RouteInstructionRef `xml:"RouteInstructionRef,omitempty" json:"RouteInstructionRef,omitempty"`
	// An instruction on how to follow a ROUTE through the network.
	RouteInstruction []RouteInstruction `xml:"RouteInstruction,omitempty" json:"RouteInstruction,omitempty"`
}

// RouteInstructionVersionStructure represents the RouteInstruction_VersionStructure element
// Type for ROUTE a POINT.
type RouteInstructionVersionStructure struct {
	DataManagedObjectStructure
	PointOnRouteRef *PointOnRouteRef `xml:"PointOnRouteRef,omitempty" json:"PointOnRouteRef,omitempty"`
	// Directions for following path step.
	Instruction *MultilingualString `xml:"Instruction,omitempty" json:"Instruction,omitempty"`
	// Relative heading for Instruction.
	PathHeading *PathHeadingEnumeration `xml:"PathHeading,omitempty" json:"PathHeading,omitempty"`
	// Heading for instruction.
	Heading *CompassBearing16Enumeration `xml:"Heading,omitempty" json:"Heading,omitempty"`
	// Compass Bearing for Instruction.
	Bearing *float32 `xml:"Bearing,omitempty" json:"Bearing,omitempty"`
	// Distance for step.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// Transition for instruction.
	Transition *TransitionEnumeration `xml:"Transition,omitempty" json:"Transition,omitempty"`
	// Directions for following path step.
	RoadName *MultilingualString `xml:"RoadName,omitempty" json:"RoadName,omitempty"`
	SimpleFeatureRef *SimpleFeatureRef `xml:"SimpleFeatureRef,omitempty" json:"SimpleFeatureRef,omitempty"`
	// Relative order
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// RouteInstruction represents the RouteInstruction element
// An Instruction on how to follow a ROUTE through the network.
type RouteInstruction struct {
	RouteInstructionVersionStructure
}

// DirectionsInFrameRelStructure represents the directionsInFrame_RelStructure element
// Type for containment in frame of DIRECTION.
type DirectionsInFrameRelStructure struct {
	ContainmentAggregationStructure
	Direction []Direction `xml:"Direction" json:"Direction"`
}

// RoutesInFrameRelStructure represents the routesInFrame_RelStructure element
// Type for containment in frame of ROUTE.
type RoutesInFrameRelStructure struct {
	ContainmentAggregationStructure
	FlexibleRoute []FlexibleRoute `xml:"FlexibleRoute,omitempty" json:"FlexibleRoute,omitempty"`
	Route []Route `xml:"Route,omitempty" json:"Route,omitempty"`
}

// RoutePointsInFrameRelStructure represents the routePointsInFrame_RelStructure element
// Type for containment in frame of ROUTE POINT.
type RoutePointsInFrameRelStructure struct {
	ContainmentAggregationStructure
	RoutePoint []RoutePoint `xml:"RoutePoint" json:"RoutePoint"`
}

// RouteLinksInFrameRelStructure represents the routeLinksInFrame_RelStructure element
// Type for containment in frame of ROUTE LINK.
type RouteLinksInFrameRelStructure struct {
	ContainmentAggregationStructure
	RouteLink []RouteLink `xml:"RouteLink" json:"RouteLink"`
}

// DirectionValueStructure represents the Direction_ValueStructure element
// Type for DIRECTION.
type DirectionValueStructure struct {
	TypeOfValueVersionStructure
	// An alternative  code that uniquely identifies the DIRECTION specifically for use in AVMS systems. For VDV compatibility.
	ExternalDirectionRef *ExternalObjectRefStructure `xml:"ExternalDirectionRef,omitempty" json:"ExternalDirectionRef,omitempty"`
	DirectionType *DirectionType `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	// Opposite Direction to this direction.
	OppositeDirectionRef *DirectionRefStructure `xml:"OppositeDirectionRef,omitempty" json:"OppositeDirectionRef,omitempty"`
}

// RoutesRelStructure represents the routes_RelStructure element
// Type for a list of ROUTEs.
type RoutesRelStructure struct {
	ContainmentAggregationStructure
	RouteRef []RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	Route []Route `xml:"Route,omitempty" json:"Route,omitempty"`
}

// RouteVersionStructure represents the Route_VersionStructure element
// Type for a ROUTE.
type RouteVersionStructure struct {
	LinkSequenceVersionStructure
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	DirectionType *DirectionType `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	// Ordered set of points making up a ROUTE.
	PointsInSequence *PointsOnRouteRelStructure `xml:"pointsInSequence,omitempty" json:"pointsInSequence,omitempty"`
	// Reference to the corresponding matching ROUTE in the  oppositte direction, if any.
	InverseRouteRef *RouteRefStructure `xml:"InverseRouteRef,omitempty" json:"InverseRouteRef,omitempty"`
}

// PointsOnRouteRelStructure represents the pointsOnRoute_RelStructure element
// Type for a list of POINTs ON ROUTE.
type PointsOnRouteRelStructure struct {
	StrictContainmentAggregationStructure
	PointOnRoute []PointOnRoute `xml:"PointOnRoute" json:"PointOnRoute"`
}

// PointOnRouteVersionedChildStructure represents the PointOnRoute_VersionedChildStructure element
// Type for a POINT ON ROUTE.
type PointOnRouteVersionedChildStructure struct {
	PointInLinkSequenceVersionedChildStructure
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	// Optional Reference to onward link to use - can be used to disambiguate where there are multiple links between the same point.
	OnwardRouteLinkRef *RouteLinkRefStructure `xml:"OnwardRouteLinkRef,omitempty" json:"OnwardRouteLinkRef,omitempty"`
	// Instructions for following a route. +v1.1
	RouteInstructions *RouteInstructionsRelStructure `xml:"routeInstructions,omitempty" json:"routeInstructions,omitempty"`
}

// RoutePointVersionStructure represents the RoutePoint_VersionStructure element
// Type for ROUTE POINT.
type RoutePointVersionStructure struct {
	PointVersionStructure
	// Whether point is a VIA point.
	ViaFlag *bool `xml:"ViaFlag,omitempty" json:"ViaFlag,omitempty"`
	// Whether ROUTE POINT is a border crossing, that is a point at which an international boundary between two countries may be crossed.
	BorderCrossing *bool `xml:"BorderCrossing,omitempty" json:"BorderCrossing,omitempty"`
}

// RouteLinkVersionStructure represents the RouteLink_VersionStructure element
// Type for ROUTE LINK.
type RouteLinkVersionStructure struct {
	LinkVersionStructure
	// Identifier of ROUTE POINT from which Link starts.
	FromPointRef RoutePointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// Identifier of ROUTE POINT at which Link ends.
	ToPointRef RoutePointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	// Mode restriction assessments for ROUTE LINK +v1.2.2
	ModeRestrictionAssessments *ModeRestrictionAssessmentsRelStructure `xml:"modeRestrictionAssessments,omitempty" json:"modeRestrictionAssessments,omitempty"`
}

// ModeRestrictionAssessmentsRelStructure represents the modeRestrictionAssessments_RelStructure element
// Type for a list of MODE RESTRICTION ASSESSMENT.
type ModeRestrictionAssessmentsRelStructure struct {
	ContainmentAggregationStructure
	ModeRestrictionAssessmentRef []ModeRestrictionAssessmentRef `xml:"ModeRestrictionAssessmentRef,omitempty" json:"ModeRestrictionAssessmentRef,omitempty"`
	ModeRestrictionAssessment []ModeRestrictionAssessment `xml:"ModeRestrictionAssessment,omitempty" json:"ModeRestrictionAssessment,omitempty"`
}

// ModeRestrictionAssessmentVersionStructure represents the ModeRestrictionAssessment_VersionStructure element
// Type for MODE RESTRICTION ASSESSMENT.
type ModeRestrictionAssessmentVersionStructure struct {
	DataManagedObjectViewStructure
	// Whether modes is to be excluded. Default is true.
	Exclude *bool `xml:"Exclude,omitempty" json:"Exclude,omitempty"`
	// Transport MODES to which restriction applies
	TransportModes *TransportModesRelStructure `xml:"transportModes,omitempty" json:"transportModes,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	// Minimum number of passengers to be able to use.
	MinimumNumberOfPassengers *int `xml:"MinimumNumberOfPassengers,omitempty" json:"MinimumNumberOfPassengers,omitempty"`
}

// RouteDerivedViewStructure represents the Route_DerivedViewStructure element
// Type for ROUTE VIEW.
type RouteDerivedViewStructure struct {
	DerivedViewStructure
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	// Mode of ROUTE.
	VehicleMode *AllVehicleModesOfTransportEnumeration `xml:"VehicleMode,omitempty" json:"VehicleMode,omitempty"`
	// Name of Link Sequence.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	LineView *LineView `xml:"LineView,omitempty" json:"LineView,omitempty"`
	DirectionView *DirectionView `xml:"DirectionView,omitempty" json:"DirectionView,omitempty"`
	LinkSequenceProjectionRef *LinkSequenceProjectionRef `xml:"LinkSequenceProjectionRef,omitempty" json:"LinkSequenceProjectionRef,omitempty"`
}

// DirectionDerivedViewStructure represents the Direction_DerivedViewStructure element
// Type for DIRECTION VIEW.
type DirectionDerivedViewStructure struct {
	DerivedViewStructure
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	// Name of DIRECTION.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
}

// Direction represents the Direction element
// A classification for the general orientation of ROUTEs.
type Direction struct {
	DirectionValueStructure
}

// Route represents the Route element
// An ordered list of located POINTs defining one single path through the Road (or rail) network. A ROUTE may pass through the same POINT more than once.
type Route struct {
	RouteVersionStructure
}

// PointOnRoute represents the PointOnRoute element
// A reference to a ROUTE POINT used to define a ROUTE with its order on that ROUTE.
type PointOnRoute struct {
	PointOnRouteVersionedChildStructure
}

// RoutePoint represents the RoutePoint element
// A POINT used to define the shape of a ROUTE through the network.
type RoutePoint struct {
	RoutePointVersionStructure
}

// RouteLink represents the RouteLink element
// An oriented link between two ROUTE POINTs allowing the definition of a unique path through the network. Because ROUTE LINKs are directional   there will be separate links for each direction of a route.
type RouteLink struct {
	RouteLinkVersionStructure
}

// ModeRestrictionAssessment represents the ModeRestrictionAssessment element
// Qualification of a ROUTE LINK resulting from the analysis of restrictions concerning the related INFRASTRUCTURE LINKs  +v1.2.2.
type ModeRestrictionAssessment struct {
	ModeRestrictionAssessmentVersionStructure
}

// RouteView represents the RouteView element
// Annotated reference to a ROUTE.
type RouteView struct {
	RouteDerivedViewStructure
}

// DirectionView represents the DirectionView element
// Simplified View of DIRECTION.
type DirectionView struct {
	DirectionDerivedViewStructure
}

// FlexibleLineVersionStructure represents the FlexibleLine_VersionStructure element
// Type for FLEXIBLE LINE.
type FlexibleLineVersionStructure struct {
	LineVersionStructure
	// Type of FLEXIBLE LINE.
	FlexibleLineType *FlexibleLineTypeEnumeration `xml:"FlexibleLineType,omitempty" json:"FlexibleLineType,omitempty"`
	// Contact for Booking. +v1.1
	BookingContact *ContactStructure `xml:"BookingContact,omitempty" json:"BookingContact,omitempty"`
	// Allowed Ways of Making a BOOKING.
	BookingMethods *BookingMethodEnumeration `xml:"BookingMethods,omitempty" json:"BookingMethods,omitempty"`
	// Who can make a booking. Default is public.
	BookingAccess *BookingAccessEnumeration `xml:"BookingAccess,omitempty" json:"BookingAccess,omitempty"`
	// When Booking can be made. +V1.1
	BookWhen *PurchaseWhenEnumeration `xml:"BookWhen,omitempty" json:"BookWhen,omitempty"`
	// When purchase can be made.  +V1.1
	BuyWhen *PurchaseMomentEnumeration `xml:"BuyWhen,omitempty" json:"BuyWhen,omitempty"`
	// Latest time in day that booking can be made.
	LatestBookingTime *string `xml:"LatestBookingTime,omitempty" json:"LatestBookingTime,omitempty"`
	// Minimum interval in advance of departure day or time that Service may be ordered.
	MinimumBookingPeriod *string `xml:"MinimumBookingPeriod,omitempty" json:"MinimumBookingPeriod,omitempty"`
	// Maximum interval in advance of departure day or time that Service may be ordered. +V1.2..2
	MaximumBookingPeriod *string `xml:"MaximumBookingPeriod,omitempty" json:"MaximumBookingPeriod,omitempty"`
	// URL for booking. +V1.1
	BookingUrl *string `xml:"BookingUrl,omitempty" json:"BookingUrl,omitempty"`
	// Note about booking the FLEXIBLE LINE.
	BookingNote *MultilingualString `xml:"BookingNote,omitempty" json:"BookingNote,omitempty"`
}

// FlexibleRouteVersionStructure represents the FlexibleRoute_VersionStructure element
// Type for a FLEXIBLE ROUTE.
type FlexibleRouteVersionStructure struct {
	RouteVersionStructure
	// Type of FLEXIBLE ROUTE.
	FlexibleRouteType *FlexibleRouteTypeEnumeration `xml:"FlexibleRouteType,omitempty" json:"FlexibleRouteType,omitempty"`
}

// FlexibleLinkPropertiesRelStructure represents the flexibleLinkProperties_RelStructure element
// Type for containment in frame of FLEXIBLE LINK PROPERTies.
type FlexibleLinkPropertiesRelStructure struct {
	ContainmentAggregationStructure
	FlexibleLinkProperties []FlexibleLinkProperties `xml:"FlexibleLinkProperties" json:"FlexibleLinkProperties"`
}

// FlexibleLinkPropertiesVersionedChildStructure represents the FlexibleLinkProperties_VersionedChildStructure element
// Type for FLEXIBLE LINK PROPERTies.
type FlexibleLinkPropertiesVersionedChildStructure struct {
	VersionedChildStructure
	OnwardVehicleMeetingLinkRef *OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
	VehicleMeetingLinkRef *VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	ServiceLinkRef *ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	LineLinkRef *LineLinkRef `xml:"LineLinkRef,omitempty" json:"LineLinkRef,omitempty"`
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	WireLinkRef *WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef *RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef *RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	ActivationLinkRef *ActivationLinkRef `xml:"ActivationLinkRef,omitempty" json:"ActivationLinkRef,omitempty"`
	PathLinkRef *PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	RouteLinkRef *RouteLinkRef `xml:"RouteLinkRef,omitempty" json:"RouteLinkRef,omitempty"`
	// Whether the LINK may be skipped.
	MayBeSkipped *bool `xml:"MayBeSkipped,omitempty" json:"MayBeSkipped,omitempty"`
	// Whether the LINK is on the main ROUTE of the LINE.
	OnMainRoute *bool `xml:"OnMainRoute,omitempty" json:"OnMainRoute,omitempty"`
	// Whether this link is on an unscheduled path route.
	UnscheduledPath *bool `xml:"UnscheduledPath,omitempty" json:"UnscheduledPath,omitempty"`
	// Type of flexible link.
	FlexibleLinkType *FlexibleLinkTypeEnumeration `xml:"FlexibleLinkType,omitempty" json:"FlexibleLinkType,omitempty"`
}

// FlexiblePointPropertiesRelStructure represents the flexiblePointProperties_RelStructure element
// Type for containment in frame of FLEXIBLE POINT PROPERTies.
type FlexiblePointPropertiesRelStructure struct {
	ContainmentAggregationStructure
	FlexiblePointProperties []FlexiblePointProperties `xml:"FlexiblePointProperties" json:"FlexiblePointProperties"`
}

// FlexiblePointPropertiesVersionedChildStructure represents the FlexiblePointProperties_VersionedChildStructure element
// Type for FLEXIBLE POINT PROPERTies.
type FlexiblePointPropertiesVersionedChildStructure struct {
	VersionedChildStructure
	PointOnRouteRef *PointOnRouteRef `xml:"PointOnRouteRef,omitempty" json:"PointOnRouteRef,omitempty"`
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	// Whether the POINT may be skipped.
	MayBeSkipped *bool `xml:"MayBeSkipped,omitempty" json:"MayBeSkipped,omitempty"`
	// Whether the POINT is on the main ROUTE.
	OnMainRoute *bool `xml:"OnMainRoute,omitempty" json:"OnMainRoute,omitempty"`
	// Whether the POINT represents a FLEXIBLE ZONE.
	PointStandingForAzone *bool `xml:"PointStandingForAZone,omitempty" json:"PointStandingForAZone,omitempty"`
	// Whether the ZONE is defined by a GROUP of POINT (true) or a geographical zone defined by its boundary.
	ZoneContainingStops *bool `xml:"ZoneContainingStops,omitempty" json:"ZoneContainingStops,omitempty"`
}

// FlexibleLineDerivedViewStructure represents the FlexibleLine_DerivedViewStructure element
// Type for FLEXIBLE LINE.
type FlexibleLineDerivedViewStructure struct {
	LineDerivedViewStructure
	// Type of FLEXIBLE LINE.
	FlexibleLineType *FlexibleLineTypeEnumeration `xml:"FlexibleLineType,omitempty" json:"FlexibleLineType,omitempty"`
	// Contact for Booking. +v1.1
	BookingContact *ContactStructure `xml:"BookingContact,omitempty" json:"BookingContact,omitempty"`
	// Allowed Ways of Making a BOOKING.
	BookingMethods *BookingMethodEnumeration `xml:"BookingMethods,omitempty" json:"BookingMethods,omitempty"`
	// Who can make a booking. Default is public.
	BookingAccess *BookingAccessEnumeration `xml:"BookingAccess,omitempty" json:"BookingAccess,omitempty"`
	// When Booking can be made. +V1.1
	BookWhen *PurchaseWhenEnumeration `xml:"BookWhen,omitempty" json:"BookWhen,omitempty"`
	// When purchase can be made.  +V1.1
	BuyWhen *PurchaseMomentEnumeration `xml:"BuyWhen,omitempty" json:"BuyWhen,omitempty"`
	// Latest time in day that booking can be made.
	LatestBookingTime *string `xml:"LatestBookingTime,omitempty" json:"LatestBookingTime,omitempty"`
	// Minimum interval in advance of departure day or time that Service may be ordered.
	MinimumBookingPeriod *string `xml:"MinimumBookingPeriod,omitempty" json:"MinimumBookingPeriod,omitempty"`
	// Maximum interval in advance of departure day or time that Service may be ordered. +V1.2..2
	MaximumBookingPeriod *string `xml:"MaximumBookingPeriod,omitempty" json:"MaximumBookingPeriod,omitempty"`
	// URL for booking. +V1.1
	BookingUrl *string `xml:"BookingUrl,omitempty" json:"BookingUrl,omitempty"`
	// Note about booking the FLEXIBLE LINE.
	BookingNote *MultilingualString `xml:"BookingNote,omitempty" json:"BookingNote,omitempty"`
}

// FlexibleLine represents the FlexibleLine element
// A group of FLEXIBLE ROUTEs of which is generally known to the public by a similar name or number and which have common booking arrangements.
type FlexibleLine struct {
	FlexibleLineVersionStructure
}

// FlexibleRoute represents the FlexibleRoute element
// Specialisation of ROUTE for flexible service.  May include both point and zonal areas and ordered and unordered sections.
type FlexibleRoute struct {
	FlexibleRouteVersionStructure
}

// FlexibleLinkProperties represents the FlexibleLinkProperties element
// Flexible properties of a LINK.
type FlexibleLinkProperties struct {
	FlexibleLinkPropertiesVersionedChildStructure
}

// FlexiblePointProperties represents the FlexiblePointProperties element
// Flexible properties of a POINT.
type FlexiblePointProperties struct {
	FlexiblePointPropertiesVersionedChildStructure
}

// FlexibleLineView represents the FlexibleLineView element
// A group of FLEXIBLE ROUTEs of which is generally known to the public by a similar name or number and which have common booking arrangements.
type FlexibleLineView struct {
	FlexibleLineDerivedViewStructure
}

// SectionTypeEnumeration represents the SectionTypeEnumeration enumeration
// Allowed values for a type of LONE SECTION.
type SectionTypeEnumeration string

const (
	// SectionTypeEnumerationTrunk represents trunk
	SectionTypeEnumerationTrunk SectionTypeEnumeration = "trunk"
	// SectionTypeEnumerationBranch represents branch
	SectionTypeEnumerationBranch SectionTypeEnumeration = "branch"
	// SectionTypeEnumerationEyelBranch represents eyelBranch
	SectionTypeEnumerationEyelBranch SectionTypeEnumeration = "eyelBranch"
	// SectionTypeEnumerationEndLoop represents endLoop
	SectionTypeEnumerationEndLoop SectionTypeEnumeration = "endLoop"
	// SectionTypeEnumerationOther represents other
	SectionTypeEnumerationOther SectionTypeEnumeration = "other"
)

// LineSectionPointTypeEnumeration represents the LineSectionPointTypeEnumeration enumeration
// Allowed values for a type of section point.
type LineSectionPointTypeEnumeration string

const (
	// LineSectionPointTypeEnumerationNormal represents normal
	LineSectionPointTypeEnumerationNormal LineSectionPointTypeEnumeration = "normal"
	// LineSectionPointTypeEnumerationInterchange represents interchange
	LineSectionPointTypeEnumerationInterchange LineSectionPointTypeEnumeration = "interchange"
	// LineSectionPointTypeEnumerationMajorInterchange represents majorInterchange
	LineSectionPointTypeEnumerationMajorInterchange LineSectionPointTypeEnumeration = "majorInterchange"
	// LineSectionPointTypeEnumerationTerminus represents terminus
	LineSectionPointTypeEnumerationTerminus LineSectionPointTypeEnumeration = "terminus"
	// LineSectionPointTypeEnumerationMajorTerminus represents majorTerminus
	LineSectionPointTypeEnumerationMajorTerminus LineSectionPointTypeEnumeration = "majorTerminus"
	// LineSectionPointTypeEnumerationOther represents other
	LineSectionPointTypeEnumerationOther LineSectionPointTypeEnumeration = "other"
)

// LineLinkRefStructure represents the LineLinkRefStructure element
// Type for a reference to a LINE LINK.
type LineLinkRefStructure struct {
	LinkRefStructure
}

// LineLinkRefByValueStructure represents the LineLinkRefByValueStructure element
// Type for a reference to a LINE LINK BY VALUE.
type LineLinkRefByValueStructure struct {
	LinkRefByValueStructure
}

// LineSectionRefStructure represents the LineSectionRefStructure element
// Type for a reference to a LINE SECTION.
type LineSectionRefStructure struct {
	SectionRefStructure
}

// LineNetworkRefStructure represents the LineNetworkRefStructure element
// Type for a reference to a LINE NETWORK.
type LineNetworkRefStructure struct {
	VersionOfObjectRefStructure
}

// LineLinkRef represents the LineLinkRef element
// Reference to a LINE LINK.
type LineLinkRef struct {
	LineLinkRefStructure
}

// LineLinkRefByValue represents the LineLinkRefByValue element
// Reference to a LINE LINK BY VALUE.
type LineLinkRefByValue struct {
	LineLinkRefByValueStructure
}

// LineSectionRef represents the LineSectionRef element
// Reference to a LINE SECTION.
type LineSectionRef struct {
	LineSectionRefStructure
}

// LineNetworkRef represents the LineNetworkRef element
// Reference to a LINE NETWORK.
type LineNetworkRef struct {
	LineNetworkRefStructure
}

// LineNetworksInFrameRelStructure represents the lineNetworksInFrame_RelStructure element
// Type for containment in frame of LINE NETWORK.
type LineNetworksInFrameRelStructure struct {
	ContainmentAggregationStructure
	// A description of the connectivity of a line as a set of LINE SECTIONs. This is sufficient to draw a route map for the whole line including branches.
	LineNetwork []LineNetwork `xml:"LineNetwork" json:"LineNetwork"`
}

// LineNetworkVersionStructure represents the LineNetwork_VersionStructure element
// Type for a LINE NETWORK restricts id.
type LineNetworkVersionStructure struct {
	DataManagedObjectStructure
	// Name of LINE NETWORK.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of LINE NETWORK.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef *GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	// LINE SECTIONS within the LINE NETWORK.
	Sections *LineSectionsRelStructure `xml:"sections,omitempty" json:"sections,omitempty"`
}

// LineSectionsRelStructure represents the lineSections_RelStructure element
// Type for a list of LINE SECTIONs.
type LineSectionsRelStructure struct {
	ContainmentAggregationStructure
	LineSectionRef []LineSectionRef `xml:"LineSectionRef,omitempty" json:"LineSectionRef,omitempty"`
	LineSection []LineSection `xml:"LineSection,omitempty" json:"LineSection,omitempty"`
}

// LineSectionVersionStructure represents the LineSection_VersionStructure element
// Type for a LINE SECTION.
type LineSectionVersionStructure struct {
	SectionVersionStructure
	// Ordered collection of POINTS used in the SECTION. +v1.1
	PointsOnSection *PointOnLineSectionsRelStructure `xml:"pointsOnSection,omitempty" json:"pointsOnSection,omitempty"`
	// [DEPRECATED: renamed to PointsOnSection - included for backwards comaptibilty - use PointsOnSection instead Ordered collection of POINTS used in the COMMON SECTION.
	Members *CommonSectionPointMembersRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	// Reverse direction ordered sequence of POINTS Used in the COMMON SECTION. +v1.1
	ReversePointsOnSection *PointOnLineSectionsRelStructure `xml:"reversePointsOnSection,omitempty" json:"reversePointsOnSection,omitempty"`
	// DEPRECATED - use reversePoibtsOnSection instead Reverse direction ordered sequence of POINTS Used in the COMMON SECTION.
	ReverseMembers *CommonSectionPointMembersRelStructure `xml:"reverseMembers,omitempty" json:"reverseMembers,omitempty"`
	// Nature of LINE SECTION. Default is trunK.
	SectionType *SectionTypeEnumeration `xml:"SectionType,omitempty" json:"SectionType,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
}

// PointOnLineSectionsRelStructure represents the pointOnLineSections_RelStructure element
// Type for a list of POINTS ON LINE SECTIONs.
type PointOnLineSectionsRelStructure struct {
	ContainmentAggregationStructure
	PointOnLineSection []PointOnLineSection `xml:"PointOnLineSection" json:"PointOnLineSection"`
}

// PointOnLineSectionVersionedChildStructure represents the PointOnLineSection_VersionedChildStructure element
// Type for a  POINT on LINE SECTION.
type PointOnLineSectionVersionedChildStructure struct {
	PointOnSectionVersionedChildStructure
	// Classification of Point Member.
	LineSectionPointType *LineSectionPointTypeEnumeration `xml:"LineSectionPointType,omitempty" json:"LineSectionPointType,omitempty"`
	// Whether point is to be shown as Accessible.
	ShowAsAccessible *bool `xml:"ShowAsAccessible,omitempty" json:"ShowAsAccessible,omitempty"`
	// Connecting Vehicle Modes to show for Point if different from  point.
	ConnectingVehicleModes *VehicleModeEnumeration `xml:"ConnectingVehicleModes,omitempty" json:"ConnectingVehicleModes,omitempty"`
}

// LineNetwork represents the LineNetwork element
// A description of the topological connectivity of a LINE as a set of LINE SECTIONs. This is sufficient to draw a route map for the whole line including branches and loops.
type LineNetwork struct {
	LineNetworkVersionStructure
}

// LineSection represents the LineSection element
// A section of a LINE NETWORK comprising an edge between two nodes. Not directional.
type LineSection struct {
	LineSectionVersionStructure
}

// PointOnLineSection represents the PointOnLineSection element
// Inclusion of a POINT on a LINE SECTION. +v1.1
type PointOnLineSection struct {
	PointOnLineSectionVersionedChildStructure
}

// LineSectionPointMember represents the LineSectionPointMember element
// [DEPRECATED use POINT ON LINE SECTION INSTEAD ] An ordered set of LINKs for a line.
type LineSectionPointMember struct {
	PointOnLineSectionVersionedChildStructure
}

// CommonSectionRefStructure represents the CommonSectionRefStructure element
// Type for a reference to a COMMON SECTION.
type CommonSectionRefStructure struct {
	SectionRefStructure
}

// CommonSectionRef represents the CommonSectionRef element
// Reference to a COMMON SECTION.
type CommonSectionRef struct {
	CommonSectionRefStructure
}

// ParentCommonSectionRef represents the ParentCommonSectionRef element
// Reference to a COMMON SECTION.
type ParentCommonSectionRef struct {
	CommonSectionRefStructure
}

// CommonSectionsInFrameRelStructure represents the commonSectionsInFrame_RelStructure element
// Type for containment in frame of COMMON SECTION.
type CommonSectionsInFrameRelStructure struct {
	ContainmentAggregationStructure
	CommonSection []CommonSection `xml:"CommonSection" json:"CommonSection"`
}

// CommonSectionVersionStructure represents the CommonSection_VersionStructure element
// Type for COMMON SECTION.
type CommonSectionVersionStructure struct {
	SectionVersionStructure
	// Ordered collection of POINTS used in the SECTION.
	PointsOnSection *PointsOnSectionRelStructure `xml:"pointsOnSection,omitempty" json:"pointsOnSection,omitempty"`
	// [DEPRECATED: renamed to PointsOnSection - included for backwards comaptibilty - use PointsOnSection instead Ordered collection of POINTS used in the COMMON SECTION.
	Members *CommonSectionPointMembersRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// CommonSection represents the CommonSection element
// A shared set of LINKS or POINTs. A part of a public transport network where the ROUTEs of several JOURNEY PATTERNs are going in parallel and where the synchronisation of SERVICE JOURNEYs may be planned and controlled with respect to commonly used LINKs and STOP POINTs. COMMON SECTIONs are defined arbitrarily and need not cover the total lengths of topologically bundled sections.
type CommonSection struct {
	CommonSectionVersionStructure
}

// ServiceJourneyPatternTypeEnumeration represents the ServiceJourneyPatternTypeEnumeration enumeration
// Allowed values for TYPE OF SERVICE JOURNEY PATTERN.
type ServiceJourneyPatternTypeEnumeration string

const (
	// ServiceJourneyPatternTypeEnumerationPassenger represents passenger
	ServiceJourneyPatternTypeEnumerationPassenger ServiceJourneyPatternTypeEnumeration = "passenger"
	// ServiceJourneyPatternTypeEnumerationGarageRunOut represents garageRunOut
	// INTERCHANGE is considered a possible connection between journeys.
	ServiceJourneyPatternTypeEnumerationGarageRunOut ServiceJourneyPatternTypeEnumeration = "garageRunOut"
	// ServiceJourneyPatternTypeEnumerationGarageRunIn represents garageRunIn
	// INTERCHANGE is advertised to public as a possible connection between journeys.
	ServiceJourneyPatternTypeEnumerationGarageRunIn ServiceJourneyPatternTypeEnumeration = "garageRunIn"
	// ServiceJourneyPatternTypeEnumerationTurningManoeuvre represents turningManoeuvre
	// INTERCHANGE is actively managed as a possible connection between journeys and passengers are informed of real-time alterations.
	ServiceJourneyPatternTypeEnumerationTurningManoeuvre ServiceJourneyPatternTypeEnumeration = "turningManoeuvre"
	// ServiceJourneyPatternTypeEnumerationOther represents other
	ServiceJourneyPatternTypeEnumerationOther ServiceJourneyPatternTypeEnumeration = "other"
)

// StopUseEnumeration represents the StopUseEnumeration enumeration
// Allowed values for Stop Use.
type StopUseEnumeration string

const (
	// StopUseEnumerationStopUseEnumerationAccess represents access
	// Stop may be used to access transport system.
	StopUseEnumerationStopUseEnumerationAccess StopUseEnumeration = "access"
	// StopUseEnumerationStopUseEnumerationInterchangeOnly represents interchangeOnly
	// Stop may only be used for interchange. Passengers may not enter or exit the station.
	StopUseEnumerationStopUseEnumerationInterchangeOnly StopUseEnumeration = "interchangeOnly"
	// StopUseEnumerationStopUseEnumerationPassthrough represents passthrough
	// Vehicle passes through without stopping.
	StopUseEnumerationStopUseEnumerationPassthrough StopUseEnumeration = "passthrough"
	// StopUseEnumerationStopUseEnumerationNoBoardingOrAlighting represents noBoardingOrAlighting
	StopUseEnumerationStopUseEnumerationNoBoardingOrAlighting StopUseEnumeration = "noBoardingOrAlighting"
)

// SideInDirectionOfTravelEnumeration represents the SideInDirectionOfTravelEnumeration enumeration
// Allowed values for sides in direction of travel to board and alight.
type SideInDirectionOfTravelEnumeration string

const (
	// SideInDirectionOfTravelEnumerationLeft represents left
	SideInDirectionOfTravelEnumerationLeft SideInDirectionOfTravelEnumeration = "left"
	// SideInDirectionOfTravelEnumerationRight represents right
	SideInDirectionOfTravelEnumerationRight SideInDirectionOfTravelEnumeration = "right"
	// SideInDirectionOfTravelEnumerationBoth represents both
	// In special cases the vehicle can be boarded and/or alighted from both sides.
	SideInDirectionOfTravelEnumerationBoth SideInDirectionOfTravelEnumeration = "both"
	// SideInDirectionOfTravelEnumerationUnknown represents unknown
	// Only to be used, when there is really no value to be defined. The side is a rather important element to support PRM.
	SideInDirectionOfTravelEnumerationUnknown SideInDirectionOfTravelEnumeration = "unknown"
)

// RequestMethodTypeEnumeration represents the RequestMethodTypeEnumeration enumeration
// Allowed values for Stop RequestMethod
type RequestMethodTypeEnumeration string

const (
	// RequestMethodTypeEnumerationNoneRequired represents noneRequired
	// No action required to request stop
	RequestMethodTypeEnumerationNoneRequired RequestMethodTypeEnumeration = "noneRequired"
	// RequestMethodTypeEnumerationHandSignal represents handSignal
	// Make hand signal to request stop
	RequestMethodTypeEnumerationHandSignal RequestMethodTypeEnumeration = "handSignal"
	// RequestMethodTypeEnumerationTurnOnLight represents turnOnLight
	// Call number to request stop
	RequestMethodTypeEnumerationTurnOnLight RequestMethodTypeEnumeration = "turnOnLight"
	// RequestMethodTypeEnumerationStopButton represents stopButton
	// Press button at stop to request stop
	RequestMethodTypeEnumerationStopButton RequestMethodTypeEnumeration = "stopButton"
	// RequestMethodTypeEnumerationPhoneCall represents phoneCall
	// Call number to request stop
	RequestMethodTypeEnumerationPhoneCall RequestMethodTypeEnumeration = "phoneCall"
	// RequestMethodTypeEnumerationMobileApp represents mobileApp
	// Use mobile Application to request stop
	RequestMethodTypeEnumerationMobileApp RequestMethodTypeEnumeration = "mobileApp"
	// RequestMethodTypeEnumerationSms represents sms
	// Use Sms to request stop
	RequestMethodTypeEnumerationSms RequestMethodTypeEnumeration = "sms"
	// RequestMethodTypeEnumerationSpeakToDriverOnboard represents speakToDriverOnboard
	// Tell the driver to request stop. Mainly used for on demand traffic, where the route depends on where passengers want to leave the vehicle.
	RequestMethodTypeEnumerationSpeakToDriverOnboard RequestMethodTypeEnumeration = "speakToDriverOnboard"
	// RequestMethodTypeEnumerationOther represents other
	// Use other method to request stop
	RequestMethodTypeEnumerationOther RequestMethodTypeEnumeration = "other"
)

// DynamicAdvertisementEnumeration represents the DynamicAdvertisementEnumeration enumeration
// Allowed values for Dynamic Advertisement.
type DynamicAdvertisementEnumeration string

const (
	// DynamicAdvertisementEnumerationAlways represents always
	// Stop is always advertised to public.
	DynamicAdvertisementEnumerationAlways DynamicAdvertisementEnumeration = "always"
	// DynamicAdvertisementEnumerationNever represents never
	// Stop is not advertised to public.
	DynamicAdvertisementEnumerationNever DynamicAdvertisementEnumeration = "never"
	// DynamicAdvertisementEnumerationOnlyIfOrdered represents onlyIfOrdered
	// Stop is only advertised to public if they booked to go to stop.
	DynamicAdvertisementEnumerationOnlyIfOrdered DynamicAdvertisementEnumeration = "onlyIfOrdered"
	// DynamicAdvertisementEnumerationOnlyIfSignedOn represents onlyIfSignedOn
	// Stop is only advertised to public if they are logged into system.
	DynamicAdvertisementEnumerationOnlyIfSignedOn DynamicAdvertisementEnumeration = "onlyIfSignedOn"
)

// ScheduledStopPointRefStructure represents the ScheduledStopPointRefStructure element
// Type for a reference to a SCHEDULED STOP POINT.
type ScheduledStopPointRefStructure struct {
	TimingPointRefStructure
}

// ScheduledStopPointRefsRelStructure represents the scheduledStopPointRefs_RelStructure element
// Type for a list of SCHEDULED STOP POINTs.
type ScheduledStopPointRefsRelStructure struct {
	OneToManyRelationshipStructure
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
}

// ConnectionRefStructure represents the ConnectionRefStructure element
// Type for a reference to a CONNECTION link.
type ConnectionRefStructure struct {
	TransferRefStructure
}

// ServiceLinkRefStructure represents the ServiceLinkRefStructure element
// Type for a reference to a SERVICE LINK.
type ServiceLinkRefStructure struct {
	TimingLinkRefStructure
}

// ServiceLinkRefByValueStructure represents the ServiceLinkRefByValueStructure element
// Type for a reference to a SERVICE LINK BY VALUE.
type ServiceLinkRefByValueStructure struct {
	LinkRefByValueStructure
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
}

// ServicePatternRefStructure represents the ServicePatternRefStructure element
// Type for a reference to a SERVICE PATTERN.
type ServicePatternRefStructure struct {
	JourneyPatternRefStructure
}

// ServiceJourneyPatternRefStructure represents the ServiceJourneyPatternRefStructure element
// Type for a reference to a SERVICE JOURNEY PATTERN.
type ServiceJourneyPatternRefStructure struct {
	JourneyPatternRefStructure
}

// StopPointInJourneyPatternRefStructure represents the StopPointInJourneyPatternRefStructure element
// Type for a reference to a STOP POINT IN SEQUENCE.
type StopPointInJourneyPatternRefStructure struct {
	PointInJourneyPatternRefStructure
}

// ServiceLinkInSequenceRefStructure represents the ServiceLinkInSequenceRefStructure element
// Type for a reference to a SERVICE LINK IN SEQUENCE.
type ServiceLinkInSequenceRefStructure struct {
	LinkInSequenceRefStructure
}

// StopAreaRefStructure represents the StopAreaRefStructure element
// Type for a reference to a STOP AREA.
type StopAreaRefStructure struct {
	ZoneRefStructure
}

// StopAreaRefsRelStructure represents the stopAreaRefs_RelStructure element
// Type for a list of STOP AREAs.
type StopAreaRefsRelStructure struct {
	OneToManyRelationshipStructure
	// Reference to the identifier of a stop area.
	StopAreaRef []StopAreaRefStructure `xml:"StopAreaRef" json:"StopAreaRef"`
}

// ScheduledStopPointRef represents the ScheduledStopPointRef element
// Reference to a SCHEDULED STOP POINT.
type ScheduledStopPointRef struct {
	ScheduledStopPointRefStructure
}

// ConnectionRef represents the ConnectionRef element
// Reference to a CONNECTION link.
type ConnectionRef struct {
	ConnectionRefStructure
}

// ServiceLinkRef represents the ServiceLinkRef element
// Reference to a SERVICE LINK.
type ServiceLinkRef struct {
	ServiceLinkRefStructure
}

// ServiceLinkRefByValue represents the ServiceLinkRefByValue element
// Reference to a SERVICE LINK BY VALUE.
type ServiceLinkRefByValue struct {
	ServiceLinkRefByValueStructure
}

// ServicePatternRef represents the ServicePatternRef element
// Reference to a SERVICE PATTERN.
type ServicePatternRef struct {
	ServicePatternRefStructure
}

// ServiceJourneyPatternRef represents the ServiceJourneyPatternRef element
// Reference to a SERVICE JOURNEY PATTERN.
type ServiceJourneyPatternRef struct {
	ServiceJourneyPatternRefStructure
}

// StopPointInJourneyPatternRef represents the StopPointInJourneyPatternRef element
// Reference to a STOP POINT IN SEQUENCE. If given by context does not need to be stated.
type StopPointInJourneyPatternRef struct {
	StopPointInJourneyPatternRefStructure
}

// ServiceLinkInSequenceRef represents the ServiceLinkInSequenceRef element
// Reference to a SERVICE LINK IN SEQUENCE. If given by context does not need to be stated.
type ServiceLinkInSequenceRef struct {
	ServiceLinkInSequenceRefStructure
}

// StopAreaRef represents the StopAreaRef element
// Reference to a STOP AREA.
type StopAreaRef struct {
	StopAreaRefStructure
}

// SeriesPresentationEnumeration represents the SeriesPresentationEnumeration enumeration
// Allowed values for Fare Point Presentation.
type SeriesPresentationEnumeration string

const (
	// SeriesPresentationEnumerationNone represents none
	SeriesPresentationEnumerationNone SeriesPresentationEnumeration = "none"
	// SeriesPresentationEnumerationRequired represents required
	SeriesPresentationEnumerationRequired SeriesPresentationEnumeration = "required"
	// SeriesPresentationEnumerationOptionalLeft represents optionalLeft
	SeriesPresentationEnumerationOptionalLeft SeriesPresentationEnumeration = "optionalLeft"
	// SeriesPresentationEnumerationOptionalRight represents optionalRight
	SeriesPresentationEnumerationOptionalRight SeriesPresentationEnumeration = "optionalRight"
)

// ZoneTopologyEnumeration represents the ZoneTopologyEnumeration enumeration
// Allowed values for Fare Zone Topology.
type ZoneTopologyEnumeration string

const (
	// ZoneTopologyEnumerationOverlapping represents overlapping
	// Zones are of arbitrary shape and may overlap.
	ZoneTopologyEnumerationOverlapping ZoneTopologyEnumeration = "overlapping"
	// ZoneTopologyEnumerationHoneycomb represents honeycomb
	// Zones are arranged as a tiled honeycomb of regular polygons (e.g. Hexagons, squares etc. The zones are contiguous and do not overlap.
	ZoneTopologyEnumerationHoneycomb ZoneTopologyEnumeration = "honeycomb"
	// ZoneTopologyEnumerationRing represents ring
	// Zones are arranged in rings . The nested inner zones are included in any containing  outer zones.
	ZoneTopologyEnumerationRing ZoneTopologyEnumeration = "ring"
	// ZoneTopologyEnumerationAnnular represents annular
	// Zones are arranged in tiled hollow rings. The area of any  immediately nested zone  is excluded from the  containing  outer zone.
	ZoneTopologyEnumerationAnnular ZoneTopologyEnumeration = "annular"
	// ZoneTopologyEnumerationNested represents nested
	// Zones are nested, that is some zones are fully contained within other zones and are automatically included if the outer zone is selected. They may also overlap their neighbours.
	ZoneTopologyEnumerationNested ZoneTopologyEnumeration = "nested"
	// ZoneTopologyEnumerationTiled represents tiled
	// Zones are arranged as adjacent tiles or arbitrary shapes that do not overlap.
	ZoneTopologyEnumerationTiled ZoneTopologyEnumeration = "tiled"
	// ZoneTopologyEnumerationSequence represents sequence
	// Zones are arranged as adjacent tiles in sequence that touch at either or both ends. They do not overlap.
	ZoneTopologyEnumerationSequence ZoneTopologyEnumeration = "sequence"
	// ZoneTopologyEnumerationOverlappingSequence represents overlappingSequence
	// Zones are arranged as adjacent tiles in sequence that touch at either or both ends. They may partially overlap such that some stops are in both zones.
	ZoneTopologyEnumerationOverlappingSequence ZoneTopologyEnumeration = "overlappingSequence"
	// ZoneTopologyEnumerationOther represents other
	ZoneTopologyEnumerationOther ZoneTopologyEnumeration = "other"
)

// ScopingMethodEnumeration represents the ScopingMethodEnumeration enumeration
// Allowed values for FARE ZONE Scoping Method
type ScopingMethodEnumeration string

const (
	// ScopingMethodEnumerationExplicitStops represents explicitStops
	// Stops that are members of the zone are explicitly listed.
	ScopingMethodEnumerationExplicitStops ScopingMethodEnumeration = "explicitStops"
	// ScopingMethodEnumerationImplicitSpatialProjection represents implicitSpatialProjection
	// Any stop that is spatially contained within the zone is assumed to be a  member.
	ScopingMethodEnumerationImplicitSpatialProjection ScopingMethodEnumeration = "implicitSpatialProjection"
	// ScopingMethodEnumerationExplicitPeripheryStops represents explicitPeripheryStops
	// The extent of the zone is indicated by a set of stops marking the border points on the periphery of the FARE ZONE. Any stop that is spatially contained within the indicated zone is assumed to be a  member.
	ScopingMethodEnumerationExplicitPeripheryStops ScopingMethodEnumeration = "explicitPeripheryStops"
	// ScopingMethodEnumerationOther represents other
	// Other method
	ScopingMethodEnumerationOther ScopingMethodEnumeration = "other"
)

// FareScheduledStopPointRefStructure represents the FareScheduledStopPointRefStructure element
// Type for a reference to a FARE SCHEDULED STOP POINT.
type FareScheduledStopPointRefStructure struct {
	ScheduledStopPointRefStructure
}

// FareScheduledStopPointRefsRelStructure represents the fareScheduledStopPointRefs_RelStructure element
// Type for a list of FARE SCHEDULED STOP POINTs.
type FareScheduledStopPointRefsRelStructure struct {
	OneToManyRelationshipStructure
	FareScheduledStopPointRef []FareScheduledStopPointRef `xml:"FareScheduledStopPointRef" json:"FareScheduledStopPointRef"`
}

// BorderPointRefStructure represents the BorderPointRefStructure element
// Type for a reference to a BORDER POINT.
type BorderPointRefStructure struct {
	TimingPointRefStructure
}

// FarePointInPatternRefStructure represents the FarePointInPatternRefStructure element
// Type for Reference to a FARE POINT IN JOURNEY PATTERN.
type FarePointInPatternRefStructure struct {
	PointInJourneyPatternRefStructure
}

// FareSectionRefStructure represents the FareSectionRefStructure element
// Type for Reference to a FARE SECTION.
type FareSectionRefStructure struct {
	GeneralSectionRefStructure
}

// FareZoneRefStructure represents the FareZoneRefStructure element
// Type for Reference to a FARE ZONE.
type FareZoneRefStructure struct {
	TariffZoneRefStructure
}

// FareZoneRefsRelStructure represents the fareZoneRefs_RelStructure element
// Type for a list of FARE ZONEs
type FareZoneRefsRelStructure struct {
	OneToManyRelationshipStructure
	FareZoneRef []FareZoneRef `xml:"FareZoneRef" json:"FareZoneRef"`
}

// FareScheduledStopPointRef represents the FareScheduledStopPointRef element
// Reference to a FARE SCHEDULED STOP POINT.
type FareScheduledStopPointRef struct {
	FareScheduledStopPointRefStructure
}

// BorderPointRef represents the BorderPointRef element
// Reference to a BORDER POINT. (TAP TSI B.1.3 Border Boint Code).
type BorderPointRef struct {
	BorderPointRefStructure
}

// FarePointInPatternRef represents the FarePointInPatternRef element
// Reference to a FARE POINT IN JOURNEY PATTERN.
type FarePointInPatternRef struct {
	FarePointInPatternRefStructure
}

// FareSectionRef represents the FareSectionRef element
// Reference to a FARE SECTION.
type FareSectionRef struct {
	FareSectionRefStructure
}

// FareZoneRef represents the FareZoneRef element
// Reference to a FARE ZONE.
type FareZoneRef struct {
	FareZoneRefStructure
}

// JourneyPatternsInFrameRelStructure represents the journeyPatternsInFrame_RelStructure element
// Type for containment in frame of JOURNEY PATTERNs.
type JourneyPatternsInFrameRelStructure struct {
	ContainmentAggregationStructure
	ServiceJourneyPattern []ServiceJourneyPattern `xml:"ServiceJourneyPattern,omitempty" json:"ServiceJourneyPattern,omitempty"`
	DeadRunJourneyPattern []DeadRunJourneyPattern `xml:"DeadRunJourneyPattern,omitempty" json:"DeadRunJourneyPattern,omitempty"`
	JourneyPattern []JourneyPattern `xml:"JourneyPattern,omitempty" json:"JourneyPattern,omitempty"`
}

// JourneyPatternVersionStructure represents the JourneyPattern_VersionStructure element
// Type for JOURNEY PATTERN.
type JourneyPatternVersionStructure struct {
	LinkSequenceVersionStructure
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	RouteView *RouteView `xml:"RouteView,omitempty" json:"RouteView,omitempty"`
	// DIRECTION of JOURNEY PATTERN. Should be same as for ROUTE on which PATTERN is based.
	DirectionType *DirectionTypeEnumeration `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	DirectionView *DirectionView `xml:"DirectionView,omitempty" json:"DirectionView,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	// Destination / Direction name for JOURNEY PATTERN.
	DestinationDisplayView *DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
	TypeOfJourneyPatternRef *TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	// Reference to a TIMING PATTERN.
	TimingPatternRef *TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	// Notices for JOURNEY PATTERN Points may be
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// Ordered run times for JOURNEY PATTERN, specific to a TIME DEMAND TYPE.
	RunTimes *JourneyPatternRunTimesRelStructure `xml:"runTimes,omitempty" json:"runTimes,omitempty"`
	// WAIT TIMEs for JOURNEY PATTERN, specific to a TIME DEMAND TYPE.
	WaitTimes *JourneyPatternWaitTimesRelStructure `xml:"waitTimes,omitempty" json:"waitTimes,omitempty"`
	// Wait times for TIMING POINT. There may be different times for different time demands.
	Headways *JourneyPatternHeadwaysRelStructure `xml:"headways,omitempty" json:"headways,omitempty"`
	// Layovers associated with JOURNEY PATTERN.
	Layovers *JourneyPatternLayoversRelStructure `xml:"layovers,omitempty" json:"layovers,omitempty"`
	// Sequence of points in JOURNEY PATTERN Points may be SCHEDULED STOP POINTs or TIMING POINTs.
	PointsInSequence *PointsInJourneyPatternRelStructure `xml:"pointsInSequence,omitempty" json:"pointsInSequence,omitempty"`
	// Sequence of points in JOURNEY PATTERN Points may be SCHEDULED STOP POINTs or TIMING POINTs.
	LinksInSequence *LinksInJourneyPatternRelStructure `xml:"linksInSequence,omitempty" json:"linksInSequence,omitempty"`
}

// DeadRunJourneyPatternVersionStructure represents the DeadRunJourneyPattern_VersionStructure element
// Type for DEAD RUN JOURNEY PATTERN.
type DeadRunJourneyPatternVersionStructure struct {
	JourneyPatternVersionStructure
}

// PointsInJourneyPatternRelStructure represents the pointsInJourneyPattern_RelStructure element
// Type for POINT IN JOURNEY PATTERN.
type PointsInJourneyPatternRelStructure struct {
	StrictContainmentAggregationStructure
	PointInJourneyPattern []PointInJourneyPattern `xml:"PointInJourneyPattern" json:"PointInJourneyPattern"`
	StopPointInJourneyPattern []StopPointInJourneyPattern `xml:"StopPointInJourneyPattern" json:"StopPointInJourneyPattern"`
	TimingPointInJourneyPattern []TimingPointInJourneyPattern `xml:"TimingPointInJourneyPattern" json:"TimingPointInJourneyPattern"`
}

// PointInJourneyPatternVersionedChildStructure represents the PointInJourneyPattern_VersionedChildStructure element
// Type for POINT IN JOURNEY PATTERN.
type PointInJourneyPatternVersionedChildStructure struct {
	PointInLinkSequenceVersionedChildStructure
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	DestinationDisplayView *DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
	// Destinations that the SERVICE goes via.
	Vias *ViasRelStructure `xml:"vias,omitempty" json:"vias,omitempty"`
	FlexiblePointProperties *FlexiblePointProperties `xml:"FlexiblePointProperties,omitempty" json:"FlexiblePointProperties,omitempty"`
	// Whether DESTINATION DISPLAY should be updated at this point. If DESTINATION NAME value is different from Previous stop this is implicit.
	ChangeOfDestinationDisplay *bool `xml:"ChangeOfDestinationDisplay,omitempty" json:"ChangeOfDestinationDisplay,omitempty"`
	// Whether Service Requirements Change at this point.
	ChangeOfServiceRequirements *bool `xml:"ChangeOfServiceRequirements,omitempty" json:"ChangeOfServiceRequirements,omitempty"`
	// NOTICEs for POINT IN JOURNEY PATTERN.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// LinksInJourneyPatternRelStructure represents the linksInJourneyPattern_RelStructure element
// Type for LINK IN JOURNEY PATTERN.
type LinksInJourneyPatternRelStructure struct {
	StrictContainmentAggregationStructure
	ServiceLinkInJourneyPattern []ServiceLinkInJourneyPattern `xml:"ServiceLinkInJourneyPattern,omitempty" json:"ServiceLinkInJourneyPattern,omitempty"`
	TimingLinkInJourneyPattern []TimingLinkInJourneyPattern `xml:"TimingLinkInJourneyPattern,omitempty" json:"TimingLinkInJourneyPattern,omitempty"`
}

// LinkInJourneyPatternVersionedChildStructure represents the LinkInJourneyPattern_VersionedChildStructure element
// Type for LINK IN JOURNEY PATTERN.
type LinkInJourneyPatternVersionedChildStructure struct {
	LinkInLinkSequenceVersionedChildStructure
	ServiceLinkRef *ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
}

// JourneyPatternDerivedViewStructure represents the JourneyPattern_DerivedViewStructure element
// Type for JOURNEY PATTERN VIEW.
type JourneyPatternDerivedViewStructure struct {
	DerivedViewStructure
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	RouteView *RouteView `xml:"RouteView,omitempty" json:"RouteView,omitempty"`
	// DIRECTION of JOURNEY PATTERN. Should be same as for ROUTE on which PATTERN is based.
	DirectionType *DirectionTypeEnumeration `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	DirectionView *DirectionView `xml:"DirectionView,omitempty" json:"DirectionView,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	// Destination / Direction name for JOURNEY PATTERN.
	DestinationDisplayView *DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
	TypeOfJourneyPatternRef *TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	// Reference to a TIMING PATTERN.
	TimingPatternRef *TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	// Notices for JOURNEY PATTERN Points may be
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// TypeOfJourneyPatternValueStructure represents the TypeOfJourneyPattern_ValueStructure element
// Type for a TYPE OF JOURNEY PATTERN.
type TypeOfJourneyPatternValueStructure struct {
	TypeOfEntityVersionStructure
}

// JourneyPattern represents the JourneyPattern element
// An ordered list of SCHEDULED STOP POINTs and TIMING POINTs on a single ROUTE, describing the pattern of working for public transport vehicles. A JOURNEY PATTERN may pass through the same POINT more than once. The first point of a JOURNEY PATTERN is the origin. The last point is the destination.
type JourneyPattern struct {
	JourneyPatternVersionStructure
}

// DeadRunJourneyPattern represents the DeadRunJourneyPattern element
// A JOURNEY PATTERN to be used for DEAD RUNs.
type DeadRunJourneyPattern struct {
	DeadRunJourneyPatternVersionStructure
}

// PointInJourneyPattern represents the PointInJourneyPattern element
// A STOP POINT or TIMING POINT in a JOURNEY PATTERN with its order in that JOURNEY PATTERN.
type PointInJourneyPattern struct {
	PointInJourneyPatternVersionedChildStructure
}

// LinkInJourneyPattern represents the LinkInJourneyPattern element
// A SERVICE LINK or TIMING LINK in a JOURNEY PATTERN with its order in that JOURNEY PATTERN.
type LinkInJourneyPattern struct {
	LinkInJourneyPatternVersionedChildStructure
}

// JourneyPatternView represents the JourneyPatternView element
// Simplified view of a JOURNEY PATTERN.
type JourneyPatternView struct {
	JourneyPatternDerivedViewStructure
}

// TypeOfJourneyPattern represents the TypeOfJourneyPattern element
// A classification of JOURNEY PATTERNs according to their functional purpose.
type TypeOfJourneyPattern struct {
	TypeOfJourneyPatternValueStructure
}

// SiteConnectionRefStructure represents the SiteConnectionRefStructure element
// Type for a reference to a SITE CONNECTION link.
type SiteConnectionRefStructure struct {
	ConnectionRefStructure
}

// DefaultConnectionRefStructure represents the DefaultConnectionRefStructure element
// Type for a reference to a DEFAULT TRANSFER link.
type DefaultConnectionRefStructure struct {
	ConnectionRefStructure
}

// SiteConnectionRef represents the SiteConnectionRef element
// Reference to a SITE CONNECTION link.
type SiteConnectionRef struct {
	SiteConnectionRefStructure
}

// DefaultConnectionRef represents the DefaultConnectionRef element
// Reference to a DEFAULT TRANSFER link.
type DefaultConnectionRef struct {
	DefaultConnectionRefStructure
}

// PointOfInterestSpaceTypeEnumeration represents the PointOfInterestSpaceTypeEnumeration enumeration
// Allowed values for POINT OF INTEREST TYPE.
type PointOfInterestSpaceTypeEnumeration string

const (
	// PointOfInterestSpaceTypeEnumerationArena represents arena
	PointOfInterestSpaceTypeEnumerationArena PointOfInterestSpaceTypeEnumeration = "arena"
	// PointOfInterestSpaceTypeEnumerationArcheryArena represents archeryArena
	PointOfInterestSpaceTypeEnumerationArcheryArena PointOfInterestSpaceTypeEnumeration = "archeryArena"
	// PointOfInterestSpaceTypeEnumerationAthleteArea represents athleteArea
	PointOfInterestSpaceTypeEnumerationAthleteArea PointOfInterestSpaceTypeEnumeration = "athleteArea"
	// PointOfInterestSpaceTypeEnumerationAuditorium represents auditorium
	PointOfInterestSpaceTypeEnumerationAuditorium PointOfInterestSpaceTypeEnumeration = "auditorium"
	// PointOfInterestSpaceTypeEnumerationChangingRoom represents changingRoom
	PointOfInterestSpaceTypeEnumerationChangingRoom PointOfInterestSpaceTypeEnumeration = "changingRoom"
	// PointOfInterestSpaceTypeEnumerationCourt represents court
	PointOfInterestSpaceTypeEnumerationCourt PointOfInterestSpaceTypeEnumeration = "court"
	// PointOfInterestSpaceTypeEnumerationDownhillSkiingCourse represents downhillSkiingCourse
	PointOfInterestSpaceTypeEnumerationDownhillSkiingCourse PointOfInterestSpaceTypeEnumeration = "downhillSkiingCourse"
	// PointOfInterestSpaceTypeEnumerationFreestyleSkiingCourse represents freestyleSkiingCourse
	PointOfInterestSpaceTypeEnumerationFreestyleSkiingCourse PointOfInterestSpaceTypeEnumeration = "freestyleSkiingCourse"
	// PointOfInterestSpaceTypeEnumerationSkiboardingArea represents skiboardingArea
	PointOfInterestSpaceTypeEnumerationSkiboardingArea PointOfInterestSpaceTypeEnumeration = "skiboardingArea"
	// PointOfInterestSpaceTypeEnumerationGates represents gates
	PointOfInterestSpaceTypeEnumerationGates PointOfInterestSpaceTypeEnumeration = "gates"
	// PointOfInterestSpaceTypeEnumerationGreenRoom represents greenRoom
	PointOfInterestSpaceTypeEnumerationGreenRoom PointOfInterestSpaceTypeEnumeration = "greenRoom"
	// PointOfInterestSpaceTypeEnumerationHospitalityZone represents hospitalityZone
	PointOfInterestSpaceTypeEnumerationHospitalityZone PointOfInterestSpaceTypeEnumeration = "hospitalityZone"
	// PointOfInterestSpaceTypeEnumerationIceRink represents iceRink
	PointOfInterestSpaceTypeEnumerationIceRink PointOfInterestSpaceTypeEnumeration = "iceRink"
	// PointOfInterestSpaceTypeEnumerationOrchestralPit represents orchestralPit
	PointOfInterestSpaceTypeEnumerationOrchestralPit PointOfInterestSpaceTypeEnumeration = "orchestralPit"
	// PointOfInterestSpaceTypeEnumerationPlayingField represents playingField
	PointOfInterestSpaceTypeEnumerationPlayingField PointOfInterestSpaceTypeEnumeration = "playingField"
	// PointOfInterestSpaceTypeEnumerationPodium represents podium
	PointOfInterestSpaceTypeEnumerationPodium PointOfInterestSpaceTypeEnumeration = "podium"
	// PointOfInterestSpaceTypeEnumerationPool represents pool
	PointOfInterestSpaceTypeEnumerationPool PointOfInterestSpaceTypeEnumeration = "pool"
	// PointOfInterestSpaceTypeEnumerationDivingPool represents divingPool
	PointOfInterestSpaceTypeEnumerationDivingPool PointOfInterestSpaceTypeEnumeration = "divingPool"
	// PointOfInterestSpaceTypeEnumerationPressArea represents pressArea
	PointOfInterestSpaceTypeEnumerationPressArea PointOfInterestSpaceTypeEnumeration = "pressArea"
	// PointOfInterestSpaceTypeEnumerationQueuingAreaForEntrance represents queuingAreaForEntrance
	PointOfInterestSpaceTypeEnumerationQueuingAreaForEntrance PointOfInterestSpaceTypeEnumeration = "queuingAreaForEntrance"
	// PointOfInterestSpaceTypeEnumerationRidingArea represents ridingArea
	PointOfInterestSpaceTypeEnumerationRidingArea PointOfInterestSpaceTypeEnumeration = "ridingArea"
	// PointOfInterestSpaceTypeEnumerationRowingArea represents rowingArea
	PointOfInterestSpaceTypeEnumerationRowingArea PointOfInterestSpaceTypeEnumeration = "rowingArea"
	// PointOfInterestSpaceTypeEnumerationSecurityScreeningArea represents securityScreeningArea
	PointOfInterestSpaceTypeEnumerationSecurityScreeningArea PointOfInterestSpaceTypeEnumeration = "securityScreeningArea"
	// PointOfInterestSpaceTypeEnumerationSledRun represents sledRun
	PointOfInterestSpaceTypeEnumerationSledRun PointOfInterestSpaceTypeEnumeration = "sledRun"
	// PointOfInterestSpaceTypeEnumerationSpectatorTerrace represents spectatorTerrace
	PointOfInterestSpaceTypeEnumerationSpectatorTerrace PointOfInterestSpaceTypeEnumeration = "spectatorTerrace"
	// PointOfInterestSpaceTypeEnumerationSpectatorSeating represents spectatorSeating
	PointOfInterestSpaceTypeEnumerationSpectatorSeating PointOfInterestSpaceTypeEnumeration = "spectatorSeating"
	// PointOfInterestSpaceTypeEnumerationSpectatorStandingArea represents spectatorStandingArea
	PointOfInterestSpaceTypeEnumerationSpectatorStandingArea PointOfInterestSpaceTypeEnumeration = "spectatorStandingArea"
	// PointOfInterestSpaceTypeEnumerationSportsArea represents sportsArea
	PointOfInterestSpaceTypeEnumerationSportsArea PointOfInterestSpaceTypeEnumeration = "sportsArea"
	// PointOfInterestSpaceTypeEnumerationStabling represents stabling
	PointOfInterestSpaceTypeEnumerationStabling PointOfInterestSpaceTypeEnumeration = "stabling"
	// PointOfInterestSpaceTypeEnumerationStage represents stage
	PointOfInterestSpaceTypeEnumerationStage PointOfInterestSpaceTypeEnumeration = "stage"
	// PointOfInterestSpaceTypeEnumerationRing represents ring
	PointOfInterestSpaceTypeEnumerationRing PointOfInterestSpaceTypeEnumeration = "ring"
	// PointOfInterestSpaceTypeEnumerationTicketing represents ticketing
	PointOfInterestSpaceTypeEnumerationTicketing PointOfInterestSpaceTypeEnumeration = "ticketing"
	// PointOfInterestSpaceTypeEnumerationTrack represents track
	PointOfInterestSpaceTypeEnumerationTrack PointOfInterestSpaceTypeEnumeration = "track"
	// PointOfInterestSpaceTypeEnumerationTrackside represents trackside
	PointOfInterestSpaceTypeEnumerationTrackside PointOfInterestSpaceTypeEnumeration = "trackside"
	// PointOfInterestSpaceTypeEnumerationVelodrome represents velodrome
	PointOfInterestSpaceTypeEnumerationVelodrome PointOfInterestSpaceTypeEnumeration = "velodrome"
	// PointOfInterestSpaceTypeEnumerationWarmUpArea represents warmUpArea
	PointOfInterestSpaceTypeEnumerationWarmUpArea PointOfInterestSpaceTypeEnumeration = "warmUpArea"
	// PointOfInterestSpaceTypeEnumerationWaterside represents waterside
	PointOfInterestSpaceTypeEnumerationWaterside PointOfInterestSpaceTypeEnumeration = "waterside"
	// PointOfInterestSpaceTypeEnumerationUndefined represents undefined
	PointOfInterestSpaceTypeEnumerationUndefined PointOfInterestSpaceTypeEnumeration = "undefined"
	// PointOfInterestSpaceTypeEnumerationOther represents other
	PointOfInterestSpaceTypeEnumerationOther PointOfInterestSpaceTypeEnumeration = "other"
)

// PointOfInterestRefStructure represents the PointOfInterestRefStructure element
// Type for a reference to a POINT OF INTEREST.
type PointOfInterestRefStructure struct {
	SiteRefStructure
}

// PointOfInterestRefsRelStructure represents the pointOfInterestRefs_RelStructure element
// Type for a collection of one or more POINTs OF INTEREST.
type PointOfInterestRefsRelStructure struct {
	OneToManyRelationshipStructure
	PointOfInterestRef []PointOfInterestRef `xml:"PointOfInterestRef" json:"PointOfInterestRef"`
}

// PointOfInterestClassificationRefStructure represents the PointOfInterestClassificationRefStructure element
// Type for a reference to a POINT OF INTEREST CLASSIFICATION.
type PointOfInterestClassificationRefStructure struct {
	TypeOfValueRefStructure
}

// PointOfInterestHierarchyRefStructure represents the PointOfInterestHierarchyRefStructure element
// Type for a POINT OF INTEREST CLASSIFICATION HIERARCHY.
type PointOfInterestHierarchyRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// PointOfInterestSpaceRefStructure represents the PointOfInterestSpaceRefStructure element
// Type for reference to a POINT OF INTEREST SPACE.
type PointOfInterestSpaceRefStructure struct {
	SiteComponentRefStructure
}

// PointOfInterestEntranceRefStructure represents the PointOfInterestEntranceRefStructure element
// Type for reference to a POINT OF INTEREST ENTRANCE.
type PointOfInterestEntranceRefStructure struct {
	EntranceRefStructure
}

// PointOfInterestVehicleEntranceRefStructure represents the PointOfInterestVehicleEntranceRefStructure element
// Type for reference to a POINT OF INTEREST VEHICLE ENTRANCE.
type PointOfInterestVehicleEntranceRefStructure struct {
	EntranceRefStructure
}

// PointOfInterestRef represents the PointOfInterestRef element
// Reference to a POINT OF INTEREST.
type PointOfInterestRef struct {
	PointOfInterestRefStructure
}

// PointOfInterestClassificationRef represents the PointOfInterestClassificationRef element
// Classification of a POINT OF INTEREST.
type PointOfInterestClassificationRef struct {
	PointOfInterestClassificationRefStructure
}

// PointOfInterestHierarchyRef represents the PointOfInterestHierarchyRef element
// Classification of a POINT OF INTEREST CLASSIFICATION HIERARCHY.
type PointOfInterestHierarchyRef struct {
	PointOfInterestHierarchyRefStructure
}

// PointOfInterestSpaceRef represents the PointOfInterestSpaceRef element
// Reference to a POINT OF INTEREST SPACE.
type PointOfInterestSpaceRef struct {
	PointOfInterestSpaceRefStructure
}

// PointOfInterestEntranceRef represents the PointOfInterestEntranceRef element
// Reference to a POINT OF INTEREST ENTRANCE.
type PointOfInterestEntranceRef struct {
	PointOfInterestEntranceRefStructure
}

// PointOfInterestVehicleEntranceRef represents the PointOfInterestVehicleEntranceRef element
// Reference to a POINT OF INTEREST VEHICLEENTRANCE.
type PointOfInterestVehicleEntranceRef struct {
	PointOfInterestVehicleEntranceRefStructure
}

// ParkingLayoutEnumeration represents the ParkingLayoutEnumeration enumeration
// Allowed values for PARKING Layout types.
type ParkingLayoutEnumeration string

const (
	// ParkingLayoutEnumerationCovered represents covered
	ParkingLayoutEnumerationCovered ParkingLayoutEnumeration = "covered"
	// ParkingLayoutEnumerationOpenSpace represents openSpace
	ParkingLayoutEnumerationOpenSpace ParkingLayoutEnumeration = "openSpace"
	// ParkingLayoutEnumerationMultistorey represents multistorey
	ParkingLayoutEnumerationMultistorey ParkingLayoutEnumeration = "multistorey"
	// ParkingLayoutEnumerationUnderground represents underground
	ParkingLayoutEnumerationUnderground ParkingLayoutEnumeration = "underground"
	// ParkingLayoutEnumerationRoadside represents roadside
	ParkingLayoutEnumerationRoadside ParkingLayoutEnumeration = "roadside"
	// ParkingLayoutEnumerationUndefined represents undefined
	ParkingLayoutEnumerationUndefined ParkingLayoutEnumeration = "undefined"
	// ParkingLayoutEnumerationOther represents other
	ParkingLayoutEnumerationOther ParkingLayoutEnumeration = "other"
	// ParkingLayoutEnumerationOnPavement represents onPavement
	ParkingLayoutEnumerationOnPavement ParkingLayoutEnumeration = "onPavement"
	// ParkingLayoutEnumerationCycleHire represents cycleHire
	// DEPRECATED 1.2.2 Use onPavement instead
	ParkingLayoutEnumerationCycleHire ParkingLayoutEnumeration = "cycleHire"
)

// ParkingTypeEnumeration represents the ParkingTypeEnumeration enumeration
// Allowed values for PARKING types.
type ParkingTypeEnumeration string

const (
	// ParkingTypeEnumerationParkAndRide represents parkAndRide
	ParkingTypeEnumerationParkAndRide ParkingTypeEnumeration = "parkAndRide"
	// ParkingTypeEnumerationLiftShareParking represents liftShareParking
	ParkingTypeEnumerationLiftShareParking ParkingTypeEnumeration = "liftShareParking"
	// ParkingTypeEnumerationUrbanParking represents urbanParking
	ParkingTypeEnumerationUrbanParking ParkingTypeEnumeration = "urbanParking"
	// ParkingTypeEnumerationAirportParking represents airportParking
	ParkingTypeEnumerationAirportParking ParkingTypeEnumeration = "airportParking"
	// ParkingTypeEnumerationTrainStationParking represents trainStationParking
	ParkingTypeEnumerationTrainStationParking ParkingTypeEnumeration = "trainStationParking"
	// ParkingTypeEnumerationExhibitionCentreParking represents exhibitionCentreParking
	ParkingTypeEnumerationExhibitionCentreParking ParkingTypeEnumeration = "exhibitionCentreParking"
	// ParkingTypeEnumerationRentalCarParking represents rentalCarParking
	ParkingTypeEnumerationRentalCarParking ParkingTypeEnumeration = "rentalCarParking"
	// ParkingTypeEnumerationShoppingCentreParking represents shoppingCentreParking
	ParkingTypeEnumerationShoppingCentreParking ParkingTypeEnumeration = "shoppingCentreParking"
	// ParkingTypeEnumerationMotorwayParking represents motorwayParking
	ParkingTypeEnumerationMotorwayParking ParkingTypeEnumeration = "motorwayParking"
	// ParkingTypeEnumerationRoadside represents roadside
	ParkingTypeEnumerationRoadside ParkingTypeEnumeration = "roadside"
	// ParkingTypeEnumerationParkingZone represents parkingZone
	ParkingTypeEnumerationParkingZone ParkingTypeEnumeration = "parkingZone"
	// ParkingTypeEnumerationCycleRental represents cycleRental
	ParkingTypeEnumerationCycleRental ParkingTypeEnumeration = "cycleRental"
	// ParkingTypeEnumerationUndefined represents undefined
	ParkingTypeEnumerationUndefined ParkingTypeEnumeration = "undefined"
	// ParkingTypeEnumerationOther represents other
	ParkingTypeEnumerationOther ParkingTypeEnumeration = "other"
)

// ParkingPaymentProcessEnumeration represents the ParkingPaymentProcessEnumeration enumeration
// Allowed values for PARKING payment process types.
type ParkingPaymentProcessEnumeration string

const (
	// ParkingPaymentProcessEnumerationFree represents free
	ParkingPaymentProcessEnumerationFree ParkingPaymentProcessEnumeration = "free"
	// ParkingPaymentProcessEnumerationPayAtBay represents payAtBay
	ParkingPaymentProcessEnumerationPayAtBay ParkingPaymentProcessEnumeration = "payAtBay"
	// ParkingPaymentProcessEnumerationPayAndDisplay represents payAndDisplay
	ParkingPaymentProcessEnumerationPayAndDisplay ParkingPaymentProcessEnumeration = "payAndDisplay"
	// ParkingPaymentProcessEnumerationPayAtExitBoothManualCollection represents payAtExitBoothManualCollection
	ParkingPaymentProcessEnumerationPayAtExitBoothManualCollection ParkingPaymentProcessEnumeration = "payAtExitBoothManualCollection"
	// ParkingPaymentProcessEnumerationPayAtMachineOnFootPriorToExit represents payAtMachineOnFootPriorToExit
	ParkingPaymentProcessEnumerationPayAtMachineOnFootPriorToExit ParkingPaymentProcessEnumeration = "payAtMachineOnFootPriorToExit"
	// ParkingPaymentProcessEnumerationPayByPrepaidToken represents payByPrepaidToken
	ParkingPaymentProcessEnumerationPayByPrepaidToken ParkingPaymentProcessEnumeration = "payByPrepaidToken"
	// ParkingPaymentProcessEnumerationPayByMobileDevice represents payByMobileDevice
	ParkingPaymentProcessEnumerationPayByMobileDevice ParkingPaymentProcessEnumeration = "payByMobileDevice"
	// ParkingPaymentProcessEnumerationPayByPlate represents payByPlate
	ParkingPaymentProcessEnumerationPayByPlate ParkingPaymentProcessEnumeration = "payByPlate"
	// ParkingPaymentProcessEnumerationPrepayForPermit represents prepayForPermit
	ParkingPaymentProcessEnumerationPrepayForPermit ParkingPaymentProcessEnumeration = "prepayForPermit"
	// ParkingPaymentProcessEnumerationUndefined represents undefined
	ParkingPaymentProcessEnumerationUndefined ParkingPaymentProcessEnumeration = "undefined"
	// ParkingPaymentProcessEnumerationOther represents other
	ParkingPaymentProcessEnumerationOther ParkingPaymentProcessEnumeration = "other"
)

// ParkingStayEnumeration represents the ParkingStayEnumeration enumeration
// Allowed values for PARKING Stay Term types.
type ParkingStayEnumeration string

const (
	// ParkingStayEnumerationShortStay represents shortStay
	ParkingStayEnumerationShortStay ParkingStayEnumeration = "shortStay"
	// ParkingStayEnumerationMidTerm represents midTerm
	ParkingStayEnumerationMidTerm ParkingStayEnumeration = "midTerm"
	// ParkingStayEnumerationLongTerm represents longTerm
	ParkingStayEnumerationLongTerm ParkingStayEnumeration = "longTerm"
	// ParkingStayEnumerationDropoff represents dropoff
	ParkingStayEnumerationDropoff ParkingStayEnumeration = "dropoff"
	// ParkingStayEnumerationUnlimited represents unlimited
	ParkingStayEnumerationUnlimited ParkingStayEnumeration = "unlimited"
	// ParkingStayEnumerationOther represents other
	ParkingStayEnumerationOther ParkingStayEnumeration = "other"
	// ParkingStayEnumerationAll represents all
	ParkingStayEnumerationAll ParkingStayEnumeration = "all"
)

// ParkingVehicleEnumeration represents the ParkingVehicleEnumeration enumeration
// Allowed values for PARKING VEHICLE types.
type ParkingVehicleEnumeration string

const (
	// ParkingVehicleEnumerationCycle represents cycle
	ParkingVehicleEnumerationCycle ParkingVehicleEnumeration = "cycle"
	// ParkingVehicleEnumerationPedalCycle represents pedalCycle
	ParkingVehicleEnumerationPedalCycle ParkingVehicleEnumeration = "pedalCycle"
	// ParkingVehicleEnumerationECycle represents eCycle
	ParkingVehicleEnumerationECycle ParkingVehicleEnumeration = "eCycle"
	// ParkingVehicleEnumerationMoped represents moped
	ParkingVehicleEnumerationMoped ParkingVehicleEnumeration = "moped"
	// ParkingVehicleEnumerationMotorcycle represents motorcycle
	ParkingVehicleEnumerationMotorcycle ParkingVehicleEnumeration = "motorcycle"
	// ParkingVehicleEnumerationMotorcycleWithSidecar represents motorcycleWithSidecar
	ParkingVehicleEnumerationMotorcycleWithSidecar ParkingVehicleEnumeration = "motorcycleWithSidecar"
	// ParkingVehicleEnumerationMotorScooter represents motorScooter
	ParkingVehicleEnumerationMotorScooter ParkingVehicleEnumeration = "motorScooter"
	// ParkingVehicleEnumerationTwoWheeledVehicle represents twoWheeledVehicle
	ParkingVehicleEnumerationTwoWheeledVehicle ParkingVehicleEnumeration = "twoWheeledVehicle"
	// ParkingVehicleEnumerationThreeWheeledVehicle represents threeWheeledVehicle
	ParkingVehicleEnumerationThreeWheeledVehicle ParkingVehicleEnumeration = "threeWheeledVehicle"
	// ParkingVehicleEnumerationCar represents car
	ParkingVehicleEnumerationCar ParkingVehicleEnumeration = "car"
	// ParkingVehicleEnumerationMicroCar represents microCar
	ParkingVehicleEnumerationMicroCar ParkingVehicleEnumeration = "microCar"
	// ParkingVehicleEnumerationMiniCar represents miniCar
	ParkingVehicleEnumerationMiniCar ParkingVehicleEnumeration = "miniCar"
	// ParkingVehicleEnumerationSmallCar represents smallCar
	ParkingVehicleEnumerationSmallCar ParkingVehicleEnumeration = "smallCar"
	// ParkingVehicleEnumerationPassengerCar represents passengerCar
	ParkingVehicleEnumerationPassengerCar ParkingVehicleEnumeration = "passengerCar"
	// ParkingVehicleEnumerationLargeCar represents largeCar
	ParkingVehicleEnumerationLargeCar ParkingVehicleEnumeration = "largeCar"
	// ParkingVehicleEnumerationFourWheelDrive represents fourWheelDrive
	ParkingVehicleEnumerationFourWheelDrive ParkingVehicleEnumeration = "fourWheelDrive"
	// ParkingVehicleEnumerationTaxi represents taxi
	ParkingVehicleEnumerationTaxi ParkingVehicleEnumeration = "taxi"
	// ParkingVehicleEnumerationCamperCar represents camperCar
	ParkingVehicleEnumerationCamperCar ParkingVehicleEnumeration = "camperCar"
	// ParkingVehicleEnumerationCarWithTrailer represents carWithTrailer
	ParkingVehicleEnumerationCarWithTrailer ParkingVehicleEnumeration = "carWithTrailer"
	// ParkingVehicleEnumerationCarWithCaravan represents carWithCaravan
	ParkingVehicleEnumerationCarWithCaravan ParkingVehicleEnumeration = "carWithCaravan"
	// ParkingVehicleEnumerationMinibus represents minibus
	ParkingVehicleEnumerationMinibus ParkingVehicleEnumeration = "minibus"
	// ParkingVehicleEnumerationMinivan represents minivan
	ParkingVehicleEnumerationMinivan ParkingVehicleEnumeration = "minivan"
	// ParkingVehicleEnumerationBus represents bus
	ParkingVehicleEnumerationBus ParkingVehicleEnumeration = "bus"
	// ParkingVehicleEnumerationVan represents van
	ParkingVehicleEnumerationVan ParkingVehicleEnumeration = "van"
	// ParkingVehicleEnumerationTransporter represents transporter
	ParkingVehicleEnumerationTransporter ParkingVehicleEnumeration = "transporter"
	// ParkingVehicleEnumerationLargeVan represents largeVan
	ParkingVehicleEnumerationLargeVan ParkingVehicleEnumeration = "largeVan"
	// ParkingVehicleEnumerationHighSidedVehicle represents highSidedVehicle
	ParkingVehicleEnumerationHighSidedVehicle ParkingVehicleEnumeration = "highSidedVehicle"
	// ParkingVehicleEnumerationLightGoodsVehicle represents lightGoodsVehicle
	ParkingVehicleEnumerationLightGoodsVehicle ParkingVehicleEnumeration = "lightGoodsVehicle"
	// ParkingVehicleEnumerationHeavyGoodsVehicle represents heavyGoodsVehicle
	ParkingVehicleEnumerationHeavyGoodsVehicle ParkingVehicleEnumeration = "heavyGoodsVehicle"
	// ParkingVehicleEnumerationAgriculturalVehicle represents agriculturalVehicle
	ParkingVehicleEnumerationAgriculturalVehicle ParkingVehicleEnumeration = "agriculturalVehicle"
	// ParkingVehicleEnumerationTanker represents tanker
	ParkingVehicleEnumerationTanker ParkingVehicleEnumeration = "tanker"
	// ParkingVehicleEnumerationTruck represents truck
	ParkingVehicleEnumerationTruck ParkingVehicleEnumeration = "truck"
	// ParkingVehicleEnumerationTram represents tram
	ParkingVehicleEnumerationTram ParkingVehicleEnumeration = "tram"
	// ParkingVehicleEnumerationArticulatedVehicle represents articulatedVehicle
	ParkingVehicleEnumerationArticulatedVehicle ParkingVehicleEnumeration = "articulatedVehicle"
	// ParkingVehicleEnumerationVehicleWithTrailer represents vehicleWithTrailer
	ParkingVehicleEnumerationVehicleWithTrailer ParkingVehicleEnumeration = "vehicleWithTrailer"
	// ParkingVehicleEnumerationLightGoodsVehicleWithTrailer represents lightGoodsVehicleWithTrailer
	ParkingVehicleEnumerationLightGoodsVehicleWithTrailer ParkingVehicleEnumeration = "lightGoodsVehicleWithTrailer"
	// ParkingVehicleEnumerationHeavyGoodsVehicleWithTrailer represents heavyGoodsVehicleWithTrailer
	ParkingVehicleEnumerationHeavyGoodsVehicleWithTrailer ParkingVehicleEnumeration = "heavyGoodsVehicleWithTrailer"
	// ParkingVehicleEnumerationSnowmobile represents snowmobile
	ParkingVehicleEnumerationSnowmobile ParkingVehicleEnumeration = "snowmobile"
	// ParkingVehicleEnumerationUndefined represents undefined
	ParkingVehicleEnumerationUndefined ParkingVehicleEnumeration = "undefined"
	// ParkingVehicleEnumerationOther represents other
	ParkingVehicleEnumerationOther ParkingVehicleEnumeration = "other"
	// ParkingVehicleEnumerationAllPassengerVehicles represents allPassengerVehicles
	ParkingVehicleEnumerationAllPassengerVehicles ParkingVehicleEnumeration = "allPassengerVehicles"
	// ParkingVehicleEnumerationAll represents all
	ParkingVehicleEnumerationAll ParkingVehicleEnumeration = "all"
)

// ParkingUserEnumeration represents the ParkingUserEnumeration enumeration
// Allowed values for PARKING User types.
type ParkingUserEnumeration string

const (
	// ParkingUserEnumerationParkingUserEnumerationAllUsers represents allUsers
	ParkingUserEnumerationParkingUserEnumerationAllUsers ParkingUserEnumeration = "allUsers"
	// ParkingUserEnumerationParkingUserEnumerationStaff represents staff
	ParkingUserEnumerationParkingUserEnumerationStaff ParkingUserEnumeration = "staff"
	// ParkingUserEnumerationParkingUserEnumerationVisitors represents visitors
	ParkingUserEnumerationParkingUserEnumerationVisitors ParkingUserEnumeration = "visitors"
	// ParkingUserEnumerationParkingUserEnumerationCustomers represents customers
	ParkingUserEnumerationParkingUserEnumerationCustomers ParkingUserEnumeration = "customers"
	// ParkingUserEnumerationParkingUserEnumerationGuests represents guests
	ParkingUserEnumerationParkingUserEnumerationGuests ParkingUserEnumeration = "guests"
	// ParkingUserEnumerationParkingUserEnumerationRegisteredDisabled represents registeredDisabled
	ParkingUserEnumerationParkingUserEnumerationRegisteredDisabled ParkingUserEnumeration = "registeredDisabled"
	// ParkingUserEnumerationParkingUserEnumerationImpairedMobility represents impairedMobility
	ParkingUserEnumerationParkingUserEnumerationImpairedMobility ParkingUserEnumeration = "impairedMobility"
	// ParkingUserEnumerationParkingUserEnumerationRegistered represents registered
	ParkingUserEnumerationParkingUserEnumerationRegistered ParkingUserEnumeration = "registered"
	// ParkingUserEnumerationParkingUserEnumerationRental represents rental
	ParkingUserEnumerationParkingUserEnumerationRental ParkingUserEnumeration = "rental"
	// ParkingUserEnumerationParkingUserEnumerationDoctors represents doctors
	ParkingUserEnumerationParkingUserEnumerationDoctors ParkingUserEnumeration = "doctors"
	// ParkingUserEnumerationParkingUserEnumerationResidentsWithPermits represents residentsWithPermits
	ParkingUserEnumerationParkingUserEnumerationResidentsWithPermits ParkingUserEnumeration = "residentsWithPermits"
	// ParkingUserEnumerationParkingUserEnumerationReservationHolders represents reservationHolders
	ParkingUserEnumerationParkingUserEnumerationReservationHolders ParkingUserEnumeration = "reservationHolders"
	// ParkingUserEnumerationParkingUserEnumerationEmergencyServices represents emergencyServices
	ParkingUserEnumerationParkingUserEnumerationEmergencyServices ParkingUserEnumeration = "emergencyServices"
	// ParkingUserEnumerationParkingUserEnumerationTaxi represents taxi
	ParkingUserEnumerationParkingUserEnumerationTaxi ParkingUserEnumeration = "taxi"
	// ParkingUserEnumerationParkingUserEnumerationVehicleSharing represents vehicleSharing
	ParkingUserEnumerationParkingUserEnumerationVehicleSharing ParkingUserEnumeration = "vehicleSharing"
	// ParkingUserEnumerationParkingUserEnumerationWomen represents women
	ParkingUserEnumerationParkingUserEnumerationWomen ParkingUserEnumeration = "women"
	// ParkingUserEnumerationParkingUserEnumerationFamilies represents families
	ParkingUserEnumerationParkingUserEnumerationFamilies ParkingUserEnumeration = "families"
	// ParkingUserEnumerationParkingUserEnumerationOther represents other
	ParkingUserEnumerationParkingUserEnumerationOther ParkingUserEnumeration = "other"
	// ParkingUserEnumerationParkingUserEnumerationAll represents all
	ParkingUserEnumerationParkingUserEnumerationAll ParkingUserEnumeration = "all"
)

// BayGeometryEnumeration represents the BayGeometryEnumeration enumeration
// Allowed values for PARKING Geometry.
type BayGeometryEnumeration string

const (
	// BayGeometryEnumerationUnspecified represents unspecified
	BayGeometryEnumerationUnspecified BayGeometryEnumeration = "unspecified"
	// BayGeometryEnumerationOrthogonal represents orthogonal
	BayGeometryEnumerationOrthogonal BayGeometryEnumeration = "orthogonal"
	// BayGeometryEnumerationAngled represents angled
	BayGeometryEnumerationAngled BayGeometryEnumeration = "angled"
	// BayGeometryEnumerationParallel represents parallel
	BayGeometryEnumerationParallel BayGeometryEnumeration = "parallel"
	// BayGeometryEnumerationFreeFormat represents freeFormat
	BayGeometryEnumerationFreeFormat BayGeometryEnumeration = "freeFormat"
	// BayGeometryEnumerationOther represents other
	BayGeometryEnumerationOther BayGeometryEnumeration = "other"
)

// ParkingVisibilityEnumeration represents the ParkingVisibilityEnumeration enumeration
// Allowed values for PARKING Visibility
type ParkingVisibilityEnumeration string

const (
	// ParkingVisibilityEnumerationUnmarked represents unmarked
	ParkingVisibilityEnumerationUnmarked ParkingVisibilityEnumeration = "unmarked"
	// ParkingVisibilityEnumerationSignageOnly represents signageOnly
	ParkingVisibilityEnumerationSignageOnly ParkingVisibilityEnumeration = "signageOnly"
	// ParkingVisibilityEnumerationDemarcated represents demarcated
	ParkingVisibilityEnumerationDemarcated ParkingVisibilityEnumeration = "demarcated"
	// ParkingVisibilityEnumerationDocks represents docks
	ParkingVisibilityEnumerationDocks ParkingVisibilityEnumeration = "docks"
	// ParkingVisibilityEnumerationOther represents other
	ParkingVisibilityEnumerationOther ParkingVisibilityEnumeration = "other"
)

// ParkingReservationEnumeration represents the ParkingReservationEnumeration enumeration
// Allowed values for PARKING User types.
type ParkingReservationEnumeration string

const (
	// ParkingReservationEnumerationReservationRequired represents reservationRequired
	ParkingReservationEnumerationReservationRequired ParkingReservationEnumeration = "reservationRequired"
	// ParkingReservationEnumerationReservationAllowed represents reservationAllowed
	ParkingReservationEnumerationReservationAllowed ParkingReservationEnumeration = "reservationAllowed"
	// ParkingReservationEnumerationNoReservations represents noReservations
	ParkingReservationEnumerationNoReservations ParkingReservationEnumeration = "noReservations"
	// ParkingReservationEnumerationRegistrationRequired represents registrationRequired
	ParkingReservationEnumerationRegistrationRequired ParkingReservationEnumeration = "registrationRequired"
	// ParkingReservationEnumerationOther represents other
	ParkingReservationEnumerationOther ParkingReservationEnumeration = "other"
)

// ParkingRefsRelStructure represents the parkingRefs_RelStructure element
// Type for a collection of one or more references to a PARKING.
type ParkingRefsRelStructure struct {
	OneToManyRelationshipStructure
	ParkingRef []ParkingRef `xml:"ParkingRef" json:"ParkingRef"`
}

// ParkingRefStructure represents the ParkingRefStructure element
// Type for a reference to a PARKING.
type ParkingRefStructure struct {
	SiteRefStructure
}

// ParkingCapacityRefStructure represents the ParkingCapacityRefStructure element
// Type for a reference to a PARKING CAPACITY.
type ParkingCapacityRefStructure struct {
	VersionOfObjectRefStructure
}

// ParkingPropertiesRefStructure represents the ParkingPropertiesRefStructure element
// Type for a reference to a PARKING PROPERTIES
type ParkingPropertiesRefStructure struct {
	VersionOfObjectRefStructure
}

// ParkingEntranceRefStructure represents the ParkingEntranceRefStructure element
// Type for reference to a PARKING ENTRANCE.
type ParkingEntranceRefStructure struct {
	EntranceRefStructure
}

// ParkingPassengerEntranceRefStructure represents the ParkingPassengerEntranceRefStructure element
// Type for reference to a PARKING ENTRANCE.
type ParkingPassengerEntranceRefStructure struct {
	ParkingEntranceRefStructure
}

// ParkingEntranceForVehiclesRefStructure represents the ParkingEntranceForVehiclesRefStructure element
// Type for reference to a PARKING VEHICLE ENTRANCE.
type ParkingEntranceForVehiclesRefStructure struct {
	ParkingEntranceRefStructure
}

// ParkingComponentRefsRelStructure represents the parkingComponentRefs_RelStructure element
// Type for a collection of one or more references to a PARKING AREA or PARKING BAU.
type ParkingComponentRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehiclePoolingParkingAreaRef []VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef []VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef []TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef []ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	VehiclePoolingParkingBayRef []VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef []MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef []VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef []ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
}

// ParkingAreaRefStructure represents the ParkingAreaRefStructure element
// Type for a reference to a PARKING AREA.
type ParkingAreaRefStructure struct {
	SiteComponentRefStructure
}

// ParkingAreaRefsRelStructure represents the parkingAreaRefs_RelStructure element
// Type for a collection of one or more references to a PARKING AREA.
type ParkingAreaRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehiclePoolingParkingAreaRef []VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef []VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef []TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef []ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
}

// ParkingBayRefStructure represents the ParkingBayRefStructure element
// Type for a reference to a PARKING BAY.
type ParkingBayRefStructure struct {
	SiteComponentRefStructure
}

// ParkingBayRefsRelStructure represents the parkingBayRefs_RelStructure element
// Type for a collection of one or more a references to a PARKING BAY.
type ParkingBayRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehiclePoolingParkingBayRef []VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef []MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef []VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef []ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
}

// TypeOfParkingRefStructure represents the TypeOfParkingRefStructure element
// Type for a reference to a TYPE OF PARKING.
type TypeOfParkingRefStructure struct {
	TypeOfValueRefStructure
}

// ParkingRef represents the ParkingRef element
// Reference to a PARKING.
type ParkingRef struct {
	ParkingRefStructure
}

// ParkingCapacityRef represents the ParkingCapacityRef element
// Reference to a PARKING CAPACITY.
type ParkingCapacityRef struct {
	ParkingCapacityRefStructure
}

// ParkingPropertiesRef represents the ParkingPropertiesRef element
// Reference to a PARKING PROPERTIES
type ParkingPropertiesRef struct {
	ParkingPropertiesRefStructure
}

// ParkingEntranceRef represents the ParkingEntranceRef element
// Reference to a PARKING VEHICLE ENTRANCE.
type ParkingEntranceRef struct {
	ParkingEntranceRefStructure
}

// ParkingPassengerEntranceRef represents the ParkingPassengerEntranceRef element
// Reference to a PARKING VEHICLE ENTRANCE.
type ParkingPassengerEntranceRef struct {
	ParkingPassengerEntranceRefStructure
}

// ParkingEntranceForVehiclesRef represents the ParkingEntranceForVehiclesRef element
// Reference to a PARKING VEHICLE ENTRANCE.
type ParkingEntranceForVehiclesRef struct {
	ParkingEntranceForVehiclesRefStructure
}

// ParkingAreaRef represents the ParkingAreaRef element
// Reference to a PARKING AREA.
type ParkingAreaRef struct {
	ParkingAreaRefStructure
}

// ParkingBayRef represents the ParkingBayRef element
// Reference to a PARKING BAY.
type ParkingBayRef struct {
	ParkingBayRefStructure
}

// TypeOfParkingRef represents the TypeOfParkingRef element
// Reference to a TYPE OF PARKING.
type TypeOfParkingRef struct {
	TypeOfParkingRefStructure
}

// QuayTypeEnumeration represents the QuayTypeEnumeration enumeration
// Allowed values for QUAY Component Types. Special is the structure for rail, which allows a hierarchy. railIslandPlatform is the full platform positioned between two tracks, railPlatform is a side platform facing the track and railPlatformSector is a sector of such a railPlatform. A similar hierarchy is defined for a metro station layout.
type QuayTypeEnumeration string

const (
	// QuayTypeEnumerationQuayTypeEnumerationAirlineGate represents airlineGate
	QuayTypeEnumerationQuayTypeEnumerationAirlineGate QuayTypeEnumeration = "airlineGate"
	// QuayTypeEnumerationQuayTypeEnumerationRailPlatform represents railPlatform
	QuayTypeEnumerationQuayTypeEnumerationRailPlatform QuayTypeEnumeration = "railPlatform"
	// QuayTypeEnumerationQuayTypeEnumerationRailIslandPlatform represents railIslandPlatform
	QuayTypeEnumerationQuayTypeEnumerationRailIslandPlatform QuayTypeEnumeration = "railIslandPlatform"
	// QuayTypeEnumerationQuayTypeEnumerationRailPlatformSector represents railPlatformSector
	QuayTypeEnumerationQuayTypeEnumerationRailPlatformSector QuayTypeEnumeration = "railPlatformSector"
	// QuayTypeEnumerationQuayTypeEnumerationMetroPlatform represents metroPlatform
	QuayTypeEnumerationQuayTypeEnumerationMetroPlatform QuayTypeEnumeration = "metroPlatform"
	// QuayTypeEnumerationQuayTypeEnumerationMetroIslandPlatform represents metroIslandPlatform
	QuayTypeEnumerationQuayTypeEnumerationMetroIslandPlatform QuayTypeEnumeration = "metroIslandPlatform"
	// QuayTypeEnumerationQuayTypeEnumerationMetroIslandPlatformSector represents metroIslandPlatformSector
	QuayTypeEnumerationQuayTypeEnumerationMetroIslandPlatformSector QuayTypeEnumeration = "metroIslandPlatformSector"
	// QuayTypeEnumerationQuayTypeEnumerationCoachStop represents coachStop
	QuayTypeEnumerationQuayTypeEnumerationCoachStop QuayTypeEnumeration = "coachStop"
	// QuayTypeEnumerationQuayTypeEnumerationBusStop represents busStop
	QuayTypeEnumerationQuayTypeEnumerationBusStop QuayTypeEnumeration = "busStop"
	// QuayTypeEnumerationQuayTypeEnumerationBusPlatform represents busPlatform
	QuayTypeEnumerationQuayTypeEnumerationBusPlatform QuayTypeEnumeration = "busPlatform"
	// QuayTypeEnumerationQuayTypeEnumerationBusBay represents busBay
	QuayTypeEnumerationQuayTypeEnumerationBusBay QuayTypeEnumeration = "busBay"
	// QuayTypeEnumerationQuayTypeEnumerationTramPlatform represents tramPlatform
	QuayTypeEnumerationQuayTypeEnumerationTramPlatform QuayTypeEnumeration = "tramPlatform"
	// QuayTypeEnumerationQuayTypeEnumerationTramStop represents tramStop
	QuayTypeEnumerationQuayTypeEnumerationTramStop QuayTypeEnumeration = "tramStop"
	// QuayTypeEnumerationQuayTypeEnumerationBoatQuay represents boatQuay
	QuayTypeEnumerationQuayTypeEnumerationBoatQuay QuayTypeEnumeration = "boatQuay"
	// QuayTypeEnumerationQuayTypeEnumerationFerryLanding represents ferryLanding
	QuayTypeEnumerationQuayTypeEnumerationFerryLanding QuayTypeEnumeration = "ferryLanding"
	// QuayTypeEnumerationQuayTypeEnumerationTelecabinPlatform represents telecabinPlatform
	QuayTypeEnumerationQuayTypeEnumerationTelecabinPlatform QuayTypeEnumeration = "telecabinPlatform"
	// QuayTypeEnumerationQuayTypeEnumerationTaxiStand represents taxiStand
	QuayTypeEnumerationQuayTypeEnumerationTaxiStand QuayTypeEnumeration = "taxiStand"
	// QuayTypeEnumerationQuayTypeEnumerationSetDownPlace represents setDownPlace
	QuayTypeEnumerationQuayTypeEnumerationSetDownPlace QuayTypeEnumeration = "setDownPlace"
	// QuayTypeEnumerationQuayTypeEnumerationVehicleLoadingPlace represents vehicleLoadingPlace
	QuayTypeEnumerationQuayTypeEnumerationVehicleLoadingPlace QuayTypeEnumeration = "vehicleLoadingPlace"
	// QuayTypeEnumerationQuayTypeEnumerationHandicappedLevelBoardingSector represents handicappedLevelBoardingSector
	QuayTypeEnumerationQuayTypeEnumerationHandicappedLevelBoardingSector QuayTypeEnumeration = "handicappedLevelBoardingSector"
	// QuayTypeEnumerationQuayTypeEnumerationMultimodal represents multimodal
	QuayTypeEnumerationQuayTypeEnumerationMultimodal QuayTypeEnumeration = "multimodal"
	// QuayTypeEnumerationQuayTypeEnumerationBusStopWithinRoadwayBoarding represents busStopWithinRoadwayBoarding
	// Bus stop directly on street. This means people waiting to board will literally be standing on the street. The usual elements of a stop (pole, bank, information) usually are present at the road side. Often there are markings on the floor and sometimes also traffic lights stopping the traffic for boarding and alighting. Often the area to wait is on the side of the road and the BOARDING POSITION could indicate, where to board/alight. However, BOARDING POSITIONs are often not modeled.
	QuayTypeEnumerationQuayTypeEnumerationBusStopWithinRoadwayBoarding QuayTypeEnumeration = "busStopWithinRoadwayBoarding"
	// QuayTypeEnumerationQuayTypeEnumerationTramStopWithinRoadwayBoarding represents tramStopWithinRoadwayBoarding
	// Tram stop directly on street. This means people waiting to board will literally be standing on the street. The usual elements of a stop (pole, bank, information) usually are present at the road side. Often there are markings on the floor and sometimes also traffic lights stopping the traffic for boarding and alighting. Often the area to wait is on the side of the road and the BOARDING POSITION could indicate, where to board/alight. However, BOARDING POSITIONs are often not modeled.
	QuayTypeEnumerationQuayTypeEnumerationTramStopWithinRoadwayBoarding QuayTypeEnumeration = "tramStopWithinRoadwayBoarding"
	// QuayTypeEnumerationQuayTypeEnumerationOther represents other
	QuayTypeEnumerationQuayTypeEnumerationOther QuayTypeEnumeration = "other"
)

// BoardingPositionTypeEnumeration represents the BoardingPositionTypeEnumeration enumeration
// Allowed values for BOARDING POSITION Component Types.
type BoardingPositionTypeEnumeration string

const (
	// BoardingPositionTypeEnumerationUnknown represents unknown
	BoardingPositionTypeEnumerationUnknown BoardingPositionTypeEnumeration = "unknown"
	// BoardingPositionTypeEnumerationDoorFromAirlineGate represents doorFromAirlineGate
	BoardingPositionTypeEnumerationDoorFromAirlineGate BoardingPositionTypeEnumeration = "doorFromAirlineGate"
	// BoardingPositionTypeEnumerationPositionOnRailPlatform represents positionOnRailPlatform
	BoardingPositionTypeEnumerationPositionOnRailPlatform BoardingPositionTypeEnumeration = "positionOnRailPlatform"
	// BoardingPositionTypeEnumerationPositionOnMetroPlatform represents positionOnMetroPlatform
	BoardingPositionTypeEnumerationPositionOnMetroPlatform BoardingPositionTypeEnumeration = "positionOnMetroPlatform"
	// BoardingPositionTypeEnumerationPositionAtCoachStop represents positionAtCoachStop
	BoardingPositionTypeEnumerationPositionAtCoachStop BoardingPositionTypeEnumeration = "positionAtCoachStop"
	// BoardingPositionTypeEnumerationPositionAtBusStop represents positionAtBusStop
	BoardingPositionTypeEnumerationPositionAtBusStop BoardingPositionTypeEnumeration = "positionAtBusStop"
	// BoardingPositionTypeEnumerationBoatGangway represents boatGangway
	BoardingPositionTypeEnumerationBoatGangway BoardingPositionTypeEnumeration = "boatGangway"
	// BoardingPositionTypeEnumerationFerryGangway represents ferryGangway
	BoardingPositionTypeEnumerationFerryGangway BoardingPositionTypeEnumeration = "ferryGangway"
	// BoardingPositionTypeEnumerationTelecabinPlatform represents telecabinPlatform
	BoardingPositionTypeEnumerationTelecabinPlatform BoardingPositionTypeEnumeration = "telecabinPlatform"
	// BoardingPositionTypeEnumerationSetDownPoint represents setDownPoint
	BoardingPositionTypeEnumerationSetDownPoint BoardingPositionTypeEnumeration = "setDownPoint"
	// BoardingPositionTypeEnumerationTaxiBay represents taxiBay
	BoardingPositionTypeEnumerationTaxiBay BoardingPositionTypeEnumeration = "taxiBay"
	// BoardingPositionTypeEnumerationVehicleLoadingRamp represents vehicleLoadingRamp
	BoardingPositionTypeEnumerationVehicleLoadingRamp BoardingPositionTypeEnumeration = "vehicleLoadingRamp"
	// BoardingPositionTypeEnumerationOther represents other
	BoardingPositionTypeEnumerationOther BoardingPositionTypeEnumeration = "other"
)

// LimitedUseTypeEnumeration represents the LimitedUseTypeEnumeration enumeration
// Allowed values for Limited use.
type LimitedUseTypeEnumeration string

const (
	// LimitedUseTypeEnumerationInterchangeOnly represents interchangeOnly
	// Stop may only be used for interchange, not for entrance or exit.
	LimitedUseTypeEnumerationInterchangeOnly LimitedUseTypeEnumeration = "interchangeOnly"
	// LimitedUseTypeEnumerationNoDirectRoadAccess represents noDirectRoadAccess
	// Stop may not be reached from Road by a paved path.
	LimitedUseTypeEnumerationNoDirectRoadAccess LimitedUseTypeEnumeration = "noDirectRoadAccess"
	// LimitedUseTypeEnumerationLongWalkToAccess represents longWalkToAccess
	// Stop may only be accessed by a long (&gt;200m) walk from road.
	LimitedUseTypeEnumerationLongWalkToAccess LimitedUseTypeEnumeration = "longWalkToAccess"
	// LimitedUseTypeEnumerationIsolated represents isolated
	// Stop is an island or ferry stop that does not connect to rad network.
	LimitedUseTypeEnumerationIsolated LimitedUseTypeEnumeration = "isolated"
	// LimitedUseTypeEnumerationLimitedService represents limitedService
	// Stop has a very limited service.
	LimitedUseTypeEnumerationLimitedService LimitedUseTypeEnumeration = "limitedService"
	// LimitedUseTypeEnumerationOther represents other
	LimitedUseTypeEnumerationOther LimitedUseTypeEnumeration = "other"
)

// InterchangeWeightingEnumeration represents the InterchangeWeightingEnumeration enumeration
// Allowed values for INTERCHANGE Weighting.
type InterchangeWeightingEnumeration string

const (
	// InterchangeWeightingEnumerationNoInterchange represents noInterchange
	InterchangeWeightingEnumerationNoInterchange InterchangeWeightingEnumeration = "noInterchange"
	// InterchangeWeightingEnumerationInterchangeAllowed represents interchangeAllowed
	InterchangeWeightingEnumerationInterchangeAllowed InterchangeWeightingEnumeration = "interchangeAllowed"
	// InterchangeWeightingEnumerationRecommendedInterchange represents recommendedInterchange
	InterchangeWeightingEnumerationRecommendedInterchange InterchangeWeightingEnumeration = "recommendedInterchange"
	// InterchangeWeightingEnumerationPreferredInterchange represents preferredInterchange
	InterchangeWeightingEnumerationPreferredInterchange InterchangeWeightingEnumeration = "preferredInterchange"
)

// StopPlaceWeightEnumeration represents the StopPlaceWeightEnumeration enumeration
// Allowed values for INTERCHANGE classification at a STOP PLACE. +v1.1
type StopPlaceWeightEnumeration string

const (
	// StopPlaceWeightEnumerationInternational represents international
	StopPlaceWeightEnumerationInternational StopPlaceWeightEnumeration = "international"
	// StopPlaceWeightEnumerationNational represents national
	StopPlaceWeightEnumerationNational StopPlaceWeightEnumeration = "national"
	// StopPlaceWeightEnumerationRegional represents regional
	StopPlaceWeightEnumerationRegional StopPlaceWeightEnumeration = "regional"
	// StopPlaceWeightEnumerationLocal represents local
	StopPlaceWeightEnumerationLocal StopPlaceWeightEnumeration = "local"
)

// StopPlaceRefStructure represents the StopPlaceRefStructure element
// Type for a reference to a STOP PLACE.
type StopPlaceRefStructure struct {
	SiteRefStructure
}

// StopPlaceRefsRelStructure represents the stopPlaceRefs_RelStructure element
// Type for a collection of one or more references to a STOP PLACE.
type StopPlaceRefsRelStructure struct {
	OneToManyRelationshipStructure
	TaxiRankRef []TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef []StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
}

// GroupOfStopPlacesRefStructure represents the GroupOfStopPlacesRefStructure element
// Type for reference to a GROUP OF STOP PLACEs.
type GroupOfStopPlacesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// StopPlaceSpaceRefStructure represents the StopPlaceSpaceRefStructure element
// Type for reference a STOP PLACE SPACE.
type StopPlaceSpaceRefStructure struct {
	SiteComponentRefStructure
}

// QuayRefStructure represents the QuayRefStructure element
// Type for reference to a QUAY.
type QuayRefStructure struct {
	StopPlaceSpaceRefStructure
}

// QuayRefsRelStructure represents the quayRefs_RelStructure element
// Type for a collection of one or more references to a QUAY.
type QuayRefsRelStructure struct {
	OneToManyRelationshipStructure
	TaxiStandRef []TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef []QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
}

// AccessSpaceRefStructure represents the AccessSpaceRefStructure element
// Type for reference to an ACCESS SPACE.
type AccessSpaceRefStructure struct {
	StopPlaceSpaceRefStructure
}

// BoardingPositionRefsRelStructure represents the boardingPositionRefs_RelStructure element
// Type for a collection of one or more references to a BOARDING POSITION.
type BoardingPositionRefsRelStructure struct {
	OneToManyRelationshipStructure
	BoardingPositionRef []BoardingPositionRef `xml:"BoardingPositionRef" json:"BoardingPositionRef"`
}

// BoardingPositionRefStructure represents the BoardingPositionRefStructure element
// Type for reference to a BOARDING POSITION.
type BoardingPositionRefStructure struct {
	StopPlaceSpaceRefStructure
}

// StopPlaceEntranceRefStructure represents the StopPlaceEntranceRefStructure element
// Type for reference to a STOP PLACE ENTRANCE.
type StopPlaceEntranceRefStructure struct {
	EntranceRefStructure
}

// StopPlaceVehicleEntranceRefStructure represents the StopPlaceVehicleEntranceRefStructure element
// Type for reference to a STOP PLACE VEHICLE  ENTRANCE.
type StopPlaceVehicleEntranceRefStructure struct {
	EntranceRefStructure
}

// SitePathLinkRefStructure represents the SitePathLinkRefStructure element
// Type for Unique Reference to SITE PATH LINK.
type SitePathLinkRefStructure struct {
	PathLinkRefStructure
}

// StopPathLinkRefStructure represents the StopPathLinkRefStructure element
// Type for reference to a SITE PATH LINK.
type StopPathLinkRefStructure struct {
	PathLinkRefStructure
}

// AliasStructure represents the AliasStructure element
// Alternative Private Code for a STOP PLACE.
type AliasStructure struct {
	PrivateCode PrivateCode `xml:"PrivateCode" json:"PrivateCode"`
	// Type of identifier.
	IdentifierType *string `xml:"IdentifierType,omitempty" json:"IdentifierType,omitempty"`
}

// StopPlaceRef represents the StopPlaceRef element
// Reference to a STOP PLACE.
type StopPlaceRef struct {
	StopPlaceRefStructure
}

// GroupOfStopPlacesRef represents the GroupOfStopPlacesRef element
// Reference to a GROUP OF STOP PLACEs.
type GroupOfStopPlacesRef struct {
	GroupOfStopPlacesRefStructure
}

// StopPlaceSpaceRef represents the StopPlaceSpaceRef element
// Reference to a STOP PLACE SPACE.
type StopPlaceSpaceRef struct {
	StopPlaceSpaceRefStructure
}

// QuayRef represents the QuayRef element
// Reference to a QUAY.
type QuayRef struct {
	QuayRefStructure
}

// AccessSpaceRef represents the AccessSpaceRef element
// Reference to an ACCESS SPACE.
type AccessSpaceRef struct {
	AccessSpaceRefStructure
}

// BoardingPositionRef represents the BoardingPositionRef element
// Reference to a BOARDING POSITION.
type BoardingPositionRef struct {
	BoardingPositionRefStructure
}

// StopPlaceEntranceRef represents the StopPlaceEntranceRef element
// Reference to a STOP PLACE ENTRANCE.
type StopPlaceEntranceRef struct {
	StopPlaceEntranceRefStructure
}

// StopPlaceVehicleEntranceRef represents the StopPlaceVehicleEntranceRef element
// Reference to a STOP PLACE VEHICLE  ENTRANCE.
type StopPlaceVehicleEntranceRef struct {
	StopPlaceVehicleEntranceRefStructure
}

// PathLinkVersionStructure represents the PathLink_VersionStructure element
// Type for a PATH LINK.
type PathLinkVersionStructure struct {
	LinkVersionStructure
	// Origin end of PATH LINK.
	From PathLinkEndStructure `xml:"From" json:"From"`
	// Destination end of PATH LINK.
	To PathLinkEndStructure `xml:"To" json:"To"`
	// Description of PATH LINK.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	AccessibilityAssessmentRef *AccessibilityAssessmentRef `xml:"AccessibilityAssessmentRef,omitempty" json:"AccessibilityAssessmentRef,omitempty"`
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// Allowed MODEs to use in component.
	AccessModes *AccessModeEnumeration `xml:"AccessModes,omitempty" json:"AccessModes,omitempty"`
	// Whether the component is available for public use or is restricted.
	PublicUse *PublicUseEnumeration `xml:"PublicUse,omitempty" json:"PublicUse,omitempty"`
	// Whether the component is Indoors or outdoors. Default is Indoors.
	Covered *CoveredEnumeration `xml:"Covered,omitempty" json:"Covered,omitempty"`
	// Whether the component is within a gated area or freely accessible without a pass or ticket.
	Gated *GatedEnumeration `xml:"Gated,omitempty" json:"Gated,omitempty"`
	// Whether the component is lit or not. Default is well Lit.
	Lighting *LightingEnumeration `xml:"Lighting,omitempty" json:"Lighting,omitempty"`
	// Whether all areas of the component are wheelchair accessible.
	AllAreasWheelchairAccessible *bool `xml:"AllAreasWheelchairAccessible,omitempty" json:"AllAreasWheelchairAccessible,omitempty"`
	// Total number of people that component can contain.
	PersonCapacity *int `xml:"PersonCapacity,omitempty" json:"PersonCapacity,omitempty"`
	// Presentation defaults for SITE ELEMENT. +V1.2.2
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// Facilities available at SITe.
	Facilities *SiteFacilitySetsRelStructure `xml:"facilities,omitempty" json:"facilities,omitempty"`
	// Direction heading to show for PATH LINK when travelling  in its FROM / TO sense.
	Towards *MultilingualString `xml:"Towards,omitempty" json:"Towards,omitempty"`
	// Direction heading to show for PATH LINK when travelling  in its TO / FROM sense.
	Back *MultilingualString `xml:"Back,omitempty" json:"Back,omitempty"`
	// Number of steps to take PATH LINK.
	NumberOfSteps *int `xml:"NumberOfSteps,omitempty" json:"NumberOfSteps,omitempty"`
	// Minimum Height of PATH LINK. +v1.1
	MinimumHeight *float64 `xml:"MinimumHeight,omitempty" json:"MinimumHeight,omitempty"`
	// Minimum Width of PATH LINK. +v1.1
	MinimumWidth *float64 `xml:"MinimumWidth,omitempty" json:"MinimumWidth,omitempty"`
	// Allowed direction of use: one way or two way. Default is two way.
	AllowedUse *PathDirectionEnumeration `xml:"AllowedUse,omitempty" json:"AllowedUse,omitempty"`
	// Whether PATH LINK is up down or level in from to direction.
	Transition *TransitionEnumeration `xml:"Transition,omitempty" json:"Transition,omitempty"`
	// Maximum gradient in degrees  (in the direction of the PATH LINK way). +v1.1
	Gradient *int `xml:"Gradient,omitempty" json:"Gradient,omitempty"`
	// Coded value of the maximum gradient.+v1.1
	GradientType *GradientEnumeration `xml:"GradientType,omitempty" json:"GradientType,omitempty"`
	// Maximum Tilt angle in degrees between -20 and 20 (in the direction of the PATH LINK way). +v1.1
	TiltAngle *int `xml:"TiltAngle,omitempty" json:"TiltAngle,omitempty"`
	// Coded value of the maximum  tilt.  See allowed va;ues. +v1.1
	TiltType *TiltTypeEnumeration `xml:"TiltType,omitempty" json:"TiltType,omitempty"`
	// Type of physical feature of PATH LINK.
	AccessFeatureType *AccessFeatureEnumeration `xml:"AccessFeatureType,omitempty" json:"AccessFeatureType,omitempty"`
	// Type of passage feature of PATH LINK.
	PassageType *PassageTypeEnumeration `xml:"PassageType,omitempty" json:"PassageType,omitempty"`
	// Type of flooring of the walking surface. +v1.1
	FlooringType *FlooringTypeEnumeration `xml:"FlooringType,omitempty" json:"FlooringType,omitempty"`
	// Type of border on the right side (in the direction of the PATH LINK).
	RightSideBorder *BorderTypeEnumeration `xml:"RightSideBorder,omitempty" json:"RightSideBorder,omitempty"`
	// Type of border on the left side (in the direction of the PATH LINK). +v1.1
	LeftSideBorder *BorderTypeEnumeration `xml:"LeftSideBorder,omitempty" json:"LeftSideBorder,omitempty"`
	// Nature of the  tactile warning strips (in the direction of the PATH LINK). +v1.1
	TactileWarningStrip *TactileWarningStripEnumeration `xml:"TactileWarningStrip,omitempty" json:"TactileWarningStrip,omitempty"`
	// Indicates whether there are guiding strips. +v1.1
	TactileGuidingStrip *bool `xml:"TactileGuidingStrip,omitempty" json:"TactileGuidingStrip,omitempty"`
	// Maximum number of passengers who can traverse PATH LINK per minute.
	MaximumFlowPerMinute *int `xml:"MaximumFlowPerMinute,omitempty" json:"MaximumFlowPerMinute,omitempty"`
	// Timings for the transfer.
	TransferDuration *TransferDurationStructure `xml:"TransferDuration,omitempty" json:"TransferDuration,omitempty"`
}

// PathLinkEndStructure represents the PathLinkEndStructure element
// Type for a PATH LINK ENd.
type PathLinkEndStructure struct {
	// Reference to a PLACE, including QUAY, ACCESS SPACE, BOARDING POSITION or other node of a SITE.
	PlaceRef PlaceRefStructure `xml:"PlaceRef" json:"PlaceRef"`
	// Reference to a LEVEL on which SITE COMPONENT is found.
	LevelRef *LevelRefStructure `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	// Reference to an ENTRANCE of a PLACE.
	EntranceRef *EntranceRefStructure `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
}

// SitePathLinksRelStructure represents the sitePathLinks_RelStructure element
// Type for a list of SITE PATH LINKs.
type SitePathLinksRelStructure struct {
	ContainmentAggregationStructure
	PathLinkRef []PathLinkRef `xml:"PathLinkRef,omitempty" json:"PathLinkRef,omitempty"`
	// PATH LINK for a SITE.
	SitePathLink []SitePathLink `xml:"SitePathLink,omitempty" json:"SitePathLink,omitempty"`
}

// SitePathLinkVersionStructure represents the SitePathLink_VersionStructure element
// Type for a SITE PATH LINK.
type SitePathLinkVersionStructure struct {
	PathLinkVersionStructure
	// Reference to parent of SITE, if any.
	SiteRef *SiteRefStructure `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	LevelRef *LevelRef `xml:"LevelRef,omitempty" json:"LevelRef,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	// Impediments to navigation from processes or barriers. For example security, check in etc.
	CheckConstraints *CheckConstraintsRelStructure `xml:"checkConstraints,omitempty" json:"checkConstraints,omitempty"`
	// EQUIPMENT PLACEs within SITE COMPONENT.
	EquipmentPlaces *EquipmentPlacesRelStructure `xml:"equipmentPlaces,omitempty" json:"equipmentPlaces,omitempty"`
	// Items of fixed EQUIPMENT that may be located in places within the SITE  ELEMENT.
	PlaceEquipments *PlaceEquipmentsRelStructure `xml:"placeEquipments,omitempty" json:"placeEquipments,omitempty"`
	// LOCAL SERVICEs that may be located in PLACEs within the SITE ELEMENT.
	LocalServices *LocalServicesRelStructure `xml:"localServices,omitempty" json:"localServices,omitempty"`
	// Additional public label for the SITE PATH LINK
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
}

// PathJunctionsRelStructure represents the pathJunctions_RelStructure element
// Type for a list of PATH JUNCTIONs.
type PathJunctionsRelStructure struct {
	ContainmentAggregationStructure
	PathJunctionRef []PathJunctionRef `xml:"PathJunctionRef,omitempty" json:"PathJunctionRef,omitempty"`
	// PATH JUNCTION for a SITE.
	PathJunction []PathJunction `xml:"PathJunction,omitempty" json:"PathJunction,omitempty"`
}

// PathJunctionVersionStructure represents the PathJunction_VersionStructure element
// Type for a PATH LINK VIEW.
type PathJunctionVersionStructure struct {
	PointVersionStructure
	// Parent ZONE that contains this PATH JUNCTION.
	ParentZoneRef *ZoneRefStructure `xml:"ParentZoneRef,omitempty" json:"ParentZoneRef,omitempty"`
	// Whether the component is available for public use or is restricted.
	PublicUse *PublicUseEnumeration `xml:"PublicUse,omitempty" json:"PublicUse,omitempty"`
	// Whether the component is Indoors or outdoors. Default is Indoors.
	Covered *CoveredEnumeration `xml:"Covered,omitempty" json:"Covered,omitempty"`
	// Whether the component is within a gated area or freely accessible without a pass or ticket.
	Gated *GatedEnumeration `xml:"Gated,omitempty" json:"Gated,omitempty"`
	// Whether the component is lit or not. Default is well Lit.
	Lighting *LightingEnumeration `xml:"Lighting,omitempty" json:"Lighting,omitempty"`
	// Whether all areas of the component are wheelchair accessible.
	AllAreasWheelchairAccessible *bool `xml:"AllAreasWheelchairAccessible,omitempty" json:"AllAreasWheelchairAccessible,omitempty"`
	// Total number of people that component can contain.
	PersonCapacity *int `xml:"PersonCapacity,omitempty" json:"PersonCapacity,omitempty"`
	// Presentation defaults for SITE ELEMENT. +V1.2.2
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// Facilities available at SITe.
	Facilities *SiteFacilitySetsRelStructure `xml:"facilities,omitempty" json:"facilities,omitempty"`
	// Additional Label of PATH JUNCTION.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// PATH JUNCTION is within the referenced SITE COMPONENT.
	SiteComponentRef *SiteComponentRefStructure `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
}

// PathLinkDerivedViewStructure represents the PathLink_DerivedViewStructure element
// Type for a PATH LINK VIEW.
type PathLinkDerivedViewStructure struct {
	DerivedViewStructure
	// Whether link should be hidden in the PATH LINK VIEW.
	HideLink *bool `xml:"HideLink,omitempty" json:"HideLink,omitempty"`
	// Whether destination of PATH LINK should be hidden.
	HideDestination *bool `xml:"HideDestination,omitempty" json:"HideDestination,omitempty"`
	// Whether ENTRANCE on beginning of PATH LINK should be shown as separate step in view.
	ShowEntranceSeparately *bool `xml:"ShowEntranceSeparately,omitempty" json:"ShowEntranceSeparately,omitempty"`
	// Whether exit at end of PATH LINK should be shown as separate step in view.
	ShowExitSeparately *bool `xml:"ShowExitSeparately,omitempty" json:"ShowExitSeparately,omitempty"`
	// Whether Heading element should be shown as separate step in view e.g. turn left right.
	ShowHeadingSeparately *bool `xml:"ShowHeadingSeparately,omitempty" json:"ShowHeadingSeparately,omitempty"`
}

// PathLink represents the PathLink element
// A link between any two PLACEs (That is STOP PLACEs, ACCESS SPACEs or QUAYs, BOARDING POSITIONs, POINTs OF INTEREST etc or PATH JUNCTIONs) that represents a step in a possible route for pedestrians, cyclists or other out of vehicle passengers within or between a PLACE.
type PathLink struct {
	PathLinkVersionStructure
}

// SitePathLink represents the SitePathLink element
// A PATH LINK between two nodes that are SITE components, i.e. within a STOP PLACE or POINT OF INTEREST.
type SitePathLink struct {
	SitePathLinkVersionStructure
}

// PathJunction represents the PathJunction element
// A designated point, inside or outside of a STOP PLACE or POINT OF INTEREST, at which two or more PATH LINKs may connect or branch.
type PathJunction struct {
	PathJunctionVersionStructure
}

// PathLinkView represents the PathLinkView element
// A VIEW of a PATH LINK used to select items for presentation.
type PathLinkView struct {
	PathLinkDerivedViewStructure
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
}

// NavigationPathsInFrameRelStructure represents the navigationPathsInFrame_RelStructure element
// Type for containment in frame of NAVIGATION PATHs.
type NavigationPathsInFrameRelStructure struct {
	ContainmentAggregationStructure
	// A designated path between two PLACEs. May include an Ordered sequence of references to PATH LINKS.
	NavigationPath []NavigationPath `xml:"NavigationPath" json:"NavigationPath"`
}

// PathLinksInFrameRelStructure represents the pathLinksInFrame_RelStructure element
// Type for containment in frame of PATH LINKs.
type PathLinksInFrameRelStructure struct {
	ContainmentAggregationStructure
	// A designated path between two PLACEs. May include an Ordered sequence of references to PATH LINKS.
	PathLink []PathLink `xml:"PathLink" json:"PathLink"`
}

// PathJunctionsInFrameRelStructure represents the pathJunctionsInFrame_RelStructure element
// Type for containment in frame of PATH JUNCTIONs.
type PathJunctionsInFrameRelStructure struct {
	ContainmentAggregationStructure
	// A designated path between two PLACEs. May include an Ordered sequence of references to PATH LINKS.
	PathJunction []PathJunction `xml:"PathJunction" json:"PathJunction"`
}

// NavigationPathsRelStructure represents the navigationPaths_RelStructure element
// Type for a list of NAVIGATION PATHs.
type NavigationPathsRelStructure struct {
	ContainmentAggregationStructure
	NavigationPathRef []NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
	// NAVIGATION PATH for a SITE.
	NavigationPath []NavigationPath `xml:"NavigationPath,omitempty" json:"NavigationPath,omitempty"`
}

// NavigationPathVersionStructure represents the NavigationPath_VersionStructure element
// Type for NAVIGATION PATH.
type NavigationPathVersionStructure struct {
	LinkSequenceVersionStructure
	// Origin end of NAVIGATION PATH. Only needed if detailed PATH LINKs are not given.
	From *PathLinkEndStructure `xml:"From,omitempty" json:"From,omitempty"`
	// Destination end of NAVIGATION PATH. Only needed if detailed PATH LINKs not given.
	To *PathLinkEndStructure `xml:"To,omitempty" json:"To,omitempty"`
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// MODEs of access which may used at associated place, e.g. foot access, bicycle access.
	AccessModes *AccessModeEnumeration `xml:"AccessModes,omitempty" json:"AccessModes,omitempty"`
	// Summaries of access features encountered in path.
	Summaries *AccessSummariesRelStructure `xml:"summaries,omitempty" json:"summaries,omitempty"`
	// Total time needed to navigate path (May be derived from links).
	TransferDuration *TransferDurationStructure `xml:"TransferDuration,omitempty" json:"TransferDuration,omitempty"`
	// Whether the component is available for public use or is restricted.
	PublicUse *PublicUseEnumeration `xml:"PublicUse,omitempty" json:"PublicUse,omitempty"`
	// Whether the component is Indoors or outdoors. Default is Indoors.
	Covered *CoveredEnumeration `xml:"Covered,omitempty" json:"Covered,omitempty"`
	// Whether the component is within a gated area or freely accessible without a pass or ticket.
	Gated *GatedEnumeration `xml:"Gated,omitempty" json:"Gated,omitempty"`
	// Whether the component is lit or not. Default is well Lit.
	Lighting *LightingEnumeration `xml:"Lighting,omitempty" json:"Lighting,omitempty"`
	// Whether all areas of the component are wheelchair accessible.
	AllAreasWheelchairAccessible *bool `xml:"AllAreasWheelchairAccessible,omitempty" json:"AllAreasWheelchairAccessible,omitempty"`
	// Total number of people that component can contain.
	PersonCapacity *int `xml:"PersonCapacity,omitempty" json:"PersonCapacity,omitempty"`
	// Presentation defaults for SITE ELEMENT. +V1.2.2
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// Facilities available at SITe.
	Facilities *SiteFacilitySetsRelStructure `xml:"facilities,omitempty" json:"facilities,omitempty"`
	// Classification of Overall Accessibility of NAVIGATION PATH.
	AccessFeatureList *AccessFeatureEnumeration `xml:"AccessFeatureList,omitempty" json:"AccessFeatureList,omitempty"`
	// Classification of Navigation.
	NavigationType *NavigationTypeEnumeration `xml:"NavigationType,omitempty" json:"NavigationType,omitempty"`
	// Ordered collection of References to STOP PLACE spaces Use for a branch path.
	PlacesInSequence *PlacesInSequenceRelStructure `xml:"placesInSequence,omitempty" json:"placesInSequence,omitempty"`
	// Ordered collection of References to PATH LINKs.
	PathLinksInSequence *PathLinksInSequenceRelStructure `xml:"pathLinksInSequence,omitempty" json:"pathLinksInSequence,omitempty"`
	// Access Links that NAVIGATION PATH serves.
	Transfers *TransferRefsRelStructure `xml:"transfers,omitempty" json:"transfers,omitempty"`
}

// PathLinksInSequenceRelStructure represents the pathLinksInSequence_RelStructure element
// A collection of one or more PATH LINKs in SEQUENCE.
type PathLinksInSequenceRelStructure struct {
	StrictContainmentAggregationStructure
	PathLinkInSequence []PathLinkInSequence `xml:"PathLinkInSequence" json:"PathLinkInSequence"`
}

// PathLinkInSequenceVersionedChildStructure represents the PathLinkInSequence_VersionedChildStructure element
// Type for a step in NAVIGATION PATH.
type PathLinkInSequenceVersionedChildStructure struct {
	LinkInLinkSequenceVersionedChildStructure
	PathLinkRef PathLinkRef `xml:"PathLinkRef" json:"PathLinkRef"`
	// Whether link is navigated in to / from, i.e. reverse direction . Default is false, i.e. from to.
	Reverse *bool `xml:"Reverse,omitempty" json:"Reverse,omitempty"`
	// Whether step is left right or forward.
	Heading *PathHeadingEnumeration `xml:"Heading,omitempty" json:"Heading,omitempty"`
	// Whether step is up down or level in direction of use.
	Transition *TransitionEnumeration `xml:"Transition,omitempty" json:"Transition,omitempty"`
	// Instruction for following path
	Instruction *MultilingualString `xml:"Instruction,omitempty" json:"Instruction,omitempty"`
	// Label On step.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// Instructions on how step view should be presented.
	Views *Views `xml:"views,omitempty" json:"views,omitempty"`
}

// Views represents the views element
type Views struct {
	PathLinkView PathLinkView `xml:"PathLinkView" json:"PathLinkView"`
}

// PlacesInSequenceRelStructure represents the placesInSequence_RelStructure element
// A collection of one or more PLACEs in SEQUENCE.
type PlacesInSequenceRelStructure struct {
	StrictContainmentAggregationStructure
	PlaceInSequence []PlaceInSequence `xml:"PlaceInSequence" json:"PlaceInSequence"`
}

// PlaceInSequenceVersionedChildStructure represents the PlaceInSequence_VersionedChildStructure element
// Type for a PLACE in SEQUENCE.
type PlaceInSequenceVersionedChildStructure struct {
	PointInLinkSequenceVersionedChildStructure
	// Reference to a Place or Site Component , that is QUAY, ACCESS SPACE or BOARDING POSITION or PATH JUNCTION.
	PlaceRef *PlaceRefStructure `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
	// Branching level of place.
	BranchLevel *string `xml:"BranchLevel,omitempty" json:"BranchLevel,omitempty"`
	// Onward links from this point.
	OnwardLinks *PathLinksInSequenceRelStructure `xml:"onwardLinks,omitempty" json:"onwardLinks,omitempty"`
}

// AccessSummariesRelStructure represents the accessSummaries_RelStructure element
// A collection of one or more ACCESS SUMMARies.
type AccessSummariesRelStructure struct {
	StrictContainmentAggregationStructure
	AccessSummary []AccessSummary `xml:"AccessSummary" json:"AccessSummary"`
}

// AccessSummaryVersionedChildStructure represents the AccessSummary_VersionedChildStructure element
// Type for ACCESS SUMMARY.
type AccessSummaryVersionedChildStructure struct {
	VersionedChildStructure
	// Type of access feature, e.g. lift, stairs,
	AccessFeatureType AccessFeatureEnumeration `xml:"AccessFeatureType" json:"AccessFeatureType"`
	// Count of feature, e.g. number of lifts, stairs.
	Count int `xml:"Count" json:"Count"`
	// Nature of access feature transition e.g. up or down.
	Transition *TransitionEnumeration `xml:"Transition,omitempty" json:"Transition,omitempty"`
}

// NavigationPath represents the NavigationPath element
// A designated path between two places. May include an ordered sequence of PATH LINKs.
type NavigationPath struct {
	NavigationPathVersionStructure
}

// PathLinkInSequence represents the PathLinkInSequence element
// A step in a Navigation PATH.
type PathLinkInSequence struct {
	PathLinkInSequenceVersionedChildStructure
}

// PlaceInSequence represents the PlaceInSequence element
// Point traversed by  a NAVIGATION PATH  in sequence. May be a PLACE PATH JUNCTION or POINT.
type PlaceInSequence struct {
	PlaceInSequenceVersionedChildStructure
}

// AccessSummary represents the AccessSummary element
// Summary of a feature used in NAVIGATION PATH.
type AccessSummary struct {
	AccessSummaryVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// SiteConnectionVersionStructure represents the SiteConnection_VersionStructure element
// Type for a SITE CONNECTION.
type SiteConnectionVersionStructure struct {
	TransferVersionStructure
	// Origin end of SITE CONNECTION.
	From *SiteConnectionEndStructure `xml:"From,omitempty" json:"From,omitempty"`
	// Destination end of SITE CONNECTION.
	To *SiteConnectionEndStructure `xml:"To,omitempty" json:"To,omitempty"`
	// NAVIGATION PATHs between SITEs.
	NavigationPaths *NavigationPathsRelStructure `xml:"navigationPaths,omitempty" json:"navigationPaths,omitempty"`
}

// SiteConnectionEndStructure represents the SiteConnectionEndStructure element
// Type for a SITE CONNECTION End.
type SiteConnectionEndStructure struct {
	// MODE of end point of TRANSFER . Default is all modes, i.e. all modes of referenced stop place and or stop point.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	// Identifier of a Place at end point of transfer.
	StopAreaRef *StopAreaRefStructure `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	// Specific SCHEDULED STOP POINT at end of CONNECTION.
	ScheduledStopPointRef *ScheduledStopPointRefStructure `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	// VEHICLE MEETING POINT at END OF CONENCTION.   +V1.2.2. NB This is typed only to POINT to avoid forward dependency
	VehicleMeetingPointRef *PointRefStructure `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	AccessSpaceRef *AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceEntranceRef *StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	PointOfInterestSpaceRef *PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	PointOfInterestEntranceRef *PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef *VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef *ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	ParkingEntranceForVehiclesRef *ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef *ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef *ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OperatorView *OperatorView `xml:"OperatorView,omitempty" json:"OperatorView,omitempty"`
	// Label at end of site connection.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
}

// DefaultConnectionVersionStructure represents the DefaultConnection_VersionStructure element
// Type for DEFAULT TRANSFER.
type DefaultConnectionVersionStructure struct {
	TransferVersionStructure
	// Origin end of DEFAULT TRANSFER.
	From *DefaultConnectionEndStructure `xml:"From,omitempty" json:"From,omitempty"`
	// Destination end of DEFAULT TRANSFER.
	To *DefaultConnectionEndStructure `xml:"To,omitempty" json:"To,omitempty"`
	TopographicPlaceView *TopographicPlaceView `xml:"TopographicPlaceView,omitempty" json:"TopographicPlaceView,omitempty"`
	StopAreaRef *StopAreaRef `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	VehicleStoppingPositionRef *VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef *VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef *AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef *StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef *VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef *ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef *PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef *StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef *StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef *ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef *ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef *ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef *PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef *PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef *VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef *EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef *SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef *SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
}

// DefaultConnectionEndStructure represents the DefaultConnectionEndStructure element
// Type for a DEFAULT TRANSFER.
type DefaultConnectionEndStructure struct {
	// Identifier of MODE of end point of TRANSFER.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	OperatorView *OperatorView `xml:"OperatorView,omitempty" json:"OperatorView,omitempty"`
}

// SiteConnection represents the SiteConnection element
// The physical (spatial) possibility to connect from one point to another in a SITE.
type SiteConnection struct {
	SiteConnectionVersionStructure
}

// DefaultConnection represents the DefaultConnection element
// Specifies the default transfer times to transfer between MODEs and / or OPERATORs within a region.
type DefaultConnection struct {
	DefaultConnectionVersionStructure
}

// ScheduledStopPointsInFrameRelStructure represents the scheduledStopPointsInFrame_RelStructure element
// Type for containment in frame of SCHEDULED STOP POINTs.
type ScheduledStopPointsInFrameRelStructure struct {
	ContainmentAggregationStructure
	ScheduledStopPoint []ScheduledStopPoint `xml:"ScheduledStopPoint" json:"ScheduledStopPoint"`
}

// ServiceLinksInFrameRelStructure represents the serviceLinksInFrame_RelStructure element
// Type for containment in frame of SERVICE LINKs.
type ServiceLinksInFrameRelStructure struct {
	ContainmentAggregationStructure
	ServiceLink []ServiceLink `xml:"ServiceLink" json:"ServiceLink"`
}

// StopAreasInFrameRelStructure represents the stopAreasInFrame_RelStructure element
// Type for containment in frame of STOP AREAs.
type StopAreasInFrameRelStructure struct {
	ContainmentAggregationStructure
	StopArea []StopArea `xml:"StopArea" json:"StopArea"`
}

// ServicePatternsInFrameRelStructure represents the servicePatternsInFrame_RelStructure element
// Type for containment in frame of SERVICE PATTERNs.
type ServicePatternsInFrameRelStructure struct {
	ContainmentAggregationStructure
	ServicePattern []ServicePattern `xml:"ServicePattern" json:"ServicePattern"`
}

// ScheduledStopPointVersionStructure represents the ScheduledStopPoint_VersionStructure element
// Type for SCHEDULED STOP POINT restricts id.
type ScheduledStopPointVersionStructure struct {
	TimingPointVersionStructure
	// Whether by default a passenger can alight at SCHEDULED STOP POINT.
	StopAreas *StopAreaRefsRelStructure `xml:"stopAreas,omitempty" json:"stopAreas,omitempty"`
	// TARIFF ZONEs for SCHEDULED STOP POINT.
	TariffZones *TariffZoneRefsRelStructure `xml:"tariffZones,omitempty" json:"tariffZones,omitempty"`
	// Short Name of SCHEDULED STOP POINT.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Optiona l Suffix for Name of SCHEDULED STOP POINT.
	NameSuffix *MultilingualString `xml:"NameSuffix,omitempty" json:"NameSuffix,omitempty"`
	// Further description of SCHEDULED STOP POINT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Label of SCHEDULED STOP POINT.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// An alternative short code that t identifies the STOP POINT.
	ShortStopCode *PrivateCodeStructure `xml:"ShortStopCode,omitempty" json:"ShortStopCode,omitempty"`
	// A PUBLIC code that uniquely identifies the STOP POINT.
	PublicCode *PrivateCodeStructure `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// An alternative  code that uniquely identifies the STOP POINT. pecifically for use in AVMS systems that require an alias, if. For VDV compatibility.
	ExternalStopPointRef *ExternalObjectRefStructure `xml:"ExternalStopPointRef,omitempty" json:"ExternalStopPointRef,omitempty"`
	// URL for SCHEDULED STOP POINT.
	Url *string `xml:"Url,omitempty" json:"Url,omitempty"`
	// Categorisation of SCHEDULED STOP POINT.
	StopType *StopTypeEnumeration `xml:"StopType,omitempty" json:"StopType,omitempty"`
	// Heading of STOP relative to street. Degrees  from North. This should be considered as a derived value that can be used for presentation purposes when information about the physical stop is not available. . The definitive value is the compass bearing found on the QUAY (i.e. physical stop) to which a SCHEDULED STOP POINT is assigned.
	CompassBearing *float32 `xml:"CompassBearing,omitempty" json:"CompassBearing,omitempty"`
	// Presentation values to use when rendering STOP POINT such as a colour. and font.
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// TRANSPORT MODE or MODES of STOP POINT.
	VehicleModes *VehicleModeEnumeration `xml:"VehicleModes,omitempty" json:"VehicleModes,omitempty"`
	// Default for whether SCHEDULED STOP POINT may be used for alighting. May be overridden on specific services.
	ForAlighting *bool `xml:"ForAlighting,omitempty" json:"ForAlighting,omitempty"`
	// Default for whether SCHEDULED STOP POINT may be used for boarding. May be overridden on specific services.
	ForBoarding *bool `xml:"ForBoarding,omitempty" json:"ForBoarding,omitempty"`
	// Whether stop is by default a request stop in the timetable. May be overridden in specific SERVICE PATTERNs.
	RequestStop *bool `xml:"RequestStop,omitempty" json:"RequestStop,omitempty"`
	// Method of request stop. Default is noneRequired. + v1.1
	RequestMethodType *RequestMethodTypeEnumeration `xml:"RequestMethodType,omitempty" json:"RequestMethodType,omitempty"`
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	TopographicPlaceView *TopographicPlaceView `xml:"TopographicPlaceView,omitempty" json:"TopographicPlaceView,omitempty"`
	// Whether STOP POINT can be considered as being at the centre of a TOPOGRAPHIC PLACE.  Default is false.
	AtCentre *bool `xml:"AtCentre,omitempty" json:"AtCentre,omitempty"`
}

// ServiceLinkVersionStructure represents the ServiceLink_VersionStructure element
// Type for SERVICE LINK.
type ServiceLinkVersionStructure struct {
	LinkVersionStructure
	// Identifier of SCHEDULED STOP POINT from which Link starts.
	FromPointRef ScheduledStopPointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// Identifier of SCHEDULED STOP POINT at which Link ends.
	ToPointRef ScheduledStopPointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
	VehicleMode *VehicleMode `xml:"VehicleMode,omitempty" json:"VehicleMode,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
}

// StopAreaVersionStructure represents the StopArea_VersionStructure element
// Type for a STOP AREA.
type StopAreaVersionStructure struct {
	ZoneVersionStructure
	// Alternative public facing Code that uniquely identifies the STOP AREA.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Reference to any parent STOP AREA of the STOP AREA.
	ParentStopAreaRef *StopAreaRefStructure `xml:"ParentStopAreaRef,omitempty" json:"ParentStopAreaRef,omitempty"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	TopographicPlaceView *TopographicPlaceView `xml:"TopographicPlaceView,omitempty" json:"TopographicPlaceView,omitempty"`
}

// ConnectionVersionStructure represents the Connection_VersionStructure element
// Type for a CONNECTION link restricts id.
type ConnectionVersionStructure struct {
	TransferVersionStructure
	// An alternative  code that uniquely identifies the CONNECTION link Specifically for use in AVMS systems that require an alias, if. For VDV compatibility.
	ExternalConnectionLinkRef *ExternalObjectRefStructure `xml:"ExternalConnectionLinkRef,omitempty" json:"ExternalConnectionLinkRef,omitempty"`
	// Origin end of CONNECTION.
	From *ConnectionEndStructure `xml:"From,omitempty" json:"From,omitempty"`
	// Destination end of  CONNECTION.
	To *ConnectionEndStructure `xml:"To,omitempty" json:"To,omitempty"`
	// Whether  connecting at this stop passengers may only transfer. If true, then they may not enter or exit at the station.
	TransferOnly *bool `xml:"TransferOnly,omitempty" json:"TransferOnly,omitempty"`
}

// ConnectionEndStructure represents the ConnectionEndStructure element
// Type for a CONNECTION END.
type ConnectionEndStructure struct {
	// MODE of end Point of CONNECTION. Default is all modes, MODE of SCHEDULED STOP POINT can be derived.
	TransportMode *AllModesEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	// SUBMODE of end Point of CONNECTION. SUBMODE of SCHEDULED STOP POINT can be derived.
	Submode *Submode `xml:"Submode,omitempty" json:"Submode,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	// Specific SCHEDULED STOP POINT at end of CONNECTION.
	ScheduledStopPointRef *ScheduledStopPointRefStructure `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	// VEHICLE MEETING POINT at END OF CONENCTION.   +V1.2.2. NB This is typed only to POINT to avoid forward dependency
	VehicleMeetingPointRef *PointRefStructure `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
}

// ServicePatternVersionStructure represents the ServicePattern_VersionStructure element
// Type for a SERVICE PATTERN.
type ServicePatternVersionStructure struct {
	LinkSequenceVersionStructure
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	RouteView *RouteView `xml:"RouteView,omitempty" json:"RouteView,omitempty"`
	// DIRECTION of JOURNEY PATTERN. Should be same as for ROUTE on which PATTERN is based.
	DirectionType *DirectionTypeEnumeration `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	DirectionView *DirectionView `xml:"DirectionView,omitempty" json:"DirectionView,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	// Destination / Direction name for JOURNEY PATTERN.
	DestinationDisplayView *DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
	TypeOfJourneyPatternRef *TypeOfJourneyPatternRef `xml:"TypeOfJourneyPatternRef,omitempty" json:"TypeOfJourneyPatternRef,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	// Reference to a TIMING PATTERN.
	TimingPatternRef *TimingPatternRef `xml:"TimingPatternRef,omitempty" json:"TimingPatternRef,omitempty"`
	// Notices for JOURNEY PATTERN Points may be
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// Ordered run times for JOURNEY PATTERN, specific to a TIME DEMAND TYPE.
	RunTimes *JourneyPatternRunTimesRelStructure `xml:"runTimes,omitempty" json:"runTimes,omitempty"`
	// WAIT TIMEs for JOURNEY PATTERN, specific to a TIME DEMAND TYPE.
	WaitTimes *JourneyPatternWaitTimesRelStructure `xml:"waitTimes,omitempty" json:"waitTimes,omitempty"`
	// Wait times for TIMING POINT. There may be different times for different time demands.
	Headways *JourneyPatternHeadwaysRelStructure `xml:"headways,omitempty" json:"headways,omitempty"`
	// Layovers associated with JOURNEY PATTERN.
	Layovers *JourneyPatternLayoversRelStructure `xml:"layovers,omitempty" json:"layovers,omitempty"`
	// JOURNEY PATTERNs that make up SERVICE PATTERN.
	JourneyPatterns *JourneyPatternRefsRelStructure `xml:"journeyPatterns,omitempty" json:"journeyPatterns,omitempty"`
	// Ordered collection of POINTs making up the SERVICE PATTERN.
	PointsInSequence *StopPointsInJourneyPatternRelStructure `xml:"pointsInSequence,omitempty" json:"pointsInSequence,omitempty"`
	// Ordered collection of LINKS  making up the SERVICE PATTERN.
	LinksInSequence *ServiceLinksInJourneyPatternRelStructure `xml:"linksInSequence,omitempty" json:"linksInSequence,omitempty"`
}

// ServiceJourneyPatternVersionStructure represents the ServiceJourneyPattern_VersionStructure element
// Type for SERVICE JOURNEY PATTERN.
type ServiceJourneyPatternVersionStructure struct {
	JourneyPatternVersionStructure
	// Type of SERVICE JOURNEY PATTERN.
	ServiceJourneyPatternType *ServiceJourneyPatternTypeEnumeration `xml:"ServiceJourneyPatternType,omitempty" json:"ServiceJourneyPatternType,omitempty"`
}

// StopPointsInJourneyPatternRelStructure represents the stopPointsInJourneyPattern_RelStructure element
// Type for a list of STOP POINTs IN JOURNEY PATTERN.
type StopPointsInJourneyPatternRelStructure struct {
	StrictContainmentAggregationStructure
	StopPointInJourneyPattern []StopPointInJourneyPattern `xml:"StopPointInJourneyPattern" json:"StopPointInJourneyPattern"`
}

// StopPointInJourneyPatternVersionedChildStructure represents the StopPointInJourneyPattern_VersionedChildStructure element
// Type for a STOP POINT IN JOURNEY PATTERN.
type StopPointInJourneyPatternVersionedChildStructure struct {
	PointInLinkSequenceVersionedChildStructure
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	// Onward link - used to disambiguate if there are multiple links from the same stop, e.g. as for cloverleaf route topology. If not given explicitly assume there is only one link that connects the two.
	OnwardTimingLinkRef *TimingLinkRefStructure `xml:"OnwardTimingLinkRef,omitempty" json:"OnwardTimingLinkRef,omitempty"`
	// Whether point is a wait point.
	IsWaitPoint *bool `xml:"IsWaitPoint,omitempty" json:"IsWaitPoint,omitempty"`
	// Wait time as interval. OPTIMISATION assuming default Time Demand. Use this to declare a single wait time Other wise a list of times for different time demands.
	WaitTime *string `xml:"WaitTime,omitempty" json:"WaitTime,omitempty"`
	// Wait times for TIMING POINT. There may be different times for different time demands.
	WaitTimes *JourneyPatternWaitTimesRelStructure `xml:"waitTimes,omitempty" json:"waitTimes,omitempty"`
	// Wait times for TIMING POINT. There may be different times for different time demands.
	Headways *JourneyPatternHeadwaysRelStructure `xml:"headways,omitempty" json:"headways,omitempty"`
	// Link that connects this to the next point. Allows to disambiguate if there are multiple SERVICE LINKs between two SERVICE POINTs.
	OnwardServiceLinkRef *ServiceLinkRefStructure `xml:"OnwardServiceLinkRef,omitempty" json:"OnwardServiceLinkRef,omitempty"`
	// Whether alighting is allowed at the stop. Default is true.
	ForAlighting *bool `xml:"ForAlighting,omitempty" json:"ForAlighting,omitempty"`
	// Whether boarding is allowed at the stop. Default is true.
	ForBoarding *bool `xml:"ForBoarding,omitempty" json:"ForBoarding,omitempty"`
	// On which side the vehicle can be alighted on this stop in the direction of travel. This is often not relevant. And it is difficult to define this from the QUAY when the direction of travel is not known.
	AlightingSideInDirectionOfTravel *SideInDirectionOfTravelEnumeration `xml:"AlightingSideInDirectionOfTravel,omitempty" json:"AlightingSideInDirectionOfTravel,omitempty"`
	// On which side the vehicle can be boarded on this stop in the direction of travel.
	BoardingSideInDirectionOfTravel *SideInDirectionOfTravelEnumeration `xml:"BoardingSideInDirectionOfTravel,omitempty" json:"BoardingSideInDirectionOfTravel,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	DestinationDisplayView *DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
	// Destinations that the SERVICE goes via.
	Vias *ViasRelStructure `xml:"vias,omitempty" json:"vias,omitempty"`
	FlexiblePointProperties *FlexiblePointProperties `xml:"FlexiblePointProperties,omitempty" json:"FlexiblePointProperties,omitempty"`
	// Whether DESTINATION DISPLAY should be updated at this point. If DESTINATION NAME value is different from Previous stop this is implicit.
	ChangeOfDestinationDisplay *bool `xml:"ChangeOfDestinationDisplay,omitempty" json:"ChangeOfDestinationDisplay,omitempty"`
	// Whether Service Requirements Change at this point.
	ChangeOfServiceRequirements *bool `xml:"ChangeOfServiceRequirements,omitempty" json:"ChangeOfServiceRequirements,omitempty"`
	// NOTICEs for POINT IN JOURNEY PATTERN.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// Whether stop is a request stop for this journey. Default is false.
	RequestStop *bool `xml:"RequestStop,omitempty" json:"RequestStop,omitempty"`
	// Method to Request Stop in this particular service pattern; if none specified, as as per stop.  +V1.1
	RequestMethod *RequestMethodTypeEnumeration `xml:"RequestMethod,omitempty" json:"RequestMethod,omitempty"`
	// Nature of use of stop, e.g. access, interchange only, or pass through. Default is Access.
	StopUse *StopUseEnumeration `xml:"StopUse,omitempty" json:"StopUse,omitempty"`
	// Booking Arrangements for stop if different from those for SERVICE JOURNEY.
	BookingArrangements *BookingArrangementsStructure `xml:"BookingArrangements,omitempty" json:"BookingArrangements,omitempty"`
	// Whether the stop is included in printed media. Default is true. +v1.1
	Print *bool `xml:"Print,omitempty" json:"Print,omitempty"`
	// When STOP POINT IN JOURNEY PATTERN is to be publicised in dynamic media. Default is always. +v1.1
	Dynamic *DynamicAdvertisementEnumeration `xml:"Dynamic,omitempty" json:"Dynamic,omitempty"`
}

// ServiceLinksInJourneyPatternRelStructure represents the serviceLinksInJourneyPattern_RelStructure element
// Type for a list of SERVICE LINKs IN JOURNEY PATTERN.
type ServiceLinksInJourneyPatternRelStructure struct {
	StrictContainmentAggregationStructure
	ServiceLinkInJourneyPattern []ServiceLinkInJourneyPattern `xml:"ServiceLinkInJourneyPattern" json:"ServiceLinkInJourneyPattern"`
}

// ServiceLinkInJourneyPatternVersionedChildStructure represents the ServiceLinkInJourneyPattern_VersionedChildStructure element
// Type for a SERVICE LINK IN JOURNEY PATTERN.
type ServiceLinkInJourneyPatternVersionedChildStructure struct {
	LinkInLinkSequenceVersionedChildStructure
	TimingLinkRef *TimingLinkRef `xml:"TimingLinkRef,omitempty" json:"TimingLinkRef,omitempty"`
	// run times for this TIMING LINK.
	RunTimes *JourneyRunTimesRelStructure `xml:"runTimes,omitempty" json:"runTimes,omitempty"`
	ServiceLinkRef ServiceLinkRef `xml:"ServiceLinkRef" json:"ServiceLinkRef"`
}

// ScheduledStopPointDerivedViewStructure represents the ScheduledStopPoint_DerivedViewStructure element
// Type for SCHEDULED STOP POINT VIEW.
type ScheduledStopPointDerivedViewStructure struct {
	DerivedViewStructure
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	// Name of Stop Point.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	TypeOfPointRef *TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
	// Short Name of SCHEDULED STOP POINT.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Optiona l Suffix for Name of SCHEDULED STOP POINT.
	NameSuffix *MultilingualString `xml:"NameSuffix,omitempty" json:"NameSuffix,omitempty"`
	// Further description of SCHEDULED STOP POINT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Label of SCHEDULED STOP POINT.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// An alternative short code that t identifies the STOP POINT.
	ShortStopCode *PrivateCodeStructure `xml:"ShortStopCode,omitempty" json:"ShortStopCode,omitempty"`
	// A PUBLIC code that uniquely identifies the STOP POINT.
	PublicCode *PrivateCodeStructure `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// An alternative  code that uniquely identifies the STOP POINT. pecifically for use in AVMS systems that require an alias, if. For VDV compatibility.
	ExternalStopPointRef *ExternalObjectRefStructure `xml:"ExternalStopPointRef,omitempty" json:"ExternalStopPointRef,omitempty"`
	// URL for SCHEDULED STOP POINT.
	Url *string `xml:"Url,omitempty" json:"Url,omitempty"`
	// Categorisation of SCHEDULED STOP POINT.
	StopType *StopTypeEnumeration `xml:"StopType,omitempty" json:"StopType,omitempty"`
	// Heading of STOP relative to street. Degrees  from North. This should be considered as a derived value that can be used for presentation purposes when information about the physical stop is not available. . The definitive value is the compass bearing found on the QUAY (i.e. physical stop) to which a SCHEDULED STOP POINT is assigned.
	CompassBearing *float32 `xml:"CompassBearing,omitempty" json:"CompassBearing,omitempty"`
	// Presentation values to use when rendering STOP POINT such as a colour. and font.
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
}

// OnwardServiceLinkDerivedViewStructure represents the OnwardServiceLink_DerivedViewStructure element
// Type for information about onwards SERVICE LINK.
type OnwardServiceLinkDerivedViewStructure struct {
	DerivedViewStructure
	ServiceLinkInJourneyPattern *ServiceLinkInJourneyPattern `xml:"ServiceLinkInJourneyPattern,omitempty" json:"ServiceLinkInJourneyPattern,omitempty"`
	ServiceLinkRef *ServiceLinkRef `xml:"ServiceLinkRef,omitempty" json:"ServiceLinkRef,omitempty"`
	// Identifier of POINT at which LINK ends.
	ToPointRef *ScheduledStopPointRefStructure `xml:"ToPointRef,omitempty" json:"ToPointRef,omitempty"`
	// Distance for SERVICE LINK.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// RUN TIME for SERVICE LINK.
	RunTime *string `xml:"RunTime,omitempty" json:"RunTime,omitempty"`
}

// StopPointInJourneyPatternDerivedViewStructure represents the StopPointInJourneyPattern_DerivedViewStructure element
// Type for STOP POINT IN JOURNEY PATTERN VIEW.
type StopPointInJourneyPatternDerivedViewStructure struct {
	DerivedViewStructure
	PointInSingleJourneyPathRef *PointInSingleJourneyPathRef `xml:"PointInSingleJourneyPathRef,omitempty" json:"PointInSingleJourneyPathRef,omitempty"`
	FarePointInPatternRef *FarePointInPatternRef `xml:"FarePointInPatternRef,omitempty" json:"FarePointInPatternRef,omitempty"`
	StopPointInJourneyPatternRef *StopPointInJourneyPatternRef `xml:"StopPointInJourneyPatternRef,omitempty" json:"StopPointInJourneyPatternRef,omitempty"`
	TimingPointInJourneyPatternRef *TimingPointInJourneyPatternRef `xml:"TimingPointInJourneyPatternRef,omitempty" json:"TimingPointInJourneyPatternRef,omitempty"`
	PointInJourneyPatternRef *PointInJourneyPatternRef `xml:"PointInJourneyPatternRef,omitempty" json:"PointInJourneyPatternRef,omitempty"`
	// Count of number of visits to this stop - as per SIRI use. Default is 1
	VisitNumber *int `xml:"VisitNumber,omitempty" json:"VisitNumber,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	ScheduledStopPointView *ScheduledStopPointView `xml:"ScheduledStopPointView,omitempty" json:"ScheduledStopPointView,omitempty"`
	OnwardTimingLinkView *OnwardTimingLinkView `xml:"OnwardTimingLinkView,omitempty" json:"OnwardTimingLinkView,omitempty"`
	// reference to onwards SERVICE LINK.
	OnwardServiceLinkRef *ServiceLinkRefStructure `xml:"OnwardServiceLinkRef,omitempty" json:"OnwardServiceLinkRef,omitempty"`
	OnwardServiceLinkView *OnwardServiceLinkView `xml:"OnwardServiceLinkView,omitempty" json:"OnwardServiceLinkView,omitempty"`
	// Nature of TIMING POINT. Default is primary.
	TimingPointStatus *TimingPointStatusEnumeration `xml:"TimingPointStatus,omitempty" json:"TimingPointStatus,omitempty"`
	// Whether point is a wait point.
	IsWaitPoint *bool `xml:"IsWaitPoint,omitempty" json:"IsWaitPoint,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	// Wait time as interval. OPTIMISATION assuming default Time Demand. Use this to declare a single time. on a specific journey Other wise a list of times for different time demands for a JOURNEY PATTERN used in many different times.
	WaitTime *string `xml:"WaitTime,omitempty" json:"WaitTime,omitempty"`
	// Scheduled normal headway interval.
	ScheduledHeadwayInterval *string `xml:"ScheduledHeadwayInterval,omitempty" json:"ScheduledHeadwayInterval,omitempty"`
	// Minimum headway interval.
	MinimumHeadwayInterval *string `xml:"MinimumHeadwayInterval,omitempty" json:"MinimumHeadwayInterval,omitempty"`
	// Maximum headway interval.
	MaximumHeadwayInterval *string `xml:"MaximumHeadwayInterval,omitempty" json:"MaximumHeadwayInterval,omitempty"`
	// Order of CALL within Journey.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// ScheduledStopPoint represents the ScheduledStopPoint element
// A POINT where passengers can board or alight from vehicles. It is open, which hierarchical level such a point has. It can represent a single door (BoardingPosition) or a whole ZONE. The association to the physical model is done with STOP ASSIGNMENTs.
type ScheduledStopPoint struct {
	ScheduledStopPointVersionStructure
}

// ServiceLink represents the ServiceLink element
// A LINK between an ordered pair of STOP POINTs.  Service links are directional - there will be separate links for each direction of a route.
type ServiceLink struct {
	ServiceLinkVersionStructure
}

// StopArea represents the StopArea element
// A group of STOP POINTs close to each other.
type StopArea struct {
	StopAreaVersionStructure
}

// Connection represents the Connection element
// The physical (spatial) possibility for a passenger to change from one public transport vehicle to another to continue the trip. Different times may be necessary to cover this link, depending on the kind of passenger.
type Connection struct {
	ConnectionVersionStructure
}

// ConnectionEnd represents the ConnectionEnd element
// One end of a CONNECTION.
type ConnectionEnd struct {
	ConnectionEndStructure
}

// ServicePattern represents the ServicePattern element
// The subset of a JOURNEY PATTERN made up only of STOP POINTs IN JOURNEY PATTERN.
type ServicePattern struct {
	ServicePatternVersionStructure
}

// ServiceJourneyPattern represents the ServiceJourneyPattern element
// The JOURNEY PATTERN for a (passenger carrying) SERVICE JOURNEY.
type ServiceJourneyPattern struct {
	ServiceJourneyPatternVersionStructure
}

// StopPointInJourneyPattern represents the StopPointInJourneyPattern element
// The use of a SCHEDULED STOP POINT in a specified order. within a JOURNEY PATTERN or SERVICE PATTERN.
type StopPointInJourneyPattern struct {
	StopPointInJourneyPatternVersionedChildStructure
}

// ServiceLinkInJourneyPattern represents the ServiceLinkInJourneyPattern element
// The use of a SERVICE LINK in a specified order. within a JOURNEY PATTERN or SERVICE PATTERN.
type ServiceLinkInJourneyPattern struct {
	ServiceLinkInJourneyPatternVersionedChildStructure
}

// ScheduledStopPointView represents the ScheduledStopPointView element
// Simplified view of SCHEDULED STOP POINT. Includes derived some propertries of a stop.
type ScheduledStopPointView struct {
	ScheduledStopPointDerivedViewStructure
}

// OnwardServiceLinkView represents the OnwardServiceLinkView element
// Information about an onwards SERVICE LINK.
type OnwardServiceLinkView struct {
	OnwardServiceLinkDerivedViewStructure
}

// StopPointInJourneyPatternView represents the StopPointInJourneyPatternView element
// Simplified STOP POINT IN JOURNEY PATTERN. Assumes single time demand.
type StopPointInJourneyPatternView struct {
	StopPointInJourneyPatternDerivedViewStructure
}

// BorderPointsInFrameRelStructure represents the borderPointsInFrame_RelStructure element
// Type for containment in frame of BORDER POINT.
type BorderPointsInFrameRelStructure struct {
	FrameContainmentStructure
	BorderPoint []BorderPoint `xml:"BorderPoint" json:"BorderPoint"`
}

// FareScheduledStopPointsInFrameRelStructure represents the fareScheduledStopPointsInFrame_RelStructure element
// Type for containment in frame of  FARE SCHEUDLED STOP POINT.
type FareScheduledStopPointsInFrameRelStructure struct {
	FrameContainmentStructure
	ScheduledStopPoint []ScheduledStopPoint `xml:"ScheduledStopPoint,omitempty" json:"ScheduledStopPoint,omitempty"`
	// A POINT where passengers can board or alight from vehicles and that is designated fare  point.
	FareScheduledStopPoint []FareScheduledStopPoint `xml:"FareScheduledStopPoint,omitempty" json:"FareScheduledStopPoint,omitempty"`
}

// FareZonesInFrameRelStructure represents the fareZonesInFrame_RelStructure element
// Type for containment in frame of FARE ZONE.
type FareZonesInFrameRelStructure struct {
	FrameContainmentStructure
	FareZone []FareZone `xml:"FareZone" json:"FareZone"`
}

// FareSectionsInFrameRelStructure represents the fareSectionsInFrame_RelStructure element
// Type for containment in frame of FARE SECTION.
type FareSectionsInFrameRelStructure struct {
	FrameContainmentStructure
	FareSection []FareSection `xml:"FareSection" json:"FareSection"`
}

// FareScheduledStopPointVersionStructure represents the FareScheduledStopPoint_VersionStructure element
// Type for FARE SCHEDULED STOP POINT restricts id.
type FareScheduledStopPointVersionStructure struct {
	ScheduledStopPointVersionStructure
	SiteFacilitySetRef *SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	SiteFacilitySet *SiteFacilitySet `xml:"SiteFacilitySet,omitempty" json:"SiteFacilitySet,omitempty"`
	// Name to use to indicate station on routings and itineraries.
	NameOnRouting *MultilingualString `xml:"NameOnRouting,omitempty" json:"NameOnRouting,omitempty"`
	// Station to use for accounting (TAP TSi B1)
	AccountingStopPointRef *FareScheduledStopPointRefStructure `xml:"AccountingStopPointRef,omitempty" json:"AccountingStopPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
}

// BorderPointValueStructure represents the BorderPoint_ValueStructure element
// Type for a BORDER POINT.
type BorderPointValueStructure struct {
	TimingPointVersionStructure
	// Short Name of BORDER POINT.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Description of BORDER POINT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	GroupOfOperatorsRef *GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	GroupOfOperators *GroupOfOperators `xml:"GroupOfOperators,omitempty" json:"GroupOfOperators,omitempty"`
}

// FarePointsInPatternRelStructure represents the farePointsInPattern_RelStructure element
// Type for a list of FARE POINT IN JOURNEY PATTERNs.
type FarePointsInPatternRelStructure struct {
	ContainmentAggregationStructure
	FarePointInPatternRef []FarePointInPatternRef `xml:"FarePointInPatternRef,omitempty" json:"FarePointInPatternRef,omitempty"`
	FarePointInPattern []FarePointInPattern `xml:"FarePointInPattern,omitempty" json:"FarePointInPattern,omitempty"`
}

// FarePointInPatternVersionedChildStructure represents the FarePointInPattern_VersionedChildStructure element
// Type for FARE POINT IN JOURNEY PATTERN.
type FarePointInPatternVersionedChildStructure struct {
	PointInJourneyPatternVersionedChildStructure
	ScheduledStopPointView *ScheduledStopPointView `xml:"ScheduledStopPointView,omitempty" json:"ScheduledStopPointView,omitempty"`
	// Relative ranking for omitting this FARE POINT IN JOURNEY PATTERN when presenting an abridged verson of the series. 1=High.- omit first.
	AbridgementRanking *int `xml:"AbridgementRanking,omitempty" json:"AbridgementRanking,omitempty"`
	// Relative positiion to be given to name of point when presenting it in a list of stops (Left, right etc). Allows TAP itinerary to be constructed.
	PresentationPosition *SeriesPresentationEnumeration `xml:"PresentationPosition,omitempty" json:"PresentationPosition,omitempty"`
	// Whether use of  fare point is forbidden- can be used to  explicitly exclude certain routings  Default is false.
	IsForbidden *bool `xml:"IsForbidden,omitempty" json:"IsForbidden,omitempty"`
	// Whether interchange to another service is allowed at this point.
	//  Default is true.
	InterchangeAllowed *bool `xml:"InterchangeAllowed,omitempty" json:"InterchangeAllowed,omitempty"`
	// Whether stop is considered to be a fare stage
	IsFareStage *bool `xml:"IsFareStage,omitempty" json:"IsFareStage,omitempty"`
}

// FareSectionsRelStructure represents the fareSections_RelStructure element
// Type for a list of FARE SECTIONs.
type FareSectionsRelStructure struct {
	ContainmentAggregationStructure
	FareSectionRef []FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	FareSection []FareSection `xml:"FareSection,omitempty" json:"FareSection,omitempty"`
}

// FareSectionVersionStructure represents the FareSection_VersionStructure element
// Type for FARE SECTION.
type FareSectionVersionStructure struct {
	GeneralSectionVersionStructure
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	JourneyPattern *JourneyPattern `xml:"JourneyPattern,omitempty" json:"JourneyPattern,omitempty"`
	// FARE POINT IN JOURNEY PATTERN at which FARE SECTION begins.
	FromPointInPatternRef *FarePointInPatternRefStructure `xml:"FromPointInPatternRef,omitempty" json:"FromPointInPatternRef,omitempty"`
	// FARE POINT IN JOURNEY PATTERN at which FARE SECTION ends.
	ToPointInPatternRef *FarePointInPatternRefStructure `xml:"ToPointInPatternRef,omitempty" json:"ToPointInPatternRef,omitempty"`
}

// FareZoneVersionStructure represents the FareZone_VersionStructure element
// Type for a FARE ZONE.
type FareZoneVersionStructure struct {
	TariffZoneVersionStructure
	// Parent FARe ZONE that contains this ZONE.
	ParentFareZoneRef *FareZoneRefStructure `xml:"ParentFareZoneRef,omitempty" json:"ParentFareZoneRef,omitempty"`
	// Classification of zone topology.
	ZoneTopology *ZoneTopologyEnumeration `xml:"ZoneTopology,omitempty" json:"ZoneTopology,omitempty"`
	// Indication of how member stops of a FARE ZONE are specified (ExplicitStops, ImplicitSpatialProjection etc) .  Default is ExplicitStops
	ScopingMethod *ScopingMethodEnumeration `xml:"ScopingMethod,omitempty" json:"ScopingMethod,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	GroupOfOperatorsRef *GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	// FARE SECTIONS in FARE ZONE.
	FareSections *FareSectionsRelStructure `xml:"fareSections,omitempty" json:"fareSections,omitempty"`
	// Other fare zone that are wholly  included in the  FARE ZONE.
	Contains *TariffZoneRefsRelStructure `xml:"contains,omitempty" json:"contains,omitempty"`
	// Adjacent FARE ZONEs.
	Neighbours *FareZoneRefsRelStructure `xml:"neighbours,omitempty" json:"neighbours,omitempty"`
}

// FareScheduledStopPoint represents the FareScheduledStopPoint element
// A POINT where passengers can board or alight from vehicles.
type FareScheduledStopPoint struct {
	FareScheduledStopPointVersionStructure
}

// BorderPoint represents the BorderPoint element
// Designated BORDER POINT.
type BorderPoint struct {
	BorderPointValueStructure
}

// FarePointInPattern represents the FarePointInPattern element
// A POINT IN PATTERN which represents the start or end of a FARE SECTION.
type FarePointInPattern struct {
	FarePointInPatternVersionedChildStructure
}

// FareSection represents the FareSection element
// A subdivision of a JOURNEY PATTERN consisting of consecutive POINTs IN JOURNEY PATTERN, used to define an element of the fare structure.
type FareSection struct {
	FareSectionVersionStructure
}

// FareZone represents the FareZone element
// A specialization of TARIFF ZONE to include FARE SECTIONs.
type FareZone struct {
	FareZoneVersionStructure
}

// DisplayAssignmentTypeEnumeration represents the DisplayAssignmentTypeEnumeration enumeration
// Allowed values for Display Assignment Type.
type DisplayAssignmentTypeEnumeration string

const (
	// DisplayAssignmentTypeEnumerationArrivals represents arrivals
	DisplayAssignmentTypeEnumerationArrivals DisplayAssignmentTypeEnumeration = "arrivals"
	// DisplayAssignmentTypeEnumerationDepartures represents departures
	DisplayAssignmentTypeEnumerationDepartures DisplayAssignmentTypeEnumeration = "departures"
	// DisplayAssignmentTypeEnumerationAll represents all
	DisplayAssignmentTypeEnumerationAll DisplayAssignmentTypeEnumeration = "all"
)

// DisplayAssignmentRefStructure represents the DisplayAssignmentRefStructure element
// Type for a reference to a DISPLAY ASSIGNMENT.
type DisplayAssignmentRefStructure struct {
	AssignmentRefStructure
	// Relative oOrder of ASSIGNMENT.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// PassengerInformationEquipmentRefStructure represents the PassengerInformationEquipmentRefStructure element
// Type for a reference to a PASSENGER INFORMATION EQUIPMENT.
type PassengerInformationEquipmentRefStructure struct {
	InstalledEquipmentRefStructure
}

// LogicalDisplayRefStructure represents the LogicalDisplayRefStructure element
// Type for a reference to a LOGICAL DISPLAY.
type LogicalDisplayRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfPassengerInformationEquipmentRefStructure represents the TypeOfPassengerInformationEquipmentRefStructure element
// Type for a reference to a TYPE OF PASSENGER INFORMATION EQUIPMENT.
type TypeOfPassengerInformationEquipmentRefStructure struct {
	TypeOfValueRefStructure
}

// DisplayAssignmentRef represents the DisplayAssignmentRef element
// Reference to a DISPLAY ASSIGNMENT.
type DisplayAssignmentRef struct {
	DisplayAssignmentRefStructure
}

// PassengerInformationEquipmentRef represents the PassengerInformationEquipmentRef element
// Reference to a PASSENGER INFORMATION EQUIPMENT.
type PassengerInformationEquipmentRef struct {
	PassengerInformationEquipmentRefStructure
}

// LogicalDisplayRef represents the LogicalDisplayRef element
// Reference to a LOGICAL DISPLAY.
type LogicalDisplayRef struct {
	LogicalDisplayRefStructure
}

// TypeOfPassengerInformationEquipmentRef represents the TypeOfPassengerInformationEquipmentRef element
// Reference to a TYPE OF PASSENGER INFORMATION EQUIPMENT.
type TypeOfPassengerInformationEquipmentRef struct {
	TypeOfPassengerInformationEquipmentRefStructure
}

// LogicalDisplaysInFrameRelStructure represents the logicalDisplaysInFrame_RelStructure element
// Type for containment in frame of LOGICAL DISPLAY.
type LogicalDisplaysInFrameRelStructure struct {
	ContainmentAggregationStructure
	LogicalDisplay []LogicalDisplay `xml:"LogicalDisplay" json:"LogicalDisplay"`
}

// PassengerInformationEquipmentsInFrameRelStructure represents the passengerInformationEquipmentsInFrame_RelStructure element
// Type for containment in frame of PASS ENGER INFORMATION EQUIPMENT.
type PassengerInformationEquipmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	PassengerInformationEquipment []PassengerInformationEquipment `xml:"PassengerInformationEquipment" json:"PassengerInformationEquipment"`
}

// DisplayAssignmentsInFrameRelStructure represents the displayAssignmentsInFrame_RelStructure element
// Type for containment in DISPLAY ASSIGNMENTs.
type DisplayAssignmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	DisplayAssignment []DisplayAssignment `xml:"DisplayAssignment" json:"DisplayAssignment"`
}

// LogicalDisplayVersionStructure represents the LogicalDisplay_VersionStructure element
// Type for a LOGICAL DISPLAY.
type LogicalDisplayVersionStructure struct {
	DataManagedObjectStructure
	// Name of LOGICAL DISPLAY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of LOGICAL DISPLAY.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// DISPLAY ASSIGNMENTs for LOGICAL DISPLAY.
	DisplayAssignments *DisplayAssignmentsRelStructure `xml:"displayAssignments,omitempty" json:"displayAssignments,omitempty"`
}

// PassengerInformationEquipmentVersionStructure represents the PassengerInformationEquipment_VersionStructure element
// Type for a PASSENGER INFORMATION EQUIPMENT.
type PassengerInformationEquipmentVersionStructure struct {
	PassengerEquipmentVersionStructure
	LogicalDisplayRef *LogicalDisplayRef `xml:"LogicalDisplayRef,omitempty" json:"LogicalDisplayRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	VehicleStoppingPositionRef *VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef *VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef *AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef *StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef *VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef *ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef *PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef *StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef *StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef *ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef *ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef *ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef *PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef *PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef *VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef *EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef *SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	// List of PASSENGER INFORMATION Equipments.
	PassengerInformationEquipmentList *PassengerInformationEquipmentEnumeration `xml:"PassengerInformationEquipmentList,omitempty" json:"PassengerInformationEquipmentList,omitempty"`
	TypeOfPassengerInformationEquipmentRef *TypeOfPassengerInformationEquipmentRef `xml:"TypeOfPassengerInformationEquipmentRef,omitempty" json:"TypeOfPassengerInformationEquipmentRef,omitempty"`
	// Whether there is a low counter for accessibility.
	LowCounterAccess *bool `xml:"LowCounterAccess,omitempty" json:"LowCounterAccess,omitempty"`
	// Height of counter for accessibility.
	HeightOfLowCounter *float64 `xml:"HeightOfLowCounter,omitempty" json:"HeightOfLowCounter,omitempty"`
	// Whether there are induction loops.
	InductionLoops *bool `xml:"InductionLoops,omitempty" json:"InductionLoops,omitempty"`
	// Indicates whether there is a tactile interface +v1.1.
	TactileInterfaceAvailable *bool `xml:"TactileInterfaceAvailable,omitempty" json:"TactileInterfaceAvailable,omitempty"`
	// Indicates whether there is an accessible audio interface (allowing a use closed eyes). +v1.1
	AudioInterfaceAvailable *bool `xml:"AudioInterfaceAvailable,omitempty" json:"AudioInterfaceAvailable,omitempty"`
	// Indicates a priority access for disabled (no-queue). +v1.1
	DisabledPriority *bool `xml:"DisabledPriority,omitempty" json:"DisabledPriority,omitempty"`
	// Indicates whether equipment may be used while seated in a wheelchair. +v1.1
	WheelchairSuitable *bool `xml:"WheelchairSuitable,omitempty" json:"WheelchairSuitable,omitempty"`
	// List of predefined Passenger Info EQUIPMENT.
	PassengerInformationFacilityList *PassengerInformationFacilityList `xml:"PassengerInformationFacilityList,omitempty" json:"PassengerInformationFacilityList,omitempty"`
	AccessibilityInfoFacilityList *AccessibilityInfoFacilityList `xml:"AccessibilityInfoFacilityList,omitempty" json:"AccessibilityInfoFacilityList,omitempty"`
}

// DisplayAssignmentsRelStructure represents the displayAssignments_RelStructure element
// Type for a list of DISPLAY ASSIGNMENTs.
type DisplayAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	DisplayAssignmentRef []DisplayAssignmentRef `xml:"DisplayAssignmentRef,omitempty" json:"DisplayAssignmentRef,omitempty"`
	// The assignment of one SCHEDULED STOP POINT and one JOURNEY PATTERN to a PASSENGER INFORMATION EQUIPMENTI  specifying that information on the SCHEDULED STOP POINT and the JOURNEY PATTERN will be provided (e.g. displayed, printed).
	DisplayAssignment []DisplayAssignment `xml:"DisplayAssignment,omitempty" json:"DisplayAssignment,omitempty"`
}

// DisplayAssignmentVersionStructure represents the DisplayAssignment_VersionStructure element
// Type for a DISPLAY ASSIGNMENT.
type DisplayAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	LogicalDisplayRef *LogicalDisplayRef `xml:"LogicalDisplayRef,omitempty" json:"LogicalDisplayRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	VehicleMode *VehicleMode `xml:"VehicleMode,omitempty" json:"VehicleMode,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	// Type of data to display.
	DisplayAssignmentType *DisplayAssignmentTypeEnumeration `xml:"DisplayAssignmentType,omitempty" json:"DisplayAssignmentType,omitempty"`
	// Number of journeys to show, default is all.
	NumberOfJourneysToShow *int `xml:"NumberOfJourneysToShow,omitempty" json:"NumberOfJourneysToShow,omitempty"`
	// Relative priority of display assignment, vis a vis other assignments
	DisplayPriority *int `xml:"DisplayPriority,omitempty" json:"DisplayPriority,omitempty"`
}

// TypeOfPassengerInformationEquipmentValueStructure represents the TypeOfPassengerInformationEquipment_ValueStructure element
// Type for a TYPE OF PASSENGER INFORMATION EQUIPMENT.
type TypeOfPassengerInformationEquipmentValueStructure struct {
	TypeOfEntityVersionStructure
	BroadType *MultilingualString `xml:"BroadType,omitempty" json:"BroadType,omitempty"`
}

// LogicalDisplay represents the LogicalDisplay element
// Represents a set of data that can be assembled for assignment to a physical PASSENGER INFORMATION EQUIPMENT or to a logical channel such as web or media. It is independent of any physical embodiment 
// 
// LOGICAL DISPLAY corresponds to a SIRI STOP MONITORING point.
type LogicalDisplay struct {
	LogicalDisplayVersionStructure
}

// PassengerInformationEquipment represents the PassengerInformationEquipment element
// A public transport information facility, as for instance terminals (on street, at information desks, telematic, ...) or printed material (leaflets displayed at stops, booklets, ...).
type PassengerInformationEquipment struct {
	PassengerInformationEquipmentVersionStructure
}

// DisplayAssignment represents the DisplayAssignment element
// The assignment of one STOP POINT and one JOURNEY PATTERN to a PASSENGER INFORMATION EQUIPMENT, specifying that information on this STOP POINT and this JOURNEY PATTERN will be provided (e.g. displayed, printed).
type DisplayAssignment struct {
	DisplayAssignmentVersionStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClass *string `xml:"nameOfClass,attr,omitempty" json:"nameOfClass,omitempty"`
	// Name of source of the data.
	DataSourceRef *string `xml:"dataSourceRef,attr,omitempty" json:"dataSourceRef,omitempty"`
	// Whether ENTITY is currently in use. Default is "active".
	Status *StatusEnumeration `xml:"status,attr,omitempty" json:"status,omitempty"`
	// Version of this object from which this version of ENTITY was derived.
	DerivedFromVersionRef *string `xml:"derivedFromVersionRef,attr,omitempty" json:"derivedFromVersionRef,omitempty"`
}

// TypeOfPassengerInformationEquipment represents the TypeOfPassengerInformationEquipment element
// Classification of a PASSENGER INFORMATION EQUIPMENT.
type TypeOfPassengerInformationEquipment struct {
	TypeOfPassengerInformationEquipmentValueStructure
}

// RelationToVehicleEnumeration represents the RelationToVehicleEnumeration enumeration
// Allowed values for Relation to vehicle.
type RelationToVehicleEnumeration string

const (
	// RelationToVehicleEnumerationFrontLeft represents frontLeft
	RelationToVehicleEnumerationFrontLeft RelationToVehicleEnumeration = "frontLeft"
	// RelationToVehicleEnumerationFrontRight represents frontRight
	RelationToVehicleEnumerationFrontRight RelationToVehicleEnumeration = "frontRight"
	// RelationToVehicleEnumerationBackRight represents backRight
	RelationToVehicleEnumerationBackRight RelationToVehicleEnumeration = "backRight"
	// RelationToVehicleEnumerationDriverLeft represents driverLeft
	RelationToVehicleEnumerationDriverLeft RelationToVehicleEnumeration = "driverLeft"
	// RelationToVehicleEnumerationDriverRight represents driverRight
	RelationToVehicleEnumerationDriverRight RelationToVehicleEnumeration = "driverRight"
)

// VehicleStoppingPlaceRefStructure represents the VehicleStoppingPlaceRefStructure element
// Type for reference to a VEHICLE STOPPING PLACE.
type VehicleStoppingPlaceRefStructure struct {
	StopPlaceSpaceRefStructure
}

// VehicleStoppingPositionRefStructure represents the VehicleStoppingPositionRefStructure element
// Type for reference to a VEHICLE STOPPING POSITION.
type VehicleStoppingPositionRefStructure struct {
	StopPlaceSpaceRefStructure
}

// VehicleQuayAlignmentRefStructure represents the VehicleQuayAlignmentRefStructure element
// Type for reference to a VEHICLE QUAY ALIGNMENT.
type VehicleQuayAlignmentRefStructure struct {
	VersionOfObjectRefStructure
}

// VehiclePositionAlignmentRefStructure represents the VehiclePositionAlignmentRefStructure element
// Type for reference to a VEHICLE POSITION ALIGNMENT.
type VehiclePositionAlignmentRefStructure struct {
	VersionOfObjectRefStructure
}

// VehicleStoppingPlaceRef represents the VehicleStoppingPlaceRef element
// Reference to a VEHICLE STOPPING PLACE.
type VehicleStoppingPlaceRef struct {
	VehicleStoppingPlaceRefStructure
}

// VehicleStoppingPositionRef represents the VehicleStoppingPositionRef element
// Reference to a VEHICLE STOPPING POSITION.
type VehicleStoppingPositionRef struct {
	VehicleStoppingPositionRefStructure
}

// VehicleQuayAlignmentRef represents the VehicleQuayAlignmentRef element
// Reference to a VEHICLE QUAY ALIGNMENT.
type VehicleQuayAlignmentRef struct {
	VehicleQuayAlignmentRefStructure
}

// VehiclePositionAlignmentRef represents the VehiclePositionAlignmentRef element
// Reference to a VEHICLE POSITION ALIGNMENT.
type VehiclePositionAlignmentRef struct {
	VehiclePositionAlignmentRefStructure
}

// StopPlacesInFrameRelStructure represents the stopPlacesInFrame_RelStructure element
// Type for containment in frame of STOP PLACE
type StopPlacesInFrameRelStructure struct {
	ContainmentAggregationStructure
	// A STOP PLACE.
	StopPlace []StopPlace `xml:"StopPlace" json:"StopPlace"`
}

// GroupsOfStopPlacesInFrameRelStructure represents the groupsOfStopPlacesInFrame_RelStructure element
// Type for containment in frame of GROUP OF STOP PLACEs.
type GroupsOfStopPlacesInFrameRelStructure struct {
	ContainmentAggregationStructure
	GroupOfStopPlaces []GroupOfStopPlaces `xml:"GroupOfStopPlaces" json:"GroupOfStopPlaces"`
}

// StopPlacesRelStructure represents the stopPlaces_RelStructure element
// Type for a list of STOP PLACEs.
type StopPlacesRelStructure struct {
	ContainmentAggregationStructure
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	// A STOP PLACE.
	StopPlace *StopPlace `xml:"StopPlace,omitempty" json:"StopPlace,omitempty"`
}

// StopPlaceVersionStructure represents the StopPlace_VersionStructure element
// Type for a Version of a STOP PLACE.
type StopPlaceVersionStructure struct {
	SiteVersionStructure
	// Short public code for passengers to use when uniquely identifying the stop by SMS and other self-service channels.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Primary MODE of Vehicle transport associated by this component.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	// Public transport MODES which may be accessed through associated place.
	OtherTransportModes *VehicleModeEnumeration `xml:"OtherTransportModes,omitempty" json:"OtherTransportModes,omitempty"`
	// TARIFF ZONEs into which component falls.
	TariffZones *TariffZoneRefsRelStructure `xml:"tariffZones,omitempty" json:"tariffZones,omitempty"`
	// Type of STOP PLACE.
	StopPlaceType *StopTypeEnumeration `xml:"StopPlaceType,omitempty" json:"StopPlaceType,omitempty"`
	// Whether STOP PLACE is a border crossing, that is a point, at which an international boundary between two countries may be crossed.
	BorderCrossing *bool `xml:"BorderCrossing,omitempty" json:"BorderCrossing,omitempty"`
	// Items of EQUIPMENT associated with STOP PLACE but not assigned to a point within it. More Localized EQUIPMENT should be included in an EQUIPMENT place.
	UnlocalisedEquipments *ExplicitEquipmentsRelStructure `xml:"unlocalisedEquipments,omitempty" json:"unlocalisedEquipments,omitempty"`
	// TOPOGRAPHICAL PLACEs that the STOP PLACE serves.
	ServedPlaces *TopographicPlaceRefsRelStructure `xml:"servedPlaces,omitempty" json:"servedPlaces,omitempty"`
	// TOPOGRAPHICAL PLACEs for which the STOP PLACE is a main terminus. Only certain stations will be deemed the main STOP PLACEs points. For example London has many rail stations but only some are main line terminii. Geographic containment is not necessarily implied For example London Gatwick and, London Stansted airports are not in London, but are designated airports for London. Norwich station is not in Norwich, etc.
	MainTerminusForPlaces *TopographicPlaceRefsRelStructure `xml:"mainTerminusForPlaces,omitempty" json:"mainTerminusForPlaces,omitempty"`
	// Further categorisation of stop as having topographic limitations.
	LimitedUse *LimitedUseTypeEnumeration `xml:"LimitedUse,omitempty" json:"LimitedUse,omitempty"`
	// Default rating of the STOP PLACE for making interchanges.
	Weighting *InterchangeWeightingEnumeration `xml:"Weighting,omitempty" json:"Weighting,omitempty"`
	// Type of expected INTERCHANGE at a STOP PLACE for use in journey planners and also for possible legal classification. +v1.1
	StopPlaceWeight *StopPlaceWeightEnumeration `xml:"StopPlaceWeight,omitempty" json:"StopPlaceWeight,omitempty"`
	// QUAYs within the STOP PLACE.
	Quays *QuaysRelStructure `xml:"quays,omitempty" json:"quays,omitempty"`
	// ACCESS SPACEs within the STOP PLACE.
	AccessSpaces *AccessSpacesRelStructure `xml:"accessSpaces,omitempty" json:"accessSpaces,omitempty"`
	// PATH LINKs for SITE.
	PathLinks *SitePathLinksRelStructure `xml:"pathLinks,omitempty" json:"pathLinks,omitempty"`
	// PATH JUNCTIONs within the SITE and or between the SITE elsewhere.
	PathJunctions *PathJunctionsRelStructure `xml:"pathJunctions,omitempty" json:"pathJunctions,omitempty"`
	// ACCESS links for SITE.
	Accesses *AccessesRelStructure `xml:"accesses,omitempty" json:"accesses,omitempty"`
	// NAVIGATION PATHs within the SITE and or between the SITE elsewhere.
	NavigationPaths *NavigationPathsRelStructure `xml:"navigationPaths,omitempty" json:"navigationPaths,omitempty"`
	// VEHICLE STOPPING PLACEs within STOP PLACE.
	VehicleStoppingPlaces *VehicleStoppingPlacesRelStructure `xml:"vehicleStoppingPlaces,omitempty" json:"vehicleStoppingPlaces,omitempty"`
}

// StopPlaceComponentVersionStructure represents the StopPlaceComponent_VersionStructure element
// Type for a STOP PLACE COMPONENT.
type StopPlaceComponentVersionStructure struct {
	SiteComponentVersionStructure
	// Primary MODE of Vehicle transport associated by this component.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	// Public transport MODES which may be accessed through associated place.
	OtherTransportModes *VehicleModeEnumeration `xml:"OtherTransportModes,omitempty" json:"OtherTransportModes,omitempty"`
	// TARIFF ZONEs into which component falls.
	TariffZones *TariffZoneRefsRelStructure `xml:"tariffZones,omitempty" json:"tariffZones,omitempty"`
}

// StopPlaceSpaceVersionStructure represents the StopPlaceSpace_VersionStructure element
// Type for a STOP PLACE SPACE.
type StopPlaceSpaceVersionStructure struct {
	StopPlaceComponentVersionStructure
	// Whether space can be used for boarding or en route to boarding. Default is true.
	BoardingUse *bool `xml:"BoardingUse,omitempty" json:"BoardingUse,omitempty"`
	// Whether space can be used for alighting or en route to boarding. Default is true.
	AlightingUse *bool `xml:"AlightingUse,omitempty" json:"AlightingUse,omitempty"`
	// Label for SPACE.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// ENTRANCEs to SPACE.
	Entrances *SiteEntrancesRelStructure `xml:"entrances,omitempty" json:"entrances,omitempty"`
	// Length of SPACE in metres.
	Length *float64 `xml:"Length,omitempty" json:"Length,omitempty"`
	// Width of SPACE in metres.
	Width *float64 `xml:"Width,omitempty" json:"Width,omitempty"`
}

// QuaysRelStructure represents the quays_RelStructure element
// Type for a list of QUAYs.
type QuaysRelStructure struct {
	ContainmentAggregationStructure
	TaxiStandRef []TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef []QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	Quay []Quay `xml:"Quay,omitempty" json:"Quay,omitempty"`
}

// QuayVersionStructure represents the Quay_VersionStructure element
// Type for QUAY.
type QuayVersionStructure struct {
	StopPlaceSpaceVersionStructure
	// Pubic identifier code of QUAY.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Plate number for QUAY. An arbitrary asset number that may be placed on stop to identify it.
	PlateCode *string `xml:"PlateCode,omitempty" json:"PlateCode,omitempty"`
	// A 20 bit number used for wireless cleardown of stop displays by some AVL systems.
	ShortCode *int `xml:"ShortCode,omitempty" json:"ShortCode,omitempty"`
	// Default Destination headings for QUAY.
	Destinations *DestinationDisplayViewsRelStructure `xml:"destinations,omitempty" json:"destinations,omitempty"`
	// Heading of QUAY relative to street.
	CompassBearing *float32 `xml:"CompassBearing,omitempty" json:"CompassBearing,omitempty"`
	// Heading of QUAY relative to street in Octants.
	CompassOctant *CompassBearing8Enumeration `xml:"CompassOctant,omitempty" json:"CompassOctant,omitempty"`
	// Type of QUAY.
	QuayType *QuayTypeEnumeration `xml:"QuayType,omitempty" json:"QuayType,omitempty"`
	// Height of the platform relative to the ground (bus) or the rail track.
	PlatformHeight *float64 `xml:"PlatformHeight,omitempty" json:"PlatformHeight,omitempty"`
	// Distance between the track centre and the platform edge parallel to the running plane (bq), as defined in chapter 13 of EN 15273-3:2013.
	EdgeToTrackCenterDistance *float64 `xml:"EdgeToTrackCenterDistance,omitempty" json:"EdgeToTrackCenterDistance,omitempty"`
	// if QUAY is a subzone of another QUAY, identifies parent.
	ParentQuayRef *QuayRefStructure `xml:"ParentQuayRef,omitempty" json:"ParentQuayRef,omitempty"`
	// BOARDING POSITIONs within QUAY.
	BoardingPositions *BoardingPositionsRelStructure `xml:"boardingPositions,omitempty" json:"boardingPositions,omitempty"`
}

// AlternativeQuayDescriptorVersionedChildStructure represents the AlternativeQuayDescriptor_VersionedChildStructure element
// Type for a STOP PLACE COMPONENT.
type AlternativeQuayDescriptorVersionedChildStructure struct {
	AlternativeNameVersionedChildStructure
	// Name of a Road that crosses the Road the street near the SITE ELEMENT that can be used to describe its relative location.
	CrossRoad *MultilingualString `xml:"CrossRoad,omitempty" json:"CrossRoad,omitempty"`
	// Name of a Landmark near the SITE ELEMENT that can be used to describe its relative location.
	Landmark *MultilingualString `xml:"Landmark,omitempty" json:"Landmark,omitempty"`
}

// AccessSpacesRelStructure represents the accessSpaces_RelStructure element
// Type for a list of ACCESS SPACEs.
type AccessSpacesRelStructure struct {
	ContainmentAggregationStructure
	AccessSpaceRef []AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	AccessSpace []AccessSpace `xml:"AccessSpace,omitempty" json:"AccessSpace,omitempty"`
}

// AccessSpaceVersionStructure represents the AccessSpace_VersionStructure element
// Type for an ACCESS SPACE.
type AccessSpaceVersionStructure struct {
	StopPlaceSpaceVersionStructure
	// Type of ACCESS SPACE.
	AccessSpaceType *AccessSpaceTypeEnumeration `xml:"AccessSpaceType,omitempty" json:"AccessSpaceType,omitempty"`
	// Type of passage associated with ACCESS SPACE.
	PassageType *PassageTypeEnumeration `xml:"PassageType,omitempty" json:"PassageType,omitempty"`
	// if ACCESS SPACE is a subzone of another ACCESS SPACE identifies parent,
	ParentAccessSpaceRef *AccessSpaceRefStructure `xml:"ParentAccessSpaceRef,omitempty" json:"ParentAccessSpaceRef,omitempty"`
}

// BoardingPositionsRelStructure represents the boardingPositions_RelStructure element
// Type for a list of BOARDING POSITIONs.
type BoardingPositionsRelStructure struct {
	ContainmentAggregationStructure
	BoardingPositionRef []BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	BoardingPosition []BoardingPosition `xml:"BoardingPosition,omitempty" json:"BoardingPosition,omitempty"`
}

// BoardingPositionVersionStructure represents the BoardingPosition_VersionStructure element
// Type for a BOARDING POSITION.
type BoardingPositionVersionStructure struct {
	StopPlaceSpaceVersionStructure
	// Pubic identifier code of BOARDING POSITION.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Classifier of BOARDING POSITION.
	BoardingPositionType *BoardingPositionTypeEnumeration `xml:"BoardingPositionType,omitempty" json:"BoardingPositionType,omitempty"`
	// Entrances to BOARDING POSITION.
	BoardingPositionEntrances *EntranceRefsRelStructure `xml:"boardingPositionEntrances,omitempty" json:"boardingPositionEntrances,omitempty"`
	// Height of the platform relative to the ground (bus) or the rail track.
	PlatformHeight *float64 `xml:"PlatformHeight,omitempty" json:"PlatformHeight,omitempty"`
	// Distance between the track centre and the platform edge parallel to the running plane (bq), as defined in chapter 13 of EN 15273-3:2013.
	EdgeToTrackCenterDistance *float64 `xml:"EdgeToTrackCenterDistance,omitempty" json:"EdgeToTrackCenterDistance,omitempty"`
}

// StopPlaceEntranceVersionStructure represents the StopPlaceEntrance_VersionStructure element
// Type for Passenger STOP PLACE ENTRANCE.
type StopPlaceEntranceVersionStructure struct {
	SiteEntranceVersionStructure
	// Primary MODE of Vehicle transport associated by this component.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	// Public transport MODES which may be accessed through associated place.
	OtherTransportModes *VehicleModeEnumeration `xml:"OtherTransportModes,omitempty" json:"OtherTransportModes,omitempty"`
	// TARIFF ZONEs into which component falls.
	TariffZones *TariffZoneRefsRelStructure `xml:"tariffZones,omitempty" json:"tariffZones,omitempty"`
}

// StopPlaceVehicleEntrancesRelStructure represents the stopPlaceVehicleEntrances_RelStructure element
// Type for a list of STOP PLACE VEHICLE ENTRANCEs.
type StopPlaceVehicleEntrancesRelStructure struct {
	ContainmentAggregationStructure
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	StopPlaceVehicleEntrance []StopPlaceVehicleEntrance `xml:"StopPlaceVehicleEntrance,omitempty" json:"StopPlaceVehicleEntrance,omitempty"`
}

// StopPlaceVehicleEntranceVersionStructure represents the StopPlaceVehicleEntrance_VersionStructure element
// Type for STOP PLACE VEHICLE ENTRANCE.
type StopPlaceVehicleEntranceVersionStructure struct {
	VehicleEntranceVersionStructure
	// Primary MODE of Vehicle transport associated by this component.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	// Public transport MODES which may be accessed through associated place.
	OtherTransportModes *VehicleModeEnumeration `xml:"OtherTransportModes,omitempty" json:"OtherTransportModes,omitempty"`
	// TARIFF ZONEs into which component falls.
	TariffZones *TariffZoneRefsRelStructure `xml:"tariffZones,omitempty" json:"tariffZones,omitempty"`
}

// VehicleStoppingPlacesRelStructure represents the vehicleStoppingPlaces_RelStructure element
// Type for a list of VEHICLE STOPPING PLACEs.
type VehicleStoppingPlacesRelStructure struct {
	ContainmentAggregationStructure
	VehicleStoppingPlaceRef []VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	VehicleStoppingPlace []VehicleStoppingPlace `xml:"VehicleStoppingPlace,omitempty" json:"VehicleStoppingPlace,omitempty"`
}

// VehicleStoppingPlaceVersionStructure represents the VehicleStoppingPlace_VersionStructure element
// Type for a VEHICLE STOPPING PLACE.
type VehicleStoppingPlaceVersionStructure struct {
	StopPlaceSpaceVersionStructure
	WireLinkRef *WireLinkRef `xml:"WireLinkRef,omitempty" json:"WireLinkRef,omitempty"`
	RoadLinkRef *RoadLinkRef `xml:"RoadLinkRef,omitempty" json:"RoadLinkRef,omitempty"`
	RailwayLinkRef *RailwayLinkRef `xml:"RailwayLinkRef,omitempty" json:"RailwayLinkRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	// Designated Positions within a VEHICLE STOPPING PLACE for a VEHICLE to stop.
	VehicleStoppingPositions *VehicleStoppingPositionsRelStructure `xml:"vehicleStoppingPositions,omitempty" json:"vehicleStoppingPositions,omitempty"`
	// QUAYs with which the VEHICLE STOPPING PLACE aligns.
	QuayAlignments *VehicleQuayAlignmentsRelStructure `xml:"quayAlignments,omitempty" json:"quayAlignments,omitempty"`
}

// VehicleStoppingPositionsRelStructure represents the vehicleStoppingPositions_RelStructure element
// Type for a list of VEHICLE STOPPING POSITIONs.
type VehicleStoppingPositionsRelStructure struct {
	ContainmentAggregationStructure
	VehicleStoppingPositionRef []VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPosition []VehicleStoppingPosition `xml:"VehicleStoppingPosition,omitempty" json:"VehicleStoppingPosition,omitempty"`
}

// VehicleStoppingPositionVersionStructure represents the VehicleStoppingPosition_VersionStructure element
// Type for a VEHICLE STOPPING POSITION.
type VehicleStoppingPositionVersionStructure struct {
	StopPlaceComponentVersionStructure
	VehicleStoppingPlaceRef *VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	// Additional Label of a VEHICLE STOPPING POSITION.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// Relationship of position to VHEICLE.
	RelationToVehicle *RelationToVehicleEnumeration `xml:"RelationToVehicle,omitempty" json:"RelationToVehicle,omitempty"`
	// Bearing of vehicle in position in absolute degrees against North.
	Bearing *int `xml:"Bearing,omitempty" json:"Bearing,omitempty"`
	// BOARDING POSITIONs with which VEHICLE STOPPING POSITION. aligns.
	VehiclePositionAlignments *VehiclePositionAlignmentsRelStructure `xml:"vehiclePositionAlignments,omitempty" json:"vehiclePositionAlignments,omitempty"`
}

// VehicleQuayAlignmentsRelStructure represents the vehicleQuayAlignments_RelStructure element
// Type for a list of VEHICLE QUAY ALIGNMENTs.
type VehicleQuayAlignmentsRelStructure struct {
	ContainmentAggregationStructure
	VehicleQuayAlignment []VehicleQuayAlignment `xml:"VehicleQuayAlignment" json:"VehicleQuayAlignment"`
}

// VehicleQuayAlignmentVersionStructure represents the VehicleQuayAlignment_VersionStructure element
// Type for a VEHICLE QUAY ALIGNMENT.
type VehicleQuayAlignmentVersionStructure struct {
	VersionedChildStructure
	VehicleStoppingPlaceRef *VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	// Order of element.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// VehiclePositionAlignmentsRelStructure represents the vehiclePositionAlignments_RelStructure element
// Type for a list of VEHICLE POSTION ALIGNMENTs.
type VehiclePositionAlignmentsRelStructure struct {
	ContainmentAggregationStructure
	VehiclePositionAlignment []VehiclePositionAlignment `xml:"VehiclePositionAlignment" json:"VehiclePositionAlignment"`
}

// VehiclePositionAlignmentVersionStructure represents the VehiclePositionAlignment_VersionStructure element
// Type for a VEHICLE POSTION ALIGNMENT.
type VehiclePositionAlignmentVersionStructure struct {
	VersionedChildStructure
	VehicleStoppingPositionRef *VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	StopPlaceEntranceRef *StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	// Order of attribute
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// GroupOfStopPlacesStructure represents the GroupOfStopPlacesStructure element
// Type for GROUP of STOP PLACEs.
type GroupOfStopPlacesStructure struct {
	GroupOfEntitiesVersionStructure
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Stations and stops in GROUP of STOP PLACEs.
	Members *StopPlaceRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	// Alternative names for the GROUP of STOP PLACEs.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// Centre Coordinates of GROUP of STOP PLACEs.
	Centroid *SimplePointVersionStructure `xml:"Centroid,omitempty" json:"Centroid,omitempty"`
	Polygon *Polygon `xml:"Polygon,omitempty" json:"Polygon,omitempty"`
	// Primary MODE of Vehicle transport associated by this component.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	AirSubmode *AirSubmode `xml:"AirSubmode,omitempty" json:"AirSubmode,omitempty"`
	BusSubmode *BusSubmode `xml:"BusSubmode,omitempty" json:"BusSubmode,omitempty"`
	CoachSubmode *CoachSubmode `xml:"CoachSubmode,omitempty" json:"CoachSubmode,omitempty"`
	FunicularSubmode *FunicularSubmode `xml:"FunicularSubmode,omitempty" json:"FunicularSubmode,omitempty"`
	MetroSubmode *MetroSubmode `xml:"MetroSubmode,omitempty" json:"MetroSubmode,omitempty"`
	TramSubmode *TramSubmode `xml:"TramSubmode,omitempty" json:"TramSubmode,omitempty"`
	TelecabinSubmode *TelecabinSubmode `xml:"TelecabinSubmode,omitempty" json:"TelecabinSubmode,omitempty"`
	RailSubmode *RailSubmode `xml:"RailSubmode,omitempty" json:"RailSubmode,omitempty"`
	WaterSubmode *WaterSubmode `xml:"WaterSubmode,omitempty" json:"WaterSubmode,omitempty"`
	// Extra: Snow and Ice Submode. +v1.1s
	SnowAndIceSubmode *SnowAndIceSubmode `xml:"SnowAndIceSubmode,omitempty" json:"SnowAndIceSubmode,omitempty"`
}

// StopPlaceDerivedViewStructure represents the StopPlace_DerivedViewStructure element
// Type for STOP PLACE VIEW.
type StopPlaceDerivedViewStructure struct {
	DerivedViewStructure
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	// Name of STOP PLACE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Classification of PLACE.
	PlaceTypes *TypeOfPlaceRefsRelStructure `xml:"placeTypes,omitempty" json:"placeTypes,omitempty"`
	// Name of STOP PLACE.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Short public code for passengers to use when uniquely identifying the stop by SMS and other self-service channels.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Type of STOP PLACE.
	StopPlaceType *StopTypeEnumeration `xml:"StopPlaceType,omitempty" json:"StopPlaceType,omitempty"`
	// Primary MODE of Vehicle transport.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
}

// StopPlace represents the StopPlace element
// Version of a named place where public transport may be accessed. May be a building complex (e.g. a station) or an on-street location. Can be a STOP PLACE, VEHICLE MEETING POINT, TAXI RANK.
type StopPlace struct {
	StopPlaceVersionStructure
}

// StopPlaceComponent represents the StopPlaceComponent element
// An element of a STOP PLACE describing part of its structure.
type StopPlaceComponent struct {
	StopPlaceComponentVersionStructure
}

// StopPlaceSpace represents the StopPlaceSpace element
// A physical area within a STOP PLACE, for example, a QUAY, BOARDING POSITION, ACCESS SPACE or EQUIPMENT PLACE.
type StopPlaceSpace struct {
	StopPlaceSpaceVersionStructure
}

// Quay represents the Quay element
// A place such as platform, stance, or quayside where passengers have access to PT vehicles, Taxi
// cars or other means of transportation. A QUAY may contain other sub QUAYs. A child QUAY must be physically
// contained within its parent QUAY.
type Quay struct {
	QuayVersionStructure
}

// AlternativeQuayDescriptor represents the AlternativeQuayDescriptor element
// An element of a STOP PLACE describing part of its structure.
type AlternativeQuayDescriptor struct {
	AlternativeQuayDescriptorVersionedChildStructure
	// Type of Name - fixed value. Default is Alias.
	NameType interface{} `xml:"NameType,omitempty" json:"NameType,omitempty"`
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
	// Type of Name.
	TypeOfName string `xml:"TypeOfName" json:"TypeOfName"`
}

// AccessSpace represents the AccessSpace element
// An area within a STOP PLACE that does not give direct access to transport vehicles. May be connected to QUAYS by PATH LINKs.
type AccessSpace struct {
	AccessSpaceVersionStructure
}

// BoardingPosition represents the BoardingPosition element
// A location within a QUAY from which passengers may directly board, or onto which passengers may directly alight from, a VEHICLE.
type BoardingPosition struct {
	BoardingPositionVersionStructure
}

// StopPlaceEntrance represents the StopPlaceEntrance element
// Passenger Entrance to a STOP PLACE.
type StopPlaceEntrance struct {
	StopPlaceEntranceVersionStructure
	// POINTs in GROUP OF POINTs.
	Members interface{} `xml:"members,omitempty" json:"members,omitempty"`
}

// StopPlaceVehicleEntrance represents the StopPlaceVehicleEntrance element
// A physical entrance or exit to/from a SITE for a VEHICLE. May be a door, barrier, gate or other recognizable point of access.
type StopPlaceVehicleEntrance struct {
	StopPlaceVehicleEntranceVersionStructure
	// POINTs in GROUP OF POINTs.
	Members interface{} `xml:"members,omitempty" json:"members,omitempty"`
}

// VehicleStoppingPlace represents the VehicleStoppingPlace element
// Designated PLACE within a STOP PLACE for a VEHICLE to stop.
type VehicleStoppingPlace struct {
	VehicleStoppingPlaceVersionStructure
}

// VehicleStoppingPosition represents the VehicleStoppingPosition element
// Designated Position within a VEHICLE STOPPING PLACE for a Vehicle to stop.
type VehicleStoppingPosition struct {
	VehicleStoppingPositionVersionStructure
	// Default URL for ADDRESSABLE PLACE.
	Url interface{} `xml:"Url,omitempty" json:"Url,omitempty"`
	// Default image for ADDRESSABLE PLACE.
	Image interface{} `xml:"Image,omitempty" json:"Image,omitempty"`
	PostalAddress interface{} `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	// ADDRESS of a numbered building on a named road.
	RoadAddress interface{} `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
	// POINTs in GROUP OF POINTs.
	Members interface{} `xml:"members,omitempty" json:"members,omitempty"`
}

// VehicleQuayAlignment represents the VehicleQuayAlignment element
// Designated Position within a VEHICLE STOPPING PLACE for a Vehicle to stop.
type VehicleQuayAlignment struct {
	VehicleQuayAlignmentVersionStructure
}

// VehiclePositionAlignment represents the VehiclePositionAlignment element
// Designated Position within a VEHICLE STOPPING PLACE for a Vehicle to stop.
type VehiclePositionAlignment struct {
	VehiclePositionAlignmentVersionStructure
}

// GroupOfStopPlaces represents the GroupOfStopPlaces element
// Group of STOP PLACEs.
type GroupOfStopPlaces struct {
	GroupOfStopPlacesStructure
}

// StopPlaceView represents the StopPlaceView element
// Simplified view of STOP PLACE. Contains.
type StopPlaceView struct {
	StopPlaceDerivedViewStructure
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
}

// StopAssignmentRefStructure represents the StopAssignmentRefStructure element
// Type for a reference to a STOP ASSIGNMENT.
type StopAssignmentRefStructure struct {
	AssignmentRefStructure
}

// PassengerStopAssignmentRefStructure represents the PassengerStopAssignmentRefStructure element
// Type for a reference to a PASSENGER STOP ASSIGNMENT.
type PassengerStopAssignmentRefStructure struct {
	StopAssignmentRefStructure
}

// TrainStopAssignmentRefStructure represents the TrainStopAssignmentRefStructure element
// Type for a reference to a TRAIN STOP ASSIGNMENT.
type TrainStopAssignmentRefStructure struct {
	StopAssignmentRefStructure
}

// DynamicStopAssignmentRefStructure represents the DynamicStopAssignmentRefStructure element
// Type for a reference to a DYNAMIC STOP ASSIGNMENT.
type DynamicStopAssignmentRefStructure struct {
	PassengerStopAssignmentRefStructure
}

// PathAssignmentRefStructure represents the PathAssignmentRefStructure element
// Type for a reference to a PATH ASSIGNMENT.
type PathAssignmentRefStructure struct {
	StopAssignmentRefStructure
}

// StopAssignmentRef represents the StopAssignmentRef element
// Reference to a STOP ASSIGNMENT.
type StopAssignmentRef struct {
	StopAssignmentRefStructure
}

// PassengerStopAssignmentRef represents the PassengerStopAssignmentRef element
// Reference to a PASSENGER STOP ASSIGNMENT.
type PassengerStopAssignmentRef struct {
	PassengerStopAssignmentRefStructure
}

// TrainStopAssignmentRef represents the TrainStopAssignmentRef element
// Reference to a TRAIN STOP ASSIGNMENT.
type TrainStopAssignmentRef struct {
	TrainStopAssignmentRefStructure
}

// DynamicStopAssignmentRef represents the DynamicStopAssignmentRef element
// Reference to a DYNAMIC STOP ASSIGNMENT.
type DynamicStopAssignmentRef struct {
	DynamicStopAssignmentRefStructure
}

// PathAssignmentRef represents the PathAssignmentRef element
// Reference to a PATH ASSIGNMENT.
type PathAssignmentRef struct {
	PathAssignmentRefStructure
}

// StopAssignmentsInFrameRelStructure represents the stopAssignmentsInFrame_RelStructure element
// Type for containment in frame of STOP ASSIGNMENTs.
type StopAssignmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	VehicleJourneyStopAssignment []VehicleJourneyStopAssignment `xml:"VehicleJourneyStopAssignment,omitempty" json:"VehicleJourneyStopAssignment,omitempty"`
	FlexibleStopAssignment []FlexibleStopAssignment `xml:"FlexibleStopAssignment,omitempty" json:"FlexibleStopAssignment,omitempty"`
	NavigationPathAssignment []NavigationPathAssignment `xml:"NavigationPathAssignment,omitempty" json:"NavigationPathAssignment,omitempty"`
	TrainStopAssignment []TrainStopAssignment `xml:"TrainStopAssignment,omitempty" json:"TrainStopAssignment,omitempty"`
	DynamicStopAssignment []DynamicStopAssignment `xml:"DynamicStopAssignment,omitempty" json:"DynamicStopAssignment,omitempty"`
	PassengerStopAssignment []PassengerStopAssignment `xml:"PassengerStopAssignment,omitempty" json:"PassengerStopAssignment,omitempty"`
}

// StopAssignmentVersionStructure represents the StopAssignment_VersionStructure element
// Type for a STOP ASSIGNMENT.
type StopAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	// Whether alignment is for boarding use. Default is 'true'.
	BoardingUse *bool `xml:"BoardingUse,omitempty" json:"BoardingUse,omitempty"`
	// Whether alignment is for alighting use. Default is 'true'.
	AlightingUse *bool `xml:"AlightingUse,omitempty" json:"AlightingUse,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	ScheduledStopPoint *ScheduledStopPoint `xml:"ScheduledStopPoint,omitempty" json:"ScheduledStopPoint,omitempty"`
}

// PassengerStopAssignmentVersionStructure represents the PassengerStopAssignment_VersionStructure element
// Type for a PASSENGER STOP ASSIGNMENT.
type PassengerStopAssignmentVersionStructure struct {
	StopAssignmentVersionStructure
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	StopPlace *StopPlace `xml:"StopPlace,omitempty" json:"StopPlace,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	Quay *Quay `xml:"Quay,omitempty" json:"Quay,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	BoardingPosition *BoardingPosition `xml:"BoardingPosition,omitempty" json:"BoardingPosition,omitempty"`
	// Train elements to which SCHEDULED STOP POINT is to be assigned.
	TrainElements *TrainStopAssignmentsRelStructure `xml:"trainElements,omitempty" json:"trainElements,omitempty"`
}

// DynamicStopAssignmentVersionStructure represents the DynamicStopAssignment_VersionStructure element
// Type for DYNAMIC PASSENGER STOP ASSIGNMENT.
type DynamicStopAssignmentVersionStructure struct {
	PassengerStopAssignmentVersionStructure
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	VehicleJourneyStopAssignmentRef *VehicleJourneyStopAssignmentRef `xml:"VehicleJourneyStopAssignmentRef,omitempty" json:"VehicleJourneyStopAssignmentRef,omitempty"`
	DynamicStopAssignmentRef *DynamicStopAssignmentRef `xml:"DynamicStopAssignmentRef,omitempty" json:"DynamicStopAssignmentRef,omitempty"`
	PassengerStopAssignmentRef *PassengerStopAssignmentRef `xml:"PassengerStopAssignmentRef,omitempty" json:"PassengerStopAssignmentRef,omitempty"`
}

// TrainStopAssignmentsRelStructure represents the trainStopAssignments_RelStructure element
// Type for a list of references to a TRAIN STOP POINT ASSIGNMENT.
type TrainStopAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	TrainStopAssignmentRef []TrainStopAssignmentRef `xml:"TrainStopAssignmentRef,omitempty" json:"TrainStopAssignmentRef,omitempty"`
	TrainStopAssignment []TrainStopAssignment `xml:"TrainStopAssignment,omitempty" json:"TrainStopAssignment,omitempty"`
}

// TrainStopAssignmentVersionStructure represents the TrainStopAssignment_VersionStructure element
// Type for a TRAIN STOP POINT ASSIGNMENT.
type TrainStopAssignmentVersionStructure struct {
	StopAssignmentVersionStructure
	VehicleJourneyStopAssignmentRef *VehicleJourneyStopAssignmentRef `xml:"VehicleJourneyStopAssignmentRef,omitempty" json:"VehicleJourneyStopAssignmentRef,omitempty"`
	DynamicStopAssignmentRef *DynamicStopAssignmentRef `xml:"DynamicStopAssignmentRef,omitempty" json:"DynamicStopAssignmentRef,omitempty"`
	PassengerStopAssignmentRef *PassengerStopAssignmentRef `xml:"PassengerStopAssignmentRef,omitempty" json:"PassengerStopAssignmentRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	TrainComponentRef *TrainComponentRef `xml:"TrainComponentRef,omitempty" json:"TrainComponentRef,omitempty"`
	TrainComponentView *TrainComponentView `xml:"TrainComponentView,omitempty" json:"TrainComponentView,omitempty"`
	// Relative position of TRAIN ELEMENT.
	PositionOfTrainElement *int `xml:"PositionOfTrainElement,omitempty" json:"PositionOfTrainElement,omitempty"`
	// BOARDING POSITION to which SCHEDULED STOP POINT is to be assigned.
	BoardingPositionRef *BoardingPositionRefStructure `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	// A specific ENTRANCE to the VEHICLE. E.g. Front, rear.
	EntranceToVehicle *MultilingualString `xml:"EntranceToVehicle,omitempty" json:"EntranceToVehicle,omitempty"`
}

// PassengerStopAssignmentDerivedViewStructure represents the PassengerStopAssignment_DerivedViewStructure element
// Type for a PASSENGER STOP POINT ASSIGNMENT VIEW.
type PassengerStopAssignmentDerivedViewStructure struct {
	DerivedViewStructure
	VehicleJourneyStopAssignmentRef *VehicleJourneyStopAssignmentRef `xml:"VehicleJourneyStopAssignmentRef,omitempty" json:"VehicleJourneyStopAssignmentRef,omitempty"`
	DynamicStopAssignmentRef *DynamicStopAssignmentRef `xml:"DynamicStopAssignmentRef,omitempty" json:"DynamicStopAssignmentRef,omitempty"`
	PassengerStopAssignmentRef *PassengerStopAssignmentRef `xml:"PassengerStopAssignmentRef,omitempty" json:"PassengerStopAssignmentRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	// QUAY to which SCHEDULED STOP POINT is to be assigned.
	QuayRef *QuayRefStructure `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	// Name of QUAY or platform to which the SCHEDULED STOP POINT is assigned.
	QuayName *MultilingualString `xml:"QuayName,omitempty" json:"QuayName,omitempty"`
	Label *string `xml:"Label,omitempty" json:"Label,omitempty"`
	// Order of Assignment.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// StopAssignment represents the StopAssignment element
// Assignment of a SCHEDULED STOP POINT to a STOP PLACE and QUAY, etc.
type StopAssignment struct {
	StopAssignmentVersionStructure
}

// PassengerStopAssignment represents the PassengerStopAssignment element
// Assignment of a SCHEDULED STOP POINT to a STOP PLACE and QUAY, etc.. For associations to ZONE see FlexibleStopAssignment.
type PassengerStopAssignment struct {
	PassengerStopAssignmentVersionStructure
}

// DynamicStopAssignment represents the DynamicStopAssignment element
// Change to a PASSENGER STOP ASSIGNMENT.
type DynamicStopAssignment struct {
	DynamicStopAssignmentVersionStructure
}

// TrainStopAssignment represents the TrainStopAssignment element
// Assignment of a scheduled train stop point to a STOP PLACE and quay. etc.
type TrainStopAssignment struct {
	TrainStopAssignmentVersionStructure
}

// PassengerStopAssignmentView represents the PassengerStopAssignmentView element
// View of an assignment of a SCHEDULED STOP POINT to a STOP PLACE and quay. etc.
type PassengerStopAssignmentView struct {
	PassengerStopAssignmentDerivedViewStructure
	Label interface{} `xml:"Label,omitempty" json:"Label,omitempty"`
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
}

// QuayAssignmentView represents the QuayAssignmentView element
// Assignment to a specific QUAY within the STOP PLACE.
type QuayAssignmentView struct {
	PassengerStopAssignmentDerivedViewStructure
}

// NavigationPathAssignmentVersionStructure represents the NavigationPathAssignment_VersionStructure element
// Type for a NAVIGATION PATH ASSIGNMENT.
type NavigationPathAssignmentVersionStructure struct {
	StopAssignmentVersionStructure
	DefaultConnectionRef *DefaultConnectionRef `xml:"DefaultConnectionRef,omitempty" json:"DefaultConnectionRef,omitempty"`
	SiteConnectionRef *SiteConnectionRef `xml:"SiteConnectionRef,omitempty" json:"SiteConnectionRef,omitempty"`
	ConnectionRef *ConnectionRef `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	NavigationPathRef *NavigationPathRef `xml:"NavigationPathRef,omitempty" json:"NavigationPathRef,omitempty"`
}

// NavigationPathAssignment represents the NavigationPathAssignment element
// Assignment of a CONNECTION link to a NAVIGATION PATH.
type NavigationPathAssignment struct {
	NavigationPathAssignmentVersionStructure
}

// TransferConstraintTypeEnumeration represents the TransferConstraintTypeEnumeration enumeration
// Allowed values for Transfer Constraint.
type TransferConstraintTypeEnumeration string

const (
	// TransferConstraintTypeEnumerationCanTransfer represents canTransfer
	TransferConstraintTypeEnumerationCanTransfer TransferConstraintTypeEnumeration = "canTransfer"
	// TransferConstraintTypeEnumerationCannotTransfer represents cannotTransfer
	TransferConstraintTypeEnumerationCannotTransfer TransferConstraintTypeEnumeration = "cannotTransfer"
	// TransferConstraintTypeEnumerationOther represents other
	TransferConstraintTypeEnumerationOther TransferConstraintTypeEnumeration = "other"
)

// ZoneUseEnumeration represents the ZoneUseEnumeration enumeration
// Allowed values for Zone Use.
type ZoneUseEnumeration string

const (
	// ZoneUseEnumerationForbiddenZone represents forbiddenZone
	ZoneUseEnumerationForbiddenZone ZoneUseEnumeration = "forbiddenZone"
	// ZoneUseEnumerationCannotBoardAndAlightInSameZone represents cannotBoardAndAlightInSameZone
	ZoneUseEnumerationCannotBoardAndAlightInSameZone ZoneUseEnumeration = "cannotBoardAndAlightInSameZone"
	// ZoneUseEnumerationCannotBoardInZone represents cannotBoardInZone
	ZoneUseEnumerationCannotBoardInZone ZoneUseEnumeration = "cannotBoardInZone"
	// ZoneUseEnumerationCannotAlightInZone represents cannotAlightInZone
	ZoneUseEnumerationCannotAlightInZone ZoneUseEnumeration = "cannotAlightInZone"
	// ZoneUseEnumerationMustBoardInZone represents mustBoardInZone
	ZoneUseEnumerationMustBoardInZone ZoneUseEnumeration = "mustBoardInZone"
	// ZoneUseEnumerationMustAlightInZone represents mustAlightInZone
	ZoneUseEnumerationMustAlightInZone ZoneUseEnumeration = "mustAlightInZone"
	// ZoneUseEnumerationPassThroughUseOnly represents passThroughUseOnly
	ZoneUseEnumerationPassThroughUseOnly ZoneUseEnumeration = "passThroughUseOnly"
	// ZoneUseEnumerationOther represents other
	ZoneUseEnumerationOther ZoneUseEnumeration = "other"
)

// ServiceExclusionRefStructure represents the ServiceExclusionRefStructure element
// Type for a reference to a SERVICE EXCLUSION.
type ServiceExclusionRefStructure struct {
	AssignmentRefStructure
}

// TransferRestrictionRefStructure represents the TransferRestrictionRefStructure element
// Type for a reference to a TRANSFER RESTRICTION.
type TransferRestrictionRefStructure struct {
	AssignmentRefStructure
}

// RoutingConstraintZoneRefStructure represents the RoutingConstraintZoneRefStructure element
// Type for a reference to a ROUTING CONSTRAINT ZONE.
type RoutingConstraintZoneRefStructure struct {
	ZoneRefStructure
}

// ServiceExclusionRef represents the ServiceExclusionRef element
// Reference to a SERVICE EXCLUSION.
type ServiceExclusionRef struct {
	ServiceExclusionRefStructure
}

// TransferRestrictionRef represents the TransferRestrictionRef element
// Reference to a TRANSFER RESTRICTION.
type TransferRestrictionRef struct {
	TransferRestrictionRefStructure
}

// RoutingConstraintZoneRef represents the RoutingConstraintZoneRef element
// Reference to a ROUTING CONSTRAINT ZONE.
type RoutingConstraintZoneRef struct {
	RoutingConstraintZoneRefStructure
}

// ServiceExclusionsInFrameRelStructure represents the serviceExclusionsInFrame_RelStructure element
// Type for containment in frame of SERVICE EXCLUSION.
type ServiceExclusionsInFrameRelStructure struct {
	ContainmentAggregationStructure
	ServiceExclusion []ServiceExclusion `xml:"ServiceExclusion" json:"ServiceExclusion"`
}

// TransferRestrictionsInFrameRelStructure represents the transferRestrictionsInFrame_RelStructure element
// Type for containment in frame of TRANSFER RESTRICTION.
type TransferRestrictionsInFrameRelStructure struct {
	ContainmentAggregationStructure
	// A CONSTRAINT that can be applied on a CONNECTION or INTERCHANGE between two SCHEDULED STOP POINT, preventing or forbidding the passenger to use it.
	TransferRestriction []TransferRestriction `xml:"TransferRestriction" json:"TransferRestriction"`
}

// RoutingConstraintZonesInFrameRelStructure represents the routingConstraintZonesInFrame_RelStructure element
// Type for containment in frame of ROUTING CONSTRAINT ZONE.
type RoutingConstraintZonesInFrameRelStructure struct {
	ContainmentAggregationStructure
	RoutingConstraintZone []RoutingConstraintZone `xml:"RoutingConstraintZone" json:"RoutingConstraintZone"`
}

// ServiceExclusionVersionStructure represents the ServiceExclusion_VersionStructure element
// Type for SERVICE EXCLUSION.
type ServiceExclusionVersionStructure struct {
	AssignmentVersionStructure1
	// JOURNEY PATTERN to which exclusion applies.
	ExcludingJourneyPatternRef *JourneyPatternRefStructure `xml:"ExcludingJourneyPatternRef,omitempty" json:"ExcludingJourneyPatternRef,omitempty"`
	// Starting stop point within JOURNEY PATTERN for exclusion.
	StartPointRef *ScheduledStopPointRefStructure `xml:"StartPointRef,omitempty" json:"StartPointRef,omitempty"`
	// Ending stop point within JOURNEY PATTERN for exclusion.
	EndPointRef *ScheduledStopPointRefStructure `xml:"EndPointRef,omitempty" json:"EndPointRef,omitempty"`
	// Excluded other JOURNEY PATTERNs.
	ExcludedJourneyPatternRefs *JourneyPatternRefsRelStructure `xml:"excludedJourneyPatternRefs,omitempty" json:"excludedJourneyPatternRefs,omitempty"`
}

// TransferRestrictionVersionStructure represents the TransferRestriction_VersionStructure element
// Type for TRANSFER RESTRICTION.
type TransferRestrictionVersionStructure struct {
	AssignmentVersionStructure1
	TypeOfTransferRef *TypeOfTransferRef `xml:"TypeOfTransferRef,omitempty" json:"TypeOfTransferRef,omitempty"`
	// Whether timings and validity applies to both directions (true) or just to the from-to direction of the TRANSFER.
	BothWays *bool `xml:"BothWays,omitempty" json:"BothWays,omitempty"`
	// Nature of restriction.
	RestrictionType TransferConstraintTypeEnumeration `xml:"RestrictionType" json:"RestrictionType"`
	// From point of restriction.
	FromPointRef *ScheduledStopPointRefStructure `xml:"FromPointRef,omitempty" json:"FromPointRef,omitempty"`
	// From point of restriction.
	ToPointRef *ScheduledStopPointRefStructure `xml:"ToPointRef,omitempty" json:"ToPointRef,omitempty"`
}

// RoutingConstraintZoneVersionStructure represents the RoutingConstraintZone_VersionStructure element
// Type for ROUTING CONSTRAINT ZONE.
type RoutingConstraintZoneVersionStructure struct {
	ZoneVersionStructure
	// How ZONE may be used.
	ZoneUse *ZoneUseEnumeration `xml:"ZoneUse,omitempty" json:"ZoneUse,omitempty"`
	// Maximum speed in ZONE. +v1.2.2ne
	MaximumSpeed *float64 `xml:"MaximumSpeed,omitempty" json:"MaximumSpeed,omitempty"`
	// Points that constraint limits to, in sequence.
	PointsInPattern *PointsInJourneyPatternRelStructure `xml:"pointsInPattern,omitempty" json:"pointsInPattern,omitempty"`
	// LINEs associated with ROUTING CONSTRAINT ZONE.
	Lines *LineRefsRelStructure `xml:"lines,omitempty" json:"lines,omitempty"`
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef *GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
}

// ServiceExclusion represents the ServiceExclusion element
// A constraint on the use of a service. The service, on this specific JOURNEY PATTERN (usually a FTS JOURNEY PATTERN) cannot operate when another (regular) service operates. This may occur only on subpart of the JOURNEY PATTERN, or only on one or some specific SCHEDULED STOP POINTs within the pattern.
type ServiceExclusion struct {
	ServiceExclusionVersionStructure
}

// TransferRestriction represents the TransferRestriction element
// A CONSTRAINT that can be applied on a CONNECTION or INTERCHANGE between two SCHEDULED STOP POINT, preventing or forbidding the passenger to use it.
type TransferRestriction struct {
	TransferRestrictionVersionStructure
}

// RoutingConstraintZone represents the RoutingConstraintZone element
// A constraint on the use of a service. The service, on this specific JOURNEY PATTERN (usually a FTS JOURNEY PATTERN) cannot operate when another (regular) service operates. This may occur only on subpart of the JOURNEY PATTERN, or only on one or some specific SCHEDULED STOP POINTs within the pattern.
type RoutingConstraintZone struct {
	RoutingConstraintZoneVersionStructure
}

// TimeDemandTypesInFrameRelStructure represents the timeDemandTypesInFrame_RelStructure element
// Type for containment in frame of TIME DEMAND TYPE.
type TimeDemandTypesInFrameRelStructure struct {
	ContainmentAggregationStructure
	TimeDemandType []TimeDemandType `xml:"TimeDemandType" json:"TimeDemandType"`
}

// TimeDemandTypeAssignmentsInFrameRelStructure represents the timeDemandTypeAssignmentsInFrame_RelStructure element
// Type for containment in frame of TIME DEMAND TYPE ASSIGNMENTs.
type TimeDemandTypeAssignmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	TimeDemandTypeAssignment []TimeDemandTypeAssignment `xml:"TimeDemandTypeAssignment" json:"TimeDemandTypeAssignment"`
}

// TimeDemandTypeVersionStructure represents the TimeDemandType_VersionStructure element
// Type for TIME DEMAND TYPE.
type TimeDemandTypeVersionStructure struct {
	DataManagedObjectStructure
	// Name of TIME DEMAND TYPE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of TIME DEMAND TYPE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	TypeOfTimeDemandTypeRef *TypeOfTimeDemandTypeRef `xml:"TypeOfTimeDemandTypeRef,omitempty" json:"TypeOfTimeDemandTypeRef,omitempty"`
	// The presentation colours to use for this demand type.
	Presentation *PresentationStructure `xml:"Presentation,omitempty" json:"Presentation,omitempty"`
	// RUN TIMEs for TIME DEMAND TYPE.
	RunTimes *JourneyRunTimesRelStructure `xml:"runTimes,omitempty" json:"runTimes,omitempty"`
	// WAIT TIMEs for TIME DEMAND TYPE.
	WaitTimes *JourneyWaitTimesRelStructure `xml:"waitTimes,omitempty" json:"waitTimes,omitempty"`
	// LAYOVERs for TIME DEMAND TYPE.
	Layovers *JourneyLayoversRelStructure `xml:"layovers,omitempty" json:"layovers,omitempty"`
	// HEADWAYs for TIME DEMAND TYPE.
	Headways *JourneyHeadwaysRelStructure `xml:"headways,omitempty" json:"headways,omitempty"`
	// VWHICLE PREFERENCEs for TIME DEMAND TYPE.
	VehiclePreferences *VehicleTypePreferencesRelStructure `xml:"vehiclePreferences,omitempty" json:"vehiclePreferences,omitempty"`
}

// TimeDemandTypeAssignmentVersionStructure represents the TimeDemandTypeAssignment_VersionStructure element
// Type for TIME DEMAND TYPE ASSIGNMENT.
type TimeDemandTypeAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	GroupOfTimingLinksRef *GroupOfTimingLinksRef `xml:"GroupOfTimingLinksRef,omitempty" json:"GroupOfTimingLinksRef,omitempty"`
}

// TypeOfTimeDemandTypeStructure represents the TypeOfTimeDemandTypeStructure element
// Type for a TYPE OF TIME DEMAND TYPE.
type TypeOfTimeDemandTypeStructure struct {
	TypeOfEntityVersionStructure
}

// VehicleTypePreferencesRelStructure represents the vehicleTypePreferences_RelStructure element
// Type for a list of VEHICLE TYPE PREFERENCEs.
type VehicleTypePreferencesRelStructure struct {
	StrictContainmentAggregationStructure
	VehicleTypePreference []VehicleTypePreference `xml:"VehicleTypePreference" json:"VehicleTypePreference"`
}

// VehicleTypePreferenceVersionedChildStructure represents the VehicleTypePreference_VersionedChildStructure element
// Type for a VEHICLE TYPE PREFERENCE.
type VehicleTypePreferenceVersionedChildStructure struct {
	JourneyTimingVersionedChildStructure
	// Relative ranking of this preference.
	Rank *int `xml:"Rank,omitempty" json:"Rank,omitempty"`
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	VehicleTypePreferenceRef *VehicleTypePreferenceRef `xml:"VehicleTypePreferenceRef,omitempty" json:"VehicleTypePreferenceRef,omitempty"`
}

// TimeDemandType represents the TimeDemandType element
// An indicator of traffic conditions or other factors which may affect vehicle run or wait times. It may be entered directly by the scheduler or defined by the use of TIME BANDs.
type TimeDemandType struct {
	TimeDemandTypeVersionStructure
}

// TimeDemandTypeAssignment represents the TimeDemandTypeAssignment element
// The assignment of a TIME DEMAND TYPE to a TIME BAND depending on the DAY TYPE and GROUP OF TIMING LINKS.
type TimeDemandTypeAssignment struct {
	TimeDemandTypeAssignmentVersionStructure
}

// TypeOfTimeDemandType represents the TypeOfTimeDemandType element
// Classification of a TIME DEMAND TYPE.
type TypeOfTimeDemandType struct {
	TypeOfTimeDemandTypeStructure
}

// VehicleTypePreference represents the VehicleTypePreference element
// The preference for the use of a particular VEHICLE TYPE for a SERVICE JOURNEY PATTERN, depending on the DAY TYPE and TIME DEMAND TYPE. The rank of preferences must be recorded. Different VEHICLE TYPEs may be given the same rank.
type VehicleTypePreference struct {
	VehicleTypePreferenceVersionedChildStructure
}

// TypeOfServiceFeatureValueStructure represents the TypeOfServiceFeature_ValueStructure element
// Type for TYPE OF SERVICE FEATURE.
type TypeOfServiceFeatureValueStructure struct {
	TypeOfEntityVersionStructure
}

// TypeOfServiceFeature represents the TypeOfServiceFeature element
// Classification of TYPE OF SERVICE FEATURE.
type TypeOfServiceFeature struct {
	TypeOfServiceFeatureValueStructure
}

// FlexibleStopPlaceRefStructure represents the FlexibleStopPlaceRefStructure element
// Type for a reference to a FLEXIBLE STOP PLACE.
type FlexibleStopPlaceRefStructure struct {
	PlaceRefStructure
}

// FlexibleStopPlaceRefsRelStructure represents the flexibleStopPlaceRefs_RelStructure element
// Type for a collection of one or more references to a FLEXIBLE STOP PLACE.
type FlexibleStopPlaceRefsRelStructure struct {
	OneToManyRelationshipStructure
	FlexibleStopPlaceRef []FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef" json:"FlexibleStopPlaceRef"`
}

// FlexibleQuayRefStructure represents the FlexibleQuayRefStructure element
// Type for reference to a FLEXIBLE QUAY.
type FlexibleQuayRefStructure struct {
	PlaceRefStructure
}

// FlexibleAreaRefStructure represents the FlexibleAreaRefStructure element
// Type for reference to a FLEXIBLE AREA.
type FlexibleAreaRefStructure struct {
	FlexibleQuayRefStructure
}

// HailAndRideAreaRefStructure represents the HailAndRideAreaRefStructure element
// Type for Unique Reference to a HAIL AND RIDE AREA.
type HailAndRideAreaRefStructure struct {
	FlexibleQuayRefStructure
}

// FlexibleStopPlaceRef represents the FlexibleStopPlaceRef element
// Reference to a FLEXIBLE STOP PLACE.
type FlexibleStopPlaceRef struct {
	FlexibleStopPlaceRefStructure
}

// FlexibleQuayRef represents the FlexibleQuayRef element
// Reference to a FLEXIBLE QUAY.
type FlexibleQuayRef struct {
	FlexibleQuayRefStructure
}

// FlexibleAreaRef represents the FlexibleAreaRef element
// Reference to a FLEXIBLE AREA.
type FlexibleAreaRef struct {
	FlexibleAreaRefStructure
}

// HailAndRideAreaRef represents the HailAndRideAreaRef element
// Reference to a HAIL AND RIDE AREA.
type HailAndRideAreaRef struct {
	HailAndRideAreaRefStructure
}

// FlexibleStopPlacesInFrameRelStructure represents the flexibleStopPlacesInFrame_RelStructure element
// Type for containment in frame of FLEXIBLE STOP PLACE.
type FlexibleStopPlacesInFrameRelStructure struct {
	ContainmentAggregationStructure
	FlexibleStopPlace []FlexibleStopPlace `xml:"FlexibleStopPlace" json:"FlexibleStopPlace"`
}

// FlexibleStopPlacesRelStructure represents the flexibleStopPlaces_RelStructure element
// Type for a list of FLEXIBLE STOP PLACEs.
type FlexibleStopPlacesRelStructure struct {
	ContainmentAggregationStructure
	FlexibleStopPlaceRef []FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	// A Flexible STOP PLACE.
	FlexibleStopPlace []FlexibleStopPlace `xml:"FlexibleStopPlace,omitempty" json:"FlexibleStopPlace,omitempty"`
}

// FlexibleStopPlaceVersionStructure represents the FlexibleStopPlace_VersionStructure element
// Type for a FLEXIBLE STOP PLACE.
type FlexibleStopPlaceVersionStructure struct {
	PlaceVersionStructure
	// Further suffix to name that may be used in some contexts.
	NameSuffix *MultilingualString `xml:"NameSuffix,omitempty" json:"NameSuffix,omitempty"`
	// Alternative names.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// Primary MODE of Vehicle transport.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	// Short public code for passengers to use when uniquely identifying the stop by SMS and other self-service channels.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Areas in FLEXIBLE STOP PLACE.
	Areas *Areas `xml:"areas,omitempty" json:"areas,omitempty"`
	// Lines  for  FLEXIBLE STOP PLACE.
	Lines *LineRefsRelStructure `xml:"lines,omitempty" json:"lines,omitempty"`
}

// Areas represents the areas element
type Areas struct {
	// Zone in which DRT service is available.
	FlexibleArea []FlexibleArea `xml:"FlexibleArea,omitempty" json:"FlexibleArea,omitempty"`
	FlexibleAreaRef []FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	// A section of Road between two points which may be used to board bus by hailing it.
	HailAndRideArea []HailAndRideArea `xml:"HailAndRideArea,omitempty" json:"HailAndRideArea,omitempty"`
	HailAndRideAreaRef []HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
}

// FlexibleQuaysRelStructure represents the flexibleQuays_RelStructure element
// Type for a list of FLEXIBLE QUAYs.
type FlexibleQuaysRelStructure struct {
	ContainmentAggregationStructure
	HailAndRideAreaRef []HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef []FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef []FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
	FlexibleQuay []FlexibleQuay `xml:"FlexibleQuay,omitempty" json:"FlexibleQuay,omitempty"`
}

// FlexibleQuayVersionStructure represents the FlexibleQuay_VersionStructure element
// Type for FLEXIBLE QUAY.
type FlexibleQuayVersionStructure struct {
	PlaceVersionStructure
	// Further suffix to name that may be used in some contexts.
	NameSuffix *MultilingualString `xml:"NameSuffix,omitempty" json:"NameSuffix,omitempty"`
	// Alternative names.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	FlexibleStopPlaceRef *FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef,omitempty" json:"FlexibleStopPlaceRef,omitempty"`
	// Primary MODE of Vehicle transport.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	// Whether space can be used for boarding or en route to boarding. Default is true.
	BoardingUse *bool `xml:"BoardingUse,omitempty" json:"BoardingUse,omitempty"`
	// Whether space can be used for alighting or en route to boarding. Default is true.
	AlightingUse *bool `xml:"AlightingUse,omitempty" json:"AlightingUse,omitempty"`
	// Public identifier code of FLEXIBLE QUAY.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
}

// FlexibleAreasRelStructure represents the flexibleAreas_RelStructure element
// Type for a list of FLEXIBLE AREAs.
type FlexibleAreasRelStructure struct {
	ContainmentAggregationStructure
	FlexibleAreaRef []FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	// Specialisation of a FLEXIBLE QUAY (which is abstract) to identify what is the catchment area for a flexible service (so that a stop finder can find  the nearest available types of transport). It is a named zone visited by a particular mode of transport.  It is part of the SITE data set rather than the service data set, since it can be defined and exists independently of an actual service.
	FlexibleArea []FlexibleArea `xml:"FlexibleArea,omitempty" json:"FlexibleArea,omitempty"`
}

// FlexibleAreaVersionStructure represents the FlexibleArea_VersionStructure element
// Type for a FLEXIBLE AREA.
type FlexibleAreaVersionStructure struct {
	FlexibleQuayVersionStructure
	// Destination headings for FLEXIBLE AREa.
	Destinations *DestinationDisplayViewsRelStructure `xml:"destinations,omitempty" json:"destinations,omitempty"`
}

// HailAndRideAreasRelStructure represents the hailAndRideAreas_RelStructure element
// Type for a list of HAIL AND RIDE AREAs.
type HailAndRideAreasRelStructure struct {
	ContainmentAggregationStructure
	HailAndRideAreaRef []HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	HailAndRideArea []HailAndRideArea `xml:"HailAndRideArea,omitempty" json:"HailAndRideArea,omitempty"`
}

// HailAndRideAreaVersionStructure represents the HailAndRideArea_VersionStructure element
// Type for a HAIL AND RIDE AREA.
type HailAndRideAreaVersionStructure struct {
	FlexibleQuayVersionStructure
	// Bearing of Road at point in compass octants to North.
	BearingCompass *CompassBearing16Enumeration `xml:"BearingCompass,omitempty" json:"BearingCompass,omitempty"`
	// Bearing of Road in absolute degrees against North.
	BearingDegrees *int `xml:"BearingDegrees,omitempty" json:"BearingDegrees,omitempty"`
	// Destination headings for HAIL AND RIDE AREA.
	Destinations *DestinationDisplayViewsRelStructure `xml:"destinations,omitempty" json:"destinations,omitempty"`
	// Start of HAIL AND RIDE section.
	StartPointRef PointRefStructure `xml:"StartPointRef" json:"StartPointRef"`
	// End of HAIL AND RIDE section.
	EndPointRef PointRefStructure `xml:"EndPointRef" json:"EndPointRef"`
}

// FlexibleStopPlace represents the FlexibleStopPlace element
// A named type of STOP PLACE for DRT comprising one or more flexible zones where vehicles may stop and where passengers may board or leave vehicles.
type FlexibleStopPlace struct {
	FlexibleStopPlaceVersionStructure
}

// FlexibleQuay represents the FlexibleQuay element
// A ZONE of physical access to public transport vehicles such as a platform.
type FlexibleQuay struct {
	FlexibleQuayVersionStructure
}

// FlexibleArea represents the FlexibleArea element
// Specialisation of a FLEXIBLE QUAY (which is abstract) to identify what is the catchment area for a flexible service (so that a stop finder can find  the nearest available types of transport). It is a named zone visited by a particular mode of transport.  It is part of the SITE data set rather than the service data set, since it can be defined and exists independently of an actual service.
type FlexibleArea struct {
	FlexibleAreaVersionStructure
}

// HailAndRideArea represents the HailAndRideArea element
// A section of Road between two points within which one may hail a bus to board it or alight from it or ask it to stop to alight.
type HailAndRideArea struct {
	HailAndRideAreaVersionStructure
}

// ParkingsInFrameRelStructure represents the parkingsInFrame_RelStructure element
// Type for containment in frame of PARKING.
type ParkingsInFrameRelStructure struct {
	ContainmentAggregationStructure
	// A designated path between two PLACEs. May include an Ordered sequence of references to PATH LINKS.
	Parking []Parking `xml:"Parking" json:"Parking"`
}

// ParkingVersionStructure represents the Parking_VersionStructure element
// Type for a PARKING.
type ParkingVersionStructure struct {
	SiteVersionStructure
	// PATH LINKs for SITE.
	PathLinks *SitePathLinksRelStructure `xml:"pathLinks,omitempty" json:"pathLinks,omitempty"`
	// PATH JUNCTIONs within the SITE and or between the SITE elsewhere.
	PathJunctions *PathJunctionsRelStructure `xml:"pathJunctions,omitempty" json:"pathJunctions,omitempty"`
	// ACCESS links for SITE.
	Accesses *AccessesRelStructure `xml:"accesses,omitempty" json:"accesses,omitempty"`
	// NAVIGATION PATHs within the SITE and or between the SITE elsewhere.
	NavigationPaths *NavigationPathsRelStructure `xml:"navigationPaths,omitempty" json:"navigationPaths,omitempty"`
	// Short public code for passengers to use when uniquely identifying the stop by SMS and other self-service channels.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Additional Label of PARKING.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// Type of PARKING.
	ParkingType *ParkingTypeEnumeration `xml:"ParkingType,omitempty" json:"ParkingType,omitempty"`
	TypeOfParkingRef *TypeOfParkingRef `xml:"TypeOfParkingRef,omitempty" json:"TypeOfParkingRef,omitempty"`
	// Types of Vehicle allowed in PARKING.
	ParkingVehicleTypes *ParkingVehicleEnumeration `xml:"ParkingVehicleTypes,omitempty" json:"ParkingVehicleTypes,omitempty"`
	// TRANSPORT TYPEs  that may use PARKING - open codes.  +v1.2.2
	VehicleTypes *TransportTypeRefsRelStructure `xml:"vehicleTypes,omitempty" json:"vehicleTypes,omitempty"`
	// Format of building.
	ParkingLayout *ParkingLayoutEnumeration `xml:"ParkingLayout,omitempty" json:"ParkingLayout,omitempty"`
	// Total number of levels.
	NumberOfParkingLevels *int `xml:"NumberOfParkingLevels,omitempty" json:"NumberOfParkingLevels,omitempty"`
	// Number of parking places normamally available excluding special spaces, reserved spaces etc.
	PrincipalCapacity *int `xml:"PrincipalCapacity,omitempty" json:"PrincipalCapacity,omitempty"`
	// Total number of parking places including disabled spaces etc.
	TotalCapacity *int `xml:"TotalCapacity,omitempty" json:"TotalCapacity,omitempty"`
	// Whether Overnight Parking is permitted.
	OvernightParkingPermitted *bool `xml:"OvernightParkingPermitted,omitempty" json:"OvernightParkingPermitted,omitempty"`
	// Whether parking of vehicles containing hazardous materials is prohibited. Default is true.
	ProhibitedForHazardousMaterials *bool `xml:"ProhibitedForHazardousMaterials,omitempty" json:"ProhibitedForHazardousMaterials,omitempty"`
	// Whether car park has recharging points.
	RechargingAvailable *bool `xml:"RechargingAvailable,omitempty" json:"RechargingAvailable,omitempty"`
	// Whether Parking is offered as secure.
	Secure *bool `xml:"Secure,omitempty" json:"Secure,omitempty"`
	// Whether Real-time occupancy data is normally available.
	RealTimeOccupancyAvailable *bool `xml:"RealTimeOccupancyAvailable,omitempty" json:"RealTimeOccupancyAvailable,omitempty"`
	// Payment Process for use of PARKING.
	ParkingPaymentProcess *ParkingPaymentProcessEnumeration `xml:"ParkingPaymentProcess,omitempty" json:"ParkingPaymentProcess,omitempty"`
	// Method of Payment for use of PARKING.
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
	// Method of Payment - open values.  =V1.1
	TypesOfPaymentMethod *TypeOfPaymentMethodRefsRelStructure `xml:"typesOfPaymentMethod,omitempty" json:"typesOfPaymentMethod,omitempty"`
	// Default Currency for payment.
	DefaultCurrency *string `xml:"DefaultCurrency,omitempty" json:"DefaultCurrency,omitempty"`
	// Currencies accepted.
	CurrenciesAccepted *string `xml:"CurrenciesAccepted,omitempty" json:"CurrenciesAccepted,omitempty"`
	// Cards accepted.
	CardsAccepted *[]string `xml:"CardsAccepted,omitempty" json:"CardsAccepted,omitempty"`
	// Reservation facilities for PARKING.
	ParkingReservation *ParkingReservationEnumeration `xml:"ParkingReservation,omitempty" json:"ParkingReservation,omitempty"`
	// URL to make booking.
	BookingUrl *string `xml:"BookingUrl,omitempty" json:"BookingUrl,omitempty"`
	// How to make payment by phone.
	PaymentByMobile *PaymentByMobileStructure `xml:"PaymentByMobile,omitempty" json:"PaymentByMobile,omitempty"`
	// Whether there is free parking out of hours.
	FreeParkingOutOfHours *bool `xml:"FreeParkingOutOfHours,omitempty" json:"FreeParkingOutOfHours,omitempty"`
	// Properties of PARKING.
	ParkingProperties *ParkingPropertiesRelStructure `xml:"parkingProperties,omitempty" json:"parkingProperties,omitempty"`
	// PARKING AREAs within PARKING.
	ParkingAreas *ParkingAreasRelStructure `xml:"parkingAreas,omitempty" json:"parkingAreas,omitempty"`
	// VEHICLE ENTRANCEs within PARKING.
	VehicleEntrances *ParkingEntrancesForVehiclesRelStructure `xml:"vehicleEntrances,omitempty" json:"vehicleEntrances,omitempty"`
}

// PaymentByMobileStructure represents the PaymentByMobileStructure element
// Type for Payment By Mobile details.
type PaymentByMobileStructure struct {
	// Phone number to call or text to pay.
	PhoneNumberToPay *string `xml:"PhoneNumberToPay,omitempty" json:"PhoneNumberToPay,omitempty"`
	// Phone number for support.
	SupportPhoneNumber *string `xml:"SupportPhoneNumber,omitempty" json:"SupportPhoneNumber,omitempty"`
	// URL to make paymnet.
	PaymentUrl *string `xml:"PaymentUrl,omitempty" json:"PaymentUrl,omitempty"`
	// URL to downlaod app to pay.
	PaymentAppDownloadUrl *string `xml:"PaymentAppDownloadUrl,omitempty" json:"PaymentAppDownloadUrl,omitempty"`
}

// ParkingEntrancesForVehiclesRelStructure represents the parkingEntrancesForVehicles_RelStructure element
// Type for a list of PARKING ENTRANCE.
type ParkingEntrancesForVehiclesRelStructure struct {
	ContainmentAggregationStructure
	ParkingEntranceForVehiclesRef []ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	// An area within a Site. May be connected to Quays by PATH LINKs.
	ParkingEntranceForVehicles []ParkingEntranceForVehicles `xml:"ParkingEntranceForVehicles,omitempty" json:"ParkingEntranceForVehicles,omitempty"`
}

// ParkingEntranceForVehiclesVersionStructure represents the ParkingEntranceForVehicles__VersionStructure element
// Type for PARKING ENTRANCE.
type ParkingEntranceForVehiclesVersionStructure struct {
	SiteEntranceVersionStructure
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	// PARKING AREAs to which ENtrance gives access appky +v1.1.
	Areas *ParkingAreaRefsRelStructure `xml:"areas,omitempty" json:"areas,omitempty"`
}

// ParkingPassengerEntranceVersionStructure represents the ParkingPassengerEntrance_VersionStructure element
// Type for a PARKING PASSENGER ENTRANCe.
type ParkingPassengerEntranceVersionStructure struct {
	SiteEntranceVersionStructure
	// PARKING AREA to which prperties appky +v1.1.
	Areas *ParkingAreaRefsRelStructure `xml:"areas,omitempty" json:"areas,omitempty"`
}

// ParkingPropertiesRelStructure represents the parkingProperties_RelStructure element
// Type for a list of PARKING PROPERTies.
type ParkingPropertiesRelStructure struct {
	StrictContainmentAggregationStructure
	ParkingProperties []ParkingProperties `xml:"ParkingProperties" json:"ParkingProperties"`
}

// ParkingPropertiesVersionedChildStructure represents the ParkingProperties_VersionedChildStructure element
// Type for a PARKING PROPERTies.
type ParkingPropertiesVersionedChildStructure struct {
	VersionedChildStructure
	// Name of PARKING PROPERTIes.+V1.2.2
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	// Type of users: disabled, all etc.
	ParkingUserTypes *ParkingUserEnumeration `xml:"ParkingUserTypes,omitempty" json:"ParkingUserTypes,omitempty"`
	// Type of vehicle that PARKING allows.
	ParkingVehicleTypes *ParkingVehicleEnumeration `xml:"ParkingVehicleTypes,omitempty" json:"ParkingVehicleTypes,omitempty"`
	// TRANSPORT TYPEs  that may use PARKING - open codes.  +v1.2.2
	VehicleTypes *TransportTypeRefsRelStructure `xml:"vehicleTypes,omitempty" json:"vehicleTypes,omitempty"`
	// Nature of stay in PARKING.
	ParkingStayList *ParkingStayEnumeration `xml:"ParkingStayList,omitempty" json:"ParkingStayList,omitempty"`
	// Maximum allowed Stay as Duration.
	MaximumStay *string `xml:"MaximumStay,omitempty" json:"MaximumStay,omitempty"`
	// Whether Parking is secured by surveillance and other measures.surveillance.
	SecureParking *bool `xml:"SecureParking,omitempty" json:"SecureParking,omitempty"`
	// Relative positioning of Parking bays.  +v1.2.2
	BayGeometry *BayGeometryEnumeration `xml:"BayGeometry,omitempty" json:"BayGeometry,omitempty"`
	// Visibible Indication of parking area.  +v1.2.2
	ParkingVisibility *ParkingVisibilityEnumeration `xml:"ParkingVisibility,omitempty" json:"ParkingVisibility,omitempty"`
	// PARKING AREA to which prpoerties appky +v1.1.
	Areas *ParkingAreaRefsRelStructure `xml:"areas,omitempty" json:"areas,omitempty"`
	// Available spaces within PARKING AREA.
	Spaces *ParkingCapacitiesRelStructure `xml:"spaces,omitempty" json:"spaces,omitempty"`
}

// ParkingCapacitiesRelStructure represents the parkingCapacities_RelStructure element
// Type for a list of PARKING CAPACITies.
type ParkingCapacitiesRelStructure struct {
	ContainmentAggregationStructure
	ParkingCapacityRef []ParkingCapacityRef `xml:"ParkingCapacityRef,omitempty" json:"ParkingCapacityRef,omitempty"`
	ParkingCapacity []ParkingCapacity `xml:"ParkingCapacity,omitempty" json:"ParkingCapacity,omitempty"`
}

// ParkingCapacityVersionedChildStructure represents the ParkingCapacity_VersionedChildStructure element
// Type for a PARKING CAPACITY.
type ParkingCapacityVersionedChildStructure struct {
	VersionedChildStructure
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	// DEPRECATED As not integrity checked.
	ParentRef *ParkingPropertiesRefStructure `xml:"ParentRef,omitempty" json:"ParentRef,omitempty"`
	ParkingPropertiesRef *ParkingPropertiesRef `xml:"ParkingPropertiesRef,omitempty" json:"ParkingPropertiesRef,omitempty"`
	// Type of users: disabled, all etc.
	ParkingUserType *ParkingUserEnumeration `xml:"ParkingUserType,omitempty" json:"ParkingUserType,omitempty"`
	// Type of vehicle that PARKING allows.
	ParkingVehicleType *ParkingVehicleEnumeration `xml:"ParkingVehicleType,omitempty" json:"ParkingVehicleType,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	// Type of Stay allowed in PARKING.
	ParkingStayType *ParkingStayEnumeration `xml:"ParkingStayType,omitempty" json:"ParkingStayType,omitempty"`
	// Total number of parking places.
	NumberOfSpaces *int `xml:"NumberOfSpaces,omitempty" json:"NumberOfSpaces,omitempty"`
	// Number of parking places with eletric chargepoints.
	NumberOfSpacesWithRechargePoint *int `xml:"NumberOfSpacesWithRechargePoint,omitempty" json:"NumberOfSpacesWithRechargePoint,omitempty"`
}

// ParkingComponentVersionStructure represents the ParkingComponent_VersionStructure element
// Type for a PARKING COMPONENT.
type ParkingComponentVersionStructure struct {
	SiteComponentVersionStructure
	// Payment Code associated with PARKING COMPONENT.
	ParkingPaymentCode *string `xml:"ParkingPaymentCode,omitempty" json:"ParkingPaymentCode,omitempty"`
	// Additional Label of PARKING COMPONENT.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	// Maximum length of VEHICLE that can use PARKING COMPONENT.
	MaximumLength *float64 `xml:"MaximumLength,omitempty" json:"MaximumLength,omitempty"`
	// Maximum width of VEHICLE that can use PARKING COMPONENT.
	MaximumWidth *float64 `xml:"MaximumWidth,omitempty" json:"MaximumWidth,omitempty"`
	// Maximum height of VEHICLE that can use PARKING COMPONENT.
	MaximumHeight *float64 `xml:"MaximumHeight,omitempty" json:"MaximumHeight,omitempty"`
	// Maximum weight of VEHICLE to use PARKING AREA.
	MaximumWeight *float64 `xml:"MaximumWeight,omitempty" json:"MaximumWeight,omitempty"`
}

// ParkingAreasRelStructure represents the parkingAreas_RelStructure element
// Type for a list of PARKING AREAs.
type ParkingAreasRelStructure struct {
	ContainmentAggregationStructure
	VehiclePoolingParkingAreaRef []VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef []VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef []TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef []ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	VehiclePoolingParkingArea []VehiclePoolingParkingArea `xml:"VehiclePoolingParkingArea,omitempty" json:"VehiclePoolingParkingArea,omitempty"`
	VehicleSharingParkingArea []VehicleSharingParkingArea `xml:"VehicleSharingParkingArea,omitempty" json:"VehicleSharingParkingArea,omitempty"`
	TaxiParkingArea []TaxiParkingArea `xml:"TaxiParkingArea,omitempty" json:"TaxiParkingArea,omitempty"`
	ParkingArea []ParkingArea `xml:"ParkingArea,omitempty" json:"ParkingArea,omitempty"`
}

// ParkingAreaVersionStructure represents the ParkingArea_VersionStructure element
// Type for a PARKING AREA.
type ParkingAreaVersionStructure struct {
	ParkingComponentVersionStructure
	// Total number of parking places in PARKING AREA.
	TotalCapacity *int `xml:"TotalCapacity,omitempty" json:"TotalCapacity,omitempty"`
	// Total number of parking places supportig Electirc car recharging  in PARKING AREA.
	NumberOfBaysWithRecharging *int `xml:"NumberOfBaysWithRecharging,omitempty" json:"NumberOfBaysWithRecharging,omitempty"`
	ParkingProperties *ParkingProperties `xml:"ParkingProperties,omitempty" json:"ParkingProperties,omitempty"`
	// Properties of PARKING AREA
	NetexOrgUkNetexParkingProperties *ParkingPropertiesRelStructure `xml:"parkingProperties,omitempty" json:"parkingProperties,omitempty"`
	// Bays within PARKING AREA.
	Bays *ParkingBaysRelStructure `xml:"bays,omitempty" json:"bays,omitempty"`
	// ENTRANCEs to PARKING AREA.
	Entrances *EntranceRefsRelStructure `xml:"entrances,omitempty" json:"entrances,omitempty"`
}

// ParkingBaysRelStructure represents the parkingBays_RelStructure element
// Type for a list of PARKING BAYs.
type ParkingBaysRelStructure struct {
	ContainmentAggregationStructure
	VehiclePoolingParkingBayRef []VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef []MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef []VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef []ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBay []MonitoredVehicleSharingParkingBay `xml:"MonitoredVehicleSharingParkingBay,omitempty" json:"MonitoredVehicleSharingParkingBay,omitempty"`
	VehiclePoolingParkingBay []VehiclePoolingParkingBay `xml:"VehiclePoolingParkingBay,omitempty" json:"VehiclePoolingParkingBay,omitempty"`
	VehicleSharingParkingBay []VehicleSharingParkingBay `xml:"VehicleSharingParkingBay,omitempty" json:"VehicleSharingParkingBay,omitempty"`
	ParkingBay []ParkingBay `xml:"ParkingBay,omitempty" json:"ParkingBay,omitempty"`
}

// ParkingBayVersionStructure represents the ParkingBay_VersionStructure element
// Type for a PARKING BAY.
type ParkingBayVersionStructure struct {
	ParkingComponentVersionStructure
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef *VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef *ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	// Type of users: disabled, all etc.
	ParkingUserTypes *ParkingUserEnumeration `xml:"ParkingUserTypes,omitempty" json:"ParkingUserTypes,omitempty"`
	// Type of vehicle in PARKING BAY.
	ParkingVehicleType *ParkingVehicleEnumeration `xml:"ParkingVehicleType,omitempty" json:"ParkingVehicleType,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	// Nature of stay in PARKING.
	ParkingStayList *ParkingStayEnumeration `xml:"ParkingStayList,omitempty" json:"ParkingStayList,omitempty"`
	// Maximum allowed Stay as Duration.
	MaximumStay *string `xml:"MaximumStay,omitempty" json:"MaximumStay,omitempty"`
	// Whether Parking is secured by surveillance and other measures.surveillance.
	SecureParking *bool `xml:"SecureParking,omitempty" json:"SecureParking,omitempty"`
	// Relative positioning of Parking bays.  +v1.2.2
	BayGeometry *BayGeometryEnumeration `xml:"BayGeometry,omitempty" json:"BayGeometry,omitempty"`
	// Visibible Indication of parking area.  +v1.2.2
	ParkingVisibility *ParkingVisibilityEnumeration `xml:"ParkingVisibility,omitempty" json:"ParkingVisibility,omitempty"`
	// Length of PARKING BAY.
	Length *float64 `xml:"Length,omitempty" json:"Length,omitempty"`
	// Width of PARKING BAY.
	Width *float64 `xml:"Width,omitempty" json:"Width,omitempty"`
	// Height of PARKING BAY.
	Height *float64 `xml:"Height,omitempty" json:"Height,omitempty"`
	// Maximum Weight allowed in PARKING BAY. +v1.1
	Weight *float64 `xml:"Weight,omitempty" json:"Weight,omitempty"`
	// Whether power for recharging. See Equipment for details.
	RechargingAvailable *bool `xml:"RechargingAvailable,omitempty" json:"RechargingAvailable,omitempty"`
}

// TypeOfParkingValueStructure represents the TypeOfParking_ValueStructure element
// Type for a TYPE OF PARKING.
type TypeOfParkingValueStructure struct {
	TypeOfValueVersionStructure
}

// Parking represents the Parking element
// A named place where Parking may be accessed. May be a building complex (e.g. a station) or an on-street location.
type Parking struct {
	ParkingVersionStructure
}

// ParkingEntranceForVehicles represents the ParkingEntranceForVehicles element
// Designated Place within a PARKING for a VEHICLE to enter.
type ParkingEntranceForVehicles struct {
	ParkingEntranceForVehiclesVersionStructure
}

// ParkingPassengerEntrance represents the ParkingPassengerEntrance element
// Designated Passenger ENTRANCE within a PARKING.
type ParkingPassengerEntrance struct {
	ParkingPassengerEntranceVersionStructure
}

// ParkingProperties represents the ParkingProperties element
// Properties of a PARKING.
type ParkingProperties struct {
	ParkingPropertiesVersionedChildStructure
}

// ParkingCapacity represents the ParkingCapacity element
// Capacity of a PARKING.
type ParkingCapacity struct {
	ParkingCapacityVersionedChildStructure
}

// ParkingComponent represents the ParkingComponent element
// Component within a PARKING.
type ParkingComponent struct {
	ParkingComponentVersionStructure
}

// ParkingArea represents the ParkingArea element
// Area within a PARKING.
type ParkingArea struct {
	ParkingAreaVersionStructure
}

// ParkingBay represents the ParkingBay element
// An individual place to park a VEHICLE.
type ParkingBay struct {
	ParkingBayVersionStructure
}

// TypeOfParking represents the TypeOfParking element
// A classification for a PARKING. +v1.2.2
type TypeOfParking struct {
	TypeOfParkingValueStructure
}

// TaxiRankRefsRelStructure represents the taxiRankRefs_RelStructure element
// Type for a list of TAXI STANDs.
type TaxiRankRefsRelStructure struct {
	OneToManyRelationshipStructure
	TaxiStandRef TaxiStandRef `xml:"TaxiStandRef" json:"TaxiStandRef"`
}

// TaxiRankRefStructure represents the TaxiRankRefStructure element
// Type for a reference to a TAXI RANK.
type TaxiRankRefStructure struct {
	StopPlaceRefStructure
}

// TaxiStandRefStructure represents the TaxiStandRefStructure element
// Type for a reference to a TAXI STAND.
type TaxiStandRefStructure struct {
	QuayRefStructure
}

// TaxiParkingAreaRefStructure represents the TaxiParkingAreaRefStructure element
// Type for a reference to a TAXI PARKING AREA.
type TaxiParkingAreaRefStructure struct {
	ParkingAreaRefStructure
}

// TaxiRankRef represents the TaxiRankRef element
// Reference to a TAXI RANK. +v1.2.2
type TaxiRankRef struct {
	TaxiRankRefStructure
}

// TaxiStandRef represents the TaxiStandRef element
// Reference to a TAXI STAND. +v1.2.2
type TaxiStandRef struct {
	TaxiStandRefStructure
}

// TaxiParkingAreaRef represents the TaxiParkingAreaRef element
// Reference to a TAXI PARKING AREA. +v1.2.2
type TaxiParkingAreaRef struct {
	TaxiParkingAreaRefStructure
}

// TaxiRanksInFrameRelStructure represents the taxiRanksInFrame_RelStructure element
// Type for containment in frame of TAXI RANKs.
type TaxiRanksInFrameRelStructure struct {
	ContainmentAggregationStructure
	// TAXI RANK.
	TaxiRank []TaxiRank `xml:"TaxiRank" json:"TaxiRank"`
}

// TaxiRankVersionStructure represents the TaxiRank_VersionStructure element
// Type for TAXI RANK.
type TaxiRankVersionStructure struct {
	StopPlaceVersionStructure
	// Maximum time for a vehicle standing in the spot
	MaximumStandingDuration *string `xml:"MaximumStandingDuration,omitempty" json:"MaximumStandingDuration,omitempty"`
	// Taxis stands in RANK&gt; NB This is a work around as cannout get TAXI STAND to be a Substitution Group for  a QUAY. +v1.2.2
	TaxiStands *TaxiStandsRelStructure `xml:"taxiStands,omitempty" json:"taxiStands,omitempty"`
}

// TaxiStandsRelStructure represents the taxiStands_RelStructure element
// Type for a list of TAXI STANDs.
type TaxiStandsRelStructure struct {
	ContainmentAggregationStructure
	TaxiStand []TaxiStand `xml:"TaxiStand" json:"TaxiStand"`
}

// TaxiStandVersionStructure represents the TaxiStand_VersionStructure element
// Type for TAXI STAND.
type TaxiStandVersionStructure struct {
	QuayVersionStructure
	// Maximum time for a vehicle standing in the spot
	MaximumStandingDuration *string `xml:"MaximumStandingDuration,omitempty" json:"MaximumStandingDuration,omitempty"`
}

// TaxiParkingAreaVersionStructure represents the TaxiParkingArea_VersionStructure element
// Type for TAXI PARKING AREA.
type TaxiParkingAreaVersionStructure struct {
	ParkingAreaVersionStructure
}

// TaxiRank represents the TaxiRank element
// A place comprising one or more locations where taxis may stop to pick up or set down passengers.  +v1.2.2
type TaxiRank struct {
	TaxiRankVersionStructure
}

// TaxiStand represents the TaxiStand element
// A set of spots where any taxi is able to safely stop for a short period of time to load passengers.  +v1.2.2
type TaxiStand struct {
	TaxiStandVersionStructure
}

// TaxiParkingArea represents the TaxiParkingArea element
// A specific area where any taxi is able to safely park for a long period.  +v1.2.2
type TaxiParkingArea struct {
	TaxiParkingAreaVersionStructure
}

// PointsOfInterestInFrameRelStructure represents the pointsOfInterestInFrame_RelStructure element
// Type for containment in frame of POINT OF INTEREST.
type PointsOfInterestInFrameRelStructure struct {
	ContainmentAggregationStructure
	PointOfInterest []PointOfInterest `xml:"PointOfInterest" json:"PointOfInterest"`
}

// PointOfInterestClassificationsInFrameRelStructure represents the pointOfInterestClassificationsInFrame_RelStructure element
// Type for containment in frame of POINT OF INTEREST CLASSIFICATION.
type PointOfInterestClassificationsInFrameRelStructure struct {
	ContainmentAggregationStructure
	PointOfInterestClassification []PointOfInterestClassification `xml:"PointOfInterestClassification" json:"PointOfInterestClassification"`
}

// PointOfInterestClassificationHierarchiesInFrameRelStructure represents the pointOfInterestClassificationHierarchiesInFrame_RelStructure element
// Type for containment in frame of POINT OF INTEREST CLASSIFICATION Hierarchy.
type PointOfInterestClassificationHierarchiesInFrameRelStructure struct {
	ContainmentAggregationStructure
	PointOfInterestClassificationHierarchy []PointOfInterestClassificationHierarchy `xml:"PointOfInterestClassificationHierarchy" json:"PointOfInterestClassificationHierarchy"`
}

// PointOfInterestClassificationVersionStructure represents the PointOfInterestClassification_VersionStructure element
// Type for Classification of a POINT OF INTEREST.
type PointOfInterestClassificationVersionStructure struct {
	TypeOfValueVersionStructure
	// Alternative descriptors.
	AlternativeDescriptors *ClassificationDescriptorsRelStructure `xml:"alternativeDescriptors,omitempty" json:"alternativeDescriptors,omitempty"`
}

// ClassificationDescriptorsRelStructure represents the classificationDescriptors_RelStructure element
// Type for a list of POINT OF INTEREST CLASSIFICATION DESCRIPTORs.
type ClassificationDescriptorsRelStructure struct {
	StrictContainmentAggregationStructure
	// Alternative descriptor for a POINT OF INTEREST Classification.
	ClassificationDescriptor []ClassificationDescriptorVersionStructure `xml:"ClassificationDescriptor" json:"ClassificationDescriptor"`
}

// ClassificationDescriptorVersionStructure represents the ClassificationDescriptor_VersionStructure element
// Type for a Descriptor for a POINT OF INTEREST CLASSIFICATION.
type ClassificationDescriptorVersionStructure struct {
	TypeOfValueVersionStructure
}

// PointOfInterestClassificationHierarchyVersionStructure represents the PointOfInterestClassificationHierarchy_VersionStructure element
// Type for POINT OF INTEREST CLASSIFICATION HIERARCHY.
type PointOfInterestClassificationHierarchyVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Members of the POINT OF INTEREST HIERARCHY.
	Members *PointOfInterestClassificationHierarchyMembersRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// PointOfInterestClassificationHierarchyMembersRelStructure represents the pointOfInterestClassificationHierarchyMembers_RelStructure element
// Type for a list of POINT OF INTEREST CLASSIFICATION HIERARCHY MEMBERs.
type PointOfInterestClassificationHierarchyMembersRelStructure struct {
	StrictContainmentAggregationStructure
	ClassificationHierarchyMember []PointOfInterestClassificationHierarchyMemberStructure `xml:"ClassificationHierarchyMember" json:"ClassificationHierarchyMember"`
}

// PointOfInterestClassificationHierarchyMemberStructure represents the PointOfInterestClassificationHierarchyMemberStructure element
// Type for POINT OF INTEREST CLASSIFICATION HIERARCHY MEMBER.
type PointOfInterestClassificationHierarchyMemberStructure struct {
	VersionedChildStructure
	PointOfInterestHierarchyRef *PointOfInterestHierarchyRef `xml:"PointOfInterestHierarchyRef,omitempty" json:"PointOfInterestHierarchyRef,omitempty"`
	// Parent POINT OF INTEREST CLASSIFICATION for this CLASSIFICATION HIERARCHY member.
	ParentClassificationRef PointOfInterestClassificationRefStructure `xml:"ParentClassificationRef" json:"ParentClassificationRef"`
	// POINT OF INTEREST CLASSIFICATION that is in this classification Hierarchy.
	PointOfInterestClassificationRef PointOfInterestClassificationRefStructure `xml:"PointOfInterestClassificationRef" json:"PointOfInterestClassificationRef"`
}

// PointOfInterestVersionStructure represents the PointOfInterest_VersionStructure element
// Type for a POINT OF INTEREST.
type PointOfInterestVersionStructure struct {
	SiteVersionStructure
	// Membership of POI CLASSIFICATIONS.
	Classifications *PointOfInterestClassificationsViewsRelStructure `xml:"classifications,omitempty" json:"classifications,omitempty"`
	// POINT OF INTEREST SPACEs within the POI.
	Spaces *PointOfInterestSpacesRelStructure `xml:"spaces,omitempty" json:"spaces,omitempty"`
	// TOPOGRAPHIC PLACEs that are near to the POINT OF INTEREST or that contain it.
	NearTopographicPlaces *TopographicPlaceRefsRelStructure `xml:"nearTopographicPlaces,omitempty" json:"nearTopographicPlaces,omitempty"`
	// PATH LINKs for SITE.
	PathLinks *SitePathLinksRelStructure `xml:"pathLinks,omitempty" json:"pathLinks,omitempty"`
	// PATH JUNCTIONs within the SITE and or between the SITE elsewhere.
	PathJunctions *PathJunctionsRelStructure `xml:"pathJunctions,omitempty" json:"pathJunctions,omitempty"`
	// ACCESS links for SITE.
	Accesses *AccessesRelStructure `xml:"accesses,omitempty" json:"accesses,omitempty"`
	// NAVIGATION PATHs within the SITE and or between the SITE elsewhere.
	NavigationPaths *NavigationPathsRelStructure `xml:"navigationPaths,omitempty" json:"navigationPaths,omitempty"`
}

// PointOfInterestComponentVersionStructure represents the PointOfInterestComponent_VersionStructure element
// Type for a POINT OF INTEREST COMPONENT.
type PointOfInterestComponentVersionStructure struct {
	SiteComponentVersionStructure
}

// PointOfInterestSpacesRelStructure represents the pointOfInterestSpaces_RelStructure element
// Type for a list of POINT OF INTEREST SPACEs.
type PointOfInterestSpacesRelStructure struct {
	ContainmentAggregationStructure
	// Reference to component defined elsewhere.
	PointOfInterestSpaceRef []SiteComponentRefStructure `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	// An area within a Site. May be connected to Quays by PATH LINKs.
	PointOfInterestSpace []PointOfInterestSpace `xml:"PointOfInterestSpace,omitempty" json:"PointOfInterestSpace,omitempty"`
}

// PointOfInterestSpaceVersionStructure represents the PointOfInterestSpace_VersionStructure element
// Type for a POINT OF INTEREST SPACE.
type PointOfInterestSpaceVersionStructure struct {
	PointOfInterestComponentVersionStructure
	// Type of ACCESS SPACE.
	AccessSpaceType *PointOfInterestSpaceVersionStructureAccessSpaceType `xml:"AccessSpaceType,omitempty" json:"AccessSpaceType,omitempty"`
	// Type of POINT OF INTEREST space.
	PointOfInterestSpaceType *PointOfInterestSpaceTypeEnumeration `xml:"PointOfInterestSpaceType,omitempty" json:"PointOfInterestSpaceType,omitempty"`
	// Type of physical passage space.
	PassageType *PassageTypeEnumeration `xml:"PassageType,omitempty" json:"PassageType,omitempty"`
	// if Space is a subzone of another POINT OF INTEREST SPACE identifies parent,
	ParentPointOfInterestSpaceRef *PointOfInterestSpaceRefStructure `xml:"ParentPointOfInterestSpaceRef,omitempty" json:"ParentPointOfInterestSpaceRef,omitempty"`
	// Entrances to POINT OF INTEREST SPACE.
	Entrances *PointOfInterestEntrancesRelStructure `xml:"entrances,omitempty" json:"entrances,omitempty"`
}

// PointOfInterestEntrancesRelStructure represents the pointOfInterestEntrances_RelStructure element
// Type for a list of POINT OF INTEREST ENTRANCEs.
type PointOfInterestEntrancesRelStructure struct {
	ContainmentAggregationStructure
	// Reference to component defined elsewhere.
	PointOfInterestEntranceRef []SiteComponentRefStructure `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	PointOfInterestEntrance []PointOfInterestEntrance `xml:"PointOfInterestEntrance,omitempty" json:"PointOfInterestEntrance,omitempty"`
}

// PointOfInterestEntranceVersionStructure represents the PointOfInterestEntrance_VersionStructure element
// Type for a POINT OF INTEREST Passenger ENTRANCE.
type PointOfInterestEntranceVersionStructure struct {
	SiteEntranceVersionStructure
}

// PointOfInterestVehicleEntranceVersionStructure represents the PointOfInterestVehicleEntrance_VersionStructure element
// Type for a POINT OF INTEREST VEHICLE ENTRANCE.
type PointOfInterestVehicleEntranceVersionStructure struct {
	SiteEntranceVersionStructure
}

// PointOfInterestDerivedViewStructure represents the PointOfInterest_DerivedViewStructure element
// Type for POINT OF INTEREST VIEW.
type PointOfInterestDerivedViewStructure struct {
	DerivedViewStructure
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	// Name of POINT OF INTEREST.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Classification of PLACE. Used for arbitrary documentation.
	PlaceTypes *TypeOfPlaceRefsRelStructure `xml:"placeTypes,omitempty" json:"placeTypes,omitempty"`
	// Name of POINT OF INTEREST.
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
}

// PointOfInterestClassificationsViewsRelStructure represents the pointOfInterestClassificationsViews_RelStructure element
// Type for a list of POINT OF INTEREST SPACEs.
type PointOfInterestClassificationsViewsRelStructure struct {
	OneToManyRelationshipStructure
	PointOfInterestClassificationRef []PointOfInterestClassificationRef `xml:"PointOfInterestClassificationRef,omitempty" json:"PointOfInterestClassificationRef,omitempty"`
	PointOfInterestClassificationView []PointOfInterestClassificationView `xml:"PointOfInterestClassificationView,omitempty" json:"PointOfInterestClassificationView,omitempty"`
}

// PointOfInterestClassificationDerivedViewStructure represents the PointOfInterestClassification_DerivedViewStructure element
// Type for POINT OF INTEREST CLASSIFICATION VIEW.
type PointOfInterestClassificationDerivedViewStructure struct {
	DerivedViewStructure
	PointOfInterestClassificationRef *PointOfInterestClassificationRef `xml:"PointOfInterestClassificationRef,omitempty" json:"PointOfInterestClassificationRef,omitempty"`
	// Name of POINT OF INTEREST CLASSIFICATION.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
}

// PointOfInterestClassification represents the PointOfInterestClassification element
// Classification of a POINT OF INTEREST.
type PointOfInterestClassification struct {
	PointOfInterestClassificationVersionStructure
}

// PointOfInterestClassificationHierarchy represents the PointOfInterestClassificationHierarchy element
// A logical hierarchy for organizing POINT OF INTEREST CLASSIFICATIONs.  A POINT OF INTEREST CLASSIFICATION can belong to more than one hierarchy.
type PointOfInterestClassificationHierarchy struct {
	PointOfInterestClassificationHierarchyVersionStructure
}

// PointOfInterest represents the PointOfInterest element
// A type of SITE to or through which passengers may wish to navigate as part of their journey and which is modelled in detail by journey planners.
type PointOfInterest struct {
	PointOfInterestVersionStructure
}

// PointOfInterestComponent represents the PointOfInterestComponent element
// A part of the physical structure of a POINT OF INTEREST.
type PointOfInterestComponent struct {
	PointOfInterestComponentVersionStructure
}

// PointOfInterestSpace represents the PointOfInterestSpace element
// A PLACE within a POINT OF INTEREST.
type PointOfInterestSpace struct {
	PointOfInterestSpaceVersionStructure
}

// PointOfInterestEntrance represents the PointOfInterestEntrance element
// Specialisation of ENTRANCE of ENTRANCE for a passenger to a POINT OF INTEREST.
type PointOfInterestEntrance struct {
	PointOfInterestEntranceVersionStructure
}

// PointOfInterestVehicleEntrance represents the PointOfInterestVehicleEntrance element
// A VEHICLE ENTRANCE to a POINT OF INTEREST.
type PointOfInterestVehicleEntrance struct {
	PointOfInterestVehicleEntranceVersionStructure
	// POINTs in GROUP OF POINTs.
	Members interface{} `xml:"members,omitempty" json:"members,omitempty"`
}

// PointOfInterestView represents the PointOfInterestView element
// Simplified view of POINT OF INTEREST.
type PointOfInterestView struct {
	PointOfInterestDerivedViewStructure
}

// PointOfInterestClassificationView represents the PointOfInterestClassificationView element
// Simplified view of POINT OF INTEREST CLASSIFICATION.
type PointOfInterestClassificationView struct {
	PointOfInterestClassificationDerivedViewStructure
}

// AssistanceBookingServiceRefStructure represents the AssistanceBookingServiceRefStructure element
// Type for a reference to an ASSISTANCE BOOKING SERVICE.
type AssistanceBookingServiceRefStructure struct {
	LocalServiceRefStructure
}

// AssistanceBookingServiceRef represents the AssistanceBookingServiceRef element
// Reference to an ASSISTANCE BOOKING SERVICE.
type AssistanceBookingServiceRef struct {
	AssistanceBookingServiceRefStructure
}

// AssistanceBookingServicesRelStructure represents the assistanceBookingServices_RelStructure element
// Type for a list of ASSISTANCE BOOKING SERVICEs.
type AssistanceBookingServicesRelStructure struct {
	ContainmentAggregationStructure
	AssistanceBookingServiceRef []AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	AssistanceBookingService []AssistanceBookingService `xml:"AssistanceBookingService,omitempty" json:"AssistanceBookingService,omitempty"`
}

// AssistanceBookingServiceVersionStructure represents the AssistanceBookingService_VersionStructure element
// Type for ASSISTANCE BOOKING SERVICE.
type AssistanceBookingServiceVersionStructure struct {
	LocalServiceVersionStructure
	// Availilability of assistance.
	AssistanceAvailability *AssistanceAvailabilityEnumeration `xml:"AssistanceAvailability,omitempty" json:"AssistanceAvailability,omitempty"`
	// Whether a booking is needed to use a wheelchair.
	WheelchairBookingRequired *bool `xml:"WheelchairBookingRequired,omitempty" json:"WheelchairBookingRequired,omitempty"`
	// Contact details for ASSISTANCE BOOKING SERVICE.
	BookingContact *ContactStructure `xml:"BookingContact,omitempty" json:"BookingContact,omitempty"`
	// Booking conditions for ASSISTANCE BOOKING SERVICE.
	BookingArrangements *BookingArrangementsStructure `xml:"BookingArrangements,omitempty" json:"BookingArrangements,omitempty"`
	VehicleMode *VehicleMode `xml:"VehicleMode,omitempty" json:"VehicleMode,omitempty"`
	PersonalModeOfOperationRef *PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef *VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef *VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef *VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef *FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef *ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	// Specific object to which booking relates, e.g. SCHEDULED STOP POINT, STOP, VEHICLE JOURNEY, etc.
	BookedObjectRef *VersionOfObjectRefStructure `xml:"BookedObjectRef,omitempty" json:"BookedObjectRef,omitempty"`
	// NOTICEs for ASSISTANCE BOOKING SERVICE.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// AssistanceBookingService represents the AssistanceBookingService element
// Information about how to book assistance for wheelchair and disabled users.
type AssistanceBookingService struct {
	AssistanceBookingServiceVersionStructure
}

// InfrastructureFrameRefStructure represents the InfrastructureFrameRefStructure element
// Type for a reference to an INFRASTRUCTURE FRAME.
type InfrastructureFrameRefStructure struct {
	VersionFrameRefStructure
}

// InfrastructureVersionFrameStructure represents the Infrastructure_VersionFrameStructure element
// Type for an INFRASTRUCTURE FRAME.
type InfrastructureVersionFrameStructure struct {
	CommonVersionFrameStructure
	// Default sense for MEETING RESTRICTIONs in frame. If 'true', meetings at all points are restricted unless explicitly permittted,  If 'false', meetings at all points are allowed, unless explicitly forbidden by a MEETING RESTRICTION. Default is 'f'alse'.
	MeetingsRestricted *bool `xml:"MeetingsRestricted,omitempty" json:"MeetingsRestricted,omitempty"`
	// Default sense for RESTRICTED MANOEUVRE in frame. If 'true', manoevres at all points are restricted unless explicitly permittted,  If 'false', meeting at all points is allowed, unless explicitly forbidden by a RESTRICTED MANOEUVRE. Default is 'f'alse'.
	RestrictedManoeuvres *bool `xml:"RestrictedManoeuvres,omitempty" json:"RestrictedManoeuvres,omitempty"`
	// Default sense for OVERTAKING POSSIBILITY restrictions in frame. If true, overtaking at all points is restricted unless explicitly permitted,  If 'false', meeting at all points is allowed, unless explicitly forbidden by an OVERTAKING POSSIBILITY. Default is 'f'alse'.
	OvertakingPossibilitiesRestricted *bool `xml:"OvertakingPossibilitiesRestricted,omitempty" json:"OvertakingPossibilitiesRestricted,omitempty"`
	// TARIFF ZONEs in frame.
	SpatialFeatures *SpatialFeaturesInFrameRelStructure `xml:"spatialFeatures,omitempty" json:"spatialFeatures,omitempty"`
	// Junctions in Network in frame.
	Junctions *InfrastructureJunctionsInFrameRelStructure `xml:"junctions,omitempty" json:"junctions,omitempty"`
	// Elements (links) in Network in frame.
	Elements *InfrastructureElementsInFrameRelStructure `xml:"elements,omitempty" json:"elements,omitempty"`
	// restrictions on network.
	Restrictions *NetworkRestrictionsInFrameRelStructure `xml:"restrictions,omitempty" json:"restrictions,omitempty"`
	// Vehicle and CREW POINTs in frame.
	CrewBases *CrewBasesInFrameRelStructure `xml:"crewBases,omitempty" json:"crewBases,omitempty"`
	// Vehicle and CREW POINTs in frame.
	Garages *GaragesInFrameRelStructure `xml:"garages,omitempty" json:"garages,omitempty"`
	// Vehicle and CREW POINTs in frame.
	VehicleAndCrewPoints *ReliefPointsInFrameRelStructure `xml:"vehicleAndCrewPoints,omitempty" json:"vehicleAndCrewPoints,omitempty"`
	// points in frame.
	TrafficControlPoints *TrafficControlPointsInFrameRelStructure `xml:"trafficControlPoints,omitempty" json:"trafficControlPoints,omitempty"`
	// points in frame.
	ActivationPoints *ActivationPointsInFrameRelStructure `xml:"activationPoints,omitempty" json:"activationPoints,omitempty"`
	// links in frame.
	ActivationLinks *ActivationLinksInFrameRelStructure `xml:"activationLinks,omitempty" json:"activationLinks,omitempty"`
	// equipment in frame.
	ActivatedEquipments *ActivatedEquipmentsInFrameRelStructure `xml:"activatedEquipments,omitempty" json:"activatedEquipments,omitempty"`
	// VEHICLE TYPEs in frame.
	VehicleTypes *VehicleTypesInFrameRelStructure `xml:"vehicleTypes,omitempty" json:"vehicleTypes,omitempty"`
	// VEHICLE MODELs in frame.
	VehicleModels *VehicleModelsInFrameRelStructure `xml:"vehicleModels,omitempty" json:"vehicleModels,omitempty"`
	// VEHICLE EQUIPMENT PROFILEs in frame.
	VehicleEquipmentProfiles *VehicleEquipmenProfilesInFrameRelStructure `xml:"vehicleEquipmentProfiles,omitempty" json:"vehicleEquipmentProfiles,omitempty"`
	// VEHICLE MODEL PROFILEs in frame. +v1.2.2
	VehicleModelProfiles *VehicleModelProfilesInFrameRelStructure `xml:"vehicleModelProfiles,omitempty" json:"vehicleModelProfiles,omitempty"`
	// VEHICLEs in frame.
	Vehicles *VehiclesInFrameRelStructure `xml:"vehicles,omitempty" json:"vehicles,omitempty"`
}

// InfrastructureFrameRef represents the InfrastructureFrameRef element
// Reference to an INFRASTRUCTURE FRAME.
type InfrastructureFrameRef struct {
	InfrastructureFrameRefStructure
}

// InfrastructureFrame represents the InfrastructureFrame element
// A coherent set of infrastructure network description data to which the same VALIDITY CONDITIONs have been assigned.
type InfrastructureFrame struct {
	InfrastructureVersionFrameStructure
}

// SiteFrameRefStructure represents the SiteFrameRefStructure element
// Type for a reference to a SITE FRAME.
type SiteFrameRefStructure struct {
	VersionFrameRefStructure
}

// SiteVersionFrameStructure represents the Site_VersionFrameStructure element
// Type for a SITE FRAME.
type SiteVersionFrameStructure struct {
	CommonVersionFrameStructure
	// COUNTRIES in Frame
	Countries *CountriesInFrameRelStructure `xml:"countries,omitempty" json:"countries,omitempty"`
	// PLACEs in frame.
	TopographicPlaces *TopographicPlacesInFrameRelStructure `xml:"topographicPlaces,omitempty" json:"topographicPlaces,omitempty"`
	// ADDRESSes in frame.
	Addresses *AddressesInFrameRelStructure `xml:"addresses,omitempty" json:"addresses,omitempty"`
	// ACCESS links in frame.
	Accesses *AccessesInFrameRelStructure `xml:"accesses,omitempty" json:"accesses,omitempty"`
	// GROUPS of STOP PLACEs in frame.
	GroupsOfStopPlaces *GroupsOfStopPlacesInFrameRelStructure `xml:"groupsOfStopPlaces,omitempty" json:"groupsOfStopPlaces,omitempty"`
	// STOP PLACEs in frame.
	StopPlaces *StopPlacesInFrameRelStructure `xml:"stopPlaces,omitempty" json:"stopPlaces,omitempty"`
	// STOP PLACEs in frame.
	FlexibleStopPlaces *FlexibleStopPlacesInFrameRelStructure `xml:"flexibleStopPlaces,omitempty" json:"flexibleStopPlaces,omitempty"`
	// TAXI RANKs in frame.
	TaxiRanks *TaxiRanksInFrameRelStructure `xml:"taxiRanks,omitempty" json:"taxiRanks,omitempty"`
	// POINTS OF INTEREST in frame.
	PointsOfInterest *PointsOfInterestInFrameRelStructure `xml:"pointsOfInterest,omitempty" json:"pointsOfInterest,omitempty"`
	// PARKINGs in frame.
	Parkings *ParkingsInFrameRelStructure `xml:"parkings,omitempty" json:"parkings,omitempty"`
	// NAVIGATION PATHs in frame.
	NavigationPaths *NavigationPathsInFrameRelStructure `xml:"navigationPaths,omitempty" json:"navigationPaths,omitempty"`
	// PATH LINKs in frame.
	PathLinks *PathLinksInFrameRelStructure `xml:"pathLinks,omitempty" json:"pathLinks,omitempty"`
	// PATH JUNCTIONs in frame.
	PathJunctions *PathJunctionsInFrameRelStructure `xml:"pathJunctions,omitempty" json:"pathJunctions,omitempty"`
	// CHECK CONSTRAINTs in frame.
	CheckConstraints *CheckConstraintInFrameRelStructure `xml:"checkConstraints,omitempty" json:"checkConstraints,omitempty"`
	// CHECK CONSTRAINTs DELAYs in frame.
	CheckConstraintDelays *CheckConstraintDelaysInFrameRelStructure `xml:"checkConstraintDelays,omitempty" json:"checkConstraintDelays,omitempty"`
	// CHECK CONSTRAINTs DELAYs in frame.
	CheckConstraintThroughputs *CheckConstraintThroughputsInFrameRelStructure `xml:"checkConstraintThroughputs,omitempty" json:"checkConstraintThroughputs,omitempty"`
	// POINT OF INTEREST CLASSIFICATIONS in frame.
	PointOfInterestClassifications *PointOfInterestClassificationsInFrameRelStructure `xml:"pointOfInterestClassifications,omitempty" json:"pointOfInterestClassifications,omitempty"`
	// POINT OF INTEREST CLASSIFICATION HIERARCHies in frame.
	PointOfInterestClassificationHierarchies *PointOfInterestClassificationHierarchiesInFrameRelStructure `xml:"pointOfInterestClassificationHierarchies,omitempty" json:"pointOfInterestClassificationHierarchies,omitempty"`
	// TARIFF ZONEs in frame.
	TariffZones *TariffZonesInFrameRelStructure `xml:"tariffZones,omitempty" json:"tariffZones,omitempty"`
	// GROUPs of TARIFF ZONEs in frame.
	GroupsOfTariffZones *GroupsOfTariffZonesInFrameRelStructure `xml:"groupsOfTariffZones,omitempty" json:"groupsOfTariffZones,omitempty"`
	SiteFacilitySets *SiteFacilitySetsInFrameRelStructure `xml:"siteFacilitySets,omitempty" json:"siteFacilitySets,omitempty"`
}

// GroupsOfTariffZonesInFrameRelStructure represents the groupsOfTariffZonesInFrame_RelStructure element
// Type for containment in frame of GROUP OF TARIFF ZONEs.
type GroupsOfTariffZonesInFrameRelStructure struct {
	ContainmentAggregationStructure
	GroupOfTariffZones []GroupOfTariffZones `xml:"GroupOfTariffZones" json:"GroupOfTariffZones"`
}

// SiteFrameRef represents the SiteFrameRef element
// Reference to a SITE FRAME.
type SiteFrameRef struct {
	SiteFrameRefStructure
}

// SiteFrame represents the SiteFrame element
// A coherent set of SITE data to which the same frame VALIDITY CONDITIONs have been assigned.
type SiteFrame struct {
	SiteVersionFrameStructure
}

// DeadRunTypeEnumeration represents the DeadRunTypeEnumeration enumeration
// Allowed values for DEAD RUN. type.
type DeadRunTypeEnumeration string

const (
	// DeadRunTypeEnumerationGarageRunOut represents garageRunOut
	// INTERCHANGE is considered a possible connection between journeys.
	DeadRunTypeEnumerationGarageRunOut DeadRunTypeEnumeration = "garageRunOut"
	// DeadRunTypeEnumerationGarageRunIn represents garageRunIn
	// INTERCHANGE is advertised to public as a possible connection between journeys.
	DeadRunTypeEnumerationGarageRunIn DeadRunTypeEnumeration = "garageRunIn"
	// DeadRunTypeEnumerationTurningManoeuvre represents turningManoeuvre
	// INTERCHANGE is actively managed as a possible connection between journeys and passengers are informed of real-time alterations.
	DeadRunTypeEnumerationTurningManoeuvre DeadRunTypeEnumeration = "turningManoeuvre"
	// DeadRunTypeEnumerationOther represents other
	DeadRunTypeEnumerationOther DeadRunTypeEnumeration = "other"
)

// JourneyRefStructure represents the JourneyRefStructure element
// Type for a reference to a JOURNEY.
type JourneyRefStructure struct {
	LinkSequenceRefStructure
}

// VehicleJourneyRefStructure represents the VehicleJourneyRefStructure element
// Type for a reference to a VEHICLE JOURNEY.
type VehicleJourneyRefStructure struct {
	JourneyRefStructure
}

// VehicleJourneyRefsRelStructure represents the vehicleJourneyRefs_RelStructure element
// Type for a list of VEHICLE JOURNEYs.
type VehicleJourneyRefsRelStructure struct {
	OneToManyRelationshipStructure
	DeadRunRef []DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef []VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
}

// DeadRunRefStructure represents the DeadRunRefStructure element
// Type for a reference to a DEAD RUN.
type DeadRunRefStructure struct {
	VehicleJourneyRefStructure
}

// TrainNumberRefStructure represents the TrainNumberRefStructure element
// Type for a reference to a TRAIN NUMBER.
type TrainNumberRefStructure struct {
	VersionOfObjectRefStructure
}

// TrainNumberRefsRelStructure represents the trainNumberRefs_RelStructure element
// Type for a list of TRAIN NUMBERs.
type TrainNumberRefsRelStructure struct {
	OneToManyRelationshipStructure
	TrainNumberRef []TrainNumberRef `xml:"TrainNumberRef" json:"TrainNumberRef"`
}

// TrainComponentLabelAssignmentRefStructure represents the TrainComponentLabelAssignmentRefStructure element
// Type for a reference to a TRAIN COMPONENT NUMBER ASSIGNNMENT.
type TrainComponentLabelAssignmentRefStructure struct {
	AssignmentRefStructure
}

// TrainComponentLabelAssignmentRefsRelStructure represents the TrainComponentLabelAssignmentRefs_RelStructure element
// Type for a list of TRAIN COMPONENT NUMBER ASSIGNNMENTs.
type TrainComponentLabelAssignmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	TrainComponentLabelAssignmentRef []TrainComponentLabelAssignmentRef `xml:"TrainComponentLabelAssignmentRef" json:"TrainComponentLabelAssignmentRef"`
}

// VehicleTypeStopAssignmentRefStructure represents the VehicleTypeStopAssignmentRefStructure element
// Type for a reference to a VEHICLE TYPE STOP ASSIGNMENT.
type VehicleTypeStopAssignmentRefStructure struct {
	StopAssignmentRefStructure
}

// TimingAlgorithmTypeRefStructure represents the TimingAlgorithmTypeRefStructure element
// Type for a reference to a TIMING ALGORITHM TYPE.
type TimingAlgorithmTypeRefStructure struct {
	TypeOfValueRefStructure
}

// VehicleJourneyStopAssignmentRefStructure represents the VehicleJourneyStopAssignmentRefStructure element
// Type for a reference to a VEHICLE JOURNEY STOP ASSIGNMENT.
type VehicleJourneyStopAssignmentRefStructure struct {
	PassengerStopAssignmentRefStructure
}

// JourneyRef represents the JourneyRef element
// Reference to a JOURNEY.
type JourneyRef struct {
	JourneyRefStructure
}

// VehicleJourneyRef represents the VehicleJourneyRef element
// Reference to a VEHICLE JOURNEY. If given by context does not need to be repeated.
type VehicleJourneyRef struct {
	VehicleJourneyRefStructure
}

// DeadRunRef represents the DeadRunRef element
// Reference to a DEAD RUN.
type DeadRunRef struct {
	DeadRunRefStructure
}

// TrainNumberRef represents the TrainNumberRef element
// Reference to a TRAIN NUMBER.
type TrainNumberRef struct {
	TrainNumberRefStructure
}

// TrainComponentLabelAssignmentRef represents the TrainComponentLabelAssignmentRef element
// Reference to a TRAIN COMPONENT NUMBER ASSIGNNMENT.
type TrainComponentLabelAssignmentRef struct {
	TrainComponentLabelAssignmentRefStructure
}

// VehicleTypeStopAssignmentRef represents the VehicleTypeStopAssignmentRef element
// Reference to a VEHICLE TYPE STOP ASSIGNMENT.
type VehicleTypeStopAssignmentRef struct {
	VehicleTypeStopAssignmentRefStructure
}

// TimingAlgorithmTypeRef represents the TimingAlgorithmTypeRef element
// Reference to a TIMING ALGORITHM TYPE.
type TimingAlgorithmTypeRef struct {
	TimingAlgorithmTypeRefStructure
}

// VehicleJourneyStopAssignmentRef represents the VehicleJourneyStopAssignmentRef element
// Reference to a VEHICLE JOURNEY STOP ASSIGNMENT.
type VehicleJourneyStopAssignmentRef struct {
	VehicleJourneyStopAssignmentRefStructure
}

// JourneyAccountingEnumeration represents the JourneyAccountingEnumeration enumeration
// Allowed values for Accounting Coverage.
type JourneyAccountingEnumeration string

const (
	// JourneyAccountingEnumerationContract represents contract
	// ERA X01: The connection is guaranteed under any circumstances.
	JourneyAccountingEnumerationContract JourneyAccountingEnumeration = "contract"
	// JourneyAccountingEnumerationSubsidy represents subsidy
	// ERA X02: The connection is normally guaranteed, although the connection time available is shorter than the location connection time.
	JourneyAccountingEnumerationSubsidy JourneyAccountingEnumeration = "subsidy"
	// JourneyAccountingEnumerationOther represents other
	// ERA X03: The connection is not guaranteed, although the connection time available is longer than the location connection time.
	JourneyAccountingEnumerationOther JourneyAccountingEnumeration = "other"
)

// JourneyAccountingRefStructure represents the JourneyAccountingRefStructure element
// Type for a reference to a JOURNEY ACCOUNTING.
type JourneyAccountingRefStructure struct {
	AssignmentRefStructure
}

// SupplyContractRefStructure represents the SupplyContractRefStructure element
// Type for a reference to a SUPPLY CONTRACT.
type SupplyContractRefStructure struct {
	VersionOfObjectRefStructure
}

// JourneyAccountingRef represents the JourneyAccountingRef element
// Reference to a JOURNEY ACCOUNTING.
type JourneyAccountingRef struct {
	JourneyAccountingRefStructure
}

// SupplyContractRef represents the SupplyContractRef element
// Reference to a SUPPLY CONTRACT.
type SupplyContractRef struct {
	SupplyContractRefStructure
}

// JourneyAccountingsInFrameRelStructure represents the journeyAccountingsInFrame_RelStructure element
// Type for containment in frame of VEHICLE TYPEs.
type JourneyAccountingsInFrameRelStructure struct {
	ContainmentAggregationStructure
	JourneyAccounting []JourneyAccounting `xml:"JourneyAccounting" json:"JourneyAccounting"`
}

// JourneyAccountingsRelStructure represents the journeyAccountings_RelStructure element
// JOURNEY ACCOUNTING associated with entity.
type JourneyAccountingsRelStructure struct {
	ContainmentAggregationStructure
	JourneyAccountingRef []JourneyAccountingRef `xml:"JourneyAccountingRef,omitempty" json:"JourneyAccountingRef,omitempty"`
	JourneyAccounting []JourneyAccounting `xml:"JourneyAccounting,omitempty" json:"JourneyAccounting,omitempty"`
}

// JourneyAccountingVersionStructure represents the JourneyAccounting_VersionStructure element
// Type for ACCOUNTING.
type JourneyAccountingVersionStructure struct {
	AssignmentVersionStructure1
	// Object for which this accounts.
	AccountedObjectRef *VersionOfObjectRefStructure `xml:"AccountedObjectRef,omitempty" json:"AccountedObjectRef,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	SupplyContractRef *SupplyContractRef `xml:"SupplyContractRef,omitempty" json:"SupplyContractRef,omitempty"`
	// Accounting code to assign to Journey.
	AccountingCode *string `xml:"AccountingCode,omitempty" json:"AccountingCode,omitempty"`
	// Nature of coverage contract, subsidy. Default is contract.
	AccountingType *JourneyAccountingEnumeration `xml:"AccountingType,omitempty" json:"AccountingType,omitempty"`
	// Whether all or part of the journey is covered.
	Partial []bool `xml:"Partial,omitempty" json:"Partial,omitempty"`
	// Distance for accounting purposes. If omitted use Journey distance.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// Specifies the paid duration for this service journey. Might differ from the run time.
	Duration *string `xml:"Duration,omitempty" json:"Duration,omitempty"`
}

// JourneyAccounting represents the JourneyAccounting element
// Parameters characterizing VEHICLE JOURNEYs or SPECIAL SERVICEs used for accounting purposes in particular in contracts between ORGANISATIONs.
type JourneyAccounting struct {
	JourneyAccountingVersionStructure
}

// JourneyVersionStructure represents the Journey_VersionStructure element
// Type for JOURNEY.
type JourneyVersionStructure struct {
	LinkSequenceVersionStructure
	// Mode of transport of JOURNEY.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	TransportSubmode *TransportSubmode `xml:"TransportSubmode,omitempty" json:"TransportSubmode,omitempty"`
	// An alternative  code that uniquely identifies the JOURNEY. Specifically for use in AVMS systems. For VDV compatibility.
	ExternalVehicleJourneyRef *ExternalObjectRefStructure `xml:"ExternalVehicleJourneyRef,omitempty" json:"ExternalVehicleJourneyRef,omitempty"`
	TypeOfProductCategoryRef *TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfServiceRef *TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	LinkSequenceProjectionRef *LinkSequenceProjectionRef `xml:"LinkSequenceProjectionRef,omitempty" json:"LinkSequenceProjectionRef,omitempty"`
	LinkSequenceProjection *LinkSequenceProjection `xml:"LinkSequenceProjection,omitempty" json:"LinkSequenceProjection,omitempty"`
	// Whether the journey will be monitored in real time.
	Monitored *bool `xml:"Monitored,omitempty" json:"Monitored,omitempty"`
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	// JOURNEY ACCOUNTING to be used to attribute JOURNEY costs.
	JourneyAccountings *JourneyAccountingsRelStructure `xml:"journeyAccountings,omitempty" json:"journeyAccountings,omitempty"`
	// NOTICEs  relevant for the whole GROUP OF SERVICEs.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// JourneyRefsRelStructure represents the journeyRefs_RelStructure element
// Type for a list of JOURNEYs.
type JourneyRefsRelStructure struct {
	OneToManyRelationshipStructure
	SingleJourneyRef []SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef []DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef []DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef []SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef []TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef []ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef []DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef []VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	// Value reference to a JOURNEY or DEAD RUN. Provides an alternative way of identifying a Journey.
	JourneyDesignator []JourneyDesignator `xml:"JourneyDesignator,omitempty" json:"JourneyDesignator,omitempty"`
	ServiceDesignator []ServiceDesignator `xml:"ServiceDesignator,omitempty" json:"ServiceDesignator,omitempty"`
}

// JourneyDesignatorStructure represents the JourneyDesignatorStructure element
// Type for a value reference to a JOURNEY.
type JourneyDesignatorStructure struct {
	// Origin of Journey.
	FromPointRef *TimingPointRefStructure `xml:"FromPointRef,omitempty" json:"FromPointRef,omitempty"`
	// Destination of Journey.
	ToPointRef *TimingPointRefStructure `xml:"ToPointRef,omitempty" json:"ToPointRef,omitempty"`
	// Date of JOURNEY.
	Date *time.Time `xml:"Date,omitempty" json:"Date,omitempty"`
	// Time of departure of JOURNEY from POINT.
	DepartureTime *string `xml:"DepartureTime,omitempty" json:"DepartureTime,omitempty"`
	// Daya offset if Time of departure of JOURNEY from origin  POINT from current  OPERATING DAY.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Time of arrival of JOURNEY at destination POINT.
	ArrivalTime *string `xml:"ArrivalTime,omitempty" json:"ArrivalTime,omitempty"`
	// Daya offset if Time of arrival of JOURNEY at destination POINT.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	// Alternative ID for journey.
	AlternativeJourneyRef *string `xml:"AlternativeJourneyRef,omitempty" json:"AlternativeJourneyRef,omitempty"`
}

// ServiceDesignatorStructure represents the ServiceDesignatorStructure element
// Type for a value reference to a SERVICE JOURNEY.
type ServiceDesignatorStructure struct {
	// Origin of Journey.
	FromPointRef *ScheduledStopPointRefStructure `xml:"FromPointRef,omitempty" json:"FromPointRef,omitempty"`
	// Destination of Journey.
	ToPointRef *ScheduledStopPointRefStructure `xml:"ToPointRef,omitempty" json:"ToPointRef,omitempty"`
	// Date of JOURNEY.
	Date *time.Time `xml:"Date,omitempty" json:"Date,omitempty"`
	// Time of departure of JOURNEY from POINT.
	DepartureTime *string `xml:"DepartureTime,omitempty" json:"DepartureTime,omitempty"`
	// Daya offset if Time of departure of JOURNEY from origin  POINT from current  OPERATING DAY.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Time of arrival of JOURNEY at destination POINT.
	ArrivalTime *string `xml:"ArrivalTime,omitempty" json:"ArrivalTime,omitempty"`
	// Daya offset if Time of arrival of JOURNEY at destination POINT.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	// Alternative ID for journey.
	AlternativeJourneyRef *string `xml:"AlternativeJourneyRef,omitempty" json:"AlternativeJourneyRef,omitempty"`
}

// JourneyDesignator represents the JourneyDesignator element
// Value reference to a JOURNEY. Provides an alternative way of identifying a Journey between TIMING POINTS
type JourneyDesignator struct {
	JourneyDesignatorStructure
}

// ServiceDesignator represents the ServiceDesignator element
// Value reference to a SERVICE JOURNEY. Provides an alternative way of identifying a Journey between SCHEDULED STOP POINTS
type ServiceDesignator struct {
	ServiceDesignatorStructure
}

// ReasonForMeetingEnumeration represents the ReasonForMeetingEnumeration enumeration
// Allowed values for REASON FOR JOURNEY MEETING.
type ReasonForMeetingEnumeration string

const (
	// ReasonForMeetingEnumerationServiceFacility represents serviceFacility
	// INTERCHANGE is considered a possible connection between journeys.
	ReasonForMeetingEnumerationServiceFacility ReasonForMeetingEnumeration = "serviceFacility"
	// ReasonForMeetingEnumerationJoining represents joining
	// INTERCHANGE is advertised to public as a possible connection between journeys.
	ReasonForMeetingEnumerationJoining ReasonForMeetingEnumeration = "joining"
	// ReasonForMeetingEnumerationTariffSection represents tariffSection
	// INTERCHANGE is actively managed as a possible connection between journeys and passengers are informed of real-time alterations.
	ReasonForMeetingEnumerationTariffSection ReasonForMeetingEnumeration = "tariffSection"
	// ReasonForMeetingEnumerationSplitting represents splitting
	ReasonForMeetingEnumerationSplitting ReasonForMeetingEnumeration = "splitting"
)

// ConnectionCertaintyEnumeration represents the ConnectionCertaintyEnumeration enumeration
// Allowed values for  Guaranteed.
type ConnectionCertaintyEnumeration string

const (
	// ConnectionCertaintyEnumerationGuaranteed represents guaranteed
	// ERA X01: The connection is guaranteed under any circumstances.
	ConnectionCertaintyEnumerationGuaranteed ConnectionCertaintyEnumeration = "guaranteed"
	// ConnectionCertaintyEnumerationNormallyGuaranteed represents normallyGuaranteed
	// ERA X02: The connection is normally guaranteed, although the connection time available is shorter than the location connection time.
	ConnectionCertaintyEnumerationNormallyGuaranteed ConnectionCertaintyEnumeration = "normallyGuaranteed"
	// ConnectionCertaintyEnumerationNotGuaranteed represents notGuaranteed
	// ERA X03: The connection is not guaranteed, although the connection time available is longer than the location connection time.
	ConnectionCertaintyEnumerationNotGuaranteed ConnectionCertaintyEnumeration = "notGuaranteed"
	// ConnectionCertaintyEnumerationNeverGuaranteed represents neverGuaranteed
	// ERA X04: The connection is never guaranteed, although the connection time available is longer than the location connection time.
	ConnectionCertaintyEnumerationNeverGuaranteed ConnectionCertaintyEnumeration = "neverGuaranteed"
)

// JourneyMeetingRefStructure represents the JourneyMeetingRefStructure element
// Type for a reference to a JOURNEY MEETING.
type JourneyMeetingRefStructure struct {
	VersionOfObjectRefStructure
}

// InterchangeRefStructure represents the InterchangeRefStructure element
// Type for a reference to an INTERCHANGE.
type InterchangeRefStructure struct {
	VersionOfObjectRefStructure
}

// DefaultInterchangeRefStructure represents the DefaultInterchangeRefStructure element
// Type for a reference to a DEFAULT INTERCHANGE.
type DefaultInterchangeRefStructure struct {
	InterchangeRefStructure
}

// ServiceJourneyInterchangeRefStructure represents the ServiceJourneyInterchangeRefStructure element
// Type for a reference to a SERVICE JOURNEY INTERCHANGE.
type ServiceJourneyInterchangeRefStructure struct {
	InterchangeRefStructure
}

// ServiceJourneyPatternInterchangeRefStructure represents the ServiceJourneyPatternInterchangeRefStructure element
// Type for a reference to a SERVICE JOURNEY PATTERN INTERCHANGE.
type ServiceJourneyPatternInterchangeRefStructure struct {
	InterchangeRefStructure
}

// InterchangeRuleRefStructure represents the InterchangeRuleRefStructure element
// Type for a reference to an INTERCHANGE RULE.
type InterchangeRuleRefStructure struct {
	InterchangeRefStructure
}

// InterchangeRuleTimingRefStructure represents the InterchangeRuleTimingRefStructure element
// Type for a reference to an INTERCHANGE RULE TIMING.
type InterchangeRuleTimingRefStructure struct {
	JourneyTimingRefStructure
}

// JourneyMeetingRef represents the JourneyMeetingRef element
// Reference to a JOURNEY MEETING.
type JourneyMeetingRef struct {
	JourneyMeetingRefStructure
}

// InterchangeRef represents the InterchangeRef element
// Reference to an INTERCHANGE.
type InterchangeRef struct {
	InterchangeRefStructure
}

// DefaultInterchangeRef represents the DefaultInterchangeRef element
// Reference to a DEFAULT INTERCHANGE.
type DefaultInterchangeRef struct {
	DefaultInterchangeRefStructure
}

// ServiceJourneyInterchangeRef represents the ServiceJourneyInterchangeRef element
// Reference to a SERVICE JOURNEY INTERCHANGE.
type ServiceJourneyInterchangeRef struct {
	ServiceJourneyInterchangeRefStructure
}

// ServiceJourneyPatternInterchangeRef represents the ServiceJourneyPatternInterchangeRef element
// Reference to a SERVICE JOURNEY PATTERN INTERCHANGE.
type ServiceJourneyPatternInterchangeRef struct {
	ServiceJourneyPatternInterchangeRefStructure
}

// InterchangeRuleRef represents the InterchangeRuleRef element
// Reference to an INTERCHANGE RULE.
type InterchangeRuleRef struct {
	InterchangeRuleRefStructure
}

// InterchangeRuleTimingRef represents the InterchangeRuleTimingRef element
// Reference to an INTERCHANGE RULE TIMING.
type InterchangeRuleTimingRef struct {
	InterchangeRuleTimingRefStructure
}

// ServiceAlterationEnumeration represents the ServiceAlterationEnumeration enumeration
// Allowed values for Service Alteration.
type ServiceAlterationEnumeration string

const (
	// ServiceAlterationEnumerationExtraJourney represents extraJourney
	ServiceAlterationEnumerationExtraJourney ServiceAlterationEnumeration = "extraJourney"
	// ServiceAlterationEnumerationCancellation represents cancellation
	ServiceAlterationEnumerationCancellation ServiceAlterationEnumeration = "cancellation"
	// ServiceAlterationEnumerationPlanned represents planned
	ServiceAlterationEnumerationPlanned ServiceAlterationEnumeration = "planned"
	// ServiceAlterationEnumerationReplaced represents replaced
	ServiceAlterationEnumerationReplaced ServiceAlterationEnumeration = "replaced"
)

// ExplicitJourneyRefsRelStructure represents the explicitJourneyRefs_RelStructure element
// Type for a list of JOURNEYs.
type ExplicitJourneyRefsRelStructure struct {
	OneToManyRelationshipStructure
	TemplateServiceJourneyRef []TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef []ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef []DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef []VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
}

// ServiceJourneyRefStructure represents the ServiceJourneyRefStructure element
// Type for a reference to a SERVICE JOURNEY.
type ServiceJourneyRefStructure struct {
	JourneyRefStructure
}

// SpecialServiceRefStructure represents the SpecialServiceRefStructure element
// Type for a reference to a SPECIAL SERVICE.
type SpecialServiceRefStructure struct {
	JourneyRefStructure
}

// SpecialServiceRefsRelStructure represents the specialServiceRefs_RelStructure element
// Type for a list references to a SPECIAL SERVICE.
type SpecialServiceRefsRelStructure struct {
	OneToManyRelationshipStructure
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
}

// GroupOfServicesRefStructure represents the GroupOfServicesRefStructure element
// Type for a reference to a GROUP OF SERVICEs.
type GroupOfServicesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// GroupOfServicesRefsRelStructure represents the groupOfServicesRefs_RelStructure element
// Type for a list references to GROUP OF SERVICEs.
type GroupOfServicesRefsRelStructure struct {
	OneToManyRelationshipStructure
	GroupOfServicesRef []GroupOfServicesRef `xml:"GroupOfServicesRef" json:"GroupOfServicesRef"`
}

// ServiceJourneyRef represents the ServiceJourneyRef element
// Reference to a SERVICE JOURNEY.
type ServiceJourneyRef struct {
	ServiceJourneyRefStructure
}

// SpecialServiceRef represents the SpecialServiceRef element
// Reference to a SPECIAL SERVICE.
type SpecialServiceRef struct {
	SpecialServiceRefStructure
}

// GroupOfServicesRef represents the GroupOfServicesRef element
// Reference to a GROUP OF SERVICEs.
type GroupOfServicesRef struct {
	GroupOfServicesRefStructure
}

// TemplateVehicleJourneyTypeEnumeration represents the TemplateVehicleJourneyTypeEnumeration enumeration
// Allowed values for TEMPLATE VEHICLE JOURNEY type.
type TemplateVehicleJourneyTypeEnumeration string

const (
	// TemplateVehicleJourneyTypeEnumerationHeadway represents headway
	// INTERCHANGE is considered a possible connection between journeys.
	TemplateVehicleJourneyTypeEnumerationHeadway TemplateVehicleJourneyTypeEnumeration = "headway"
	// TemplateVehicleJourneyTypeEnumerationRhythmic represents rhythmic
	// INTERCHANGE is advertised to public as a possible connection between journeys.
	TemplateVehicleJourneyTypeEnumerationRhythmic TemplateVehicleJourneyTypeEnumeration = "rhythmic"
	// TemplateVehicleJourneyTypeEnumerationOther represents other
	TemplateVehicleJourneyTypeEnumerationOther TemplateVehicleJourneyTypeEnumeration = "other"
)

// HeadwayUseEnumeration represents the HeadwayUseEnumeration enumeration
// Allowed values for headway use.
type HeadwayUseEnumeration string

const (
	// HeadwayUseEnumerationDisplayPassingTimesOnly represents DisplayPassingTimesOnly
	HeadwayUseEnumerationDisplayPassingTimesOnly HeadwayUseEnumeration = "DisplayPassingTimesOnly"
	// HeadwayUseEnumerationDisplayAsWellAsPassingTimes represents DisplayAsWellAsPassingTimes
	HeadwayUseEnumerationDisplayAsWellAsPassingTimes HeadwayUseEnumeration = "DisplayAsWellAsPassingTimes"
	// HeadwayUseEnumerationDisplayInsteadOfPassingTimes represents DisplayInsteadOfPassingTimes
	HeadwayUseEnumerationDisplayInsteadOfPassingTimes HeadwayUseEnumeration = "DisplayInsteadOfPassingTimes"
)

// TemplateServiceJourneyRefStructure represents the TemplateServiceJourneyRefStructure element
// Type for a reference to a TEMPLATE VEHICLE JOURNEY.
type TemplateServiceJourneyRefStructure struct {
	ServiceJourneyRefStructure
}

// JourneyFrequencyGroupRefStructure represents the JourneyFrequencyGroupRefStructure element
// Type for a reference to a JOURNEY FREQUENCY GROUP.
type JourneyFrequencyGroupRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// HeadwayJourneyGroupRefStructure represents the HeadwayJourneyGroupRefStructure element
// Type for a reference to a HEADWAY JOURNEY GROUP.
type HeadwayJourneyGroupRefStructure struct {
	JourneyFrequencyGroupRefStructure
}

// RhythmicalJourneyGroupRefStructure represents the RhythmicalJourneyGroupRefStructure element
// Type for a reference to a RHYTHMICAL JOURNEY GROUP.
type RhythmicalJourneyGroupRefStructure struct {
	JourneyFrequencyGroupRefStructure
}

// TemplateServiceJourneyRef represents the TemplateServiceJourneyRef element
// Reference to a TEMPLATE VEHICLE JOURNEY.
type TemplateServiceJourneyRef struct {
	TemplateServiceJourneyRefStructure
}

// JourneyFrequencyGroupRef represents the JourneyFrequencyGroupRef element
// Reference to a JOURNEY FREQUENCY GROUP.
type JourneyFrequencyGroupRef struct {
	JourneyFrequencyGroupRefStructure
}

// HeadwayJourneyGroupRef represents the HeadwayJourneyGroupRef element
// Reference to a HEADWAY JOURNEY GROUP.
type HeadwayJourneyGroupRef struct {
	HeadwayJourneyGroupRefStructure
}

// RhythmicalJourneyGroupRef represents the RhythmicalJourneyGroupRef element
// Reference to a RHYTHMICAL JOURNEY GROUP.
type RhythmicalJourneyGroupRef struct {
	RhythmicalJourneyGroupRefStructure
}

// FrequencyGroupsInFrameRelStructure represents the frequencyGroupsInFrame_RelStructure element
// Type for containment in frame of  OURNEY FREQUENCY GROUPs.
type FrequencyGroupsInFrameRelStructure struct {
	ContainmentAggregationStructure
	HeadwayJourneyGroup []HeadwayJourneyGroup `xml:"HeadwayJourneyGroup,omitempty" json:"HeadwayJourneyGroup,omitempty"`
	RhythmicalJourneyGroup []RhythmicalJourneyGroup `xml:"RhythmicalJourneyGroup,omitempty" json:"RhythmicalJourneyGroup,omitempty"`
}

// FrequencyStructure represents the FrequencyStructure element
// Type for a HEADWAY INTERVAL.
type FrequencyStructure struct {
	// Scheduled normal headway interval.
	ScheduledHeadwayInterval *string `xml:"ScheduledHeadwayInterval,omitempty" json:"ScheduledHeadwayInterval,omitempty"`
	// Minimum headway interval.
	MinimumHeadwayInterval *string `xml:"MinimumHeadwayInterval,omitempty" json:"MinimumHeadwayInterval,omitempty"`
	// Maximum headway interval.
	MaximumHeadwayInterval *string `xml:"MaximumHeadwayInterval,omitempty" json:"MaximumHeadwayInterval,omitempty"`
	// Use to be made of Headway information when displaying to public. Default is Display Instead of Passing Times.
	HeadwayDisplay *HeadwayUseEnumeration `xml:"HeadwayDisplay,omitempty" json:"HeadwayDisplay,omitempty"`
	// Whether service falls under regulations for frequency service.
	FrequencyRegulated *bool `xml:"FrequencyRegulated,omitempty" json:"FrequencyRegulated,omitempty"`
	// Descriptive phrase to use for frequency. e.g. "Every x minus"  If not specified generate from individual elements.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
}

// VehicleJourneyHeadwaysRelStructure represents the vehicleJourneyHeadways_RelStructure element
// Type for a list of a VEHICLE JOURNEY FREQUENCies.
type VehicleJourneyHeadwaysRelStructure struct {
	StrictContainmentAggregationStructure
	// VEHICLE JOURNEY FREQUENCY for a specified TIME DEMAND TYPE.
	VehicleJourneyHeadway []VehicleJourneyHeadway `xml:"VehicleJourneyHeadway" json:"VehicleJourneyHeadway"`
}

// VehicleJourneyHeadwayVersionedChildStructure represents the VehicleJourneyHeadway_VersionedChildStructure element
// Type for a VEHICLE JOURNEY FREQUENCY.
type VehicleJourneyHeadwayVersionedChildStructure struct {
	JourneyHeadwayVersionedChildStructure
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	TimingPointInJourneyPatternRef *TimingPointInJourneyPatternRef `xml:"TimingPointInJourneyPatternRef,omitempty" json:"TimingPointInJourneyPatternRef,omitempty"`
}

// FrequencyGroupsRelStructure represents the frequencyGroups_RelStructure element
// Type for a list of a VEHICLE JOURNEY FREQUENCies.
type FrequencyGroupsRelStructure struct {
	ContainmentAggregationStructure
	HeadwayJourneyGroupRef []HeadwayJourneyGroupRef `xml:"HeadwayJourneyGroupRef,omitempty" json:"HeadwayJourneyGroupRef,omitempty"`
	// A group of VEHICLE JOURNEYs following the same JOURNEY PATTERN having the same HEADWAY INTERVAL between a specified start and end time (for example, every 10 min). This is especially useful for passenger information.
	HeadwayJourneyGroup []HeadwayJourneyGroup `xml:"HeadwayJourneyGroup,omitempty" json:"HeadwayJourneyGroup,omitempty"`
	RhythmicalJourneyGroupRef []RhythmicalJourneyGroupRef `xml:"RhythmicalJourneyGroupRef,omitempty" json:"RhythmicalJourneyGroupRef,omitempty"`
	RhythmicalJourneyGroup []RhythmicalJourneyGroup `xml:"RhythmicalJourneyGroup,omitempty" json:"RhythmicalJourneyGroup,omitempty"`
}

// JourneyFrequencyGroupVersionStructure represents the JourneyFrequencyGroup_VersionStructure element
// Type for   JOURNEY FREQUENCY GROUP.
type JourneyFrequencyGroupVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Time of first departure in JOURNEY FREQUENCY GROUP.
	FirstDepartureTime string `xml:"FirstDepartureTime" json:"FirstDepartureTime"`
	// Offset days for end time. Number of days after the starting operational day if journey if  not same calendar day. Default is 0 for same day.
	FirstDayOffset *int `xml:"FirstDayOffset,omitempty" json:"FirstDayOffset,omitempty"`
	// Time of last departure in JOURNEY FREQUENCY GROUP.
	LastDepartureTime *string `xml:"LastDepartureTime,omitempty" json:"LastDepartureTime,omitempty"`
	// Offset days for end time. Number of days after the starting departure time of the journey if  not same calendar day. Default is 0 for same day.
	LastDayOffset *int `xml:"LastDayOffset,omitempty" json:"LastDayOffset,omitempty"`
	// TIME DEMAND TYPES associated with JOURNEY FREQUENCY GROUP.
	TimeDemandTypes *TimeDemandTypeRefsRelStructure `xml:"timeDemandTypes,omitempty" json:"timeDemandTypes,omitempty"`
	// TIME DEMAND TYPES associated with JOURNEY FREQUENCY GROUP.
	Journeys *ExplicitJourneyRefsRelStructure `xml:"journeys,omitempty" json:"journeys,omitempty"`
}

// HeadwayJourneyGroupVersionStructure represents the HeadwayJourneyGroup_VersionStructure element
// Type for HEADWAY JOURNEY GROUP.
type HeadwayJourneyGroupVersionStructure struct {
	JourneyFrequencyGroupVersionStructure
	// Scheduled normal headway interval.
	ScheduledHeadwayInterval *string `xml:"ScheduledHeadwayInterval,omitempty" json:"ScheduledHeadwayInterval,omitempty"`
	// Minimum headway interval.
	MinimumHeadwayInterval *string `xml:"MinimumHeadwayInterval,omitempty" json:"MinimumHeadwayInterval,omitempty"`
	// Maximum headway interval.
	MaximumHeadwayInterval *string `xml:"MaximumHeadwayInterval,omitempty" json:"MaximumHeadwayInterval,omitempty"`
	// How headway value should be displayed to public.
	HeadwayDisplay *HeadwayUseEnumeration `xml:"HeadwayDisplay,omitempty" json:"HeadwayDisplay,omitempty"`
}

// RhythmicalJourneyGroupVersionStructure represents the RhythmicalJourneyGroup_VersionStructure element
// Type for   Rhythmical JOURNEY GROUP.
type RhythmicalJourneyGroupVersionStructure struct {
	JourneyFrequencyGroupVersionStructure
	// TIMEBANDS associated with JOURNEY FREQUENCY GROUP.
	Timebands *TimebandRefsRelStructure `xml:"timebands,omitempty" json:"timebands,omitempty"`
}

// VehicleJourneyHeadway represents the VehicleJourneyHeadway element
// Headway interval information that is available for a VEHICLE JOURNEY (to be understood as the delay between the previous and the next VEHICLE JOURNEY). This information must be consistent with HEADWAY JOURNEY GROUP if available (HEADWAY JOURNEY GROUP being a more detailed way of describing headway services).
type VehicleJourneyHeadway struct {
	VehicleJourneyHeadwayVersionedChildStructure
}

// JourneyFrequencyGroup represents the JourneyFrequencyGroup element
// A group of JOURNEYs defined in order to describe special behaviour like frequency based services or rhythmical services (runs all xxh10, xxh25 and xxh45... for example; this is especially useful for passenger information).
type JourneyFrequencyGroup struct {
	JourneyFrequencyGroupVersionStructure
}

// HeadwayJourneyGroup represents the HeadwayJourneyGroup element
// A group of VEHICLE JOURNEYs following the same JOURNEY PATTERN and having the same headway interval between a specified start and end time (for example, ‘every 10 minutes’). This is especially useful for presenting passenger information.
type HeadwayJourneyGroup struct {
	HeadwayJourneyGroupVersionStructure
}

// RhythmicalJourneyGroup represents the RhythmicalJourneyGroup element
// A group of VEHICLE JOURNEYS following  the same JOURNEY PATTERN having the same "rhythm" every hour (for example runs all xxh10, xxh25 and xxh45... e) between a specified start and end time.
type RhythmicalJourneyGroup struct {
	RhythmicalJourneyGroupVersionStructure
}

// JourneyMeetingsInFrameRelStructure represents the journeyMeetingsInFrame_RelStructure element
// Type for containment in frame of  JOURNEY MEETINGs.
type JourneyMeetingsInFrameRelStructure struct {
	ContainmentAggregationStructure
	JourneyMeeting []JourneyMeeting `xml:"JourneyMeeting" json:"JourneyMeeting"`
}

// JourneyInterchangesInFrameRelStructure represents the journeyInterchangesInFrame_RelStructure element
// Type for containment in frame of  JOURNEY  INTERCHANGEs.
type JourneyInterchangesInFrameRelStructure struct {
	ContainmentAggregationStructure
	ServiceJourneyPatternInterchange []ServiceJourneyPatternInterchange `xml:"ServiceJourneyPatternInterchange,omitempty" json:"ServiceJourneyPatternInterchange,omitempty"`
	ServiceJourneyInterchange []ServiceJourneyInterchange `xml:"ServiceJourneyInterchange,omitempty" json:"ServiceJourneyInterchange,omitempty"`
}

// DefaultInterchangesInFrameRelStructure represents the defaultInterchangesInFrame_RelStructure element
// Type for containment in frame of  DEFAULT INTERCHANGEs.
type DefaultInterchangesInFrameRelStructure struct {
	ContainmentAggregationStructure
	DefaultInterchange []DefaultInterchange `xml:"DefaultInterchange" json:"DefaultInterchange"`
}

// JourneyMeetingVersionStructure represents the JourneyMeeting_VersionStructure element
// Type for JOURNEY MEETING.
type JourneyMeetingVersionStructure struct {
	DataManagedObjectStructure
	// Name of Journey meeting.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// SCHEDULED STOP POINT at which JOURNEY MEETING takes place.
	AtStopPointRef *ScheduledStopPointRefStructure `xml:"AtStopPointRef,omitempty" json:"AtStopPointRef,omitempty"`
	// VEHICLE JOURNEY that feeds JOURNEY MEETING.
	FromJourneyRef VehicleJourneyRefStructure `xml:"FromJourneyRef" json:"FromJourneyRef"`
	// VEHICLE JOURNEY  that distributes from JOURNEY MEETING.
	ToJourneyRef VehicleJourneyRefStructure `xml:"ToJourneyRef" json:"ToJourneyRef"`
	// POINT IN JOURNEY PATTERN ofr  feeder  journey JOURNEY PATTERN.
	FromPointInJourneyPatternRef *PointInJourneyPatternRefStructure `xml:"FromPointInJourneyPatternRef,omitempty" json:"FromPointInJourneyPatternRef,omitempty"`
	// POINT IN JOURNEY PATTERN ofr  distributorjourney JOURNEY PATTERN.
	ToPointInJourneyPatternRef *PointInJourneyPatternRefStructure `xml:"ToPointInJourneyPatternRef,omitempty" json:"ToPointInJourneyPatternRef,omitempty"`
	// Description of JOURNEY MEETING.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Earliest time for JOURNEY MEETING.
	EarliestTime *string `xml:"EarliestTime,omitempty" json:"EarliestTime,omitempty"`
	// Earliest time Day Offset from start of FROM JOURNEY.
	EarliestTimeDayOffset *int `xml:"EarliestTimeDayOffset,omitempty" json:"EarliestTimeDayOffset,omitempty"`
	// Latest time for JOURNEY MEETING.
	LatestTime *string `xml:"LatestTime,omitempty" json:"LatestTime,omitempty"`
	// Latest time Day Offset from start of FROM JOURNEY.
	LatestTimeDayOffset *int `xml:"LatestTimeDayOffset,omitempty" json:"LatestTimeDayOffset,omitempty"`
	// Reason for JOURNEY MEETING.
	Reason *ReasonForMeetingEnumeration `xml:"Reason,omitempty" json:"Reason,omitempty"`
	// Reference to CONNECTION at which JOURNEY MEETING takes place.
	ConnectionRef *ConnectionRefStructure `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	// SCHEDULED STOP POINT  to which JOURNEY MEETING connects if different from current stop interchange.
	ConnectingStopPointRef []ScheduledStopPointRefStructure `xml:"ConnectingStopPointRef,omitempty" json:"ConnectingStopPointRef,omitempty"`
	// Name of CONNETCING STOP POINT.
	ConnectingStopPointName []MultilingualString `xml:"ConnectingStopPointName,omitempty" json:"ConnectingStopPointName,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ConnectingJourneyView *ConnectingJourneyView `xml:"ConnectingJourneyView,omitempty" json:"ConnectingJourneyView,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	// Simplified view of connecting LINE.
	ConnectingLineView *LineDerivedViewStructure `xml:"ConnectingLineView,omitempty" json:"ConnectingLineView,omitempty"`
}

// DefaultInterchangeVersionStructure represents the DefaultInterchange_VersionStructure element
// Type for DEFAULT INTERCHANGE.
type DefaultInterchangeVersionStructure struct {
	DataManagedObjectStructure
	// SCHEDULED STOP POINT feeding INTERCHANGE. If absent apply to all STOP POINTs.
	FromStopPointRef *ScheduledStopPointRefStructure `xml:"FromStopPointRef,omitempty" json:"FromStopPointRef,omitempty"`
	// SCHEDULED STOP POINT distributing from INTERCHANGE. If absent apply to all STOP POINTs.
	ToStopPointRef *ScheduledStopPointRefStructure `xml:"ToStopPointRef,omitempty" json:"ToStopPointRef,omitempty"`
	// Description of INTERCHANGE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Standard wait time for INTERCHANGE.
	StandardWaitTime *string `xml:"StandardWaitTime,omitempty" json:"StandardWaitTime,omitempty"`
	// Maximum wait time for INTERCHANGE.
	MaximumWaitTime *string `xml:"MaximumWaitTime,omitempty" json:"MaximumWaitTime,omitempty"`
	// Maximum automatic wait time for INTERCHANGE.
	MaximumAutomaticWaitTime *string `xml:"MaximumAutomaticWaitTime,omitempty" json:"MaximumAutomaticWaitTime,omitempty"`
	// Standard transfer  duration for INTERCHANGE.
	StandardTransferTime *string `xml:"StandardTransferTime,omitempty" json:"StandardTransferTime,omitempty"`
	// Maximum transfer duration for INTERCHANGE.
	MinimumTransferTime *string `xml:"MinimumTransferTime,omitempty" json:"MinimumTransferTime,omitempty"`
	// Maximum transfer duration for INTERCHANGE.
	MaximumTransferTime *string `xml:"MaximumTransferTime,omitempty" json:"MaximumTransferTime,omitempty"`
}

// InterchangeVersionStructure represents the Interchange_VersionStructure element
// Type for INTERCHANGE.
type InterchangeVersionStructure struct {
	DataManagedObjectStructure
	// Name of INTERCHANGE RULE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of SCHEDULED STOP POINT feeding INTERCHANGE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// An alternative  code that uniquely identifies the INTERCHANGE. Specifically for use in AVMS systems. For VDV compatibility.
	ExternalInterchangeRef *ExternalObjectRefStructure `xml:"ExternalInterchangeRef,omitempty" json:"ExternalInterchangeRef,omitempty"`
	// Reference to a CONNECTION Link over which the INTERCHANEG takes place.
	ConnectionRef *ConnectionRefStructure `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	// Priority to assign to this INTERCHANGE.
	Priority *int `xml:"Priority,omitempty" json:"Priority,omitempty"`
	// Whether the passenger can remain in vehicle (i.e. block linking). Default is false: the passenger must change vehicles for this INTERCHANGE.
	// Default is false.
	StaySeated *bool `xml:"StaySeated,omitempty" json:"StaySeated,omitempty"`
	// Whether INTERCHANGE  involves crossing an international border.
	//  Default is false.
	CrossBorder *bool `xml:"CrossBorder,omitempty" json:"CrossBorder,omitempty"`
	// Whether INTERCHANGE is planned in a timetable. Default is true.
	Planned *bool `xml:"Planned,omitempty" json:"Planned,omitempty"`
	// Whether INTERCHANGE is guaranteed. Default is false.
	Guaranteed *bool `xml:"Guaranteed,omitempty" json:"Guaranteed,omitempty"`
	// Whether INTERCHANGE is advertised as an interchange. Default is true.
	Advertised *bool `xml:"Advertised,omitempty" json:"Advertised,omitempty"`
	// Whether INTERCHANGE  is controlled in real-time. Default is true.
	Controlled *bool `xml:"Controlled,omitempty" json:"Controlled,omitempty"`
	// Nature of gurantee to  conenction.
	ConnectionCertainty *ConnectionCertaintyEnumeration `xml:"ConnectionCertainty,omitempty" json:"ConnectionCertainty,omitempty"`
	// Standard wait time for INTERCHANGE.
	StandardWaitTime *string `xml:"StandardWaitTime,omitempty" json:"StandardWaitTime,omitempty"`
	// Maximum wait time for INTERCHANGE.
	MaximumWaitTime *string `xml:"MaximumWaitTime,omitempty" json:"MaximumWaitTime,omitempty"`
	// Maximum automatic wait time for INTERCHANGE.
	MaximumAutomaticWaitTime *string `xml:"MaximumAutomaticWaitTime,omitempty" json:"MaximumAutomaticWaitTime,omitempty"`
	// Standard transfer  duration for INTERCHANGE.
	StandardTransferTime *string `xml:"StandardTransferTime,omitempty" json:"StandardTransferTime,omitempty"`
	// Maximum transfer duration for INTERCHANGE.
	MinimumTransferTime *string `xml:"MinimumTransferTime,omitempty" json:"MinimumTransferTime,omitempty"`
	// Maximum transfer duration for INTERCHANGE.
	MaximumTransferTime *string `xml:"MaximumTransferTime,omitempty" json:"MaximumTransferTime,omitempty"`
	// Interval before CONTROL CENTRE should be notified associated with  SERVICE JOURNEY INTERCHANGE.
	ControlCentreNotifyThreshold *string `xml:"ControlCentreNotifyThreshold,omitempty" json:"ControlCentreNotifyThreshold,omitempty"`
	// ACCESS MODES by which the transfer can be made.
	TransferModes *AccessModeEnumeration `xml:"transferModes,omitempty" json:"transferModes,omitempty"`
	// NOTICEs of an interchange.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// ServiceJourneyInterchangesRelStructure represents the serviceJourneyInterchanges_RelStructure element
// Type for a list of SERVICE JOURNEY INTERCHANGE.
type ServiceJourneyInterchangesRelStructure struct {
	StrictContainmentAggregationStructure
	ServiceJourneyInterchangeRef []ServiceJourneyInterchangeRef `xml:"ServiceJourneyInterchangeRef,omitempty" json:"ServiceJourneyInterchangeRef,omitempty"`
	ServiceJourneyInterchange []ServiceJourneyInterchange `xml:"ServiceJourneyInterchange,omitempty" json:"ServiceJourneyInterchange,omitempty"`
	ServiceJourneyInterchangeView []ServiceJourneyInterchangeView `xml:"ServiceJourneyInterchangeView,omitempty" json:"ServiceJourneyInterchangeView,omitempty"`
}

// ServiceJourneyInterchangeVersionStructure represents the ServiceJourneyInterchange_VersionStructure element
// Type for SERVICE JOURNEY INTERCHANGE.
type ServiceJourneyInterchangeVersionStructure struct {
	InterchangeVersionStructure
	// SCHEDULED STOP POINT feeding INTERCHANGE.
	FromPointRef *ScheduledStopPointRefStructure `xml:"FromPointRef,omitempty" json:"FromPointRef,omitempty"`
	// Visit number to distinguish which visit to FROM SCHEDULED STOP POINT this is. Default is one. Only needed for circular routes with connections at the same stop on different visits.
	FromVisitNumber *int `xml:"FromVisitNumber,omitempty" json:"FromVisitNumber,omitempty"`
	// SCHEDULED STOP POINT distributing from INTERCHANGE.
	ToPointRef *ScheduledStopPointRefStructure `xml:"ToPointRef,omitempty" json:"ToPointRef,omitempty"`
	// Visit number to distinguish which visit to TO SCHEDULED STOP POINT  this is. Default is one. Only needed for circular routes with connections at the same stop on different visits.
	ToVisitNumber *int `xml:"ToVisitNumber,omitempty" json:"ToVisitNumber,omitempty"`
	// VEHICLE JOURNEY that feeds the INTERCHANGE.
	FromJourneyRef VehicleJourneyRefStructure `xml:"FromJourneyRef" json:"FromJourneyRef"`
	// VEHICLE JOURNEY that distributes from the INTERCHANGE.
	ToJourneyRef VehicleJourneyRefStructure `xml:"ToJourneyRef" json:"ToJourneyRef"`
	ServiceJourneyPatternInterchangeRef *ServiceJourneyPatternInterchangeRef `xml:"ServiceJourneyPatternInterchangeRef,omitempty" json:"ServiceJourneyPatternInterchangeRef,omitempty"`
}

// ServiceJourneyPatternInterchangeVersionStructure represents the ServiceJourneyPatternInterchange_VersionStructure element
// Type for SERVICE JOURNEY PATTERN INTERCHANGE.
type ServiceJourneyPatternInterchangeVersionStructure struct {
	InterchangeVersionStructure
	// SCHEDULED STOP POINT feeding INTERCHANGE.
	FromPointRef ScheduledStopPointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// Visit number to distinguish which visit to FROM SCHEDULED STOP POINT this is. Default is one. Only needed for circular routes with connections at the same stop on different visits.
	FromVisitNumber *int `xml:"FromVisitNumber,omitempty" json:"FromVisitNumber,omitempty"`
	// SCHEDULED STOP POINT distributing from INTERCHANGE.
	ToPointRef ScheduledStopPointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
	// Visit number to distinguish which visit to TO SCHEDULED STOP POINT  this is. Default is one. Only needed for circular routes with connections at the same stop on different visits.
	ToVisitNumber *int `xml:"ToVisitNumber,omitempty" json:"ToVisitNumber,omitempty"`
	// JOURNEY PATTERN that feeds INTERCHANGE.
	FromJourneyPatternRef JourneyPatternRefStructure `xml:"FromJourneyPatternRef" json:"FromJourneyPatternRef"`
	// JOURNEY PATTERN that distributes from INTERCHANGE.
	ToJourneyPatternRef JourneyPatternRefStructure `xml:"ToJourneyPatternRef" json:"ToJourneyPatternRef"`
}

// JourneyMeetingViewsRelStructure represents the journeyMeetingViews_RelStructure element
// Type for a list of  JOURNEY MEETING VIEWs.
type JourneyMeetingViewsRelStructure struct {
	StrictContainmentAggregationStructure
	JourneyMeetingRef []JourneyMeetingRef `xml:"JourneyMeetingRef,omitempty" json:"JourneyMeetingRef,omitempty"`
	JourneyMeetingView []JourneyMeetingView `xml:"JourneyMeetingView,omitempty" json:"JourneyMeetingView,omitempty"`
}

// JourneyMeetingDerivedViewStructure represents the JourneyMeeting_DerivedViewStructure element
// Type for JOURNEY MEETING VIEW.
type JourneyMeetingDerivedViewStructure struct {
	DerivedViewStructure
	JourneyMeetingRef *JourneyMeetingRef `xml:"JourneyMeetingRef,omitempty" json:"JourneyMeetingRef,omitempty"`
	// Description of JOURNEY MEETING.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Earliest time for JOURNEY MEETING.
	EarliestTime *string `xml:"EarliestTime,omitempty" json:"EarliestTime,omitempty"`
	// Earliest time Day Offset from start of FROM JOURNEY.
	EarliestTimeDayOffset *int `xml:"EarliestTimeDayOffset,omitempty" json:"EarliestTimeDayOffset,omitempty"`
	// Latest time for JOURNEY MEETING.
	LatestTime *string `xml:"LatestTime,omitempty" json:"LatestTime,omitempty"`
	// Latest time Day Offset from start of FROM JOURNEY.
	LatestTimeDayOffset *int `xml:"LatestTimeDayOffset,omitempty" json:"LatestTimeDayOffset,omitempty"`
	// Reason for JOURNEY MEETING.
	Reason *ReasonForMeetingEnumeration `xml:"Reason,omitempty" json:"Reason,omitempty"`
	// Maximum wait time for JOURNEY MEETING.
	MaximumWaitTime *string `xml:"MaximumWaitTime,omitempty" json:"MaximumWaitTime,omitempty"`
	// Reference to CONNECTION at which JOURNEY MEETING takes place.
	ConnectionRef *ConnectionRefStructure `xml:"ConnectionRef,omitempty" json:"ConnectionRef,omitempty"`
	// SCHEDULED STOP POINT  to which JOURNEY MEETING connects if different from current stop interchange.
	ConnectingStopPointRef []ScheduledStopPointRefStructure `xml:"ConnectingStopPointRef,omitempty" json:"ConnectingStopPointRef,omitempty"`
	// Name of CONNETCING STOP POINT.
	ConnectingStopPointName []MultilingualString `xml:"ConnectingStopPointName,omitempty" json:"ConnectingStopPointName,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	ConnectingJourneyView *ConnectingJourneyView `xml:"ConnectingJourneyView,omitempty" json:"ConnectingJourneyView,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	// Simplified view of connecting LINE.
	ConnectingLineView *LineDerivedViewStructure `xml:"ConnectingLineView,omitempty" json:"ConnectingLineView,omitempty"`
	// Whether the passenger can remain in vehicle (i.e. block linking). Default is false: the passenger must change vehicles for this INTERCHANGE.
	// Default is false.
	StaySeated *bool `xml:"StaySeated,omitempty" json:"StaySeated,omitempty"`
	// Whether INTERCHANGE  involves crossing an international border.
	//  Default is false.
	CrossBorder *bool `xml:"CrossBorder,omitempty" json:"CrossBorder,omitempty"`
	// Whether INTERCHANGE is planned in a timetable. Default is true.
	Planned *bool `xml:"Planned,omitempty" json:"Planned,omitempty"`
	// Whether INTERCHANGE is guaranteed. Default is false.
	Guaranteed *bool `xml:"Guaranteed,omitempty" json:"Guaranteed,omitempty"`
	// Whether INTERCHANGE is advertised as an interchange. Default is true.
	Advertised *bool `xml:"Advertised,omitempty" json:"Advertised,omitempty"`
	// Whether INTERCHANGE  is controlled in real-time. Default is true.
	Controlled *bool `xml:"Controlled,omitempty" json:"Controlled,omitempty"`
	// Nature of gurantee to  conenction.
	ConnectionCertainty *ConnectionCertaintyEnumeration `xml:"ConnectionCertainty,omitempty" json:"ConnectionCertainty,omitempty"`
	// Timings for the transfer.
	TransferDuration *TransferDurationStructure `xml:"TransferDuration,omitempty" json:"TransferDuration,omitempty"`
}

// ServiceJourneyInterchangeDerivedViewStructure represents the ServiceJourneyInterchange_DerivedViewStructure element
// Type for SERVICE JOURNEY INTERCHANGE VIEW.
type ServiceJourneyInterchangeDerivedViewStructure struct {
	DerivedViewStructure
	ServiceJourneyInterchangeRef *ServiceJourneyInterchangeRef `xml:"ServiceJourneyInterchangeRef,omitempty" json:"ServiceJourneyInterchangeRef,omitempty"`
	// Description of SCHEDULED STOP POINT feeding INTERCHANGE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Whether the passenger can remain in vehicle (i.e. block linking). Default is false: the passenger must change vehicles for this INTERCHANGE.
	// Default is false.
	StaySeated *bool `xml:"StaySeated,omitempty" json:"StaySeated,omitempty"`
	// Whether INTERCHANGE  involves crossing an international border.
	//  Default is false.
	CrossBorder *bool `xml:"CrossBorder,omitempty" json:"CrossBorder,omitempty"`
	// Whether INTERCHANGE is planned in a timetable. Default is true.
	Planned *bool `xml:"Planned,omitempty" json:"Planned,omitempty"`
	// Whether INTERCHANGE is guaranteed. Default is false.
	Guaranteed *bool `xml:"Guaranteed,omitempty" json:"Guaranteed,omitempty"`
	// Whether INTERCHANGE is advertised as an interchange. Default is true.
	Advertised *bool `xml:"Advertised,omitempty" json:"Advertised,omitempty"`
	// Whether INTERCHANGE  is controlled in real-time. Default is true.
	Controlled *bool `xml:"Controlled,omitempty" json:"Controlled,omitempty"`
	// Nature of gurantee to  conenction.
	ConnectionCertainty *ConnectionCertaintyEnumeration `xml:"ConnectionCertainty,omitempty" json:"ConnectionCertainty,omitempty"`
	// NOTICEs of an interchange.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// VEHICLE JOURNEY that feeds the INTERCHANGE.
	ConnectingJourneyRef *VehicleJourneyRefStructure `xml:"ConnectingJourneyRef,omitempty" json:"ConnectingJourneyRef,omitempty"`
	ConnectingJourneyView *ConnectingJourneyView `xml:"ConnectingJourneyView,omitempty" json:"ConnectingJourneyView,omitempty"`
	// Simplified view of connecting LINE.
	ConnectingLineView *LineDerivedViewStructure `xml:"ConnectingLineView,omitempty" json:"ConnectingLineView,omitempty"`
	// Standard wait time for INTERCHANGE.
	StandardWaitTime *string `xml:"StandardWaitTime,omitempty" json:"StandardWaitTime,omitempty"`
	// Maximum wait time for INTERCHANGE.
	MaximumWaitTime *string `xml:"MaximumWaitTime,omitempty" json:"MaximumWaitTime,omitempty"`
	// Maximum automatic wait time for INTERCHANGE.
	MaximumAutomaticWaitTime *string `xml:"MaximumAutomaticWaitTime,omitempty" json:"MaximumAutomaticWaitTime,omitempty"`
	// Standard transfer  duration for INTERCHANGE.
	StandardTransferTime *string `xml:"StandardTransferTime,omitempty" json:"StandardTransferTime,omitempty"`
	// Maximum transfer duration for INTERCHANGE.
	MinimumTransferTime *string `xml:"MinimumTransferTime,omitempty" json:"MinimumTransferTime,omitempty"`
	// Maximum transfer duration for INTERCHANGE.
	MaximumTransferTime *string `xml:"MaximumTransferTime,omitempty" json:"MaximumTransferTime,omitempty"`
	// Interval before CONTROL CENTRE should be notified associated with  SERVICE JOURNEY INTERCHANGE.
	ControlCentreNotifyThreshold *string `xml:"ControlCentreNotifyThreshold,omitempty" json:"ControlCentreNotifyThreshold,omitempty"`
}

// ConnectingJourneyDerivedViewStructure represents the ConnectingJourney_DerivedViewStructure element
// Type for CONNECTING JOURNEY VIEW.
type ConnectingJourneyDerivedViewStructure struct {
	DerivedViewStructure
	// Service Journey to which srevice connects.
	ServiceJourneyRef ServiceJourneyRefStructure `xml:"ServiceJourneyRef" json:"ServiceJourneyRef"`
	// Time of Departure.
	DepartureTime *string `xml:"DepartureTime,omitempty" json:"DepartureTime,omitempty"`
	// Frequency of departure.
	Frequency *FrequencyStructure `xml:"Frequency,omitempty" json:"Frequency,omitempty"`
	// Name of journey.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	DestinationDisplayView *DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	// Reference to a JOURNEY PATTERN.
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	// Order of Point within Connecting journey as an absolute number.
	ConnectingOrder *int `xml:"ConnectingOrder,omitempty" json:"ConnectingOrder,omitempty"`
	// Order of Point within Connecting as number of visits to the same stop.  Default is 1.
	ConnectingVisitNumber *int `xml:"ConnectingVisitNumber,omitempty" json:"ConnectingVisitNumber,omitempty"`
}

// JourneyMeeting represents the JourneyMeeting element
// A time constraint for one or several SERVICE JOURNEYs fixing interchanges between them and/or an external event (e.g. arrival or departure of a feeder line, opening time of the theatre, etc.).
type JourneyMeeting struct {
	JourneyMeetingVersionStructure
}

// DefaultInterchange represents the DefaultInterchange element
// A quality parameter fixing the acceptable duration (standard and maximum) for an INTERCHANGE to be planned between two SCHEDULED STOP POINTs. This parameter will be used to control whether any two VEHICLE JOURNEYs serving those points may be in connection.
type DefaultInterchange struct {
	DefaultInterchangeVersionStructure
}

// ServiceJourneyInterchange represents the ServiceJourneyInterchange element
// The scheduled possibility for transfer of passengers between two SERVICE JOURNEYs at the same or different STOP POINTs.
type ServiceJourneyInterchange struct {
	ServiceJourneyInterchangeVersionStructure
}

// ServiceJourneyPatternInterchange represents the ServiceJourneyPatternInterchange element
// A recognised/organised possibility for passengers to change public transport vehicles using two STOP POINTs (which may be identical) on two particular SERVICE JOURNEY PATTERNs, including the maximum wait duration allowed and the standard to be aimed at. These may supersede the times given for the DEFAULT INTERCHANGE. Schedulers may use this entity for synchronisation of journeys.
type ServiceJourneyPatternInterchange struct {
	ServiceJourneyPatternInterchangeVersionStructure
}

// JourneyMeetingView represents the JourneyMeetingView element
// Simplified  view of JOURNEY MEETING.
type JourneyMeetingView struct {
	JourneyMeetingDerivedViewStructure
}

// ServiceJourneyInterchangeView represents the ServiceJourneyInterchangeView element
// Simplified  view of SERVICE JOURNEY INTERCHANGE.
type ServiceJourneyInterchangeView struct {
	ServiceJourneyInterchangeDerivedViewStructure
}

// ConnectingJourneyView represents the ConnectingJourneyView element
// Simplified  view of CONNECTING JOURNEY.
type ConnectingJourneyView struct {
	ConnectingJourneyDerivedViewStructure
}

// InterchangeRulesInFrameRelStructure represents the interchangeRulesInFrame_RelStructure element
// Type for containment in frame of INTERCHANGE RULEs.
type InterchangeRulesInFrameRelStructure struct {
	ContainmentAggregationStructure
	InterchangeRule []InterchangeRule `xml:"InterchangeRule" json:"InterchangeRule"`
}

// InterchangeRulesRelStructure represents the interchangeRules_RelStructure element
// Type for a list of INTERCHANGE RULEs.
type InterchangeRulesRelStructure struct {
	ContainmentAggregationStructure
	InterchangeRuleRef []InterchangeRuleRef `xml:"InterchangeRuleRef,omitempty" json:"InterchangeRuleRef,omitempty"`
	InterchangeRule []InterchangeRule `xml:"InterchangeRule,omitempty" json:"InterchangeRule,omitempty"`
}

// InterchangeRuleVersionStructure represents the InterchangeRule_VersionStructure element
// Type for INTERCHANGE RULE.
type InterchangeRuleVersionStructure struct {
	InterchangeVersionStructure
	// Reference to a CONNEXTION ZONE area.
	ConnectionZoneRef *ZoneRefStructure `xml:"ConnectionZoneRef,omitempty" json:"ConnectionZoneRef,omitempty"`
	ControlCentreRef *ControlCentreRef `xml:"ControlCentreRef,omitempty" json:"ControlCentreRef,omitempty"`
	// Whether rule is to exclude any connections that satisfy the criteria. Default is false.
	Exclude *bool `xml:"Exclude,omitempty" json:"Exclude,omitempty"`
	// Additional timings for  the INTERCHANGE RULE for specific TIME DEMAND TYPEs.
	Timings *InterchangeRuleTimingsRelStructure `xml:"timings,omitempty" json:"timings,omitempty"`
	// Feeder end of INTERCHANGE RULE.
	FeederFilter *InterchangeRuleParameterStructure `xml:"FeederFilter,omitempty" json:"FeederFilter,omitempty"`
	// Distributor end of INTERCHANGE RULE.
	DistributorFilter *InterchangeRuleParameterStructure `xml:"DistributorFilter,omitempty" json:"DistributorFilter,omitempty"`
}

// InterchangeRuleParameterStructure represents the InterchangeRuleParameterStructure element
// Type for INTERCHANGE RULE PARAMETER.
type InterchangeRuleParameterStructure struct {
	// Identifier of MODE of end Point of TRANSFER . Default is all modes.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	// Identifier of a Place at end point of transfer.
	StopAreaRef *StopAreaRefStructure `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	// Applies to all Lines. +v1.1
	AllLines *EmptyType `xml:"AllLines,omitempty" json:"AllLines,omitempty"`
	// List of LINEs in a DIRECTION +v1.1
	LinesInDirectionRefs *LinesInDirectionRefsRelStructure `xml:"linesInDirectionRefs,omitempty" json:"linesInDirectionRefs,omitempty"`
	LineInDirectionRef []LineInDirectionRef `xml:"LineInDirectionRef,omitempty" json:"LineInDirectionRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	// Prior (feeder) or onwards (distributor) SCHEDULED STOP POINT before/after CONNECTION.
	AdjacentStopPointRef *ScheduledStopPointRefStructure `xml:"AdjacentStopPointRef,omitempty" json:"AdjacentStopPointRef,omitempty"`
	// Prior (feeder) or onwards (distributor) SCHEDULED STOP PLACE  before/after CONNECTION.
	AdjacentStopPlaceRef *StopPlaceRefStructure `xml:"AdjacentStopPlaceRef,omitempty" json:"AdjacentStopPlaceRef,omitempty"`
	// Prior (feeder) or onwards (distributor) POINT (not necessarily a STOP POINT) before/after connection.
	AdjacentPointRef *PointRefStructure `xml:"AdjacentPointRef,omitempty" json:"AdjacentPointRef,omitempty"`
	// Identifier of end i.e. origin (feeder) or destination (Distributor)(SCHEDULED STOP POINT of feeder/distributor JOURNEY.
	EndStopPointRef *ScheduledStopPointRefStructure `xml:"EndStopPointRef,omitempty" json:"EndStopPointRef,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	// Reference to a connecting VEHICLE JOURNEY to whom INTERCHANGE RULE applies. If absent applies to all journeys.
	ServiceJourneyRef *ServiceJourneyRefStructure `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	JourneyDesignator *JourneyDesignator `xml:"JourneyDesignator,omitempty" json:"JourneyDesignator,omitempty"`
	ServiceDesignator *ServiceDesignator `xml:"ServiceDesignator,omitempty" json:"ServiceDesignator,omitempty"`
	// Maximum interval for making INTERCHANGe.
	MaximumInterchangeWindow *string `xml:"MaximumInterchangeWindow,omitempty" json:"MaximumInterchangeWindow,omitempty"`
}

// InterchangeRuleFiltersRelStructure represents the interchangeRuleFilters_RelStructure element
// Type for a list of INTERCHANGE RULE FILTERs
type InterchangeRuleFiltersRelStructure struct {
	ContainmentAggregationStructure
	InterchangeRuleFilter []InterchangeRuleFilter `xml:"InterchangeRuleFilter" json:"InterchangeRuleFilter"`
}

// InterchangeRuleFilterVersionedChildStructure represents the InterchangeRuleFilter_VersionedChildStructure element
// Type for INTERCHANGE RULE PARAMETER.
type InterchangeRuleFilterVersionedChildStructure struct {
	VersionedChildStructure
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	// Identifier of a Place at end point of transfer.
	StopAreaRef *StopAreaRefStructure `xml:"StopAreaRef,omitempty" json:"StopAreaRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	// Applies to all Lines. +v1.1
	AllLines *EmptyType `xml:"AllLines,omitempty" json:"AllLines,omitempty"`
	// List of LINEs in a DIRECTION +v1.1
	LinesInDirectionRefs *LinesInDirectionRefsRelStructure `xml:"linesInDirectionRefs,omitempty" json:"linesInDirectionRefs,omitempty"`
	LineInDirectionRef []LineInDirectionRef `xml:"LineInDirectionRef,omitempty" json:"LineInDirectionRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	// Prior (feeder) or onwards (distributor) SCHEDULED STOP POINT before/after CONNECTION.
	AdjacentStopPointRef *ScheduledStopPointRefStructure `xml:"AdjacentStopPointRef,omitempty" json:"AdjacentStopPointRef,omitempty"`
	// Prior (feeder) or onwards (distributor) SCHEDULED STOP PLACE  before/after CONNECTION.
	AdjacentStopPlaceRef *StopPlaceRefStructure `xml:"AdjacentStopPlaceRef,omitempty" json:"AdjacentStopPlaceRef,omitempty"`
	// Prior (feeder) or onwards (distributor) POINT (not necessarily a STOP POINT) before/after connection.
	AdjacentPointRef *PointRefStructure `xml:"AdjacentPointRef,omitempty" json:"AdjacentPointRef,omitempty"`
	// Identifier of end i.e. origin (feeder) or destination (Distributor)(SCHEDULED STOP POINT of feeder/distributor JOURNEY.
	EndStopPointRef *ScheduledStopPointRefStructure `xml:"EndStopPointRef,omitempty" json:"EndStopPointRef,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	// Reference to a connecting VEHICLE JOURNEY to whom INTERCHANGE RULE applies. If absent applies to all journeys.
	ServiceJourneyRef *ServiceJourneyRefStructure `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	ServiceDesignator *ServiceDesignator `xml:"ServiceDesignator,omitempty" json:"ServiceDesignator,omitempty"`
	// Maximum interval for making INTERCHANGe.
	MaximumInterchangeWindow *string `xml:"MaximumInterchangeWindow,omitempty" json:"MaximumInterchangeWindow,omitempty"`
	// Identifier of MODE of end Point of TRANSFER . Default is all modes.
	TransportMode *AllVehicleModesOfTransportEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
	// Order in which to apply filter
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// InterchangeRuleTimingsRelStructure represents the interchangeRuleTimings_RelStructure element
// Type for a list of INTERCHANGE RULE TIMINGs.
type InterchangeRuleTimingsRelStructure struct {
	ContainmentAggregationStructure
	InterchangeRuleTimingRef []InterchangeRuleTimingRef `xml:"InterchangeRuleTimingRef,omitempty" json:"InterchangeRuleTimingRef,omitempty"`
	// Timings for an INTERCHANGE RULE for a  given TIME DEMAND TYPE.
	InterchangeRuleTiming []InterchangeRuleTiming `xml:"InterchangeRuleTiming,omitempty" json:"InterchangeRuleTiming,omitempty"`
}

// InterchangeRuleTimingVersionStructure represents the InterchangeRuleTiming_VersionStructure element
// Type for INTERCHANGE RULE TIMING.
type InterchangeRuleTimingVersionStructure struct {
	JourneyTimingVersionedChildStructure
	// Standard wait time for INTERCHANGE.
	StandardWaitTime *string `xml:"StandardWaitTime,omitempty" json:"StandardWaitTime,omitempty"`
	// Maximum wait time for INTERCHANGE.
	MaximumWaitTime *string `xml:"MaximumWaitTime,omitempty" json:"MaximumWaitTime,omitempty"`
	// Maximum automatic wait time for INTERCHANGE.
	MaximumAutomaticWaitTime *string `xml:"MaximumAutomaticWaitTime,omitempty" json:"MaximumAutomaticWaitTime,omitempty"`
	// Standard transfer  duration for INTERCHANGE.
	StandardTransferTime *string `xml:"StandardTransferTime,omitempty" json:"StandardTransferTime,omitempty"`
	// Maximum transfer duration for INTERCHANGE.
	MinimumTransferTime *string `xml:"MinimumTransferTime,omitempty" json:"MinimumTransferTime,omitempty"`
	// Maximum transfer duration for INTERCHANGE.
	MaximumTransferTime *string `xml:"MaximumTransferTime,omitempty" json:"MaximumTransferTime,omitempty"`
	// Interval before CONTROL CENTRE should be notified associated with  SERVICE JOURNEY INTERCHANGE.
	ControlCentreNotifyThreshold *string `xml:"ControlCentreNotifyThreshold,omitempty" json:"ControlCentreNotifyThreshold,omitempty"`
}

// InterchangeRule represents the InterchangeRule element
// Conditions for considering journeys to meet or not to meet, specified indirectly: by a particular MODE, DIRECTION or LINE. Such conditions may alternatively be specified directly, indicating the corresponding services. In this case they are either a SERVICE JOURNEY PATTERN INTERCHANGE or a SERVICE JOURNEY INTERCHANGE.
type InterchangeRule struct {
	InterchangeRuleVersionStructure
}

// InterchangeRuleFilter represents the InterchangeRuleFilter element
// Filter for  INTERCHANGE RULE Filter.
type InterchangeRuleFilter struct {
	InterchangeRuleParameterStructure
}

// InterchangeRuleTiming represents the InterchangeRuleTiming element
// Conditions for considering journeys to meet or not to meet, specified indirectly: by a particular MODE, DIRECTION or LINE. Such conditions may alternatively be specified directly, indicating the corresponding services. In this case they are either a SERVICE JOURNEY PATTERN INTERCHANGE or a SERVICE JOURNEY INTERCHANGE.
type InterchangeRuleTiming struct {
	InterchangeRuleTimingVersionStructure
}

// PassingTimeRefStructure represents the PassingTimeRefStructure element
// Type for a reference to a PASSING TIME.
type PassingTimeRefStructure struct {
	JourneyTimingRefStructure
}

// TargetPassingTimeRefStructure represents the TargetPassingTimeRefStructure element
// Type for a reference to a TARGET PASSING TIME.
type TargetPassingTimeRefStructure struct {
	PassingTimeRefStructure
}

// ObservedPassingTimeRefStructure represents the ObservedPassingTimeRefStructure element
// Type for a reference to an OBSERVED PASSING TIME.
type ObservedPassingTimeRefStructure struct {
	PassingTimeRefStructure
}

// EstimatedPassingTimeRefStructure represents the EstimatedPassingTimeRefStructure element
// Type for a reference to an ESTIMATED PASSING TIME.
type EstimatedPassingTimeRefStructure struct {
	PassingTimeRefStructure
}

// TimetabledPassingTimeRefStructure represents the TimetabledPassingTimeRefStructure element
// Type for a reference to a TIMETABLED PASSING TIME.
type TimetabledPassingTimeRefStructure struct {
	PassingTimeRefStructure
}

// PassingTimeRef represents the PassingTimeRef element
// Reference to a PASSING TIME.
type PassingTimeRef struct {
	PassingTimeRefStructure
}

// TargetPassingTimeRef represents the TargetPassingTimeRef element
// Reference to a TARGET PASSING TIME.
type TargetPassingTimeRef struct {
	TargetPassingTimeRefStructure
}

// ObservedPassingTimeRef represents the ObservedPassingTimeRef element
// Reference to an OBSERVED PASSING TIME.
type ObservedPassingTimeRef struct {
	ObservedPassingTimeRefStructure
}

// EstimatedPassingTimeRef represents the EstimatedPassingTimeRef element
// Reference to an ESTIMATED PASSING TIME.
type EstimatedPassingTimeRef struct {
	EstimatedPassingTimeRefStructure
}

// TimetabledPassingTimeRef represents the TimetabledPassingTimeRef element
// Reference to a TIMETABLED PASSING TIME.
type TimetabledPassingTimeRef struct {
	TimetabledPassingTimeRefStructure
}

// PassingTimeVersionedChildStructure represents the PassingTime_VersionedChildStructure element
// Type for PASSING TIME.
type PassingTimeVersionedChildStructure struct {
	VersionedChildStructure
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	// Whether can alight and reboard at stop.
	AlightAndReboard *bool `xml:"AlightAndReboard,omitempty" json:"AlightAndReboard,omitempty"`
	PointInSingleJourneyPathRef *PointInSingleJourneyPathRef `xml:"PointInSingleJourneyPathRef,omitempty" json:"PointInSingleJourneyPathRef,omitempty"`
	FarePointInPatternRef *FarePointInPatternRef `xml:"FarePointInPatternRef,omitempty" json:"FarePointInPatternRef,omitempty"`
	StopPointInJourneyPatternRef *StopPointInJourneyPatternRef `xml:"StopPointInJourneyPatternRef,omitempty" json:"StopPointInJourneyPatternRef,omitempty"`
	TimingPointInJourneyPatternRef *TimingPointInJourneyPatternRef `xml:"TimingPointInJourneyPatternRef,omitempty" json:"TimingPointInJourneyPatternRef,omitempty"`
	PointInJourneyPatternRef *PointInJourneyPatternRef `xml:"PointInJourneyPatternRef,omitempty" json:"PointInJourneyPatternRef,omitempty"`
}

// TimetabledPassingTimesRelStructure represents the timetabledPassingTimes_RelStructure element
// Type for a list of TIMETABLED PASSING TIME.
type TimetabledPassingTimesRelStructure struct {
	StrictContainmentAggregationStructure
	TimetabledPassingTime []TimetabledPassingTime `xml:"TimetabledPassingTime" json:"TimetabledPassingTime"`
}

// TimetabledPassingTimeVersionedChildStructure represents the TimetabledPassingTime_VersionedChildStructure element
// Type for TIMETABLED PASSING TIME.
type TimetabledPassingTimeVersionedChildStructure struct {
	PassingTimeVersionedChildStructure
	// Timetabled arrival time.
	ArrivalTime *string `xml:"ArrivalTime,omitempty" json:"ArrivalTime,omitempty"`
	// Number of days after the starting time of the journey if  not same calendar day. Default is 0 for same day.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	// Timetabled departure time.
	DepartureTime *string `xml:"DepartureTime,omitempty" json:"DepartureTime,omitempty"`
	// Number of days after the starting time of the journey if  not same calendar day. Default is 0 for same day.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Timetabled waiting interval.
	WaitingTime *string `xml:"WaitingTime,omitempty" json:"WaitingTime,omitempty"`
	// Frequency of service.
	Headway *HeadwayIntervalStructure `xml:"Headway,omitempty" json:"Headway,omitempty"`
	// Latest Arrival Time.
	LatestArrivalTime *string `xml:"LatestArrivalTime,omitempty" json:"LatestArrivalTime,omitempty"`
	// Number of days after the starting time of the journey if  not same calendar day. Default is 0 for same day.
	LatestArrivalDayOffset *int `xml:"LatestArrivalDayOffset,omitempty" json:"LatestArrivalDayOffset,omitempty"`
	// Earliest Timetabled departure time.
	EarliestDepartureTime *string `xml:"EarliestDepartureTime,omitempty" json:"EarliestDepartureTime,omitempty"`
	// Number of days after the starting time of the journey if  not same calendar day. Default is 0 for same day.
	EarliestDepartureDayOffset *int `xml:"EarliestDepartureDayOffset,omitempty" json:"EarliestDepartureDayOffset,omitempty"`
}

// PassingTime represents the PassingTime element
// PASSING TIME.
type PassingTime struct {
	PassingTimeVersionedChildStructure
}

// TimetabledPassingTime represents the TimetabledPassingTime element
// TIMETABLED PASSING TIME at TIMING POINT.
type TimetabledPassingTime struct {
	TimetabledPassingTimeVersionedChildStructure
}

// JourneyPartRefStructure represents the JourneyPartRefStructure element
// Type for a reference to a JOURNEY PART.
type JourneyPartRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// JourneyPartRefsRelStructure represents the journeyPartRefs_RelStructure element
// Type for a list of JOURNEY PARTs.
type JourneyPartRefsRelStructure struct {
	OneToManyRelationshipStructure
	JourneyPartRef []JourneyPartRef `xml:"JourneyPartRef" json:"JourneyPartRef"`
}

// CoupledJourneyRefStructure represents the CoupledJourneyRefStructure element
// Type for a reference to a COUPLED JOURNEY.
type CoupledJourneyRefStructure struct {
	VersionOfObjectRefStructure
}

// JourneyPartCoupleRefStructure represents the JourneyPartCoupleRefStructure element
// Type for a reference to a JOURNEY PART COUPLE.
type JourneyPartCoupleRefStructure struct {
	VersionOfObjectRefStructure
}

// PurposeOfJourneyPartitionRefStructure represents the PurposeOfJourneyPartitionRefStructure element
// Type for a PURPOSE OF JOURNEY PARTITION.
type PurposeOfJourneyPartitionRefStructure struct {
	TypeOfValueRefStructure
}

// BlockRefStructure represents the BlockRefStructure element
// Type for Reference to a BLOCK.
type BlockRefStructure struct {
	VersionOfObjectRefStructure
}

// TrainBlockRefStructure represents the TrainBlockRefStructure element
// Type for a reference to a TRAIN BLOCK.
type TrainBlockRefStructure struct {
	BlockRefStructure
}

// BlockPartRefStructure represents the BlockPartRefStructure element
// Type for Reference to a BLOCK PART.
type BlockPartRefStructure struct {
	VersionOfObjectRefStructure
}

// TrainBlockPartRefStructure represents the TrainBlockPartRefStructure element
// Type for a reference to a TRAIN BLOCK PART.
type TrainBlockPartRefStructure struct {
	BlockPartRefStructure
}

// JourneyPartRef represents the JourneyPartRef element
// Reference to a JOURNEY PART.
type JourneyPartRef struct {
	JourneyPartRefStructure
}

// CoupledJourneyRef represents the CoupledJourneyRef element
// Reference to a COUPLED JOURNEY.
type CoupledJourneyRef struct {
	CoupledJourneyRefStructure
}

// JourneyPartCoupleRef represents the JourneyPartCoupleRef element
// Reference to a JOURNEY PART COUPLE.
type JourneyPartCoupleRef struct {
	JourneyPartCoupleRefStructure
}

// PurposeOfJourneyPartitionRef represents the PurposeOfJourneyPartitionRef element
// Reference to a PURPOSE OF JOURNEY PARTITION.
type PurposeOfJourneyPartitionRef struct {
	PurposeOfJourneyPartitionRefStructure
}

// BlockRef represents the BlockRef element
// Reference to a BLOCK.
type BlockRef struct {
	BlockRefStructure
}

// TrainBlockRef represents the TrainBlockRef element
// Reference to a TRAIN BLOCK.
type TrainBlockRef struct {
	TrainBlockRefStructure
}

// BlockPartRef represents the BlockPartRef element
// Reference to a BLOCK PART.
type BlockPartRef struct {
	BlockPartRefStructure
}

// TrainBlockPartRef represents the TrainBlockPartRef element
// Reference to a TRAIN BLOCK PART.
type TrainBlockPartRef struct {
	TrainBlockPartRefStructure
}

// CompoundBlockRefStructure represents the CompoundBlockRefStructure element
// Type for Reference to a COMPOUND BLOCK.
type CompoundBlockRefStructure struct {
	VersionOfObjectRefStructure
}

// VehicleServiceRefStructure represents the VehicleServiceRefStructure element
// Type for Reference to a VEHICLE SERVICE.
type VehicleServiceRefStructure struct {
	VersionOfObjectRefStructure
}

// VehicleServicePartRefStructure represents the VehicleServicePartRefStructure element
// Type for Reference to a VEHICLE SERVICE PART.
type VehicleServicePartRefStructure struct {
	VersionOfObjectRefStructure
}

// DriverRefStructure represents the DriverRefStructure element
// Type for Reference to a DRIVER.
type DriverRefStructure struct {
	VersionOfObjectRefStructure
}

// CourseOfJourneysRefStructure represents the CourseOfJourneysRefStructure element
// Type for Reference to a COURSE OF JOURNEYS.
type CourseOfJourneysRefStructure struct {
	VersionOfObjectRefStructure
}

// ReliefOpportunityRefStructure represents the ReliefOpportunityRefStructure element
// Type for Reference to a RELIEF OPPORTUNITY.
type ReliefOpportunityRefStructure struct {
	VersionOfObjectRefStructure
}

// CompoundBlockRef represents the CompoundBlockRef element
// Reference to a COMPOUND BLOCK.
type CompoundBlockRef struct {
	CompoundBlockRefStructure
}

// VehicleServiceRef represents the VehicleServiceRef element
// Reference to a VEHICLE SERVICE.
type VehicleServiceRef struct {
	VehicleServiceRefStructure
}

// VehicleServicePartRef represents the VehicleServicePartRef element
// Reference to a VEHICLE SERVICE PART.
type VehicleServicePartRef struct {
	VehicleServicePartRefStructure
}

// DriverRef represents the DriverRef element
// Reference to a DRIVER.
type DriverRef struct {
	DriverRefStructure
}

// CourseOfJourneysRef represents the CourseOfJourneysRef element
// Reference to a COURSE OF JOURNEYS  (Run).
type CourseOfJourneysRef struct {
	CourseOfJourneysRefStructure
}

// ReliefOpportunityRef represents the ReliefOpportunityRef element
// Reference to a RELIEF OPPORTUNITY.
type ReliefOpportunityRef struct {
	ReliefOpportunityRefStructure
}

// DutyRefStructure represents the DutyRefStructure element
// Type for Reference to a DUTY.
type DutyRefStructure struct {
	VersionOfObjectRefStructure
}

// AccountableElementRefStructure represents the AccountableElementRefStructure element
// Type for Reference to an ACCOUNTABLE ELEMENT.
type AccountableElementRefStructure struct {
	VersionOfObjectRefStructure
}

// DutyPartRefStructure represents the DutyPartRefStructure element
// Type for Reference to a DUTY PART.
type DutyPartRefStructure struct {
	AccountableElementRefStructure
}

// DriverTripRefStructure represents the DriverTripRefStructure element
// Type for Reference to a DRIVER TRIP.
type DriverTripRefStructure struct {
	VersionOfObjectRefStructure
}

// DriverTripTimeRefStructure represents the DriverTripTimeRefStructure element
// Type for Reference to a DRIVER TRIP TIME.
type DriverTripTimeRefStructure struct {
	VersionOfObjectRefStructure
}

// DutyRef represents the DutyRef element
// Reference to a DUTY.
type DutyRef struct {
	DutyRefStructure
}

// AccountableElementRef represents the AccountableElementRef element
// Reference to an ACCOUNTABLE ELEMENT.
type AccountableElementRef struct {
	AccountableElementRefStructure
}

// DutyPartRef represents the DutyPartRef element
// Reference to a DUTY PART.
type DutyPartRef struct {
	DutyPartRefStructure
}

// DriverTripRef represents the DriverTripRef element
// Reference to a DRIVER TRIP.
type DriverTripRef struct {
	DriverTripRefStructure
}

// DriverTripTimeRef represents the DriverTripTimeRef element
// Reference to a DRIVER TRIP TIME.
type DriverTripTimeRef struct {
	DriverTripTimeRefStructure
}

// CallsRelStructure represents the calls_RelStructure element
// CALLs associated with entity.
type CallsRelStructure struct {
	StrictContainmentAggregationStructure
	DatedCall []DatedCall `xml:"DatedCall,omitempty" json:"DatedCall,omitempty"`
	Call []Call `xml:"Call,omitempty" json:"Call,omitempty"`
}

// CallVersionedChildStructure represents the Call_VersionedChildStructure element
// Data type for CALL.
type CallVersionedChildStructure struct {
	VersionedChildStructure
	// Count of number of visits to this stop - as per SIRI use. Default is 1
	VisitNumber *int `xml:"VisitNumber,omitempty" json:"VisitNumber,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	ScheduledStopPointView *ScheduledStopPointView `xml:"ScheduledStopPointView,omitempty" json:"ScheduledStopPointView,omitempty"`
	OnwardTimingLinkView *OnwardTimingLinkView `xml:"OnwardTimingLinkView,omitempty" json:"OnwardTimingLinkView,omitempty"`
	// reference to onwards SERVICE LINK.
	OnwardServiceLinkRef *ServiceLinkRefStructure `xml:"OnwardServiceLinkRef,omitempty" json:"OnwardServiceLinkRef,omitempty"`
	OnwardServiceLinkView *OnwardServiceLinkView `xml:"OnwardServiceLinkView,omitempty" json:"OnwardServiceLinkView,omitempty"`
	// Nature of TIMING POINT. Default is primary.
	TimingPointStatus *TimingPointStatusEnumeration `xml:"TimingPointStatus,omitempty" json:"TimingPointStatus,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	// Point in JOURNEY PATTERN upon which this call is based. Can be used to obtain full association sets.
	PointInJourneyPatternRef *PointInJourneyPatternRefStructure `xml:"PointInJourneyPatternRef,omitempty" json:"PointInJourneyPatternRef,omitempty"`
	// Arrival at CALL.
	Arrival *ArrivalStructure `xml:"Arrival,omitempty" json:"Arrival,omitempty"`
	// Departure from a CALL.
	Departure *DepartureStructure `xml:"Departure,omitempty" json:"Departure,omitempty"`
	// Frequency of service at CALL.
	Frequency *FrequencyStructure `xml:"Frequency,omitempty" json:"Frequency,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	DestinationDisplayView *DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
	// Destinations that the SERVICE goes via.
	Vias *ViasRelStructure `xml:"vias,omitempty" json:"vias,omitempty"`
	FlexiblePointProperties *FlexiblePointProperties `xml:"FlexiblePointProperties,omitempty" json:"FlexiblePointProperties,omitempty"`
	// Whether DESTINATION DISPLAY should be updated at this point. If DESTINATION NAME value is different from Previous stop this is implicit.
	ChangeOfDestinationDisplay *bool `xml:"ChangeOfDestinationDisplay,omitempty" json:"ChangeOfDestinationDisplay,omitempty"`
	// Whether Service Requirements Change at this point.
	ChangeOfServiceRequirements *bool `xml:"ChangeOfServiceRequirements,omitempty" json:"ChangeOfServiceRequirements,omitempty"`
	// NOTICEs for POINT IN JOURNEY PATTERN.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// Whether stop is a request stop for this journey. Default is false.
	RequestStop *bool `xml:"RequestStop,omitempty" json:"RequestStop,omitempty"`
	// Method to Request Stop in this particular service pattern; if none specified, as as per stop.  +V1.1
	RequestMethod *RequestMethodTypeEnumeration `xml:"RequestMethod,omitempty" json:"RequestMethod,omitempty"`
	// Nature of use of stop, e.g. access, interchange only, or pass through. Default is Access.
	StopUse *StopUseEnumeration `xml:"StopUse,omitempty" json:"StopUse,omitempty"`
	// Booking Arrangements for stop if different from those for SERVICE JOURNEY.
	BookingArrangements *BookingArrangementsStructure `xml:"BookingArrangements,omitempty" json:"BookingArrangements,omitempty"`
	// Whether the stop is included in printed media. Default is true. +v1.1
	Print *bool `xml:"Print,omitempty" json:"Print,omitempty"`
	// When STOP POINT IN JOURNEY PATTERN is to be publicised in dynamic media. Default is always. +v1.1
	Dynamic *DynamicAdvertisementEnumeration `xml:"Dynamic,omitempty" json:"Dynamic,omitempty"`
	PassengerCarryingRequirementRef *PassengerCarryingRequirementRef `xml:"PassengerCarryingRequirementRef,omitempty" json:"PassengerCarryingRequirementRef,omitempty"`
	PassengerCarryingRequirementsView *PassengerCarryingRequirementsView `xml:"PassengerCarryingRequirementsView,omitempty" json:"PassengerCarryingRequirementsView,omitempty"`
	TrainSize *TrainSize `xml:"TrainSize,omitempty" json:"TrainSize,omitempty"`
	// VEHICLE EQUIPMENT available on service.
	Equipments *VehicleEquipmentsRelStructure `xml:"equipments,omitempty" json:"equipments,omitempty"`
	// Text annotation that applies to this CALL. This is for internal use. Customer facing should be added to footnote.
	Note *MultilingualString `xml:"Note,omitempty" json:"Note,omitempty"`
	// Order of Call within Journey.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
	Constrained *bool `xml:"constrained,attr,omitempty" json:"constrained,omitempty"`
}

// ArrivalStructure represents the ArrivalStructure element
// Reorganisation  of Passing times as arrival.
type ArrivalStructure struct {
	// Latest Arrival time.
	Time *string `xml:"Time,omitempty" json:"Time,omitempty"`
	// Number of days after the starting  day of the journey. Default is 0 for same day.
	DayOffset *int `xml:"DayOffset,omitempty" json:"DayOffset,omitempty"`
	// Whether  alighting is allowed at the stop  Default is true.
	ForAlighting *bool `xml:"ForAlighting,omitempty" json:"ForAlighting,omitempty"`
	// Whether use of stop is flexible, i.e. requires phoning to arrange. Must be a  FLEXIBLE LINE.  Default is false.
	IsFlexible *bool `xml:"IsFlexible,omitempty" json:"IsFlexible,omitempty"`
	JourneyPartRef *JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	// JOURNEY MEETINGs for visit.
	JourneyMeetings *JourneyMeetingViewsRelStructure `xml:"journeyMeetings,omitempty" json:"journeyMeetings,omitempty"`
	// INTERCHANGEs for visit.
	Interchanges *ServiceJourneyInterchangesRelStructure `xml:"interchanges,omitempty" json:"interchanges,omitempty"`
	// INTERCHANGE RULEs for visit.
	InterchangeRules *InterchangeRulesRelStructure `xml:"interchangeRules,omitempty" json:"interchangeRules,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	DutyPartRef *DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
	VehicleJourneyStopAssignmentRef *VehicleJourneyStopAssignmentRef `xml:"VehicleJourneyStopAssignmentRef,omitempty" json:"VehicleJourneyStopAssignmentRef,omitempty"`
	DynamicStopAssignmentRef *DynamicStopAssignmentRef `xml:"DynamicStopAssignmentRef,omitempty" json:"DynamicStopAssignmentRef,omitempty"`
	PassengerStopAssignmentRef *PassengerStopAssignmentRef `xml:"PassengerStopAssignmentRef,omitempty" json:"PassengerStopAssignmentRef,omitempty"`
	QuayAssignmentView *QuayAssignmentView `xml:"QuayAssignmentView,omitempty" json:"QuayAssignmentView,omitempty"`
	DynamicStopAssignment *DynamicStopAssignment `xml:"DynamicStopAssignment,omitempty" json:"DynamicStopAssignment,omitempty"`
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	CheckConstraint *CheckConstraint `xml:"CheckConstraint,omitempty" json:"CheckConstraint,omitempty"`
	// NOTICEs of a CALL that apply only to the Arrival  or departure.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// DepartureStructure represents the DepartureStructure element
// Reorganisation of Passing times as Departure.
type DepartureStructure struct {
	// Timetabled departure time - Earliest time to depart.
	Time *string `xml:"Time,omitempty" json:"Time,omitempty"`
	// Number of days of departure time after the starting  day of the journey, if  not same calendar day. Default is 0 for same dayi.
	DayOffset *int `xml:"DayOffset,omitempty" json:"DayOffset,omitempty"`
	// Whether  boarding is allowed at the stop. Default is true.
	ForBoarding *bool `xml:"ForBoarding,omitempty" json:"ForBoarding,omitempty"`
	// Whether use of stop is flexible, i.e. requires phoning to arrange. Must be a FLEXIBLE LINE.  Default is false.
	IsFlexible *bool `xml:"IsFlexible,omitempty" json:"IsFlexible,omitempty"`
	// Timetabled waiting interval.
	WaitTime *string `xml:"WaitTime,omitempty" json:"WaitTime,omitempty"`
	JourneyPartRef *JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	// JOURNEY MEETINGs for visit.
	JourneyMeetings *JourneyMeetingViewsRelStructure `xml:"journeyMeetings,omitempty" json:"journeyMeetings,omitempty"`
	// INTERCHANGEs for visit.
	Interchanges *ServiceJourneyInterchangesRelStructure `xml:"interchanges,omitempty" json:"interchanges,omitempty"`
	// INTERCHANGE RULEs for visit.
	InterchangeRules *InterchangeRulesRelStructure `xml:"interchangeRules,omitempty" json:"interchangeRules,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	DutyPartRef *DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
	VehicleJourneyStopAssignmentRef *VehicleJourneyStopAssignmentRef `xml:"VehicleJourneyStopAssignmentRef,omitempty" json:"VehicleJourneyStopAssignmentRef,omitempty"`
	DynamicStopAssignmentRef *DynamicStopAssignmentRef `xml:"DynamicStopAssignmentRef,omitempty" json:"DynamicStopAssignmentRef,omitempty"`
	PassengerStopAssignmentRef *PassengerStopAssignmentRef `xml:"PassengerStopAssignmentRef,omitempty" json:"PassengerStopAssignmentRef,omitempty"`
	QuayAssignmentView *QuayAssignmentView `xml:"QuayAssignmentView,omitempty" json:"QuayAssignmentView,omitempty"`
	DynamicStopAssignment *DynamicStopAssignment `xml:"DynamicStopAssignment,omitempty" json:"DynamicStopAssignment,omitempty"`
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	CheckConstraint *CheckConstraint `xml:"CheckConstraint,omitempty" json:"CheckConstraint,omitempty"`
	// NOTICEs of a CALL that apply only to the Arrival  or departure.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// DeadRunCallsRelStructure represents the deadRunCalls_RelStructure element
// DEAD RUN CALLs associated with entity.
type DeadRunCallsRelStructure struct {
	StrictContainmentAggregationStructure
	DeadRunCall []DeadRunCallVersionedChildStructure `xml:"DeadRunCall" json:"DeadRunCall"`
}

// DeadRunCallVersionedChildStructure represents the DeadRunCall_VersionedChildStructure element
// Data type for DEAD RUN CALL.
type DeadRunCallVersionedChildStructure struct {
	VersionedChildStructure
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	ScheduledStopPointView *ScheduledStopPointView `xml:"ScheduledStopPointView,omitempty" json:"ScheduledStopPointView,omitempty"`
	// Point in JOURNEY PATTERN upon which this DEAD RUN CALL is based. Can be used to obtain full association sets.
	PointInJourneyPatternRef *PointInJourneyPatternRefStructure `xml:"PointInJourneyPatternRef,omitempty" json:"PointInJourneyPatternRef,omitempty"`
	// Arrival at DEAD RUN CALL.
	Arrival *DeadRunCallPartStructure `xml:"Arrival,omitempty" json:"Arrival,omitempty"`
	// Departure from a DEAD RUN CALL.
	Departure *DeadRunCallPartStructure `xml:"Departure,omitempty" json:"Departure,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	DestinationDisplayView *DestinationDisplayView `xml:"DestinationDisplayView,omitempty" json:"DestinationDisplayView,omitempty"`
	// Destinations that the SERVICE goes via.
	Vias *ViasRelStructure `xml:"vias,omitempty" json:"vias,omitempty"`
	FlexiblePointProperties *FlexiblePointProperties `xml:"FlexiblePointProperties,omitempty" json:"FlexiblePointProperties,omitempty"`
	// Whether DESTINATION DISPLAY should be updated at this point. If DESTINATION NAME value is different from Previous stop this is implicit.
	ChangeOfDestinationDisplay *bool `xml:"ChangeOfDestinationDisplay,omitempty" json:"ChangeOfDestinationDisplay,omitempty"`
	// Whether Service Requirements Change at this point.
	ChangeOfServiceRequirements *bool `xml:"ChangeOfServiceRequirements,omitempty" json:"ChangeOfServiceRequirements,omitempty"`
	// NOTICEs for POINT IN JOURNEY PATTERN.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// Whether stop is a request stop for this journey. Default is false.
	RequestStop *bool `xml:"RequestStop,omitempty" json:"RequestStop,omitempty"`
	// Method to Request Stop in this particular service pattern; if none specified, as as per stop.  +V1.1
	RequestMethod *RequestMethodTypeEnumeration `xml:"RequestMethod,omitempty" json:"RequestMethod,omitempty"`
	// Nature of use of stop, e.g. access, interchange only, or pass through. Default is Access.
	StopUse *StopUseEnumeration `xml:"StopUse,omitempty" json:"StopUse,omitempty"`
	// Booking Arrangements for stop if different from those for SERVICE JOURNEY.
	BookingArrangements *BookingArrangementsStructure `xml:"BookingArrangements,omitempty" json:"BookingArrangements,omitempty"`
	// Whether the stop is included in printed media. Default is true. +v1.1
	Print *bool `xml:"Print,omitempty" json:"Print,omitempty"`
	// When STOP POINT IN JOURNEY PATTERN is to be publicised in dynamic media. Default is always. +v1.1
	Dynamic *DynamicAdvertisementEnumeration `xml:"Dynamic,omitempty" json:"Dynamic,omitempty"`
	// Text annotation that applies to this DEAD RUN CALL. This is for internal use. Customer facing should be added to footnote.
	Note *MultilingualString `xml:"Note,omitempty" json:"Note,omitempty"`
	// Order of DEAD RUN CALL within Journey.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// DeadRunCallPartStructure represents the DeadRunCallPartStructure element
// Type for DEAD RUN CALL part.
type DeadRunCallPartStructure struct {
	// Latest Arrival time.
	Time *string `xml:"Time,omitempty" json:"Time,omitempty"`
	// Number of days of arrival time after the starting  day  journey if  not same calendar day. Default is 0 for same day.
	DayOffset *int `xml:"DayOffset,omitempty" json:"DayOffset,omitempty"`
	// Timetabled waiting interval.
	WaitTime *string `xml:"WaitTime,omitempty" json:"WaitTime,omitempty"`
	JourneyPartRef *JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	DutyPartRef *DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
}

// DatedCallsRelStructure represents the datedCalls_RelStructure element
// DatedCALLs associated with entity.
type DatedCallsRelStructure struct {
	StrictContainmentAggregationStructure
	// A CALL that is part of a DATED JOURNEY and so takes place on a specified date.
	DatedCall []DatedCall `xml:"DatedCall" json:"DatedCall"`
}

// DatedCallVersionedChildStructure represents the DatedCall_VersionedChildStructure element
// Data type for DATED CALL.
type DatedCallVersionedChildStructure struct {
	CallVersionedChildStructure
	DriverRef *DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
	// Date of  departure.
	ArrivalDate *time.Time `xml:"ArrivalDate,omitempty" json:"ArrivalDate,omitempty"`
	// Date of departure.
	DepartureDate *time.Time `xml:"DepartureDate,omitempty" json:"DepartureDate,omitempty"`
}

// Call represents the Call element
// A visit to a SCHEDULED STOP POINT as part of a VEHICLE JOURNEY. A CALL is a view of a POINT IN JOURNEY PATTERN that adds in derived data.
type Call struct {
	CallVersionedChildStructure
}

// DatedCall represents the DatedCall element
// A visit to a SCHEDULED STOP POINT as part of a VEHICLE JOURNEY. A CALL is a view of a POINT IN JOURNEY PATTERN that adds in derived data.
type DatedCall struct {
	DatedCallVersionedChildStructure
}

// JourneyPartsInFrameRelStructure represents the journeyPartsInFrame_RelStructure element
// Type for containment in frame of  JOURNEY PARTs.
type JourneyPartsInFrameRelStructure struct {
	ContainmentAggregationStructure
	JourneyPart []JourneyPart `xml:"JourneyPart" json:"JourneyPart"`
}

// CoupledJourneysInFrameRelStructure represents the coupledJourneysInFrame_RelStructure element
// Type for containment in frame of  COUPLED JOURNEYs.
type CoupledJourneysInFrameRelStructure struct {
	ContainmentAggregationStructure
	CoupledJourney []CoupledJourney `xml:"CoupledJourney" json:"CoupledJourney"`
}

// JourneyPartCouplesInFrameRelStructure represents the journeyPartCouplesInFrame_RelStructure element
// Type for containment in frame of  JOURNEY PART COUPLEs.
type JourneyPartCouplesInFrameRelStructure struct {
	ContainmentAggregationStructure
	JourneyPartCouple []JourneyPartCouple `xml:"JourneyPartCouple" json:"JourneyPartCouple"`
}

// JourneyPartsRelStructure represents the journeyParts_RelStructure element
// Type for a list of JOURNEY PARTs.
type JourneyPartsRelStructure struct {
	ContainmentAggregationStructure
	JourneyPartRef []JourneyPartRef `xml:"JourneyPartRef,omitempty" json:"JourneyPartRef,omitempty"`
	JourneyPart []JourneyPart `xml:"JourneyPart,omitempty" json:"JourneyPart,omitempty"`
}

// JourneyPartVersionStructure represents the JourneyPart_VersionStructure element
// Type for JOURNEY PART.
type JourneyPartVersionStructure struct {
	DataManagedObjectStructure
	// Description of JOURNEY PART.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Reference to parent of which this is part. If given by context does not need to be stated.
	ParentJourneyRef *VehicleJourneyRefStructure `xml:"ParentJourneyRef,omitempty" json:"ParentJourneyRef,omitempty"`
	// Main JOURNEY PART for journey.
	MainPartRef *JourneyPartRefStructure `xml:"MainPartRef,omitempty" json:"MainPartRef,omitempty"`
	JourneyPartCoupleRef *JourneyPartCoupleRef `xml:"JourneyPartCoupleRef,omitempty" json:"JourneyPartCoupleRef,omitempty"`
	TrainNumberRef *TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	TrainBlockPartRef *TrainBlockPartRef `xml:"TrainBlockPartRef,omitempty" json:"TrainBlockPartRef,omitempty"`
	BlockPartRef *BlockPartRef `xml:"BlockPartRef,omitempty" json:"BlockPartRef,omitempty"`
	// Point at which this JOURNEY PART starts.
	FromStopPointRef *ScheduledStopPointRefStructure `xml:"FromStopPointRef,omitempty" json:"FromStopPointRef,omitempty"`
	// Point at which this JOURNEY PART ends.
	ToStopPointRef *ScheduledStopPointRefStructure `xml:"ToStopPointRef,omitempty" json:"ToStopPointRef,omitempty"`
	// Start time of JOURNEY PART.
	StartTime string `xml:"StartTime" json:"StartTime"`
	// Number of days after journey start time that start time is.
	StartTimeDayOffset *int `xml:"StartTimeDayOffset,omitempty" json:"StartTimeDayOffset,omitempty"`
	// End time of JOURNEY PART.
	EndTime string `xml:"EndTime" json:"EndTime"`
	// Number of days after journey start time that end time is.
	EndTimeDayOffset *int `xml:"EndTimeDayOffset,omitempty" json:"EndTimeDayOffset,omitempty"`
	// Orientation of the vehicle carrying
	// out the JOURNEY PART compared to the definition
	// of the corresponding VEHICLE TYPE. true for forward.
	VehicleOrientation *bool `xml:"VehicleOrientation,omitempty" json:"VehicleOrientation,omitempty"`
	PurposeOfJourneyPartitionRef *PurposeOfJourneyPartitionRef `xml:"PurposeOfJourneyPartitionRef,omitempty" json:"PurposeOfJourneyPartitionRef,omitempty"`
	// Facilities available during JOURNEY PART.
	Facilities *ServiceFacilitySetsRelStructure `xml:"facilities,omitempty" json:"facilities,omitempty"`
	// Positions in Train of JOURNEY PART.
	JourneyPartPositions *JourneyPartPositionsRelStructure `xml:"journeyPartPositions,omitempty" json:"journeyPartPositions,omitempty"`
	// Order of JOURNEY PART  within JOURNEY.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// JourneyPartPositionsRelStructure represents the journeyPartPositions_RelStructure element
// Type for a list of JOURNEY PART POSITIONs.
type JourneyPartPositionsRelStructure struct {
	ContainmentAggregationStructure
	JourneyPartPosition []JourneyPartPosition `xml:"JourneyPartPosition" json:"JourneyPartPosition"`
}

// JourneyPartPositionVersionedChildStructure represents the JourneyPartPosition_VersionedChildStructure element
// Type for JOURNEY PART POSITION.
type JourneyPartPositionVersionedChildStructure struct {
	VersionedChildStructure
	// Reference to parent of which this is part. If given by context does not need to be stated.
	ParentJourneyPartRef *JourneyPartRefStructure `xml:"ParentJourneyPartRef,omitempty" json:"ParentJourneyPartRef,omitempty"`
	FareScheduledStopPointRef []FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef []ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	// Position of JOURNEY PART in TRAIN - from specified SCHEDULED STOP POINT until otherwise stated.
	PositionInTrain int `xml:"PositionInTrain" json:"PositionInTrain"`
	// Order of JOURNEY PART  POistion within JOURNEY PART.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// CoupledJourneysRelStructure represents the coupledJourneys_RelStructure element
// Type for a list of COUPLED JOURNEYS.
type CoupledJourneysRelStructure struct {
	ContainmentAggregationStructure
	CoupledJourneyRef []CoupledJourneyRef `xml:"CoupledJourneyRef" json:"CoupledJourneyRef"`
}

// CoupledJourneyVersionStructure represents the CoupledJourney_VersionStructure element
// Type for COUPLED JOURNEY.
type CoupledJourneyVersionStructure struct {
	DataManagedObjectStructure
	// Name of COUPLED JOURNEY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of COUPLED JOURNEY.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	// VEHICLE JOURNEYs making up the COUPLED JOURNEY.
	Journeys *VehicleJourneyRefsRelStructure `xml:"journeys,omitempty" json:"journeys,omitempty"`
}

// JourneyPartCouplesRelStructure represents the journeyPartCouples_RelStructure element
// Type for a list of JOURNEY PART COUPLEs.
type JourneyPartCouplesRelStructure struct {
	ContainmentAggregationStructure
	JourneyPartCoupleRef []JourneyPartCoupleRef `xml:"JourneyPartCoupleRef,omitempty" json:"JourneyPartCoupleRef,omitempty"`
	JourneyPartCouple []JourneyPartCouple `xml:"JourneyPartCouple,omitempty" json:"JourneyPartCouple,omitempty"`
}

// JourneyPartCoupleVersionStructure represents the JourneyPartCouple_VersionStructure element
// Type for a JOURNEY PART COUPLE.
type JourneyPartCoupleVersionStructure struct {
	DataManagedObjectStructure
	// Time of Departure.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Start time of JOURNEY PART.
	StartTime string `xml:"StartTime" json:"StartTime"`
	// Number of days after journey start time that start time is.
	StartTimeDayOffset *int `xml:"StartTimeDayOffset,omitempty" json:"StartTimeDayOffset,omitempty"`
	// End time of JOURNEY PART.
	EndTime string `xml:"EndTime" json:"EndTime"`
	// Number of days after journey start time that end time is.
	EndTimeDayOffset *int `xml:"EndTimeDayOffset,omitempty" json:"EndTimeDayOffset,omitempty"`
	// Point at which this  JOURNEY PART starts.
	FromStopPointRef ScheduledStopPointRefStructure `xml:"FromStopPointRef" json:"FromStopPointRef"`
	// Point at which this JOURNEY PART ends.
	ToStopPointRef ScheduledStopPointRefStructure `xml:"ToStopPointRef" json:"ToStopPointRef"`
	// Main Journey JOURNEY PART of coupling.
	MainPartRef JourneyPartRefStructure `xml:"MainPartRef" json:"MainPartRef"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef *BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	// JOURNEY PARTs in JOURNEY PART COUPLE.
	JourneyParts *JourneyPartRefsRelStructure `xml:"journeyParts,omitempty" json:"journeyParts,omitempty"`
	TrainNumberRef *TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	// Order of JOURNEY PART COUPLE. +v1.1
	Order int `xml:"order,attr" json:"order"`
}

// PurposeOfJourneyPartitionValueStructure represents the PurposeOfJourneyPartition_ValueStructure element
// Type for a PURPOSE OF JOURNEY PARTITION.
type PurposeOfJourneyPartitionValueStructure struct {
	TypeOfValueVersionStructure
}

// JourneyPart represents the JourneyPart element
// A part of a VEHICLE JOURNEY created according to a specific functional purpose, for instance in situations when vehicle coupling or separating occurs.
type JourneyPart struct {
	JourneyPartVersionStructure
}

// JourneyPartPosition represents the JourneyPartPosition element
// Position in train of JOURNEY PART from a given stop. +v1.1.
type JourneyPartPosition struct {
	JourneyPartPositionVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// CoupledJourney represents the CoupledJourney element
// A complete journey operated by a coupled train, composed of two or more VEHICLE JOURNEYs remaining coupled together all along a JOURNEY PATTERN. A COUPLED JOURNEY may be viewed as a single VEHICLE JOURNEY.
type CoupledJourney struct {
	CoupledJourneyVersionStructure
}

// JourneyPartCouple represents the JourneyPartCouple element
// Two or more  JOURNEY PARTs of different VEHICLE JOURNEYs served simultaneously by a train set up by coupling their single vehicles.
type JourneyPartCouple struct {
	JourneyPartCoupleVersionStructure
}

// PurposeOfJourneyPartition represents the PurposeOfJourneyPartition element
// An operational purpose changing within a JOURNEY PATTERN and with this subdividing the SERVICE JOURNEY into JOURNEY PARTs.
type PurposeOfJourneyPartition struct {
	PurposeOfJourneyPartitionValueStructure
}

// FlexibleServiceEnumeration represents the FlexibleServiceEnumeration enumeration
// Allowed values for flexible service type: FixedPassingTimes, DynamicPassingTimes, FixedHeadwayFrequency.
type FlexibleServiceEnumeration string

const (
	// FlexibleServiceEnumerationDynamicPassingTimes represents dynamicPassingTimes
	FlexibleServiceEnumerationDynamicPassingTimes FlexibleServiceEnumeration = "dynamicPassingTimes"
	// FlexibleServiceEnumerationFixedHeadwayFrequency represents fixedHeadwayFrequency
	FlexibleServiceEnumerationFixedHeadwayFrequency FlexibleServiceEnumeration = "fixedHeadwayFrequency"
	// FlexibleServiceEnumerationFixedPassingTimes represents fixedPassingTimes
	FlexibleServiceEnumerationFixedPassingTimes FlexibleServiceEnumeration = "fixedPassingTimes"
	// FlexibleServiceEnumerationNotFlexible represents notFlexible
	FlexibleServiceEnumerationNotFlexible FlexibleServiceEnumeration = "notFlexible"
	// FlexibleServiceEnumerationOther represents other
	FlexibleServiceEnumerationOther FlexibleServiceEnumeration = "other"
)

// FlexibleServicePropertiesRefStructure represents the FlexibleServicePropertiesRefStructure element
// Type for a reference to a FLEXIBLE SERVICE PROPERTIES.
type FlexibleServicePropertiesRefStructure struct {
	VersionOfObjectRefStructure
}

// FlexibleServiceAssignmentRefStructure represents the FlexibleServiceAssignmentRefStructure element
// Type for a reference to a FLEXIBLE SERVICE ASSIGNMENT.
type FlexibleServiceAssignmentRefStructure struct {
	StopAssignmentRefStructure
}

// TypeOfFlexibleServiceRefStructure represents the TypeOfFlexibleServiceRefStructure element
// Type for a TYPE OF FLEXIBLE SERVICE.
type TypeOfFlexibleServiceRefStructure struct {
	TypeOfValueRefStructure
}

// FlexibleServicePropertiesRef represents the FlexibleServicePropertiesRef element
// Reference to a FLEXIBLE SERVICE PROPERTIES.
type FlexibleServicePropertiesRef struct {
	FlexibleServicePropertiesRefStructure
}

// FlexibleServiceAssignmentRef represents the FlexibleServiceAssignmentRef element
// Reference to a FLEXIBLE SERVICE ASSIGNMENT.
type FlexibleServiceAssignmentRef struct {
	FlexibleServiceAssignmentRefStructure
}

// TypeOfFlexibleServiceRef represents the TypeOfFlexibleServiceRef element
// Reference to a TYPE OF FLEXIBLE SERVICE.
type TypeOfFlexibleServiceRef struct {
	TypeOfFlexibleServiceRefStructure
}

// FlexibleServicePropertiesInFrameRelStructure represents the flexibleServicePropertiesInFrame_RelStructure element
// Type for containment in frame of  FLEXIBLE SERVICE PROPERTies.
type FlexibleServicePropertiesInFrameRelStructure struct {
	ContainmentAggregationStructure
	FlexibleServiceProperties []FlexibleServiceProperties `xml:"FlexibleServiceProperties" json:"FlexibleServiceProperties"`
}

// FlexibleServicePropertiesRelStructure represents the flexibleServiceProperties_RelStructure element
// Type for containment in frame of FLEXIBLE SERVICE PROPERTies.
type FlexibleServicePropertiesRelStructure struct {
	OneToManyRelationshipStructure
	FlexibleServicePropertiesRef []FlexibleServicePropertiesRef `xml:"FlexibleServicePropertiesRef,omitempty" json:"FlexibleServicePropertiesRef,omitempty"`
	FlexibleServiceProperties []FlexibleServiceProperties `xml:"FlexibleServiceProperties,omitempty" json:"FlexibleServiceProperties,omitempty"`
}

// FlexibleServicePropertiesVersionStructure represents the FlexibleServiceProperties_VersionStructure element
// Type for FLEXIBLE SERVICE PROPERTies.
type FlexibleServicePropertiesVersionStructure struct {
	DataManagedObjectStructure
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	TypeOfFlexibleServiceRef *TypeOfFlexibleServiceRef `xml:"TypeOfFlexibleServiceRef,omitempty" json:"TypeOfFlexibleServiceRef,omitempty"`
	// Flexible service type is FixedPassingTimes/DynamicPassingTimes/FixedHeadwayFrequency (in the last value, this provides a maximum waiting time, but no passing time is defined, all is done dynamically depending on the demand). A NotFlexible value is probably also required to clearly state that a Stop (i.e. Point in JP) is not flexible when others are.
	FlexibleServiceType *FlexibleServiceEnumeration `xml:"FlexibleServiceType,omitempty" json:"FlexibleServiceType,omitempty"`
	// Whether cancellation is always possible (meaning the Operator can decided to cancel, usually because there are not enough people, or they are too busy to run service).
	CancellationPossible *bool `xml:"CancellationPossible,omitempty" json:"CancellationPossible,omitempty"`
	// Whether the time of the service may be altered.
	ChangeOfTimePossible *bool `xml:"ChangeOfTimePossible,omitempty" json:"ChangeOfTimePossible,omitempty"`
	// Contact for Booking. +v1.1
	BookingContact *ContactStructure `xml:"BookingContact,omitempty" json:"BookingContact,omitempty"`
	// Allowed Ways of Making a BOOKING.
	BookingMethods *BookingMethodEnumeration `xml:"BookingMethods,omitempty" json:"BookingMethods,omitempty"`
	// Who can make a booking. Default is public.
	BookingAccess *BookingAccessEnumeration `xml:"BookingAccess,omitempty" json:"BookingAccess,omitempty"`
	// When Booking can be made. +V1.1
	BookWhen *PurchaseWhenEnumeration `xml:"BookWhen,omitempty" json:"BookWhen,omitempty"`
	// When purchase can be made.  +V1.1
	BuyWhen *PurchaseMomentEnumeration `xml:"BuyWhen,omitempty" json:"BuyWhen,omitempty"`
	// Latest time in day that booking can be made.
	LatestBookingTime *string `xml:"LatestBookingTime,omitempty" json:"LatestBookingTime,omitempty"`
	// Minimum interval in advance of departure day or time that Service may be ordered.
	MinimumBookingPeriod *string `xml:"MinimumBookingPeriod,omitempty" json:"MinimumBookingPeriod,omitempty"`
	// Maximum interval in advance of departure day or time that Service may be ordered. +V1.2..2
	MaximumBookingPeriod *string `xml:"MaximumBookingPeriod,omitempty" json:"MaximumBookingPeriod,omitempty"`
	// URL for booking. +V1.1
	BookingUrl *string `xml:"BookingUrl,omitempty" json:"BookingUrl,omitempty"`
	// Note about booking the FLEXIBLE LINE.
	BookingNote *MultilingualString `xml:"BookingNote,omitempty" json:"BookingNote,omitempty"`
}

// FlexibleStopAssignmentVersionStructure represents the FlexibleStopAssignment_VersionStructure element
// Type for a FLEXIBLE STOP ASSIGNMENT.
type FlexibleStopAssignmentVersionStructure struct {
	StopAssignmentVersionStructure
	FlexibleStopPlaceRef FlexibleStopPlaceRef `xml:"FlexibleStopPlaceRef" json:"FlexibleStopPlaceRef"`
	HailAndRideAreaRef *HailAndRideAreaRef `xml:"HailAndRideAreaRef,omitempty" json:"HailAndRideAreaRef,omitempty"`
	FlexibleAreaRef *FlexibleAreaRef `xml:"FlexibleAreaRef,omitempty" json:"FlexibleAreaRef,omitempty"`
	FlexibleQuayRef *FlexibleQuayRef `xml:"FlexibleQuayRef,omitempty" json:"FlexibleQuayRef,omitempty"`
}

// TypeOfFlexibleServiceValueStructure represents the TypeOfFlexibleService_ValueStructure element
// Type for a TYPE OF FLEXIBLE SERVICE.
type TypeOfFlexibleServiceValueStructure struct {
	TypeOfEntityVersionStructure
}

// FlexibleServiceProperties represents the FlexibleServiceProperties element
// Additional characteristics of a FLEXIBLE SERVICE. A service may be partly fixed, partly flexible.
type FlexibleServiceProperties struct {
	FlexibleServicePropertiesVersionStructure
}

// FlexibleStopAssignment represents the FlexibleStopAssignment element
// Assignment of a SCHEDULED STOP POINT to a FLEXIBLE STOP PLACE and quay. etc.
type FlexibleStopAssignment struct {
	FlexibleStopAssignmentVersionStructure
}

// TypeOfFlexibleService represents the TypeOfFlexibleService element
// A classification of FLEXIBLE SERVICEs according to their functional purpose.
type TypeOfFlexibleService struct {
	TypeOfFlexibleServiceValueStructure
}

// DatedPassingTimeVersionedChildStructure represents the DatedPassingTime_VersionedChildStructure element
// Type for DATED PASSING TIME.
type DatedPassingTimeVersionedChildStructure struct {
	PassingTimeVersionedChildStructure
	// Dated journey for which this is the  PASSING TIME. If given by context does not need to be restated.
	DatedJourneyRef *JourneyRefStructure `xml:"DatedJourneyRef,omitempty" json:"DatedJourneyRef,omitempty"`
}

// TargetPassingTimesRelStructure represents the targetPassingTimes_RelStructure element
// Type for a list of TARGET PASSING TIME.
type TargetPassingTimesRelStructure struct {
	StrictContainmentAggregationStructure
	TargetPassingTime []TargetPassingTime `xml:"TargetPassingTime" json:"TargetPassingTime"`
}

// TargetPassingTimeVersionedChildStructure represents the TargetPassingTime_VersionedChildStructure element
// Type for TARGET PASSING TIME.
type TargetPassingTimeVersionedChildStructure struct {
	DatedPassingTimeVersionedChildStructure
	// Aimed Arrival time.
	AimedArrivalTime *string `xml:"AimedArrivalTime,omitempty" json:"AimedArrivalTime,omitempty"`
	// Arrival Day Offset from Start of Journey.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	// Aimed departure time.
	AimedDepartureTime *string `xml:"AimedDepartureTime,omitempty" json:"AimedDepartureTime,omitempty"`
	// DepartureDay Offset from Start of Journey.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Aimed waiting interval.
	AimedWaitingTime *string `xml:"AimedWaitingTime,omitempty" json:"AimedWaitingTime,omitempty"`
	// Aimed PASSING TIME if doesn't stop at TIMING POINT.
	AimedNonstopPassingTime *string `xml:"AimedNonstopPassingTime,omitempty" json:"AimedNonstopPassingTime,omitempty"`
	// Passing Day Offset from Start of Journey.
	PassingDayOffset *int `xml:"PassingDayOffset,omitempty" json:"PassingDayOffset,omitempty"`
	// Aimed Frequency of service.
	AimedHeadway *HeadwayIntervalStructure `xml:"AimedHeadway,omitempty" json:"AimedHeadway,omitempty"`
}

// PassingTimeViewStructure represents the PassingTime_ViewStructure element
// Type for Simplified  TARGET PASSING TIME.
type PassingTimeViewStructure struct {
	DataManagedObjectViewStructure
	// Number of days after the starting departure time of the journey if  not same calendar day. Default is 0 for same day.
	DayOffset *int `xml:"DayOffset,omitempty" json:"DayOffset,omitempty"`
}

// TimetabledPassingTimeViewStructure represents the TimetabledPassingTime_ViewStructure element
// Type for Simplified  TIMETABLED PASSING TIME.
type TimetabledPassingTimeViewStructure struct {
	PassingTimeViewStructure
	// Timetabled Arrival time.
	ArrivalTime *string `xml:"ArrivalTime,omitempty" json:"ArrivalTime,omitempty"`
	// Arrival Day Offset from Start of Journey.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	// Timetabled departure time.
	DepartureTime *string `xml:"DepartureTime,omitempty" json:"DepartureTime,omitempty"`
	// Number of days after the starting departure time of the journey if  not same calendar day. Default is 0 for same day.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Timetabled waiting interval.
	WaitingTime *string `xml:"WaitingTime,omitempty" json:"WaitingTime,omitempty"`
	// Frequency of service.
	Headway *HeadwayIntervalStructure `xml:"Headway,omitempty" json:"Headway,omitempty"`
}

// TargetPassingTimeViewStructure represents the TargetPassingTime_ViewStructure element
// Type for Simplified  TARGET PASSING TIME.
type TargetPassingTimeViewStructure struct {
	PassingTimeViewStructure
	// Aimed Arrival time.
	AimedArrivalTime *string `xml:"AimedArrivalTime,omitempty" json:"AimedArrivalTime,omitempty"`
	// Arrival Day Offset from Start of Journey.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	// Aimed departure time.
	AimedDepartureTime *string `xml:"AimedDepartureTime,omitempty" json:"AimedDepartureTime,omitempty"`
	// DepartureDay Offset from Start of Journey.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Aimed waiting interval.
	AimedWaitingTime *string `xml:"AimedWaitingTime,omitempty" json:"AimedWaitingTime,omitempty"`
	// Aimed PASSING TIME if doesn't stop at TIMING POINT.
	AimedNonstopPassingTime *string `xml:"AimedNonstopPassingTime,omitempty" json:"AimedNonstopPassingTime,omitempty"`
	// Passing Day Offset from Start of Journey.
	PassingDayOffset *int `xml:"PassingDayOffset,omitempty" json:"PassingDayOffset,omitempty"`
	// Aimed Frequency of service.
	AimedHeadway *HeadwayIntervalStructure `xml:"AimedHeadway,omitempty" json:"AimedHeadway,omitempty"`
}

// DatedPassingTime represents the DatedPassingTime element
// DATED PASSING TIME.
type DatedPassingTime struct {
	DatedPassingTimeVersionedChildStructure
}

// TargetPassingTime represents the TargetPassingTime element
// TARGET PASSING TIME.
type TargetPassingTime struct {
	TargetPassingTimeVersionedChildStructure
}

// PassingTimeView represents the PassingTimeView element
// Simplified TARGET PASSING TIME.
type PassingTimeView struct {
	PassingTimeViewStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// TimetabledPassingTimeView represents the TimetabledPassingTimeView element
// Simplified TIMETABLED PASSING TIME.
type TimetabledPassingTimeView struct {
	TimetabledPassingTimeViewStructure
}

// TargetPassingTimeView represents the TargetPassingTimeView element
// Simplified TARGET PASSING TIME.
type TargetPassingTimeView struct {
	TargetPassingTimeViewStructure
}

// DatedVehicleJourneyRefStructure represents the DatedVehicleJourneyRefStructure element
// Type for a reference to a DATED VEHICLE JOURNEY.
type DatedVehicleJourneyRefStructure struct {
	VehicleJourneyRefStructure
}

// DatedSpecialServiceRefStructure represents the DatedSpecialServiceRefStructure element
// Type for a reference to a DATED SPECIAL SERVICE.
type DatedSpecialServiceRefStructure struct {
	SpecialServiceRefStructure
}

// DatedSpecialServiceRefsRelStructure represents the DatedSpecialServiceRefs_RelStructure element
// Type for a list references to a DATED SPECIAL SERVICE.
type DatedSpecialServiceRefsRelStructure struct {
	OneToManyRelationshipStructure
	DatedSpecialServiceRef DatedSpecialServiceRef `xml:"DatedSpecialServiceRef" json:"DatedSpecialServiceRef"`
}

// DatedVehicleJourneyRef represents the DatedVehicleJourneyRef element
// Reference to a DATED VEHICLE JOURNEY.
type DatedVehicleJourneyRef struct {
	VehicleJourneyRefStructure
}

// DatedSpecialServiceRef represents the DatedSpecialServiceRef element
// Reference to a DATED SPECIAL SERVICE.
type DatedSpecialServiceRef struct {
	DatedSpecialServiceRefStructure
}

// VehicleJourneyWaitTimesRelStructure represents the vehicleJourneyWaitTimes_RelStructure element
// Type for a list of VEHICLE JOURNEY WAIT TIMEs.
type VehicleJourneyWaitTimesRelStructure struct {
	StrictContainmentAggregationStructure
	VehicleJourneyWaitTime []VehicleJourneyWaitTime `xml:"VehicleJourneyWaitTime" json:"VehicleJourneyWaitTime"`
}

// VehicleJourneyWaitTimeVersionedChildStructure represents the VehicleJourneyWaitTime_VersionedChildStructure element
// Type for VEHICLE JOURNEY WAIT TIME.
type VehicleJourneyWaitTimeVersionedChildStructure struct {
	JourneyWaitTimeVersionedChildStructure
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
}

// VehicleJourneyRunTimesRelStructure represents the vehicleJourneyRunTimes_RelStructure element
// Type for a list of VEHICLE JOURNEY RUN TIMEs.
type VehicleJourneyRunTimesRelStructure struct {
	StrictContainmentAggregationStructure
	// VEHICLE JOURNEY RUN TIME for a specified TIME DEMAND TYPE.
	VehicleJourneyRunTime []VehicleJourneyRunTime `xml:"VehicleJourneyRunTime" json:"VehicleJourneyRunTime"`
}

// VehicleJourneyRunTimeVersionedChildStructure represents the VehicleJourneyRunTime_VersionedChildStructure element
// Type for VEHICLE JOURNEY RUN TIME.
type VehicleJourneyRunTimeVersionedChildStructure struct {
	JourneyRunTimeVersionedChildStructure
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
}

// VehicleJourneyLayoversRelStructure represents the vehicleJourneyLayovers_RelStructure element
// Type for a list of for a VEHICLE JOURNEY LAYOVERs.
type VehicleJourneyLayoversRelStructure struct {
	StrictContainmentAggregationStructure
	// VEHICLE JOURNEY LAYOVER for a specified TIME DEMAND TYPE.
	VehicleJourneyLayover []VehicleJourneyLayover `xml:"VehicleJourneyLayover" json:"VehicleJourneyLayover"`
}

// VehicleJourneyLayoverVersionedChildStructure represents the VehicleJourneyLayover_VersionedChildStructure element
// Type for a VEHICLE JOURNEY LAYOVER.
type VehicleJourneyLayoverVersionedChildStructure struct {
	JourneyLayoverStructure
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
}

// VehicleJourneyWaitTime represents the VehicleJourneyWaitTime element
// The time for a vehicle to wait at a particular TIMING POINT IN JOURNEY PATTERN on a specified VEHICLE JOURNEY. This wait time will override the JOURNEY PATTERN WAIT TIME.
type VehicleJourneyWaitTime struct {
	VehicleJourneyWaitTimeVersionedChildStructure
}

// VehicleJourneyRunTime represents the VehicleJourneyRunTime element
// The time taken to traverse a specified TIMING LINK IN JOURNEY PATTERN on a specified VEHICLE JOURNEY. This gives the most detailed control over times and overrides the DEFAULT SERVICE JOURNEY RUN TIME and JOURNEY PATTERN RUN TIME and the DEFAULT DEAD RUN RUN TIME. There may be different times for different TIME DEMAND TYPES.
type VehicleJourneyRunTime struct {
	VehicleJourneyRunTimeVersionedChildStructure
}

// VehicleJourneyLayover represents the VehicleJourneyLayover element
// A time allowance at the end of a specified VEHICLE JOURNEY. This time supersedes any global layover or JOURNEY PATTERN LAYOVER.
type VehicleJourneyLayover struct {
	VehicleJourneyLayoverVersionedChildStructure
}

// TrainNumbersInFrameRelStructure represents the trainNumbersInFrame_RelStructure element
// Type for containment in frame of TRAIN NUMBERs.
type TrainNumbersInFrameRelStructure struct {
	ContainmentAggregationStructure
	TrainNumber []TrainNumber `xml:"TrainNumber,omitempty" json:"TrainNumber,omitempty"`
	TrainNumberRef []TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
}

// VehicleJourneyStopAssignmentsInFrameRelStructure represents the vehicleJourneyStopAssignmentsInFrame_RelStructure element
// Type for containment in frame of VEHICLE JOURNEY STOP ASSIGNMENTs.
type VehicleJourneyStopAssignmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	// The allocation of a SCHEDULED STOP POINT (i.e. a SCHEDULED STOP POINT of a SERVICE PATTERN or JOURNEY PATTERN) to a specific STOP PLACE or QUAY, for either a Passenger JOURNEY or VEHICLE SERVICE.
	VehicleJourneyStopAssignment []VehicleJourneyStopAssignment `xml:"VehicleJourneyStopAssignment" json:"VehicleJourneyStopAssignment"`
}

// VehicleJourneyVersionStructure represents the VehicleJourney_VersionStructure element
// Type for VEHICLE JOURNEY.
type VehicleJourneyVersionStructure struct {
	JourneyVersionStructure
	// Time of departure.
	DepartureTime *string `xml:"DepartureTime,omitempty" json:"DepartureTime,omitempty"`
	// Day offset if day of departure time of VEHICLE JOURNEY differs from the current OPERATING DAY.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Frequency of Journey.
	Frequency *FrequencyStructure `xml:"Frequency,omitempty" json:"Frequency,omitempty"`
	// Total length of Journey. Can be computed from individual times.  Add to Departure time to obtain JOURNEY arrival time.
	JourneyDuration *string `xml:"JourneyDuration,omitempty" json:"JourneyDuration,omitempty"`
	// DAY TYPEs for Journey.
	DayTypes *DayTypeRefsRelStructure `xml:"dayTypes,omitempty" json:"dayTypes,omitempty"`
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	// Reference to a JOURNEY PATTERN.
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	// Reference to a TIME DEMAND TYPE used at start of JOURNEY.
	TimeDemandTypeRef *TimeDemandTypeRefStructure `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	TimingAlgorithmTypeRef *TimingAlgorithmTypeRef `xml:"TimingAlgorithmTypeRef,omitempty" json:"TimingAlgorithmTypeRef,omitempty"`
	RhythmicalJourneyGroupRef *RhythmicalJourneyGroupRef `xml:"RhythmicalJourneyGroupRef,omitempty" json:"RhythmicalJourneyGroupRef,omitempty"`
	HeadwayJourneyGroupRef *HeadwayJourneyGroupRef `xml:"HeadwayJourneyGroupRef,omitempty" json:"HeadwayJourneyGroupRef,omitempty"`
	JourneyFrequencyGroupRef *JourneyFrequencyGroupRef `xml:"JourneyFrequencyGroupRef,omitempty" json:"JourneyFrequencyGroupRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	// Reference to a BLOCK.
	BlockRef *BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	CourseOfJourneysRef *CourseOfJourneysRef `xml:"CourseOfJourneysRef,omitempty" json:"CourseOfJourneysRef,omitempty"`
	// Public code for JOURNEY.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	// Other TIME DEMAND TYPEs used in JOURNEY.
	TimeDemandTypes *TimeDemandTypeRefsRelStructure `xml:"timeDemandTypes,omitempty" json:"timeDemandTypes,omitempty"`
	// JOURNEY PARTs  of a JOURNEY - for a multi part JOURNEY only.
	Parts *JourneyPartsRelStructure `xml:"parts,omitempty" json:"parts,omitempty"`
	// Labelling of carriages for Train associated with JOURNEY.
	TrainComponentLabelAssignments *TrainComponentLabelAssignmentsRelStructure `xml:"trainComponentLabelAssignments,omitempty" json:"trainComponentLabelAssignments,omitempty"`
	// Niormal  VEHICLE STOP ASSIGNMENTs  for VEHICLE JOURNEY, +v1.1
	VehicleJourneyStopAssignments *VehicleJourneyStopAssignmentsRelStructure `xml:"vehicleJourneyStopAssignments,omitempty" json:"vehicleJourneyStopAssignments,omitempty"`
	// WAIT TIMEs for VEHICLE JOURNEY at different TIMING POINTs.
	WaitTimes *VehicleJourneyWaitTimesRelStructure `xml:"waitTimes,omitempty" json:"waitTimes,omitempty"`
	// Run times for VEHICLE JOURNEY over different TIMING LINKs.
	RunTimes *VehicleJourneyRunTimesRelStructure `xml:"runTimes,omitempty" json:"runTimes,omitempty"`
	// LAYOVER times for VEHICLE JOURNEY.
	Layovers *VehicleJourneyLayoversRelStructure `xml:"layovers,omitempty" json:"layovers,omitempty"`
	// PASSING TIMEs  for VEHICLE JOURNEY.
	PassingTimes *TimetabledPassingTimesRelStructure `xml:"passingTimes,omitempty" json:"passingTimes,omitempty"`
}

// TemplateVehicleJourneyVersionStructure represents the TemplateVehicleJourney_VersionStructure element
// Type for TEMP_LATE VEHICLE JOURNEY.
type TemplateVehicleJourneyVersionStructure struct {
	JourneyVersionStructure
	// Type of TEMPLATE VEHICLE JOURNEY.
	TemplateVehicleJourneyType *TemplateVehicleJourneyTypeEnumeration `xml:"TemplateVehicleJourneyType,omitempty" json:"TemplateVehicleJourneyType,omitempty"`
	// frequency groups defining Template journey. Can only be of one type.
	FrequencyGroups *FrequencyGroupsRelStructure `xml:"frequencyGroups,omitempty" json:"frequencyGroups,omitempty"`
}

// TrainNumberVersionStructure represents the TrainNumber_VersionStructure element
// Type for TRAIN NUMBER.
type TrainNumberVersionStructure struct {
	DataManagedObjectStructure
	// Description of TRAIN NUMBER.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// TRAIN NUMBER to use when advertising Train -If different from Id.
	ForAdvertisement *string `xml:"ForAdvertisement,omitempty" json:"ForAdvertisement,omitempty"`
	// TRAIN NUMBER to use for production    -If different from Id.
	ForProduction *string `xml:"ForProduction,omitempty" json:"ForProduction,omitempty"`
}

// TrainComponentLabelAssignmentsRelStructure represents the trainComponentLabelAssignments_RelStructure element
// Type for containment  of TRAIN COMPONENT NUMBER ASSIGNMENTs.
type TrainComponentLabelAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	TrainComponentLabelAssignmentRef []TrainComponentLabelAssignmentRef `xml:"TrainComponentLabelAssignmentRef,omitempty" json:"TrainComponentLabelAssignmentRef,omitempty"`
	TrainComponentLabelAssignment []TrainComponentLabelAssignment `xml:"TrainComponentLabelAssignment,omitempty" json:"TrainComponentLabelAssignment,omitempty"`
}

// TrainComponentLabelAssignmentVersionStructure represents the TrainComponentLabelAssignment_VersionStructure element
// Type for TRAIN COMPONENT NUMBER ASSIGNNMENT.
type TrainComponentLabelAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	// Label to assign.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	TrainComponentRef TrainComponentRef `xml:"TrainComponentRef" json:"TrainComponentRef"`
}

// VehicleTypeStopAssignmentsRelStructure represents the vehicleTypeStopAssignments_RelStructure element
// Type for containment  of  VEHICLE TYPE STOP ASSIGNNMENTs.
type VehicleTypeStopAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	VehicleTypeStopAssignmentRef []VehicleTypeStopAssignmentRef `xml:"VehicleTypeStopAssignmentRef,omitempty" json:"VehicleTypeStopAssignmentRef,omitempty"`
	// The allocation of a stopping position of a VEHICLE TYPE for a particular VEHICLE JOURNEY.
	VehicleTypeStopAssignment []VehicleTypeStopAssignment `xml:"VehicleTypeStopAssignment,omitempty" json:"VehicleTypeStopAssignment,omitempty"`
}

// VehicleTypeStopAssignmentVersionStructure represents the VehicleTypeStopAssignment_VersionStructure element
// Type for VEHICLE TYPE STOP ASSIGNNMENT.
type VehicleTypeStopAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	// Relative orientation of vehicle - Default is forwards.
	VehicleOrientation *VehicleOrientationEnumeration `xml:"VehicleOrientation,omitempty" json:"VehicleOrientation,omitempty"`
	VehicleStoppingPositionRef *VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
}

// TimingAlgorithmTypeValueStructure represents the TimingAlgorithmType_ValueStructure element
// Type for a TIMING ALGORITHM TYPE.
type TimingAlgorithmTypeValueStructure struct {
	TypeOfValueVersionStructure
}

// VehicleJourneyStopAssignmentsRelStructure represents the vehicleJourneyStopAssignments_RelStructure element
// Type for containment of VEHICLE JOURNEY STOP ASSIGNMENTs.
type VehicleJourneyStopAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	VehicleJourneyStopAssignmentRef []VehicleJourneyStopAssignmentRef `xml:"VehicleJourneyStopAssignmentRef,omitempty" json:"VehicleJourneyStopAssignmentRef,omitempty"`
	VehicleJourneyStopAssignment []VehicleJourneyStopAssignment `xml:"VehicleJourneyStopAssignment,omitempty" json:"VehicleJourneyStopAssignment,omitempty"`
}

// VehicleJourneyStopAssignmentVersionStructure represents the VehicleJourneyStopAssignment_VersionStructure element
// Type for VEHICLE JOURNER STOP ASSIGNMENT.
type VehicleJourneyStopAssignmentVersionStructure struct {
	PassengerStopAssignmentVersionStructure
	DeadRunRef []DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef []VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	VehicleJourneyStopAssignmentRef *VehicleJourneyStopAssignmentRef `xml:"VehicleJourneyStopAssignmentRef,omitempty" json:"VehicleJourneyStopAssignmentRef,omitempty"`
	DynamicStopAssignmentRef *DynamicStopAssignmentRef `xml:"DynamicStopAssignmentRef,omitempty" json:"DynamicStopAssignmentRef,omitempty"`
	PassengerStopAssignmentRef *PassengerStopAssignmentRef `xml:"PassengerStopAssignmentRef,omitempty" json:"PassengerStopAssignmentRef,omitempty"`
}

// VehicleJourney represents the VehicleJourney element
// The planned movement of a public transport vehicle on a DAY TYPE from the start point to the end point of a JOURNEY PATTERN on a specified ROUTE.
type VehicleJourney struct {
	VehicleJourneyVersionStructure
}

// TemplateVehicleJourney represents the TemplateVehicleJourney element
// A repeating VEHICLE JOURNEY for which a frequency has been specified, either as a HEADWAY JOURNEY GROUP (e.g. every 20 minutes) or a RHYTHMICAL JOURNEY GROUP  (e.g. at 15, 27 and 40 minutes past the hour). It may thus represent multiple journeys.
type TemplateVehicleJourney struct {
	TemplateVehicleJourneyVersionStructure
}

// TrainNumber represents the TrainNumber element
// Specification of codes assigned to particular VEHICLE JOURNEYs when operated by TRAINs of COMPOUND TRAINs according to a functional purpose (passenger information, operation follow-up, etc).
type TrainNumber struct {
	TrainNumberVersionStructure
}

// TrainComponentLabelAssignment represents the TrainComponentLabelAssignment element
// The allocation of an advertised designation for a vehicle or vehicle element for passengers.
type TrainComponentLabelAssignment struct {
	TrainComponentLabelAssignmentVersionStructure
}

// VehicleTypeStopAssignment represents the VehicleTypeStopAssignment element
// The allocation of a stopping position of a VEHICLE TYPE for a particular VEHICLE JOURNEY.
type VehicleTypeStopAssignment struct {
	VehicleTypeStopAssignmentVersionStructure
}

// TimingAlgorithmType represents the TimingAlgorithmType element
// Classification of a TIMING ALGORITHM.
type TimingAlgorithmType struct {
	TimingAlgorithmTypeValueStructure
}

// VehicleJourneyStopAssignment represents the VehicleJourneyStopAssignment element
// Change to a PASSENGER STOP ASSIGNMENT for a specific VEHICLE JOURNEY +v1.1
type VehicleJourneyStopAssignment struct {
	VehicleJourneyStopAssignmentVersionStructure
}

// GroupsOfServicesInFrameRelStructure represents the groupsOfServicesInFrame_RelStructure element
// Type for containment in frame of GROUP OF SERVICEs.
type GroupsOfServicesInFrameRelStructure struct {
	ContainmentAggregationStructure
	GroupOfServices []GroupOfServices `xml:"GroupOfServices" json:"GroupOfServices"`
}

// ServiceJourneyVersionStructure represents the ServiceJourney_VersionStructure element
// Data type for a planned VEHICLE JOURNEY (Production Timetable Service).
type ServiceJourneyVersionStructure struct {
	JourneyVersionStructure
	// Whether journey is as planned, a cancellation or an extra journey.  Default is as Planned.
	ServiceAlteration *ServiceAlterationEnumeration `xml:"ServiceAlteration,omitempty" json:"ServiceAlteration,omitempty"`
	// Time of departure.
	DepartureTime *string `xml:"DepartureTime,omitempty" json:"DepartureTime,omitempty"`
	// Day offset if day of departure time of VEHICLE JOURNEY differs from the current OPERATING DAY.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Frequency of Journey.
	Frequency *FrequencyStructure `xml:"Frequency,omitempty" json:"Frequency,omitempty"`
	// Total length of Journey. Can be computed from individual times.  Add to Departure time to obtain JOURNEY arrival time.
	JourneyDuration *string `xml:"JourneyDuration,omitempty" json:"JourneyDuration,omitempty"`
	// DAY TYPEs for Journey.
	DayTypes *DayTypeRefsRelStructure `xml:"dayTypes,omitempty" json:"dayTypes,omitempty"`
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	// Reference to a JOURNEY PATTERN.
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	// Reference to a TIME DEMAND TYPE used at start of JOURNEY.
	TimeDemandTypeRef *TimeDemandTypeRefStructure `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	TimingAlgorithmTypeRef *TimingAlgorithmTypeRef `xml:"TimingAlgorithmTypeRef,omitempty" json:"TimingAlgorithmTypeRef,omitempty"`
	RhythmicalJourneyGroupRef *RhythmicalJourneyGroupRef `xml:"RhythmicalJourneyGroupRef,omitempty" json:"RhythmicalJourneyGroupRef,omitempty"`
	HeadwayJourneyGroupRef *HeadwayJourneyGroupRef `xml:"HeadwayJourneyGroupRef,omitempty" json:"HeadwayJourneyGroupRef,omitempty"`
	JourneyFrequencyGroupRef *JourneyFrequencyGroupRef `xml:"JourneyFrequencyGroupRef,omitempty" json:"JourneyFrequencyGroupRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	OperationalContextRef *OperationalContextRef `xml:"OperationalContextRef,omitempty" json:"OperationalContextRef,omitempty"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	// Reference to a BLOCK.
	BlockRef *BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	CourseOfJourneysRef *CourseOfJourneysRef `xml:"CourseOfJourneysRef,omitempty" json:"CourseOfJourneysRef,omitempty"`
	// Public code for JOURNEY.
	PublicCode *string `xml:"PublicCode,omitempty" json:"PublicCode,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OperatorView *OperatorView `xml:"OperatorView,omitempty" json:"OperatorView,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	LineView *LineView `xml:"LineView,omitempty" json:"LineView,omitempty"`
	FlexibleLineView *FlexibleLineView `xml:"FlexibleLineView,omitempty" json:"FlexibleLineView,omitempty"`
	DirectionType *DirectionType `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	JourneyPatternView *JourneyPatternView `xml:"JourneyPatternView,omitempty" json:"JourneyPatternView,omitempty"`
	// Grouping of services  of a journey - for a multi-part journey only.
	GroupsOfServices *GroupOfServicesRefsRelStructure `xml:"groupsOfServices,omitempty" json:"groupsOfServices,omitempty"`
	// Other TIME DEMAND TYPEs used in journey.
	TimeDemandTypes *TimeDemandTypeRefsRelStructure `xml:"timeDemandTypes,omitempty" json:"timeDemandTypes,omitempty"`
	// TRAIN NUMBERs -= derived through JOURNEY PARTs  of a journey - for a multi-part journey only.
	TrainNumbers *TrainNumberRefsRelStructure `xml:"trainNumbers,omitempty" json:"trainNumbers,omitempty"`
	// Origin  for JOURNEY.
	Origin *JourneyEndpointStructure `xml:"Origin,omitempty" json:"Origin,omitempty"`
	// Destination  for JOURNEY.
	Destination *JourneyEndpointStructure `xml:"Destination,omitempty" json:"Destination,omitempty"`
	// Whether the journey is included in printed media. Default is true.
	Print *bool `xml:"Print,omitempty" json:"Print,omitempty"`
	// When SERVICE JOURNEY is to be publicised in dynamic media. Default is always.
	Dynamic *DynamicAdvertisementEnumeration `xml:"Dynamic,omitempty" json:"Dynamic,omitempty"`
	// WAIT TIMEs for VEHICLE JOURNEY at different TIMING POINTs.
	WaitTimes *VehicleJourneyWaitTimesRelStructure `xml:"waitTimes,omitempty" json:"waitTimes,omitempty"`
	// Run times for VEHICLE JOURNEY over different TIMING LINKs.
	RunTimes *VehicleJourneyRunTimesRelStructure `xml:"runTimes,omitempty" json:"runTimes,omitempty"`
	// LAYOVER times for VEHICLE JOURNEY.
	Layovers *VehicleJourneyLayoversRelStructure `xml:"layovers,omitempty" json:"layovers,omitempty"`
	// PASSING TIMEs  for VEHICLE JOURNEY.
	PassingTimes *TimetabledPassingTimesRelStructure `xml:"passingTimes,omitempty" json:"passingTimes,omitempty"`
	// JOURNEY PARTs of a journey - for a multi-part journey only.
	Parts *JourneyPartsRelStructure `xml:"parts,omitempty" json:"parts,omitempty"`
	// Complete sequence of stops along the route path, in calling order.
	Calls *CallsRelStructure `xml:"calls,omitempty" json:"calls,omitempty"`
	// FACILITies available associated with JOURNEY.
	Facilities *ServiceFacilitySetsRelStructure `xml:"facilities,omitempty" json:"facilities,omitempty"`
	// CHECK CONSTRAINTs  which apply to SERVICE JOURNEY, e.g. check in time, security time. These are advisory only and not for use in  journey planning.
	CheckConstraints *CheckConstraintsRelStructure `xml:"checkConstraints,omitempty" json:"checkConstraints,omitempty"`
	PassengerCarryingRequirementRef *PassengerCarryingRequirementRef `xml:"PassengerCarryingRequirementRef,omitempty" json:"PassengerCarryingRequirementRef,omitempty"`
	PassengerCarryingRequirementsView *PassengerCarryingRequirementsView `xml:"PassengerCarryingRequirementsView,omitempty" json:"PassengerCarryingRequirementsView,omitempty"`
	TrainSize *TrainSize `xml:"TrainSize,omitempty" json:"TrainSize,omitempty"`
	// VEHICLE EQUIPMENT available on service.
	Equipments *VehicleEquipmentsRelStructure `xml:"equipments,omitempty" json:"equipments,omitempty"`
	FlexibleServicePropertiesRef *FlexibleServicePropertiesRef `xml:"FlexibleServicePropertiesRef,omitempty" json:"FlexibleServicePropertiesRef,omitempty"`
	FlexibleServiceProperties *FlexibleServiceProperties `xml:"FlexibleServiceProperties,omitempty" json:"FlexibleServiceProperties,omitempty"`
}

// JourneyEndpointStructure represents the JourneyEndpointStructure element
// Data type for Planned VEHICLE JOURNEY (Production Timetable Service).
type JourneyEndpointStructure struct {
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	PlaceRef *PlaceRef `xml:"PlaceRef,omitempty" json:"PlaceRef,omitempty"`
}

// TemplateServiceJourneyVersionStructure represents the TemplateServiceJourney_VersionStructure element
// Type for TEMPLATE VEHICLE JOURNEY.
type TemplateServiceJourneyVersionStructure struct {
	ServiceJourneyVersionStructure
	// Type of TEMPLATE VEHICLE JOURNEY.
	TemplateVehicleJourneyType *TemplateVehicleJourneyTypeEnumeration `xml:"TemplateVehicleJourneyType,omitempty" json:"TemplateVehicleJourneyType,omitempty"`
	// frequency groups defining Template journey. Can only be of one type.
	FrequencyGroups *FrequencyGroupsRelStructure `xml:"frequencyGroups,omitempty" json:"frequencyGroups,omitempty"`
}

// SpecialServicesRelStructure represents the specialServices_RelStructure element
// Type for a list of SPECIAL SERVICE s.
type SpecialServicesRelStructure struct {
	ContainmentAggregationStructure
	DatedSpecialServiceRef []DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef []SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	SpecialService []SpecialService `xml:"SpecialService,omitempty" json:"SpecialService,omitempty"`
}

// SpecialServiceVersionStructure represents the SpecialService_VersionStructure element
// Type for SPECIAL SERVICE.
type SpecialServiceVersionStructure struct {
	JourneyVersionStructure
	// Time of departure.
	DepartureTime *string `xml:"DepartureTime,omitempty" json:"DepartureTime,omitempty"`
	// Day offset if day of departure time of VEHICLE JOURNEY differs from the current OPERATING DAY.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Frequency of Journey.
	Frequency *FrequencyStructure `xml:"Frequency,omitempty" json:"Frequency,omitempty"`
	// Total length of Journey. Can be computed from individual times.  Add to Departure time to obtain JOURNEY arrival time.
	JourneyDuration *string `xml:"JourneyDuration,omitempty" json:"JourneyDuration,omitempty"`
	// Client of Special Service.
	Client *MultilingualString `xml:"Client,omitempty" json:"Client,omitempty"`
	// DAY TYPEs for Journey.
	DayTypes *DayTypeRefsRelStructure `xml:"dayTypes,omitempty" json:"dayTypes,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	// Reference to a JOURNEY PATTERN.
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	// Origin  for JOURNEY.
	Origin *JourneyEndpointStructure `xml:"Origin,omitempty" json:"Origin,omitempty"`
	// Destination  for JOURNEY.
	Destination *JourneyEndpointStructure `xml:"Destination,omitempty" json:"Destination,omitempty"`
	// Whether the journey is included in printed media. Default is true.
	Print *bool `xml:"Print,omitempty" json:"Print,omitempty"`
	// When SERVICE JOURNEY is to be publicised in dynamic media. Default is always.
	Dynamic *DynamicAdvertisementEnumeration `xml:"Dynamic,omitempty" json:"Dynamic,omitempty"`
	TypeOfFlexibleServiceRef *TypeOfFlexibleServiceRef `xml:"TypeOfFlexibleServiceRef,omitempty" json:"TypeOfFlexibleServiceRef,omitempty"`
	// Flexible service type is FixedPassingTimes/DynamicPassingTimes/FixedHeadwayFrequency (in the last value, this provides a maximum waiting time, but no passing time is defined, all is done dynamically depending on the demand). A NotFlexible value is probably also required to clearly state that a Stop (i.e. Point in JP) is not flexible when others are.
	FlexibleServiceType *FlexibleServiceEnumeration `xml:"FlexibleServiceType,omitempty" json:"FlexibleServiceType,omitempty"`
	// Whether cancellation is always possible (meaning the Operator can decided to cancel, usually because there are not enough people, or they are too busy to run service).
	CancellationPossible *bool `xml:"CancellationPossible,omitempty" json:"CancellationPossible,omitempty"`
	// Whether the time of the service may be altered.
	ChangeOfTimePossible *bool `xml:"ChangeOfTimePossible,omitempty" json:"ChangeOfTimePossible,omitempty"`
	// Contact for Booking. +v1.1
	BookingContact *ContactStructure `xml:"BookingContact,omitempty" json:"BookingContact,omitempty"`
	// Allowed Ways of Making a BOOKING.
	BookingMethods *BookingMethodEnumeration `xml:"BookingMethods,omitempty" json:"BookingMethods,omitempty"`
	// Who can make a booking. Default is public.
	BookingAccess *BookingAccessEnumeration `xml:"BookingAccess,omitempty" json:"BookingAccess,omitempty"`
	// When Booking can be made. +V1.1
	BookWhen *PurchaseWhenEnumeration `xml:"BookWhen,omitempty" json:"BookWhen,omitempty"`
	// When purchase can be made.  +V1.1
	BuyWhen *PurchaseMomentEnumeration `xml:"BuyWhen,omitempty" json:"BuyWhen,omitempty"`
	// Latest time in day that booking can be made.
	LatestBookingTime *string `xml:"LatestBookingTime,omitempty" json:"LatestBookingTime,omitempty"`
	// Minimum interval in advance of departure day or time that Service may be ordered.
	MinimumBookingPeriod *string `xml:"MinimumBookingPeriod,omitempty" json:"MinimumBookingPeriod,omitempty"`
	// Maximum interval in advance of departure day or time that Service may be ordered. +V1.2..2
	MaximumBookingPeriod *string `xml:"MaximumBookingPeriod,omitempty" json:"MaximumBookingPeriod,omitempty"`
	// URL for booking. +V1.1
	BookingUrl *string `xml:"BookingUrl,omitempty" json:"BookingUrl,omitempty"`
	// Note about booking the FLEXIBLE LINE.
	BookingNote *MultilingualString `xml:"BookingNote,omitempty" json:"BookingNote,omitempty"`
}

// GroupOfServicesVersionStructure represents the GroupOfServices_VersionStructure element
// Type for a GROUP OF SERVICEs.
type GroupOfServicesVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// The DAY TYPEs of all the services in this group.
	DayTypes *DayTypes `xml:"dayTypes,omitempty" json:"dayTypes,omitempty"`
	DirectionType *DirectionType `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	DirectionRef *DirectionRef `xml:"DirectionRef,omitempty" json:"DirectionRef,omitempty"`
	DirectionView *DirectionView `xml:"DirectionView,omitempty" json:"DirectionView,omitempty"`
	// Origin associated with this GROUP OF SERVICEs.
	Origin *GroupOfServicesEndPointDerivedViewStructure `xml:"Origin,omitempty" json:"Origin,omitempty"`
	// Destination associated with this GROUP OF SERVICEs.
	Destination *GroupOfServicesEndPointDerivedViewStructure `xml:"Destination,omitempty" json:"Destination,omitempty"`
	// Destinations associated with this GROUP OF SERVICEs, including via points.
	DestinationDisplays *DestinationDisplayRefsRelStructure `xml:"destinationDisplays,omitempty" json:"destinationDisplays,omitempty"`
	// Services in GROUP.
	Members *GroupOfServicesMembersRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	// NOTICEs  relevant for the whole GROUP OF SERVICEs.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// DayTypes represents the dayTypes element
type DayTypes struct {
	// The DAY TYPE of all the services in this group.
	DayTypeRef []DayTypeRefStructure `xml:"DayTypeRef" json:"DayTypeRef"`
}

// GroupOfServicesEndPointDerivedViewStructure represents the GroupOfServicesEndPoint_DerivedViewStructure element
// Type for SIMPLE SCHEDULED STOP POINT VIEW.
type GroupOfServicesEndPointDerivedViewStructure struct {
	DerivedViewStructure
	// Name of Stop Point.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	DestinationDisplayRef *DestinationDisplayRef `xml:"DestinationDisplayRef,omitempty" json:"DestinationDisplayRef,omitempty"`
	TopographicPlaceView *TopographicPlaceView `xml:"TopographicPlaceView,omitempty" json:"TopographicPlaceView,omitempty"`
}

// GroupOfServicesMembersRelStructure represents the groupOfServicesMembers_RelStructure element
// Type for a list of Member of GROUP OF SERVICE Member.
type GroupOfServicesMembersRelStructure struct {
	StrictContainmentAggregationStructure
	// Member of GROUP OF SERVICE Garage Member.
	GroupOfServicesMember []GroupOfServicesMemberStructure `xml:"GroupOfServicesMember" json:"GroupOfServicesMember"`
}

// GroupOfServicesMemberStructure represents the GroupOfServicesMemberStructure element
// Type for a Member of GROUP OF SERVICE Member.
type GroupOfServicesMemberStructure struct {
	AbstractGroupMemberVersionedChildStructure
	// Parent  GROUP OF SERVICEs to which this  GROUP OF SERVICEs MEMBER assigns a JOURNEY.
	GroupOfServicesRef *GroupOfServicesRefStructure `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	TrainNumberRef *TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	JourneyDesignator *JourneyDesignator `xml:"JourneyDesignator,omitempty" json:"JourneyDesignator,omitempty"`
	ServiceDesignator *ServiceDesignator `xml:"ServiceDesignator,omitempty" json:"ServiceDesignator,omitempty"`
	// NOTICEs  Relevant for this grouping.
	NoticeAssignments *NoticeAssignmentViewsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// DeadRunVersionStructure represents the DeadRun_VersionStructure element
// Type for DEAD RUN.
type DeadRunVersionStructure struct {
	VehicleJourneyVersionStructure
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	DirectionType *DirectionType `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	// GROUPS OF SERVICEs to which a DEAD RUN belongs.
	GroupsOfServices *GroupOfServicesRefsRelStructure `xml:"groupsOfServices,omitempty" json:"groupsOfServices,omitempty"`
	// TRAIN NUMBERs -= derived through JOURNEY PARTs  of a JOURNEY - for a multi-part JOURNEY only.
	TrainNumbers *TrainNumberRefsRelStructure `xml:"trainNumbers,omitempty" json:"trainNumbers,omitempty"`
	// Origin  for DEAD RUN. Can be Derived from JORUNEY PATTERN.
	Origin *DeadRunEndpointStructure `xml:"Origin,omitempty" json:"Origin,omitempty"`
	// Destination  for DEAD RUN. Can be derived from JORUNEY PATTERN.
	Destination *DeadRunEndpointStructure `xml:"Destination,omitempty" json:"Destination,omitempty"`
	// Type of DEAD RUN.
	DeadRunType *DeadRunTypeEnumeration `xml:"DeadRunType,omitempty" json:"DeadRunType,omitempty"`
}

// DeadRunEndpointStructure represents the DeadRunEndpointStructure element
// Type for  DEAD RUN ENDPOINT (Production Timetable Service). Should not Contradict EDEAD RUN JOURNEY PATTERN.
type DeadRunEndpointStructure struct {
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	WirePointRef *WirePointRef `xml:"WirePointRef,omitempty" json:"WirePointRef,omitempty"`
	RoadPointRef *RoadPointRef `xml:"RoadPointRef,omitempty" json:"RoadPointRef,omitempty"`
	RailwayPointRef *RailwayPointRef `xml:"RailwayPointRef,omitempty" json:"RailwayPointRef,omitempty"`
	TrafficControlPointRef *TrafficControlPointRef `xml:"TrafficControlPointRef,omitempty" json:"TrafficControlPointRef,omitempty"`
	BeaconPointRef *BeaconPointRef `xml:"BeaconPointRef,omitempty" json:"BeaconPointRef,omitempty"`
	ActivationPointRef *ActivationPointRef `xml:"ActivationPointRef,omitempty" json:"ActivationPointRef,omitempty"`
	BorderPointRef *BorderPointRef `xml:"BorderPointRef,omitempty" json:"BorderPointRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	GaragePointRef *GaragePointRef `xml:"GaragePointRef,omitempty" json:"GaragePointRef,omitempty"`
	ParkingPointRef *ParkingPointRef `xml:"ParkingPointRef,omitempty" json:"ParkingPointRef,omitempty"`
	ReliefPointRef *ReliefPointRef `xml:"ReliefPointRef,omitempty" json:"ReliefPointRef,omitempty"`
	TimingPointRef *TimingPointRef `xml:"TimingPointRef,omitempty" json:"TimingPointRef,omitempty"`
	RoutePointRef *RoutePointRef `xml:"RoutePointRef,omitempty" json:"RoutePointRef,omitempty"`
	PointRef *PointRef `xml:"PointRef,omitempty" json:"PointRef,omitempty"`
	TypeOfPointRef *TypeOfPointRef `xml:"TypeOfPointRef,omitempty" json:"TypeOfPointRef,omitempty"`
}

// DeadRunWithCallsVersionStructure represents the DeadRunWithCalls_VersionStructure element
// Type for  DEAD RUN.
type DeadRunWithCallsVersionStructure struct {
	DeadRunVersionStructure
	// Complete sequence of stops along the route path, in calling order.
	Calls *DeadRunCallsRelStructure `xml:"calls,omitempty" json:"calls,omitempty"`
}

// ServiceJourney represents the ServiceJourney element
// A passenger carrying VEHICLE JOURNEY for one specified DAY TYPE. The pattern of working is in principle defined by a SERVICE JOURNEY PATTERN.
// 
// The VIEW includes derived ancillary data from referenced entities.
type ServiceJourney struct {
	ServiceJourneyVersionStructure
}

// TemplateServiceJourney represents the TemplateServiceJourney element
// A VEHICLE JOURNEY with a set of frequencies that may be used to represent a set of similar journeys differing only by their time of departure.
type TemplateServiceJourney struct {
	TemplateServiceJourneyVersionStructure
}

// SpecialService represents the SpecialService element
// A passenger carrying VEHICLE JOURNEY for one specified DAY TYPE. The pattern of working is in principle defined by a SERVICE JOURNEY PATTERN.
type SpecialService struct {
	SpecialServiceVersionStructure
}

// GroupOfServices represents the GroupOfServices element
// A group of SERVICEs, often known to its users by a name or a number.
type GroupOfServices struct {
	GroupOfServicesVersionStructure
}

// DeadRun represents the DeadRun element
// A non-service VEHICLE JOURNEY.
type DeadRun struct {
	DeadRunWithCallsVersionStructure
}

// PassengerJourneysInFrameRelStructure represents the passengerJourneysInFrame_RelStructure element
// Type for containment in frame of  passenger  JOURNEYs.
type PassengerJourneysInFrameRelStructure struct {
	ContainmentAggregationStructure
	DatedServiceJourney []DatedServiceJourney `xml:"DatedServiceJourney,omitempty" json:"DatedServiceJourney,omitempty"`
	ServiceJourney []ServiceJourney `xml:"ServiceJourney,omitempty" json:"ServiceJourney,omitempty"`
	SpecialService []SpecialService `xml:"SpecialService,omitempty" json:"SpecialService,omitempty"`
	TemplateServiceJourney []TemplateServiceJourney `xml:"TemplateServiceJourney,omitempty" json:"TemplateServiceJourney,omitempty"`
}

// JourneysInFrameRelStructure represents the journeysInFrame_RelStructure element
// Type for containment in frame of  all JOURNEYs.
type JourneysInFrameRelStructure struct {
	ContainmentAggregationStructure
	VehicleJourney []VehicleJourney `xml:"VehicleJourney,omitempty" json:"VehicleJourney,omitempty"`
	DatedVehicleJourney []DatedVehicleJourney `xml:"DatedVehicleJourney,omitempty" json:"DatedVehicleJourney,omitempty"`
	NormalDatedVehicleJourney []NormalDatedVehicleJourney `xml:"NormalDatedVehicleJourney,omitempty" json:"NormalDatedVehicleJourney,omitempty"`
	ServiceJourney []ServiceJourney `xml:"ServiceJourney,omitempty" json:"ServiceJourney,omitempty"`
	DatedServiceJourney []DatedServiceJourney `xml:"DatedServiceJourney,omitempty" json:"DatedServiceJourney,omitempty"`
	DeadRun []DeadRun `xml:"DeadRun,omitempty" json:"DeadRun,omitempty"`
	SpecialService []SpecialService `xml:"SpecialService,omitempty" json:"SpecialService,omitempty"`
	// A VEHICLE JOURNEY with a set of frequencies that may be used to represent a set of similar journeys differing only by their time of departure.
	TemplateServiceJourney []TemplateServiceJourney `xml:"TemplateServiceJourney,omitempty" json:"TemplateServiceJourney,omitempty"`
}

// DatedVehicleJourneyVersionStructure represents the DatedVehicleJourney_VersionStructure element
// Type for DATED VEHICLE JOURNEY.
type DatedVehicleJourneyVersionStructure struct {
	VehicleJourneyVersionStructure
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	OperatingDayRef OperatingDayRef `xml:"OperatingDayRef" json:"OperatingDayRef"`
	// An alternative  code that uniquely identifies theDATED  VEHICLE  JOURNEY. Specifically for use in AVMS systems. For VDV compatibility.
	ExternalDatedVehicleJourneyRef *ExternalObjectRefStructure `xml:"ExternalDatedVehicleJourneyRef,omitempty" json:"ExternalDatedVehicleJourneyRef,omitempty"`
	// Reference to a JOURNEY PATTERN.
	DatedJourneyPatternRef *JourneyPatternRefStructure `xml:"DatedJourneyPatternRef,omitempty" json:"DatedJourneyPatternRef,omitempty"`
	DriverRef *DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
	// PASSING TIMEs  for JOURNEY.
	DatedPassingTimes *TargetPassingTimesRelStructure `xml:"datedPassingTimes,omitempty" json:"datedPassingTimes,omitempty"`
	// DATED CALLs  for JOURNEY.
	DatedCalls *DatedCallsRelStructure `xml:"datedCalls,omitempty" json:"datedCalls,omitempty"`
}

// DatedServiceJourneyVersionStructure represents the DatedServiceJourney_VersionStructure element
// Data type for Planned VEHICLE JOURNEY (Production Timetable Service).
type DatedServiceJourneyVersionStructure struct {
	ServiceJourneyVersionStructure
	OperatingDayRef *OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	UicOperatingPeriod *UicOperatingPeriod `xml:"UicOperatingPeriod,omitempty" json:"UicOperatingPeriod,omitempty"`
	DriverRef *DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
}

// NormalDatedVehicleJourneyVersionStructure represents the NormalDatedVehicleJourney_VersionStructure element
// Type for NORMAL DATED VEHICLE JOURNEY.
type NormalDatedVehicleJourneyVersionStructure struct {
	DatedVehicleJourneyVersionStructure
	// Type of Service alteration. Default is planned.
	ServiceAlterationType *ServiceAlterationEnumeration `xml:"ServiceAlterationType,omitempty" json:"ServiceAlterationType,omitempty"`
}

// DatedSpecialServiceVersionStructure represents the DatedSpecialService_VersionStructure element
// Type for DATED SPECIAL SERVICE.
type DatedSpecialServiceVersionStructure struct {
	SpecialServiceVersionStructure
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	DatedVehicleJourneyRef *DatedVehicleJourneyRef `xml:"DatedVehicleJourneyRef,omitempty" json:"DatedVehicleJourneyRef,omitempty"`
	DatedSpecialServiceRef *DatedSpecialServiceRef `xml:"DatedSpecialServiceRef,omitempty" json:"DatedSpecialServiceRef,omitempty"`
	SpecialServiceRef *SpecialServiceRef `xml:"SpecialServiceRef,omitempty" json:"SpecialServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	OperatingDayRef OperatingDayRef `xml:"OperatingDayRef" json:"OperatingDayRef"`
	// An alternative  code that uniquely identifies theDATED  VEHICLE  JOURNEY. Specifically for use in AVMS systems. For VDV compatibility.
	ExternalDatedVehicleJourneyRef *ExternalObjectRefStructure `xml:"ExternalDatedVehicleJourneyRef,omitempty" json:"ExternalDatedVehicleJourneyRef,omitempty"`
	// Reference to a JOURNEY PATTERN.
	DatedJourneyPatternRef *JourneyPatternRefStructure `xml:"DatedJourneyPatternRef,omitempty" json:"DatedJourneyPatternRef,omitempty"`
	DriverRef *DriverRef `xml:"DriverRef,omitempty" json:"DriverRef,omitempty"`
	// PASSING TIMEs  for JOURNEY.
	DatedPassingTimes *TargetPassingTimesRelStructure `xml:"datedPassingTimes,omitempty" json:"datedPassingTimes,omitempty"`
	// DATED CALLs  for JOURNEY.
	DatedCalls *DatedCallsRelStructure `xml:"datedCalls,omitempty" json:"datedCalls,omitempty"`
}

// DatedVehicleJourney represents the DatedVehicleJourney element
// A particular journey of a vehicle on a particular OPERATING DAY including all modifications possibly decided by the control staff.
type DatedVehicleJourney struct {
	DatedVehicleJourneyVersionStructure
}

// DatedServiceJourney represents the DatedServiceJourney element
// A particular journey of a vehicle on a particular OPERATING DAY including all modifications possibly decided by the control staff. 
// 
// The VIEW includes derived ancillary data from referenced entities.
type DatedServiceJourney struct {
	DatedServiceJourneyVersionStructure
}

// NormalDatedVehicleJourney represents the NormalDatedVehicleJourney element
// A DATED VEHICLE JOURNEY identical to a long-term planned VEHICLE JOURNEY, possibly updated according to short-term modifications of the PRODUCTION PLAN decided by the control staff.
type NormalDatedVehicleJourney struct {
	NormalDatedVehicleJourneyVersionStructure
}

// DatedSpecialService represents the DatedSpecialService element
// A particular journey of a vehicle on a particular OPERATING DAY including all modifications possibly decided by the control staff.
type DatedSpecialService struct {
	DatedSpecialServiceVersionStructure
}

// TimeDemandProfileVersionStructure represents the TimeDemandProfile_VersionStructure element
// Type for TIME DEMAND PROFILE.
type TimeDemandProfileVersionStructure struct {
	DataManagedObjectStructure
	// Name of Profile.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	TimebandRef *TimebandRef `xml:"TimebandRef,omitempty" json:"TimebandRef,omitempty"`
	ServiceJourneyPatternRef *ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	ServicePatternRef *ServicePatternRef `xml:"ServicePatternRef,omitempty" json:"ServicePatternRef,omitempty"`
	DeadRunJourneyPatternRef *DeadRunJourneyPatternRef `xml:"DeadRunJourneyPatternRef,omitempty" json:"DeadRunJourneyPatternRef,omitempty"`
	JourneyPatternRef *JourneyPatternRef `xml:"JourneyPatternRef,omitempty" json:"JourneyPatternRef,omitempty"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
	VehicleJourneyRef *VehicleJourneyRef `xml:"VehicleJourneyRef,omitempty" json:"VehicleJourneyRef,omitempty"`
	Members *TimeDemandProfileMembersRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// TimeDemandProfileMembersRelStructure represents the timeDemandProfileMembers_RelStructure element
// A collection of one or more TIME DEMAND PROFILE member.
type TimeDemandProfileMembersRelStructure struct {
	StrictContainmentAggregationStructure
	TimeDemandProfileMember []TimeDemandProfileMember `xml:"TimeDemandProfileMember" json:"TimeDemandProfileMember"`
}

// TimeDemandProfileMemberVersionStructure represents the TimeDemandProfileMember_VersionStructure element
// Type for TIME DEMAND PROFILE Member.
type TimeDemandProfileMemberVersionStructure struct {
	GroupMemberVersionedChildStructure
	// Name of TIME DEMAND PROFILE MEMBER.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	JourneyPatternRunTime *JourneyPatternRunTime `xml:"JourneyPatternRunTime,omitempty" json:"JourneyPatternRunTime,omitempty"`
}

// TimeDemandProfile represents the TimeDemandProfile element
// TIME DEMAND PROFILE.
type TimeDemandProfile struct {
	TimeDemandProfileVersionStructure
}

// TimeDemandProfileMember represents the TimeDemandProfileMember element
// TIME DEMAND PROFILE member.
type TimeDemandProfileMember struct {
	TimeDemandProfileMemberVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// DefaultServiceJourneyRunTimesRelStructure represents the defaultServiceJourneyRunTimes_RelStructure element
// Type for a list of properties of DEFAULT SERVICE JOURNEY / RUN TIME.
type DefaultServiceJourneyRunTimesRelStructure struct {
	StrictContainmentAggregationStructure
	// DEFAULT SERVICE JOURNEY / RUN TIME for a specified TIME DEMAND TYPE.
	DefaultServiceJourneyRunTime []DefaultServiceJourneyRunTime `xml:"DefaultServiceJourneyRunTime" json:"DefaultServiceJourneyRunTime"`
}

// DefaultServiceJourneyRunTimeVersionedChildStructure represents the DefaultServiceJourneyRunTime_VersionedChildStructure element
// Type for DEFAULT SERVICE JOURNEY / RUN TIME.
type DefaultServiceJourneyRunTimeVersionedChildStructure struct {
	JourneyTimingVersionedChildStructure
	// Run time as interval.
	RunTime string `xml:"RunTime" json:"RunTime"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
}

// DefaultDeadRunRunTimesRelStructure represents the defaultDeadRunRunTimes_RelStructure element
// Type for a list of properties of DEFAULT DEAD RUN / RUN TIME.
type DefaultDeadRunRunTimesRelStructure struct {
	StrictContainmentAggregationStructure
	DefaultDeadRunRunTime []DefaultDeadRunRunTime `xml:"DefaultDeadRunRunTime" json:"DefaultDeadRunRunTime"`
}

// DefaultDeadRunRunTimeVersionedChildStructure represents the DefaultDeadRunRunTime_VersionedChildStructure element
// Type for DEFAULT DEAD RUN / RUN TIME.
type DefaultDeadRunRunTimeVersionedChildStructure struct {
	JourneyTimingVersionedChildStructure
	// Run time as interval.
	RunTime string `xml:"RunTime" json:"RunTime"`
	DeadRunRef *DeadRunRef `xml:"DeadRunRef,omitempty" json:"DeadRunRef,omitempty"`
}

// DefaultServiceJourneyRunTime represents the DefaultServiceJourneyRunTime element
// The default time taken by a vehicle to traverse a TIMING LINK during a SERVICE JOURNEY, for a specified TIME DEMAND TYPE. This time may be superseded by the JOURNEY PATTERN RUN TIME or VEHICLE JOURNEY RUN TIME if these exist.
type DefaultServiceJourneyRunTime struct {
	DefaultServiceJourneyRunTimeVersionedChildStructure
}

// DefaultDeadRunRunTime represents the DefaultDeadRunRunTime element
// The time taken to traverse a TIMING LINK during a DEAD RUN, for a specified TIME DEMAND TYPE. This time may be superseded by the JOURNEY PATTERN RUN TIME or VEHICLE JOURNEY RUN TIME if these exist.
type DefaultDeadRunRunTime struct {
	DefaultDeadRunRunTimeVersionedChildStructure
}

// TimetableFrameRefStructure represents the TimetableFrameRefStructure element
// Type for Reference to a TIMETABLE FRAME.
type TimetableFrameRefStructure struct {
	VersionFrameRefStructure
}

// VehicleScheduleFrameRefStructure represents the VehicleScheduleFrameRefStructure element
// Type for Reference to a VEHICLE SCHEDULE FRAME.
type VehicleScheduleFrameRefStructure struct {
	VersionFrameRefStructure
}

// DriverScheduleFrameRefStructure represents the DriverScheduleFrameRefStructure element
// Type for Reference to a DRIVER SCHEDULE FRAME.
type DriverScheduleFrameRefStructure struct {
	VersionFrameRefStructure
}

// TimetableFrameRef represents the TimetableFrameRef element
// Reference to a TIMETABLE FRAME.
type TimetableFrameRef struct {
	TimetableFrameRefStructure
}

// VehicleScheduleFrameRef represents the VehicleScheduleFrameRef element
// Reference to a VEHICLE SCHEDULE FRAME.
type VehicleScheduleFrameRef struct {
	VehicleScheduleFrameRefStructure
}

// DriverScheduleFrameRef represents the DriverScheduleFrameRef element
// Reference to a DRIVER SCHEDULE FRAME.
type DriverScheduleFrameRef struct {
	DriverScheduleFrameRefStructure
}

// DutiesInFrameRelStructure represents the dutiesInFrame_RelStructure element
// Type for containment in frame of DUTies.
type DutiesInFrameRelStructure struct {
	ContainmentAggregationStructure
	Duty []Duty `xml:"Duty" json:"Duty"`
}

// DutyPartsInFrameRelStructure represents the dutyPartsInFrame_RelStructure element
// Type for containment in frame of DUTY PARTs.
type DutyPartsInFrameRelStructure struct {
	ContainmentAggregationStructure
	DutyPart []DutyPart `xml:"DutyPart" json:"DutyPart"`
}

// DriverTripsInFrameRelStructure represents the driverTripsInFrame_RelStructure element
// Type for containment in frame of DRIVER TRIPs.
type DriverTripsInFrameRelStructure struct {
	ContainmentAggregationStructure
	DriverTrip []DriverTrip `xml:"DriverTrip" json:"DriverTrip"`
}

// DutyVersionStructure represents the Duty_VersionStructure element
// Type for DUTY.
type DutyVersionStructure struct {
	DataManagedObjectStructure
	// Description of DUTY.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Time to complete DUTY.
	FinishingDuration *string `xml:"FinishingDuration,omitempty" json:"FinishingDuration,omitempty"`
	// Time to complete DUTY.
	PreparationDuration *string `xml:"PreparationDuration,omitempty" json:"PreparationDuration,omitempty"`
	TimetableFrameRef *TimetableFrameRef `xml:"TimetableFrameRef,omitempty" json:"TimetableFrameRef,omitempty"`
	// Parts of a DUTY.
	DutyParts *DutyPartsRelStructure `xml:"dutyParts,omitempty" json:"dutyParts,omitempty"`
}

// AccountableElementStructure represents the AccountableElementStructure element
// Type for ACCOUNTABLE ELEMENT.
type AccountableElementStructure struct {
	DataManagedObjectStructure
	// Description of ACCOUNTABLE ELEMENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// How long a time shoudl be used for the the ACCOUNTABLE ELEMENT.
	AccountingTime *string `xml:"AccountingTime,omitempty" json:"AccountingTime,omitempty"`
	// Accounting Factor to use for the the ACCOUNTABLE ELEMENT.
	AccountingFactor *string `xml:"AccountingFactor,omitempty" json:"AccountingFactor,omitempty"`
	// Time to prepare ACCOUNTABLE ELEMENT.
	PreparationDuration *string `xml:"PreparationDuration,omitempty" json:"PreparationDuration,omitempty"`
	// Time to complete ACCOUNTABLE ELEMENT.
	FinishingDuration *string `xml:"FinishingDuration,omitempty" json:"FinishingDuration,omitempty"`
}

// DutyPartsRelStructure represents the dutyParts_RelStructure element
// Type for a list of DUTY PARTs.
type DutyPartsRelStructure struct {
	ContainmentAggregationStructure
	DutyPartRef []DutyPartRef `xml:"DutyPartRef,omitempty" json:"DutyPartRef,omitempty"`
	// An area within a Site. May be connected to Quays by PATH LINKs.
	DutyPart []DutyPart `xml:"DutyPart,omitempty" json:"DutyPart,omitempty"`
}

// DutyPartVersionStructure represents the DutyPart_VersionStructure element
// Type for a DUTY PART.
type DutyPartVersionStructure struct {
	AccountableElementStructure
	// Time for DRIVER to access DUTY PART.
	DriverAccessDuration *string `xml:"DriverAccessDuration,omitempty" json:"DriverAccessDuration,omitempty"`
	// Time for DRIVER to return from DUTY PART.
	DriverReturnDuration *string `xml:"DriverReturnDuration,omitempty" json:"DriverReturnDuration,omitempty"`
	DutyRef *DutyRef `xml:"DutyRef,omitempty" json:"DutyRef,omitempty"`
	// Start time.
	StartTime *string `xml:"StartTime,omitempty" json:"StartTime,omitempty"`
	// Day offset for start time. Number of days after the current operating day for Duty y . Default is 0 for same day.
	DayOffset *int `xml:"DayOffset,omitempty" json:"DayOffset,omitempty"`
	// End time.
	EndTime *string `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
	// Day offset for end time. Number of days after the starting departure time of the journey if  not same calendar day as starting timey. Default is 0 for same day.
	EndDayOffset *int `xml:"EndDayOffset,omitempty" json:"EndDayOffset,omitempty"`
	// TIMING POINT at which DUTY PART starts.
	StartPointRef *TimingPointRefStructure `xml:"StartPointRef,omitempty" json:"StartPointRef,omitempty"`
	// TIMING POINT at which DUTY PART starts.
	EndPointRef *TimingPointRefStructure `xml:"EndPointRef,omitempty" json:"EndPointRef,omitempty"`
}

// DriverTripVersionStructure represents the DriverTrip_VersionStructure element
// Type for DRIVER TRIP.
type DriverTripVersionStructure struct {
	DataManagedObjectStructure
	// Description of DRIVER TRIP.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// TIMING POINT at which run starts.
	StartPointRef *TimingPointRefStructure `xml:"StartPointRef,omitempty" json:"StartPointRef,omitempty"`
	// TIMING POINT at which run starts.
	EndPointRef *TimingPointRefStructure `xml:"EndPointRef,omitempty" json:"EndPointRef,omitempty"`
	// How long the run takes.
	AccountingTime *string `xml:"AccountingTime,omitempty" json:"AccountingTime,omitempty"`
	// How long the run takes to prepare.
	AccountingFactor *string `xml:"AccountingFactor,omitempty" json:"AccountingFactor,omitempty"`
	// DRIVER TRIP TIMEs for DRIVER TRIP.
	TripTimes *DriverTripTimesRelStructure `xml:"tripTimes,omitempty" json:"tripTimes,omitempty"`
}

// DriverTripTimesRelStructure represents the driverTripTimes_RelStructure element
// Type for a list of DRIVER TRIP TIMEs.
type DriverTripTimesRelStructure struct {
	ContainmentAggregationStructure
	DriverTripTimeRef []DriverTripTimeRef `xml:"DriverTripTimeRef,omitempty" json:"DriverTripTimeRef,omitempty"`
	// An area within a Site. May be connected to Quays by PATH LINKs.
	DriverTripTime []DriverTripTime `xml:"DriverTripTime,omitempty" json:"DriverTripTime,omitempty"`
}

// DriverTripTimeVersionStructure represents the DriverTripTime_VersionStructure element
// Type for DRIVER TRIP TIME.
type DriverTripTimeVersionStructure struct {
	DataManagedObjectStructure
	// Description of DRIVER TRIP TIME.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	DriverTripRef *DriverTripRef `xml:"DriverTripRef,omitempty" json:"DriverTripRef,omitempty"`
	// How long the DRIVER TRIP takes.
	Duration *string `xml:"Duration,omitempty" json:"Duration,omitempty"`
	// Mode of Transport.
	TransportMode *AllModesEnumeration `xml:"TransportMode,omitempty" json:"TransportMode,omitempty"`
}

// Duty represents the Duty element
// The work to be performed by a driver on a particular DAY TYPE.
type Duty struct {
	DutyVersionStructure
}

// AccountableElement represents the AccountableElement element
// A period of a driver's DUTY during which (s)he is continuously working without a BREAK. PAUSEs during which (the)he remains responsible for the vehicle may be included.
type AccountableElement struct {
	AccountableElementStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// DutyPart represents the DutyPart element
// A continuous part of a driver DUTY during which (s)he is under the management of the company. A DUTY PART may include BREAKs.
// .
type DutyPart struct {
	DutyPartVersionStructure
}

// DriverTrip represents the DriverTrip element
// A planned non-driving movement of a driver within a DUTY PART. This may be necessary to reach the first SPELL in a STRETCH, between two SPELLs or after the last SPELL in a STRETCH. It may be entirely on foot or may use a VEHICLE JOURNEY on a vehicle driven by another driver.
type DriverTrip struct {
	DriverTripVersionStructure
}

// DriverTripTime represents the DriverTripTime element
// A part of a BLOCK composed of consecutive VEHICLE JOURNEYs defined for the same DAY TYPE, all operated on the same LINE.
type DriverTripTime struct {
	DriverTripTimeVersionStructure
}

// BlocksInFrameRelStructure represents the blocksInFrame_RelStructure element
// Type for containment in frame of BLOCKS.
type BlocksInFrameRelStructure struct {
	ContainmentAggregationStructure
	Block []Block `xml:"Block,omitempty" json:"Block,omitempty"`
	CompoundBlock []CompoundBlock `xml:"CompoundBlock,omitempty" json:"CompoundBlock,omitempty"`
	TrainBlock []TrainBlock `xml:"TrainBlock,omitempty" json:"TrainBlock,omitempty"`
}

// CoursesOfJourneysInFrameRelStructure represents the coursesOfJourneysInFrame_RelStructure element
// Type for containment in frame of COURSE OF JOURNEYs.
type CoursesOfJourneysInFrameRelStructure struct {
	ContainmentAggregationStructure
	CourseOfJourneys []CourseOfJourneys `xml:"CourseOfJourneys" json:"CourseOfJourneys"`
}

// VehicleServicesInFrameRelStructure represents the vehicleServicesInFrame_RelStructure element
// Type for containment in frame of VEHICLE SERVICEs.
type VehicleServicesInFrameRelStructure struct {
	ContainmentAggregationStructure
	VehicleService []VehicleService `xml:"VehicleService" json:"VehicleService"`
}

// ReliefOpportunitiesInFrameRelStructure represents the reliefOpportunitiesInFrame_RelStructure element
// Type for containment in frame of RELIEF OPPORTUNITies.
type ReliefOpportunitiesInFrameRelStructure struct {
	ContainmentAggregationStructure
	ReliefOpportunity []ReliefOpportunity `xml:"ReliefOpportunity" json:"ReliefOpportunity"`
}

// BlockVersionStructure represents the Block_VersionStructure element
// Type for BLOCK.
type BlockVersionStructure struct {
	DataManagedObjectStructure
	// Name of BLOCK.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of BLOCK.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Time to complete BLOCK.
	PreparationDuration *string `xml:"PreparationDuration,omitempty" json:"PreparationDuration,omitempty"`
	// Start time of BLOCK- In principle this can be derived from the Start time of the first journey and the preparation duration but may be stated  explicitly as well.
	StartTime *string `xml:"StartTime,omitempty" json:"StartTime,omitempty"`
	// Day offset of Start time from current OPERATING DAY.
	StartTimeDayOffset *int `xml:"StartTimeDayOffset,omitempty" json:"StartTimeDayOffset,omitempty"`
	// Time to complete BLOCK.
	FinishingDuration *string `xml:"FinishingDuration,omitempty" json:"FinishingDuration,omitempty"`
	// End time of BLOCK. In principle this can be derived from the Start time of the last journey and the finishing duration but may be stated  explicitly as well.
	EndTime *string `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
	// Day offset of end time from current OPERATING DAY.
	EndTimeDayOffset *int `xml:"EndTimeDayOffset,omitempty" json:"EndTimeDayOffset,omitempty"`
	// DAY TYPEs for BLOCK.
	DayTypes *DayTypeRefsRelStructure `xml:"dayTypes,omitempty" json:"dayTypes,omitempty"`
	VehicleServicePartRef *VehicleServicePartRef `xml:"VehicleServicePartRef,omitempty" json:"VehicleServicePartRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	// Point at which BLOCK starts Should be a PARKING POINT but might be of unknown type.
	StartPointRef *PointRefStructure `xml:"StartPointRef,omitempty" json:"StartPointRef,omitempty"`
	// Point at which BLOCK ends Point at which BLOCK starts Should be a PARKING POINT but might be of unknown type.
	EndPointRef *PointRefStructure `xml:"EndPointRef,omitempty" json:"EndPointRef,omitempty"`
	// JOURNEYS making up BLOCK.
	Journeys *JourneyRefsRelStructure `xml:"journeys,omitempty" json:"journeys,omitempty"`
	// Runs in BLOCK PART.
	CoursesOfJourneys *CoursesOfJourneysRelStructure `xml:"coursesOfJourneys,omitempty" json:"coursesOfJourneys,omitempty"`
	// BLOCK PARTS in BLOCK.
	BlockParts *BlockPartsRelStructure `xml:"blockParts,omitempty" json:"blockParts,omitempty"`
	// RELIEF OPPORTUNITIES of a BLOCK-
	ReliefOpportunities *ReliefOpportunitiesRelStructure `xml:"reliefOpportunities,omitempty" json:"reliefOpportunities,omitempty"`
}

// TrainBlockVersionStructure represents the TrainBlock_VersionStructure element
// Type for TRAIN BLOCK.
type TrainBlockVersionStructure struct {
	BlockVersionStructure
	// JOURNEYS making up BLOCK.
	CoupledJourneys *CoupledJourneysRelStructure `xml:"coupledJourneys,omitempty" json:"coupledJourneys,omitempty"`
}

// BlockPartsRelStructure represents the blockParts_RelStructure element
// Type for a list of BLOCK PARTs.
type BlockPartsRelStructure struct {
	ContainmentAggregationStructure
	TrainBlockPartRef []TrainBlockPartRef `xml:"TrainBlockPartRef,omitempty" json:"TrainBlockPartRef,omitempty"`
	BlockPartRef []BlockPartRef `xml:"BlockPartRef,omitempty" json:"BlockPartRef,omitempty"`
	BlockPart []BlockPart `xml:"BlockPart,omitempty" json:"BlockPart,omitempty"`
	TrainBlockPart []TrainBlockPart `xml:"TrainBlockPart,omitempty" json:"TrainBlockPart,omitempty"`
}

// BlockPartVersionStructure represents the BlockPart_VersionStructure element
// Type for a BLOCK PART.
type BlockPartVersionStructure struct {
	DataManagedObjectStructure
	// Name of BLOCK PART.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of BLOCK PART.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef *BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	CompoundBlockRef *CompoundBlockRef `xml:"CompoundBlockRef,omitempty" json:"CompoundBlockRef,omitempty"`
	JourneyPartCoupleRef *JourneyPartCoupleRef `xml:"JourneyPartCoupleRef,omitempty" json:"JourneyPartCoupleRef,omitempty"`
	// JOURNEY PARTs in BLOCK PART.
	JourneyParts *JourneyPartRefsRelStructure `xml:"journeyParts,omitempty" json:"journeyParts,omitempty"`
	// Order of part within BLOCK.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// CompoundBlockStructure represents the CompoundBlockStructure element
// Type for COMPOUND BLOCK.
type CompoundBlockStructure struct {
	DataManagedObjectStructure
	// Name of COMPOUND BLOCK.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of COMPOUND BLOCK.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	// Staring timing point of COMPOUND BLOCK.
	StartPointRef *TimingPointInJourneyPatternRefStructure `xml:"StartPointRef,omitempty" json:"StartPointRef,omitempty"`
	// Ending timing point of COMPOUND BLOCK.
	EndPointRef *TimingPointInJourneyPatternRefStructure `xml:"EndPointRef,omitempty" json:"EndPointRef,omitempty"`
	// BLOCK PARTs which make up COMPOUND BLOCK.
	Parts *BlockPartsRelStructure `xml:"parts,omitempty" json:"parts,omitempty"`
}

// TrainBlockPartVersionStructure represents the TrainBlockPart_VersionStructure element
// Type for TRAIN BLOCK PART.
type TrainBlockPartVersionStructure struct {
	BlockPartVersionStructure
	// Start time of BLOCK PART- In principle this can be derived from the Start time of the first journey and the preparation duration but may be stated  explicitly as well.
	StartTime *string `xml:"StartTime,omitempty" json:"StartTime,omitempty"`
	// Day offset of Start time from current OPERATING DAY.
	StartTimeDayOffset *int `xml:"StartTimeDayOffset,omitempty" json:"StartTimeDayOffset,omitempty"`
	// End time of BLOCK PART. In principle this can be derived from the Start time of the last journey and the finishing duration but may be stated  explicitly as well.
	EndTime *string `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
	// Day offset of end time from current OPERATING DAY.
	EndTimeDayOffset *int `xml:"EndTimeDayOffset,omitempty" json:"EndTimeDayOffset,omitempty"`
	// Type of Coupling.
	TypeOfCoupling *string `xml:"TypeOfCoupling,omitempty" json:"TypeOfCoupling,omitempty"`
}

// VehicleServiceVersionStructure represents the VehicleService_VersionStructure element
// Type for VEHICLE SERVICE.
type VehicleServiceVersionStructure struct {
	DataManagedObjectStructure
	// Name of VEHICLE SERVICE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VEHICLE SERVICE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Parts of a VEHICLE SERVICE.
	VehicleServiceParts *VehicleServicePartsRelStructure `xml:"vehicleServiceParts,omitempty" json:"vehicleServiceParts,omitempty"`
}

// VehicleServicePartsRelStructure represents the vehicleServiceParts_RelStructure element
// Type for a list of VEHICLE SERVICE PARTs.
type VehicleServicePartsRelStructure struct {
	ContainmentAggregationStructure
	VehicleServicePartRef []VehicleServicePartRef `xml:"VehicleServicePartRef,omitempty" json:"VehicleServicePartRef,omitempty"`
	VehicleServicePart []VehicleServicePart `xml:"VehicleServicePart,omitempty" json:"VehicleServicePart,omitempty"`
}

// VehicleServicePartVersionStructure represents the VehicleServicePart_VersionStructure element
// Type for VEHICLE SERVICE PART.
type VehicleServicePartVersionStructure struct {
	DataManagedObjectStructure
	// Name of VEHICLE SERVICE PART.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of VEHICLE SERVICE PART.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	VehicleServiceRef *VehicleServiceRef `xml:"VehicleServiceRef,omitempty" json:"VehicleServiceRef,omitempty"`
	StartPointRef *GaragePointRefStructure `xml:"StartPointRef,omitempty" json:"StartPointRef,omitempty"`
	EndPointRef *GaragePointRefStructure `xml:"EndPointRef,omitempty" json:"EndPointRef,omitempty"`
}

// CoursesOfJourneysRelStructure represents the coursesOfJourneys_RelStructure element
// Type for a list of COURSE OF JOURNEYs.
type CoursesOfJourneysRelStructure struct {
	ContainmentAggregationStructure
	CourseOfJourneysRef []CourseOfJourneysRef `xml:"CourseOfJourneysRef,omitempty" json:"CourseOfJourneysRef,omitempty"`
	CourseOfJourneys []CourseOfJourneys `xml:"CourseOfJourneys,omitempty" json:"CourseOfJourneys,omitempty"`
}

// CourseOfJourneysVersionStructure represents the CourseOfJourneys_VersionStructure element
// Type for COURSE OF JOURNEYs.
type CourseOfJourneysVersionStructure struct {
	DataManagedObjectStructure
	// Name of COURSE OF JOURNEYs.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of COURSE OF JOURNEYs.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Numeric identifier of COURSE of JOURNEYS.
	CourseOfJourneysNumber *int `xml:"CourseOfJourneysNumber,omitempty" json:"CourseOfJourneysNumber,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// How long the run takes to prepare.
	PreparationDuration *string `xml:"PreparationDuration,omitempty" json:"PreparationDuration,omitempty"`
	// Time at which run starts.
	StartTimeInBlock *string `xml:"StartTimeInBlock,omitempty" json:"StartTimeInBlock,omitempty"`
	// Day offset of Start time from current OPERATING DAY.
	StartTimeDayOffset *int `xml:"StartTimeDayOffset,omitempty" json:"StartTimeDayOffset,omitempty"`
	// How long the run takes.
	FinishingDuration *string `xml:"FinishingDuration,omitempty" json:"FinishingDuration,omitempty"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef *BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	// JOURNEYS making up COURSE OF JOURNEYs.
	Journeys *JourneyRefsRelStructure `xml:"journeys,omitempty" json:"journeys,omitempty"`
}

// ReliefOpportunitiesRelStructure represents the reliefOpportunities_RelStructure element
// Type for a list of RELIEF OPPORTUNITies.
type ReliefOpportunitiesRelStructure struct {
	ContainmentAggregationStructure
	ReliefOpportunityRef []ReliefOpportunityRef `xml:"ReliefOpportunityRef,omitempty" json:"ReliefOpportunityRef,omitempty"`
	ReliefOpportunity []ReliefOpportunity `xml:"ReliefOpportunity,omitempty" json:"ReliefOpportunity,omitempty"`
}

// ReliefOpportunityVersionStructure represents the ReliefOpportunity_VersionStructure element
// Type for RELIEF OPPORTUNITY.
type ReliefOpportunityVersionStructure struct {
	DataManagedObjectStructure
	// Name of RELIEF OPPORTUNITY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of RELIEF OPPORTUNITY.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Time at which RELIEF OPPORTUNITY occurs.
	Time string `xml:"Time" json:"Time"`
	// Day offset of time from current OPERATING DAY.
	DayOffset *int `xml:"DayOffset,omitempty" json:"DayOffset,omitempty"`
	TrainBlockRef *TrainBlockRef `xml:"TrainBlockRef,omitempty" json:"TrainBlockRef,omitempty"`
	BlockRef *BlockRef `xml:"BlockRef,omitempty" json:"BlockRef,omitempty"`
}

// Block represents the Block element
// The work of a vehicle from the time it leaves a PARKING POINT after parking until its next return to park at a PARKING POINT. Any subsequent departure from a PARKING POINT after parking marks the start of a new BLOCK. The period of a BLOCK has to be covered by DUTies.
type Block struct {
	BlockVersionStructure
}

// TrainBlock represents the TrainBlock element
// A composite train formed of several BLOCKs coupled together during a certain period. Any coupling or separation action marks the start of a new TRAIN BLOCK.
type TrainBlock struct {
	TrainBlockVersionStructure
}

// BlockPart represents the BlockPart element
// A part of a BLOCK.
type BlockPart struct {
	BlockPartVersionStructure
}

// CompoundBlock represents the CompoundBlock element
// A composite BLOCK formed of several BLOCKs coupled together during a certain period. Any coupling or separation action marks the start of a new COMPOUND BLOCK.
type CompoundBlock struct {
	CompoundBlockStructure
}

// TrainBlockPart represents the TrainBlockPart element
// The work of a vehicle from the time it leaves a PARKING POINT after parking until its next return to park at a PARKING POINT. Any subsequent departure from a PARKING POINT after parking marks the start of a new TRAIN BLOCK PART. The period of a TRAIN BLOCK PART has to be covered by DUTies.
type TrainBlockPart struct {
	TrainBlockPartVersionStructure
}

// VehicleService represents the VehicleService element
// A work plan for a vehicle for a whole day, planned for a specific DAY TYPE. A VEHICLE SERVICE includes one or several VEHICLE SERVICE PARTs.
type VehicleService struct {
	VehicleServiceVersionStructure
}

// VehicleServicePart represents the VehicleServicePart element
// A part of a VEHICLE SERVICE composed of one or more BLOCKs and limited by periods spent at the GARAGE managing the vehicle in question.
type VehicleServicePart struct {
	VehicleServicePartVersionStructure
}

// CourseOfJourneys represents the CourseOfJourneys element
// A part of a BLOCK composed of consecutive VEHICLE JOURNEYs defined for the same DAY TYPE, all operated on the same LINE.
type CourseOfJourneys struct {
	CourseOfJourneysVersionStructure
}

// ReliefOpportunity represents the ReliefOpportunity element
// A time in a BLOCK where a vehicle passes a RELIEF POINT. This opportunity may or may not be actually used for a relief.
type ReliefOpportunity struct {
	ReliefOpportunityVersionStructure
}

// TimetableVersionFrameStructure represents the Timetable_VersionFrameStructure element
// Type for TIMETABLE FRAME.
type TimetableVersionFrameStructure struct {
	CommonVersionFrameStructure
	// Modes of VEHICLE JOURNEYs in timetable.
	VehicleModes *VehicleModeEnumeration `xml:"VehicleModes,omitempty" json:"VehicleModes,omitempty"`
	// Whether this is a Headway SERVICE, that is, one shown as operating at a prescribed interval rather than to a fixed timetable.
	HeadwayService *bool `xml:"HeadwayService,omitempty" json:"HeadwayService,omitempty"`
	// Whether VEHICLE JOURNEYs of line are normally monitored. Provides a default value for the Monitored element on individual journeys of the timetable.
	Monitored *bool `xml:"Monitored,omitempty" json:"Monitored,omitempty"`
	NetworkView *NetworkView `xml:"NetworkView,omitempty" json:"NetworkView,omitempty"`
	LineView *LineView `xml:"LineView,omitempty" json:"LineView,omitempty"`
	OperatorView *OperatorView `xml:"OperatorView,omitempty" json:"OperatorView,omitempty"`
	ServiceCalendarFrameRef *ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	// Default VEHICLE MODE to use on JOURNEYs in TIMETABLE.
	DefaultMode *VehicleModeEnumeration `xml:"DefaultMode,omitempty" json:"DefaultMode,omitempty"`
	JourneyAccountingRef *JourneyAccountingRef `xml:"JourneyAccountingRef,omitempty" json:"JourneyAccountingRef,omitempty"`
	// When bookings can be made for a SERVICE.
	BookingTimes *ContainedAvailabilityConditionsRelStructure `xml:"bookingTimes,omitempty" json:"bookingTimes,omitempty"`
	AccessibilityAssessment *AccessibilityAssessment `xml:"AccessibilityAssessment,omitempty" json:"AccessibilityAssessment,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	// TIME DEMAND TYPEs in frame.
	TimeDemandTypes *TimeDemandTypesInFrameRelStructure `xml:"timeDemandTypes,omitempty" json:"timeDemandTypes,omitempty"`
	// TIME DEMAND TYPE ASSIGNMENTs in frame.
	TimeDemandTypeAssignments *TimeDemandTypeAssignmentsInFrameRelStructure `xml:"timeDemandTypeAssignments,omitempty" json:"timeDemandTypeAssignments,omitempty"`
	// TIMING LINK GROUPs in frame.
	TimingLinkGroups *GroupOfLinksInFrameRelStructure `xml:"timingLinkGroups,omitempty" json:"timingLinkGroups,omitempty"`
	// VEHICLE JOURNEYs in frame.
	VehicleJourneys *JourneysInFrameRelStructure `xml:"vehicleJourneys,omitempty" json:"vehicleJourneys,omitempty"`
	// FREQUENCY GROUPs  In frame. Can be used to template VEHICLE JOURNEYs.
	FrequencyGroups *FrequencyGroupsInFrameRelStructure `xml:"frequencyGroups,omitempty" json:"frequencyGroups,omitempty"`
	// Groupings of Journeys In frame. Can be used to define inbound and outbound beds for a matrix presentation of the JORUNEYs in the TIMETABLE.
	GroupsOfServices *GroupsOfServicesInFrameRelStructure `xml:"groupsOfServices,omitempty" json:"groupsOfServices,omitempty"`
	// TRAIN NUMBERs in frame.
	TrainNumbers *TrainNumbersInFrameRelStructure `xml:"trainNumbers,omitempty" json:"trainNumbers,omitempty"`
	// JOURNEY COUPLINGs  in frame.
	JourneyPartCouples *JourneyPartCouplesInFrameRelStructure `xml:"journeyPartCouples,omitempty" json:"journeyPartCouples,omitempty"`
	// JOURNEY COUPLINGs  in frame.
	CoupledJourneys *CoupledJourneysInFrameRelStructure `xml:"coupledJourneys,omitempty" json:"coupledJourneys,omitempty"`
	// SERVICE FACILITies  in frame.
	ServiceFacilitySets *ServiceFacilitySetsInFrameRelStructure `xml:"serviceFacilitySets,omitempty" json:"serviceFacilitySets,omitempty"`
	// TYPEs of SERVICE in frame.
	TypesOfService *TypesOfServiceInFrameRelStructure `xml:"typesOfService,omitempty" json:"typesOfService,omitempty"`
	// FLEXIBLE SERVICE PROPERTIES in frame.
	FlexibleServiceProperties *FlexibleServicePropertiesInFrameRelStructure `xml:"flexibleServiceProperties,omitempty" json:"flexibleServiceProperties,omitempty"`
	// VEHICLE JOURNEY STOP ASSIGNMENTs in frame.
	VehicleJourneyStopAssignments *VehicleJourneyStopAssignmentsInFrameRelStructure `xml:"vehicleJourneyStopAssignments,omitempty" json:"vehicleJourneyStopAssignments,omitempty"`
	// NOTICEs in frame.
	Notices *NoticesInFrameRelStructure `xml:"notices,omitempty" json:"notices,omitempty"`
	// NOTICE ASSIGNMENTs in frame.
	NoticeAssignments *NoticeAssignmentsInFrameRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// JOURNEY MEETINGs in frame.
	JourneyMeetings *JourneyMeetingsInFrameRelStructure `xml:"journeyMeetings,omitempty" json:"journeyMeetings,omitempty"`
	// INTERCHANGES in frame.
	JourneyInterchanges *JourneyInterchangesInFrameRelStructure `xml:"journeyInterchanges,omitempty" json:"journeyInterchanges,omitempty"`
	// DEFAULT INTERCHANGES in frame.
	DefaultInterchanges *DefaultInterchangesInFrameRelStructure `xml:"defaultInterchanges,omitempty" json:"defaultInterchanges,omitempty"`
	// INTERCHANGE RULEs in frame.
	InterchangeRules *InterchangeRulesInFrameRelStructure `xml:"interchangeRules,omitempty" json:"interchangeRules,omitempty"`
	// VEHICLE TYPEs in frame.
	VehicleTypes *VehicleTypesInFrameRelStructure `xml:"vehicleTypes,omitempty" json:"vehicleTypes,omitempty"`
	// VEHICLE TYPEs in frame.
	JourneyAccountings *JourneyAccountingsInFrameRelStructure `xml:"journeyAccountings,omitempty" json:"journeyAccountings,omitempty"`
}

// TimetableFrame represents the TimetableFrame element
// A coherent set of timetable data (VEHICLE JOURNEYs and BLOCKs) to which the same VALIDITY CONDITIONs have been assigned.
type TimetableFrame struct {
	TimetableVersionFrameStructure
}

// ServiceFrameRefStructure represents the ServiceFrameRefStructure element
// Type for a reference to a SERVICE FRAME.
type ServiceFrameRefStructure struct {
	VersionFrameRefStructure
}

// ServiceVersionFrameStructure represents the Service_VersionFrameStructure element
// Type for a SERVICE FRAME.
type ServiceVersionFrameStructure struct {
	CommonVersionFrameStructure
	Network *Network `xml:"Network,omitempty" json:"Network,omitempty"`
	// Additional networks refernced in frame in addition to the primary NETWORK..
	AdditionalNetworks *NetworksInFrameRelStructure `xml:"additionalNetworks,omitempty" json:"additionalNetworks,omitempty"`
	// DIRECTIONs in frame.
	Directions *DirectionsInFrameRelStructure `xml:"directions,omitempty" json:"directions,omitempty"`
	// ROUTE POINTs in frame.
	RoutePoints *RoutePointsInFrameRelStructure `xml:"routePoints,omitempty" json:"routePoints,omitempty"`
	// ROUTE LINKs in frame.
	RouteLinks *RouteLinksInFrameRelStructure `xml:"routeLinks,omitempty" json:"routeLinks,omitempty"`
	// ROUTEs in frame.
	Routes *RoutesInFrameRelStructure `xml:"routes,omitempty" json:"routes,omitempty"`
	// FLEXIBLE POINT PROPERTIES in frame.
	FlexiblePointProperties *FlexiblePointPropertiesRelStructure `xml:"flexiblePointProperties,omitempty" json:"flexiblePointProperties,omitempty"`
	// FLEXIBLE LINK PROPERTIES in frame.
	FlexibleLinkProperties *FlexibleLinkPropertiesRelStructure `xml:"flexibleLinkProperties,omitempty" json:"flexibleLinkProperties,omitempty"`
	// COMMON SECTIONs in frame.
	CommonSections *CommonSectionsInFrameRelStructure `xml:"commonSections,omitempty" json:"commonSections,omitempty"`
	// GENERAL SECTIONs in frame.
	GeneralSections *GeneralSectionsInFrameRelStructure `xml:"generalSections,omitempty" json:"generalSections,omitempty"`
	// GROUPs of LINKs in frame.
	GroupsOfLinks *GroupOfLinksRelStructure `xml:"groupsOfLinks,omitempty" json:"groupsOfLinks,omitempty"`
	// GROUPs of POINTs in frame.
	GroupsOfPoints *GroupOfPointsRelStructure `xml:"groupsOfPoints,omitempty" json:"groupsOfPoints,omitempty"`
	// LINEs in frame.
	Lines *LinesInFrameRelStructure `xml:"lines,omitempty" json:"lines,omitempty"`
	// GROUPs of LINEs in frame.
	GroupsOfLines *GroupsOfLinesInFrameRelStructure `xml:"groupsOfLines,omitempty" json:"groupsOfLines,omitempty"`
	// DESTINATION DISPLAYs in frame.
	DestinationDisplays *DestinationDisplaysInFrameRelStructure `xml:"destinationDisplays,omitempty" json:"destinationDisplays,omitempty"`
	// LINE NETWORKs in frame.
	LineNetworks *LineNetworksInFrameRelStructure `xml:"lineNetworks,omitempty" json:"lineNetworks,omitempty"`
	// SCHEDULED STOP POINTs in frame.
	ScheduledStopPoints *ScheduledStopPointsInFrameRelStructure `xml:"scheduledStopPoints,omitempty" json:"scheduledStopPoints,omitempty"`
	// SERVICE LINKs in frame.
	ServiceLinks *ServiceLinksInFrameRelStructure `xml:"serviceLinks,omitempty" json:"serviceLinks,omitempty"`
	// SERVICE PATTERNs in frame.
	ServicePatterns *ServicePatternsInFrameRelStructure `xml:"servicePatterns,omitempty" json:"servicePatterns,omitempty"`
	// STOP AREAS in frame.
	StopAreas *StopAreasInFrameRelStructure `xml:"stopAreas,omitempty" json:"stopAreas,omitempty"`
	// CONNECTIONs in frame.
	Connections *TransfersInFrameRelStructure `xml:"connections,omitempty" json:"connections,omitempty"`
	// TARIFF ZONEs in frame.
	TariffZones *TariffZonesInFrameRelStructure `xml:"tariffZones,omitempty" json:"tariffZones,omitempty"`
	// STOP ASSIGNMENTs in frame.
	StopAssignments *StopAssignmentsInFrameRelStructure `xml:"stopAssignments,omitempty" json:"stopAssignments,omitempty"`
	// TIMING POINTs in frame.
	TimingPoints *TimingPointsInFrameRelStructure `xml:"timingPoints,omitempty" json:"timingPoints,omitempty"`
	// TIMING LINKs in frame.
	TimingLinks *TimingLinksInFrameRelStructure `xml:"timingLinks,omitempty" json:"timingLinks,omitempty"`
	// TIMING PATTERNs in frame.
	TimingPatterns *TimingPatternsInFrameRelStructure `xml:"timingPatterns,omitempty" json:"timingPatterns,omitempty"`
	// JOURNEY PATTERNs in frame.
	JourneyPatterns *JourneyPatternsInFrameRelStructure `xml:"journeyPatterns,omitempty" json:"journeyPatterns,omitempty"`
	// TRANSFER RESTRICTIONS in frame.
	TransferRestrictions *TransferRestrictionsInFrameRelStructure `xml:"transferRestrictions,omitempty" json:"transferRestrictions,omitempty"`
	// ROUTING CONSTRAINT ZONEs in frame.
	RoutingConstraintZones *RoutingConstraintZonesInFrameRelStructure `xml:"routingConstraintZones,omitempty" json:"routingConstraintZones,omitempty"`
	// SERVICE EXCLUSIONs in frame.
	ServiceExclusions *ServiceExclusionsInFrameRelStructure `xml:"serviceExclusions,omitempty" json:"serviceExclusions,omitempty"`
	// TIME DEMAND TYPEs in frame.
	TimeDemandTypes *TimeDemandTypesInFrameRelStructure `xml:"timeDemandTypes,omitempty" json:"timeDemandTypes,omitempty"`
	// TIME DEMAND TYPE ASSIGNMENTs in frame.
	TimeDemandTypeAssignments *TimeDemandTypeAssignmentsInFrameRelStructure `xml:"timeDemandTypeAssignments,omitempty" json:"timeDemandTypeAssignments,omitempty"`
	// TIMING LINK GROUPs in frame.
	TimingLinkGroups *GroupOfLinksInFrameRelStructure `xml:"timingLinkGroups,omitempty" json:"timingLinkGroups,omitempty"`
	// NOTICEs in frame.
	Notices *NoticesInFrameRelStructure `xml:"notices,omitempty" json:"notices,omitempty"`
	// NOTICE ASSIGNMENTs in frame.
	NoticeAssignments *NoticeAssignmentsInFrameRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// LOGICAL DISPLAYs in frame.
	LogicalDisplays *LogicalDisplaysInFrameRelStructure `xml:"logicalDisplays,omitempty" json:"logicalDisplays,omitempty"`
	// DISPLAY ASSIGNMENTs in frame.
	DisplayAssignments *DisplayAssignmentsInFrameRelStructure `xml:"displayAssignments,omitempty" json:"displayAssignments,omitempty"`
	// PASSENGER INFORMATION EQUIPMENT in frame.
	PassengerInformationEquipments *PassengerInformationEquipmentsInFrameRelStructure `xml:"passengerInformationEquipments,omitempty" json:"passengerInformationEquipments,omitempty"`
}

// ServiceFrameRef represents the ServiceFrameRef element
// Reference to a SERVICE FRAME.
type ServiceFrameRef struct {
	ServiceFrameRefStructure
}

// ServiceFrame represents the ServiceFrame element
// A coherent set of Service data to which the same frame VALIDITY CONDITIONs have been assigned.
type ServiceFrame struct {
	ServiceVersionFrameStructure
}

// VehicleScheduleVersionFrameStructure represents the VehicleSchedule_VersionFrameStructure element
// Type for a VEHICLE SCHEDULE FRAME.
type VehicleScheduleVersionFrameStructure struct {
	CommonVersionFrameStructure
	ServiceCalendarFrameRef *ServiceCalendarFrameRef `xml:"ServiceCalendarFrameRef,omitempty" json:"ServiceCalendarFrameRef,omitempty"`
	// BLOCKs in frame.
	Blocks *BlocksInFrameRelStructure `xml:"blocks,omitempty" json:"blocks,omitempty"`
	// COURSE OF JOURNEYs (Runs) in frame.
	CoursesOfJourneys *CoursesOfJourneysInFrameRelStructure `xml:"coursesOfJourneys,omitempty" json:"coursesOfJourneys,omitempty"`
	// VEHICLE SERVICES in frame.
	VehicleServices *VehicleServicesInFrameRelStructure `xml:"vehicleServices,omitempty" json:"vehicleServices,omitempty"`
	// VEHICLE SERVICES in frame.
	ReliefOpportunities *ReliefOpportunitiesInFrameRelStructure `xml:"reliefOpportunities,omitempty" json:"reliefOpportunities,omitempty"`
}

// VehicleScheduleFrame represents the VehicleScheduleFrame element
// A coherent set of Vehicle Scheduling data to which the same VALIDITY CONDITIONs have been assigned.
type VehicleScheduleFrame struct {
	VehicleScheduleVersionFrameStructure
}

// DriverScheduleVersionFrameStructure represents the DriverSchedule_VersionFrameStructure element
// Type for a DRIVER SCHEDULE FRAME.
type DriverScheduleVersionFrameStructure struct {
	CommonVersionFrameStructure
	// DUTIes in frame.
	Duties *DutiesInFrameRelStructure `xml:"duties,omitempty" json:"duties,omitempty"`
	// DUTY PARTs (Runs) in frame.
	DutyParts *DutyPartsInFrameRelStructure `xml:"dutyParts,omitempty" json:"dutyParts,omitempty"`
	// DRIVER TRIPs in frame.
	DriverTrips *DriverTripsInFrameRelStructure `xml:"driverTrips,omitempty" json:"driverTrips,omitempty"`
}

// DriverScheduleFrame represents the DriverScheduleFrame element
// A coherent set of Driver Scheduling data to which the same VALIDITY CONDITIONs have been assigned.
type DriverScheduleFrame struct {
	DriverScheduleVersionFrameStructure
}

// RoundingMethodEnumeration represents the RoundingMethodEnumeration enumeration
// Allowed values for ROUNDING METHOD.
type RoundingMethodEnumeration string

const (
	// RoundingMethodEnumerationNone represents none
	RoundingMethodEnumerationNone RoundingMethodEnumeration = "none"
	// RoundingMethodEnumerationDown represents down
	RoundingMethodEnumerationDown RoundingMethodEnumeration = "down"
	// RoundingMethodEnumerationUp represents up
	RoundingMethodEnumerationUp RoundingMethodEnumeration = "up"
	// RoundingMethodEnumerationSplit represents split
	RoundingMethodEnumerationSplit RoundingMethodEnumeration = "split"
	// RoundingMethodEnumerationStepTable represents stepTable
	RoundingMethodEnumerationStepTable RoundingMethodEnumeration = "stepTable"
)

// TaxCategoryEnumeration represents the TaxCategoryEnumeration enumeration
// Allowed values for Tax categories +v1.1
type TaxCategoryEnumeration string

const (
	// TaxCategoryEnumerationTaxCategoryEnumerationExempt represents exempt
	TaxCategoryEnumerationTaxCategoryEnumerationExempt TaxCategoryEnumeration = "exempt"
	// TaxCategoryEnumerationTaxCategoryEnumerationGeneral represents general
	TaxCategoryEnumerationTaxCategoryEnumerationGeneral TaxCategoryEnumeration = "general"
	// TaxCategoryEnumerationTaxCategoryEnumerationTransportation represents transportation
	TaxCategoryEnumerationTaxCategoryEnumerationTransportation TaxCategoryEnumeration = "transportation"
	// TaxCategoryEnumerationTaxCategoryEnumerationParking represents parking
	TaxCategoryEnumerationTaxCategoryEnumerationParking TaxCategoryEnumeration = "parking"
	// TaxCategoryEnumerationTaxCategoryEnumerationFood represents food
	TaxCategoryEnumerationTaxCategoryEnumerationFood TaxCategoryEnumeration = "food"
	// TaxCategoryEnumerationTaxCategoryEnumerationAlcoholicBeverage represents alcoholicBeverage
	TaxCategoryEnumerationTaxCategoryEnumerationAlcoholicBeverage TaxCategoryEnumeration = "alcoholicBeverage"
	// TaxCategoryEnumerationTaxCategoryEnumerationOther represents other
	TaxCategoryEnumerationTaxCategoryEnumerationOther TaxCategoryEnumeration = "other"
)

// PricingParameterSetRefStructure represents the PricingParameterSetRefStructure element
// Type for Reference to a PRICING PARAMETERS.
type PricingParameterSetRefStructure struct {
	VersionOfObjectRefStructure
}

// PriceUnitRefsRelStructure represents the priceUnitRefs_RelStructure element
// Type for a list of PRICE UNITs.
type PriceUnitRefsRelStructure struct {
	OneToManyRelationshipStructure
	PriceUnitRef []PriceUnitRef `xml:"PriceUnitRef" json:"PriceUnitRef"`
}

// PriceUnitRefStructure represents the PriceUnitRefStructure element
// Type for Reference to a PRICE UNIT.
type PriceUnitRefStructure struct {
	TypeOfValueRefStructure
}

// RoundingRefStructure represents the RoundingRefStructure element
// Type for Reference to a ROUNDING.
type RoundingRefStructure struct {
	VersionOfObjectRefStructure
}

// RoundingStepRefStructure represents the RoundingStepRefStructure element
// Type for Reference to a ROUNDING STEP.
type RoundingStepRefStructure struct {
	VersionOfObjectRefStructure
}

// FareDayTypeRefStructure represents the FareDayTypeRefStructure element
// Type for Reference to a FARE DAY TYPE.
type FareDayTypeRefStructure struct {
	DayTypeRefStructure
}

// PricingServiceRefStructure represents the PricingServiceRefStructure element
// Type for Reference to a PRICING SERVICE.
type PricingServiceRefStructure struct {
	VersionOfObjectRefStructure
}

// PricingRuleRefStructure represents the PricingRuleRefStructure element
// Type for Reference to a PRICING RULE.
type PricingRuleRefStructure struct {
	TypeOfValueRefStructure
}

// DiscountingRuleRefStructure represents the DiscountingRuleRefStructure element
// Type for Reference to a DISCOUNTING RULE.
type DiscountingRuleRefStructure struct {
	PricingRuleRefStructure
}

// LimitingRuleRefStructure represents the LimitingRuleRefStructure element
// Type for Reference to a LIMITING RULE.
type LimitingRuleRefStructure struct {
	DiscountingRuleRefStructure
}

// MonthValidityOffsetRefStructure represents the MonthValidityOffsetRefStructure element
// Type for Reference to a MONTH VALIDITY OFFSET.
type MonthValidityOffsetRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfPricingRuleRefsRelStructure represents the TypeOfPricingRuleRefs_RelStructure element
// Type for a list of TYPEs OF PRICING RULE.
type TypeOfPricingRuleRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfPricingRuleRef []TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef" json:"TypeOfPricingRuleRef"`
}

// TypeOfPricingRuleRefStructure represents the TypeOfPricingRuleRefStructure element
// Type for Reference to a TYPE OF PRICING RULE.
type TypeOfPricingRuleRefStructure struct {
	TypeOfValueRefStructure
}

// PricingParameterSetRef represents the PricingParameterSetRef element
// Reference to a PRICING PARAMETERS.
type PricingParameterSetRef struct {
	PricingParameterSetRefStructure
}

// PriceUnitRef represents the PriceUnitRef element
// Reference to a PRICE UNIT.
type PriceUnitRef struct {
	PriceUnitRefStructure
}

// RoundingRef represents the RoundingRef element
// Reference to a ROUNDING.
type RoundingRef struct {
	RoundingRefStructure
}

// RoundingStepRef represents the RoundingStepRef element
// Reference to a ROUNDING STEP.
type RoundingStepRef struct {
	RoundingStepRefStructure
}

// FareDayTypeRef represents the FareDayTypeRef element
// Reference to a FARE DAY TYPE.
type FareDayTypeRef struct {
	FareDayTypeRefStructure
}

// PricingServiceRef represents the PricingServiceRef element
// Reference to a PRICING SERVICE.
type PricingServiceRef struct {
	PricingServiceRefStructure
}

// PricingRuleRef represents the PricingRuleRef element
// Reference to a PRICING RULE.
type PricingRuleRef struct {
	PricingRuleRefStructure
}

// DiscountingRuleRef represents the DiscountingRuleRef element
// Reference to a DISCOUNTING RULE.
type DiscountingRuleRef struct {
	DiscountingRuleRefStructure
}

// LimitingRuleRef represents the LimitingRuleRef element
// Reference to a LIMITING RULE.
type LimitingRuleRef struct {
	LimitingRuleRefStructure
}

// MonthValidityOffsetRef represents the MonthValidityOffsetRef element
// Reference to a MONTH VALIDITY OFFSET.
type MonthValidityOffsetRef struct {
	MonthValidityOffsetRefStructure
}

// TypeOfPricingRuleRef represents the TypeOfPricingRuleRef element
// Reference to a TYPE OF PRICING RULE. +v1.1
type TypeOfPricingRuleRef struct {
	TypeOfPricingRuleRefStructure
}

// PricingParameterSetVersionedStructure represents the PricingParameterSet_VersionedStructure element
// Type for PRICING PARAMETERS.
type PricingParameterSetVersionedStructure struct {
	DataManagedObjectStructure
	// Name of PRICING PARAMETERS parameter set.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// Set of Rounding paraemeters.
	PriceUnits *PriceUnitsRelStructure `xml:"priceUnits,omitempty" json:"priceUnits,omitempty"`
	// Table of Month Validty offsets for each month.
	PricingRules *PricingRulesRelStructure `xml:"pricingRules,omitempty" json:"pricingRules,omitempty"`
	// Whether cumulative discounts are allowed.
	AllowCumulativeDiscounts *bool `xml:"AllowCumulativeDiscounts,omitempty" json:"AllowCumulativeDiscounts,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	// Set of Rounding paraemeters.
	Roundings *RoundingsRelStructure `xml:"roundings,omitempty" json:"roundings,omitempty"`
	FareDayTypeRef *FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef *DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	// Table of Month Validty offsets for each month.
	MonthValidityOffsets *MonthValidityOffsetsRelStructure `xml:"monthValidityOffsets,omitempty" json:"monthValidityOffsets,omitempty"`
	PricingServices *PricingServicesRelStructure `xml:"pricingServices,omitempty" json:"pricingServices,omitempty"`
}

// PriceUnitsRelStructure represents the priceUnits_RelStructure element
// Type for a list of PRICE UNITs.
type PriceUnitsRelStructure struct {
	ContainmentAggregationStructure
	PriceUnitRef []PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// A PRICE UNIT specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	PriceUnit []PriceUnit `xml:"PriceUnit,omitempty" json:"PriceUnit,omitempty"`
}

// PriceUnitVersionStructure represents the PriceUnit_VersionStructure element
// Type for PRICE UNIT.
type PriceUnitVersionStructure struct {
	TypeOfValueVersionStructure
	// Precision to use for units.
	Precision *int `xml:"Precision,omitempty" json:"Precision,omitempty"`
}

// RoundingsRelStructure represents the roundings_RelStructure element
// Set of FARE ROUNDING parameters such as rounding steps.
type RoundingsRelStructure struct {
	FrameContainmentStructure
	Rounding []Rounding `xml:"Rounding" json:"Rounding"`
}

// RoundingVersionedStructure represents the Rounding_VersionedStructure element
// Type for ROUNDING.
type RoundingVersionedStructure struct {
	DataManagedObjectStructure
	// Name of ROUNDING parameter set.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Rounding method to use.  If "down", "up" or  "split".  use modulus. If "step table" use ROUNDING STEPs.
	RoundingMethod *RoundingMethodEnumeration `xml:"RoundingMethod,omitempty" json:"RoundingMethod,omitempty"`
	// Rounding modulus to use if method is "down", "up" or  "split".
	RoundingModulus *float64 `xml:"RoundingModulus,omitempty" json:"RoundingModulus,omitempty"`
	// PRICE amount. in specified currency.
	RoundingSteps *RoundingStepsRelStructure `xml:"roundingSteps,omitempty" json:"roundingSteps,omitempty"`
}

// RoundingStepVersionedChildStructure represents the RoundingStep_VersionedChildStructure element
// Type for ROUNDING STEP.
type RoundingStepVersionedChildStructure struct {
	VersionedChildStructure
	RoundingStepRef *RoundingStepRef `xml:"RoundingStepRef,omitempty" json:"RoundingStepRef,omitempty"`
	// Rounding Step Threshold.
	RoundIfGreaterThan float64 `xml:"RoundIfGreaterThan" json:"RoundIfGreaterThan"`
	// Amount to which to round.
	RoundTo float64 `xml:"RoundTo" json:"RoundTo"`
}

// RoundingStepsRelStructure represents the roundingSteps_RelStructure element
// Type for a list of ROUNDING STEPs.
type RoundingStepsRelStructure struct {
	StrictContainmentAggregationStructure
	RoundingStep []RoundingStep `xml:"RoundingStep" json:"RoundingStep"`
}

// FareDayTypeVersionedStructure represents the FareDayType_VersionedStructure element
// Type for FARE DAY TYPE.
type FareDayTypeVersionedStructure struct {
	DayTypeVersionStructure
}

// MonthValidityOffsetsRelStructure represents the monthValidityOffsets_RelStructure element
// Ser of MONTH VALIDITY OFFSETs parameters such as rounding steps for Frame.
type MonthValidityOffsetsRelStructure struct {
	StrictContainmentAggregationStructure
	MonthValidityOffset []MonthValidityOffset `xml:"MonthValidityOffset" json:"MonthValidityOffset"`
}

// MonthValidityOffsetVersionedStructure represents the MonthValidityOffset_VersionedStructure element
// Type for MONTH VALIDITY OFFSET.
type MonthValidityOffsetVersionedStructure struct {
	DataManagedObjectStructure
	// Month for which offset applies.
	Month string `xml:"Month" json:"Month"`
	// Name of MONTH VALIDITY OFFSET.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Number of days relative to start of month.
	DayOffset int `xml:"DayOffset" json:"DayOffset"`
}

// PricingRulesRelStructure represents the pricingRules_RelStructure element
// Ser of PRICING RULEs such for Frame.
type PricingRulesRelStructure struct {
	FrameContainmentStructure
	LimitingRuleInContext []LimitingRuleInContext `xml:"LimitingRuleInContext,omitempty" json:"LimitingRuleInContext,omitempty"`
	LimitingRule []LimitingRule `xml:"LimitingRule,omitempty" json:"LimitingRule,omitempty"`
	DiscountingRule []DiscountingRule `xml:"DiscountingRule,omitempty" json:"DiscountingRule,omitempty"`
	PricingRule []PricingRule `xml:"PricingRule,omitempty" json:"PricingRule,omitempty"`
}

// PricingRuleVersionedStructure represents the PricingRule_VersionedStructure element
// Type for PRICING RULE.
type PricingRuleVersionedStructure struct {
	DataManagedObjectStructure
	// Name of PRICING RULE parameter set.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Name of PRICING RULE parameter set.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// PricingRule method to use.
	MethodName *string `xml:"MethodName,omitempty" json:"MethodName,omitempty"`
	TypeOfPricingRuleRef *TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef,omitempty" json:"TypeOfPricingRuleRef,omitempty"`
	LimitingRuleRef *LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef *DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef *PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	// Pricing factor to use.
	Factor *float64 `xml:"Factor,omitempty" json:"Factor,omitempty"`
	// Currency unit for amount +v1.1
	Currency *string `xml:"Currency,omitempty" json:"Currency,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// URLor rule. with infor fmethod to use.
	Url *string `xml:"url,omitempty" json:"url,omitempty"`
}

// DiscountingRuleVersionedStructure represents the DiscountingRule_VersionedStructure element
// Type for DISCOUNTING RULE.
type DiscountingRuleVersionedStructure struct {
	PricingRuleVersionedStructure
	// Discount as a percentage of the full price.
	DiscountAsPercentage *float64 `xml:"DiscountAsPercentage,omitempty" json:"DiscountAsPercentage,omitempty"`
	// Discount amount. i.e. DIfference between full and discounted price.
	DiscountAsValue *float64 `xml:"DiscountAsValue,omitempty" json:"DiscountAsValue,omitempty"`
	// Whether this discount can be used cumulatively with other discounts.
	CanBeCumulative *bool `xml:"CanBeCumulative,omitempty" json:"CanBeCumulative,omitempty"`
}

// LimitingRuleVersionedStructure represents the LimitingRule_VersionedStructure element
// Type for LIMITING RULE.
type LimitingRuleVersionedStructure struct {
	DiscountingRuleVersionedStructure
	// Maximum price at which to cap discounted fare.
	MinimumPrice *float64 `xml:"MinimumPrice,omitempty" json:"MinimumPrice,omitempty"`
	// Minumum price as percentage of whole price.
	MinimumPriceAsPercentage *float64 `xml:"MinimumPriceAsPercentage,omitempty" json:"MinimumPriceAsPercentage,omitempty"`
	// Minimum price as a number of single flat fares.
	MinimumPriceAsMultiple *int `xml:"MinimumPriceAsMultiple,omitempty" json:"MinimumPriceAsMultiple,omitempty"`
	// Minimum amount at which to cap discounted fare.
	MaximumPrice *float64 `xml:"MaximumPrice,omitempty" json:"MaximumPrice,omitempty"`
	// Maxumum price as percentage of whole price.
	MaximumPriceAsPercentage *float64 `xml:"MaximumPriceAsPercentage,omitempty" json:"MaximumPriceAsPercentage,omitempty"`
	// Maximum price as a number of single flat fares.
	MaximumPriceAsMultiple *int `xml:"MaximumPriceAsMultiple,omitempty" json:"MaximumPriceAsMultiple,omitempty"`
	// Minimum Limit as percentage of whole price.
	MinimumLimitPriceAsPercentage *float64 `xml:"MinimumLimitPriceAsPercentage,omitempty" json:"MinimumLimitPriceAsPercentage,omitempty"`
	// Limiting amount below which resulting fare may not be sold.
	MinimumLimitPrice *float64 `xml:"MinimumLimitPrice,omitempty" json:"MinimumLimitPrice,omitempty"`
	// Maxumum Limit as percentage of whole price.
	MaximumLimitPriceAsPercentage *float64 `xml:"MaximumLimitPriceAsPercentage,omitempty" json:"MaximumLimitPriceAsPercentage,omitempty"`
	// Limiting amount above which resulting fare may not be sold.
	MaximumLimitPrice *float64 `xml:"MaximumLimitPrice,omitempty" json:"MaximumLimitPrice,omitempty"`
}

// TypeOfPricingRuleVersionStructure represents the TypeOfPricingRule_VersionStructure element
// Type for TYPE OF PRICING RULE.
type TypeOfPricingRuleVersionStructure struct {
	TypeOfValueVersionStructure
	// Tax category associated with pricing rule.
	TaxCategory *TaxCategoryEnumeration `xml:"TaxCategory,omitempty" json:"TaxCategory,omitempty"`
}

// PricingServicesRelStructure represents the pricingServices_RelStructure element
// Type for containment in frame of FARE DYNAMIC PRICING SERVICEs.
type PricingServicesRelStructure struct {
	StrictContainmentAggregationStructure
	PricingService []PricingService `xml:"PricingService" json:"PricingService"`
}

// PricingServiceVersionedStructure represents the PricingService_VersionedStructure element
// Type for PRICING SERVICE.
type PricingServiceVersionedStructure struct {
	DataManagedObjectStructure
	// Name of PRICING SERVICE parameter set.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// URL at which service is available.
	Url *string `xml:"Url,omitempty" json:"Url,omitempty"`
}

// PricingParameterSet represents the PricingParameterSet element
// Parameters  governing the calculation of fares.
type PricingParameterSet struct {
	PricingParameterSetVersionedStructure
}

// PriceUnit represents the PriceUnit element
// A unit to express prices: amount of currency, abstract fare unit, ticket unit or token etc.
type PriceUnit struct {
	PriceUnitVersionStructure
}

// Rounding represents the Rounding element
// Parameters describing how the results of calculations are to be rounded to the nearest quantum.
type Rounding struct {
	RoundingVersionedStructure
}

// RoundingStep represents the RoundingStep element
// A rounding step to use to round a range of values. Any value larger than the step key and smaller tha the next step key should be rounded to this value.
type RoundingStep struct {
	RoundingStepVersionedChildStructure
}

// FareDayType represents the FareDayType element
// A type of day used in the fare collection domain, characterized by one or more properties which affect the definition of access rights and prices in the fare system.
type FareDayType struct {
	FareDayTypeVersionedStructure
}

// MonthValidityOffset represents the MonthValidityOffset element
// Days before (negative) or after (positive)  the start of the month that a product with a calendar period driven activation becomes valid.
type MonthValidityOffset struct {
	MonthValidityOffsetVersionedStructure
}

// PricingRule represents the PricingRule element
// Parameters describing how a fare is to be computed.
type PricingRule struct {
	PricingRuleVersionedStructure
}

// DiscountingRule represents the DiscountingRule element
// A price for which a discount can be offered.
type DiscountingRule struct {
	DiscountingRuleVersionedStructure
}

// LimitingRule represents the LimitingRule element
// A price for which a discount can be offered.
type LimitingRule struct {
	LimitingRuleVersionedStructure
}

// LimitingRuleInContext represents the LimitingRuleInContext element
// OPTIMISED version whcih can be be used only in line assues ID of comtainign context  -no  id checking. A price for which a discount can be offered.
type LimitingRuleInContext struct {
	LimitingRuleVersionedStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// TypeOfPricingRule represents the TypeOfPricingRule element
// Classification of pricing rule. Can be used for VAT categories, etc.  +v1.1
type TypeOfPricingRule struct {
	TypeOfPricingRuleVersionStructure
}

// PricingService represents the PricingService element
// A web service used to provide prices dynamically at time of booking or purchase.
type PricingService struct {
	PricingServiceVersionedStructure
}

// PriceableObjectRefsRelStructure represents the priceableObjectRefs_RelStructure element
// Type for a list of PRICEABLE ELEMENTs.
type PriceableObjectRefsRelStructure struct {
	OneToManyRelationshipStructure
	CustomerPurchasePackageElementRef []CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
	CustomerPurchasePackageRef []CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	ControllableElementRef []ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	ValidableElementRef []ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	AdditionalDriverOptionRef []AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef []RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef []RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef []SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef []SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef []MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef []InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef []FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef []SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef []UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef []StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef []RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef []RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef []LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef []EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef []EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef []EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef []GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef []CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef []VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef []CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef []UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef []ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef []SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef []PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef []ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef []TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef []ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef []RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef []ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef []ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef []CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef []ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef []BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef []PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
	SeriesConstraintRef []SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	SalesOfferPackageElementRef []SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	SalesOfferPackageRef []SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	DistanceMatrixElementInverseRef []DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
	DistanceMatrixElementRef []DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	FareStructureElementRef []FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	FulfilmentMethodRef []FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	CappingRuleRef []CappingRuleRef `xml:"CappingRuleRef,omitempty" json:"CappingRuleRef,omitempty"`
	EntitlementProductRef []EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef []SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef []PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef []AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef []UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef []ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef []CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef []SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef []FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef []ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	TimeIntervalRef []TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	GeographicalIntervalRef []GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	ParkingChargeBandRef []ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef []TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	FareQuotaFactorRef []FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef []FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef []QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	GeographicalStructureFactorRef []GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	PriceableObjectRef []PriceableObjectRef `xml:"PriceableObjectRef,omitempty" json:"PriceableObjectRef,omitempty"`
}

// PriceableObjectRefStructure represents the PriceableObjectRefStructure element
// Type for Reference to a PRICEABLE ELEMENT.
type PriceableObjectRefStructure struct {
	VersionOfObjectRefStructure
}

// FarePriceRefStructure represents the FarePriceRefStructure element
// Type for Reference to a FARE PRICE.
type FarePriceRefStructure struct {
	VersionOfObjectRefStructure
}

// PriceGroupRefStructure represents the PriceGroupRefStructure element
// Type for Reference to a PRICE GROUP.
type PriceGroupRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// PriceableObjectRef represents the PriceableObjectRef element
// Reference to a PRICEABLE ELEMENT.
type PriceableObjectRef struct {
	PriceableObjectRefStructure
}

// FarePriceRef represents the FarePriceRef element
// Reference to a FARE PRICE.
type FarePriceRef struct {
	FarePriceRefStructure
}

// PriceGroupRef represents the PriceGroupRef element
// Reference to a PRICE GROUP.
type PriceGroupRef struct {
	PriceGroupRefStructure
}

// FareElementInSequenceRefsRelStructure represents the fareElementInSequenceRefs_RelStructure element
// Type for a collection of one or more references to a  FARE STRUCTURE ELEMENT IN SEQUENCE.
type FareElementInSequenceRefsRelStructure struct {
	OneToManyRelationshipStructure
	ControllableElementInSequenceRef []ControllableElementInSequenceRef `xml:"ControllableElementInSequenceRef,omitempty" json:"ControllableElementInSequenceRef,omitempty"`
	FareStructureElementInSequenceRef []FareStructureElementInSequenceRef `xml:"FareStructureElementInSequenceRef,omitempty" json:"FareStructureElementInSequenceRef,omitempty"`
	AccessRightInProductRef []AccessRightInProductRef `xml:"AccessRightInProductRef,omitempty" json:"AccessRightInProductRef,omitempty"`
}

// FareElementInSequenceRefStructure represents the FareElementInSequenceRefStructure element
// Type for Reference to a FARE ELEMENT IN SEQUENCE.
type FareElementInSequenceRefStructure struct {
	OrderedVersionOfObjectRefStructure
}

// FareStructureFactorRefStructure represents the FareStructureFactorRefStructure element
// Type for Reference to a FARE STRUCTURE FACTOR.
type FareStructureFactorRefStructure struct {
	PriceableObjectRefStructure
}

// FareUnitRefStructure represents the FareUnitRefStructure element
// Type for Reference to a FARE UNIT.
type FareUnitRefStructure struct {
	PriceableObjectRefStructure
}

// FareIntervalRefStructure represents the FareIntervalRefStructure element
// Type for Reference to a FARE INTERVAL.
type FareIntervalRefStructure struct {
	PriceableObjectRefStructure
}

// TypeOfFareStructureFactorRefStructure represents the TypeOfFareStructureFactorRefStructure element
// Type for a TYPE OF TARIFF.
type TypeOfFareStructureFactorRefStructure struct {
	TypeOfValueRefStructure
}

// FareElementInSequenceRef represents the FareElementInSequenceRef element
// Reference to a FARE ELEMENT IN SEQUENCE.
type FareElementInSequenceRef struct {
	FareElementInSequenceRefStructure
}

// FareStructureFactorRef represents the FareStructureFactorRef element
// Reference to a FARE STRUCTURE FACTOR.
type FareStructureFactorRef struct {
	FareStructureFactorRefStructure
}

// FareUnitRef represents the FareUnitRef element
// Reference to a FARE UNIT.
type FareUnitRef struct {
	FareUnitRefStructure
}

// FareIntervalRef represents the FareIntervalRef element
// Reference to a FARE INTERVAL.
type FareIntervalRef struct {
	FareIntervalRefStructure
}

// TypeOfFareStructureFactorRef represents the TypeOfFareStructureFactorRef element
// Reference to a TYPE OF FARE STRUCTURE FACTOR.
type TypeOfFareStructureFactorRef struct {
	TypeOfFareStructureFactorRefStructure
}

// SaleDiscountRightEnumeration represents the SaleDiscountRightEnumeration enumeration
// Allowed values for  SDALE DISCOUNT RIGHT enumeration +v1.1
type SaleDiscountRightEnumeration string

const (
	// SaleDiscountRightEnumerationTravelCard represents travelCard
	SaleDiscountRightEnumerationTravelCard SaleDiscountRightEnumeration = "travelCard"
	// SaleDiscountRightEnumerationPayAsYouGoRight represents payAsYouGoRight
	SaleDiscountRightEnumerationPayAsYouGoRight SaleDiscountRightEnumeration = "payAsYouGoRight"
	// SaleDiscountRightEnumerationStatutoryRight represents statutoryRight
	SaleDiscountRightEnumerationStatutoryRight SaleDiscountRightEnumeration = "statutoryRight"
	// SaleDiscountRightEnumerationOther represents other
	SaleDiscountRightEnumerationOther SaleDiscountRightEnumeration = "other"
)

// UsageDiscountRightEnumeration represents the UsageDiscountRightEnumeration enumeration
// Allowed values for  USAGE DISCOUNT RIGHT enumeration +v1.1
type UsageDiscountRightEnumeration string

const (
	// UsageDiscountRightEnumerationMileagePoints represents mileagePoints
	UsageDiscountRightEnumerationMileagePoints UsageDiscountRightEnumeration = "mileagePoints"
	// UsageDiscountRightEnumerationUsageRebate represents usageRebate
	UsageDiscountRightEnumerationUsageRebate UsageDiscountRightEnumeration = "usageRebate"
	// UsageDiscountRightEnumerationOther represents other
	UsageDiscountRightEnumerationOther UsageDiscountRightEnumeration = "other"
)

// CappingPeriodEnumeration represents the CappingPeriodEnumeration enumeration
// Allowed values for CAPPING PERIOD.
type CappingPeriodEnumeration string

const (
	// CappingPeriodEnumerationDay represents day
	CappingPeriodEnumerationDay CappingPeriodEnumeration = "day"
	// CappingPeriodEnumerationWeek represents week
	CappingPeriodEnumerationWeek CappingPeriodEnumeration = "week"
	// CappingPeriodEnumerationMonth represents month
	CappingPeriodEnumerationMonth CappingPeriodEnumeration = "month"
	// CappingPeriodEnumerationNone represents none
	CappingPeriodEnumerationNone CappingPeriodEnumeration = "none"
)

// AmountOfPriceUnitEnumeration represents the AmountOfPriceUnitEnumeration enumeration
// Allowed values for AMOUNT OF PRICE UNIT enumeration +v1.1
type AmountOfPriceUnitEnumeration string

const (
	// AmountOfPriceUnitEnumerationTripCarnet represents tripCarnet
	AmountOfPriceUnitEnumerationTripCarnet AmountOfPriceUnitEnumeration = "tripCarnet"
	// AmountOfPriceUnitEnumerationPassCarnet represents passCarnet
	AmountOfPriceUnitEnumerationPassCarnet AmountOfPriceUnitEnumeration = "passCarnet"
	// AmountOfPriceUnitEnumerationUnitCoupon represents unitCoupon
	AmountOfPriceUnitEnumerationUnitCoupon AmountOfPriceUnitEnumeration = "unitCoupon"
	// AmountOfPriceUnitEnumerationStoredValue represents storedValue
	AmountOfPriceUnitEnumerationStoredValue AmountOfPriceUnitEnumeration = "storedValue"
	// AmountOfPriceUnitEnumerationOther represents other
	AmountOfPriceUnitEnumerationOther AmountOfPriceUnitEnumeration = "other"
)

// PreassignedFareProductEnumeration represents the PreassignedFareProductEnumeration enumeration
// Allowed values for  PREASSIGNED FARE PRODUCT ProductType. +v1.1
type PreassignedFareProductEnumeration string

const (
	// PreassignedFareProductEnumerationSingleTrip represents singleTrip
	PreassignedFareProductEnumerationSingleTrip PreassignedFareProductEnumeration = "singleTrip"
	// PreassignedFareProductEnumerationShortTrip represents shortTrip
	PreassignedFareProductEnumerationShortTrip PreassignedFareProductEnumeration = "shortTrip"
	// PreassignedFareProductEnumerationTimeLimitedSingleTrip represents timeLimitedSingleTrip
	PreassignedFareProductEnumerationTimeLimitedSingleTrip PreassignedFareProductEnumeration = "timeLimitedSingleTrip"
	// PreassignedFareProductEnumerationDayReturnTrip represents dayReturnTrip
	PreassignedFareProductEnumerationDayReturnTrip PreassignedFareProductEnumeration = "dayReturnTrip"
	// PreassignedFareProductEnumerationPeriodReturnTrip represents periodReturnTrip
	PreassignedFareProductEnumerationPeriodReturnTrip PreassignedFareProductEnumeration = "periodReturnTrip"
	// PreassignedFareProductEnumerationMultistepTrip represents multistepTrip
	PreassignedFareProductEnumerationMultistepTrip PreassignedFareProductEnumeration = "multistepTrip"
	// PreassignedFareProductEnumerationDayPass represents dayPass
	PreassignedFareProductEnumerationDayPass PreassignedFareProductEnumeration = "dayPass"
	// PreassignedFareProductEnumerationPeriodPass represents periodPass
	PreassignedFareProductEnumerationPeriodPass PreassignedFareProductEnumeration = "periodPass"
	// PreassignedFareProductEnumerationSupplement represents supplement
	PreassignedFareProductEnumerationSupplement PreassignedFareProductEnumeration = "supplement"
	// PreassignedFareProductEnumerationOther represents other
	PreassignedFareProductEnumerationOther PreassignedFareProductEnumeration = "other"
)

// SupplementProductEnumeration represents the SupplementProductEnumeration enumeration
// Allowed values for SUPPLEMENT PRODUCT enumeration +v1.1
type SupplementProductEnumeration string

const (
	// SupplementProductEnumerationSupplementProductEnumerationSeatReservation represents seatReservation
	SupplementProductEnumerationSupplementProductEnumerationSeatReservation SupplementProductEnumeration = "seatReservation"
	// SupplementProductEnumerationSupplementProductEnumerationBicycle represents bicycle
	SupplementProductEnumerationSupplementProductEnumerationBicycle SupplementProductEnumeration = "bicycle"
	// SupplementProductEnumerationSupplementProductEnumerationDog represents dog
	SupplementProductEnumerationSupplementProductEnumerationDog SupplementProductEnumeration = "dog"
	// SupplementProductEnumerationSupplementProductEnumerationAnimal represents animal
	SupplementProductEnumerationSupplementProductEnumerationAnimal SupplementProductEnumeration = "animal"
	// SupplementProductEnumerationSupplementProductEnumerationMeal represents meal
	SupplementProductEnumerationSupplementProductEnumerationMeal SupplementProductEnumeration = "meal"
	// SupplementProductEnumerationSupplementProductEnumerationWifi represents wifi
	SupplementProductEnumerationSupplementProductEnumerationWifi SupplementProductEnumeration = "wifi"
	// SupplementProductEnumerationSupplementProductEnumerationExtraLuggage represents extraLuggage
	SupplementProductEnumerationSupplementProductEnumerationExtraLuggage SupplementProductEnumeration = "extraLuggage"
	// SupplementProductEnumerationSupplementProductEnumerationPenalty represents penalty
	SupplementProductEnumerationSupplementProductEnumerationPenalty SupplementProductEnumeration = "penalty"
	// SupplementProductEnumerationSupplementProductEnumerationUpgrade represents upgrade
	SupplementProductEnumerationSupplementProductEnumerationUpgrade SupplementProductEnumeration = "upgrade"
	// SupplementProductEnumerationSupplementProductEnumerationJourneyExtension represents journeyExtension
	SupplementProductEnumerationSupplementProductEnumerationJourneyExtension SupplementProductEnumeration = "journeyExtension"
	// SupplementProductEnumerationSupplementProductEnumerationJourneyAddOn represents journeyAddOn
	SupplementProductEnumerationSupplementProductEnumerationJourneyAddOn SupplementProductEnumeration = "journeyAddOn"
	// SupplementProductEnumerationSupplementProductEnumerationEventAddOn represents eventAddOn
	SupplementProductEnumerationSupplementProductEnumerationEventAddOn SupplementProductEnumeration = "eventAddOn"
	// SupplementProductEnumerationSupplementProductEnumerationParking represents parking
	SupplementProductEnumerationSupplementProductEnumerationParking SupplementProductEnumeration = "parking"
	// SupplementProductEnumerationSupplementProductEnumerationTopUp represents topUp
	SupplementProductEnumerationSupplementProductEnumerationTopUp SupplementProductEnumeration = "topUp"
	// SupplementProductEnumerationSupplementProductEnumerationOther represents other
	SupplementProductEnumerationSupplementProductEnumerationOther SupplementProductEnumeration = "other"
)

// ChargingMomentEnumeration represents the ChargingMomentEnumeration enumeration
// Allowed values for  ChargingMomentType. +v1.1
type ChargingMomentEnumeration string

const (
	// ChargingMomentEnumerationBeforeTravel represents beforeTravel
	ChargingMomentEnumerationBeforeTravel ChargingMomentEnumeration = "beforeTravel"
	// ChargingMomentEnumerationOnStartOfTravel represents onStartOfTravel
	ChargingMomentEnumerationOnStartOfTravel ChargingMomentEnumeration = "onStartOfTravel"
	// ChargingMomentEnumerationBeforeEndOfTravel represents beforeEndOfTravel
	ChargingMomentEnumerationBeforeEndOfTravel ChargingMomentEnumeration = "beforeEndOfTravel"
	// ChargingMomentEnumerationBeforeTravelThenAdjustAtEndOfTravel represents beforeTravelThenAdjustAtEndOfTravel
	ChargingMomentEnumerationBeforeTravelThenAdjustAtEndOfTravel ChargingMomentEnumeration = "beforeTravelThenAdjustAtEndOfTravel"
	// ChargingMomentEnumerationOnStartThenAdjustAtEndOfTravel represents onStartThenAdjustAtEndOfTravel
	ChargingMomentEnumerationOnStartThenAdjustAtEndOfTravel ChargingMomentEnumeration = "onStartThenAdjustAtEndOfTravel"
	// ChargingMomentEnumerationOnStarThenAdjustAtEndOfFareDay represents onStarThenAdjustAtEndOfFareDay
	// DEPRECATED TYPO
	ChargingMomentEnumerationOnStarThenAdjustAtEndOfFareDay ChargingMomentEnumeration = "onStarThenAdjustAtEndOfFareDay"
	// ChargingMomentEnumerationOnStartThenAdjustAtEndOfFareDay represents onStartThenAdjustAtEndOfFareDay
	ChargingMomentEnumerationOnStartThenAdjustAtEndOfFareDay ChargingMomentEnumeration = "onStartThenAdjustAtEndOfFareDay"
	// ChargingMomentEnumerationOnStartThenAdjustAtEndOfChargePeriod represents onStartThenAdjustAtEndOfChargePeriod
	ChargingMomentEnumerationOnStartThenAdjustAtEndOfChargePeriod ChargingMomentEnumeration = "onStartThenAdjustAtEndOfChargePeriod"
	// ChargingMomentEnumerationAtEndOfTravel represents atEndOfTravel
	ChargingMomentEnumerationAtEndOfTravel ChargingMomentEnumeration = "atEndOfTravel"
	// ChargingMomentEnumerationAtEndOfFareDay represents atEndOfFareDay
	ChargingMomentEnumerationAtEndOfFareDay ChargingMomentEnumeration = "atEndOfFareDay"
	// ChargingMomentEnumerationAtEndOfChargePeriod represents atEndOfChargePeriod
	ChargingMomentEnumerationAtEndOfChargePeriod ChargingMomentEnumeration = "atEndOfChargePeriod"
	// ChargingMomentEnumerationFree represents free
	ChargingMomentEnumerationFree ChargingMomentEnumeration = "free"
	// ChargingMomentEnumerationAnyTime represents anyTime
	ChargingMomentEnumerationAnyTime ChargingMomentEnumeration = "anyTime"
	// ChargingMomentEnumerationOther represents other
	ChargingMomentEnumerationOther ChargingMomentEnumeration = "other"
)

// ServiceAccessRightRefsRelStructure represents the serviceAccessRightRefs_RelStructure element
// Type for references to a SERVICE ACCESS RIGHT.
type ServiceAccessRightRefsRelStructure struct {
	OneToManyRelationshipStructure
	EntitlementProductRef []EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef []SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef []PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef []AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef []UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef []ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef []CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef []SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef []FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef []ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
}

// ServiceAccessRightRefStructure represents the ServiceAccessRightRefStructure element
// Type for Reference to a SERVICE ACCESS RIGHT.
type ServiceAccessRightRefStructure struct {
	PriceableObjectRefStructure
}

// FareProductRefsRelStructure represents the fareProductRefs_RelStructure element
// Type for references to a FARE PRODUCT.
type FareProductRefsRelStructure struct {
	OneToManyRelationshipStructure
	SupplementProductRef []SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef []PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef []AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef []UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef []ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef []CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef []SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef []FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
}

// FareProductRefStructure represents the FareProductRefStructure element
// Type for Reference to a FARE PRODUCT.
type FareProductRefStructure struct {
	ServiceAccessRightRefStructure
}

// SaleDiscountRightRefStructure represents the SaleDiscountRightRefStructure element
// Type for Reference to a SALES DISCOUNT RIGHT.
type SaleDiscountRightRefStructure struct {
	FareProductRefStructure
}

// EntitlementProductRefStructure represents the EntitlementProductRefStructure element
// Type for Reference to a ENTITLEMENT PRODUCT.
type EntitlementProductRefStructure struct {
	ServiceAccessRightRefStructure
}

// ThirdPartyProductRefsRelStructure represents the thirdPartyProductRefs_RelStructure element
// Type for list of  references to a DISCOUNT RIGHT.
type ThirdPartyProductRefsRelStructure struct {
	OneToManyRelationshipStructure
	ThirdPartyProductRef []ThirdPartyProductRef `xml:"ThirdPartyProductRef" json:"ThirdPartyProductRef"`
}

// ThirdPartyProductRefStructure represents the ThirdPartyProductRefStructure element
// Type for Reference to a THIRD PARTY PRODUCT.
type ThirdPartyProductRefStructure struct {
	FareProductRefStructure
}

// DiscountRightRefsRelStructure represents the discountRightRefs_RelStructure element
// Type for list of  references to a DISCOUNT RIGHT.
type DiscountRightRefsRelStructure struct {
	OneToManyRelationshipStructure
	CappedDiscountRightRef []CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef []SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	UsageDiscountRightRef []UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
}

// UsageDiscountRightRefStructure represents the UsageDiscountRightRefStructure element
// Type for Reference to a USAGE DISCOUNT RIGHT.
type UsageDiscountRightRefStructure struct {
	FareProductRefStructure
}

// CappedDiscountRightRefStructure represents the CappedDiscountRightRefStructure element
// Type for Reference to a CAPPED DISCOUNT RIGHT.
type CappedDiscountRightRefStructure struct {
	SaleDiscountRightRefStructure
}

// CappingRuleRefStructure represents the CappingRuleRefStructure element
// Type for Reference to a CAPPING RULE.
type CappingRuleRefStructure struct {
	PriceableObjectRefStructure
}

// AmountOfPriceUnitRefsRelStructure represents the amountOfPriceUnitRefs_RelStructure element
// Type for list of references to an AMOUNT OF PRICE UNIT PRODUCT.
type AmountOfPriceUnitRefsRelStructure struct {
	OneToManyRelationshipStructure
	AmountOfPriceUnitProductRef []AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef" json:"AmountOfPriceUnitProductRef"`
}

// AmountOfPriceUnitProductRefStructure represents the AmountOfPriceUnitProductRefStructure element
// Type for Reference to an AMOUNT OF PRICE UNIT PRODUCT.
type AmountOfPriceUnitProductRefStructure struct {
	FareProductRefStructure
}

// PreassignedFareProductRefStructure represents the PreassignedFareProductRefStructure element
// Type for Reference to a PREASSIGNED FARE PRODUCT.
type PreassignedFareProductRefStructure struct {
	FareProductRefStructure
}

// SupplementProductRefStructure represents the SupplementProductRefStructure element
// Type for Reference to a SUPPLEMENT PRODUCT.
type SupplementProductRefStructure struct {
	PreassignedFareProductRefStructure
}

// FareProductPriceRefStructure represents the FareProductPriceRefStructure element
// Type for Reference to a FARE PRODUCT PRICE.
type FareProductPriceRefStructure struct {
	FarePriceRefStructure
}

// CappingRulePriceRefStructure represents the CappingRulePriceRefStructure element
// Type for Reference to a CAPPING RULE PRICE.
type CappingRulePriceRefStructure struct {
	FarePriceRefStructure
}

// AccessRightInProductRefStructure represents the AccessRightInProductRefStructure element
// Type for Reference to an ACCESS RIGHT IN PRODUCT.
type AccessRightInProductRefStructure struct {
	FareElementInSequenceRefStructure
}

// ChargingMomentRefStructure represents the ChargingMomentRefStructure element
// Type for a CHARGING MOMENT. +v1.1
type ChargingMomentRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfFareProductRefsRelStructure represents the typeOfFareProductRefs_RelStructure element
// Type for a list of TYPEs OF FARE PRODUCT.
type TypeOfFareProductRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfFareProductRef []TypeOfFareProductRef `xml:"TypeOfFareProductRef" json:"TypeOfFareProductRef"`
}

// TypeOfFareProductRefStructure represents the TypeOfFareProductRefStructure element
// Type for Reference to a TYPE OF FARE PRODUCT.
type TypeOfFareProductRefStructure struct {
	TypeOfValueRefStructure
}

// ServiceAccessRightRef represents the ServiceAccessRightRef element
// Reference to a SERVICE ACCESS RIGHT.
type ServiceAccessRightRef struct {
	ServiceAccessRightRefStructure
}

// FareProductRef represents the FareProductRef element
// Reference to a FARE PRODUCT.
type FareProductRef struct {
	FareProductRefStructure
}

// SaleDiscountRightRef represents the SaleDiscountRightRef element
// Reference to a SALES DISCOUNT RIGHT.
type SaleDiscountRightRef struct {
	SaleDiscountRightRefStructure
}

// EntitlementProductRef represents the EntitlementProductRef element
// Reference to a ENTITLEMENT PRODUCT.
type EntitlementProductRef struct {
	EntitlementProductRefStructure
}

// ThirdPartyProductRef represents the ThirdPartyProductRef element
// Reference to a THIRD PARTY PRODUCT.
type ThirdPartyProductRef struct {
	ThirdPartyProductRefStructure
}

// UsageDiscountRightRef represents the UsageDiscountRightRef element
// Reference to a USAGE DISCOUNT RIGHT.
type UsageDiscountRightRef struct {
	UsageDiscountRightRefStructure
}

// CappedDiscountRightRef represents the CappedDiscountRightRef element
// Reference to a CAPPED DISCOUNT RIGHT.
type CappedDiscountRightRef struct {
	CappedDiscountRightRefStructure
}

// CappingRuleRef represents the CappingRuleRef element
// Reference to a CAPPING RULE.
type CappingRuleRef struct {
	CappingRuleRefStructure
}

// AmountOfPriceUnitProductRef represents the AmountOfPriceUnitProductRef element
// Reference to a AMOUNT OF PRICE UNIT PRODUCT.
type AmountOfPriceUnitProductRef struct {
	AmountOfPriceUnitProductRefStructure
}

// PreassignedFareProductRef represents the PreassignedFareProductRef element
// Reference to a PREASSIGNED FARE PRODUCT.
type PreassignedFareProductRef struct {
	PreassignedFareProductRefStructure
}

// SupplementProductRef represents the SupplementProductRef element
// Reference to a SUPPLEMENT PRODUCT.
type SupplementProductRef struct {
	SupplementProductRefStructure
}

// FareProductPriceRef represents the FareProductPriceRef element
// Reference to a FARE PRODUCT PRICE.
type FareProductPriceRef struct {
	FareProductPriceRefStructure
}

// CappingRulePriceRef represents the CappingRulePriceRef element
// Reference to a CAPPING RULE PRICE.
type CappingRulePriceRef struct {
	CappingRulePriceRefStructure
}

// AccessRightInProductRef represents the AccessRightInProductRef element
// Reference to an ACCESS RIGHT IN PRODUCT.
type AccessRightInProductRef struct {
	AccessRightInProductRefStructure
}

// ChargingMomentRef represents the ChargingMomentRef element
// Reference to a CHARGING MOMENT. +v1.1
type ChargingMomentRef struct {
	ChargingMomentRefStructure
}

// TypeOfFareProductRef represents the TypeOfFareProductRef element
// Reference to a TYPE OF FARE PRODUCT.
type TypeOfFareProductRef struct {
	TypeOfFareProductRefStructure
}

// FareTableRefsRelStructure represents the fareTableRefs_RelStructure element
// Type for a list of references to  FARE FARE TABLEs.
type FareTableRefsRelStructure struct {
	OneToManyRelationshipStructure
	StandardFareTableRef []StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef []FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
}

// FareTableRefStructure represents the FareTableRefStructure element
// Type for Reference to a FARE FARE TABLEs
type FareTableRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// StandardFareTableRefsRelStructure represents the StandardFareTableRefs_RelStructure element
// Type for a list of FARE STANDARD FARE TABLEs.
type StandardFareTableRefsRelStructure struct {
	OneToManyRelationshipStructure
	StandardFareTableRef []StandardFareTableRef `xml:"StandardFareTableRef" json:"StandardFareTableRef"`
}

// StandardFareTableRefStructure represents the StandardFareTableRefStructure element
// Type for Reference to a FARE STANDARD FARE TABLE.
type StandardFareTableRefStructure struct {
	FareTableRefStructure
}

// CellRefsRelStructure represents the cellRefs_RelStructure element
// Type for a list of FARE CELLs.
type CellRefsRelStructure struct {
	StrictContainmentAggregationStructure
	CellRef []CellRef `xml:"CellRef" json:"CellRef"`
}

// CellRefStructure represents the CellRefStructure element
// Type for Reference to a CELL.
type CellRefStructure struct {
	VersionOfObjectRefStructure
}

// FareTableColumnRefStructure represents the FareTableColumnRefStructure element
// Type for Reference to a FARE FARE TABLE COLUMN.
type FareTableColumnRefStructure struct {
	VersionOfObjectRefStructure
}

// FareTableRowRefStructure represents the FareTableRowRefStructure element
// Type for Reference to a FARE FARE TABLE ROW.
type FareTableRowRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfFareTableRefStructure represents the TypeOfFareTableRefStructure element
// Type for Reference to a TYPE OF FARE TABLE. +v1.1
type TypeOfFareTableRefStructure struct {
	TypeOfValueRefStructure
}

// FareTableRef represents the FareTableRef element
// Reference to a FARE TABLE.
type FareTableRef struct {
	FareTableRefStructure
}

// StandardFareTableRef represents the StandardFareTableRef element
// Reference to a STANDARD FARE TABLE
type StandardFareTableRef struct {
	StandardFareTableRefStructure
}

// CellRef represents the CellRef element
// Reference to a CELL.
type CellRef struct {
	CellRefStructure
}

// FareTableColumnRef represents the FareTableColumnRef element
// Reference to a FARE TABLE COLUMN.
type FareTableColumnRef struct {
	FareTableColumnRefStructure
}

// FareTableRowRef represents the FareTableRowRef element
// Reference to a FARE TABLE ROW.
type FareTableRowRef struct {
	FareTableRowRefStructure
}

// TypeOfFareTableRef represents the TypeOfFareTableRef element
// Reference to a TYPE OF FARE TABLE.
type TypeOfFareTableRef struct {
	TypeOfFareTableRefStructure
}

// FarePricesInFrameRelStructure represents the farePricesInFrame_RelStructure element
// Type for containment in frame of FARE Prices.
type FarePricesInFrameRelStructure struct {
	FrameContainmentStructure
	PriceGroup []PriceGroup `xml:"PriceGroup,omitempty" json:"PriceGroup,omitempty"`
}

// PriceableObjectVersionStructure represents the PriceableObject_VersionStructure element
// Type for PRICEABLE OBJECT.
type PriceableObjectVersionStructure struct {
	DataManagedObjectStructure
	// Name of PRICEABLE OBJECT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of PRICEABLE OBJECT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// URL for information on element.
	Url *string `xml:"Url,omitempty" json:"Url,omitempty"`
	// Hyperlinks associated with GPRICEABLE OBLECT. Can be used to associated pfs, web pages etc, conditions of use etc.
	InfoLinks *InfoLinksRelStructure `xml:"infoLinks,omitempty" json:"infoLinks,omitempty"`
	// ALTERNATIVE NAMEs for PRICEABLE OBJECT.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// NOTICE ASSIGNMENTs for PRICEABLE OBJECT.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	PricingServiceRef *PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	LimitingRuleRef *LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef *DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef *PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	// PRICE GROUPSs  making up FARE PRODUCT.
	PriceGroups *PriceGroupsRelStructure `xml:"priceGroups,omitempty" json:"priceGroups,omitempty"`
	// Other FARE TABLESs for DISTANCE MATRIX ELEMENT.
	FareTables *FareTablesRelStructure `xml:"fareTables,omitempty" json:"fareTables,omitempty"`
}

// FareTablesRelStructure represents the fareTables_RelStructure element
// Type for a list of FAREFARE TABLE PRICE GROUP.s.
type FareTablesRelStructure struct {
	StrictContainmentAggregationStructure
	StandardFareTableRef []StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef []FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	StandardFareTable []StandardFareTable `xml:"StandardFareTable,omitempty" json:"StandardFareTable,omitempty"`
	FareTableInContext []FareTableInContext `xml:"FareTableInContext,omitempty" json:"FareTableInContext,omitempty"`
	FareTable []FareTable `xml:"FareTable,omitempty" json:"FareTable,omitempty"`
}

// FarePricesRelStructure represents the farePrices_RelStructure element
// Type for a list of FARE PRICEs.
type FarePricesRelStructure struct {
	StrictContainmentAggregationStructure
	CustomerPurchasePackagePriceRef []CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef []ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef []TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef []TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef []QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef []ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef []ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef []GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef []GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef []UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef []SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef []SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef []DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef []FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef []FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef []CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef []FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef []FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	CustomerPurchasePackagePrice []CustomerPurchasePackagePrice `xml:"CustomerPurchasePackagePrice,omitempty" json:"CustomerPurchasePackagePrice,omitempty"`
	ParkingPrice []ParkingPrice `xml:"ParkingPrice,omitempty" json:"ParkingPrice,omitempty"`
	SalesOfferPackagePrice []SalesOfferPackagePrice `xml:"SalesOfferPackagePrice,omitempty" json:"SalesOfferPackagePrice,omitempty"`
	FulfilmentMethodPrice []FulfilmentMethodPrice `xml:"FulfilmentMethodPrice,omitempty" json:"FulfilmentMethodPrice,omitempty"`
	CappingRulePrice []CappingRulePrice `xml:"CappingRulePrice,omitempty" json:"CappingRulePrice,omitempty"`
	FareProductPrice []FareProductPrice `xml:"FareProductPrice,omitempty" json:"FareProductPrice,omitempty"`
	FareStructureElementPrice []FareStructureElementPrice `xml:"FareStructureElementPrice,omitempty" json:"FareStructureElementPrice,omitempty"`
	TimeIntervalPrice []TimeIntervalPrice `xml:"TimeIntervalPrice,omitempty" json:"TimeIntervalPrice,omitempty"`
	TimeUnitPrice []TimeUnitPrice `xml:"TimeUnitPrice,omitempty" json:"TimeUnitPrice,omitempty"`
	QualityStructureFactorPrice []QualityStructureFactorPrice `xml:"QualityStructureFactorPrice,omitempty" json:"QualityStructureFactorPrice,omitempty"`
	ControllableElementPrice []ControllableElementPrice `xml:"ControllableElementPrice,omitempty" json:"ControllableElementPrice,omitempty"`
	ValidableElementPrice []ValidableElementPrice `xml:"ValidableElementPrice,omitempty" json:"ValidableElementPrice,omitempty"`
	UsageParameterPrice []UsageParameterPrice `xml:"UsageParameterPrice,omitempty" json:"UsageParameterPrice,omitempty"`
	DistanceMatrixElementPrice []DistanceMatrixElementPrice `xml:"DistanceMatrixElementPrice,omitempty" json:"DistanceMatrixElementPrice,omitempty"`
	GeographicalIntervalPrice []GeographicalIntervalPrice `xml:"GeographicalIntervalPrice,omitempty" json:"GeographicalIntervalPrice,omitempty"`
	GeographicalUnitPrice []GeographicalUnitPrice `xml:"GeographicalUnitPrice,omitempty" json:"GeographicalUnitPrice,omitempty"`
	SeriesConstraintPrice []SeriesConstraintPrice `xml:"SeriesConstraintPrice,omitempty" json:"SeriesConstraintPrice,omitempty"`
}

// FarePriceVersionedChildStructure represents the FarePrice_VersionedChildStructure element
// Type for FARE PRICE.
type FarePriceVersionedChildStructure struct {
	VersionedChildStructure
	// Name of FARE PRICE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of FARE PRICE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Start date for selling product or service at the PRICE.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// End date for selling product or services at the PRICE.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	// PRICE amount. in specified currency.
	Amount *float64 `xml:"Amount,omitempty" json:"Amount,omitempty"`
	// Currency of Price ISO 4217.
	Currency *string `xml:"Currency,omitempty" json:"Currency,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// Other units for PRICE (If not in a currency).
	Units *float64 `xml:"Units,omitempty" json:"Units,omitempty"`
	// Interim amounts for any pricing rules  applied to derive price , for example VAT amount  charged.  +v1.1
	RuleStepResults *PriceRuleStepResultsRelStructure `xml:"ruleStepResults,omitempty" json:"ruleStepResults,omitempty"`
	// Whether the PRICE is allowed.
	IsAllowed *bool `xml:"IsAllowed,omitempty" json:"IsAllowed,omitempty"`
	PricingServiceRef *PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	CustomerPurchasePackagePriceRef *CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef *ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef *TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef *TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef *QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef *ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef *ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef *GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef *GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef *UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef *SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef *SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef *DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef *FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef *FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef *CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef *FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef *FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	LimitingRuleRef *LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef *DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef *PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	LimitingRuleInContext *LimitingRuleInContext `xml:"LimitingRuleInContext,omitempty" json:"LimitingRuleInContext,omitempty"`
	LimitingRule *LimitingRule `xml:"LimitingRule,omitempty" json:"LimitingRule,omitempty"`
	DiscountingRule *DiscountingRule `xml:"DiscountingRule,omitempty" json:"DiscountingRule,omitempty"`
	PricingRule *PricingRule `xml:"PricingRule,omitempty" json:"PricingRule,omitempty"`
	// Whether this discount can be used cumulatively with other discounts.
	CanBeCumulative *bool `xml:"CanBeCumulative,omitempty" json:"CanBeCumulative,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	// Ranking to give this discount relatove to other applicable discounts.
	Ranking *int `xml:"Ranking,omitempty" json:"Ranking,omitempty"`
}

// PriceRuleStepResultsRelStructure represents the priceRuleStepResults_RelStructure element
// Type for a list of rules step calculation results
type PriceRuleStepResultsRelStructure struct {
	StrictContainmentAggregationStructure
	// Record of amount deducted by a price rule calculation, e.g. an additional tax step. If PRICING RULES are chained there may be multiple steps to record.  
	// The source of the input price can be indicated by a FARE PRICE REF of some sort. 
	// The RULE STEP RESULT Amount is the resulting  net price after the pricing rule has been applied to the input amount.  
	// The RULE STEP RESULT  Adjustment Amount is  the difference beteen the original input price and the RULE STEP RESULT  Amount (so it is possible to derive the input price amount  by adding the the Adjustment to the  Net Amount.  A similar computation can be done for any units.
	RuleStepResult []PriceRuleStepResultStructure `xml:"RuleStepResult" json:"RuleStepResult"`
}

// PriceRuleStepResultStructure represents the PriceRuleStepResultStructure element
// Type for FARE STEP RESULT.
type PriceRuleStepResultStructure struct {
	CustomerPurchasePackagePriceRef *CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef *ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef *TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef *TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef *QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef *ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef *ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef *GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef *GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef *UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef *SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef *SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef *DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef *FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef *FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef *CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef *FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef *FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	// PRICE amount. in specified currency.
	Amount *float64 `xml:"Amount,omitempty" json:"Amount,omitempty"`
	// Currency of Price ISO 4217.
	Currency *string `xml:"Currency,omitempty" json:"Currency,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// Other units for PRICE (If not in a currency).
	Units *float64 `xml:"Units,omitempty" json:"Units,omitempty"`
	// Discount rate used .
	RateUsed *float64 `xml:"RateUsed,omitempty" json:"RateUsed,omitempty"`
	// Step calculation amount,  in same currency as STEP RESULT Amount. ( i.e. difference between  Base Amount and result Amount. PRICE) +v1.1
	AdjustmentAmount *float64 `xml:"AdjustmentAmount,omitempty" json:"AdjustmentAmount,omitempty"`
	// Step calculation Units,  in same  PRICE UNIT as STEP RESULT Amount.  ( i.e. difference between base Units and Result Units. +v1.1
	AdjustmentUnits *float64 `xml:"AdjustmentUnits,omitempty" json:"AdjustmentUnits,omitempty"`
	LimitingRuleRef *LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef *DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef *PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	RoundingStepRef *RoundingStepRef `xml:"RoundingStepRef,omitempty" json:"RoundingStepRef,omitempty"`
	// Explanation of calcuation step as text.  +v1.1
	Narrative *MultilingualString `xml:"Narrative,omitempty" json:"Narrative,omitempty"`
	// Identifier of PriceRuleStepResult
	Id *string `xml:"id,attr,omitempty" json:"id,omitempty"`
	// Order of step.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// CompositePricesRelStructure represents the compositePrices_RelStructure element
// Type for a list of FARE PRICEs.
type CompositePricesRelStructure struct {
	StrictContainmentAggregationStructure
	CustomerPurchasePackagePriceRef []CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef []ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef []TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef []TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef []QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef []ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef []ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef []GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef []GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef []UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef []SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef []SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef []DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef []FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef []FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef []CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef []FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef []FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	PriceGroupRef []PriceGroupRef `xml:"PriceGroupRef,omitempty" json:"PriceGroupRef,omitempty"`
	CustomerPurchasePackagePrice []CustomerPurchasePackagePrice `xml:"CustomerPurchasePackagePrice,omitempty" json:"CustomerPurchasePackagePrice,omitempty"`
	ParkingPrice []ParkingPrice `xml:"ParkingPrice,omitempty" json:"ParkingPrice,omitempty"`
	SalesOfferPackagePrice []SalesOfferPackagePrice `xml:"SalesOfferPackagePrice,omitempty" json:"SalesOfferPackagePrice,omitempty"`
	FulfilmentMethodPrice []FulfilmentMethodPrice `xml:"FulfilmentMethodPrice,omitempty" json:"FulfilmentMethodPrice,omitempty"`
	CappingRulePrice []CappingRulePrice `xml:"CappingRulePrice,omitempty" json:"CappingRulePrice,omitempty"`
	FareProductPrice []FareProductPrice `xml:"FareProductPrice,omitempty" json:"FareProductPrice,omitempty"`
	FareStructureElementPrice []FareStructureElementPrice `xml:"FareStructureElementPrice,omitempty" json:"FareStructureElementPrice,omitempty"`
	TimeIntervalPrice []TimeIntervalPrice `xml:"TimeIntervalPrice,omitempty" json:"TimeIntervalPrice,omitempty"`
	TimeUnitPrice []TimeUnitPrice `xml:"TimeUnitPrice,omitempty" json:"TimeUnitPrice,omitempty"`
	QualityStructureFactorPrice []QualityStructureFactorPrice `xml:"QualityStructureFactorPrice,omitempty" json:"QualityStructureFactorPrice,omitempty"`
	ControllableElementPrice []ControllableElementPrice `xml:"ControllableElementPrice,omitempty" json:"ControllableElementPrice,omitempty"`
	ValidableElementPrice []ValidableElementPrice `xml:"ValidableElementPrice,omitempty" json:"ValidableElementPrice,omitempty"`
	UsageParameterPrice []UsageParameterPrice `xml:"UsageParameterPrice,omitempty" json:"UsageParameterPrice,omitempty"`
	DistanceMatrixElementPrice []DistanceMatrixElementPrice `xml:"DistanceMatrixElementPrice,omitempty" json:"DistanceMatrixElementPrice,omitempty"`
	GeographicalIntervalPrice []GeographicalIntervalPrice `xml:"GeographicalIntervalPrice,omitempty" json:"GeographicalIntervalPrice,omitempty"`
	GeographicalUnitPrice []GeographicalUnitPrice `xml:"GeographicalUnitPrice,omitempty" json:"GeographicalUnitPrice,omitempty"`
	SeriesConstraintPrice []SeriesConstraintPrice `xml:"SeriesConstraintPrice,omitempty" json:"SeriesConstraintPrice,omitempty"`
	PriceGroup []PriceGroup `xml:"PriceGroup,omitempty" json:"PriceGroup,omitempty"`
}

// PriceGroupsRelStructure represents the priceGroups_RelStructure element
// Type for a list of FARE PRICEs.
type PriceGroupsRelStructure struct {
	StrictContainmentAggregationStructure
	PriceGroupRef []PriceGroupRef `xml:"PriceGroupRef,omitempty" json:"PriceGroupRef,omitempty"`
	PriceGroup []PriceGroup `xml:"PriceGroup,omitempty" json:"PriceGroup,omitempty"`
}

// PriceGroupVersionStructure represents the PriceGroup_VersionStructure element
// Type for PRICE GROUP.
type PriceGroupVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Start date for PRICE GROUP.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// End date for PRICE GROUP.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	// PRICEs in PRICE GROUP.
	Members *FarePricesRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	CustomerPurchasePackagePriceRef *CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef *ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef *TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef *TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef *QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef *ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef *ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef *GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef *GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef *UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef *SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef *SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef *DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef *FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef *FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef *CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef *FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef *FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
}

// PriceGroup represents the PriceGroup element
// A grouping of prices, allowing the grouping of numerous possible consumption elements into a limited number of price references, or to apply grouped increase, in value or percentage.
type PriceGroup struct {
	PriceGroupVersionStructure
}

// MobilityServiceRefsRelStructure represents the mobilityServiceRefs_RelStructure element
// Type for a list of refernces to MOBILITY SERVICEs.
type MobilityServiceRefsRelStructure struct {
	ContainmentAggregationStructure
	OnlineServiceRef []OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef []VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef []VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef []ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef []TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef []CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
}

// MobilityServiceRefStructure represents the MobilityServiceRefStructure element
// Type for a reference to a MOBILITY SERVICE.
type MobilityServiceRefStructure struct {
	EquipmentRefStructure
}

// CommonVehicleServiceRefsRelStructure represents the commonVehicleServiceRefs_RelStructure element
// Type for a list of COMMON VEHICLE SERVICEs.
type CommonVehicleServiceRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehicleRentalServiceRef []VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef []VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef []ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef []TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef []CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
}

// CommonVehicleServiceRefStructure represents the CommonVehicleServiceRefStructure element
// Type for a reference to an COMMON VEHICLE SERVICE.
type CommonVehicleServiceRefStructure struct {
	MobilityServiceRefStructure
}

// VehiclePoolingServiceRefStructure represents the VehiclePoolingServiceRefStructure element
// Type for a reference to an VEHICLE POOLING SERVICE.
type VehiclePoolingServiceRefStructure struct {
	CommonVehicleServiceRefStructure
}

// CarPoolingServiceRefStructure represents the CarPoolingServiceRefStructure element
// Type for a reference to an CAR POOLING SERVICE.
type CarPoolingServiceRefStructure struct {
	VehiclePoolingServiceRefStructure
}

// TaxiServiceRefStructure represents the TaxiServiceRefStructure element
// Type for a reference to an TAXI SERVICE.
type TaxiServiceRefStructure struct {
	VehiclePoolingServiceRefStructure
}

// ChauffeuredVehicleServiceRefStructure represents the ChauffeuredVehicleServiceRefStructure element
// Type for a reference to an CHAUFFEURED VEHICLE SERVICE.
type ChauffeuredVehicleServiceRefStructure struct {
	VehiclePoolingServiceRefStructure
}

// VehicleSharingServiceRefStructure represents the VehicleSharingServiceRefStructure element
// Type for a reference to an VEHICLE SHARING SERVICE.
type VehicleSharingServiceRefStructure struct {
	CommonVehicleServiceRefStructure
}

// VehicleRentalServiceRefStructure represents the VehicleRentalServiceRefStructure element
// Type for a reference to an VEHICLE RENTAL SERVICE.
type VehicleRentalServiceRefStructure struct {
	CommonVehicleServiceRefStructure
}

// TypeOfMobilityServiceRefStructure represents the TypeOfMobilityServiceRefStructure element
// Type for a reference to a TYPE OF MOBILITY SERVICE.
type TypeOfMobilityServiceRefStructure struct {
	TypeOfValueRefStructure
}

// MobilityServiceRef represents the MobilityServiceRef element
// Reference to a MOBILITY SERVICE. +v1.2.2
type MobilityServiceRef struct {
	MobilityServiceRefStructure
}

// CommonVehicleServiceRef represents the CommonVehicleServiceRef element
// Identifier of an COMMON VEHICLE SERVICE. +v1.2.2
type CommonVehicleServiceRef struct {
	CommonVehicleServiceRefStructure
}

// VehiclePoolingServiceRef represents the VehiclePoolingServiceRef element
// Identifier of an VEHICLE POOLING SERVICE. +v1.2.2
type VehiclePoolingServiceRef struct {
	VehiclePoolingServiceRefStructure
}

// CarPoolingServiceRef represents the CarPoolingServiceRef element
// Identifier of an CAR POOLING SERVICE. +v1.2.2
type CarPoolingServiceRef struct {
	CarPoolingServiceRefStructure
}

// TaxiServiceRef represents the TaxiServiceRef element
// Identifier of an TAXI SERVICE. +v1.2.2
type TaxiServiceRef struct {
	TaxiServiceRefStructure
}

// ChauffeuredVehicleServiceRef represents the ChauffeuredVehicleServiceRef element
// Identifier of an CHAUFFEURED VEHICLE SERVICE. +v1.2.2
type ChauffeuredVehicleServiceRef struct {
	ChauffeuredVehicleServiceRefStructure
}

// VehicleSharingServiceRef represents the VehicleSharingServiceRef element
// Identifier of an VEHICLE SHARING SERVICE. +v1.2.2
type VehicleSharingServiceRef struct {
	VehicleSharingServiceRefStructure
}

// VehicleRentalServiceRef represents the VehicleRentalServiceRef element
// Identifier of an VEHICLE RENTAL SERVICE. +v1.2.2
type VehicleRentalServiceRef struct {
	VehicleRentalServiceRefStructure
}

// TypeOfMobilityServiceRef represents the TypeOfMobilityServiceRef element
// Reference to a TYPE OF MobilityService. +v1.2.2
type TypeOfMobilityServiceRef struct {
	TypeOfMobilityServiceRefStructure
}

// OnlineServiceOperatorRefsRelStructure represents the onlineServiceOperatorRefs_RelStructure element
// Type for a list of ONLINE SERVICEs.
type OnlineServiceOperatorRefsRelStructure struct {
	OneToManyRelationshipStructure
	OnlineServiceRef []OnlineServiceRef `xml:"OnlineServiceRef" json:"OnlineServiceRef"`
}

// OnlineServiceOperatorRefStructure represents the OnlineServiceOperatorRefStructure element
// Type for a reference to an ONLINE SERVICE OPERATOR.
type OnlineServiceOperatorRefStructure struct {
	OrganisationRefStructure
}

// OnlineServiceRefsRelStructure represents the onlineServiceRefs_RelStructure element
// Type for a list of ONLINE SERVICEs.
type OnlineServiceRefsRelStructure struct {
	OneToManyRelationshipStructure
	OnlineServiceRef []OnlineServiceRef `xml:"OnlineServiceRef" json:"OnlineServiceRef"`
}

// OnlineServiceRefStructure represents the OnlineServiceRefStructure element
// Type for a reference to an ONLINE SERVICE.
type OnlineServiceRefStructure struct {
	MobilityServiceRefStructure
}

// OnlineServiceOperatorRef represents the OnlineServiceOperatorRef element
// Reference to an ONLINE SERVICE OPERATOR. +v1.2.2
type OnlineServiceOperatorRef struct {
	OnlineServiceOperatorRefStructure
}

// OnlineServiceRef represents the OnlineServiceRef element
// Identifier of an ONLINE SERVICE. +v1.2.2
type OnlineServiceRef struct {
	OnlineServiceRefStructure
}

// VehicleMeetingPlaceRefStructure represents the VehicleMeetingPlaceRefStructure element
// Type for a reference to a VEHICLE MEETING PLACE.
type VehicleMeetingPlaceRefStructure struct {
	AddressablePlaceRefStructure
}

// VehiclePoolingMeetingPlaceRefStructure represents the VehiclePoolingMeetingPlaceRefStructure element
// Type for a reference to a VEHICLE POOLING MEETING PLACE.
type VehiclePoolingMeetingPlaceRefStructure struct {
	VehicleMeetingPlaceRefStructure
}

// VehicleSharingParkingAreaRefStructure represents the VehicleSharingParkingAreaRefStructure element
// Type for a reference to a VEHICLE SHARING PARKING AREA.
type VehicleSharingParkingAreaRefStructure struct {
	ParkingAreaRefStructure
}

// VehiclePoolingParkingAreaRefStructure represents the VehiclePoolingParkingAreaRefStructure element
// Type for a reference to a VEHICLE POOLING PARKING AREA.
type VehiclePoolingParkingAreaRefStructure struct {
	ParkingAreaRefStructure
}

// VehicleSharingParkingBayRefStructure represents the VehicleSharingParkingBayRefStructure element
// Type for a reference to a VEHICLE SHARING PARKING BAY.
type VehicleSharingParkingBayRefStructure struct {
	ParkingBayRefStructure
}

// VehiclePoolingParkingBayRefStructure represents the VehiclePoolingParkingBayRefStructure element
// Type for a reference to a VEHICLE POOLING PARKING BAY.
type VehiclePoolingParkingBayRefStructure struct {
	ParkingBayRefStructure
}

// VehicleMeetingPlaceRef represents the VehicleMeetingPlaceRef element
// Reference to a VEHICLE MEETING PLACE. v1.2.2
type VehicleMeetingPlaceRef struct {
	VehicleMeetingPlaceRefStructure
}

// VehiclePoolingMeetingPlaceRef represents the VehiclePoolingMeetingPlaceRef element
// Reference to a VEHICLE POOLING MEETING PLACE. v1.2.2
type VehiclePoolingMeetingPlaceRef struct {
	VehiclePoolingMeetingPlaceRefStructure
}

// VehicleSharingParkingAreaRef represents the VehicleSharingParkingAreaRef element
// Reference to a VEHICLE SHARING PARKING AREA. +v1.2.2
type VehicleSharingParkingAreaRef struct {
	VehicleSharingParkingAreaRefStructure
}

// VehiclePoolingParkingAreaRef represents the VehiclePoolingParkingAreaRef element
// Reference to a VEHICLE POOLING PARKING AREA. +v1.2.2
type VehiclePoolingParkingAreaRef struct {
	VehiclePoolingParkingAreaRefStructure
}

// VehicleSharingParkingBayRef represents the VehicleSharingParkingBayRef element
// Reference to a VEHICLE SHARING PARKING BAY. +v1.2.2
type VehicleSharingParkingBayRef struct {
	VehicleSharingParkingBayRefStructure
}

// VehiclePoolingParkingBayRef represents the VehiclePoolingParkingBayRef element
// Reference to a VEHICLE POOLING PARKING BAY. +v1.2.2
type VehiclePoolingParkingBayRef struct {
	VehiclePoolingParkingBayRefStructure
}

// SingleJourneyRefsRelStructure represents the singleJourneyRefs_RelStructure element
// Type for a list of SINGLE JOURNEYs.
type SingleJourneyRefsRelStructure struct {
	OneToManyRelationshipStructure
	SingleJourneyRef SingleJourneyRef `xml:"SingleJourneyRef" json:"SingleJourneyRef"`
}

// SingleJourneyRefStructure represents the SingleJourneyRefStructure element
// Type for a reference to a SINGLE JOURNEY.
type SingleJourneyRefStructure struct {
	JourneyRefStructure
}

// GroupOfSingleJourneysRefStructure represents the GroupOfSingleJourneysRefStructure element
// Type for a reference to a GROUP OF SINGLE JOURNEYs.
type GroupOfSingleJourneysRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// SingleJourneyRef represents the SingleJourneyRef element
// Reference to a SINGLE JOURNEY. +v1.2.2
type SingleJourneyRef struct {
	SingleJourneyRefStructure
}

// GroupOfSingleJourneysRef represents the GroupOfSingleJourneysRef element
// Reference to a GROUP OF SINGLE JOURNEYs. +v1.2.2
type GroupOfSingleJourneysRef struct {
	GroupOfSingleJourneysRefStructure
}

// MediaTypeEnumeration represents the MediaTypeEnumeration enumeration
// Allowed values for ResellType.
type MediaTypeEnumeration string

const (
	// MediaTypeEnumerationNone represents none
	MediaTypeEnumerationNone MediaTypeEnumeration = "none"
	// MediaTypeEnumerationPaperTicket represents paperTicket
	MediaTypeEnumerationPaperTicket MediaTypeEnumeration = "paperTicket"
	// MediaTypeEnumerationPaperTicketWithCoupons represents paperTicketWithCoupons
	MediaTypeEnumerationPaperTicketWithCoupons MediaTypeEnumeration = "paperTicketWithCoupons"
	// MediaTypeEnumerationCoupon represents coupon
	MediaTypeEnumerationCoupon MediaTypeEnumeration = "coupon"
	// MediaTypeEnumerationSelfPrintPaperTicket represents selfPrintPaperTicket
	MediaTypeEnumerationSelfPrintPaperTicket MediaTypeEnumeration = "selfPrintPaperTicket"
	// MediaTypeEnumerationSmartCard represents smartCard
	MediaTypeEnumerationSmartCard MediaTypeEnumeration = "smartCard"
	// MediaTypeEnumerationMobileApp represents mobileApp
	MediaTypeEnumerationMobileApp MediaTypeEnumeration = "mobileApp"
	// MediaTypeEnumerationLicencePlate represents licencePlate
	MediaTypeEnumerationLicencePlate MediaTypeEnumeration = "licencePlate"
	// MediaTypeEnumerationCard represents card
	MediaTypeEnumerationCard MediaTypeEnumeration = "card"
	// MediaTypeEnumerationMms represents mms
	MediaTypeEnumerationMms MediaTypeEnumeration = "mms"
	// MediaTypeEnumerationSms represents sms
	MediaTypeEnumerationSms MediaTypeEnumeration = "sms"
	// MediaTypeEnumerationOther represents other
	MediaTypeEnumerationOther MediaTypeEnumeration = "other"
)

// MachineReadableEnumeration represents the MachineReadableEnumeration enumeration
// Allowed values for ResellType.
type MachineReadableEnumeration string

const (
	// MachineReadableEnumerationNone represents none
	MachineReadableEnumerationNone MachineReadableEnumeration = "none"
	// MachineReadableEnumerationMagneticStrip represents magneticStrip
	MachineReadableEnumerationMagneticStrip MachineReadableEnumeration = "magneticStrip"
	// MachineReadableEnumerationChip represents chip
	MachineReadableEnumerationChip MachineReadableEnumeration = "chip"
	// MachineReadableEnumerationOcr represents ocr
	MachineReadableEnumerationOcr MachineReadableEnumeration = "ocr"
	// MachineReadableEnumerationApnr represents apnr
	MachineReadableEnumerationApnr MachineReadableEnumeration = "apnr"
	// MachineReadableEnumerationBarCode represents barCode
	MachineReadableEnumerationBarCode MachineReadableEnumeration = "barCode"
	// MachineReadableEnumerationShotCode represents shotCode
	MachineReadableEnumerationShotCode MachineReadableEnumeration = "shotCode"
	// MachineReadableEnumerationNfc represents nfc
	MachineReadableEnumerationNfc MachineReadableEnumeration = "nfc"
	// MachineReadableEnumerationOther represents other
	MachineReadableEnumerationOther MachineReadableEnumeration = "other"
)

// TypeOfTravelDocumentRefsRelStructure represents the TypeOfTravelDocumentRefs_RelStructure element
// Type for a list of TYPEs OF TRAVEL DOCUMENT.
type TypeOfTravelDocumentRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfTravelDocumentRef []TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef" json:"TypeOfTravelDocumentRef"`
}

// TypeOfTravelDocumentRefStructure represents the TypeOfTravelDocumentRefStructure element
// Type for Reference to a TYPE OF TRAVEL DOCUMENT.
type TypeOfTravelDocumentRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfMachineReadabilityRefsRelStructure represents the TypeOfMachineReadabilityRefs_RelStructure element
// Type for a list of TYPEs OF MACHINE READABILITY.
type TypeOfMachineReadabilityRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfMachineReadabilityRef []TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef" json:"TypeOfMachineReadabilityRef"`
}

// TypeOfMachineReadabilityRefStructure represents the TypeOfMachineReadabilityRefStructure element
// Type for Reference to a TYPE OF MACHINE READABILITY.
type TypeOfMachineReadabilityRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfTravelDocumentRef represents the TypeOfTravelDocumentRef element
// Reference to a TYPE OF TRAVEL DOCUMENT.
type TypeOfTravelDocumentRef struct {
	TypeOfTravelDocumentRefStructure
}

// TypeOfMachineReadabilityRef represents the TypeOfMachineReadabilityRef element
// Reference to a TYPE OF MACHINE READABILITY.
type TypeOfMachineReadabilityRef struct {
	TypeOfMachineReadabilityRefStructure
}

// FulfilmentMethodTypeEnumeration represents the FulfilmentMethodTypeEnumeration enumeration
// Allowed values for FULFILMENT METHOD. Type.
type FulfilmentMethodTypeEnumeration string

const (
	// FulfilmentMethodTypeEnumerationTicketOffice represents ticketOffice
	FulfilmentMethodTypeEnumerationTicketOffice FulfilmentMethodTypeEnumeration = "ticketOffice"
	// FulfilmentMethodTypeEnumerationTicketMachine represents ticketMachine
	FulfilmentMethodTypeEnumerationTicketMachine FulfilmentMethodTypeEnumeration = "ticketMachine"
	// FulfilmentMethodTypeEnumerationConductor represents conductor
	FulfilmentMethodTypeEnumerationConductor FulfilmentMethodTypeEnumeration = "conductor"
	// FulfilmentMethodTypeEnumerationAgent represents agent
	FulfilmentMethodTypeEnumerationAgent FulfilmentMethodTypeEnumeration = "agent"
	// FulfilmentMethodTypeEnumerationPost represents post
	FulfilmentMethodTypeEnumerationPost FulfilmentMethodTypeEnumeration = "post"
	// FulfilmentMethodTypeEnumerationCourier represents courier
	FulfilmentMethodTypeEnumerationCourier FulfilmentMethodTypeEnumeration = "courier"
	// FulfilmentMethodTypeEnumerationSelfprint represents selfprint
	FulfilmentMethodTypeEnumerationSelfprint FulfilmentMethodTypeEnumeration = "selfprint"
	// FulfilmentMethodTypeEnumerationSms represents sms
	FulfilmentMethodTypeEnumerationSms FulfilmentMethodTypeEnumeration = "sms"
	// FulfilmentMethodTypeEnumerationEmail represents email
	FulfilmentMethodTypeEnumerationEmail FulfilmentMethodTypeEnumeration = "email"
	// FulfilmentMethodTypeEnumerationTopUpDevice represents topUpDevice
	FulfilmentMethodTypeEnumerationTopUpDevice FulfilmentMethodTypeEnumeration = "topUpDevice"
	// FulfilmentMethodTypeEnumerationValidator represents validator
	FulfilmentMethodTypeEnumerationValidator FulfilmentMethodTypeEnumeration = "validator"
	// FulfilmentMethodTypeEnumerationMobileApp represents mobileApp
	FulfilmentMethodTypeEnumerationMobileApp FulfilmentMethodTypeEnumeration = "mobileApp"
	// FulfilmentMethodTypeEnumerationOther represents other
	FulfilmentMethodTypeEnumerationOther FulfilmentMethodTypeEnumeration = "other"
)

// DistributionChannelTypeEnumeration represents the DistributionChannelTypeEnumeration enumeration
// Allowed values for DISTRIBUTION CHANNEL TYPE Type.
type DistributionChannelTypeEnumeration string

const (
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationAtStop represents atStop
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationAtStop DistributionChannelTypeEnumeration = "atStop"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationOnBoard represents onBoard
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationOnBoard DistributionChannelTypeEnumeration = "onBoard"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationOnline represents online
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationOnline DistributionChannelTypeEnumeration = "online"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationOnlineAccount represents onlineAccount
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationOnlineAccount DistributionChannelTypeEnumeration = "onlineAccount"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationTelephone represents telephone
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationTelephone DistributionChannelTypeEnumeration = "telephone"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationElectronicPass represents electronicPass
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationElectronicPass DistributionChannelTypeEnumeration = "electronicPass"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationPostal represents postal
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationPostal DistributionChannelTypeEnumeration = "postal"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationMobileDevice represents mobileDevice
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationMobileDevice DistributionChannelTypeEnumeration = "mobileDevice"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationAgency represents agency
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationAgency DistributionChannelTypeEnumeration = "agency"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationTourOperator represents tourOperator
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationTourOperator DistributionChannelTypeEnumeration = "tourOperator"
	// DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationOther represents other
	DistributionChannelTypeEnumerationDistributionChannelTypeEnumerationOther DistributionChannelTypeEnumeration = "other"
)

// DistributionRightsEnumeration represents the DistributionRightsEnumeration enumeration
// Allowed values for DISTRIBUTION RIGHTs.
type DistributionRightsEnumeration string

const (
	// DistributionRightsEnumerationNone represents none
	DistributionRightsEnumerationNone DistributionRightsEnumeration = "none"
	// DistributionRightsEnumerationSell represents sell
	DistributionRightsEnumerationSell DistributionRightsEnumeration = "sell"
	// DistributionRightsEnumerationExchange represents exchange
	DistributionRightsEnumerationExchange DistributionRightsEnumeration = "exchange"
	// DistributionRightsEnumerationRefund represents refund
	DistributionRightsEnumerationRefund DistributionRightsEnumeration = "refund"
	// DistributionRightsEnumerationInform represents inform
	DistributionRightsEnumerationInform DistributionRightsEnumeration = "inform"
	// DistributionRightsEnumerationBook represents book
	DistributionRightsEnumerationBook DistributionRightsEnumeration = "book"
	// DistributionRightsEnumerationPrivate represents private
	DistributionRightsEnumerationPrivate DistributionRightsEnumeration = "private"
	// DistributionRightsEnumerationOther represents other
	DistributionRightsEnumerationOther DistributionRightsEnumeration = "other"
)

// FulfilmentMethodRefsRelStructure represents the fulfilmentMethodRefs_RelStructure element
// Type for a collection of one or more references to a FULFILMENT METHOD.
type FulfilmentMethodRefsRelStructure struct {
	OneToManyRelationshipStructure
	FulfilmentMethodRef []FulfilmentMethodRef `xml:"FulfilmentMethodRef" json:"FulfilmentMethodRef"`
}

// FulfilmentMethodRefStructure represents the FulfilmentMethodRefStructure element
// Type for Reference to a FULFILMENT METHOD.
type FulfilmentMethodRefStructure struct {
	PriceableObjectRefStructure
}

// DistributionChannelRefsRelStructure represents the distributionChannelRefs_RelStructure element
// Type for a collection of one or more references to a DISTRIBUTION CHANNEL.
type DistributionChannelRefsRelStructure struct {
	OneToManyRelationshipStructure
	DistributionChannelRef []DistributionChannelRef `xml:"DistributionChannelRef" json:"DistributionChannelRef"`
}

// DistributionChannelRefStructureElement represents the DistributionChannelRefStructureElement element
// Type for Reference to a DISTRIBUTION CHANNEL.
type DistributionChannelRefStructureElement struct {
	TypeOfValueRefStructure
}

// AllDistributionChannelsRefStructureElement represents the AllDistributionChannelsRefStructureElement element
// Type for Reference to a DISTRIBUTION CHANNEL.
type AllDistributionChannelsRefStructureElement struct {
	TypeOfValueRefStructure
	// Identifier of a TYPE OF VALUE.
	Ref string `xml:"ref,attr" json:"ref"`
}

// GroupOfDistributionChannelsRefStructure represents the GroupOfDistributionChannelsRefStructure element
// Type for Reference to a GROUP OF DISTRIBUTION CHANNELs.
type GroupOfDistributionChannelsRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// FulfilmentMethodPriceRefStructure represents the FulfilmentMethodPriceRefStructure element
// Type for Reference to a FULFILMENT METHOD PRICE.
type FulfilmentMethodPriceRefStructure struct {
	FarePriceRefStructure
}

// FulfilmentMethodRef represents the FulfilmentMethodRef element
// Reference to a FULFILMENT METHOD.
type FulfilmentMethodRef struct {
	FulfilmentMethodRefStructure
}

// DistributionChannelRef represents the DistributionChannelRef element
// Reference to a DISTRIBUTION CHANNEL.
type DistributionChannelRef struct {
	DistributionChannelRefStructureElement
}

// AllDistributionChannelsRef represents the AllDistributionChannelsRef element
// Reference to   All DISTRIBUTION CHANNELs.
type AllDistributionChannelsRef struct {
	AllDistributionChannelsRefStructureElement
}

// GroupOfDistributionChannelsRef represents the GroupOfDistributionChannelsRef element
// Reference to a GROUP OF DISTRIBUTION CHANNELs.
type GroupOfDistributionChannelsRef struct {
	GroupOfDistributionChannelsRefStructure
}

// FulfilmentMethodPriceRef represents the FulfilmentMethodPriceRef element
// Reference to a FULFILMENT METHOD PRICE.
type FulfilmentMethodPriceRef struct {
	FulfilmentMethodPriceRefStructure
}

// TariffBasisEnumeration represents the TariffBasisEnumeration enumeration
// Allowed values for TariffBasis.
type TariffBasisEnumeration string

const (
	// TariffBasisEnumerationTariffBasisEnumerationFlat represents flat
	// Tariff is flat, i.e. not based on spatial elements.
	TariffBasisEnumerationTariffBasisEnumerationFlat TariffBasisEnumeration = "flat"
	// TariffBasisEnumerationTariffBasisEnumerationDistance represents distance
	// Tariff is based on spatial distance.
	TariffBasisEnumerationTariffBasisEnumerationDistance TariffBasisEnumeration = "distance"
	// TariffBasisEnumerationTariffBasisEnumerationUnitSection represents unitSection
	TariffBasisEnumerationTariffBasisEnumerationUnitSection TariffBasisEnumeration = "unitSection"
	// TariffBasisEnumerationTariffBasisEnumerationZone represents zone
	// Tariff is based on use of specified zones.
	TariffBasisEnumerationTariffBasisEnumerationZone TariffBasisEnumeration = "zone"
	// TariffBasisEnumerationTariffBasisEnumerationZoneToZone represents zoneToZone
	// Tariff is based on specified zone to zone transitions.
	TariffBasisEnumerationTariffBasisEnumerationZoneToZone TariffBasisEnumeration = "zoneToZone"
	// TariffBasisEnumerationTariffBasisEnumerationPointToPoint represents pointToPoint
	// Tariff is based on specified point to point transitions.
	TariffBasisEnumerationTariffBasisEnumerationPointToPoint TariffBasisEnumeration = "pointToPoint"
	// TariffBasisEnumerationTariffBasisEnumerationRoute represents route
	// Tariff is based on specific routes, eg. for SERIES CONSTRAINTs.
	TariffBasisEnumerationTariffBasisEnumerationRoute TariffBasisEnumeration = "route"
	// TariffBasisEnumerationTariffBasisEnumerationTour represents tour
	// Tariff is based on a specific tour.
	TariffBasisEnumerationTariffBasisEnumerationTour TariffBasisEnumeration = "tour"
	// TariffBasisEnumerationTariffBasisEnumerationGroup represents group
	// Tariff is based on size of group.
	TariffBasisEnumerationTariffBasisEnumerationGroup TariffBasisEnumeration = "group"
	// TariffBasisEnumerationTariffBasisEnumerationDiscount represents discount
	// Tariff is for discount rates.
	TariffBasisEnumerationTariffBasisEnumerationDiscount TariffBasisEnumeration = "discount"
	// TariffBasisEnumerationTariffBasisEnumerationPeriod represents period
	// Tariff is based on temporal durtaions, e.g minutes or days of travel.
	TariffBasisEnumerationTariffBasisEnumerationPeriod TariffBasisEnumeration = "period"
	// TariffBasisEnumerationTariffBasisEnumerationFree represents free
	// Tariff is free to user.
	TariffBasisEnumerationTariffBasisEnumerationFree TariffBasisEnumeration = "free"
	// TariffBasisEnumerationTariffBasisEnumerationOther represents other
	// Other Tariff Basis.
	TariffBasisEnumerationTariffBasisEnumerationOther TariffBasisEnumeration = "other"
)

// TariffRefsRelStructure represents the tariffRefs_RelStructure element
// Type for a collection of one or more references to a TARIFF.
type TariffRefsRelStructure struct {
	OneToManyRelationshipStructure
	ParkingTariffRef []ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef []TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
}

// TariffRefStructure represents the TariffRefStructure element
// Type for Reference to a TARIFF.
type TariffRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfTariffRefStructure represents the TypeOfTariffRefStructure element
// Type for a TYPE OF TARIFF.
type TypeOfTariffRefStructure struct {
	TypeOfValueRefStructure
}

// FareStructureElementRefsRelStructure represents the fareStructureElementRefs_RelStructure element
// Type for a collection of one or more references to a  FARE STRUCTURE ELEMENT.
type FareStructureElementRefsRelStructure struct {
	OneToManyRelationshipStructure
	FareStructureElementRef []FareStructureElementRef `xml:"FareStructureElementRef" json:"FareStructureElementRef"`
}

// FareStructureElementRefStructure represents the FareStructureElementRefStructure element
// Type for Reference to a FARE STRUCTURE ELEMENT.
type FareStructureElementRefStructure struct {
	PriceableObjectRefStructure
}

// FareStructureElementPriceRefStructure represents the FareStructureElementPriceRefStructure element
// Type for Reference to a FARE STRUCTURE ELEMENT PRICE.
type FareStructureElementPriceRefStructure struct {
	FarePriceRefStructure
}

// TypeOfFareStructureElementRefStructure represents the TypeOfFareStructureElementRefStructure element
// Type for a TYPE OF TARIFF.
type TypeOfFareStructureElementRefStructure struct {
	TypeOfValueRefStructure
}

// FareStructureElementInSequenceRefStructure represents the FareStructureElementInSequenceRefStructure element
// Type for Reference to a FARE STRUCTURE ELEMENT IN SEQUENCE.
type FareStructureElementInSequenceRefStructure struct {
	FareElementInSequenceRefStructure
}

// TariffRef represents the TariffRef element
// Reference to a TARIFF.
type TariffRef struct {
	TariffRefStructure
}

// TypeOfTariffRef represents the TypeOfTariffRef element
// Reference to a TYPE OF TARIFF. (TAP TSI)
type TypeOfTariffRef struct {
	TypeOfTariffRefStructure
}

// FareStructureElementRef represents the FareStructureElementRef element
// Reference to a FARE STRUCTURE ELEMENT.
type FareStructureElementRef struct {
	FareStructureElementRefStructure
}

// FareStructureElementPriceRef represents the FareStructureElementPriceRef element
// Reference to a FARE STRUCTURE ELEMENT PRICE.
type FareStructureElementPriceRef struct {
	FareStructureElementPriceRefStructure
}

// FareStructureElementInSequenceRef represents the FareStructureElementInSequenceRef element
// Reference to a FARE STRUCTURE ELEMENT IN SEQUENCE.
type FareStructureElementInSequenceRef struct {
	FareStructureElementInSequenceRefStructure
}

// TypeOfFareStructureElementRef represents the TypeOfFareStructureElementRef element
// Reference to a TYPE OF FARE STRUCTURE ELEMENT.
type TypeOfFareStructureElementRef struct {
	TypeOfFareStructureElementRefStructure
}

// TariffObjectRef represents the TariffObjectRef element
// Reference to an object used in a TARIFF.
type TariffObjectRef struct {
	VersionOfObjectRefStructure
}

// GroupOfDistanceMatrixElementsRefsRelStructure represents the groupOfDistanceMatrixElementsRefs_RelStructure element
// Type for a list of GROUP OF DISTANCE MATRIX ELEMENTss.
type GroupOfDistanceMatrixElementsRefsRelStructure struct {
	OneToManyRelationshipStructure
	GroupOfDistanceMatrixElementsRef []GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef" json:"GroupOfDistanceMatrixElementsRef"`
}

// GroupOfDistanceMatrixElementsRefStructureElement represents the GroupOfDistanceMatrixElementsRefStructureElement element
// Type for Reference to a GROUP OF DISTANCE MATRIX ELEMENTs.
type GroupOfDistanceMatrixElementsRefStructureElement struct {
	GroupOfEntitiesRefStructure1
}

// DistanceMatrixElementRefsRelStructure represents the distanceMatrixElementRefs_RelStructure element
// Type for a list of DISTANCE MATRIX ELEMENTs.
type DistanceMatrixElementRefsRelStructure struct {
	OneToManyRelationshipStructure
	DistanceMatrixElementRef []DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	DistanceMatrixElementInverseRef []DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
}

// DistanceMatrixElementRefStructure represents the DistanceMatrixElementRefStructure element
// Type for Reference to a DISTANCE MATRIX ELEMENT  by direction
type DistanceMatrixElementRefStructure struct {
	PriceableObjectRefStructure
}

// DistanceMatrixElementRefByValueStructure represents the DistanceMatrixElementRefByValueStructure element
// Type for a reference to a LINK. by O/D value
type DistanceMatrixElementRefByValueStructure struct {
	// Name of class of LINK.
	NameOfClass *string `xml:"nameOfClass,attr,omitempty" json:"nameOfClass,omitempty"`
	// Date reference was first created.
	Created *time.Time `xml:"created,attr,omitempty" json:"created,omitempty"`
	// Date reference was last changed.
	Changed *time.Time `xml:"changed,attr,omitempty" json:"changed,omitempty"`
	// Version number of referenced entity.
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
	// Identifier of a POINT. at which LINK starts.
	FromRef string `xml:"fromRef,attr" json:"fromRef"`
	// Identifier of a POINT. at which LINK ends.
	ToRef string `xml:"toRef,attr" json:"toRef"`
	// Class of POINT referenced by LINK.
	NameOfPointRefClass *string `xml:"nameOfPointRefClass,attr,omitempty" json:"nameOfPointRefClass,omitempty"`
}

// DistanceMatrixElementPriceRefStructure represents the DistanceMatrixElementPriceRefStructure element
// Type for Reference to a DISTANCE MATRIX ELEMENT PRICE.
type DistanceMatrixElementPriceRefStructure struct {
	FarePriceRefStructure
}

// GroupOfDistanceMatrixElementsRef represents the GroupOfDistanceMatrixElementsRef element
// Reference to a GROUP OF DISTANCE MATRIX ELEMENTs.
type GroupOfDistanceMatrixElementsRef struct {
	GroupOfDistanceMatrixElementsRefStructureElement
}

// DistanceMatrixElementRef represents the DistanceMatrixElementRef element
// Reference to a DISTANCE MATRIX ELEMENT, used in a forward direction.
type DistanceMatrixElementRef struct {
	DistanceMatrixElementRefStructure
}

// DistanceMatrixElementInverseRef represents the DistanceMatrixElementInverseRef element
// Reference to a DISTANCE MATRIX ELEMENT, used in a backwards direction.
type DistanceMatrixElementInverseRef struct {
	DistanceMatrixElementRefStructure
}

// DistanceMatrixElementRefByValue represents the DistanceMatrixElementRefByValue element
// Reference to a DISTANCE MATRIX ELEMENT LINK BY VALUE.
type DistanceMatrixElementRefByValue struct {
	DistanceMatrixElementRefByValueStructure
}

// DistanceMatrixElementPriceRef represents the DistanceMatrixElementPriceRef element
// Reference to a DISTANCE MATRIX ELEMENT PRICE.
type DistanceMatrixElementPriceRef struct {
	DistanceMatrixElementPriceRefStructure
}

// SalesOfferPackageRefsRelStructure represents the salesOfferPackageRefs_RelStructure element
// Type for a collection of one or more references to a SALES OFFER PACKAGE.
type SalesOfferPackageRefsRelStructure struct {
	OneToManyRelationshipStructure
	SalesOfferPackageRef []SalesOfferPackageRef `xml:"SalesOfferPackageRef" json:"SalesOfferPackageRef"`
}

// SalesOfferPackageRefStructure represents the SalesOfferPackageRefStructure element
// Type for Reference to a SALES OFFER PACKAGE.
type SalesOfferPackageRefStructure struct {
	PriceableObjectRefStructure
}

// SalesOfferPackageElementRefStructure represents the SalesOfferPackageElementRefStructure element
// Type for Reference to a SALES OFFER PACKAGE ELEMENT.
type SalesOfferPackageElementRefStructure struct {
	PriceableObjectRefStructure
}

// SalesOfferPackagePriceRefStructure represents the SalesOfferPackagePriceRefStructure element
// Type for Reference to a SALES OFFER PACKAGE PRICE.
type SalesOfferPackagePriceRefStructure struct {
	FarePriceRefStructure
}

// SalesOfferPackageSubstitutionRefStructure represents the SalesOfferPackageSubstitutionRefStructure element
// Type for Reference to a SALES OFFER PACKAGE SUBSTITUTION.
type SalesOfferPackageSubstitutionRefStructure struct {
	AssignmentRefStructure
}

// GroupOfSalesOfferPackageRefsRelStructure represents the groupOfSalesOfferPackageRefs_RelStructure element
// Type for a collection of one or more references to a SALES OFFER PACKAGE.
type GroupOfSalesOfferPackageRefsRelStructure struct {
	OneToManyRelationshipStructure
	GroupOfSalesOfferPackagesRef []GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef" json:"GroupOfSalesOfferPackagesRef"`
}

// GroupOfSalesOfferPackagesRefStructure represents the GroupOfSalesOfferPackagesRefStructure element
// Type for Reference to a GROUP OF SALES OFFER PACKAGEs.
type GroupOfSalesOfferPackagesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// SalesNoticeAssignmentRefStructure represents the SalesNoticeAssignmentRefStructure element
// Type for Reference to a SALES NOTICE ASSIGNMENT.
type SalesNoticeAssignmentRefStructure struct {
	NoticeAssignmentRefStructure
}

// DistributionAssignmentRefStructure represents the DistributionAssignmentRefStructure element
// Type for Reference to a DISTRIBUTION ASSIGNMENT.
type DistributionAssignmentRefStructure struct {
	AssignmentRefStructure
}

// TypeOfsalesOfferPackageRefsRelStructure represents the typeOfsalesOfferPackageRefs_RelStructure element
// Type for a list of TYPEs OF SALES OFFER PACKAGE.
type TypeOfsalesOfferPackageRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfSalesOfferPackageRef []TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef" json:"TypeOfSalesOfferPackageRef"`
}

// TypeOfSalesOfferPackageRefStructure represents the TypeOfSalesOfferPackageRefStructure element
// Type for Reference to a TYPE OF SALES OFFER PACKAGE.
type TypeOfSalesOfferPackageRefStructure struct {
	TypeOfValueRefStructure
}

// SalesOfferPackageRef represents the SalesOfferPackageRef element
// Reference to a SALES OFFER PACKAGE.
type SalesOfferPackageRef struct {
	SalesOfferPackageRefStructure
}

// SalesOfferPackageElementRef represents the SalesOfferPackageElementRef element
// Reference to a SALES OFFER PACKAGE ELEMENT.
type SalesOfferPackageElementRef struct {
	SalesOfferPackageElementRefStructure
}

// SalesOfferPackagePriceRef represents the SalesOfferPackagePriceRef element
// Reference to a SALES OFFER PACKAGE PRICE.
type SalesOfferPackagePriceRef struct {
	SalesOfferPackagePriceRefStructure
}

// SalesOfferPackageSubstitutionRef represents the SalesOfferPackageSubstitutionRef element
// Reference to a SALES OFFER PACKAGE SUBSTITUTION.
type SalesOfferPackageSubstitutionRef struct {
	SalesOfferPackageSubstitutionRefStructure
}

// GroupOfSalesOfferPackagesRef represents the GroupOfSalesOfferPackagesRef element
// Reference to a GROUP OF SALES OFFER PACKAGEs.
type GroupOfSalesOfferPackagesRef struct {
	GroupOfSalesOfferPackagesRefStructure
}

// DistributionAssignmentRef represents the DistributionAssignmentRef element
// Reference to a DISTRIBUTION ASSIGNMENT.
type DistributionAssignmentRef struct {
	DistributionAssignmentRefStructure
}

// TypeOfSalesOfferPackageRef represents the TypeOfSalesOfferPackageRef element
// Reference to a TYPE OF SALES OFFER PACKAGE.
type TypeOfSalesOfferPackageRef struct {
	TypeOfSalesOfferPackageRefStructure
}

// FareBasisEnumeration represents the FareBasisEnumeration enumeration
// Allowed values for Fare Basis.
type FareBasisEnumeration string

const (
	// FareBasisEnumerationFareBasisEnumerationRoute represents route
	FareBasisEnumerationFareBasisEnumerationRoute FareBasisEnumeration = "route"
	// FareBasisEnumerationFareBasisEnumerationDistance represents distance
	FareBasisEnumerationFareBasisEnumerationDistance FareBasisEnumeration = "distance"
)

// SeriesTypeEnumeration represents the SeriesTypeEnumeration enumeration
// Allowed values for SERIES CONSTRAINT type.
type SeriesTypeEnumeration string

const (
	// SeriesTypeEnumerationStationToStation represents stationToStation
	SeriesTypeEnumerationStationToStation SeriesTypeEnumeration = "stationToStation"
	// SeriesTypeEnumerationOriginToBorder represents originToBorder
	SeriesTypeEnumerationOriginToBorder SeriesTypeEnumeration = "originToBorder"
	// SeriesTypeEnumerationBorderToDestination represents borderToDestination
	SeriesTypeEnumerationBorderToDestination SeriesTypeEnumeration = "borderToDestination"
	// SeriesTypeEnumerationBorder represents border
	SeriesTypeEnumerationBorder SeriesTypeEnumeration = "border"
	// SeriesTypeEnumerationTransit represents transit
	SeriesTypeEnumerationTransit SeriesTypeEnumeration = "transit"
)

// RoutingTypeEnumeration represents the RoutingTypeEnumeration enumeration
// Allowed values for Routing Type.
type RoutingTypeEnumeration string

const (
	// RoutingTypeEnumerationDirect represents direct
	RoutingTypeEnumerationDirect RoutingTypeEnumeration = "direct"
	// RoutingTypeEnumerationIndirect represents indirect
	RoutingTypeEnumerationIndirect RoutingTypeEnumeration = "indirect"
	// RoutingTypeEnumerationBoth represents both
	RoutingTypeEnumerationBoth RoutingTypeEnumeration = "both"
)

// SeriesConstraintRefsRelStructure represents the seriesConstraintRefs_RelStructure element
// Type for a collection of one or more references to a SERIES CONSTRAINT.
type SeriesConstraintRefsRelStructure struct {
	OneToManyRelationshipStructure
	SeriesConstraintRef []SeriesConstraintRef `xml:"SeriesConstraintRef" json:"SeriesConstraintRef"`
}

// SeriesConstraintPriceRefStructure represents the SeriesConstraintPriceRefStructure element
// Type for Reference to a SERIES CONSTRAINT PRICE.
type SeriesConstraintPriceRefStructure struct {
	FarePriceRefStructure
}

// SeriesConstraintRef represents the SeriesConstraintRef element
// Reference to a SERIES CONSTRAINT.
type SeriesConstraintRef struct {
	SeriesConstraintRefStructure1
}

// SeriesConstraintPriceRef represents the SeriesConstraintPriceRef element
// Reference to a SERIES CONSTRAINT PRICE.
type SeriesConstraintPriceRef struct {
	SeriesConstraintPriceRefStructure
}

// ReservationChargeTypeEnumeration represents the ReservationChargeTypeEnumeration enumeration
// Allowed values for Reservation Charge type.
type ReservationChargeTypeEnumeration string

const (
	// ReservationChargeTypeEnumerationNoFee represents noFee
	ReservationChargeTypeEnumerationNoFee ReservationChargeTypeEnumeration = "noFee"
	// ReservationChargeTypeEnumerationFee represents fee
	ReservationChargeTypeEnumerationFee ReservationChargeTypeEnumeration = "fee"
	// ReservationChargeTypeEnumerationSingleFeeForReturnTrip represents singleFeeForReturnTrip
	ReservationChargeTypeEnumerationSingleFeeForReturnTrip ReservationChargeTypeEnumeration = "singleFeeForReturnTrip"
	// ReservationChargeTypeEnumerationFeeForEachDirection represents feeForEachDirection
	ReservationChargeTypeEnumerationFeeForEachDirection ReservationChargeTypeEnumeration = "feeForEachDirection"
	// ReservationChargeTypeEnumerationFeeForEachLeg represents feeForEachLeg
	ReservationChargeTypeEnumerationFeeForEachLeg ReservationChargeTypeEnumeration = "feeForEachLeg"
)

// DiscountBasisEnumeration represents the DiscountBasisEnumeration enumeration
// Allowed values for DiscountBasis.
type DiscountBasisEnumeration string

const (
	// DiscountBasisEnumerationNone represents none
	DiscountBasisEnumerationNone DiscountBasisEnumeration = "none"
	// DiscountBasisEnumerationFree represents free
	DiscountBasisEnumerationFree DiscountBasisEnumeration = "free"
	// DiscountBasisEnumerationDiscount represents discount
	DiscountBasisEnumerationDiscount DiscountBasisEnumeration = "discount"
)

// PerBasisEnumeration represents the PerBasisEnumeration enumeration
// Allowed values for Per Basis.
type PerBasisEnumeration string

const (
	// PerBasisEnumerationPerOffer represents perOffer
	PerBasisEnumerationPerOffer PerBasisEnumeration = "perOffer"
	// PerBasisEnumerationPerPerson represents perPerson
	PerBasisEnumerationPerPerson PerBasisEnumeration = "perPerson"
)

// UsageParameterRefsRelStructure represents the usageParameterRefs_RelStructure element
// Type for a list of USAGE PARAMETERs.
type UsageParameterRefsRelStructure struct {
	OneToManyRelationshipStructure
	AdditionalDriverOptionRef []AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef []RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef []RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef []SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef []SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef []MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef []InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef []FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef []SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef []UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef []StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef []RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef []RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef []LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef []EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef []EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef []EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef []GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef []CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef []VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef []CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef []UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef []ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef []SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef []PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef []ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef []TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef []ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef []RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef []ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef []ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef []CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef []ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef []BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef []PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
}

// UsageParameterRefStructure represents the UsageParameterRefStructure element
// Type for Reference to a USAGE PARAMETER.
type UsageParameterRefStructure struct {
	PriceableObjectRefStructure
}

// UsageParameterPriceRefsRelStructure represents the usageParameterPriceRefs_RelStructure element
// Type for a list of USAGE PARAMETER PRICEs.
type UsageParameterPriceRefsRelStructure struct {
	StrictContainmentAggregationStructure
	UsageParameterPriceRef []UsageParameterPriceRef `xml:"UsageParameterPriceRef" json:"UsageParameterPriceRef"`
}

// UsageParameterPriceRefStructure represents the UsageParameterPriceRefStructure element
// Type for Reference to a USAGE PARAMETER PRICE.
type UsageParameterPriceRefStructure struct {
	FarePriceRefStructure
}

// TypeOfUsageParameterRefStructure represents the TypeOfUsageParameterRefStructure element
// Type for Reference to a TYPE OF USAGE PARAMETER.
type TypeOfUsageParameterRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfConcessionRefStructure represents the TypeOfConcessionRefStructure element
// Type for Reference to a TYPE OF CONCESSION.
type TypeOfConcessionRefStructure struct {
	TypeOfValueRefStructure
}

// UsageParameterRef represents the UsageParameterRef element
// Reference to a USAGE PARAMETER.
type UsageParameterRef struct {
	UsageParameterRefStructure
}

// UsageParameterPriceRef represents the UsageParameterPriceRef element
// Reference to a USAGE PARAMETER PRICE.
type UsageParameterPriceRef struct {
	UsageParameterPriceRefStructure
}

// TypeOfUsageParameterRef represents the TypeOfUsageParameterRef element
// Reference to a TYPE OF USAGE PARAMETER.
type TypeOfUsageParameterRef struct {
	TypeOfUsageParameterRefStructure
}

// TypeOfConcessionRef represents the TypeOfConcessionRef element
// Reference to a TYPE OF CONCESSION.
type TypeOfConcessionRef struct {
	TypeOfConcessionRefStructure
}

// PurchaseActionEnumeration represents the PurchaseActionEnumeration enumeration
// Allowed values for Purchase Action +v1.1
type PurchaseActionEnumeration string

const (
	// PurchaseActionEnumerationPurchase represents purchase
	// Purchase and payment.
	PurchaseActionEnumerationPurchase PurchaseActionEnumeration = "purchase"
	// PurchaseActionEnumerationOrderWithoutPayment represents orderWithoutPayment
	// Purchase with deferred  payment.
	PurchaseActionEnumerationOrderWithoutPayment PurchaseActionEnumeration = "orderWithoutPayment"
	// PurchaseActionEnumerationReserve represents reserve
	// Reervation but not necessarily payment
	PurchaseActionEnumerationReserve PurchaseActionEnumeration = "reserve"
	// PurchaseActionEnumerationPayForPreviousOrder represents payForPreviousOrder
	// Payment for previously ordered service.
	PurchaseActionEnumerationPayForPreviousOrder PurchaseActionEnumeration = "payForPreviousOrder"
	// PurchaseActionEnumerationSubscribe represents subscribe
	PurchaseActionEnumerationSubscribe PurchaseActionEnumeration = "subscribe"
	// PurchaseActionEnumerationPayInstallment represents payInstallment
	PurchaseActionEnumerationPayInstallment PurchaseActionEnumeration = "payInstallment"
	// PurchaseActionEnumerationOther represents other
	PurchaseActionEnumerationOther PurchaseActionEnumeration = "other"
)

// PurchaseWindowRefStructure represents the PurchaseWindowRefStructure element
// Type for Reference to a PURCHASE WINDOW PARAMETER.
type PurchaseWindowRefStructure struct {
	UsageParameterRefStructure
}

// BookingPolicyRefStructure represents the BookingPolicyRefStructure element
// Type for Reference to a BOOKING POLICY USAGE PARAMETER.
type BookingPolicyRefStructure struct {
	UsageParameterRefStructure
}

// ReservingRefStructure represents the ReservingRefStructure element
// Type for Reference to a RESERVING USAGE PARAMETER.
type ReservingRefStructure struct {
	BookingPolicyRefStructure
}

// CancellingRefStructure represents the CancellingRefStructure element
// Type for Reference to a CANCELLING USAGE PARAMETER.
type CancellingRefStructure struct {
	BookingPolicyRefStructure
}

// PurchaseWindowRef represents the PurchaseWindowRef element
// Reference to a PURCHASE WINDOW PARAMETER.
type PurchaseWindowRef struct {
	PurchaseWindowRefStructure
}

// BookingPolicyRef represents the BookingPolicyRef element
// Reference to a BOOKING POLICY USAGE PARAMETER.
type BookingPolicyRef struct {
	BookingPolicyRefStructure
}

// ReservingRef represents the ReservingRef element
// Reference to a RESERVING USAGE PARAMETER.
type ReservingRef struct {
	ReservingRefStructure
}

// CancellingRef represents the CancellingRef element
// Reference to a CANCELLING PARAMETER.
type CancellingRef struct {
	CancellingRefStructure
}

// ResellTypeEnumeration represents the ResellTypeEnumeration enumeration
// Allowed values for ResellType.
type ResellTypeEnumeration string

const (
	// ResellTypeEnumerationNone represents none
	ResellTypeEnumerationNone ResellTypeEnumeration = "none"
	// ResellTypeEnumerationPartial represents partial
	ResellTypeEnumerationPartial ResellTypeEnumeration = "partial"
	// ResellTypeEnumerationSlidingScale represents slidingScale
	ResellTypeEnumerationSlidingScale ResellTypeEnumeration = "slidingScale"
	// ResellTypeEnumerationFull represents full
	ResellTypeEnumerationFull ResellTypeEnumeration = "full"
)

// ResellWhenEnumeration represents the ResellWhenEnumeration enumeration
// Allowed values for Resell When.
type ResellWhenEnumeration string

const (
	// ResellWhenEnumerationNever represents never
	ResellWhenEnumerationNever ResellWhenEnumeration = "never"
	// ResellWhenEnumerationWithinPurchaseGracePeriod represents withinPurchaseGracePeriod
	ResellWhenEnumerationWithinPurchaseGracePeriod ResellWhenEnumeration = "withinPurchaseGracePeriod"
	// ResellWhenEnumerationBeforeStartOfValidity represents beforeStartOfValidity
	ResellWhenEnumerationBeforeStartOfValidity ResellWhenEnumeration = "beforeStartOfValidity"
	// ResellWhenEnumerationAfterStartOfValidity represents afterStartOfValidity
	ResellWhenEnumerationAfterStartOfValidity ResellWhenEnumeration = "afterStartOfValidity"
	// ResellWhenEnumerationAfterEndOfValidity represents afterEndOfValidity
	ResellWhenEnumerationAfterEndOfValidity ResellWhenEnumeration = "afterEndOfValidity"
	// ResellWhenEnumerationBeforeFirstUse represents beforeFirstUse
	ResellWhenEnumerationBeforeFirstUse ResellWhenEnumeration = "beforeFirstUse"
	// ResellWhenEnumerationAfterFirstUse represents afterFirstUse
	ResellWhenEnumerationAfterFirstUse ResellWhenEnumeration = "afterFirstUse"
	// ResellWhenEnumerationBeforeValidation represents beforeValidation
	ResellWhenEnumerationBeforeValidation ResellWhenEnumeration = "beforeValidation"
	// ResellWhenEnumerationAfterValidation represents afterValidation
	ResellWhenEnumerationAfterValidation ResellWhenEnumeration = "afterValidation"
	// ResellWhenEnumerationWithinSpecifiedWindow represents withinSpecifiedWindow
	ResellWhenEnumerationWithinSpecifiedWindow ResellWhenEnumeration = "withinSpecifiedWindow"
	// ResellWhenEnumerationAnyTime represents anyTime
	ResellWhenEnumerationAnyTime ResellWhenEnumeration = "anyTime"
	// ResellWhenEnumerationOther represents other
	ResellWhenEnumerationOther ResellWhenEnumeration = "other"
)

// EffectiveFromEnumeration represents the EffectiveFromEnumeration enumeration
// Allowed values for EffectiveFrom
type EffectiveFromEnumeration string

const (
	// EffectiveFromEnumerationNever represents never
	EffectiveFromEnumerationNever EffectiveFromEnumeration = "never"
	// EffectiveFromEnumerationNextInterval represents nextInterval
	EffectiveFromEnumerationNextInterval EffectiveFromEnumeration = "nextInterval"
	// EffectiveFromEnumerationNextInstallment represents nextInstallment
	EffectiveFromEnumerationNextInstallment EffectiveFromEnumeration = "nextInstallment"
	// EffectiveFromEnumerationAnyTime represents anyTime
	EffectiveFromEnumerationAnyTime EffectiveFromEnumeration = "anyTime"
	// EffectiveFromEnumerationOther represents other
	EffectiveFromEnumerationOther EffectiveFromEnumeration = "other"
)

// ExchangableToEnumeration represents the ExchangableToEnumeration enumeration
// Allowed values for Exchangeable to.
type ExchangableToEnumeration string

const (
	// ExchangableToEnumerationAnyProduct represents anyProduct
	ExchangableToEnumerationAnyProduct ExchangableToEnumeration = "anyProduct"
	// ExchangableToEnumerationSameProductSameDay represents sameProductSameDay
	ExchangableToEnumerationSameProductSameDay ExchangableToEnumeration = "sameProductSameDay"
	// ExchangableToEnumerationSameProductAnyDay represents sameProductAnyDay
	ExchangableToEnumerationSameProductAnyDay ExchangableToEnumeration = "sameProductAnyDay"
	// ExchangableToEnumerationSameProductLongerJourney represents sameProductLongerJourney
	ExchangableToEnumerationSameProductLongerJourney ExchangableToEnumeration = "sameProductLongerJourney"
	// ExchangableToEnumerationSameProductShorterJourney represents sameProductShorterJourney
	ExchangableToEnumerationSameProductShorterJourney ExchangableToEnumeration = "sameProductShorterJourney"
	// ExchangableToEnumerationUpgradeToStandardFare represents upgradeToStandardFare
	ExchangableToEnumerationUpgradeToStandardFare ExchangableToEnumeration = "upgradeToStandardFare"
	// ExchangableToEnumerationUpgradeToSpecifiedFare represents upgradeToSpecifiedFare
	ExchangableToEnumerationUpgradeToSpecifiedFare ExchangableToEnumeration = "upgradeToSpecifiedFare"
	// ExchangableToEnumerationDowngradeToSpecifiedFare represents downgradeToSpecifiedFare
	ExchangableToEnumerationDowngradeToSpecifiedFare ExchangableToEnumeration = "downgradeToSpecifiedFare"
	// ExchangableToEnumerationEquivalentProduct represents equivalentProduct
	ExchangableToEnumerationEquivalentProduct ExchangableToEnumeration = "equivalentProduct"
	// ExchangableToEnumerationChangeGroupSize represents changeGroupSize
	ExchangableToEnumerationChangeGroupSize ExchangableToEnumeration = "changeGroupSize"
	// ExchangableToEnumerationOther represents other
	ExchangableToEnumerationOther ExchangableToEnumeration = "other"
)

// RefundTypeEnumeration represents the RefundTypeEnumeration enumeration
// Allowed values for Refunding Type.
type RefundTypeEnumeration string

const (
	// RefundTypeEnumerationUnused represents unused
	// Refund for unused ticket or pass.
	RefundTypeEnumerationUnused RefundTypeEnumeration = "unused"
	// RefundTypeEnumerationDelay represents delay
	// Refund is for delayed journey.
	RefundTypeEnumerationDelay RefundTypeEnumeration = "delay"
	// RefundTypeEnumerationCancellation represents cancellation
	// Refund is for cancelled journey.
	RefundTypeEnumerationCancellation RefundTypeEnumeration = "cancellation"
	// RefundTypeEnumerationPartialJourney represents partialJourney
	// Refund is for unusued section of a journey.
	RefundTypeEnumerationPartialJourney RefundTypeEnumeration = "partialJourney"
	// RefundTypeEnumerationEarlyTermination represents earlyTermination
	// Partial refund is for  early termination of a period pass or season ticket.
	RefundTypeEnumerationEarlyTermination RefundTypeEnumeration = "earlyTermination"
	// RefundTypeEnumerationChangeOfGroupSize represents changeOfGroupSize
	// Refund for change of group size.
	RefundTypeEnumerationChangeOfGroupSize RefundTypeEnumeration = "changeOfGroupSize"
	// RefundTypeEnumerationOther represents other
	RefundTypeEnumerationOther RefundTypeEnumeration = "other"
)

// RefundPolicyEnumeration represents the RefundPolicyEnumeration enumeration
// Allowed values for Refund Policy
type RefundPolicyEnumeration string

const (
	// RefundPolicyEnumerationAny represents any
	RefundPolicyEnumerationAny RefundPolicyEnumeration = "any"
	// RefundPolicyEnumerationIllness represents illness
	RefundPolicyEnumerationIllness RefundPolicyEnumeration = "illness"
	// RefundPolicyEnumerationDeath represents death
	RefundPolicyEnumerationDeath RefundPolicyEnumeration = "death"
	// RefundPolicyEnumerationMaternity represents maternity
	RefundPolicyEnumerationMaternity RefundPolicyEnumeration = "maternity"
	// RefundPolicyEnumerationRedundancy represents redundancy
	RefundPolicyEnumerationRedundancy RefundPolicyEnumeration = "redundancy"
	// RefundPolicyEnumerationChangeOfEmployment represents changeOfEmployment
	RefundPolicyEnumerationChangeOfEmployment RefundPolicyEnumeration = "changeOfEmployment"
	// RefundPolicyEnumerationChangeOfResidence represents changeOfResidence
	RefundPolicyEnumerationChangeOfResidence RefundPolicyEnumeration = "changeOfResidence"
	// RefundPolicyEnumerationNone represents none
	RefundPolicyEnumerationNone RefundPolicyEnumeration = "none"
	// RefundPolicyEnumerationOther represents other
	RefundPolicyEnumerationOther RefundPolicyEnumeration = "other"
)

// PartialRefundBasisEnumeration represents the PartialRefundBasisEnumeration enumeration
// Allowed values for Refund Basis.
type PartialRefundBasisEnumeration string

const (
	// PartialRefundBasisEnumerationUnusedDays represents unusedDays
	// Refund is given for any unused days.
	PartialRefundBasisEnumerationUnusedDays PartialRefundBasisEnumeration = "unusedDays"
	// PartialRefundBasisEnumerationUnusedWeeks represents unusedWeeks
	// Refund is given for any unused weeks
	PartialRefundBasisEnumerationUnusedWeeks PartialRefundBasisEnumeration = "unusedWeeks"
	// PartialRefundBasisEnumerationUnusedMonths represents unusedMonths
	// Refund is given for any unused months
	PartialRefundBasisEnumerationUnusedMonths PartialRefundBasisEnumeration = "unusedMonths"
	// PartialRefundBasisEnumerationUnusedSemesters represents unusedSemesters
	PartialRefundBasisEnumerationUnusedSemesters PartialRefundBasisEnumeration = "unusedSemesters"
	// PartialRefundBasisEnumerationOther represents other
	// Other basis.
	PartialRefundBasisEnumerationOther PartialRefundBasisEnumeration = "other"
)

// SharedUsageEnumeration represents the SharedUsageEnumeration enumeration
// Allowed values for Shared Usage.
type SharedUsageEnumeration string

const (
	// SharedUsageEnumerationSingleUser represents singleUser
	// Only one user may use the product at a time. E.g. a mobile app carnet of tickets may only restricted to  be used by the mobile device  holder.
	SharedUsageEnumerationSingleUser SharedUsageEnumeration = "singleUser"
	// SharedUsageEnumerationConcurrentUsers represents concurrentUsers
	// Several users  may use the same product at a time. E.g. a carnet of tickets may be shared with several  users other than the purchaser.
	SharedUsageEnumerationConcurrentUsers SharedUsageEnumeration = "concurrentUsers"
	// SharedUsageEnumerationConcurrentDesignatedUsers represents concurrentDesignatedUsers
	// Several users (but only of a specifed type of companion) may use the same product at a time. E.g.  a mobile app carnet of tickets may be shared with children but not others.
	SharedUsageEnumerationConcurrentDesignatedUsers SharedUsageEnumeration = "concurrentDesignatedUsers"
)

// ResellingRefStructure represents the ResellingRefStructure element
// Type for Reference to a RESELLING USAGE PARAMETER.
type ResellingRefStructure struct {
	UsageParameterRefStructure
}

// ExchangingRefStructure represents the ExchangingRefStructure element
// Type for Reference to a EXCHANGING USAGE PARAMETER.
type ExchangingRefStructure struct {
	ResellingRefStructure
}

// RefundingRefStructure represents the RefundingRefStructure element
// Type for Reference to a REFUNDING USAGE PARAMETER.
type RefundingRefStructure struct {
	ResellingRefStructure
}

// ReplacingRefStructure represents the ReplacingRefStructure element
// Type for Reference to a REPLACING USAGE PARAMETER.
type ReplacingRefStructure struct {
	ResellingRefStructure
}

// TransferabilityRefStructure represents the TransferabilityRefStructure element
// Type for Reference to a TRANSFERABILITY USAGE PARAMETER.
type TransferabilityRefStructure struct {
	UsageParameterRefStructure
}

// ResellingRef represents the ResellingRef element
// Reference to a RESELLING USAGE PARAMETER.
type ResellingRef struct {
	ResellingRefStructure
}

// ExchangingRef represents the ExchangingRef element
// Reference to a EXCHANGING USAGE PARAMETER.
type ExchangingRef struct {
	ExchangingRefStructure
}

// RefundingRef represents the RefundingRef element
// Reference to a REFUNDING USAGE PARAMETER.
type RefundingRef struct {
	RefundingRefStructure
}

// ReplacingRef represents the ReplacingRef element
// Reference to a REPLACING PARAMETER.
type ReplacingRef struct {
	ReplacingRefStructure
}

// TransferabilityRef represents the TransferabilityRef element
// Reference to a TRANSFERABILITY USAGE PARAMETER.
type TransferabilityRef struct {
	TransferabilityRefStructure
}

// TravelCreditPolicyEnumeration represents the TravelCreditPolicyEnumeration enumeration
// Allowed values for  Credit Policy.
type TravelCreditPolicyEnumeration string

const (
	// TravelCreditPolicyEnumerationAllowTravel represents allowTravel
	// Policy if credit threhsold is exceeded is still to allow further travel.
	TravelCreditPolicyEnumerationAllowTravel TravelCreditPolicyEnumeration = "allowTravel"
	// TravelCreditPolicyEnumerationBlockAllTravel represents blockAllTravel
	// Policy if credit threhsold is exceeded is to block all travel bu yuser.
	TravelCreditPolicyEnumerationBlockAllTravel TravelCreditPolicyEnumeration = "blockAllTravel"
	// TravelCreditPolicyEnumerationBlockPayAsYouGoTravel represents blockPayAsYouGoTravel
	// Policy if credit threhsold is exceeded is to block on demand travel, but still permit period pass travel.
	TravelCreditPolicyEnumerationBlockPayAsYouGoTravel TravelCreditPolicyEnumeration = "blockPayAsYouGoTravel"
	// TravelCreditPolicyEnumerationOther represents other
	TravelCreditPolicyEnumerationOther TravelCreditPolicyEnumeration = "other"
)

// TravelBillingPolicyEnumeration represents the TravelBillingPolicyEnumeration enumeration
// Allowed values for  Billing Policy.
type TravelBillingPolicyEnumeration string

const (
	// TravelBillingPolicyEnumerationBillAsYouGo represents billAsYouGo
	// Bill for use immediately on incurring travel.
	TravelBillingPolicyEnumerationBillAsYouGo TravelBillingPolicyEnumeration = "billAsYouGo"
	// TravelBillingPolicyEnumerationBillOnThreshold represents billOnThreshold
	// Only raise bill when threshold is reached
	TravelBillingPolicyEnumerationBillOnThreshold TravelBillingPolicyEnumeration = "billOnThreshold"
	// TravelBillingPolicyEnumerationBillAtFareDayEnd represents billAtFareDayEnd
	// Bill at end of evey fare day.
	TravelBillingPolicyEnumerationBillAtFareDayEnd TravelBillingPolicyEnumeration = "billAtFareDayEnd"
	// TravelBillingPolicyEnumerationBillAtPeriodEnd represents billAtPeriodEnd
	// Bill at end of a specified period.
	TravelBillingPolicyEnumerationBillAtPeriodEnd TravelBillingPolicyEnumeration = "billAtPeriodEnd"
)

// DepositPolicyEnumeration represents the DepositPolicyEnumeration enumeration
// Allowed values for  Deposit  Policy. +v1.1.2
type DepositPolicyEnumeration string

const (
	// DepositPolicyEnumerationNone represents none
	// No deposit required.
	DepositPolicyEnumerationNone DepositPolicyEnumeration = "none"
	// DepositPolicyEnumerationDepositTaken represents depositTaken
	// Deposit charged and later refunded.
	DepositPolicyEnumerationDepositTaken DepositPolicyEnumeration = "depositTaken"
	// DepositPolicyEnumerationDepositBlocked represents depositBlocked
	// Deposit amount blocked on card but not subtracted.
	DepositPolicyEnumerationDepositBlocked DepositPolicyEnumeration = "depositBlocked"
	// DepositPolicyEnumerationOther represents other
	// Other policy.
	DepositPolicyEnumerationOther DepositPolicyEnumeration = "other"
)

// SameStationReentryPolicyEnumeration represents the SameStationReentryPolicyEnumeration enumeration
// Allowed values for Same Station Rentry Policy.
type SameStationReentryPolicyEnumeration string

const (
	// SameStationReentryPolicyEnumerationBlocked represents blocked
	SameStationReentryPolicyEnumerationBlocked SameStationReentryPolicyEnumeration = "blocked"
	// SameStationReentryPolicyEnumerationNewFare represents newFare
	SameStationReentryPolicyEnumerationNewFare SameStationReentryPolicyEnumeration = "newFare"
	// SameStationReentryPolicyEnumerationMaximumFare represents maximumFare
	SameStationReentryPolicyEnumerationMaximumFare SameStationReentryPolicyEnumeration = "maximumFare"
	// SameStationReentryPolicyEnumerationAllowed represents allowed
	SameStationReentryPolicyEnumerationAllowed SameStationReentryPolicyEnumeration = "allowed"
)

// PenaltyPolicyTypeEnumeration represents the PenaltyPolicyTypeEnumeration enumeration
// Allowed values for Penalty Policy Type.
type PenaltyPolicyTypeEnumeration string

const (
	// PenaltyPolicyTypeEnumerationNoTicket represents noTicket
	PenaltyPolicyTypeEnumerationNoTicket PenaltyPolicyTypeEnumeration = "noTicket"
	// PenaltyPolicyTypeEnumerationNoCheckIn represents noCheckIn
	PenaltyPolicyTypeEnumerationNoCheckIn PenaltyPolicyTypeEnumeration = "noCheckIn"
	// PenaltyPolicyTypeEnumerationNoCheckOut represents noCheckOut
	PenaltyPolicyTypeEnumerationNoCheckOut PenaltyPolicyTypeEnumeration = "noCheckOut"
	// PenaltyPolicyTypeEnumerationNoValidation represents noValidation
	PenaltyPolicyTypeEnumerationNoValidation PenaltyPolicyTypeEnumeration = "noValidation"
	// PenaltyPolicyTypeEnumerationOther represents other
	PenaltyPolicyTypeEnumerationOther PenaltyPolicyTypeEnumeration = "other"
)

// SubscriptionTermTypeEnumeration represents the SubscriptionTermTypeEnumeration enumeration
// Allowed values for  Billing Policy.
type SubscriptionTermTypeEnumeration string

const (
	// SubscriptionTermTypeEnumerationFixed represents fixed
	// Subscription must be for a fixed term.
	SubscriptionTermTypeEnumerationFixed SubscriptionTermTypeEnumeration = "fixed"
	// SubscriptionTermTypeEnumerationVariable represents variable
	// Subscription can be for  an arbitray term,
	SubscriptionTermTypeEnumerationVariable SubscriptionTermTypeEnumeration = "variable"
	// SubscriptionTermTypeEnumerationOpenEnded represents openEnded
	// Subscription term is open ended.
	SubscriptionTermTypeEnumerationOpenEnded SubscriptionTermTypeEnumeration = "openEnded"
)

// SubscriptionRenewalPolicyEnumeration represents the SubscriptionRenewalPolicyEnumeration enumeration
// Allowed values for SUBSCRIBING Renewal Policy.
type SubscriptionRenewalPolicyEnumeration string

const (
	// SubscriptionRenewalPolicyEnumerationAutomatic represents automatic
	// Renew automatcally at end of term.
	SubscriptionRenewalPolicyEnumerationAutomatic SubscriptionRenewalPolicyEnumeration = "automatic"
	// SubscriptionRenewalPolicyEnumerationManual represents manual
	// Renew on request.
	SubscriptionRenewalPolicyEnumerationManual SubscriptionRenewalPolicyEnumeration = "manual"
	// SubscriptionRenewalPolicyEnumerationAutomaticOnConfirmation represents automaticOnConfirmation
	// Confirm and renew automatcally at end of  subscription term.
	SubscriptionRenewalPolicyEnumerationAutomaticOnConfirmation SubscriptionRenewalPolicyEnumeration = "automaticOnConfirmation"
	// SubscriptionRenewalPolicyEnumerationNone represents none
	// No renewal allowed.
	SubscriptionRenewalPolicyEnumerationNone SubscriptionRenewalPolicyEnumeration = "none"
	// SubscriptionRenewalPolicyEnumerationOther represents other
	SubscriptionRenewalPolicyEnumerationOther SubscriptionRenewalPolicyEnumeration = "other"
)

// ChargingPolicyRefStructure represents the ChargingPolicyRefStructure element
// Type for Reference to a CHARGING POLICY usage parameter.
type ChargingPolicyRefStructure struct {
	UsageParameterRefStructure
}

// PenaltyPolicyRefStructure represents the PenaltyPolicyRefStructure element
// Type for Reference to a PENALTY POLICY usage parameter.
type PenaltyPolicyRefStructure struct {
	UsageParameterRefStructure
}

// SubscribingRefStructure represents the SubscribingRefStructure element
// Type for Reference to a SUBSCRIBING usage parameter.
type SubscribingRefStructure struct {
	UsageParameterRefStructure
}

// ChargingPolicyRef represents the ChargingPolicyRef element
// Reference to a CHARGING POLICY usage parameter.
type ChargingPolicyRef struct {
	ChargingPolicyRefStructure
}

// PenaltyPolicyRef represents the PenaltyPolicyRef element
// Reference to a PENALTY POLICY usage parameter.
type PenaltyPolicyRef struct {
	PenaltyPolicyRefStructure
}

// SubscribingRef represents the SubscribingRef element
// Reference to a SUBSCRIBING usage parameter. +v1.1
type SubscribingRef struct {
	SubscribingRefStructure
}

// UserTypeEnumeration represents the UserTypeEnumeration enumeration
// Allowed values for USER TYPE.
type UserTypeEnumeration string

const (
	// UserTypeEnumerationAdult represents adult
	UserTypeEnumerationAdult UserTypeEnumeration = "adult"
	// UserTypeEnumerationChild represents child
	UserTypeEnumerationChild UserTypeEnumeration = "child"
	// UserTypeEnumerationInfant represents infant
	UserTypeEnumerationInfant UserTypeEnumeration = "infant"
	// UserTypeEnumerationSenior represents senior
	UserTypeEnumerationSenior UserTypeEnumeration = "senior"
	// UserTypeEnumerationStudent represents student
	UserTypeEnumerationStudent UserTypeEnumeration = "student"
	// UserTypeEnumerationYoungPerson represents youngPerson
	UserTypeEnumerationYoungPerson UserTypeEnumeration = "youngPerson"
	// UserTypeEnumerationSchoolPupil represents schoolPupil
	UserTypeEnumerationSchoolPupil UserTypeEnumeration = "schoolPupil"
	// UserTypeEnumerationMilitary represents military
	UserTypeEnumerationMilitary UserTypeEnumeration = "military"
	// UserTypeEnumerationDisabled represents disabled
	UserTypeEnumerationDisabled UserTypeEnumeration = "disabled"
	// UserTypeEnumerationDisabledCompanion represents disabledCompanion
	UserTypeEnumerationDisabledCompanion UserTypeEnumeration = "disabledCompanion"
	// UserTypeEnumerationJobSeeker represents jobSeeker
	UserTypeEnumerationJobSeeker UserTypeEnumeration = "jobSeeker"
	// UserTypeEnumerationEmployee represents employee
	UserTypeEnumerationEmployee UserTypeEnumeration = "employee"
	// UserTypeEnumerationAnimal represents animal
	UserTypeEnumerationAnimal UserTypeEnumeration = "animal"
	// UserTypeEnumerationGuideDog represents guideDog
	UserTypeEnumerationGuideDog UserTypeEnumeration = "guideDog"
	// UserTypeEnumerationMember represents member
	UserTypeEnumerationMember UserTypeEnumeration = "member"
	// UserTypeEnumerationOther represents other
	UserTypeEnumerationOther UserTypeEnumeration = "other"
	// UserTypeEnumerationAnyone represents anyone
	UserTypeEnumerationAnyone UserTypeEnumeration = "anyone"
)

// GroupTicketingEnumeration represents the GroupTicketingEnumeration enumeration
// Allowed values for GROUP TICKETING.
type GroupTicketingEnumeration string

const (
	// GroupTicketingEnumerationAllOnOneTicket represents allOnOneTicket
	GroupTicketingEnumerationAllOnOneTicket GroupTicketingEnumeration = "allOnOneTicket"
	// GroupTicketingEnumerationSeparateTickets represents separateTickets
	GroupTicketingEnumerationSeparateTickets GroupTicketingEnumeration = "separateTickets"
	// GroupTicketingEnumerationTicketWithCoupons represents ticketWithCoupons
	GroupTicketingEnumerationTicketWithCoupons GroupTicketingEnumeration = "ticketWithCoupons"
	// GroupTicketingEnumerationOther represents other
	GroupTicketingEnumerationOther GroupTicketingEnumeration = "other"
)

// GroupCheckInEnumeration represents the GroupCheckInEnumeration enumeration
// Allowed values for GROUP CHECK IN.
type GroupCheckInEnumeration string

const (
	// GroupCheckInEnumerationNone represents none
	GroupCheckInEnumerationNone GroupCheckInEnumeration = "none"
	// GroupCheckInEnumerationRequired represents required
	GroupCheckInEnumerationRequired GroupCheckInEnumeration = "required"
	// GroupCheckInEnumerationAllowed represents allowed
	GroupCheckInEnumerationAllowed GroupCheckInEnumeration = "allowed"
)

// GroupSizeChangesEnumeration represents the GroupSizeChangesEnumeration enumeration
// Allowed values for GROUP SIZE CHANGE. +v1.1
type GroupSizeChangesEnumeration string

const (
	// GroupSizeChangesEnumerationNoChanges represents noChanges
	// Group size cannot be changed..
	GroupSizeChangesEnumerationNoChanges GroupSizeChangesEnumeration = "noChanges"
	// GroupSizeChangesEnumerationFree represents free
	// No charge to change group size.
	GroupSizeChangesEnumerationFree GroupSizeChangesEnumeration = "free"
	// GroupSizeChangesEnumerationCharge represents charge
	// Group size can be changed for a fee (as specified by a EXCHANGING usage parameter).
	GroupSizeChangesEnumerationCharge GroupSizeChangesEnumeration = "charge"
	// GroupSizeChangesEnumerationPurchaseWindowSteppedCharge represents purchaseWindowSteppedCharge
	// Group size can be changed, charges are according to a sliding scale according to  the length of time before travel (as specified by several  EXCHANGING parameters).
	GroupSizeChangesEnumerationPurchaseWindowSteppedCharge GroupSizeChangesEnumeration = "purchaseWindowSteppedCharge"
	// GroupSizeChangesEnumerationNumberOfPassengersSteppedCharge represents numberOfPassengersSteppedCharge
	// Group size can be changed, charges are according to a sliding scale according to  the number of passengers changed.
	GroupSizeChangesEnumerationNumberOfPassengersSteppedCharge GroupSizeChangesEnumeration = "numberOfPassengersSteppedCharge"
)

// CompanionRelationshipEnumeration represents the CompanionRelationshipEnumeration enumeration
// Allowed values for COMPANION RELATIONSHIP TYPE Type.
type CompanionRelationshipEnumeration string

const (
	// CompanionRelationshipEnumerationAnyone represents anyone
	CompanionRelationshipEnumerationAnyone CompanionRelationshipEnumeration = "anyone"
	// CompanionRelationshipEnumerationParent represents parent
	CompanionRelationshipEnumerationParent CompanionRelationshipEnumeration = "parent"
	// CompanionRelationshipEnumerationGrandparent represents grandparent
	CompanionRelationshipEnumerationGrandparent CompanionRelationshipEnumeration = "grandparent"
	// CompanionRelationshipEnumerationChild represents child
	CompanionRelationshipEnumerationChild CompanionRelationshipEnumeration = "child"
	// CompanionRelationshipEnumerationGrandchild represents grandchild
	CompanionRelationshipEnumerationGrandchild CompanionRelationshipEnumeration = "grandchild"
	// CompanionRelationshipEnumerationFamily represents family
	CompanionRelationshipEnumerationFamily CompanionRelationshipEnumeration = "family"
	// CompanionRelationshipEnumerationSpouse represents spouse
	CompanionRelationshipEnumerationSpouse CompanionRelationshipEnumeration = "spouse"
	// CompanionRelationshipEnumerationPartner represents partner
	CompanionRelationshipEnumerationPartner CompanionRelationshipEnumeration = "partner"
	// CompanionRelationshipEnumerationDependent represents dependent
	CompanionRelationshipEnumerationDependent CompanionRelationshipEnumeration = "dependent"
	// CompanionRelationshipEnumerationColleague represents colleague
	CompanionRelationshipEnumerationColleague CompanionRelationshipEnumeration = "colleague"
	// CompanionRelationshipEnumerationPupil represents pupil
	CompanionRelationshipEnumerationPupil CompanionRelationshipEnumeration = "pupil"
	// CompanionRelationshipEnumerationTeacher represents teacher
	CompanionRelationshipEnumerationTeacher CompanionRelationshipEnumeration = "teacher"
	// CompanionRelationshipEnumerationCarer represents carer
	CompanionRelationshipEnumerationCarer CompanionRelationshipEnumeration = "carer"
)

// ProofOfIdentityEnumeration represents the ProofOfIdentityEnumeration enumeration
// Allowed values for PROOF REQUIIRED Type.
type ProofOfIdentityEnumeration string

const (
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationNoneRequired represents noneRequired
	ProofOfIdentityEnumerationProofOfIdentityEnumerationNoneRequired ProofOfIdentityEnumeration = "noneRequired"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationCreditCard represents creditCard
	ProofOfIdentityEnumerationProofOfIdentityEnumerationCreditCard ProofOfIdentityEnumeration = "creditCard"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationPassport represents passport
	ProofOfIdentityEnumerationProofOfIdentityEnumerationPassport ProofOfIdentityEnumeration = "passport"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationDrivingLicence represents drivingLicence
	ProofOfIdentityEnumerationProofOfIdentityEnumerationDrivingLicence ProofOfIdentityEnumeration = "drivingLicence"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationBirthCertificate represents birthCertificate
	ProofOfIdentityEnumerationProofOfIdentityEnumerationBirthCertificate ProofOfIdentityEnumeration = "birthCertificate"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationMembershipCard represents membershipCard
	ProofOfIdentityEnumerationProofOfIdentityEnumerationMembershipCard ProofOfIdentityEnumeration = "membershipCard"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationIdentityDocument represents identityDocument
	ProofOfIdentityEnumerationProofOfIdentityEnumerationIdentityDocument ProofOfIdentityEnumeration = "identityDocument"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationMedicalDocument represents medicalDocument
	ProofOfIdentityEnumerationProofOfIdentityEnumerationMedicalDocument ProofOfIdentityEnumeration = "medicalDocument"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationStudentCard represents studentCard
	ProofOfIdentityEnumerationProofOfIdentityEnumerationStudentCard ProofOfIdentityEnumeration = "studentCard"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationLetterWithAddress represents letterWIthAddress
	ProofOfIdentityEnumerationProofOfIdentityEnumerationLetterWithAddress ProofOfIdentityEnumeration = "letterWIthAddress"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationMobileDevice represents mobileDevice
	ProofOfIdentityEnumerationProofOfIdentityEnumerationMobileDevice ProofOfIdentityEnumeration = "mobileDevice"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationEmailAccount represents emailAccount
	ProofOfIdentityEnumerationProofOfIdentityEnumerationEmailAccount ProofOfIdentityEnumeration = "emailAccount"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationMeasurement represents measurement
	ProofOfIdentityEnumerationProofOfIdentityEnumerationMeasurement ProofOfIdentityEnumeration = "measurement"
	// ProofOfIdentityEnumerationProofOfIdentityEnumerationOther represents other
	ProofOfIdentityEnumerationProofOfIdentityEnumerationOther ProofOfIdentityEnumeration = "other"
)

// ResidenceTypeEnumeration represents the ResidenceTypeEnumeration enumeration
// Allowed values for RESIDENCE TYPE
type ResidenceTypeEnumeration string

const (
	// ResidenceTypeEnumerationLive represents live
	ResidenceTypeEnumerationLive ResidenceTypeEnumeration = "live"
	// ResidenceTypeEnumerationWork represents work
	ResidenceTypeEnumerationWork ResidenceTypeEnumeration = "work"
	// ResidenceTypeEnumerationStudy represents study
	ResidenceTypeEnumerationStudy ResidenceTypeEnumeration = "study"
	// ResidenceTypeEnumerationExchange represents exchange
	ResidenceTypeEnumerationExchange ResidenceTypeEnumeration = "exchange"
	// ResidenceTypeEnumerationBorn represents born
	ResidenceTypeEnumerationBorn ResidenceTypeEnumeration = "born"
	// ResidenceTypeEnumerationNonResident represents nonResident
	ResidenceTypeEnumerationNonResident ResidenceTypeEnumeration = "nonResident"
)

// OnBecomingEnumeration represents the OnBecomingEnumeration enumeration
// Allowed values for Becoming Eiiigble + v1.1
type OnBecomingEnumeration string

const (
	// OnBecomingEnumerationAutomatic represents automatic
	// If user becomes eligible, automatically apply additional user profile benefits to user, e.g. apply student or senior discounts.
	OnBecomingEnumerationAutomatic OnBecomingEnumeration = "automatic"
	// OnBecomingEnumerationInvite represents invite
	// If user becomes eligible, invite user to take up eligible products. e.g. Invite to buy Senior railcard.
	OnBecomingEnumerationInvite OnBecomingEnumeration = "invite"
	// OnBecomingEnumerationNoAction represents noAction
	// If user becomes eligible,, no automatic measures are taken.
	OnBecomingEnumerationNoAction OnBecomingEnumeration = "noAction"
	// OnBecomingEnumerationOther represents other
	OnBecomingEnumerationOther OnBecomingEnumeration = "other"
)

// OnCeasingEnumeration represents the OnCeasingEnumeration enumeration
// Allowed values for Ceasing  to be Eligible + v1.1
type OnCeasingEnumeration string

const (
	// OnCeasingEnumerationImmediateTermination represents immediateTermination
	// If user ceases to be eligible, automatically terminate validity of an  elibility dependent product.
	OnCeasingEnumerationImmediateTermination OnCeasingEnumeration = "immediateTermination"
	// OnCeasingEnumerationUseUntilExpiry represents useUntilExpiry
	// If user ceases to be eligible, they may go on using the product until it  expires..
	OnCeasingEnumerationUseUntilExpiry OnCeasingEnumeration = "useUntilExpiry"
	// OnCeasingEnumerationTerminateAfterGracePeriod represents terminateAfterGracePeriod
	// If user ceases to be eligible,  termination  take place after the end of a grace period
	OnCeasingEnumerationTerminateAfterGracePeriod OnCeasingEnumeration = "terminateAfterGracePeriod"
	// OnCeasingEnumerationAutomaticallySubstituteProduct represents automaticallySubstituteProduct
	OnCeasingEnumerationAutomaticallySubstituteProduct OnCeasingEnumeration = "automaticallySubstituteProduct"
	// OnCeasingEnumerationNoAction represents noAction
	// If user ceases to be eligible, automatically substitute them with an appropiate  replacement product.
	OnCeasingEnumerationNoAction OnCeasingEnumeration = "noAction"
	// OnCeasingEnumerationOther represents other
	OnCeasingEnumerationOther OnCeasingEnumeration = "other"
)

// UserProfileRefsRelStructure represents the userProfileRefs_RelStructure element
// Type for a list of USAGE PROFILEs
type UserProfileRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehiclePoolerProfileRef []VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef []CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef []UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
}

// UserProfileRefStructure represents the UserProfileRefStructure element
// Type for Reference to a USER PROFILE usage parameter
type UserProfileRefStructure struct {
	UsageParameterRefStructure
}

// CommercialProfileRefStructure represents the CommercialProfileRefStructure element
// Type for Reference to a COMMERCIAL PROFILE usage parameter
type CommercialProfileRefStructure struct {
	UsageParameterRefStructure
}

// GroupTicketRefStructure represents the GroupTicketRefStructure element
// Type for Reference to a GROUP TICKET usage parameter
type GroupTicketRefStructure struct {
	UsageParameterRefStructure
}

// CompanionProfileRefStructure represents the CompanionProfileRefStructure element
// Type for Reference to a COMPANION PROFILE usage parameter
type CompanionProfileRefStructure struct {
	UserProfileRefStructure
}

// TypesOfProofRefsRelStructure represents the typesOfProofRefs_RelStructure element
// Type for a list of TYOP OF PRROF .
type TypesOfProofRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfProofRef []TypeOfProofRef `xml:"TypeOfProofRef" json:"TypeOfProofRef"`
}

// TypeOfProofRefStructure represents the TypeOfProofRefStructure element
// Type for a reference to a TYPE OF PROOF.
type TypeOfProofRefStructure struct {
	TypeOfValueRefStructure
}

// ResidentialQualificationRefStructure represents the ResidentialQualificationRefStructure element
// Type for Reference to a RESIDENTIAL QUALIFICATION usage parameter.
type ResidentialQualificationRefStructure struct {
	VersionOfObjectRefStructure
}

// EligibilityChangePolicyRefStructure represents the EligibilityChangePolicyRefStructure element
// Type for Reference to an ELIGIBILITY CHANGE POLICY usage parameter.
type EligibilityChangePolicyRefStructure struct {
	UsageParameterRefStructure
}

// ProfileParameterRef represents the ProfileParameterRef element
// Reference to a PROFILE usage parameter
type ProfileParameterRef struct {
	UsageParameterRefStructure
}

// UserProfileRef represents the UserProfileRef element
// Reference to a USER PROFILE usage parameter.
type UserProfileRef struct {
	UserProfileRefStructure
}

// CommercialProfileRef represents the CommercialProfileRef element
// Reference to a COMMERCIAL PROFILE usage parameter
type CommercialProfileRef struct {
	CommercialProfileRefStructure
}

// GroupTicketRef represents the GroupTicketRef element
// Reference to a GROUP TICKET usage parameter
type GroupTicketRef struct {
	GroupTicketRefStructure
}

// CompanionProfileRef represents the CompanionProfileRef element
// Reference to a COMPANION PROFILE usage parameter.
type CompanionProfileRef struct {
	CompanionProfileRefStructure
}

// TypeOfProofRef represents the TypeOfProofRef element
// Reference to a TYPE OF PROOF. +v1.2.2
type TypeOfProofRef struct {
	TypeOfProofRefStructure
}

// ResidentialQualificationRef represents the ResidentialQualificationRef element
// Reference to a RESIDENTIAL QUALIFICATION usage parameter
type ResidentialQualificationRef struct {
	ResidentialQualificationRefStructure
}

// EligibilityChangePolicyRef represents the EligibilityChangePolicyRef element
// Reference to anELIGIBILITY CHANGE POLICY usage parameter. +v1.1
type EligibilityChangePolicyRef struct {
	EligibilityChangePolicyRefStructure
}

// EntitlementTypeEnumeration represents the EntitlementTypeEnumeration enumeration
// Allowed values for ENTITLEMENT TYPE Type.
type EntitlementTypeEnumeration string

const (
	// EntitlementTypeEnumerationNone represents none
	EntitlementTypeEnumerationNone EntitlementTypeEnumeration = "none"
	// EntitlementTypeEnumerationPurchase represents purchase
	EntitlementTypeEnumerationPurchase EntitlementTypeEnumeration = "purchase"
	// EntitlementTypeEnumerationPurchaseAtDiscount represents purchaseAtDiscount
	EntitlementTypeEnumerationPurchaseAtDiscount EntitlementTypeEnumeration = "purchaseAtDiscount"
	// EntitlementTypeEnumerationUse represents use
	EntitlementTypeEnumerationUse EntitlementTypeEnumeration = "use"
	// EntitlementTypeEnumerationOther represents other
	EntitlementTypeEnumerationOther EntitlementTypeEnumeration = "other"
)

// SamePeriodEnumeration represents the SamePeriodEnumeration enumeration
// Allowed values for Period ENTITLEMENT CONSTRAINT.
type SamePeriodEnumeration string

const (
	// SamePeriodEnumerationAny represents any
	SamePeriodEnumerationAny SamePeriodEnumeration = "any"
	// SamePeriodEnumerationSamePeriod represents samePeriod
	SamePeriodEnumerationSamePeriod SamePeriodEnumeration = "samePeriod"
	// SamePeriodEnumerationWithinSamePeriod represents withinSamePeriod
	SamePeriodEnumerationWithinSamePeriod SamePeriodEnumeration = "withinSamePeriod"
	// SamePeriodEnumerationSameDay represents sameDay
	SamePeriodEnumerationSameDay SamePeriodEnumeration = "sameDay"
	// SamePeriodEnumerationSameDayOfReturn represents sameDayOfReturn
	SamePeriodEnumerationSameDayOfReturn SamePeriodEnumeration = "sameDayOfReturn"
	// SamePeriodEnumerationSameFareDay represents sameFareDay
	SamePeriodEnumerationSameFareDay SamePeriodEnumeration = "sameFareDay"
	// SamePeriodEnumerationNextDay represents nextDay
	SamePeriodEnumerationNextDay SamePeriodEnumeration = "nextDay"
	// SamePeriodEnumerationDifferent represents different
	SamePeriodEnumerationDifferent SamePeriodEnumeration = "different"
)

// SameStopEnumeration represents the SameStopEnumeration enumeration
// Allowed values for Stop ENTITLEMENT CONSTRAINT.
type SameStopEnumeration string

const (
	// SameStopEnumerationAny represents any
	SameStopEnumerationAny SameStopEnumeration = "any"
	// SameStopEnumerationSameAsOrigin represents sameAsOrigin
	SameStopEnumerationSameAsOrigin SameStopEnumeration = "sameAsOrigin"
	// SameStopEnumerationSameAsDestination represents sameAsDestination
	SameStopEnumerationSameAsDestination SameStopEnumeration = "sameAsDestination"
	// SameStopEnumerationSameAsOriginOrDestination represents sameAsOriginOrDestination
	SameStopEnumerationSameAsOriginOrDestination SameStopEnumeration = "sameAsOriginOrDestination"
	// SameStopEnumerationAnyStopOnRoute represents anyStopOnRoute
	SameStopEnumerationAnyStopOnRoute SameStopEnumeration = "anyStopOnRoute"
	// SameStopEnumerationAnyStopInZone represents anyStopInZone
	SameStopEnumerationAnyStopInZone SameStopEnumeration = "anyStopInZone"
	// SameStopEnumerationDifferent represents different
	SameStopEnumerationDifferent SameStopEnumeration = "different"
)

// SameZoneEnumeration represents the SameZoneEnumeration enumeration
// Allowed values for Zone ENTITLEMENT CONSTRAINT.
type SameZoneEnumeration string

const (
	// SameZoneEnumerationAny represents any
	SameZoneEnumerationAny SameZoneEnumeration = "any"
	// SameZoneEnumerationSame represents same
	SameZoneEnumerationSame SameZoneEnumeration = "same"
	// SameZoneEnumerationSameAsOrigin represents sameAsOrigin
	SameZoneEnumerationSameAsOrigin SameZoneEnumeration = "sameAsOrigin"
	// SameZoneEnumerationSameAsDestination represents sameAsDestination
	SameZoneEnumerationSameAsDestination SameZoneEnumeration = "sameAsDestination"
	// SameZoneEnumerationSameAsOriginOrDestination represents sameAsOriginOrDestination
	SameZoneEnumerationSameAsOriginOrDestination SameZoneEnumeration = "sameAsOriginOrDestination"
	// SameZoneEnumerationWithin represents within
	SameZoneEnumerationWithin SameZoneEnumeration = "within"
	// SameZoneEnumerationContaining represents containing
	SameZoneEnumerationContaining SameZoneEnumeration = "containing"
	// SameZoneEnumerationEquivalent represents equivalent
	SameZoneEnumerationEquivalent SameZoneEnumeration = "equivalent"
	// SameZoneEnumerationDifferent represents different
	SameZoneEnumerationDifferent SameZoneEnumeration = "different"
)

// SameRouteEnumeration represents the SameRouteEnumeration enumeration
// Allowed values for Route ENTITLEMENT CONSTRAINT.
type SameRouteEnumeration string

const (
	// SameRouteEnumerationAny represents any
	SameRouteEnumerationAny SameRouteEnumeration = "any"
	// SameRouteEnumerationSame represents same
	SameRouteEnumerationSame SameRouteEnumeration = "same"
	// SameRouteEnumerationOppositeDirection represents oppositeDirection
	SameRouteEnumerationOppositeDirection SameRouteEnumeration = "oppositeDirection"
	// SameRouteEnumerationDifferent represents different
	SameRouteEnumerationDifferent SameRouteEnumeration = "different"
)

// SameOperatorEnumeration represents the SameOperatorEnumeration enumeration
// Allowed values for Operator ENTITLEMENT CONSTRAINT.
type SameOperatorEnumeration string

const (
	// SameOperatorEnumerationAny represents any
	SameOperatorEnumerationAny SameOperatorEnumeration = "any"
	// SameOperatorEnumerationSame represents same
	SameOperatorEnumerationSame SameOperatorEnumeration = "same"
	// SameOperatorEnumerationParticipating represents participating
	SameOperatorEnumerationParticipating SameOperatorEnumeration = "participating"
	// SameOperatorEnumerationDifferent represents different
	SameOperatorEnumerationDifferent SameOperatorEnumeration = "different"
)

// SameClassOfUseEnumeration represents the SameClassOfUseEnumeration enumeration
// Allowed values for Class of Use ENTITLEMENT CONSTRAINT.
type SameClassOfUseEnumeration string

const (
	// SameClassOfUseEnumerationAny represents any
	SameClassOfUseEnumerationAny SameClassOfUseEnumeration = "any"
	// SameClassOfUseEnumerationSame represents same
	SameClassOfUseEnumerationSame SameClassOfUseEnumeration = "same"
	// SameClassOfUseEnumerationSameOrEquivalent represents sameOrEquivalent
	SameClassOfUseEnumerationSameOrEquivalent SameClassOfUseEnumeration = "sameOrEquivalent"
	// SameClassOfUseEnumerationDifferent represents different
	SameClassOfUseEnumerationDifferent SameClassOfUseEnumeration = "different"
)

// SameJourneyEnumeration represents the SameJourneyEnumeration enumeration
// Allowed values for Journey ENTITLEMENT CONSTRAINT.
type SameJourneyEnumeration string

const (
	// SameJourneyEnumerationAny represents any
	SameJourneyEnumerationAny SameJourneyEnumeration = "any"
	// SameJourneyEnumerationSame represents same
	SameJourneyEnumerationSame SameJourneyEnumeration = "same"
	// SameJourneyEnumerationSimilar represents similar
	SameJourneyEnumerationSimilar SameJourneyEnumeration = "similar"
	// SameJourneyEnumerationDifferent represents different
	SameJourneyEnumerationDifferent SameJourneyEnumeration = "different"
)

// SameTypeOfProductCategoryEnumeration represents the SameTypeOfProductCategoryEnumeration enumeration
// Allowed values for Type of Product category ENTITLEMENT CONSTRAINT.
type SameTypeOfProductCategoryEnumeration string

const (
	// SameTypeOfProductCategoryEnumerationAny represents any
	SameTypeOfProductCategoryEnumerationAny SameTypeOfProductCategoryEnumeration = "any"
	// SameTypeOfProductCategoryEnumerationSame represents same
	SameTypeOfProductCategoryEnumerationSame SameTypeOfProductCategoryEnumeration = "same"
	// SameTypeOfProductCategoryEnumerationSameOrEquivalent represents sameOrEquivalent
	SameTypeOfProductCategoryEnumerationSameOrEquivalent SameTypeOfProductCategoryEnumeration = "sameOrEquivalent"
	// SameTypeOfProductCategoryEnumerationDifferent represents different
	SameTypeOfProductCategoryEnumerationDifferent SameTypeOfProductCategoryEnumeration = "different"
)

// SameTypeOfTravelDocumentEnumeration represents the SameTypeOfTravelDocumentEnumeration enumeration
// Allowed values for Type of Trave lDocument ENTITLEMENT CONSTRAINT.
type SameTypeOfTravelDocumentEnumeration string

const (
	// SameTypeOfTravelDocumentEnumerationAny represents any
	SameTypeOfTravelDocumentEnumerationAny SameTypeOfTravelDocumentEnumeration = "any"
	// SameTypeOfTravelDocumentEnumerationSame represents same
	SameTypeOfTravelDocumentEnumerationSame SameTypeOfTravelDocumentEnumeration = "same"
	// SameTypeOfTravelDocumentEnumerationSameMedia represents sameMedia
	SameTypeOfTravelDocumentEnumerationSameMedia SameTypeOfTravelDocumentEnumeration = "sameMedia"
	// SameTypeOfTravelDocumentEnumerationSameSmartcard represents sameSmartcard
	SameTypeOfTravelDocumentEnumerationSameSmartcard SameTypeOfTravelDocumentEnumeration = "sameSmartcard"
	// SameTypeOfTravelDocumentEnumerationSameMobileApp represents sameMobileApp
	SameTypeOfTravelDocumentEnumerationSameMobileApp SameTypeOfTravelDocumentEnumeration = "sameMobileApp"
	// SameTypeOfTravelDocumentEnumerationDifferent represents different
	SameTypeOfTravelDocumentEnumerationDifferent SameTypeOfTravelDocumentEnumeration = "different"
)

// SameUserEnumeration represents the SameUserEnumeration enumeration
// Allowed values for User ENTITLEMENT CONSTRAINT.
type SameUserEnumeration string

const (
	// SameUserEnumerationSamePerson represents samePerson
	SameUserEnumerationSamePerson SameUserEnumeration = "samePerson"
	// SameUserEnumerationDifferentPerson represents differentPerson
	SameUserEnumerationDifferentPerson SameUserEnumeration = "differentPerson"
	// SameUserEnumerationAnyOne represents anyOne
	SameUserEnumerationAnyOne SameUserEnumeration = "anyOne"
	// SameUserEnumerationSpecific represents specific
	SameUserEnumerationSpecific SameUserEnumeration = "specific"
)

// EntitlementRequiredRefsRelStructure represents the entitlementRequiredRefs_RelStructure element
// Type for references to a ENTITLEMENT REQUIRED PARAMETER.
type EntitlementRequiredRefsRelStructure struct {
	OneToManyRelationshipStructure
	EntitlementRequiredRef []EntitlementRequiredRef `xml:"EntitlementRequiredRef" json:"EntitlementRequiredRef"`
}

// EntitlementRequiredRefStructure represents the EntitlementRequiredRefStructure element
// Type for Reference to a ENTITLEMENT REQUIRED PARAMETER.
type EntitlementRequiredRefStructure struct {
	UsageParameterRefStructure
}

// EntitlementGivenRefsRelStructure represents the entitlementGivenRefs_RelStructure element
// Type for references to a ENTITLEMENT GIVEN PARAMETER.
type EntitlementGivenRefsRelStructure struct {
	OneToManyRelationshipStructure
	EntitlementGivenRef []EntitlementGivenRef `xml:"EntitlementGivenRef" json:"EntitlementGivenRef"`
}

// EntitlementGivenRefStructure represents the EntitlementGivenRefStructure element
// Type for Reference to a ENTITLEMENT GIVEN PARAMETER.
type EntitlementGivenRefStructure struct {
	UsageParameterRefStructure
}

// EntitlementRequiredRef represents the EntitlementRequiredRef element
// Reference to a ENTITLEMENT REQUIRED PARAMETER.
type EntitlementRequiredRef struct {
	EntitlementRequiredRefStructure
}

// EntitlementGivenRef represents the EntitlementGivenRef element
// Reference to a ENTITLEMENT GIVEN PARAMETER.
type EntitlementGivenRef struct {
	EntitlementGivenRefStructure
}

// LuggageAllowanceTypeEnumeration represents the LuggageAllowanceTypeEnumeration enumeration
// Allowed values for LUGGAGE ALLOWANCE TYPE.
type LuggageAllowanceTypeEnumeration string

const (
	// LuggageAllowanceTypeEnumerationNone represents none
	LuggageAllowanceTypeEnumerationNone LuggageAllowanceTypeEnumeration = "none"
	// LuggageAllowanceTypeEnumerationSingleBag represents singleBag
	LuggageAllowanceTypeEnumerationSingleBag LuggageAllowanceTypeEnumeration = "singleBag"
	// LuggageAllowanceTypeEnumerationLimited represents limited
	LuggageAllowanceTypeEnumerationLimited LuggageAllowanceTypeEnumeration = "limited"
	// LuggageAllowanceTypeEnumerationUnlimited represents unlimited
	LuggageAllowanceTypeEnumerationUnlimited LuggageAllowanceTypeEnumeration = "unlimited"
)

// BaggageTypeEnumeration represents the BaggageTypeEnumeration enumeration
// Allowed values for BAGGAGE TYPE.
type BaggageTypeEnumeration string

const (
	// BaggageTypeEnumerationHandbag represents handbag
	BaggageTypeEnumerationHandbag BaggageTypeEnumeration = "handbag"
	// BaggageTypeEnumerationHandLuggage represents handLuggage
	BaggageTypeEnumerationHandLuggage BaggageTypeEnumeration = "handLuggage"
	// BaggageTypeEnumerationSmallSuitcase represents smallSuitcase
	BaggageTypeEnumerationSmallSuitcase BaggageTypeEnumeration = "smallSuitcase"
	// BaggageTypeEnumerationSuitcase represents suitcase
	BaggageTypeEnumerationSuitcase BaggageTypeEnumeration = "suitcase"
	// BaggageTypeEnumerationTrunk represents trunk
	BaggageTypeEnumerationTrunk BaggageTypeEnumeration = "trunk"
	// BaggageTypeEnumerationOversizeItem represents oversizeItem
	BaggageTypeEnumerationOversizeItem BaggageTypeEnumeration = "oversizeItem"
	// BaggageTypeEnumerationBicycle represents bicycle
	BaggageTypeEnumerationBicycle BaggageTypeEnumeration = "bicycle"
	// BaggageTypeEnumerationMotorcycle represents motorcycle
	BaggageTypeEnumerationMotorcycle BaggageTypeEnumeration = "motorcycle"
	// BaggageTypeEnumerationSportingEquipment represents sportingEquipment
	BaggageTypeEnumerationSportingEquipment BaggageTypeEnumeration = "sportingEquipment"
	// BaggageTypeEnumerationSkis represents skis
	BaggageTypeEnumerationSkis BaggageTypeEnumeration = "skis"
	// BaggageTypeEnumerationMusicalInstrument represents musicalInstrument
	BaggageTypeEnumerationMusicalInstrument BaggageTypeEnumeration = "musicalInstrument"
	// BaggageTypeEnumerationPushChair represents pushChair
	BaggageTypeEnumerationPushChair BaggageTypeEnumeration = "pushChair"
	// BaggageTypeEnumerationWheelchair represents wheelchair
	BaggageTypeEnumerationWheelchair BaggageTypeEnumeration = "wheelchair"
	// BaggageTypeEnumerationMotorizedWheelchair represents motorizedWheelchair
	BaggageTypeEnumerationMotorizedWheelchair BaggageTypeEnumeration = "motorizedWheelchair"
	// BaggageTypeEnumerationLargeMotorizedWheelchair represents largeMotorizedWheelchair
	BaggageTypeEnumerationLargeMotorizedWheelchair BaggageTypeEnumeration = "largeMotorizedWheelchair"
	// BaggageTypeEnumerationSmallAnimal represents smallAnimal
	BaggageTypeEnumerationSmallAnimal BaggageTypeEnumeration = "smallAnimal"
	// BaggageTypeEnumerationAnimal represents animal
	BaggageTypeEnumerationAnimal BaggageTypeEnumeration = "animal"
	// BaggageTypeEnumerationGame represents game
	BaggageTypeEnumerationGame BaggageTypeEnumeration = "game"
	// BaggageTypeEnumerationOther represents other
	BaggageTypeEnumerationOther BaggageTypeEnumeration = "other"
)

// BaggageUseTypeEnumeration represents the BaggageUseTypeEnumeration enumeration
// Allowed values for BAGGAGE USE TYPE.
type BaggageUseTypeEnumeration string

const (
	// BaggageUseTypeEnumerationCarryOn represents carryOn
	BaggageUseTypeEnumerationCarryOn BaggageUseTypeEnumeration = "carryOn"
	// BaggageUseTypeEnumerationCheckIn represents checkIn
	BaggageUseTypeEnumerationCheckIn BaggageUseTypeEnumeration = "checkIn"
	// BaggageUseTypeEnumerationOversizeCheckIn represents oversizeCheckIn
	BaggageUseTypeEnumerationOversizeCheckIn BaggageUseTypeEnumeration = "oversizeCheckIn"
	// BaggageUseTypeEnumerationBaggageCompartment represents baggageCompartment
	BaggageUseTypeEnumerationBaggageCompartment BaggageUseTypeEnumeration = "baggageCompartment"
)

// LuggageChargingBasisEnumeration represents the LuggageChargingBasisEnumeration enumeration
// Allowed values for LUGGAGE CHARGING BASIS
type LuggageChargingBasisEnumeration string

const (
	// LuggageChargingBasisEnumerationFree represents free
	LuggageChargingBasisEnumerationFree LuggageChargingBasisEnumeration = "free"
	// LuggageChargingBasisEnumerationChargedByItem represents chargedByItem
	LuggageChargingBasisEnumerationChargedByItem LuggageChargingBasisEnumeration = "chargedByItem"
	// LuggageChargingBasisEnumerationChargedByWeight represents chargedByWeight
	LuggageChargingBasisEnumerationChargedByWeight LuggageChargingBasisEnumeration = "chargedByWeight"
	// LuggageChargingBasisEnumerationOther represents other
	LuggageChargingBasisEnumerationOther LuggageChargingBasisEnumeration = "other"
)

// LuggageAllowanceRefStructure represents the LuggageAllowanceRefStructure element
// Type for Reference to a LUGGAGE ALLOWANCE PARAMETER.
type LuggageAllowanceRefStructure struct {
	UsageParameterRefStructure
}

// LuggageAllowanceRef represents the LuggageAllowanceRef element
// Reference to a LUGGAGE ALLOWANCE PARAMETER.
type LuggageAllowanceRef struct {
	LuggageAllowanceRefStructure
}

// RoundTripTypeEnumeration represents the RoundTripTypeEnumeration enumeration
// Allowed values for ROUND TRIP Type.
type RoundTripTypeEnumeration string

const (
	// RoundTripTypeEnumerationSingle represents single
	// Single trip
	RoundTripTypeEnumerationSingle RoundTripTypeEnumeration = "single"
	// RoundTripTypeEnumerationReturn represents return
	// Return trip between the same origin and destination
	RoundTripTypeEnumerationReturn RoundTripTypeEnumeration = "return"
	// RoundTripTypeEnumerationReturnOut represents returnOut
	// Outward part of a return trip.
	RoundTripTypeEnumerationReturnOut RoundTripTypeEnumeration = "returnOut"
	// RoundTripTypeEnumerationReturnBack represents returnBack
	// Return part of a return trip.
	RoundTripTypeEnumerationReturnBack RoundTripTypeEnumeration = "returnBack"
	// RoundTripTypeEnumerationReturnOnly represents returnOnly
	RoundTripTypeEnumerationReturnOnly RoundTripTypeEnumeration = "returnOnly"
	// RoundTripTypeEnumerationMultiple represents multiple
	// Multtrip carnet.
	RoundTripTypeEnumerationMultiple RoundTripTypeEnumeration = "multiple"
)

// StepLimitUnitEnumeration represents the StepLimitUnitEnumeration enumeration
// Allowed values for STEP LIMIT UNIT Type.
type StepLimitUnitEnumeration string

const (
	// StepLimitUnitEnumerationStops represents stops
	StepLimitUnitEnumerationStops StepLimitUnitEnumeration = "stops"
	// StepLimitUnitEnumerationStopsIncludingPassThroughStops represents stopsIncludingPassThroughStops
	StepLimitUnitEnumerationStopsIncludingPassThroughStops StepLimitUnitEnumeration = "stopsIncludingPassThroughStops"
	// StepLimitUnitEnumerationSections represents sections
	StepLimitUnitEnumerationSections StepLimitUnitEnumeration = "sections"
	// StepLimitUnitEnumerationZones represents zones
	StepLimitUnitEnumerationZones StepLimitUnitEnumeration = "zones"
	// StepLimitUnitEnumerationNetworks represents networks
	StepLimitUnitEnumerationNetworks StepLimitUnitEnumeration = "networks"
	// StepLimitUnitEnumerationOperators represents operators
	StepLimitUnitEnumerationOperators StepLimitUnitEnumeration = "operators"
	// StepLimitUnitEnumerationCountries represents countries
	StepLimitUnitEnumerationCountries StepLimitUnitEnumeration = "countries"
)

// UsageValidityTypeEnumeration represents the UsageValidityTypeEnumeration enumeration
// Allowed values for Usage Validity Period Type.
type UsageValidityTypeEnumeration string

const (
	// UsageValidityTypeEnumerationSingleRide represents singleRide
	UsageValidityTypeEnumerationSingleRide UsageValidityTypeEnumeration = "singleRide"
	// UsageValidityTypeEnumerationSingleTrip represents singleTrip
	UsageValidityTypeEnumerationSingleTrip UsageValidityTypeEnumeration = "singleTrip"
	// UsageValidityTypeEnumerationReturnTrip represents returnTrip
	UsageValidityTypeEnumerationReturnTrip UsageValidityTypeEnumeration = "returnTrip"
	// UsageValidityTypeEnumerationCarnet represents carnet
	UsageValidityTypeEnumerationCarnet UsageValidityTypeEnumeration = "carnet"
	// UsageValidityTypeEnumerationDayPass represents dayPass
	UsageValidityTypeEnumerationDayPass UsageValidityTypeEnumeration = "dayPass"
	// UsageValidityTypeEnumerationWeeklyPass represents weeklyPass
	UsageValidityTypeEnumerationWeeklyPass UsageValidityTypeEnumeration = "weeklyPass"
	// UsageValidityTypeEnumerationWeekendPass represents weekendPass
	UsageValidityTypeEnumerationWeekendPass UsageValidityTypeEnumeration = "weekendPass"
	// UsageValidityTypeEnumerationMonthlyPass represents monthlyPass
	UsageValidityTypeEnumerationMonthlyPass UsageValidityTypeEnumeration = "monthlyPass"
	// UsageValidityTypeEnumerationAnnualPass represents annualPass
	UsageValidityTypeEnumerationAnnualPass UsageValidityTypeEnumeration = "annualPass"
	// UsageValidityTypeEnumerationSeasonTicket represents seasonTicket
	UsageValidityTypeEnumerationSeasonTicket UsageValidityTypeEnumeration = "seasonTicket"
	// UsageValidityTypeEnumerationProfileMembership represents profileMembership
	UsageValidityTypeEnumerationProfileMembership UsageValidityTypeEnumeration = "profileMembership"
	// UsageValidityTypeEnumerationSubscription represents subscription
	UsageValidityTypeEnumerationSubscription UsageValidityTypeEnumeration = "subscription"
	// UsageValidityTypeEnumerationOpenEnded represents openEnded
	UsageValidityTypeEnumerationOpenEnded UsageValidityTypeEnumeration = "openEnded"
	// UsageValidityTypeEnumerationCap represents cap
	UsageValidityTypeEnumerationCap UsageValidityTypeEnumeration = "cap"
	// UsageValidityTypeEnumerationOther represents other
	UsageValidityTypeEnumerationOther UsageValidityTypeEnumeration = "other"
)

// BlackoutStartEnumeration represents the BlackoutStartEnumeration enumeration
// Allowed values for BlackoutStart event.
type BlackoutStartEnumeration string

const (
	// BlackoutStartEnumerationMayTravelAnytime represents mayTravelAnytime
	BlackoutStartEnumerationMayTravelAnytime BlackoutStartEnumeration = "mayTravelAnytime"
	// BlackoutStartEnumerationNoTravelWithinPeriod represents noTravelWithinPeriod
	BlackoutStartEnumerationNoTravelWithinPeriod BlackoutStartEnumeration = "noTravelWithinPeriod"
	// BlackoutStartEnumerationNoTravelWithinTimeband represents noTravelWithinTimeband
	BlackoutStartEnumerationNoTravelWithinTimeband BlackoutStartEnumeration = "noTravelWithinTimeband"
	// BlackoutStartEnumerationMayCompleteIfStartedBefore represents mayCompleteIfStartedBefore
	BlackoutStartEnumerationMayCompleteIfStartedBefore BlackoutStartEnumeration = "mayCompleteIfStartedBefore"
)

// UsageTriggerEnumeration represents the UsageTriggerEnumeration enumeration
// Allowed values for Usage Trigger.
type UsageTriggerEnumeration string

const (
	// UsageTriggerEnumerationEnrolment represents enrolment
	// Validity period starts when user registers (e.g. creates a customer account).
	UsageTriggerEnumerationEnrolment UsageTriggerEnumeration = "enrolment"
	// UsageTriggerEnumerationReservation represents reservation
	// Validity period starts when user makes a reservation.
	UsageTriggerEnumerationReservation UsageTriggerEnumeration = "reservation"
	// UsageTriggerEnumerationPurchase represents purchase
	// Validity period starts when user makes a purchase.
	UsageTriggerEnumerationPurchase UsageTriggerEnumeration = "purchase"
	// UsageTriggerEnumerationFulfilment represents fulfilment
	// Validity period starts when user collects their travel documents.
	UsageTriggerEnumerationFulfilment UsageTriggerEnumeration = "fulfilment"
	// UsageTriggerEnumerationActivation represents activation
	// Validity period starts when user activates a product.
	UsageTriggerEnumerationActivation UsageTriggerEnumeration = "activation"
	// UsageTriggerEnumerationSpecifiedStartDate represents specifiedStartDate
	// Validity period starts on date specified on produc..
	UsageTriggerEnumerationSpecifiedStartDate UsageTriggerEnumeration = "specifiedStartDate"
	// UsageTriggerEnumerationStartOutboundRide represents startOutboundRide
	// Validity period starts on commencement of outbound trip.
	UsageTriggerEnumerationStartOutboundRide UsageTriggerEnumeration = "startOutboundRide"
	// UsageTriggerEnumerationEndOutboundRide represents endOutboundRide
	// Validity period starts on completion of outbound trip of a return or multi-part trip.
	UsageTriggerEnumerationEndOutboundRide UsageTriggerEnumeration = "endOutboundRide"
	// UsageTriggerEnumerationStartReturnRide represents startReturnRide
	// Validity period starts on commencement of return trip.
	UsageTriggerEnumerationStartReturnRide UsageTriggerEnumeration = "startReturnRide"
	// UsageTriggerEnumerationStartOfPeriod represents startOfPeriod
	// Validity period starts at beginning of interval specified for product   (e.g.  every month  for a monthly pass that renews automatically).
	UsageTriggerEnumerationStartOfPeriod UsageTriggerEnumeration = "startOfPeriod"
	// UsageTriggerEnumerationDayOffsetBeforeCalendarPeriod represents dayOffsetBeforeCalendarPeriod
	// Validity period starts a specifed number of days before  beginning of specified start date .
	UsageTriggerEnumerationDayOffsetBeforeCalendarPeriod UsageTriggerEnumeration = "dayOffsetBeforeCalendarPeriod"
)

// ActivationMeansEnumeration represents the ActivationMeansEnumeration enumeration
// Allowed values for Activation Means
type ActivationMeansEnumeration string

const (
	// ActivationMeansEnumerationNoneRequired represents noneRequired
	ActivationMeansEnumerationNoneRequired ActivationMeansEnumeration = "noneRequired"
	// ActivationMeansEnumerationCheckIn represents checkIn
	ActivationMeansEnumerationCheckIn ActivationMeansEnumeration = "checkIn"
	// ActivationMeansEnumerationUseOfValidator represents useOfValidator
	ActivationMeansEnumerationUseOfValidator ActivationMeansEnumeration = "useOfValidator"
	// ActivationMeansEnumerationUseOfMobileDevice represents useOfMobileDevice
	ActivationMeansEnumerationUseOfMobileDevice ActivationMeansEnumeration = "useOfMobileDevice"
	// ActivationMeansEnumerationAutomaticByTime represents automaticByTime
	ActivationMeansEnumerationAutomaticByTime ActivationMeansEnumeration = "automaticByTime"
	// ActivationMeansEnumerationAutomaticByProximity represents automaticByProximity
	ActivationMeansEnumerationAutomaticByProximity ActivationMeansEnumeration = "automaticByProximity"
	// ActivationMeansEnumerationAccessCode represents accessCode
	ActivationMeansEnumerationAccessCode ActivationMeansEnumeration = "accessCode"
	// ActivationMeansEnumerationOther represents other
	ActivationMeansEnumerationOther ActivationMeansEnumeration = "other"
)

// UsageEndEnumeration represents the UsageEndEnumeration enumeration
// Allowed values for Usage End.
type UsageEndEnumeration string

const (
	// UsageEndEnumerationStandardDuration represents standardDuration
	UsageEndEnumerationStandardDuration UsageEndEnumeration = "standardDuration"
	// UsageEndEnumerationEndOfCalendarPeriod represents endOfCalendarPeriod
	UsageEndEnumerationEndOfCalendarPeriod UsageEndEnumeration = "endOfCalendarPeriod"
	// UsageEndEnumerationEndOfRide represents endOfRide
	UsageEndEnumerationEndOfRide UsageEndEnumeration = "endOfRide"
	// UsageEndEnumerationEndOfTrip represents endOfTrip
	UsageEndEnumerationEndOfTrip UsageEndEnumeration = "endOfTrip"
	// UsageEndEnumerationEndOfFareDay represents endOfFareDay
	UsageEndEnumerationEndOfFareDay UsageEndEnumeration = "endOfFareDay"
	// UsageEndEnumerationEndOfFarePeriod represents endOfFarePeriod
	UsageEndEnumerationEndOfFarePeriod UsageEndEnumeration = "endOfFarePeriod"
	// UsageEndEnumerationProductExpiry represents productExpiry
	UsageEndEnumerationProductExpiry UsageEndEnumeration = "productExpiry"
	// UsageEndEnumerationProfileExpiry represents profileExpiry
	UsageEndEnumerationProfileExpiry UsageEndEnumeration = "profileExpiry"
	// UsageEndEnumerationDeregistration represents deregistration
	UsageEndEnumerationDeregistration UsageEndEnumeration = "deregistration"
	// UsageEndEnumerationOther represents other
	UsageEndEnumerationOther UsageEndEnumeration = "other"
)

// UsageStartConstraintTypeEnumeration represents the UsageStartConstraintTypeEnumeration enumeration
// Allowed values for Usage Validity Period Start constraint.
type UsageStartConstraintTypeEnumeration string

const (
	// UsageStartConstraintTypeEnumerationVariable represents variable
	// Validity start date can be chosen by user.
	UsageStartConstraintTypeEnumerationVariable UsageStartConstraintTypeEnumeration = "variable"
	// UsageStartConstraintTypeEnumerationFixed represents fixed
	// Validity start date is constrained. For a pass to certain days of week, month or year. For a trip to a specific train.
	UsageStartConstraintTypeEnumerationFixed UsageStartConstraintTypeEnumeration = "fixed"
	// UsageStartConstraintTypeEnumerationFixedWindow represents fixedWindow
	// Validity start date for a trip  is constrained relative to  start of booked service, eg may catch previous train as well.
	UsageStartConstraintTypeEnumerationFixedWindow UsageStartConstraintTypeEnumeration = "fixedWindow"
)

// SuspensionPolicyEnumeration represents the SuspensionPolicyEnumeration enumeration
// Allowed values for Suspension Policy.
type SuspensionPolicyEnumeration string

const (
	// SuspensionPolicyEnumerationNone represents none
	// Suspension not allowed.
	SuspensionPolicyEnumerationNone SuspensionPolicyEnumeration = "none"
	// SuspensionPolicyEnumerationForCertifiedIllness represents forCertifiedIllness
	// Suspension allowed for illness.
	SuspensionPolicyEnumerationForCertifiedIllness SuspensionPolicyEnumeration = "forCertifiedIllness"
	// SuspensionPolicyEnumerationForParentalLeave represents forParentalLeave
	// Suspension allowed  for parental leave.
	SuspensionPolicyEnumerationForParentalLeave SuspensionPolicyEnumeration = "forParentalLeave"
	// SuspensionPolicyEnumerationForHoliday represents forHoliday
	// Suspension allowed  for holiday.
	SuspensionPolicyEnumerationForHoliday SuspensionPolicyEnumeration = "forHoliday"
	// SuspensionPolicyEnumerationForAnyReason represents forAnyReason
	// Suspension allowed  for any reason.
	SuspensionPolicyEnumerationForAnyReason SuspensionPolicyEnumeration = "forAnyReason"
)

// FrequencyOfUseTypeEnumeration represents the FrequencyOfUseTypeEnumeration enumeration
// Allowed values for FREQUENCY OF USE Type.
type FrequencyOfUseTypeEnumeration string

const (
	// FrequencyOfUseTypeEnumerationNone represents none
	// Product may not be used within allowed period.
	FrequencyOfUseTypeEnumerationNone FrequencyOfUseTypeEnumeration = "none"
	// FrequencyOfUseTypeEnumerationUnlimited represents unlimited
	// Unlimted use may be made of the product within allowed period.
	FrequencyOfUseTypeEnumerationUnlimited FrequencyOfUseTypeEnumeration = "unlimited"
	// FrequencyOfUseTypeEnumerationLimited represents limited
	// Product may be used up to  a limited amount within allowed period.
	FrequencyOfUseTypeEnumerationLimited FrequencyOfUseTypeEnumeration = "limited"
	// FrequencyOfUseTypeEnumerationTwiceAday represents twiceADay
	// Product may be used twice a day within allowed period.
	FrequencyOfUseTypeEnumerationTwiceAday FrequencyOfUseTypeEnumeration = "twiceADay"
	// FrequencyOfUseTypeEnumerationSingle represents single
	// Product may  be used once within allowed period.
	FrequencyOfUseTypeEnumerationSingle FrequencyOfUseTypeEnumeration = "single"
)

// RegisterBreakOfJourneyEnumeration represents the RegisterBreakOfJourneyEnumeration enumeration
// Allowed values for Register Break of Journey.
type RegisterBreakOfJourneyEnumeration string

const (
	// RegisterBreakOfJourneyEnumerationNone represents none
	// No action needed.
	RegisterBreakOfJourneyEnumerationNone RegisterBreakOfJourneyEnumeration = "none"
	// RegisterBreakOfJourneyEnumerationMarkByStaff represents markByStaff
	// JourneyBreak must be marked by operator staff.
	RegisterBreakOfJourneyEnumerationMarkByStaff RegisterBreakOfJourneyEnumeration = "markByStaff"
	// RegisterBreakOfJourneyEnumerationMarkByValidator represents markByValidator
	// Journey Break must be marked by validator.
	RegisterBreakOfJourneyEnumerationMarkByValidator RegisterBreakOfJourneyEnumeration = "markByValidator"
	// RegisterBreakOfJourneyEnumerationMarkByMobileApp represents markByMobileApp
	// Journey Break must be marked using mobile application.
	RegisterBreakOfJourneyEnumerationMarkByMobileApp RegisterBreakOfJourneyEnumeration = "markByMobileApp"
	// RegisterBreakOfJourneyEnumerationOther represents other
	// Journey Break must be marked by othermeans.
	RegisterBreakOfJourneyEnumerationOther RegisterBreakOfJourneyEnumeration = "other"
)

// MinimumStayTypeEnumeration represents the MinimumStayTypeEnumeration enumeration
// Allowed values for MINIMUM STAY Type.
type MinimumStayTypeEnumeration string

const (
	// MinimumStayTypeEnumerationNone represents none
	MinimumStayTypeEnumerationNone MinimumStayTypeEnumeration = "none"
	// MinimumStayTypeEnumerationSpecifiedNightsAway represents specifiedNightsAway
	MinimumStayTypeEnumerationSpecifiedNightsAway MinimumStayTypeEnumeration = "specifiedNightsAway"
	// MinimumStayTypeEnumerationCountNightsAway represents countNightsAway
	MinimumStayTypeEnumerationCountNightsAway MinimumStayTypeEnumeration = "countNightsAway"
	// MinimumStayTypeEnumerationBoth represents both
	MinimumStayTypeEnumerationBoth MinimumStayTypeEnumeration = "both"
	// MinimumStayTypeEnumerationEither represents either
	MinimumStayTypeEnumerationEither MinimumStayTypeEnumeration = "either"
)

// RoundTripRefStructure represents the RoundTripRefStructure element
// Type for Reference to a ROUND TRIP PARAMETER.
type RoundTripRefStructure struct {
	UsageParameterRefStructure
}

// RoutingRefStructure represents the RoutingRefStructure element
// Type for Reference to a ROUTING PARAMETER.
type RoutingRefStructure struct {
	UsageParameterRefStructure
}

// StepLimitRefStructure represents the StepLimitRefStructure element
// Type for Reference to a STEP LIMIT PARAMETER.
type StepLimitRefStructure struct {
	UsageParameterRefStructure
}

// UsageValidityPeriodRefStructure represents the UsageValidityPeriodRefStructure element
// Type for Reference to a USAGE VALIDITY PERIOD.
type UsageValidityPeriodRefStructure struct {
	UsageParameterRefStructure
}

// SuspendingRefStructure represents the SuspendingRefStructure element
// Type for Reference to a SUSPENDING.
type SuspendingRefStructure struct {
	UsageParameterRefStructure
}

// FrequencyOfUseRefStructure represents the FrequencyOfUseRefStructure element
// Type for Reference to a FREQUENCY OF USE.
type FrequencyOfUseRefStructure struct {
	UsageParameterRefStructure
}

// InterchangingRefStructure represents the InterchangingRefStructure element
// Type for Reference to a INTERCHANGING.
type InterchangingRefStructure struct {
	UsageParameterRefStructure
}

// MinimumStayRefStructure represents the MinimumStayRefStructure element
// Type for Reference to a MINIMUM STAY PARAMETER.
type MinimumStayRefStructure struct {
	UsageParameterRefStructure
}

// RoundTripRef represents the RoundTripRef element
// Reference to a ROUND TRIP PARAMETER.
type RoundTripRef struct {
	RoundTripRefStructure
}

// RoutingRef represents the RoutingRef element
// Reference to a ROUTING PARAMETER.
type RoutingRef struct {
	RoutingRefStructure
}

// StepLimitRef represents the StepLimitRef element
// Reference to a STEP LIMIT PARAMETER.
type StepLimitRef struct {
	StepLimitRefStructure
}

// UsageValidityPeriodRef represents the UsageValidityPeriodRef element
// Reference to a USAGE VALIDITY PERIOD.
type UsageValidityPeriodRef struct {
	UsageValidityPeriodRefStructure
}

// SuspendingRef represents the SuspendingRef element
// Reference to a SUSPENDING.
type SuspendingRef struct {
	SuspendingRefStructure
}

// FrequencyOfUseRef represents the FrequencyOfUseRef element
// Reference to a FREQUENCY OF USE.
type FrequencyOfUseRef struct {
	FrequencyOfUseRefStructure
}

// InterchangingRef represents the InterchangingRef element
// Reference to a INTERCHANGING.
type InterchangingRef struct {
	InterchangingRefStructure
}

// MinimumStayRef represents the MinimumStayRef element
// Reference to a MINIMUM STAY PARAMETER.
type MinimumStayRef struct {
	MinimumStayRefStructure
}

// FareTablesInFrameRelStructure represents the fareTablesInFrame_RelStructure element
// Type for containment in frame of TARIFF.
type FareTablesInFrameRelStructure struct {
	FrameContainmentStructure
	StandardFareTable []StandardFareTable `xml:"StandardFareTable,omitempty" json:"StandardFareTable,omitempty"`
	FareTableInContext []FareTableInContext `xml:"FareTableInContext,omitempty" json:"FareTableInContext,omitempty"`
	FareTable []FareTable `xml:"FareTable,omitempty" json:"FareTable,omitempty"`
}

// FareTableVersionStructure represents the FareTable_VersionStructure element
// Type for a FARE TABLE.
type FareTableVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Start date for PRICE GROUP.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// End date for PRICE GROUP.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	TypeOfFareTableRef *TypeOfFareTableRef `xml:"TypeOfFareTableRef,omitempty" json:"TypeOfFareTableRef,omitempty"`
	// Combination of Elements for which this table provides PRICEs.
	PricesFor *PriceableObjectRefsRelStructure `xml:"pricesFor,omitempty" json:"pricesFor,omitempty"`
	// Elements that use FARE TABLE that are not PRICEABLE OBJECTs.
	UsedIn *UsedInRefsRelStructure `xml:"usedIn,omitempty" json:"usedIn,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// Usage parameters common to all cells in table.
	Limitations *UsageParameterRefsRelStructure `xml:"limitations,omitempty" json:"limitations,omitempty"`
	// Common factors shared with all cells.
	Specifics *FareTableSpecificsStructure `xml:"specifics,omitempty" json:"specifics,omitempty"`
	// Column headings to use when presenting table.
	Columns *FareTableColumnsRelStructure `xml:"columns,omitempty" json:"columns,omitempty"`
	// Row headings to use when presenting table.
	Rows *FareTableRowsRelStructure `xml:"rows,omitempty" json:"rows,omitempty"`
	// Sub tables contained in table.
	Includes *FareTablesRelStructure `xml:"includes,omitempty" json:"includes,omitempty"`
	// Prices must not be released until this date.
	EmbargoUntil *time.Time `xml:"EmbargoUntil,omitempty" json:"EmbargoUntil,omitempty"`
	// Cells in the table.
	Prices *FarePricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
	// Cells in the table.
	Cells *CellsRelStructure `xml:"cells,omitempty" json:"cells,omitempty"`
	// NOTICEs that apply to whole FARE TABLE
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// FareTableSpecificsStructure represents the FareTableSpecificsStructure element
// Specific references for FARE TABLE
type FareTableSpecificsStructure struct {
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef *GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	VehiclePoolingMeetingPlaceRef *VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef *VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	TypeOfParkingRef *TypeOfParkingRef `xml:"TypeOfParkingRef,omitempty" json:"TypeOfParkingRef,omitempty"`
	TariffZoneRef *TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	FareSectionRef *FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	// For fares for DISTANCE MATRIXE LEMENTs, DIRECTION in which price applies.
	DirectionType *RelativeDirectionEnumeration `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	// Whether fare is for s a direct i.e. no changes required point to point  fare or indirect routing.
	RoutingType *RoutingTypeEnumeration `xml:"RoutingType,omitempty" json:"RoutingType,omitempty"`
	FareClass *FareClass `xml:"FareClass,omitempty" json:"FareClass,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	ServiceFacilitySetRef *ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	SiteFacilitySetRef *SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	FacilitySetRef *FacilitySetRef `xml:"FacilitySetRef,omitempty" json:"FacilitySetRef,omitempty"`
	TypeOfProductCategoryRef *TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfServiceRef *TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	TrainNumberRef *TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	GroupOfServicesRef *GroupOfServicesRef `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	GroupOfSingleJourneysRef *GroupOfSingleJourneysRef `xml:"GroupOfSingleJourneysRef,omitempty" json:"GroupOfSingleJourneysRef,omitempty"`
	RetailDeviceRef *RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	ActivatedEquipmentRef *ActivatedEquipmentRef `xml:"ActivatedEquipmentRef,omitempty" json:"ActivatedEquipmentRef,omitempty"`
	BatteryEquipmentRef *BatteryEquipmentRef `xml:"BatteryEquipmentRef,omitempty" json:"BatteryEquipmentRef,omitempty"`
	RefuellingEquipmentRef *RefuellingEquipmentRef `xml:"RefuellingEquipmentRef,omitempty" json:"RefuellingEquipmentRef,omitempty"`
	VehicleChargingEquipmentRef *VehicleChargingEquipmentRef `xml:"VehicleChargingEquipmentRef,omitempty" json:"VehicleChargingEquipmentRef,omitempty"`
	AssistanceBookingServiceRef *AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef *CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef *RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef *MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef *HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef *CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef *MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef *LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef *LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef *LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef *ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef *CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef *AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef *TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef *LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	VehicleReleaseEquipmentRef *VehicleReleaseEquipmentRef `xml:"VehicleReleaseEquipmentRef,omitempty" json:"VehicleReleaseEquipmentRef,omitempty"`
	TicketValidatorEquipmentRef *TicketValidatorEquipmentRef `xml:"TicketValidatorEquipmentRef,omitempty" json:"TicketValidatorEquipmentRef,omitempty"`
	TicketingEquipmentRef *TicketingEquipmentRef `xml:"TicketingEquipmentRef,omitempty" json:"TicketingEquipmentRef,omitempty"`
	PassengerInformationEquipmentRef *PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef *CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef *TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef *SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef *ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef *LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef *WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef *WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef *SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef *PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef *RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef *StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef *QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef *TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef *EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef *LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef *LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef *CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef *RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef *EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef *HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef *GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef *PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef *SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef *RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef *PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef *HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef *PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef *SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef *WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef *AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef *VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef *PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	EquipmentRef *EquipmentRef `xml:"EquipmentRef,omitempty" json:"EquipmentRef,omitempty"`
	TypeOfFareProductRef *TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	DistributionChannelRef *DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	GroupOfDistributionChannelsRef *GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	// Preferred payment Method .
	PaymentMethod *PaymentMethodEnumeration `xml:"PaymentMethod,omitempty" json:"PaymentMethod,omitempty"`
	TypeOfPaymentMethodRef *TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	TypeOfTravelDocumentRef *TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
}

// UsedInRefsRelStructure represents the usedInRefs_RelStructure element
// Type for use  of  fare table.
type UsedInRefsRelStructure struct {
	OneToManyRelationshipStructure
	ParkingTariffRef []ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef []TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	GroupOfDistanceMatrixElementsRef []GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfSalesOfferPackagesRef []GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
}

// StandardFareTableVersionStructure represents the StandardFareTable_VersionStructure element
// Type for a STANDARD FARE TABLE PRICE GROUP.
type StandardFareTableVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Start date for PRICE GROUP.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// End date for PRICE GROUP.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	TypeOfFareTableRef *TypeOfFareTableRef `xml:"TypeOfFareTableRef,omitempty" json:"TypeOfFareTableRef,omitempty"`
	// Combination of Elements for which this table provides PRICEs.
	PricesFor *PriceableObjectRefsRelStructure `xml:"pricesFor,omitempty" json:"pricesFor,omitempty"`
	// Elements that use FARE TABLE that are not PRICEABLE OBJECTs.
	UsedIn *UsedInRefsRelStructure `xml:"usedIn,omitempty" json:"usedIn,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// Price for a first class single  fare.
	FirstClassSingle *float64 `xml:"FirstClassSingle,omitempty" json:"FirstClassSingle,omitempty"`
	// Price for a second class  single fare.
	SecondClassSingle float64 `xml:"SecondClassSingle" json:"SecondClassSingle"`
	// Price for a first class return fare.
	FirstClassReturn *float64 `xml:"FirstClassReturn,omitempty" json:"FirstClassReturn,omitempty"`
	// Price for a second class return fare.
	SecondClassReturn *float64 `xml:"SecondClassReturn,omitempty" json:"SecondClassReturn,omitempty"`
}

// CellsRelStructure represents the cells_RelStructure element
// Type for a list of FARE CELL.s.
type CellsRelStructure struct {
	StrictContainmentAggregationStructure
	Cell []Cell `xml:"Cell,omitempty" json:"Cell,omitempty"`
	// An individual combination of  features in a FARE TABLE, used to associate a FARE PRICE. An optimisation of CELL that can be used in a Faretable without a cell id.  SHould have a unique identity through its other attributes.
	CellInContext []CellInContext `xml:"CellInContext,omitempty" json:"CellInContext,omitempty"`
	CustomerPurchasePackagePrice []CustomerPurchasePackagePrice `xml:"CustomerPurchasePackagePrice,omitempty" json:"CustomerPurchasePackagePrice,omitempty"`
	ParkingPrice []ParkingPrice `xml:"ParkingPrice,omitempty" json:"ParkingPrice,omitempty"`
	SalesOfferPackagePrice []SalesOfferPackagePrice `xml:"SalesOfferPackagePrice,omitempty" json:"SalesOfferPackagePrice,omitempty"`
	FulfilmentMethodPrice []FulfilmentMethodPrice `xml:"FulfilmentMethodPrice,omitempty" json:"FulfilmentMethodPrice,omitempty"`
	CappingRulePrice []CappingRulePrice `xml:"CappingRulePrice,omitempty" json:"CappingRulePrice,omitempty"`
	FareProductPrice []FareProductPrice `xml:"FareProductPrice,omitempty" json:"FareProductPrice,omitempty"`
	FareStructureElementPrice []FareStructureElementPrice `xml:"FareStructureElementPrice,omitempty" json:"FareStructureElementPrice,omitempty"`
	TimeIntervalPrice []TimeIntervalPrice `xml:"TimeIntervalPrice,omitempty" json:"TimeIntervalPrice,omitempty"`
	TimeUnitPrice []TimeUnitPrice `xml:"TimeUnitPrice,omitempty" json:"TimeUnitPrice,omitempty"`
	QualityStructureFactorPrice []QualityStructureFactorPrice `xml:"QualityStructureFactorPrice,omitempty" json:"QualityStructureFactorPrice,omitempty"`
	ControllableElementPrice []ControllableElementPrice `xml:"ControllableElementPrice,omitempty" json:"ControllableElementPrice,omitempty"`
	ValidableElementPrice []ValidableElementPrice `xml:"ValidableElementPrice,omitempty" json:"ValidableElementPrice,omitempty"`
	UsageParameterPrice []UsageParameterPrice `xml:"UsageParameterPrice,omitempty" json:"UsageParameterPrice,omitempty"`
	DistanceMatrixElementPrice []DistanceMatrixElementPrice `xml:"DistanceMatrixElementPrice,omitempty" json:"DistanceMatrixElementPrice,omitempty"`
	GeographicalIntervalPrice []GeographicalIntervalPrice `xml:"GeographicalIntervalPrice,omitempty" json:"GeographicalIntervalPrice,omitempty"`
	GeographicalUnitPrice []GeographicalUnitPrice `xml:"GeographicalUnitPrice,omitempty" json:"GeographicalUnitPrice,omitempty"`
	SeriesConstraintPrice []SeriesConstraintPrice `xml:"SeriesConstraintPrice,omitempty" json:"SeriesConstraintPrice,omitempty"`
	CustomerPurchasePackagePriceRef []CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef []ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef []TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef []TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef []QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef []ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef []ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef []GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef []GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef []UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef []SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef []SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef []DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef []FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef []FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef []CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef []FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef []FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// CellInContext represents the CellInContext element
type CellInContext struct {
	CellVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// CommonCellVersionedChildStructure represents the CommonCell_VersionedChildStructure element
// Type for a CELL.
type CommonCellVersionedChildStructure struct {
	VersionedChildStructure
	// Name of CELL.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of CELL.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	StandardFareTableRef *StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef *FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	// Column for CELL.
	ColumnRef *FareTableColumnRefStructure `xml:"ColumnRef,omitempty" json:"ColumnRef,omitempty"`
	// Row for CELL.
	RowRef *FareTableRowRefStructure `xml:"RowRef,omitempty" json:"RowRef,omitempty"`
	// Order in which cell is to appear.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// CellVersionedChildStructure represents the Cell_VersionedChildStructure element
// Type for a CELL.
type CellVersionedChildStructure struct {
	VersionedChildStructure
	// Name of CELL.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of CELL.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Price within CELL.
	CellPrice *FarePriceVersionedChildStructure `xml:"CellPrice,omitempty" json:"CellPrice,omitempty"`
	CustomerPurchasePackagePriceRef *CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef *ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef *TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef *TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef *QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef *ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef *ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef *GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef *GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef *UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef *SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef *SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef *DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef *FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef *FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef *CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef *FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef *FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CustomerPurchasePackagePrice *CustomerPurchasePackagePrice `xml:"CustomerPurchasePackagePrice,omitempty" json:"CustomerPurchasePackagePrice,omitempty"`
	ParkingPrice *ParkingPrice `xml:"ParkingPrice,omitempty" json:"ParkingPrice,omitempty"`
	SalesOfferPackagePrice *SalesOfferPackagePrice `xml:"SalesOfferPackagePrice,omitempty" json:"SalesOfferPackagePrice,omitempty"`
	FulfilmentMethodPrice *FulfilmentMethodPrice `xml:"FulfilmentMethodPrice,omitempty" json:"FulfilmentMethodPrice,omitempty"`
	CappingRulePrice *CappingRulePrice `xml:"CappingRulePrice,omitempty" json:"CappingRulePrice,omitempty"`
	FareProductPrice *FareProductPrice `xml:"FareProductPrice,omitempty" json:"FareProductPrice,omitempty"`
	FareStructureElementPrice *FareStructureElementPrice `xml:"FareStructureElementPrice,omitempty" json:"FareStructureElementPrice,omitempty"`
	TimeIntervalPrice *TimeIntervalPrice `xml:"TimeIntervalPrice,omitempty" json:"TimeIntervalPrice,omitempty"`
	TimeUnitPrice *TimeUnitPrice `xml:"TimeUnitPrice,omitempty" json:"TimeUnitPrice,omitempty"`
	QualityStructureFactorPrice *QualityStructureFactorPrice `xml:"QualityStructureFactorPrice,omitempty" json:"QualityStructureFactorPrice,omitempty"`
	ControllableElementPrice *ControllableElementPrice `xml:"ControllableElementPrice,omitempty" json:"ControllableElementPrice,omitempty"`
	ValidableElementPrice *ValidableElementPrice `xml:"ValidableElementPrice,omitempty" json:"ValidableElementPrice,omitempty"`
	UsageParameterPrice *UsageParameterPrice `xml:"UsageParameterPrice,omitempty" json:"UsageParameterPrice,omitempty"`
	DistanceMatrixElementPrice *DistanceMatrixElementPrice `xml:"DistanceMatrixElementPrice,omitempty" json:"DistanceMatrixElementPrice,omitempty"`
	GeographicalIntervalPrice *GeographicalIntervalPrice `xml:"GeographicalIntervalPrice,omitempty" json:"GeographicalIntervalPrice,omitempty"`
	GeographicalUnitPrice *GeographicalUnitPrice `xml:"GeographicalUnitPrice,omitempty" json:"GeographicalUnitPrice,omitempty"`
	SeriesConstraintPrice *SeriesConstraintPrice `xml:"SeriesConstraintPrice,omitempty" json:"SeriesConstraintPrice,omitempty"`
	PriceGroupRef *PriceGroupRef `xml:"PriceGroupRef,omitempty" json:"PriceGroupRef,omitempty"`
	CustomerPurchasePackageElementRef []CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
	CustomerPurchasePackageRef []CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	ControllableElementRef []ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	ValidableElementRef []ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	AdditionalDriverOptionRef []AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef []RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef []RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef []SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef []SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef []MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef []InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef []FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef []SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef []UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef []StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef []RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef []RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef []LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef []EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef []EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef []EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef []GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef []CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef []VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef []CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef []UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef []ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef []SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef []PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef []ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef []TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef []ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef []RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef []ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef []ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef []CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef []ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef []BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef []PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
	SeriesConstraintRef []SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	SalesOfferPackageElementRef []SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	SalesOfferPackageRef []SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	DistanceMatrixElementInverseRef []DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
	DistanceMatrixElementRef []DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	FareStructureElementRef []FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	FulfilmentMethodRef []FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	CappingRuleRef []CappingRuleRef `xml:"CappingRuleRef,omitempty" json:"CappingRuleRef,omitempty"`
	EntitlementProductRef []EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef []SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef []PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef []AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef []UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef []ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef []CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef []SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef []FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef []ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	TimeIntervalRef []TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	GeographicalIntervalRef []GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	ParkingChargeBandRef []ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef []TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	FareQuotaFactorRef []FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef []FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef []QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	GeographicalStructureFactorRef []GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	PriceableObjectRef []PriceableObjectRef `xml:"PriceableObjectRef,omitempty" json:"PriceableObjectRef,omitempty"`
	GroupOfDistanceMatrixElementsRef *GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	// For fares for DISTANCE MATRIXE LEMENTs, DIRECTION in which price applies.
	DirectionType *RelativeDirectionEnumeration `xml:"DirectionType,omitempty" json:"DirectionType,omitempty"`
	// Whether fare is for s a direct i.e. no changes required point to point  fare or indirect routing.
	RoutingType *RoutingTypeEnumeration `xml:"RoutingType,omitempty" json:"RoutingType,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef *GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	VehiclePoolingMeetingPlaceRef *VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef *VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	TypeOfParkingRef *TypeOfParkingRef `xml:"TypeOfParkingRef,omitempty" json:"TypeOfParkingRef,omitempty"`
	TariffZoneRef *TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	FareSectionRef *FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	FareClass *FareClass `xml:"FareClass,omitempty" json:"FareClass,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	ServiceFacilitySetRef *ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	SiteFacilitySetRef *SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	FacilitySetRef *FacilitySetRef `xml:"FacilitySetRef,omitempty" json:"FacilitySetRef,omitempty"`
	TypeOfProductCategoryRef *TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfServiceRef *TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	TemplateServiceJourneyRef *TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef *ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	SingleJourneyRef *SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	TrainNumberRef *TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	GroupOfServicesRef *GroupOfServicesRef `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	GroupOfSingleJourneysRef *GroupOfSingleJourneysRef `xml:"GroupOfSingleJourneysRef,omitempty" json:"GroupOfSingleJourneysRef,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	VehicleModelRef *VehicleModelRef `xml:"VehicleModelRef,omitempty" json:"VehicleModelRef,omitempty"`
	CycleModelProfileRef *CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef *CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
	RetailDeviceRef *RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	ActivatedEquipmentRef *ActivatedEquipmentRef `xml:"ActivatedEquipmentRef,omitempty" json:"ActivatedEquipmentRef,omitempty"`
	BatteryEquipmentRef *BatteryEquipmentRef `xml:"BatteryEquipmentRef,omitempty" json:"BatteryEquipmentRef,omitempty"`
	RefuellingEquipmentRef *RefuellingEquipmentRef `xml:"RefuellingEquipmentRef,omitempty" json:"RefuellingEquipmentRef,omitempty"`
	VehicleChargingEquipmentRef *VehicleChargingEquipmentRef `xml:"VehicleChargingEquipmentRef,omitempty" json:"VehicleChargingEquipmentRef,omitempty"`
	AssistanceBookingServiceRef *AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef *CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef *RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef *MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef *HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef *CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef *MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef *LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef *LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef *LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef *ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef *CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef *AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef *TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef *LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	VehicleReleaseEquipmentRef *VehicleReleaseEquipmentRef `xml:"VehicleReleaseEquipmentRef,omitempty" json:"VehicleReleaseEquipmentRef,omitempty"`
	TicketValidatorEquipmentRef *TicketValidatorEquipmentRef `xml:"TicketValidatorEquipmentRef,omitempty" json:"TicketValidatorEquipmentRef,omitempty"`
	TicketingEquipmentRef *TicketingEquipmentRef `xml:"TicketingEquipmentRef,omitempty" json:"TicketingEquipmentRef,omitempty"`
	PassengerInformationEquipmentRef *PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef *CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef *TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef *SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef *ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef *LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef *WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef *WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef *SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef *PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef *RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef *StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef *QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef *TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef *EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef *LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef *LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef *CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef *RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef *EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef *HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef *GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef *PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef *SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef *RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef *PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef *HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef *PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef *SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef *WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef *AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef *VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef *PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	EquipmentRef *EquipmentRef `xml:"EquipmentRef,omitempty" json:"EquipmentRef,omitempty"`
	TypeOfFareProductRef *TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	DistributionChannelRef *DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	GroupOfDistributionChannelsRef *GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	// Preferred payment Method .
	PaymentMethod *PaymentMethodEnumeration `xml:"PaymentMethod,omitempty" json:"PaymentMethod,omitempty"`
	TypeOfPaymentMethodRef *TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	TypeOfTravelDocumentRef *TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	StandardFareTableRef *StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef *FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	// Column for CELL.
	ColumnRef *FareTableColumnRefStructure `xml:"ColumnRef,omitempty" json:"ColumnRef,omitempty"`
	// Row for CELL.
	RowRef *FareTableRowRefStructure `xml:"RowRef,omitempty" json:"RowRef,omitempty"`
	// NOTICE relating to CElll
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// Order in which cell is to appear.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// CellPriceStructure represents the CellPriceStructure element
// Price in a CELL.
type CellPriceStructure struct {
	// Name of FARE PRICE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of FARE PRICE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// Start date for selling product or service at the PRICE.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// End date for selling product or services at the PRICE.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	// PRICE amount. in specified currency.
	Amount *float64 `xml:"Amount,omitempty" json:"Amount,omitempty"`
	// Currency of Price ISO 4217.
	Currency *string `xml:"Currency,omitempty" json:"Currency,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// Other units for PRICE (If not in a currency).
	Units *float64 `xml:"Units,omitempty" json:"Units,omitempty"`
	// Interim amounts for any pricing rules  applied to derive price , for example VAT amount  charged.  +v1.1
	RuleStepResults *PriceRuleStepResultsRelStructure `xml:"ruleStepResults,omitempty" json:"ruleStepResults,omitempty"`
	// Whether the PRICE is allowed.
	IsAllowed *bool `xml:"IsAllowed,omitempty" json:"IsAllowed,omitempty"`
	PricingServiceRef *PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	CustomerPurchasePackagePriceRef *CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef *ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef *TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef *TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef *QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef *ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef *ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef *GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef *GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef *UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef *SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef *SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef *DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef *FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef *FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef *CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef *FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef *FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	LimitingRuleRef *LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef *DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef *PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	LimitingRuleInContext *LimitingRuleInContext `xml:"LimitingRuleInContext,omitempty" json:"LimitingRuleInContext,omitempty"`
	LimitingRule *LimitingRule `xml:"LimitingRule,omitempty" json:"LimitingRule,omitempty"`
	DiscountingRule *DiscountingRule `xml:"DiscountingRule,omitempty" json:"DiscountingRule,omitempty"`
	PricingRule *PricingRule `xml:"PricingRule,omitempty" json:"PricingRule,omitempty"`
	// Whether this discount can be used cumulatively with other discounts.
	CanBeCumulative *bool `xml:"CanBeCumulative,omitempty" json:"CanBeCumulative,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	// Ranking to give this discount relatove to other applicable discounts.
	Ranking *int `xml:"Ranking,omitempty" json:"Ranking,omitempty"`
	// Maximum price at which to cap discounted fare.
	MinimumPrice *float64 `xml:"MinimumPrice,omitempty" json:"MinimumPrice,omitempty"`
	// Minumum price as percentage of whole price.
	MinimumPriceAsPercentage *float64 `xml:"MinimumPriceAsPercentage,omitempty" json:"MinimumPriceAsPercentage,omitempty"`
	// Minimum price as a number of single flat fares.
	MinimumPriceAsMultiple *int `xml:"MinimumPriceAsMultiple,omitempty" json:"MinimumPriceAsMultiple,omitempty"`
	// Minimum amount at which to cap discounted fare.
	MaximumPrice *float64 `xml:"MaximumPrice,omitempty" json:"MaximumPrice,omitempty"`
	// Maxumum price as percentage of whole price.
	MaximumPriceAsPercentage *float64 `xml:"MaximumPriceAsPercentage,omitempty" json:"MaximumPriceAsPercentage,omitempty"`
	// Maximum price as a number of single flat fares.
	MaximumPriceAsMultiple *int `xml:"MaximumPriceAsMultiple,omitempty" json:"MaximumPriceAsMultiple,omitempty"`
	// Minimum Limit as percentage of whole price.
	MinimumLimitPriceAsPercentage *float64 `xml:"MinimumLimitPriceAsPercentage,omitempty" json:"MinimumLimitPriceAsPercentage,omitempty"`
	// Limiting amount below which resulting fare may not be sold.
	MinimumLimitPrice *float64 `xml:"MinimumLimitPrice,omitempty" json:"MinimumLimitPrice,omitempty"`
	// Maxumum Limit as percentage of whole price.
	MaximumLimitPriceAsPercentage *float64 `xml:"MaximumLimitPriceAsPercentage,omitempty" json:"MaximumLimitPriceAsPercentage,omitempty"`
	// Limiting amount above which resulting fare may not be sold.
	MaximumLimitPrice *float64 `xml:"MaximumLimitPrice,omitempty" json:"MaximumLimitPrice,omitempty"`
}

// FareTableColumnsRelStructure represents the fareTableColumns_RelStructure element
// Type for a list of FARE FARE TABLE COLUMN HEADINGs.
type FareTableColumnsRelStructure struct {
	StrictContainmentAggregationStructure
	// A Column heading for a FARE TABLE,
	FareTableColumn []FareTableColumn `xml:"FareTableColumn" json:"FareTableColumn"`
}

// FareTableColumnVersionedChildStructure represents the FareTableColumn_VersionedChildStructure element
// Type for a FARE TABLE COLUMN HEADING.
type FareTableColumnVersionedChildStructure struct {
	VersionedChildStructure
	// Name of FARE TABLE COLUMN.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of FARE TABLE COLUMN.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	StandardFareTableRef *StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef *FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	// NOTICEs that apply to whole FARE TABLE COLUMN
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// ENTITIES that column represents. +v1.1
	Representing *ObjectRefsRelStructure `xml:"representing,omitempty" json:"representing,omitempty"`
	// Column headings to use when presenting table.
	Columns *FareTableColumnsRelStructure `xml:"columns,omitempty" json:"columns,omitempty"`
	// Order in which FARE TABLE COLUMN HEADING is to appear.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// FareTableRowsRelStructure represents the fareTableRows_RelStructure element
// Type for a list of FARE FARE TABLE ROWs.
type FareTableRowsRelStructure struct {
	StrictContainmentAggregationStructure
	FareTableRow []FareTableRow `xml:"FareTableRow" json:"FareTableRow"`
}

// FareTableRowVersionedChildStructure represents the FareTableRow_VersionedChildStructure element
// Type for a FARE TABLE ROW .
type FareTableRowVersionedChildStructure struct {
	VersionedChildStructure
	// Name of FARE TABLE ROW.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of FARE TABLE ROW.
	Label *MultilingualString `xml:"Label,omitempty" json:"Label,omitempty"`
	StandardFareTableRef *StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef *FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	// NOTICEs that apply to whole FARE TABLE ROW.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// ENTITIES that row represents +v1.1
	Representing *ObjectRefsRelStructure `xml:"representing,omitempty" json:"representing,omitempty"`
	// Rowheadings to use when presenting table.
	Rows *FareTableRowsRelStructure `xml:"rows,omitempty" json:"rows,omitempty"`
	// Order in which FARE TABLE ROW  is to appear.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// TypeOfFareTableVersionStructure represents the TypeOfFareTable_VersionStructure element
// Type for TYPE OF FARE TABLE.
type TypeOfFareTableVersionStructure struct {
	TypeOfValueVersionStructure
}

// FareTable represents the FareTable element
// A grouping of prices that may be associated with a DISTANCE MATRIX ELEMENT, FARE STRUCTURE ELEMENT or  other PRICEABLE OBJECT.
type FareTable struct {
	FareTableVersionStructure
}

// FareTableInContext represents the FareTableInContext element
// A grouping of prices that may be associated with a DISTANCE MATRIX ELEMENT, FARE STRUCTURE ELEMENT or  other PRICEABLE OBJECT. OPTIMIZATION - Alias for FARE TABLE That does not require an ID to be present.
type FareTableInContext struct {
	FareTableVersionStructure
}

// StandardFareTable represents the StandardFareTable element
// A set of price for a combination of price features in a Tariff.
type StandardFareTable struct {
	StandardFareTableVersionStructure
}

// Cell represents the Cell element
// An individual combination of  features in a FARE TABLE, used to associate a FARE PRICE.
type Cell struct {
	CellVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// FareTableColumn represents the FareTableColumn element
// An individual combination of  features in a FARE TABLE, used to associate a FARE PRICE.
type FareTableColumn struct {
	FareTableColumnVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// FareTableRow represents the FareTableRow element
// An individual combination of  features in a FARE TABLE, used to associate a FARE PRICE.
type FareTableRow struct {
	FareTableRowVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// TypeOfFareTable represents the TypeOfFareTable element
// Category of FARE TABLE.
type TypeOfFareTable struct {
	TypeOfFareTableVersionStructure
}

// FareSeriesInFrameRelStructure represents the fareSeriesInFrame_RelStructure element
// Type for containment in frame of SERIES CONSTRAINT.
type FareSeriesInFrameRelStructure struct {
	FrameContainmentStructure
	SeriesConstraint []SeriesConstraint `xml:"SeriesConstraint" json:"SeriesConstraint"`
}

// SeriesConstraintsRelStructure represents the SeriesConstraints_RelStructure element
// Type for a list of SERIES ELEMENTs.
type SeriesConstraintsRelStructure struct {
	ContainmentAggregationStructure
	SeriesConstraintRef []SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	SeriesConstraint []SeriesConstraint `xml:"SeriesConstraint,omitempty" json:"SeriesConstraint,omitempty"`
}

// SeriesConstraintVersionStructure represents the SeriesConstraint_VersionStructure element
// Type for SERIES CONSTRAINT.
type SeriesConstraintVersionStructure struct {
	PriceableObjectVersionStructure
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// String to use to represent Itinerary.
	Itinerary *MultilingualString `xml:"Itinerary,omitempty" json:"Itinerary,omitempty"`
	// Symbal to us eto mark normal route.
	SymbolMarkingUsualRoute *string `xml:"SymbolMarkingUsualRoute,omitempty" json:"SymbolMarkingUsualRoute,omitempty"`
	// Classification of SERIES CONSTRAINT. Default is station to station.
	SeriesType *SeriesTypeEnumeration `xml:"SeriesType,omitempty" json:"SeriesType,omitempty"`
	// Whether this is a direct i.e. no changes requried point to point or indirect.
	RoutingType *RoutingTypeEnumeration `xml:"RoutingType,omitempty" json:"RoutingType,omitempty"`
	// Preferred basis for calculating fares for this series.
	FareBasis *FareBasisEnumeration `xml:"FareBasis,omitempty" json:"FareBasis,omitempty"`
	// Distance r calculation  of First Class fares.
	FirstClassDistance *float64 `xml:"FirstClassDistance,omitempty" json:"FirstClassDistance,omitempty"`
	// Distance r calculation  of Second Class fares.
	SecondClassDistance *float64 `xml:"SecondClassDistance,omitempty" json:"SecondClassDistance,omitempty"`
	// Whether SERIES CONSTRAINT can only be used by itself, or whether it can be used in a chain of series.
	Discrete *bool `xml:"Discrete,omitempty" json:"Discrete,omitempty"`
	// Start CONNECTION link  for   SERIES CONSTRAINT.
	FromConnectionRef *ConnectionRefStructure `xml:"FromConnectionRef,omitempty" json:"FromConnectionRef,omitempty"`
	// End CONNECTION link  for   SERIES CONSTRAINT.
	ToConnectionRef *ConnectionRefStructure `xml:"ToConnectionRef,omitempty" json:"ToConnectionRef,omitempty"`
	// FARE POINTs IN  PATTERN  in the SERIES CONSTRAINT.
	FarePointsInPattern []FarePointsInPatternRelStructure `xml:"farePointsInPattern,omitempty" json:"farePointsInPattern,omitempty"`
	// JourneyPatternsequivalent to the series.
	JourneyPatterns []JourneyPatternRefsRelStructure `xml:"journeyPatterns,omitempty" json:"journeyPatterns,omitempty"`
	// Frices for the SERIES CONSTRAINTs  (Needed for TAP TSI)
	Prices []SeriesConstraintPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
	// Replaces the speciified SERIES CONSTRAINTs  (Needed for TAP TSI)
	Replaces []SeriesConstraintRefsRelStructure `xml:"replaces,omitempty" json:"replaces,omitempty"`
	// relative number of series for same  OD pair (TAP Route number)
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// SeriesConstraintPricesRelStructure represents the seriesConstraintPrices_RelStructure element
// Type for a list of SERIES CONSTRAINT PRICEs.
type SeriesConstraintPricesRelStructure struct {
	StrictContainmentAggregationStructure
	SeriesConstraintPriceRef []SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	// A set of all possible price features of a SERIES CONSTRAINT: default total price, discount in value or percentage etc.
	SeriesConstraintPrice []SeriesConstraintPriceVersionedChildStructure `xml:"SeriesConstraintPrice,omitempty" json:"SeriesConstraintPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// SeriesConstraintPriceVersionedChildStructure represents the SeriesConstraintPrice_VersionedChildStructure element
// Type for a SERIES CONSTRAINT PRICEs.
type SeriesConstraintPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	SeriesConstraintRef *SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
}

// SeriesConstraint represents the SeriesConstraint element
// A particular tariff, described by a combination of parameters.
type SeriesConstraint struct {
	SeriesConstraintVersionStructure
}

// SeriesConstraintPrice represents the SeriesConstraintPrice element
// A set of all possible price features of a SERIES CONSTRAINT: default total price, discount in value or percentage etc.
type SeriesConstraintPrice struct {
	SeriesConstraintPriceVersionedChildStructure
}

// IntervalTypeEnumeration represents the IntervalTypeEnumeration enumeration
// Allowed values for INTERVAL TYPE.
type IntervalTypeEnumeration string

const (
	// IntervalTypeEnumerationIntervalTypeEnumerationStop represents stop
	IntervalTypeEnumerationIntervalTypeEnumerationStop IntervalTypeEnumeration = "stop"
	// IntervalTypeEnumerationIntervalTypeEnumerationTariffZone represents tariffZone
	IntervalTypeEnumerationIntervalTypeEnumerationTariffZone IntervalTypeEnumeration = "tariffZone"
	// IntervalTypeEnumerationIntervalTypeEnumerationDistance represents distance
	IntervalTypeEnumerationIntervalTypeEnumerationDistance IntervalTypeEnumeration = "distance"
	// IntervalTypeEnumerationIntervalTypeEnumerationSection represents section
	IntervalTypeEnumerationIntervalTypeEnumerationSection IntervalTypeEnumeration = "section"
	// IntervalTypeEnumerationIntervalTypeEnumerationCoupon represents coupon
	IntervalTypeEnumerationIntervalTypeEnumerationCoupon IntervalTypeEnumeration = "coupon"
	// IntervalTypeEnumerationIntervalTypeEnumerationOther represents other
	IntervalTypeEnumerationIntervalTypeEnumerationOther IntervalTypeEnumeration = "other"
)

// GeographicalUnitRefStructure represents the GeographicalUnitRefStructure element
// Type for Reference to a GEOGRAPHICAL UNIT.
type GeographicalUnitRefStructure struct {
	FareUnitRefStructure
}

// GeographicalIntervalRefStructure represents the GeographicalIntervalRefStructure element
// Type for Reference to a GEOGRAPHICAL INTERVAL.
type GeographicalIntervalRefStructure struct {
	FareIntervalRefStructure
}

// GeographicalStructureFactorRefStructure represents the GeographicalStructureFactorRefStructure element
// Type for Reference to a GEOGRAPHICAL STRUCTURE FACTOR.
type GeographicalStructureFactorRefStructure struct {
	FareStructureFactorRefStructure
}

// GeographicalUnitPriceRefStructure represents the GeographicalUnitPriceRefStructure element
// Type for Reference to a GEOGRAPHICAL UNIT PRICE.
type GeographicalUnitPriceRefStructure struct {
	FarePriceRefStructure
}

// GeographicalIntervalPriceRefStructure represents the GeographicalIntervalPriceRefStructure element
// Type for Reference to a GEOGRAPHICAL INTERVAL PRICE.
type GeographicalIntervalPriceRefStructure struct {
	FarePriceRefStructure
}

// GeographicalUnitRef represents the GeographicalUnitRef element
// Reference to a GEOGRAPHICAL UNIT.
type GeographicalUnitRef struct {
	GeographicalUnitRefStructure
}

// GeographicalIntervalRef represents the GeographicalIntervalRef element
// Reference to a GEOGRAPHICAL INTERVAL.
type GeographicalIntervalRef struct {
	GeographicalIntervalRefStructure
}

// GeographicalStructureFactorRef represents the GeographicalStructureFactorRef element
// Reference to a GEOGRAPHICAL STRUCTURE FACTOR.
type GeographicalStructureFactorRef struct {
	GeographicalStructureFactorRefStructure
}

// GeographicalUnitPriceRef represents the GeographicalUnitPriceRef element
// Reference to a GEOGRAPHICAL UNIT PRICE.
type GeographicalUnitPriceRef struct {
	GeographicalUnitPriceRefStructure
}

// GeographicalIntervalPriceRef represents the GeographicalIntervalPriceRef element
// Reference to a GEOGRAPHICAL INTERVAL PRICE.
type GeographicalIntervalPriceRef struct {
	GeographicalIntervalPriceRefStructure
}

// FareElementInSequenceVersionedChildStructure represents the FareElementInSequence_VersionedChildStructure element
// Type for FARE ELEMENT IN SEQUENCE.
type FareElementInSequenceVersionedChildStructure struct {
	VersionedChildStructure
	// Name of FARE ELEMENT IN SEQUENCE.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of FARE ELEMENT IN SEQUENCE.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Whether element is first in sequence. Default is false.
	IsFirstInSequence *bool `xml:"IsFirstInSequence,omitempty" json:"IsFirstInSequence,omitempty"`
	// Whether element is last in sequence. Default is false.
	IsLastInSequence *bool `xml:"IsLastInSequence,omitempty" json:"IsLastInSequence,omitempty"`
	// Whether access is limited.
	AccessNumberIsLimited *bool `xml:"AccessNumberIsLimited,omitempty" json:"AccessNumberIsLimited,omitempty"`
	// Minimum number of times use of this element must occur in a given trip. =v1.1
	MinimumAccess *int `xml:"MinimumAccess,omitempty" json:"MinimumAccess,omitempty"`
	// Maximum number of times use of this element mayoccur in a given trip. +v1.1
	MaximumAccess *int `xml:"MaximumAccess,omitempty" json:"MaximumAccess,omitempty"`
	// Number of access.
	AccessNumber *int `xml:"AccessNumber,omitempty" json:"AccessNumber,omitempty"`
	// order of element in sequence.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// FareStructureFactorsRelStructure represents the fareStructureFactors_RelStructure element
// Type for a list of FARE STRUCTURE FACTORs.
type FareStructureFactorsRelStructure struct {
	ContainmentAggregationStructure
	ParkingChargeBandRef []ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef []TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	FareQuotaFactorRef []FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef []FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef []QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	GeographicalStructureFactorRef []GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	// A sequence or set of CONTROLLABLE ELEMENTs to which rules for limitation of access rights and calculation of prices (fare structure) are applied.
	FareStructureFactor []FareStructureFactor `xml:"FareStructureFactor,omitempty" json:"FareStructureFactor,omitempty"`
}

// FareStructureFactorVersionStructure represents the FareStructureFactor_VersionStructure element
// Type for FARE STRUCTURE FACTOR.
type FareStructureFactorVersionStructure struct {
	PriceableObjectVersionStructure
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	TypeOfFareStructureFactorRef *TypeOfFareStructureFactorRef `xml:"TypeOfFareStructureFactorRef,omitempty" json:"TypeOfFareStructureFactorRef,omitempty"`
	// Factor value assoictaed with init.
	Factor *interface{} `xml:"Factor,omitempty" json:"Factor,omitempty"`
}

// TypeOfFareStructureFactorVersionStructure represents the TypeOfFareStructureFactor_VersionStructure element
// Type for TYPE OF FARE STRUCTURE FACTOR.
type TypeOfFareStructureFactorVersionStructure struct {
	TypeOfEntityVersionStructure
}

// FareIntervalVersionStructure represents the FareInterval_VersionStructure element
// Type for FARE INTERVAL.
type FareIntervalVersionStructure struct {
	PriceableObjectVersionStructure
	// Name of implementation class associated with e.g. gDay, t.
	NameOfClassOfUnit *string `xml:"nameOfClassOfUnit,attr,omitempty" json:"nameOfClassOfUnit,omitempty"`
}

// FareUnitVersionStructure represents the FareUnit_VersionStructure element
// Type for FARE UNIT.
type FareUnitVersionStructure struct {
	PriceableObjectVersionStructure
	// Name of class associated with UNIT.
	NameOfClassOfUnit *string `xml:"nameOfClassOfUnit,attr,omitempty" json:"nameOfClassOfUnit,omitempty"`
}

// FareElementInSequence represents the FareElementInSequence element
// A FARE STRUCTURE ELEMENT as a part of a VALIDABLE ELEMENT, including its possible order in the sequence of FARE STRUCTURE ELEMENTs forming that VALIDABLE ELEMENT, and its possible quantitative limitation.
type FareElementInSequence struct {
	FareElementInSequenceVersionedChildStructure
}

// FareStructureFactor represents the FareStructureFactor element
// A factor influencing access rights definition or calculation of prices.
type FareStructureFactor struct {
	FareStructureFactorVersionStructure
}

// TypeOfFareStructureFactor represents the TypeOfFareStructureFactor element
// A classification of FARE STRUCTURE FACTORs expressing their general functionalities .
type TypeOfFareStructureFactor struct {
	TypeOfFareStructureFactorVersionStructure
}

// FareInterval represents the FareInterval element
// A factor influencing access rights definition or calculation of prices.
type FareInterval struct {
	FareIntervalVersionStructure
}

// FareUnit represents the FareUnit element
// A factor influencing access rights definition or calculation of prices.
type FareUnit struct {
	FareUnitVersionStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClass *string `xml:"nameOfClass,attr,omitempty" json:"nameOfClass,omitempty"`
}

// GeographicalUnitsRelStructure represents the geographicalUnits_RelStructure element
// Type for a list of GEOGRAPHICAL UNITs.
type GeographicalUnitsRelStructure struct {
	ContainmentAggregationStructure
	GeographicalUnitRef []GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	// A geographical UNIT specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	GeographicalUnit []GeographicalUnit `xml:"GeographicalUnit,omitempty" json:"GeographicalUnit,omitempty"`
}

// GeographicalUnitVersionStructure represents the GeographicalUnit_VersionStructure element
// Type for GEOGRAPHICAL UNIT.
type GeographicalUnitVersionStructure struct {
	FareUnitVersionStructure
	// Distance of unit in SI meters.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// PRICEs of GEOGRAPHICAL UNIT.
	Prices *GeographicalUnitPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// GeographicalIntervalsRelStructure represents the geographicalIntervals_RelStructure element
// Type for a list of GEOGRAPHICAL INTERVALs.
type GeographicalIntervalsRelStructure struct {
	ContainmentAggregationStructure
	GeographicalIntervalRef []GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	// A geographical interval specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this interval: 0-5 km, 4-6 zones etc.
	GeographicalInterval []GeographicalInterval `xml:"GeographicalInterval,omitempty" json:"GeographicalInterval,omitempty"`
}

// GeographicalIntervalVersionStructure represents the GeographicalInterval_VersionStructure element
// Type for GEOGRAPHICAL INTERVAL.
type GeographicalIntervalVersionStructure struct {
	FareIntervalVersionStructure
	// Start value for Geographic Interval.
	StartGeographicalValue *float64 `xml:"StartGeographicalValue,omitempty" json:"StartGeographicalValue,omitempty"`
	// End value for Geographic Interval.
	EndGeographicalValue *float64 `xml:"EndGeographicalValue,omitempty" json:"EndGeographicalValue,omitempty"`
	// Number of units in Interval.
	NumberOfUnits *int `xml:"NumberOfUnits,omitempty" json:"NumberOfUnits,omitempty"`
	// nature of Interval.
	IntervalType *IntervalTypeEnumeration `xml:"IntervalType,omitempty" json:"IntervalType,omitempty"`
	GeographicalUnitRef *GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	// PRICEs of GEOGRAPHICAL INTERVAL.
	Prices *GeographicalIntervalPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// GeographicalStructureFactorsRelStructure represents the geographicalStructureFactors_RelStructure element
// Type for a list of GEOGRAPHICAL STRUCTURE FACTOR.
type GeographicalStructureFactorsRelStructure struct {
	StrictContainmentAggregationStructure
	GeographicalStructureFactorRef []GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	GeographicalStructureFactor []GeographicalStructureFactor `xml:"GeographicalStructureFactor,omitempty" json:"GeographicalStructureFactor,omitempty"`
}

// GeographicalStructureFactorVersionStructure represents the GeographicalStructureFactor_VersionStructure element
// Type for GEOGRAPHICAL STRUCTURE FACTOR.
type GeographicalStructureFactorVersionStructure struct {
	FareStructureFactorVersionStructure
	ParkingTariffRef *ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef *TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	GeographicalIntervalRef *GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	DistanceMatrixElementRef *DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	GeographicalUnitRef *GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	// Number of units of.
	NumberOfUnits *int `xml:"NumberOfUnits,omitempty" json:"NumberOfUnits,omitempty"`
	// Arbitrary Amount for calculation.
	AmountFactor *float64 `xml:"AmountFactor,omitempty" json:"AmountFactor,omitempty"`
}

// GeographicalUnitPricesRelStructure represents the geographicalUnitPrices_RelStructure element
// Type for a list of GEOGRAPHICAL UNIT PRICEs.
type GeographicalUnitPricesRelStructure struct {
	StrictContainmentAggregationStructure
	GeographicalUnitPriceRef []GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	// A set of all possible price features of a GEOGRAPHICAL UNIT : default total price, discount in value or percentage etc.
	GeographicalUnitPrice []GeographicalUnitPriceVersionedChildStructure `xml:"GeographicalUnitPrice,omitempty" json:"GeographicalUnitPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// GeographicalUnitPriceVersionedChildStructure represents the GeographicalUnitPrice_VersionedChildStructure element
// Type for a GEOGRAPHICAL UNIT PRICE.
type GeographicalUnitPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	GeographicalUnitRef *GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	// Prices for GEOGRAPHICAL UNIT.
	Prices *GeographicalUnitPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// GeographicalIntervalPricesRelStructure represents the geographicalIntervalPrices_RelStructure element
// Type for a list of GEOGRAPHICAL INTERVAL PRICEs.
type GeographicalIntervalPricesRelStructure struct {
	StrictContainmentAggregationStructure
	GeographicalIntervalPriceRef []GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	// A set of all possible price features of a GEOGRAPHICAL INTERVAL : default total price, discount in value or percentage etc.
	GeographicalIntervalPrice []GeographicalIntervalPriceVersionedChildStructure `xml:"GeographicalIntervalPrice,omitempty" json:"GeographicalIntervalPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// GeographicalIntervalPriceVersionedChildStructure represents the GeographicalIntervalPrice_VersionedChildStructure element
// Type for a GEOGRAPHICAL INTERVAL PRICEs.
type GeographicalIntervalPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	GeographicalIntervalRef *GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
}

// GeographicalUnit represents the GeographicalUnit element
// A factor influencing access rights definition or calculation of prices.
type GeographicalUnit struct {
	GeographicalUnitVersionStructure
}

// GeographicalInterval represents the GeographicalInterval element
// A factor influencing access rights definition or calculation of prices.
type GeographicalInterval struct {
	GeographicalIntervalVersionStructure
}

// GeographicalStructureFactor represents the GeographicalStructureFactor element
// The value of a GEOGRAPHICAL INTERVAL or a DISTANCE MATRIX ELEMENT expressed by a GEOGRAPHICAL UNIT.
type GeographicalStructureFactor struct {
	GeographicalStructureFactorVersionStructure
}

// GeographicalUnitPrice represents the GeographicalUnitPrice element
// A set of all possible price features of a GEOGRAPHICAL UNIT: default total price etc.
type GeographicalUnitPrice struct {
	GeographicalUnitPriceVersionedChildStructure
}

// GeographicalIntervalPrice represents the GeographicalIntervalPrice element
// A set of all possible price features of a GEOGRAPHICAL INTERVAL: default total price etc.
type GeographicalIntervalPrice struct {
	GeographicalIntervalPriceVersionedChildStructure
}

// DistanceMatrixElementsInFrameRelStructure represents the distanceMatrixElementsInFrame_RelStructure element
// Type for containment in frame of DISTANCE MATRIX ELEMENTs.
type DistanceMatrixElementsInFrameRelStructure struct {
	FrameContainmentStructure
	DistanceMatrixElement []DistanceMatrixElement `xml:"DistanceMatrixElement" json:"DistanceMatrixElement"`
}

// GroupsOfDistanceMatrixElementsInFrameRelStructure represents the groupsOfDistanceMatrixElementsInFrame_RelStructure element
// Type for containment in frame of GROUPS OF DISTANCE MATRIX ELEMENTs.
type GroupsOfDistanceMatrixElementsInFrameRelStructure struct {
	FrameContainmentStructure
	DistanceMatrixElement []DistanceMatrixElement `xml:"DistanceMatrixElement" json:"DistanceMatrixElement"`
}

// GroupsOfDistanceMatrixElementsRelStructure represents the groupsOfDistanceMatrixElements_RelStructure element
// Type for a list of GROUP OF DISTANCE MATRIX ELEMENTss.
type GroupsOfDistanceMatrixElementsRelStructure struct {
	ContainmentAggregationStructure
	GroupOfDistanceMatrixElementsRef []GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfDistanceMatrixElements []GroupOfDistanceMatrixElements `xml:"GroupOfDistanceMatrixElements,omitempty" json:"GroupOfDistanceMatrixElements,omitempty"`
}

// GroupOfDistanceMatrixElementsVersionStructure represents the GroupOfDistanceMatrixElements_VersionStructure element
// Type for GROUP OF DISTANCE MATRIX ELEMENTs.
type GroupOfDistanceMatrixElementsVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Whether contents of Group should be used to exclude (true) from a large list . The default is include  (i.e.false)
	UseToExclude *bool `xml:"UseToExclude,omitempty" json:"UseToExclude,omitempty"`
	// PRICE GROUPSs  making up FARE PRODUCT.
	PriceGroups *PriceGroupsRelStructure `xml:"priceGroups,omitempty" json:"priceGroups,omitempty"`
	// Other FARE TABLESs for DISTANCE MATRIX ELEMENT.
	FareTables *FareTablesRelStructure `xml:"fareTables,omitempty" json:"fareTables,omitempty"`
	// GROUP OF DISTANCE MATRIX ELEMENTs to use when advertising Train -If different from Id.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// Use of GEOGRAPHICAL STRUCTURE FACTORss in a particular sequence.
	StructureFactors *GeographicalStructureFactorsRelStructure `xml:"structureFactors,omitempty" json:"structureFactors,omitempty"`
	// NOTICEs applying to element.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// TARIFFs applying to element.
	Members *DistanceMatrixElementsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	// prices associated with DSISTANCE MATRIX ELEMENT.
	Prices *DistanceMatrixElementPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// DistanceMatrixElementsRelStructure represents the distanceMatrixElements_RelStructure element
// Type for a list of DISTANCE MATRIX ELEMENTs.
type DistanceMatrixElementsRelStructure struct {
	ContainmentAggregationStructure
	DistanceMatrixElementRef []DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	DistanceMatrixElement []DistanceMatrixElement `xml:"DistanceMatrixElement,omitempty" json:"DistanceMatrixElement,omitempty"`
}

// DistanceMatrixElementVersionStructure represents the DistanceMatrixElement_VersionStructure element
// Type for DISTANCE MATRIX ELEMENT.
type DistanceMatrixElementVersionStructure struct {
	PriceableObjectVersionStructure
	// DISTANCE MATRIX ELEMENT to use when advertising Train -If different from Id.
	Distance *float64 `xml:"Distance,omitempty" json:"Distance,omitempty"`
	// Relative preference assigned to this element if there are multiple entries between two points.
	RelativeRanking *int `xml:"RelativeRanking,omitempty" json:"RelativeRanking,omitempty"`
	// Whether considered as direct fare.
	IsDirect *bool `xml:"IsDirect,omitempty" json:"IsDirect,omitempty"`
	// Whether an inverse element in the opposite direction can be assumed with the same prices. (Optimisation to reduce  data exchanged)
	InverseAllowed *bool `xml:"InverseAllowed,omitempty" json:"InverseAllowed,omitempty"`
	// Start SCHEDULED STOP POINT for Cell of DISTANCE MATRIX.
	StartStopPointRef *ScheduledStopPointRefStructure `xml:"StartStopPointRef,omitempty" json:"StartStopPointRef,omitempty"`
	// Expanded view of Start POINT with Name etc.
	StartStopPointView *ScheduledStopPointDerivedViewStructure `xml:"StartStopPointView,omitempty" json:"StartStopPointView,omitempty"`
	// Start TARIFF ZONE for Cell of DISTANCE MATRIX.
	StartTariffZoneRef *TariffZoneRefStructure `xml:"StartTariffZoneRef,omitempty" json:"StartTariffZoneRef,omitempty"`
	// Expanded view of start TARIFF ZONE for Cell of DISTANCE MATRIX.
	StartTariffZoneView *ZoneDerivedViewStructure `xml:"StartTariffZoneView,omitempty" json:"StartTariffZoneView,omitempty"`
	// Start MeetingPoint for  Cell of  DISTANCE MATRIX.
	StartMeetingPointRef *PointRefStructure `xml:"StartMeetingPointRef,omitempty" json:"StartMeetingPointRef,omitempty"`
	// FARE SECTION at which  element begins.
	FromFareSectionRef *FareSectionRefStructure `xml:"FromFareSectionRef,omitempty" json:"FromFareSectionRef,omitempty"`
	// POINT within FARE SECTION tat which element begins.
	FromFarePointInPatternRef *FarePointInPatternRefStructure `xml:"FromFarePointInPatternRef,omitempty" json:"FromFarePointInPatternRef,omitempty"`
	// End SCHEDULED STOP POINT for Cell of DISTANCE MATRIX.
	EndStopPointRef *ScheduledStopPointRefStructure `xml:"EndStopPointRef,omitempty" json:"EndStopPointRef,omitempty"`
	// Expanded view of end POINT with Name etc.
	EndStopPointView *ScheduledStopPointDerivedViewStructure `xml:"EndStopPointView,omitempty" json:"EndStopPointView,omitempty"`
	// End TARIFF ZONE for Cell of DISTANCE MATRIX.
	EndTariffZoneRef *TariffZoneRefStructure `xml:"EndTariffZoneRef,omitempty" json:"EndTariffZoneRef,omitempty"`
	// Expanded view of endTARIFF ZONE for Cell of DISTANCE MATRIX.
	EndTariffZoneView *ZoneDerivedViewStructure `xml:"EndTariffZoneView,omitempty" json:"EndTariffZoneView,omitempty"`
	// ENd MeetingPoint for  Cell of  DISTANCE MATRIX.
	EndMeetingPointRef *PointRefStructure `xml:"EndMeetingPointRef,omitempty" json:"EndMeetingPointRef,omitempty"`
	// FARE SECTION at which  element ends.
	ToFareSectionRef *FareSectionRefStructure `xml:"ToFareSectionRef,omitempty" json:"ToFareSectionRef,omitempty"`
	// POINT within FARE SECTION tat which element ends.
	ToFarePointInPatternRef *FarePointInPatternRefStructure `xml:"ToFarePointInPatternRef,omitempty" json:"ToFarePointInPatternRef,omitempty"`
	// SERIES CONSTRAINTs constraining DISTANCE MATRIX ELEMENT.
	SeriesConstraints *SeriesConstraintsRelStructure `xml:"seriesConstraints,omitempty" json:"seriesConstraints,omitempty"`
	// Use of FARE STRUCTURE ELEMENTs in a particular sequence.
	StructureFactors *GeographicalStructureFactorsRelStructure `xml:"structureFactors,omitempty" json:"structureFactors,omitempty"`
	// TARIFFs applying to element.
	Tariffs *TariffRefsRelStructure `xml:"tariffs,omitempty" json:"tariffs,omitempty"`
	StandardFareTableRef *StandardFareTableRef `xml:"StandardFareTableRef,omitempty" json:"StandardFareTableRef,omitempty"`
	FareTableRef *FareTableRef `xml:"FareTableRef,omitempty" json:"FareTableRef,omitempty"`
	// prices associated with DSISTANCE MATRIX ELEMENT.
	Prices *DistanceMatrixElementPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// DistanceMatrixElementPricesRelStructure represents the distanceMatrixElementPrices_RelStructure element
// Type for a list of DISTANCE MATRIX ELEMENT PRICEs.
type DistanceMatrixElementPricesRelStructure struct {
	StrictContainmentAggregationStructure
	DistanceMatrixElementPriceRef []DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	DistanceMatrixElementPrice []DistanceMatrixElementPrice `xml:"DistanceMatrixElementPrice,omitempty" json:"DistanceMatrixElementPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// DistanceMatrixElementPriceVersionedChildStructure represents the DistanceMatrixElementPrice_VersionedChildStructure element
// Type for a DISTANCE MATRIX ELEMENT PRICEs.
type DistanceMatrixElementPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	DistanceMatrixElementRef *DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	GroupOfDistanceMatrixElementsRef *GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
}

// DistanceMatrixElementDerivedViewStructure represents the DistanceMatrixElement_DerivedViewStructure element
// Type for CONNECTING JOURNEY VIEW.
type DistanceMatrixElementDerivedViewStructure struct {
	DerivedViewStructure
	// Start SCHEDULED STOP POINT for Cell of DISTANCE MATRIX.
	StartStopPointRef *ScheduledStopPointRefStructure `xml:"StartStopPointRef,omitempty" json:"StartStopPointRef,omitempty"`
	// Start TARIFF ZONE for Cell of DISTANCE MATRIX.
	StartTariffZoneRef *TariffZoneRefStructure `xml:"StartTariffZoneRef,omitempty" json:"StartTariffZoneRef,omitempty"`
	// Name of Start Stop Point.
	StartName *MultilingualString `xml:"StartName,omitempty" json:"StartName,omitempty"`
	// End SCHEDULED STOP POINT for Cell of DISTANCE MATRIX.
	EndStopPointRef *ScheduledStopPointRefStructure `xml:"EndStopPointRef,omitempty" json:"EndStopPointRef,omitempty"`
	// End TARIFF ZONE for Cell of DISTANCE MATRIX.
	EndTariffZoneRef *TariffZoneRefStructure `xml:"EndTariffZoneRef,omitempty" json:"EndTariffZoneRef,omitempty"`
	// Name of Stop Point.
	EndName *MultilingualString `xml:"EndName,omitempty" json:"EndName,omitempty"`
}

// GroupOfDistanceMatrixElements represents the GroupOfDistanceMatrixElements element
// A group of DISTANCE MATRIX ELEMENTs; may set common properties for a given set of origin and destination pairs.
type GroupOfDistanceMatrixElements struct {
	GroupOfDistanceMatrixElementsVersionStructure
}

// DistanceMatrixElement represents the DistanceMatrixElement element
// A cell of an origin-destination matrix for TARIFF ZONEs or STOP POINTs, expressing a fare distance for the corresponding trip: value in km, number of fare units etc.
type DistanceMatrixElement struct {
	DistanceMatrixElementVersionStructure
}

// DistanceMatrixElementPrice represents the DistanceMatrixElementPrice element
// A set of all possible price features of a DISTANCE MATRIX ELEMENT: default total price etc.
// .
type DistanceMatrixElementPrice struct {
	DistanceMatrixElementPriceVersionedChildStructure
}

// DistanceMatrixElementView represents the DistanceMatrixElementView element
// Simplified  view of CONNECTING JOURNEY.
type DistanceMatrixElementView struct {
	DistanceMatrixElementDerivedViewStructure
}

// ValidableElementRefStructure represents the ValidableElementRefStructure element
// Type for Reference to a VALIDABLE ELEMENT.
type ValidableElementRefStructure struct {
	PriceableObjectRefStructure
}

// ValidableElementPriceRefStructure represents the ValidableElementPriceRefStructure element
// Type for Reference to a VALIDABLE ELEMENT PRICE.
type ValidableElementPriceRefStructure struct {
	FarePriceRefStructure
}

// ControllableElementRefStructure represents the ControllableElementRefStructure element
// Type for Reference to a CONTROLLABLE ELEMENT.
type ControllableElementRefStructure struct {
	PriceableObjectRefStructure
}

// ControllableElementInSequenceRefStructure represents the ControllableElementInSequenceRefStructure element
// Type for Reference to an CONTROLLABLE ELEMENT IN SEQUENCE.
type ControllableElementInSequenceRefStructure struct {
	FareElementInSequenceRefStructure
}

// ControllableElementPriceRefStructure represents the ControllableElementPriceRefStructure element
// Type for Reference to a CONTROLLABLE ELEMENT PRICE.
type ControllableElementPriceRefStructure struct {
	FarePriceRefStructure
}

// ValidableElementRef represents the ValidableElementRef element
// Reference to a VALIDABLE ELEMENT.
type ValidableElementRef struct {
	ValidableElementRefStructure
}

// ValidableElementPriceRef represents the ValidableElementPriceRef element
// Reference to a VALIDABLE ELEMENT PRICE.
type ValidableElementPriceRef struct {
	ValidableElementPriceRefStructure
}

// ControllableElementRef represents the ControllableElementRef element
// Reference to a CONTROLLABLE ELEMENT.
type ControllableElementRef struct {
	ControllableElementRefStructure
}

// ControllableElementInSequenceRef represents the ControllableElementInSequenceRef element
// Reference to an CONTROLLABLE ELEMENT IN SEQUENCE.
type ControllableElementInSequenceRef struct {
	ControllableElementInSequenceRefStructure
}

// ControllableElementPriceRef represents the ControllableElementPriceRef element
// Reference to a CONTROLLABLE ELEMENT PRICE.
type ControllableElementPriceRef struct {
	ControllableElementPriceRefStructure
}

// FareDemandTypeEnumeration represents the FareDemandTypeEnumeration enumeration
// Allowed values for Fare demand type.
type FareDemandTypeEnumeration string

const (
	// FareDemandTypeEnumerationPeak represents peak
	FareDemandTypeEnumerationPeak FareDemandTypeEnumeration = "peak"
	// FareDemandTypeEnumerationMiddle represents middle
	FareDemandTypeEnumerationMiddle FareDemandTypeEnumeration = "middle"
	// FareDemandTypeEnumerationOffPeak represents offPeak
	FareDemandTypeEnumerationOffPeak FareDemandTypeEnumeration = "offPeak"
	// FareDemandTypeEnumerationSuperOffPeak represents superOffPeak
	FareDemandTypeEnumerationSuperOffPeak FareDemandTypeEnumeration = "superOffPeak"
	// FareDemandTypeEnumerationNight represents night
	FareDemandTypeEnumerationNight FareDemandTypeEnumeration = "night"
	// FareDemandTypeEnumerationSpecialEvent represents specialEvent
	FareDemandTypeEnumerationSpecialEvent FareDemandTypeEnumeration = "specialEvent"
)

// StopUseConstraintEnumeration represents the StopUseConstraintEnumeration enumeration
// Allowed values for Stop use constraint.
type StopUseConstraintEnumeration string

const (
	// StopUseConstraintEnumerationArriving represents arriving
	StopUseConstraintEnumerationArriving StopUseConstraintEnumeration = "arriving"
	// StopUseConstraintEnumerationDeparting represents departing
	StopUseConstraintEnumerationDeparting StopUseConstraintEnumeration = "departing"
	// StopUseConstraintEnumerationPassingThrough represents passingThrough
	StopUseConstraintEnumerationPassingThrough StopUseConstraintEnumeration = "passingThrough"
)

// QualityStructureFactorRefStructure represents the QualityStructureFactorRefStructure element
// Type for Reference to a QUALITY STRUCTURE FACTOR.
type QualityStructureFactorRefStructure struct {
	FareStructureFactorRefStructure
}

// FareDemandFactorRefStructure represents the FareDemandFactorRefStructure element
// Type for Reference to a FARE DEMAND FACTOR.
type FareDemandFactorRefStructure struct {
	QualityStructureFactorRefStructure
}

// FareQuotaFactorRefStructure represents the FareQuotaFactorRefStructure element
// Type for Reference to a FARE QUOTA FACTOR.
type FareQuotaFactorRefStructure struct {
	QualityStructureFactorRefStructure
}

// QualityStructureFactorPriceRefStructure represents the QualityStructureFactorPriceRefStructure element
// Type for Reference to a QUALITY STRUCTURE FACTOR PRICE.
type QualityStructureFactorPriceRefStructure struct {
	FarePriceRefStructure
}

// StartTimeAtStopPointRefStructure represents the StartTimeAtStopPointRefStructure element
// Type for Reference to a START TIME AT STOP POINT.
type StartTimeAtStopPointRefStructure struct {
	VersionOfObjectRefStructure
}

// QualityStructureFactorRef represents the QualityStructureFactorRef element
// Reference to a QUALITY STRUCTURE FACTOR.
type QualityStructureFactorRef struct {
	QualityStructureFactorRefStructure
}

// FareDemandFactorRef represents the FareDemandFactorRef element
// Reference to a FARE DEMAND FACTOR.
type FareDemandFactorRef struct {
	FareDemandFactorRefStructure
}

// FareQuotaFactorRef represents the FareQuotaFactorRef element
// Reference to a FARE QUOTA FACTOR.
type FareQuotaFactorRef struct {
	FareQuotaFactorRefStructure
}

// QualityStructureFactorPriceRef represents the QualityStructureFactorPriceRef element
// Reference to a QUALITY STRUCTURE FACTOR PRICE.
type QualityStructureFactorPriceRef struct {
	QualityStructureFactorPriceRefStructure
}

// StartTimeAtStopPointRef represents the StartTimeAtStopPointRef element
// Reference to a START TIME AT STOP POINT.
type StartTimeAtStopPointRef struct {
	VersionOfObjectRefStructure
}

// TimeUnitRefStructure represents the TimeUnitRefStructure element
// Type for Reference to a TIME UNIT.
type TimeUnitRefStructure struct {
	FareUnitRefStructure
}

// TimeIntervalRefsRelStructure represents the timeIntervalRefs_RelStructure element
// Type for a collection of one or more references to a TIME INTERVAL.
type TimeIntervalRefsRelStructure struct {
	OneToManyRelationshipStructure
	TimeIntervalRef []TimeIntervalRef `xml:"TimeIntervalRef" json:"TimeIntervalRef"`
}

// TimeIntervalRefStructure represents the TimeIntervalRefStructure element
// Type for Reference to a TIME INTERVAL.
type TimeIntervalRefStructure struct {
	FareIntervalRefStructure
}

// TimeStructureFactorRefStructure represents the TimeStructureFactorRefStructure element
// Type for Reference to a TIME STRUCTURE FACTOR.
type TimeStructureFactorRefStructure struct {
	FareStructureFactorRefStructure
}

// TimeUnitPriceRefStructure represents the TimeUnitPriceRefStructure element
// Type for Reference to a TIME UNIT PRICE.
type TimeUnitPriceRefStructure struct {
	FarePriceRefStructure
}

// TimeIntervalPriceRefStructure represents the TimeIntervalPriceRefStructure element
// Type for Reference to a TIME INTERVAL PRICE.
type TimeIntervalPriceRefStructure struct {
	FarePriceRefStructure
}

// TimeUnitRef represents the TimeUnitRef element
// Reference to a TIME UNIT.
type TimeUnitRef struct {
	TimeUnitRefStructure
}

// TimeIntervalRef represents the TimeIntervalRef element
// Reference to a TIME INTERVAL.
type TimeIntervalRef struct {
	TimeIntervalRefStructure
}

// TimeStructureFactorRef represents the TimeStructureFactorRef element
// Reference to a TIME STRUCTURE FACTOR.
type TimeStructureFactorRef struct {
	TimeStructureFactorRefStructure
}

// TimeUnitPriceRef represents the TimeUnitPriceRef element
// Reference to a TIME UNIT PRICE.
type TimeUnitPriceRef struct {
	TimeUnitPriceRefStructure
}

// TimeIntervalPriceRef represents the TimeIntervalPriceRef element
// Reference to a TIME INTERVAL PRICE.
type TimeIntervalPriceRef struct {
	TimeIntervalPriceRefStructure
}

// SalesOfferPackageEntitlementRequiredRefStructure represents the SalesOfferPackageEntitlementRequiredRefStructure element
// Type for Reference to a E SALES OFFER ENTITLEMENT REQUIRED  parameter.
type SalesOfferPackageEntitlementRequiredRefStructure struct {
	UsageParameterRefStructure
}

// SalesOfferPackageEntitlementGivenRefStructure represents the SalesOfferPackageEntitlementGivenRefStructure element
// Type for Reference to a SALES OFFER  ENTITLEMENT GIVEN parameter.
type SalesOfferPackageEntitlementGivenRefStructure struct {
	UsageParameterRefStructure
}

// SalesOfferPackageEntitlementRequiredRef represents the SalesOfferPackageEntitlementRequiredRef element
// Reference to a SALES OFFER ENTITLEMENT REQUIRED parameter.
type SalesOfferPackageEntitlementRequiredRef struct {
	SalesOfferPackageEntitlementRequiredRefStructure
}

// SalesOfferPackageEntitlementGivenRef represents the SalesOfferPackageEntitlementGivenRef element
// Reference to a SALES OFFER  ENTITLEMENT GIVEN PARAMETER parameter.
type SalesOfferPackageEntitlementGivenRef struct {
	SalesOfferPackageEntitlementGivenRefStructure
}

// VehicleMeetingPointRefsRelStructure represents the vehicleMeetingPointRefs_RelStructure element
// Type for a list of VEHICLE MEETING POINTs.
type VehicleMeetingPointRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehicleMeetingPointRef VehicleMeetingPointRef `xml:"VehicleMeetingPointRef" json:"VehicleMeetingPointRef"`
}

// VehicleMeetingPointRefStructure represents the VehicleMeetingPointRefStructure element
// Type for a reference to a VEHICLE MEETING POINT.
type VehicleMeetingPointRefStructure struct {
	PointRefStructure
}

// VehicleMeetingLinkRefStructure represents the VehicleMeetingLinkRefStructure element
// Type for a reference to a VEHICLE MEETING LINK.
type VehicleMeetingLinkRefStructure struct {
	LinkRefStructure
}

// VehicleMeetingPointRef represents the VehicleMeetingPointRef element
// Reference to a VEHICLE MEETING POINT. +v1.2.2
type VehicleMeetingPointRef struct {
	VehicleMeetingPointRefStructure
}

// VehicleMeetingLinkRef represents the VehicleMeetingLinkRef element
// Reference to a VEHICLE MEETING LINK. +v1.2.2
type VehicleMeetingLinkRef struct {
	VehicleMeetingLinkRefStructure
}

// OnwardVehicleMeetingLinkRef represents the OnwardVehicleMeetingLinkRef element
// Reference to a n Onward VEHICLE MEETING LINK. +v1.2.2
type OnwardVehicleMeetingLinkRef struct {
	VehicleMeetingLinkRefStructure
}

// TransportZoneUseEnumeration represents the TransportZoneUseEnumeration enumeration
// Allowed values for Zone Use.
type TransportZoneUseEnumeration string

const (
	// TransportZoneUseEnumerationAllUsesAllowed represents allUsesAllowed
	TransportZoneUseEnumerationAllUsesAllowed TransportZoneUseEnumeration = "allUsesAllowed"
	// TransportZoneUseEnumerationForbiddenZone represents forbiddenZone
	TransportZoneUseEnumerationForbiddenZone TransportZoneUseEnumeration = "forbiddenZone"
	// TransportZoneUseEnumerationCannotPickUpAndDropOffInSameZone represents cannotPickUpAndDropOffInSameZone
	TransportZoneUseEnumerationCannotPickUpAndDropOffInSameZone TransportZoneUseEnumeration = "cannotPickUpAndDropOffInSameZone"
	// TransportZoneUseEnumerationCannotPickUpInZone represents cannotPickUpInZone
	TransportZoneUseEnumerationCannotPickUpInZone TransportZoneUseEnumeration = "cannotPickUpInZone"
	// TransportZoneUseEnumerationCannotDropOffInZone represents cannotDropOffInZone
	TransportZoneUseEnumerationCannotDropOffInZone TransportZoneUseEnumeration = "cannotDropOffInZone"
	// TransportZoneUseEnumerationMustPickUpInZone represents mustPickUpInZone
	TransportZoneUseEnumerationMustPickUpInZone TransportZoneUseEnumeration = "mustPickUpInZone"
	// TransportZoneUseEnumerationMustDropOffInZone represents mustDropOffInZone
	TransportZoneUseEnumerationMustDropOffInZone TransportZoneUseEnumeration = "mustDropOffInZone"
	// TransportZoneUseEnumerationMustPickUpAndDropOffInSameZone represents mustPickUpAndDropOffInSameZone
	TransportZoneUseEnumerationMustPickUpAndDropOffInSameZone TransportZoneUseEnumeration = "mustPickUpAndDropOffInSameZone"
	// TransportZoneUseEnumerationNoPassThrough represents noPassThrough
	TransportZoneUseEnumerationNoPassThrough TransportZoneUseEnumeration = "noPassThrough"
	// TransportZoneUseEnumerationPassThroughUseOnly represents passThroughUseOnly
	TransportZoneUseEnumerationPassThroughUseOnly TransportZoneUseEnumeration = "passThroughUseOnly"
	// TransportZoneUseEnumerationOther represents other
	TransportZoneUseEnumerationOther TransportZoneUseEnumeration = "other"
)

// ZoneRuleApplicabilityEnumeration represents the ZoneRuleApplicabilityEnumeration enumeration
// Allowed values for Zone Rule APplicability.
type ZoneRuleApplicabilityEnumeration string

const (
	// ZoneRuleApplicabilityEnumerationInside represents inside
	ZoneRuleApplicabilityEnumerationInside ZoneRuleApplicabilityEnumeration = "inside"
	// ZoneRuleApplicabilityEnumerationOutside represents outside
	ZoneRuleApplicabilityEnumerationOutside ZoneRuleApplicabilityEnumeration = "outside"
)

// MobilityServiceConstraintZoneRefsRelStructure represents the mobilityServiceConstraintZoneRefs_RelStructure element
// Type for a list of MOBILITY SERVICE CONSTRAINT ZONEs.
type MobilityServiceConstraintZoneRefsRelStructure struct {
	OneToManyRelationshipStructure
	MobilityServiceConstraintZoneRef []MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef" json:"MobilityServiceConstraintZoneRef"`
}

// MobilityServiceConstraintZoneRefStructure represents the MobilityServiceConstraintZoneRefStructure element
// Type for Reference to an MOBILITY SERVICE CONSTRAINT ZONE. Left untyped so as to avoid forwards dependency.
type MobilityServiceConstraintZoneRefStructure struct {
	ZoneRefStructure
}

// VehicleTypeZoneRestrictionRefsRelStructure represents the vehicleTypeZoneRestrictionRefs_RelStructure element
// Type for a list of VEHICLE TYPE ZONE RESTRICTIONs.
type VehicleTypeZoneRestrictionRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehicleTypeZoneRestrictionRef []VehicleTypeZoneRestrictionRef `xml:"VehicleTypeZoneRestrictionRef" json:"VehicleTypeZoneRestrictionRef"`
}

// VehicleTypeZoneRestrictionRefStructure represents the VehicleTypeZoneRestrictionRefStructure element
// Type for Reference to an VEHICLE TYPE ZONE RESTRICTION. Left untyped so as to avoid forwards dependency.
type VehicleTypeZoneRestrictionRefStructure struct {
	ZoneRefStructure
}

// PoolOfVehiclesRefsRelStructure represents the PoolOfVehiclesRefs_RelStructure element
// Type for a list of POOL OF VEHICLEs.
type PoolOfVehiclesRefsRelStructure struct {
	OneToManyRelationshipStructure
	PoolOfVehiclesRef []PoolOfVehiclesRef `xml:"PoolOfVehiclesRef" json:"PoolOfVehiclesRef"`
}

// PoolOfVehiclesRefStructure represents the PoolOfVehiclesRefStructure element
// Type for Reference to an POOL OF VEHICLEs ZONE.
type PoolOfVehiclesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// MobilityServiceConstraintZoneRef represents the MobilityServiceConstraintZoneRef element
// Reference to an MOBILITY SERVICE CONSTRAINT ZONE. +v1.2.2
type MobilityServiceConstraintZoneRef struct {
	MobilityServiceConstraintZoneRefStructure
}

// VehicleTypeZoneRestrictionRef represents the VehicleTypeZoneRestrictionRef element
// Reference to an VEHICLE TYPE ZONE RESTRICTION. +v1.2.2
type VehicleTypeZoneRestrictionRef struct {
	VehicleTypeZoneRestrictionRefStructure
}

// PoolOfVehiclesRef represents the PoolOfVehiclesRef element
// Reference to an POOL OF VEHICLEs. +v1.2.2
type PoolOfVehiclesRef struct {
	PoolOfVehiclesRefStructure
}

// SingleJourneyPathRefsRelStructure represents the singleJourneyPathRefs_RelStructure element
// Type for a list of SINGLE JOURNEY PATHs.
type SingleJourneyPathRefsRelStructure struct {
	OneToManyRelationshipStructure
	SingleJourneyPathRef SingleJourneyPathRef `xml:"SingleJourneyPathRef" json:"SingleJourneyPathRef"`
}

// SingleJourneyPathRefStructure represents the SingleJourneyPathRefStructure element
// Type for a reference to a SINGLE JOURNEY PATH.
type SingleJourneyPathRefStructure struct {
	LinkSequenceRefStructure
}

// PointInSingleJourneyPathRefsRelStructure represents the PointInSingleJourneyPathRefs_RelStructure element
// Type for a list of POINT IN SINGLE JOURNEY PATHs.
type PointInSingleJourneyPathRefsRelStructure struct {
	OneToManyRelationshipStructure
	PointInSingleJourneyPathRef PointInSingleJourneyPathRef `xml:"PointInSingleJourneyPathRef" json:"PointInSingleJourneyPathRef"`
}

// PointInSingleJourneyPathRefStructure represents the PointInSingleJourneyPathRefStructure element
// Type for a reference to a POINT IN SINGLE JOURNEY PATH.
type PointInSingleJourneyPathRefStructure struct {
	PointInJourneyPatternRefStructure
}

// SingleJourneyPathRef represents the SingleJourneyPathRef element
// Reference to a SINGLE JOURNEY PATH. +v1.2.2
type SingleJourneyPathRef struct {
	SingleJourneyPathRefStructure
}

// PointInSingleJourneyPathRef represents the PointInSingleJourneyPathRef element
// Reference to a POINT IN SINGLE JOURNEY PATH. +v1.2.2
type PointInSingleJourneyPathRef struct {
	PointInSingleJourneyPathRefStructure
}

// ChargingBasisEnumeration represents the ChargingBasisEnumeration enumeration
// Allowed values for TariffBasis.
type ChargingBasisEnumeration string

const (
	// ChargingBasisEnumerationNormalFare represents normalFare
	ChargingBasisEnumerationNormalFare ChargingBasisEnumeration = "normalFare"
	// ChargingBasisEnumerationDiscounted represents discounted
	ChargingBasisEnumerationDiscounted ChargingBasisEnumeration = "discounted"
	// ChargingBasisEnumerationFree represents free
	ChargingBasisEnumerationFree ChargingBasisEnumeration = "free"
	// ChargingBasisEnumerationVarious represents various
	ChargingBasisEnumerationVarious ChargingBasisEnumeration = "various"
	// ChargingBasisEnumerationAny represents any
	ChargingBasisEnumerationAny ChargingBasisEnumeration = "any"
)

// PlaceUseEnumeration represents the PlaceUseEnumeration enumeration
// Allowed values for PlaceUsage
type PlaceUseEnumeration string

const (
	// PlaceUseEnumerationStartAt represents startAt
	PlaceUseEnumerationStartAt PlaceUseEnumeration = "startAt"
	// PlaceUseEnumerationEndAt represents endAt
	PlaceUseEnumerationEndAt PlaceUseEnumeration = "endAt"
	// PlaceUseEnumerationVia represents via
	PlaceUseEnumerationVia PlaceUseEnumeration = "via"
	// PlaceUseEnumerationRestrictTo represents restrictTo
	PlaceUseEnumerationRestrictTo PlaceUseEnumeration = "restrictTo"
	// PlaceUseEnumerationOther represents other
	PlaceUseEnumerationOther PlaceUseEnumeration = "other"
)

// AccessRightParameterAssignmentRefStructure represents the AccessRightParameterAssignmentRefStructure element
// Type for Reference to an ACCESS RIGHT PARAMETER ASSIGNMENT.
type AccessRightParameterAssignmentRefStructure struct {
	AssignmentRefStructure
}

// ValidityParameterAssignmentRefStructure represents the ValidityParameterAssignmentRefStructure element
// Type for Reference to a VALIDITY PARAMETER.
type ValidityParameterAssignmentRefStructure struct {
	AccessRightParameterAssignmentRefStructure
}

// GenericParameterAssignmentRefStructure represents the GenericParameterAssignmentRefStructure element
// Type for Reference to a GENERIC PARAMETER.
type GenericParameterAssignmentRefStructure struct {
	ValidityParameterAssignmentRefStructure
}

// ControlParameterAssignmentRefStructure represents the ControlParameterAssignmentRefStructure element
// Type for Reference to a CONTROL PARAMETER.
type ControlParameterAssignmentRefStructure struct {
	AccessRightParameterAssignmentRefStructure
}

// DeviceParameterAssignmentRefStructure represents the DeviceParameterAssignmentRefStructure element
// Type for Reference to a DEVICE PARAMETER.
type DeviceParameterAssignmentRefStructure struct {
	AccessRightParameterAssignmentRefStructure
}

// TypeOfAccessRightAssignmentRefsRelStructure represents the TypeOfAccessRightAssignmentRefs_RelStructure element
// Type for a list of TYPEs OF ACCESS RIGHT ASSIGNMENT.
type TypeOfAccessRightAssignmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfAccessRightAssignmentRef []TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef" json:"TypeOfAccessRightAssignmentRef"`
}

// TypeOfAccessRightAssignmentRefStructure represents the TypeOfAccessRightAssignmentRefStructure element
// Type for Reference to a TYPE OF ACCESS RIGHT ASSIGNMENT.
type TypeOfAccessRightAssignmentRefStructure struct {
	TypeOfValueRefStructure
}

// TypeOfAccessRightAssignmentRef represents the TypeOfAccessRightAssignmentRef element
// Reference to a TYPE OF ACCESS RIGHT ASSIGNMENT.
type TypeOfAccessRightAssignmentRef struct {
	TypeOfAccessRightAssignmentRefStructure
}

// UsageParametersInFrameRelStructure represents the usageParametersInFrame_RelStructure element
// Type for containment in frame of USAGE PARAMETER.
type UsageParametersInFrameRelStructure struct {
	FrameContainmentStructure
	AdditionalDriverOption []AdditionalDriverOption `xml:"AdditionalDriverOption,omitempty" json:"AdditionalDriverOption,omitempty"`
	RentalOption []RentalOption `xml:"RentalOption,omitempty" json:"RentalOption,omitempty"`
	RentalPenaltyPolicy []RentalPenaltyPolicy `xml:"RentalPenaltyPolicy,omitempty" json:"RentalPenaltyPolicy,omitempty"`
	VehiclePoolerProfile []VehiclePoolerProfile `xml:"VehiclePoolerProfile,omitempty" json:"VehiclePoolerProfile,omitempty"`
	SalesOfferPackageEntitlementRequired []SalesOfferPackageEntitlementRequired `xml:"SalesOfferPackageEntitlementRequired,omitempty" json:"SalesOfferPackageEntitlementRequired,omitempty"`
	SalesOfferPackageEntitlementGiven []SalesOfferPackageEntitlementGiven `xml:"SalesOfferPackageEntitlementGiven,omitempty" json:"SalesOfferPackageEntitlementGiven,omitempty"`
	MinimumStay []MinimumStay `xml:"MinimumStay,omitempty" json:"MinimumStay,omitempty"`
	Interchanging []Interchanging `xml:"Interchanging,omitempty" json:"Interchanging,omitempty"`
	Suspending []Suspending `xml:"Suspending,omitempty" json:"Suspending,omitempty"`
	UsageValidityPeriod []UsageValidityPeriod `xml:"UsageValidityPeriod,omitempty" json:"UsageValidityPeriod,omitempty"`
	FrequencyOfUse []FrequencyOfUse `xml:"FrequencyOfUse,omitempty" json:"FrequencyOfUse,omitempty"`
	StepLimit []StepLimit `xml:"StepLimit,omitempty" json:"StepLimit,omitempty"`
	Routing []Routing `xml:"Routing,omitempty" json:"Routing,omitempty"`
	RoundTrip []RoundTrip `xml:"RoundTrip,omitempty" json:"RoundTrip,omitempty"`
	LuggageAllowance []LuggageAllowance `xml:"LuggageAllowance,omitempty" json:"LuggageAllowance,omitempty"`
	EntitlementRequired []EntitlementRequired `xml:"EntitlementRequired,omitempty" json:"EntitlementRequired,omitempty"`
	EntitlementGiven []EntitlementGiven `xml:"EntitlementGiven,omitempty" json:"EntitlementGiven,omitempty"`
	EligibilityChangePolicy []EligibilityChangePolicy `xml:"EligibilityChangePolicy,omitempty" json:"EligibilityChangePolicy,omitempty"`
	CompanionProfile []CompanionProfile `xml:"CompanionProfile,omitempty" json:"CompanionProfile,omitempty"`
	GroupTicket []GroupTicket `xml:"GroupTicket,omitempty" json:"GroupTicket,omitempty"`
	CommercialProfile []CommercialProfile `xml:"CommercialProfile,omitempty" json:"CommercialProfile,omitempty"`
	UserProfile []UserProfile `xml:"UserProfile,omitempty" json:"UserProfile,omitempty"`
	Subscribing []Subscribing `xml:"Subscribing,omitempty" json:"Subscribing,omitempty"`
	PenaltyPolicy []PenaltyPolicy `xml:"PenaltyPolicy,omitempty" json:"PenaltyPolicy,omitempty"`
	ChargingPolicy []ChargingPolicy `xml:"ChargingPolicy,omitempty" json:"ChargingPolicy,omitempty"`
	Cancelling []Cancelling `xml:"Cancelling,omitempty" json:"Cancelling,omitempty"`
	Reserving []Reserving `xml:"Reserving,omitempty" json:"Reserving,omitempty"`
	PurchaseWindow []PurchaseWindow `xml:"PurchaseWindow,omitempty" json:"PurchaseWindow,omitempty"`
	Transferability []Transferability `xml:"Transferability,omitempty" json:"Transferability,omitempty"`
	Replacing []Replacing `xml:"Replacing,omitempty" json:"Replacing,omitempty"`
	Refunding []Refunding `xml:"Refunding,omitempty" json:"Refunding,omitempty"`
	Exchanging []Exchanging `xml:"Exchanging,omitempty" json:"Exchanging,omitempty"`
	Reselling []Reselling `xml:"Reselling,omitempty" json:"Reselling,omitempty"`
}

// UsageParametersRelStructure represents the usageParameters_RelStructure element
// Type for of USAGE PARAMETER.
type UsageParametersRelStructure struct {
	OneToManyRelationshipStructure
	AdditionalDriverOptionRef []AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef []RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef []RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef []SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef []SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef []MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef []InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef []FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef []SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef []UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef []StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef []RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef []RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef []LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef []EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef []EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef []EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef []GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef []CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef []VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef []CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef []UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef []ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef []SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef []PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef []ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef []TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef []ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef []RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef []ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef []ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef []CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef []ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef []BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef []PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
	AdditionalDriverOption []AdditionalDriverOption `xml:"AdditionalDriverOption,omitempty" json:"AdditionalDriverOption,omitempty"`
	RentalOption []RentalOption `xml:"RentalOption,omitempty" json:"RentalOption,omitempty"`
	RentalPenaltyPolicy []RentalPenaltyPolicy `xml:"RentalPenaltyPolicy,omitempty" json:"RentalPenaltyPolicy,omitempty"`
	VehiclePoolerProfile []VehiclePoolerProfile `xml:"VehiclePoolerProfile,omitempty" json:"VehiclePoolerProfile,omitempty"`
	SalesOfferPackageEntitlementRequired []SalesOfferPackageEntitlementRequired `xml:"SalesOfferPackageEntitlementRequired,omitempty" json:"SalesOfferPackageEntitlementRequired,omitempty"`
	SalesOfferPackageEntitlementGiven []SalesOfferPackageEntitlementGiven `xml:"SalesOfferPackageEntitlementGiven,omitempty" json:"SalesOfferPackageEntitlementGiven,omitempty"`
	MinimumStay []MinimumStay `xml:"MinimumStay,omitempty" json:"MinimumStay,omitempty"`
	Interchanging []Interchanging `xml:"Interchanging,omitempty" json:"Interchanging,omitempty"`
	Suspending []Suspending `xml:"Suspending,omitempty" json:"Suspending,omitempty"`
	UsageValidityPeriod []UsageValidityPeriod `xml:"UsageValidityPeriod,omitempty" json:"UsageValidityPeriod,omitempty"`
	FrequencyOfUse []FrequencyOfUse `xml:"FrequencyOfUse,omitempty" json:"FrequencyOfUse,omitempty"`
	StepLimit []StepLimit `xml:"StepLimit,omitempty" json:"StepLimit,omitempty"`
	Routing []Routing `xml:"Routing,omitempty" json:"Routing,omitempty"`
	RoundTrip []RoundTrip `xml:"RoundTrip,omitempty" json:"RoundTrip,omitempty"`
	LuggageAllowance []LuggageAllowance `xml:"LuggageAllowance,omitempty" json:"LuggageAllowance,omitempty"`
	EntitlementRequired []EntitlementRequired `xml:"EntitlementRequired,omitempty" json:"EntitlementRequired,omitempty"`
	EntitlementGiven []EntitlementGiven `xml:"EntitlementGiven,omitempty" json:"EntitlementGiven,omitempty"`
	EligibilityChangePolicy []EligibilityChangePolicy `xml:"EligibilityChangePolicy,omitempty" json:"EligibilityChangePolicy,omitempty"`
	CompanionProfile []CompanionProfile `xml:"CompanionProfile,omitempty" json:"CompanionProfile,omitempty"`
	GroupTicket []GroupTicket `xml:"GroupTicket,omitempty" json:"GroupTicket,omitempty"`
	CommercialProfile []CommercialProfile `xml:"CommercialProfile,omitempty" json:"CommercialProfile,omitempty"`
	UserProfile []UserProfile `xml:"UserProfile,omitempty" json:"UserProfile,omitempty"`
	Subscribing []Subscribing `xml:"Subscribing,omitempty" json:"Subscribing,omitempty"`
	PenaltyPolicy []PenaltyPolicy `xml:"PenaltyPolicy,omitempty" json:"PenaltyPolicy,omitempty"`
	ChargingPolicy []ChargingPolicy `xml:"ChargingPolicy,omitempty" json:"ChargingPolicy,omitempty"`
	Cancelling []Cancelling `xml:"Cancelling,omitempty" json:"Cancelling,omitempty"`
	Reserving []Reserving `xml:"Reserving,omitempty" json:"Reserving,omitempty"`
	PurchaseWindow []PurchaseWindow `xml:"PurchaseWindow,omitempty" json:"PurchaseWindow,omitempty"`
	Transferability []Transferability `xml:"Transferability,omitempty" json:"Transferability,omitempty"`
	Replacing []Replacing `xml:"Replacing,omitempty" json:"Replacing,omitempty"`
	Refunding []Refunding `xml:"Refunding,omitempty" json:"Refunding,omitempty"`
	Exchanging []Exchanging `xml:"Exchanging,omitempty" json:"Exchanging,omitempty"`
	Reselling []Reselling `xml:"Reselling,omitempty" json:"Reselling,omitempty"`
}

// UsageParameterVersionStructure represents the UsageParameter_VersionStructure element
// Type for USAGE PARAMETER.
type UsageParameterVersionStructure struct {
	PriceableObjectVersionStructure
	TypeOfUsageParameterRef *TypeOfUsageParameterRef `xml:"TypeOfUsageParameterRef,omitempty" json:"TypeOfUsageParameterRef,omitempty"`
	// Prices associated with USAGE PARAMETER.
	Prices *UsageParameterPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// UsageParameterPricesRelStructure represents the usageParameterPrices_RelStructure element
// Type for a list of FARE USAGE PARAMETER PRICEs.
type UsageParameterPricesRelStructure struct {
	StrictContainmentAggregationStructure
	UsageParameterPriceRef []UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	UsageParameterPrice []UsageParameterPrice `xml:"UsageParameterPrice,omitempty" json:"UsageParameterPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// UsageParameterPriceVersionedChildStructure represents the UsageParameterPrice_VersionedChildStructure element
// Type for a USAGE PARAMETER PRICE.
type UsageParameterPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	AdditionalDriverOptionRef *AdditionalDriverOptionRef `xml:"AdditionalDriverOptionRef,omitempty" json:"AdditionalDriverOptionRef,omitempty"`
	RentalOptionRef *RentalOptionRef `xml:"RentalOptionRef,omitempty" json:"RentalOptionRef,omitempty"`
	RentalPenaltyPolicyRef *RentalPenaltyPolicyRef `xml:"RentalPenaltyPolicyRef,omitempty" json:"RentalPenaltyPolicyRef,omitempty"`
	SalesOfferPackageEntitlementGivenRef *SalesOfferPackageEntitlementGivenRef `xml:"SalesOfferPackageEntitlementGivenRef,omitempty" json:"SalesOfferPackageEntitlementGivenRef,omitempty"`
	SalesOfferPackageEntitlementRequiredRef *SalesOfferPackageEntitlementRequiredRef `xml:"SalesOfferPackageEntitlementRequiredRef,omitempty" json:"SalesOfferPackageEntitlementRequiredRef,omitempty"`
	MinimumStayRef *MinimumStayRef `xml:"MinimumStayRef,omitempty" json:"MinimumStayRef,omitempty"`
	InterchangingRef *InterchangingRef `xml:"InterchangingRef,omitempty" json:"InterchangingRef,omitempty"`
	FrequencyOfUseRef *FrequencyOfUseRef `xml:"FrequencyOfUseRef,omitempty" json:"FrequencyOfUseRef,omitempty"`
	SuspendingRef *SuspendingRef `xml:"SuspendingRef,omitempty" json:"SuspendingRef,omitempty"`
	UsageValidityPeriodRef *UsageValidityPeriodRef `xml:"UsageValidityPeriodRef,omitempty" json:"UsageValidityPeriodRef,omitempty"`
	StepLimitRef *StepLimitRef `xml:"StepLimitRef,omitempty" json:"StepLimitRef,omitempty"`
	RoutingRef *RoutingRef `xml:"RoutingRef,omitempty" json:"RoutingRef,omitempty"`
	RoundTripRef *RoundTripRef `xml:"RoundTripRef,omitempty" json:"RoundTripRef,omitempty"`
	LuggageAllowanceRef *LuggageAllowanceRef `xml:"LuggageAllowanceRef,omitempty" json:"LuggageAllowanceRef,omitempty"`
	EntitlementGivenRef *EntitlementGivenRef `xml:"EntitlementGivenRef,omitempty" json:"EntitlementGivenRef,omitempty"`
	EntitlementRequiredRef *EntitlementRequiredRef `xml:"EntitlementRequiredRef,omitempty" json:"EntitlementRequiredRef,omitempty"`
	EligibilityChangePolicyRef *EligibilityChangePolicyRef `xml:"EligibilityChangePolicyRef,omitempty" json:"EligibilityChangePolicyRef,omitempty"`
	GroupTicketRef *GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	CommercialProfileRef *CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
	VehiclePoolerProfileRef *VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef *CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef *UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	ProfileParameterRef *ProfileParameterRef `xml:"ProfileParameterRef,omitempty" json:"ProfileParameterRef,omitempty"`
	SubscribingRef *SubscribingRef `xml:"SubscribingRef,omitempty" json:"SubscribingRef,omitempty"`
	PenaltyPolicyRef *PenaltyPolicyRef `xml:"PenaltyPolicyRef,omitempty" json:"PenaltyPolicyRef,omitempty"`
	ChargingPolicyRef *ChargingPolicyRef `xml:"ChargingPolicyRef,omitempty" json:"ChargingPolicyRef,omitempty"`
	TransferabilityRef *TransferabilityRef `xml:"TransferabilityRef,omitempty" json:"TransferabilityRef,omitempty"`
	ReplacingRef *ReplacingRef `xml:"ReplacingRef,omitempty" json:"ReplacingRef,omitempty"`
	RefundingRef *RefundingRef `xml:"RefundingRef,omitempty" json:"RefundingRef,omitempty"`
	ExchangingRef *ExchangingRef `xml:"ExchangingRef,omitempty" json:"ExchangingRef,omitempty"`
	ResellingRef *ResellingRef `xml:"ResellingRef,omitempty" json:"ResellingRef,omitempty"`
	CancellingRef *CancellingRef `xml:"CancellingRef,omitempty" json:"CancellingRef,omitempty"`
	ReservingRef *ReservingRef `xml:"ReservingRef,omitempty" json:"ReservingRef,omitempty"`
	BookingPolicyRef *BookingPolicyRef `xml:"BookingPolicyRef,omitempty" json:"BookingPolicyRef,omitempty"`
	PurchaseWindowRef *PurchaseWindowRef `xml:"PurchaseWindowRef,omitempty" json:"PurchaseWindowRef,omitempty"`
}

// TypeOfUsageParametersRelStructure represents the typeOfUsageParameters_RelStructure element
// Type for a list of TYPE OF USAGE PARAMETERs.
type TypeOfUsageParametersRelStructure struct {
	ContainmentAggregationStructure
	TypeOfUsageParameterRef []TypeOfUsageParameterRef `xml:"TypeOfUsageParameterRef,omitempty" json:"TypeOfUsageParameterRef,omitempty"`
	// A TYPE OF USAGE PARAMETER specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	TypeOfUsageParameter []TypeOfUsageParameter `xml:"TypeOfUsageParameter,omitempty" json:"TypeOfUsageParameter,omitempty"`
}

// TypeOfUsageParameterVersionStructure represents the TypeOfUsageParameter_VersionStructure element
// Type for TYPE OF USAGE PARAMETER.
type TypeOfUsageParameterVersionStructure struct {
	TypeOfValueVersionStructure
}

// UsageParameterPrice represents the UsageParameterPrice element
// A set of all possible price features of a FARE USAGE PARAMETER: default total price, discount in value or percentage etc.
type UsageParameterPrice struct {
	UsageParameterPriceVersionedChildStructure
}

// TypeOfUsageParameter represents the TypeOfUsageParameter element
// Category of USAGE PARAMETER user
type TypeOfUsageParameter struct {
	TypeOfUsageParameterVersionStructure
}

// AccessRightParameterAssignmentsInFrameRelStructure represents the accessRightParameterAssignmentsInFrame_RelStructure element
// The assignment of a fare collection parameter (referring to geography, time, quality or usage) to an element of a fare system (access right, validated access, control mean, etc.).
type AccessRightParameterAssignmentsInFrameRelStructure struct {
	FrameContainmentStructure
	CustomerPurchaseParameterAssignment []CustomerPurchaseParameterAssignment `xml:"CustomerPurchaseParameterAssignment,omitempty" json:"CustomerPurchaseParameterAssignment,omitempty"`
	SpecificParameterAssignment []SpecificParameterAssignment `xml:"SpecificParameterAssignment,omitempty" json:"SpecificParameterAssignment,omitempty"`
	GenericParameterAssignmentInContext []GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
	GenericParameterAssignment []GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	ValidityParameterAssignment []ValidityParameterAssignment `xml:"ValidityParameterAssignment,omitempty" json:"ValidityParameterAssignment,omitempty"`
	AccessRightParameterAssignment []AccessRightParameterAssignment `xml:"AccessRightParameterAssignment,omitempty" json:"AccessRightParameterAssignment,omitempty"`
}

// ValidityParameterAssignmentsInFrameRelStructure represents the validityParameterAssignmentsInFrame_RelStructure element
// The assignment of a fare collection parameter (referring to geography, time, quality or usage) to an element of a fare system (access right, validated access, control mean, etc.).
type ValidityParameterAssignmentsInFrameRelStructure struct {
	FrameContainmentStructure
	ValidityParameterAssignment []ValidityParameterAssignment `xml:"ValidityParameterAssignment" json:"ValidityParameterAssignment"`
}

// AccessRightParameterAssignmentsRelStructure represents the accessRightParameterAssignments_RelStructure element
// Type for a list of FARE ACCESS RIGHT PARAMETERs.
type AccessRightParameterAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	CustomerPurchaseParameterAssignment []CustomerPurchaseParameterAssignment `xml:"CustomerPurchaseParameterAssignment,omitempty" json:"CustomerPurchaseParameterAssignment,omitempty"`
	SpecificParameterAssignment []SpecificParameterAssignment `xml:"SpecificParameterAssignment,omitempty" json:"SpecificParameterAssignment,omitempty"`
	GenericParameterAssignmentInContext []GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
	GenericParameterAssignment []GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	ValidityParameterAssignment []ValidityParameterAssignment `xml:"ValidityParameterAssignment,omitempty" json:"ValidityParameterAssignment,omitempty"`
	AccessRightParameterAssignment []AccessRightParameterAssignment `xml:"AccessRightParameterAssignment,omitempty" json:"AccessRightParameterAssignment,omitempty"`
}

// AccessRightParameterAssignmentVersionStructure represents the AccessRightParameterAssignment_VersionStructure element
// Type for ACCESS RIGHT PARAMETER ASSIGNMENT.
type AccessRightParameterAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	// Whether values are allowed ro forbiden. Defaullt is allowed.
	IsAllowed *bool `xml:"IsAllowed,omitempty" json:"IsAllowed,omitempty"`
	TypeOfAccessRightAssignmentRef *TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef,omitempty" json:"TypeOfAccessRightAssignmentRef,omitempty"`
	// Whether ACCESS RIGHT ASSIGNMENT is chargable or not.
	ChargingBasis *ChargingBasisEnumeration `xml:"ChargingBasis,omitempty" json:"ChargingBasis,omitempty"`
	ValidableElementRef *ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	ControllableElementRef *ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ParkingTariffRef *ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef *TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	FareStructureElementRef *FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	ControllableElementInSequenceRef *ControllableElementInSequenceRef `xml:"ControllableElementInSequenceRef,omitempty" json:"ControllableElementInSequenceRef,omitempty"`
	FareStructureElementInSequenceRef *FareStructureElementInSequenceRef `xml:"FareStructureElementInSequenceRef,omitempty" json:"FareStructureElementInSequenceRef,omitempty"`
	AccessRightInProductRef *AccessRightInProductRef `xml:"AccessRightInProductRef,omitempty" json:"AccessRightInProductRef,omitempty"`
	DistanceMatrixElementRef *DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	DistanceMatrixElementInverseRef *DistanceMatrixElementInverseRef `xml:"DistanceMatrixElementInverseRef,omitempty" json:"DistanceMatrixElementInverseRef,omitempty"`
	DistanceMatrixElementView *DistanceMatrixElementView `xml:"DistanceMatrixElementView,omitempty" json:"DistanceMatrixElementView,omitempty"`
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	GroupOfDistanceMatrixElementsRef *GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfSalesOfferPackagesRef *GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
	// Operator for Grouping Scope Elements: logical OR, AND, NOT. Default is AND.
	LimitationGroupingType *LogicalOperationEnumeration `xml:"LimitationGroupingType,omitempty" json:"LimitationGroupingType,omitempty"`
	// Where parameter is a group (GROUP of xxx), operator for distinguishing between whole set and item interpretation of elements which are sets of elements.
	LimitationSetSelectionType *SetOperatorEnumeration `xml:"LimitationSetSelectionType,omitempty" json:"LimitationSetSelectionType,omitempty"`
	Limitations *UsageParametersRelStructure `xml:"limitations,omitempty" json:"limitations,omitempty"`
	// Comparison Operator for comparing Validity Erlements valeus. Defalut is EQ.
	ValidityParameterAssignmentType *RelativeOperatorEnumeration `xml:"ValidityParameterAssignmentType,omitempty" json:"ValidityParameterAssignmentType,omitempty"`
	// Operator for Grouping Scope Elements: logical OR, AND, NOT. Default is AND.
	ValidityParameterGroupingType *LogicalOperationEnumeration `xml:"ValidityParameterGroupingType,omitempty" json:"ValidityParameterGroupingType,omitempty"`
	// Where one or more parameter is a group containing multiple elements, (GROUP OF xxx), set operator for distinguishing between whole set and item interpretation of elements which are sets of elements.
	ValidityParameterSetSelectionType *SetOperatorEnumeration `xml:"ValidityParameterSetSelectionType,omitempty" json:"ValidityParameterSetSelectionType,omitempty"`
	// Temporal Validity parameters for the assignment.
	TemporalValidityParameters *TemporalValidityParametersRelStructure `xml:"temporalValidityParameters,omitempty" json:"temporalValidityParameters,omitempty"`
	// Validity parameters for the assignment.
	ValidityParameters *ValidityParametersRelStructure `xml:"validityParameters,omitempty" json:"validityParameters,omitempty"`
}

// TemporalValidityParametersRelStructure represents the temporalValidityParameters_RelStructure element
// One to many Relationship for temporal validity parameters.
type TemporalValidityParametersRelStructure struct {
	OneToManyRelationshipStructure
	FareDayTypeRef []FareDayTypeRef `xml:"FareDayTypeRef,omitempty" json:"FareDayTypeRef,omitempty"`
	DayTypeRef []DayTypeRef `xml:"DayTypeRef,omitempty" json:"DayTypeRef,omitempty"`
	GroupOfTimebandsRef []GroupOfTimebandsRef `xml:"GroupOfTimebandsRef,omitempty" json:"GroupOfTimebandsRef,omitempty"`
	OperatingDayRef []OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	UicOperatingPeriodRef []UicOperatingPeriodRef `xml:"UicOperatingPeriodRef,omitempty" json:"UicOperatingPeriodRef,omitempty"`
	OperatingPeriodRef []OperatingPeriodRef `xml:"OperatingPeriodRef,omitempty" json:"OperatingPeriodRef,omitempty"`
	AvailabilityConditionRef []AvailabilityConditionRef `xml:"AvailabilityConditionRef,omitempty" json:"AvailabilityConditionRef,omitempty"`
	ValidityRuleParameterRef []ValidityRuleParameterRef `xml:"ValidityRuleParameterRef,omitempty" json:"ValidityRuleParameterRef,omitempty"`
	ValidityTriggerRef []ValidityTriggerRef `xml:"ValidityTriggerRef,omitempty" json:"ValidityTriggerRef,omitempty"`
	ValidityConditionRef []ValidityConditionRef `xml:"ValidityConditionRef,omitempty" json:"ValidityConditionRef,omitempty"`
}

// ValidityParametersRelStructure represents the validityParameters_RelStructure element
// One to many Relationship for scoping validity parameters.
type ValidityParametersRelStructure struct {
	OneToManyRelationshipStructure
	// Vehicle Modes to which ACCESS RIGHTs  apply. DEPRECATED - keep for backwards capability
	VehicleModes []VehicleModeEnumeration `xml:"VehicleModes,omitempty" json:"VehicleModes,omitempty"`
	// Any mode to which Mode validity parameters apply +v1.2.2
	TransportModes []AllModesEnumeration `xml:"TransportModes,omitempty" json:"TransportModes,omitempty"`
	TransportSubmode []TransportSubmode `xml:"TransportSubmode,omitempty" json:"TransportSubmode,omitempty"`
	PersonalModeOfOperationRef []PersonalModeOfOperationRef `xml:"PersonalModeOfOperationRef,omitempty" json:"PersonalModeOfOperationRef,omitempty"`
	VehiclePoolingRef []VehiclePoolingRef `xml:"VehiclePoolingRef,omitempty" json:"VehiclePoolingRef,omitempty"`
	VehicleSharingRef []VehicleSharingRef `xml:"VehicleSharingRef,omitempty" json:"VehicleSharingRef,omitempty"`
	VehicleRentalRef []VehicleRentalRef `xml:"VehicleRentalRef,omitempty" json:"VehicleRentalRef,omitempty"`
	FlexibleModeOfOperationRef []FlexibleModeOfOperationRef `xml:"FlexibleModeOfOperationRef,omitempty" json:"FlexibleModeOfOperationRef,omitempty"`
	ScheduledModeOfOperationRef []ScheduledModeOfOperationRef `xml:"ScheduledModeOfOperationRef,omitempty" json:"ScheduledModeOfOperationRef,omitempty"`
	GroupOfOperatorsRef []GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	AllAuthoritiesRef []AllAuthoritiesRef `xml:"AllAuthoritiesRef,omitempty" json:"AllAuthoritiesRef,omitempty"`
	AllOperatorsRef []AllOperatorsRef `xml:"AllOperatorsRef,omitempty" json:"AllOperatorsRef,omitempty"`
	AllPublicTransportOrganisationsRef []AllPublicTransportOrganisationsRef `xml:"AllPublicTransportOrganisationsRef,omitempty" json:"AllPublicTransportOrganisationsRef,omitempty"`
	AllTransportOrganisationsRef []AllTransportOrganisationsRef `xml:"AllTransportOrganisationsRef,omitempty" json:"AllTransportOrganisationsRef,omitempty"`
	AllOrganisationsRef []AllOrganisationsRef `xml:"AllOrganisationsRef,omitempty" json:"AllOrganisationsRef,omitempty"`
	RetailConsortiumRef []RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef []OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef []GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef []ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef []ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef []TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef []OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef []AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef []OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef []OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	NetworkRef []NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef []GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	FlexibleLineRef []FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef []LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	TypeOfLineRef []TypeOfLineRef `xml:"TypeOfLineRef,omitempty" json:"TypeOfLineRef,omitempty"`
	TariffZoneRef []TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
	FareZoneRef []FareZoneRef `xml:"FareZoneRef,omitempty" json:"FareZoneRef,omitempty"`
	FareSectionRef []FareSectionRef `xml:"FareSectionRef,omitempty" json:"FareSectionRef,omitempty"`
	FareScheduledStopPointRef []FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef []ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	VehicleMeetingPointRef []VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	VehicleMeetingLinkRef []VehicleMeetingLinkRef `xml:"VehicleMeetingLinkRef,omitempty" json:"VehicleMeetingLinkRef,omitempty"`
	VehiclePoolingMeetingPlaceRef []VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef []VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	// Use of PLACE.
	PlaceUse []PlaceUseEnumeration `xml:"PlaceUse,omitempty" json:"PlaceUse,omitempty"`
	TopographicPlaceRef []TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	PostalAddressRef []PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef []RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef []AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
	VehicleStoppingPositionRef []VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef []VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef []BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef []AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef []TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef []QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef []StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef []VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef []MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef []VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef []ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef []VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef []VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef []TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef []ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef []PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef []StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef []StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef []ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef []ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef []ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef []PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef []PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef []VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef []EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef []SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef []TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef []StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef []ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef []PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef []ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef []SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef []SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	PointOfInterestClassificationRef []PointOfInterestClassificationRef `xml:"PointOfInterestClassificationRef,omitempty" json:"PointOfInterestClassificationRef,omitempty"`
	MobilityServiceConstraintZoneRef []MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	// Whether this is a direct i.e. no changes required point to point or indirect.
	RoutingType []RoutingTypeEnumeration `xml:"RoutingType,omitempty" json:"RoutingType,omitempty"`
	// Whether use SERIES, or FARE SECTION in forwards, backwards or both directions.
	Directions []RelativeDirectionEnumeration `xml:"Directions,omitempty" json:"Directions,omitempty"`
	SeriesConstraintRef []SeriesConstraintRef `xml:"SeriesConstraintRef,omitempty" json:"SeriesConstraintRef,omitempty"`
	ServiceJourneyPatternRef []ServiceJourneyPatternRef `xml:"ServiceJourneyPatternRef,omitempty" json:"ServiceJourneyPatternRef,omitempty"`
	SingleJourneyPathRef []SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	ClassOfUseRef []ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	FareClass []FareClass `xml:"FareClass,omitempty" json:"FareClass,omitempty"`
	ServiceFacilitySetRef []ServiceFacilitySetRef `xml:"ServiceFacilitySetRef,omitempty" json:"ServiceFacilitySetRef,omitempty"`
	SiteFacilitySetRef []SiteFacilitySetRef `xml:"SiteFacilitySetRef,omitempty" json:"SiteFacilitySetRef,omitempty"`
	FacilitySetRef []FacilitySetRef `xml:"FacilitySetRef,omitempty" json:"FacilitySetRef,omitempty"`
	TypeOfProductCategoryRef []TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TemplateServiceJourneyRef []TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef []ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	TrainNumberRef []TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
	GroupOfServicesRef []GroupOfServicesRef `xml:"GroupOfServicesRef,omitempty" json:"GroupOfServicesRef,omitempty"`
	SingleJourneyRef []SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	GroupOfSingleJourneysRef []GroupOfSingleJourneysRef `xml:"GroupOfSingleJourneysRef,omitempty" json:"GroupOfSingleJourneysRef,omitempty"`
	SimpleVehicleTypeRef []SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef []CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef []TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef []VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef []TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	VehicleModelRef []VehicleModelRef `xml:"VehicleModelRef,omitempty" json:"VehicleModelRef,omitempty"`
	TypeOfServiceRef []TypeOfServiceRef `xml:"TypeOfServiceRef,omitempty" json:"TypeOfServiceRef,omitempty"`
	CycleModelProfileRef []CycleModelProfileRef `xml:"CycleModelProfileRef,omitempty" json:"CycleModelProfileRef,omitempty"`
	CarModelProfileRef []CarModelProfileRef `xml:"CarModelProfileRef,omitempty" json:"CarModelProfileRef,omitempty"`
	OnlineServiceRef []OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef []VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef []VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef []ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef []TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef []CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	AssistanceBookingServiceRef []AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef []CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef []RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef []MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef []HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef []CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef []MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef []LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef []LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef []LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef []ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef []CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef []AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef []TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef []LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	TrainElementRef []TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	TrainComponentLabelAssignmentRef []TrainComponentLabelAssignmentRef `xml:"TrainComponentLabelAssignmentRef,omitempty" json:"TrainComponentLabelAssignmentRef,omitempty"`
	PassengerSeatRef []PassengerSeatRef `xml:"PassengerSeatRef,omitempty" json:"PassengerSeatRef,omitempty"`
	VehicleRef []VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	TypeOfFareStructureFactorRef []TypeOfFareStructureFactorRef `xml:"TypeOfFareStructureFactorRef,omitempty" json:"TypeOfFareStructureFactorRef,omitempty"`
	TypeOfFareStructureElementRef []TypeOfFareStructureElementRef `xml:"TypeOfFareStructureElementRef,omitempty" json:"TypeOfFareStructureElementRef,omitempty"`
	TypeOfTariffRef []TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	LimitingRuleRef []LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef []DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef []PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	TypeOfPricingRuleRef []TypeOfPricingRuleRef `xml:"TypeOfPricingRuleRef,omitempty" json:"TypeOfPricingRuleRef,omitempty"`
	ChargingMomentRef []ChargingMomentRef `xml:"ChargingMomentRef,omitempty" json:"ChargingMomentRef,omitempty"`
	TypeOfFareProductRef []TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	TypeOfUsageParameterRef []TypeOfUsageParameterRef `xml:"TypeOfUsageParameterRef,omitempty" json:"TypeOfUsageParameterRef,omitempty"`
	TypeOfConcessionRef []TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	TypeOfSalesOfferPackageRef []TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	TypeOfTravelDocumentRef []TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	TypeOfMachineReadabilityRef []TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef,omitempty" json:"TypeOfMachineReadabilityRef,omitempty"`
	DistributionChannelRef []DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	GroupOfDistributionChannelsRef []GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	FulfilmentMethodRef []FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	TypeOfPaymentMethodRef []TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
}

// ValidityParameterAssignmentsRelStructure represents the validityParameterAssignments_RelStructure element
// Type for a list of VALIDITY PARAMETER ASSIGNMENT.
type ValidityParameterAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	CustomerPurchaseParameterAssignment []CustomerPurchaseParameterAssignment `xml:"CustomerPurchaseParameterAssignment,omitempty" json:"CustomerPurchaseParameterAssignment,omitempty"`
	SpecificParameterAssignment []SpecificParameterAssignment `xml:"SpecificParameterAssignment,omitempty" json:"SpecificParameterAssignment,omitempty"`
	GenericParameterAssignmentInContext []GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
	GenericParameterAssignment []GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	ValidityParameterAssignment []ValidityParameterAssignment `xml:"ValidityParameterAssignment,omitempty" json:"ValidityParameterAssignment,omitempty"`
	AccessRightParameterAssignment []AccessRightParameterAssignment `xml:"AccessRightParameterAssignment,omitempty" json:"AccessRightParameterAssignment,omitempty"`
}

// ValidityParameterAssignmentVersionStructure represents the ValidityParameterAssignment_VersionStructure element
// Type for VALIDITY PARAMETER ASSIGNMENT.
type ValidityParameterAssignmentVersionStructure struct {
	AccessRightParameterAssignmentVersionStructure
	TimeIntervalRef *TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	ParkingChargeBandRef *ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef *TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	GeographicalIntervalRef *GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	GeographicalStructureFactorRef *GeographicalStructureFactorRef `xml:"GeographicalStructureFactorRef,omitempty" json:"GeographicalStructureFactorRef,omitempty"`
	FareQuotaFactorRef *FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef *FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef *QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
}

// GenericParameterAssignmentsRelStructure represents the genericParameterAssignments_RelStructure element
// Type for a list of FARE ACCESS RIGHT PARAMETERs.
type GenericParameterAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	GenericParameterAssignment []GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	GenericParameterAssignmentInContext []GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
}

// GenericParameterAssignmentVersionStructure represents the GenericParameterAssignment_VersionStructure element
// Type for Generic PARAMETER ASSIGNMENT.
type GenericParameterAssignmentVersionStructure struct {
	ValidityParameterAssignmentVersionStructure
	// Operator for Grouping Scope Elements. Default is OR.
	IncludesGroupingType *LogicalOperationEnumeration `xml:"IncludesGroupingType,omitempty" json:"IncludesGroupingType,omitempty"`
	// Assignments Logically included in this group. Groups are combined acording to the Operator.
	Includes *GenericParameterAssignmentsRelStructure `xml:"includes,omitempty" json:"includes,omitempty"`
}

// TypeOfAccessRightAssignmentsRelStructure represents the TypeOfAccessRightAssignments_RelStructure element
// Type for a list of TYPE OF ACCESS RIGHT ASSIGNMENTs.
type TypeOfAccessRightAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	TypeOfAccessRightAssignmentRef []TypeOfAccessRightAssignmentRef `xml:"TypeOfAccessRightAssignmentRef,omitempty" json:"TypeOfAccessRightAssignmentRef,omitempty"`
	// A TYPE OF ACCESS RIGHT ASSIGNMENT specifying access rights for the ACCESS RIGHT ASSIGNMENT ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	TypeOfAccessRightAssignment []TypeOfAccessRightAssignment `xml:"TypeOfAccessRightAssignment,omitempty" json:"TypeOfAccessRightAssignment,omitempty"`
}

// TypeOfAccessRightAssignmentVersionStructure represents the TypeOfAccessRightAssignment_VersionStructure element
// Type for TYPE OF ACCESS RIGHT ASSIGNMENT.
type TypeOfAccessRightAssignmentVersionStructure struct {
	TypeOfEntityVersionStructure
}

// AccessRightParameterAssignment represents the AccessRightParameterAssignment element
// The assignment of a fare parameter (referring to geography, time, quality or usage) to an element of a fare system (access right, validated access, control mean, etc.).
type AccessRightParameterAssignment struct {
	AccessRightParameterAssignmentVersionStructure
}

// ValidityParameterAssignment represents the ValidityParameterAssignment element
// An ACCESS RIGHT PARAMETER ASSIGNMENT relating a fare collection parameter to a theoretical FARE PRODUCT (or one of its components) or a SALES OFFER PACKAGE.
type ValidityParameterAssignment struct {
	ValidityParameterAssignmentVersionStructure
}

// GenericParameterAssignment represents the GenericParameterAssignment element
// A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
type GenericParameterAssignment struct {
	GenericParameterAssignmentVersionStructure
}

// GenericParameterAssignmentInContext represents the GenericParameterAssignmentInContext element
// Optimisation: Can be used without id constraintA VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
type GenericParameterAssignmentInContext struct {
	GenericParameterAssignmentVersionStructure
}

// TypeOfAccessRightAssignment represents the TypeOfAccessRightAssignment element
// A classification of ACCESS RIGHT ASSIGNMENTs expressing their general functionalities and local functional characteristics specific to the operator. Types of ACCESS RIGHT ASSIGNMENTs like e.g. throw-away ticket, throw-away ticket unit, value card, electronic purse allowing access, public transport credit card etc. may be used to define these categories.
type TypeOfAccessRightAssignment struct {
	TypeOfAccessRightAssignmentVersionStructure
}

// ValidableElementsInFrameRelStructure represents the validableElementsInFrame_RelStructure element
// Type for containment in frame of VALIDABLE ELEMENTs.
type ValidableElementsInFrameRelStructure struct {
	FrameContainmentStructure
	ValidableElement []ValidableElement `xml:"ValidableElement" json:"ValidableElement"`
}

// ValidableElementsRelStructure represents the validableElements_RelStructure element
// Type for a list of FARE PRODUCT PRICEs.
type ValidableElementsRelStructure struct {
	StrictContainmentAggregationStructure
	ValidableElementRef []ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	ValidableElement []ValidableElement `xml:"ValidableElement,omitempty" json:"ValidableElement,omitempty"`
}

// ValidableElementVersionStructure represents the ValidableElement_VersionStructure element
// Type for VALIDABLE ELEMENT.
type ValidableElementVersionStructure struct {
	PriceableObjectVersionStructure
	// FARE STRUCTURE ELEMENts associated with VALIDABLE ELEMENT.
	FareStructureElements *FareStructureElementRefsRelStructure `xml:"fareStructureElements,omitempty" json:"fareStructureElements,omitempty"`
	// FARE STRUCTURE ELEMENts associated with VALIDABLE ELEMENT.
	FareElementsInSequence *FareElementInSequenceRefsRelStructure `xml:"fareElementsInSequence,omitempty" json:"fareElementsInSequence,omitempty"`
	// USAGE DISCOUNT RIGHTs  associated with VALIDABLE ELEMENT.
	DiscountRights *DiscountRightRefsRelStructure `xml:"discountRights,omitempty" json:"discountRights,omitempty"`
	// AMOUNT OF PRICE units associated with VALIDABLE ELEMENT.
	AmountOfPriceUnits *AmountOfPriceUnitRefsRelStructure `xml:"amountOfPriceUnits,omitempty" json:"amountOfPriceUnits,omitempty"`
	// THIRD PARTY PRODUCTS   associated with VALIDABLE ELEMENT.
	ThirdPartyProducts *ThirdPartyProductRefsRelStructure `xml:"thirdPartyProducts,omitempty" json:"thirdPartyProducts,omitempty"`
	// VALIDITY PARAMETER ASSIGNMENTs associated with VALIDABLE. ELEMENT.
	ValidityParameterAssignments *ValidityParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	// PRICEs for VALIDABLE ELEMENT.
	Prices *ValidableElementPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// ValidableElementPricesRelStructure represents the validableElementPrices_RelStructure element
// Type for a list of VALIDABLE ELEMENT PRICEs.
type ValidableElementPricesRelStructure struct {
	StrictContainmentAggregationStructure
	ValidableElementPriceRef []ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	ValidableElementPrice []ValidableElementPrice `xml:"ValidableElementPrice,omitempty" json:"ValidableElementPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// ValidableElementPriceVersionedChildStructure represents the ValidableElementPrice_VersionedChildStructure element
// Type for a VALIDABLE ELEMENT PRICE.
type ValidableElementPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	ValidableElementRef *ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
}

// ControllableElementsInFrameRelStructure represents the controllableElementsInFrame_RelStructure element
// Type for containment in frame of CONTROLLABLE ELEMENTs.
type ControllableElementsInFrameRelStructure struct {
	FrameContainmentStructure
	ControllableElement []ControllableElement `xml:"ControllableElement" json:"ControllableElement"`
}

// ControllableElementsRelStructure represents the controllableElements_RelStructure element
// Type for a list of CONTROLLABLE ELEMENT PRICEs.
type ControllableElementsRelStructure struct {
	StrictContainmentAggregationStructure
	ControllableElementRef []ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	ControllableElement []ControllableElement `xml:"ControllableElement,omitempty" json:"ControllableElement,omitempty"`
}

// ControllableElementVersionStructure represents the ControllableElement_VersionStructure element
// Type for CONTROLLABLE ELEMENT.
type ControllableElementVersionStructure struct {
	PriceableObjectVersionStructure
	// ACCESS RIGHT PARAMETER ASSIGNMENTs associated with VALIDABLE ELEMENT.
	AccessRightParameterAssignments *AccessRightParameterAssignmentsRelStructure `xml:"accessRightParameterAssignments,omitempty" json:"accessRightParameterAssignments,omitempty"`
	// VALIDITY PARAMETER ASSIGNMENTs associated with VALIDABLE. ELEMENT.
	ControllableElementsInSequence *ControllableElementsInSequenceRelStructure `xml:"controllableElementsInSequence,omitempty" json:"controllableElementsInSequence,omitempty"`
	// PRICEs for CONTROLLABLE ELEMENT.
	Prices *ControllableElementPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// ControllableElementsInSequenceRelStructure represents the controllableElementsInSequence_RelStructure element
// Type for a list of CONTROLLABLE ELEMENT IN SEQUENCEs.
type ControllableElementsInSequenceRelStructure struct {
	StrictContainmentAggregationStructure
	ControllableElementInSequenceRef []ControllableElementInSequenceRef `xml:"ControllableElementInSequenceRef,omitempty" json:"ControllableElementInSequenceRef,omitempty"`
	ControllableElementInSequence []ControllableElementInSequence `xml:"ControllableElementInSequence,omitempty" json:"ControllableElementInSequence,omitempty"`
}

// ControllableElementInSequenceVersionedChildStructure represents the ControllableElementInSequence_VersionedChildStructure element
// Type for CONTROLLABLE ELEMENT IN SEQUENCE.
type ControllableElementInSequenceVersionedChildStructure struct {
	FareElementInSequenceVersionedChildStructure
	ControllableElementRef *ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
	FareStructureElementRef *FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	// ACCESS RIGHT PARAMETER ASSIGNMENTs that apply to the VALIDABLE ELEMENT.
	AccessRightParameterAssignments *AccessRightParameterAssignmentsRelStructure `xml:"accessRightParameterAssignments,omitempty" json:"accessRightParameterAssignments,omitempty"`
}

// ControllableElementPricesRelStructure represents the controllableElementPrices_RelStructure element
// Type for a list of CONTROLLABLE ELEMENT PRICEs.
type ControllableElementPricesRelStructure struct {
	StrictContainmentAggregationStructure
	ControllableElementPriceRef []ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	ControllableElementPrice []ControllableElementPrice `xml:"ControllableElementPrice,omitempty" json:"ControllableElementPrice,omitempty"`
}

// ControllableElementPriceVersionedChildStructure represents the ControllableElementPrice_VersionedChildStructure element
// Type for a CONTROLLABLE ELEMENT PRICE.
type ControllableElementPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	ControllableElementRef *ControllableElementRef `xml:"ControllableElementRef,omitempty" json:"ControllableElementRef,omitempty"`
}

// ValidableElement represents the ValidableElement element
// A sequence or set of FARE STRUCTURE ELEMENTs, grouped together to be validated in one go.
type ValidableElement struct {
	ValidableElementVersionStructure
}

// ValidableElementPrice represents the ValidableElementPrice element
// A set of all possible price features of a VALIDABLE ELEMENT ELEMENT: default total price, discount in value or percentage etc.
type ValidableElementPrice struct {
	ValidableElementPriceVersionedChildStructure
}

// ControllableElement represents the ControllableElement element
// The smallest controllable element of public transport consumption, all along which any VALIDITY PARAMETER ASSIGNMENT remains valid.
type ControllableElement struct {
	ControllableElementVersionStructure
}

// ControllableElementInSequence represents the ControllableElementInSequence element
// A CONTROLLABLE ELEMENT as a part of a FARE STRUCTURE ELEMENT, including its possible order in the sequence of CONTROLLABLE ELEMENTs grouped together to form that FARE STRUCTURE ELEMENT, and its possible quantitative limitation.
type ControllableElementInSequence struct {
	ControllableElementInSequenceVersionedChildStructure
}

// ControllableElementPrice represents the ControllableElementPrice element
// A set of all possible price features of a CONTROLLABLE ELEMENT ELEMENT: default total price, discount in value or percentage etc.
type ControllableElementPrice struct {
	ControllableElementPriceVersionedChildStructure
}

// QualityStructureFactorsRelStructure represents the qualityStructureFactors_RelStructure element
// Type for a list of QUALITY STRUCTURE FACTOR.
type QualityStructureFactorsRelStructure struct {
	StrictContainmentAggregationStructure
	FareQuotaFactorRef []FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef []FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef []QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	FareQuotaFactor []FareQuotaFactor `xml:"FareQuotaFactor,omitempty" json:"FareQuotaFactor,omitempty"`
	FareDemandFactor []FareDemandFactor `xml:"FareDemandFactor,omitempty" json:"FareDemandFactor,omitempty"`
	QualityStructureFactor []QualityStructureFactor `xml:"QualityStructureFactor,omitempty" json:"QualityStructureFactor,omitempty"`
}

// QualityStructureFactorVersionStructure represents the QualityStructureFactor_VersionStructure element
// Type for QUALITY STRUCTURE FACTOR.
type QualityStructureFactorVersionStructure struct {
	FareStructureFactorVersionStructure
	// Value associated with QUALITY STRUCTURE FACTOR.
	Value *interface{} `xml:",chardata" json:"value"`
	// PRICEs for QUALITY STRUCTURE FACTOR.
	Prices *QualityStructureFactorPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// QualityStructureFactorPricesRelStructure represents the qualityStructureFactorPrices_RelStructure element
// Type for a list of QUALITY STRUCTURE FACTOR PRICEs.
type QualityStructureFactorPricesRelStructure struct {
	StrictContainmentAggregationStructure
	QualityStructureFactorPriceRef []QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	// A set of all possible price features of a QUALITY STRUCTURE FACTOR : default total price, discount in value or percentage etc.
	QualityStructureFactorPrice []QualityStructureFactorPriceVersionedChildStructure `xml:"QualityStructureFactorPrice,omitempty" json:"QualityStructureFactorPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// QualityStructureFactorPriceVersionedChildStructure represents the QualityStructureFactorPrice_VersionedChildStructure element
// Type for a QUALITY STRUCTURE FACTOR PRICEs.
type QualityStructureFactorPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	FareQuotaFactorRef *FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef *FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef *QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
}

// FareDemandFactorsRelStructure represents the fareDemandFactors_RelStructure element
// Type for a list of FARE DEMAND FACTOR.
type FareDemandFactorsRelStructure struct {
	StrictContainmentAggregationStructure
	FareDemandFactorRef []FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	FareDemandFactor []FareDemandFactor `xml:"FareDemandFactor,omitempty" json:"FareDemandFactor,omitempty"`
}

// FareDemandFactorVersionStructure represents the FareDemandFactor_VersionStructure element
// Type for FARE DEMAND FACTOR.
type FareDemandFactorVersionStructure struct {
	QualityStructureFactorVersionStructure
	// Classification of demand using standard allowed values.
	FareDemandType *FareDemandTypeEnumeration `xml:"FareDemandType,omitempty" json:"FareDemandType,omitempty"`
	TimeDemandTypeRef *TimeDemandTypeRef `xml:"TimeDemandTypeRef,omitempty" json:"TimeDemandTypeRef,omitempty"`
	// Nature of constraint on uses of stop
	StopUseConstraint *StopUseConstraintEnumeration `xml:"StopUseConstraint,omitempty" json:"StopUseConstraint,omitempty"`
	// Start times at SCHEDULED STOP POINTS refining  FARE DEMAND FACTOR.
	StartTimesAtStopPoints *StartTimeAtStopPointsRelStructure `xml:"startTimesAtStopPoints,omitempty" json:"startTimesAtStopPoints,omitempty"`
}

// FareQuotaFactorsRelStructure represents the fareQuotaFactors_RelStructure element
// Type for a list of FARE QUOTA FACTOR.
type FareQuotaFactorsRelStructure struct {
	StrictContainmentAggregationStructure
	FareQuotaFactorRef []FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareQuotaFactor []FareQuotaFactor `xml:"FareQuotaFactor,omitempty" json:"FareQuotaFactor,omitempty"`
}

// FareQuotaFactorVersionStructure represents the FareQuotaFactor_VersionStructure element
// Type for FARE QUOTA FACTOR.
type FareQuotaFactorVersionStructure struct {
	QualityStructureFactorVersionStructure
	// Number of units available of product at a given price.
	NumberOfUnits *int `xml:"NumberOfUnits,omitempty" json:"NumberOfUnits,omitempty"`
}

// StartTimeAtStopPointsRelStructure represents the startTimeAtStopPoints_RelStructure element
// Type for a list of START TIME AT STOP POINT.
type StartTimeAtStopPointsRelStructure struct {
	StrictContainmentAggregationStructure
	StartTimeAtStopPointRef []StartTimeAtStopPointRef `xml:"StartTimeAtStopPointRef,omitempty" json:"StartTimeAtStopPointRef,omitempty"`
	StartTimeAtStopPoint []StartTimeAtStopPoint `xml:"StartTimeAtStopPoint,omitempty" json:"StartTimeAtStopPoint,omitempty"`
}

// StartTimeAtStopPointVersionedChildStructure represents the StartTimeAtStopPoint_VersionedChildStructure element
// Type for START TIME AT STOP POINT.
type StartTimeAtStopPointVersionedChildStructure struct {
	VersionedChildStructure
	FareDemandFactorRef *FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	FareScheduledStopPointRef *FareScheduledStopPointRef `xml:"FareScheduledStopPointRef,omitempty" json:"FareScheduledStopPointRef,omitempty"`
	ScheduledStopPointRef *ScheduledStopPointRef `xml:"ScheduledStopPointRef,omitempty" json:"ScheduledStopPointRef,omitempty"`
	// Time at stop at which FARE DEMAND PERIOD starts.
	StartTime *string `xml:"StartTime,omitempty" json:"StartTime,omitempty"`
	// Time at stop at whichARE DEMAND PERIODends.
	EndTime *string `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
	// Day Offset for end time from start time. 0= same day.
	DayOffset *int `xml:"DayOffset,omitempty" json:"DayOffset,omitempty"`
}

// QualityStructureFactor represents the QualityStructureFactor element
// The value of a QUALITY INTERVAL or a DISTANCE MATRIX ELEMENT expressed by a QUALITY UNIT.
type QualityStructureFactor struct {
	QualityStructureFactorVersionStructure
}

// QualityStructureFactorPrice represents the QualityStructureFactorPrice element
// A set of all possible price features of a QUALITY STRUCTURE FACTOR: default total price etc.
type QualityStructureFactorPrice struct {
	QualityStructureFactorPriceVersionedChildStructure
}

// FareDemandFactor represents the FareDemandFactor element
// The value of a QUALITY INTERVAL or a DISTANCE MATRIX ELEMENT expressed by a QUALITY UNIT.
type FareDemandFactor struct {
	FareDemandFactorVersionStructure
}

// FareQuotaFactor represents the FareQuotaFactor element
// A named set of parameters defining the number of quota fares available. of a given denomination.
type FareQuotaFactor struct {
	FareQuotaFactorVersionStructure
}

// StartTimeAtStopPoint represents the StartTimeAtStopPoint element
// A time at which a Fare demand  time band ( peak, off peak, etc  ) is deemed to begin  or end for trips at a particular SCHEDULED STOP POINT.
type StartTimeAtStopPoint struct {
	StartTimeAtStopPointVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// TimeUnitsRelStructure represents the timeUnits_RelStructure element
// Type for a list of TIME UNITs.
type TimeUnitsRelStructure struct {
	ContainmentAggregationStructure
	TimeUnitRef []TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	// A time UNIT specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	TimeUnit []TimeUnit `xml:"TimeUnit,omitempty" json:"TimeUnit,omitempty"`
}

// TimeUnitVersionStructure represents the TimeUnit_VersionStructure element
// Type for TIME UNIT.
type TimeUnitVersionStructure struct {
	FareUnitVersionStructure
	// Name of Class associated with uit, e.g. gDay, gTime, etc.
	Type *string `xml:"Type,omitempty" json:"Type,omitempty"`
	// Duration of Unit, eg   P1D,  P1S, etc.
	Duration *string `xml:"Duration,omitempty" json:"Duration,omitempty"`
	// PRICEs of TIME UNIT.
	Prices *TimeUnitPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// TimeIntervalsRelStructure represents the timeIntervals_RelStructure element
// Type for a list of TIME INTERVALs.
type TimeIntervalsRelStructure struct {
	ContainmentAggregationStructure
	TimeIntervalRef []TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	// A time interval specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this interval: 0-5 km, 4-6 zones etc.
	TimeInterval []TimeInterval `xml:"TimeInterval,omitempty" json:"TimeInterval,omitempty"`
}

// TimeIntervalVersionStructure represents the TimeInterval_VersionStructure element
// Type for TIME INTERVAL.
type TimeIntervalVersionStructure struct {
	FareIntervalVersionStructure
	// Start time for TIME INTERVAL if restricted to a specific time.
	StartTime *string `xml:"StartTime,omitempty" json:"StartTime,omitempty"`
	// End value for TIME INTERVAL.
	EndTime *string `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
	// Day Offset for end time from start time. 0= same day.
	DayOffset *int `xml:"DayOffset,omitempty" json:"DayOffset,omitempty"`
	// MaximumDuration for TIME INTERVAL.
	Duration *string `xml:"Duration,omitempty" json:"Duration,omitempty"`
	// Minimum Duration for TIME INTERVAL. +v1.1
	MinimumDuration *string `xml:"MinimumDuration,omitempty" json:"MinimumDuration,omitempty"`
	// PRICEs of TIME INTERVAL.
	Prices *TimeIntervalPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
	// TIME STRUCTURE FACTORs associated with this element.
	TimeStructureFactors *TimeStructureFactorsRelStructure `xml:"timeStructureFactors,omitempty" json:"timeStructureFactors,omitempty"`
}

// TimeStructureFactorsRelStructure represents the timeStructureFactors_RelStructure element
// Type for a list of TIME STRUCTURE FACTOR.
type TimeStructureFactorsRelStructure struct {
	StrictContainmentAggregationStructure
	ParkingChargeBandRef []ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	TimeStructureFactorRef []TimeStructureFactorRef `xml:"TimeStructureFactorRef,omitempty" json:"TimeStructureFactorRef,omitempty"`
	TimeStructureFactor []TimeStructureFactor `xml:"TimeStructureFactor,omitempty" json:"TimeStructureFactor,omitempty"`
}

// TimeStructureFactorVersionStructure represents the TimeStructureFactor_VersionStructure element
// Type for TIME STRUCTURE FACTOR.
type TimeStructureFactorVersionStructure struct {
	FareStructureFactorVersionStructure
	ParkingTariffRef *ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	TariffRef *TariffRef `xml:"TariffRef,omitempty" json:"TariffRef,omitempty"`
	TimeIntervalRef *TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	TimeUnitRef *TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	FareQuotaFactorRef *FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef *FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef *QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
}

// TimeUnitPricesRelStructure represents the timeUnitPrices_RelStructure element
// Type for a list of TIME UNIT PRICEs.
type TimeUnitPricesRelStructure struct {
	StrictContainmentAggregationStructure
	TimeUnitPriceRef []TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	// A set of all possible price features of a TIME UNIT : default total price, discount in value or percentage etc.
	TimeUnitPrice []TimeUnitPriceVersionedChildStructure `xml:"TimeUnitPrice,omitempty" json:"TimeUnitPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// TimeUnitPriceVersionedChildStructure represents the TimeUnitPrice_VersionedChildStructure element
// Type for a TIME UNIT PRICEs.
type TimeUnitPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	TimeUnitRef *TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
}

// TimeIntervalPricesRelStructure represents the timeIntervalPrices_RelStructure element
// Type for a list of TIME INTERVAL PRICEs.
type TimeIntervalPricesRelStructure struct {
	StrictContainmentAggregationStructure
	TimeIntervalPriceRef []TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	// A set of all possible price features of a TIME INTERVAL : default total price, discount in value or percentage etc.
	TimeIntervalPrice []TimeIntervalPriceVersionedChildStructure `xml:"TimeIntervalPrice,omitempty" json:"TimeIntervalPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// TimeIntervalPriceVersionedChildStructure represents the TimeIntervalPrice_VersionedChildStructure element
// Type for a TIME INTERVAL PRICEs.
type TimeIntervalPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	TimeIntervalRef *TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
}

// TimeUnit represents the TimeUnit element
// A factor influencing access rights definition or calculation of prices.
type TimeUnit struct {
	TimeUnitVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// TimeInterval represents the TimeInterval element
// A factor influencing access rights definition or calculation of prices.
type TimeInterval struct {
	TimeIntervalVersionStructure
}

// TimeStructureFactor represents the TimeStructureFactor element
// The value of a TIME INTERVAL or a DISTANCE MATRIX ELEMENT expressed by a TIME UNIT.
type TimeStructureFactor struct {
	TimeStructureFactorVersionStructure
}

// TimeUnitPrice represents the TimeUnitPrice element
// A set of all possible price features of a TIME UNIT: default total price etc.
type TimeUnitPrice struct {
	TimeUnitPriceVersionedChildStructure
}

// TimeIntervalPrice represents the TimeIntervalPrice element
// A set of all possible price features of a TIME INTERVAL: default total price etc.
type TimeIntervalPrice struct {
	TimeIntervalPriceVersionedChildStructure
}

// FareStructureElementsInFrameRelStructure represents the fareStructureElementsInFrame_RelStructure element
// Type for containment in frame of FARE STUCTURE ELEMENTs.
type FareStructureElementsInFrameRelStructure struct {
	FrameContainmentStructure
	FareStructureElement []FareStructureElement `xml:"FareStructureElement" json:"FareStructureElement"`
}

// TariffsInFrameRelStructure represents the tariffsInFrame_RelStructure element
// Type for containment in frame of TARIFF.
type TariffsInFrameRelStructure struct {
	FrameContainmentStructure
	Tariff []Tariff `xml:"Tariff" json:"Tariff"`
}

// TariffVersionStructure represents the Tariff_VersionStructure element
// Type for TARIFF.
type TariffVersionStructure struct {
	DataManagedObjectStructure
	// Name of TARIFF.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// ATERNATIVE NAMEs for TARIFF.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// Description of TARIFF.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// NOTICE explaining TARIFF.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// Timetable documents associated with the Tariff  e.g pdf files +v1.1
	DocumentLinks *InfoLinksRelStructure `xml:"documentLinks,omitempty" json:"documentLinks,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	GroupOfOperatorsRef *GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	FlexibleLineRef *FlexibleLineRef `xml:"FlexibleLineRef,omitempty" json:"FlexibleLineRef,omitempty"`
	LineRef *LineRef `xml:"LineRef,omitempty" json:"LineRef,omitempty"`
	NetworkRef *NetworkRef `xml:"NetworkRef,omitempty" json:"NetworkRef,omitempty"`
	GroupOfLinesRef *GroupOfLinesRef `xml:"GroupOfLinesRef,omitempty" json:"GroupOfLinesRef,omitempty"`
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	AssistanceBookingServiceRef *AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef *CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef *RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef *MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef *HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef *CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef *MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef *LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef *LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef *LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef *ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef *CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef *AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef *TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef *LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	TypeOfTariffRef *TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	// Classification of  Tariff Butasis. Defaut is Route (Tap TSI)
	TariffBasis *TariffBasisEnumeration `xml:"TariffBasis,omitempty" json:"TariffBasis,omitempty"`
	// Whether return fare is  normally twice single fare. Default is true.
	ReturnFareTwiceSingle *bool `xml:"ReturnFareTwiceSingle,omitempty" json:"ReturnFareTwiceSingle,omitempty"`
	GeographicalUnitRef *GeographicalUnitRef `xml:"GeographicalUnitRef,omitempty" json:"GeographicalUnitRef,omitempty"`
	// GEOGRAPHICAL INTERVALs  making up TARIFF.
	GeographicalIntervals *GeographicalIntervalsRelStructure `xml:"geographicalIntervals,omitempty" json:"geographicalIntervals,omitempty"`
	// GEOGRAPHICAL STRUCTURE FACTORs making up TARIFF.
	GeographicalStructureFactors *GeographicalStructureFactorsRelStructure `xml:"geographicalStructureFactors,omitempty" json:"geographicalStructureFactors,omitempty"`
	TimeUnitRef *TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	// VALIDITY PARAMETER ASSIGNMENTs making up TARIFF.
	TimeIntervals *TimeIntervalsRelStructure `xml:"timeIntervals,omitempty" json:"timeIntervals,omitempty"`
	// TIME STRUCTURE FACTORs making up TARIFF.
	TimeStructureFactors *TimeStructureFactorsRelStructure `xml:"timeStructureFactors,omitempty" json:"timeStructureFactors,omitempty"`
	// QUALITY STRUCTURE ELEMENTs making up TARIFF.
	QualityStructureFactors *QualityStructureFactorsRelStructure `xml:"qualityStructureFactors,omitempty" json:"qualityStructureFactors,omitempty"`
	// FARE STRUCTURE ELEMENTs making up TARIFF.
	FareStructureElements *FareStructureElementsRelStructure `xml:"fareStructureElements,omitempty" json:"fareStructureElements,omitempty"`
	// DISTANCE MATRIX ELEMENTs making up TARIFF.
	DistanceMatrixElements *DistanceMatrixElementsRelStructure `xml:"distanceMatrixElements,omitempty" json:"distanceMatrixElements,omitempty"`
	// GROUPs of DISTANCE MATRIX ELEMENTs making up TARIFF.
	GroupsOfDistanceMatrixElements *GroupsOfDistanceMatrixElementsRelStructure `xml:"groupsOfDistanceMatrixElements,omitempty" json:"groupsOfDistanceMatrixElements,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// QUALITY STRUCTURE ELEMENTs making up TARIFF.
	PriceGroups *PriceGroupsRelStructure `xml:"priceGroups,omitempty" json:"priceGroups,omitempty"`
	// QUALITY STRUCTURE ELEMENTs making up TARIFF.
	FareTables *FareTablesRelStructure `xml:"fareTables,omitempty" json:"fareTables,omitempty"`
}

// TypeOfTariffValueStructure represents the TypeOfTariff_ValueStructure element
// Type for a TYPE OF TARIFF.
type TypeOfTariffValueStructure struct {
	TypeOfEntityVersionStructure
}

// FareStructureElementsRelStructure represents the fareStructureElements_RelStructure element
// Type for a list of FARE STRUCTURE ELEMENTs.
type FareStructureElementsRelStructure struct {
	ContainmentAggregationStructure
	FareStructureElementRef []FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	// A sequence or set of CONTROLLABLE ELEMENTs to which rules for limitation of access rights and calculation of prices (fare structure) are applied.
	FareStructureElement []FareStructureElement `xml:"FareStructureElement,omitempty" json:"FareStructureElement,omitempty"`
}

// FareStructureElementVersionStructure represents the FareStructureElement_VersionStructure element
// Type for FARE STRUCTURE ELEMENT.
type FareStructureElementVersionStructure struct {
	PriceableObjectVersionStructure
	// Basis for tariff using element.
	TariffBasis *TariffBasisEnumeration `xml:"TariffBasis,omitempty" json:"TariffBasis,omitempty"`
	TypeOfFareStructureElementRef *TypeOfFareStructureElementRef `xml:"TypeOfFareStructureElementRef,omitempty" json:"TypeOfFareStructureElementRef,omitempty"`
	GeographicalIntervalRef *GeographicalIntervalRef `xml:"GeographicalIntervalRef,omitempty" json:"GeographicalIntervalRef,omitempty"`
	// References to GEOGRAPHICAL INTERVALS  pertaining to FARE STRUCTURE ELEMENT.
	GeographicalIntervals *GeographicalIntervalsRelStructure `xml:"geographicalIntervals,omitempty" json:"geographicalIntervals,omitempty"`
	// References to GEOGRAPHICAL STRUCTURE FACTORs pertaining to FARE STRUCTURE ELEMENT.
	GeographicalStructureFactors *GeographicalStructureFactorsRelStructure `xml:"geographicalStructureFactors,omitempty" json:"geographicalStructureFactors,omitempty"`
	TimeIntervalRef *TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	// References to TIME INTERVALS pertaining to FARE STRUCTURE ELEMENT.
	TimeIntervals *TimeIntervalsRelStructure `xml:"timeIntervals,omitempty" json:"timeIntervals,omitempty"`
	// References to TIME STRUCTURE FACTORs pertaining to FARE STRUCTURE ELEMENT.
	TimeStructureFactors *TimeStructureFactorsRelStructure `xml:"timeStructureFactors,omitempty" json:"timeStructureFactors,omitempty"`
	FareQuotaFactorRef *FareQuotaFactorRef `xml:"FareQuotaFactorRef,omitempty" json:"FareQuotaFactorRef,omitempty"`
	FareDemandFactorRef *FareDemandFactorRef `xml:"FareDemandFactorRef,omitempty" json:"FareDemandFactorRef,omitempty"`
	QualityStructureFactorRef *QualityStructureFactorRef `xml:"QualityStructureFactorRef,omitempty" json:"QualityStructureFactorRef,omitempty"`
	// References to QUALITY STRUCTURE FACTORs pertaining to FARE STRUCTURE ELEMENT.
	QualityStructureFactors *QualityStructureFactorsRelStructure `xml:"qualityStructureFactors,omitempty" json:"qualityStructureFactors,omitempty"`
	DistanceMatrixElementRef *DistanceMatrixElementRef `xml:"DistanceMatrixElementRef,omitempty" json:"DistanceMatrixElementRef,omitempty"`
	// DiISTANCE MATRIX ELEMENTS IN FARE STRUCTURE.
	DistanceMatrixElements *DistanceMatrixElementsRelStructure `xml:"distanceMatrixElements,omitempty" json:"distanceMatrixElements,omitempty"`
	GroupOfDistanceMatrixElementsRef *GroupOfDistanceMatrixElementsRef `xml:"GroupOfDistanceMatrixElementsRef,omitempty" json:"GroupOfDistanceMatrixElementsRef,omitempty"`
	GroupOfDistanceMatrixElements *GroupOfDistanceMatrixElements `xml:"GroupOfDistanceMatrixElements,omitempty" json:"GroupOfDistanceMatrixElements,omitempty"`
	// Use of FARESTRUCTURE ELEMENTs in a particular sequence.
	FareStructureElementsInSequence *FareStructureElementsInSequenceRelStructure `xml:"fareStructureElementsInSequence,omitempty" json:"fareStructureElementsInSequence,omitempty"`
	// VALIDITY PARAMETR ASSIGNMENTss for an element.
	ValidityParameterAssignments *GenericParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	// Optimisation: A single instance of a A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
	GenericParameterAssignment *GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	// Optimisation: Can be used without identity constraint A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
	GenericParameterAssignmentInContext *GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
	// PRICEs of FARE STRUCTURE ELEMENT.
	Prices *FareStructureElementPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
	// Name of  class associated with FARE STRUCTURE ELEMENT, eg DistanceMatrixElement, Series, UserProfile, ClassOfUSe.
	NameOfClassOfUnit *string `xml:"nameOfClassOfUnit,attr,omitempty" json:"nameOfClassOfUnit,omitempty"`
}

// FareStructureElementsInSequenceRelStructure represents the fareStructureElementsInSequence_RelStructure element
// Type for a list of FARE STRUCTURE ELEMENT PRICEs.
type FareStructureElementsInSequenceRelStructure struct {
	StrictContainmentAggregationStructure
	FareStructureElementInSequence []FareStructureElementInSequence `xml:"FareStructureElementInSequence,omitempty" json:"FareStructureElementInSequence,omitempty"`
	ControllableElementInSequence []ControllableElementInSequence `xml:"ControllableElementInSequence,omitempty" json:"ControllableElementInSequence,omitempty"`
}

// FareStructureElementInSequenceVersionedChildStructure represents the FareStructureElementInSequence_VersionedChildStructure element
// Type for FARE STRUCTURE ELEMENT IN SEQUENCE.
type FareStructureElementInSequenceVersionedChildStructure struct {
	FareElementInSequenceVersionedChildStructure
	FareStructureElementRef *FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	ValidableElementRef *ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	// VALIDITY PARAMETR ASSIGNMENTss for an element.
	ValidityParameterAssignments *GenericParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	// Optimisation: A single instance of a A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
	GenericParameterAssignment *GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	// Optimisation: Can be used without identity constraint A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
	GenericParameterAssignmentInContext *GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
}

// FareStructureElementPricesRelStructure represents the fareStructureElementPrices_RelStructure element
// Type for a list of FARE STRUCTURE ELEMENT PRICEs.
type FareStructureElementPricesRelStructure struct {
	StrictContainmentAggregationStructure
	FareStructureElementPriceRef []FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	// A set of all possible price features of a FARE STRUCTURE ELEMENT: default total price, discount in value or percentage etc.
	FareStructureElementPrice []FareStructureElementPriceVersionedChildStructure `xml:"FareStructureElementPrice,omitempty" json:"FareStructureElementPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// FareStructureElementPriceVersionedChildStructure represents the FareStructureElementPrice_VersionedChildStructure element
// Type for a FARE STRUCTURE ELEMENT PRICEs.
type FareStructureElementPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	FareStructureElementRef *FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
}

// TypeOfFareStructureElementVersionStructure represents the TypeOfFareStructureElement_VersionStructure element
// Type for TYPE OF FARE STRUCTURE ELEMENT.
type TypeOfFareStructureElementVersionStructure struct {
	TypeOfEntityVersionStructure
}

// Tariff represents the Tariff element
// A particular tariff, described by a combination of parameters.
type Tariff struct {
	TariffVersionStructure
}

// TypeOfTariff represents the TypeOfTariff element
// A classification of TARIFFs according to their functional purpose.
type TypeOfTariff struct {
	TypeOfTariffValueStructure
	// Name of Class of the ENTITY. Allows reflection. Fixed for each ENTITY type.
	NameOfClassifiedEntityClass *string `xml:"nameOfClassifiedEntityClass,attr,omitempty" json:"nameOfClassifiedEntityClass,omitempty"`
}

// FareStructureElement represents the FareStructureElement element
// A sequence or set of CONTROLLABLE ELEMENTs to which rules for limitation of access rights and calculation of prices (fare structure) are applied.
type FareStructureElement struct {
	FareStructureElementVersionStructure
}

// FareStructureElementInSequence represents the FareStructureElementInSequence element
// A FARE STRUCTURE ELEMENT as a part of a VALIDABLE ELEMENT, including its possible order in the sequence of FARE STRUCTURE ELEMENTs forming that VALIDABLE ELEMENT, and its possible quantitative limitation.
type FareStructureElementInSequence struct {
	FareStructureElementInSequenceVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// FareStructureElementPrice represents the FareStructureElementPrice element
// A set of all possible price features of a FARE STRUCTURE ELEMENT: default total price, discount in value or percentage etc.
type FareStructureElementPrice struct {
	FareStructureElementPriceVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// TypeOfFareStructureElement represents the TypeOfFareStructureElement element
// A classification of FARE STRUCTURE ELEMENTs expressing their general functionalities .
type TypeOfFareStructureElement struct {
	TypeOfFareStructureElementVersionStructure
}

// TrainRestrictionsEnumeration represents the TrainRestrictionsEnumeration enumeration
// Allowed values for TRAIN RESTRICTIONs.
type TrainRestrictionsEnumeration string

const (
	// TrainRestrictionsEnumerationAnyTrain represents anyTrain
	TrainRestrictionsEnumerationAnyTrain TrainRestrictionsEnumeration = "anyTrain"
	// TrainRestrictionsEnumerationRestricted represents restricted
	TrainRestrictionsEnumerationRestricted TrainRestrictionsEnumeration = "restricted"
	// TrainRestrictionsEnumerationSpecifiedTrainOnly represents specifiedTrainOnly
	TrainRestrictionsEnumerationSpecifiedTrainOnly TrainRestrictionsEnumeration = "specifiedTrainOnly"
	// TrainRestrictionsEnumerationSpecifiedTrainsOnly represents specifiedTrainsOnly
	TrainRestrictionsEnumerationSpecifiedTrainsOnly TrainRestrictionsEnumeration = "specifiedTrainsOnly"
	// TrainRestrictionsEnumerationSpecifiedTrainAndConnections represents specifiedTrainAndConnections
	TrainRestrictionsEnumerationSpecifiedTrainAndConnections TrainRestrictionsEnumeration = "specifiedTrainAndConnections"
)

// OperatorRestrictionsEnumeration represents the OperatorRestrictionsEnumeration enumeration
// Allowed values for OPERATOR RESTRICTIONs.
type OperatorRestrictionsEnumeration string

const (
	// OperatorRestrictionsEnumerationAnyTrain represents anyTrain
	OperatorRestrictionsEnumerationAnyTrain OperatorRestrictionsEnumeration = "anyTrain"
	// OperatorRestrictionsEnumerationRestricted represents restricted
	OperatorRestrictionsEnumerationRestricted OperatorRestrictionsEnumeration = "restricted"
	// OperatorRestrictionsEnumerationSpecifiedOperatorOnly represents specifiedOperatorOnly
	OperatorRestrictionsEnumerationSpecifiedOperatorOnly OperatorRestrictionsEnumeration = "specifiedOperatorOnly"
)

// FareStructureTypeEnumeration represents the FareStructureTypeEnumeration enumeration
// Allowed values for  FARE STRUCTURE TYPE.
type FareStructureTypeEnumeration string

const (
	// FareStructureTypeEnumerationNetworkFlatFare represents networkFlatFare
	FareStructureTypeEnumerationNetworkFlatFare FareStructureTypeEnumeration = "networkFlatFare"
	// FareStructureTypeEnumerationLineFlatFare represents lineFlatFare
	FareStructureTypeEnumerationLineFlatFare FareStructureTypeEnumeration = "lineFlatFare"
	// FareStructureTypeEnumerationZonalFare represents zonalFare
	FareStructureTypeEnumerationZonalFare FareStructureTypeEnumeration = "zonalFare"
	// FareStructureTypeEnumerationZoneToZoneFare represents zoneToZoneFare
	FareStructureTypeEnumerationZoneToZoneFare FareStructureTypeEnumeration = "zoneToZoneFare"
	// FareStructureTypeEnumerationZoneSequenceFare represents zoneSequenceFare
	FareStructureTypeEnumerationZoneSequenceFare FareStructureTypeEnumeration = "zoneSequenceFare"
	// FareStructureTypeEnumerationCappedFlatFare represents cappedFlatFare
	FareStructureTypeEnumerationCappedFlatFare FareStructureTypeEnumeration = "cappedFlatFare"
	// FareStructureTypeEnumerationCappedPointToPointFare represents cappedPointToPointFare
	FareStructureTypeEnumerationCappedPointToPointFare FareStructureTypeEnumeration = "cappedPointToPointFare"
	// FareStructureTypeEnumerationCappedZonalFare represents cappedZonalFare
	FareStructureTypeEnumerationCappedZonalFare FareStructureTypeEnumeration = "cappedZonalFare"
	// FareStructureTypeEnumerationPointToPointFare represents pointToPointFare
	FareStructureTypeEnumerationPointToPointFare FareStructureTypeEnumeration = "pointToPointFare"
	// FareStructureTypeEnumerationPointToPointDistanceFare represents pointToPointDistanceFare
	FareStructureTypeEnumerationPointToPointDistanceFare FareStructureTypeEnumeration = "pointToPointDistanceFare"
	// FareStructureTypeEnumerationStageFare represents stageFare
	FareStructureTypeEnumerationStageFare FareStructureTypeEnumeration = "stageFare"
	// FareStructureTypeEnumerationPenaltyFare represents penaltyFare
	FareStructureTypeEnumerationPenaltyFare FareStructureTypeEnumeration = "penaltyFare"
	// FareStructureTypeEnumerationOther represents other
	FareStructureTypeEnumerationOther FareStructureTypeEnumeration = "other"
)

// VehicleCollectionEnumeration represents the VehicleCollectionEnumeration enumeration
// Allowed values for  VEHICLE RENTAL COLLECTION
type VehicleCollectionEnumeration string

const (
	// VehicleCollectionEnumerationOnSite represents onSite
	VehicleCollectionEnumerationOnSite VehicleCollectionEnumeration = "onSite"
	// VehicleCollectionEnumerationOffSiteShuttle represents offSiteShuttle
	VehicleCollectionEnumerationOffSiteShuttle VehicleCollectionEnumeration = "offSiteShuttle"
	// VehicleCollectionEnumerationOffSite represents offSite
	VehicleCollectionEnumerationOffSite VehicleCollectionEnumeration = "offSite"
	// VehicleCollectionEnumerationMeetAndGreet represents meetAndGreet
	VehicleCollectionEnumerationMeetAndGreet VehicleCollectionEnumeration = "meetAndGreet"
	// VehicleCollectionEnumerationFloating represents floating
	VehicleCollectionEnumerationFloating VehicleCollectionEnumeration = "floating"
	// VehicleCollectionEnumerationOther represents other
	VehicleCollectionEnumerationOther VehicleCollectionEnumeration = "other"
)

// ConditionSummaryStructure represents the ConditionSummaryStructure element
// Type for condition summary.
type ConditionSummaryStructure struct {
	// TypeOfFareCondition.
	FareStructureType *FareStructureTypeEnumeration `xml:"FareStructureType,omitempty" json:"FareStructureType,omitempty"`
	// Basis used to compute  fares.
	TariffBasis *TariffBasisEnumeration `xml:"TariffBasis,omitempty" json:"TariffBasis,omitempty"`
	// Whether the product has NOTICEs associated with it.
	HasNotices *bool `xml:"HasNotices,omitempty" json:"HasNotices,omitempty"`
	// Whether the product provdies a card  with it.
	ProvidesCard *bool `xml:"ProvidesCard,omitempty" json:"ProvidesCard,omitempty"`
	// Whether the product requires a card to fulfil it.
	GoesOnCard *bool `xml:"GoesOnCard,omitempty" json:"GoesOnCard,omitempty"`
	// Whether the product is personaised or anonymous.
	IsPersonal *bool `xml:"IsPersonal,omitempty" json:"IsPersonal,omitempty"`
	// Whether the product  requires a photo.
	RequiresPhoto *bool `xml:"RequiresPhoto,omitempty" json:"RequiresPhoto,omitempty"`
	// Whether the product  requires the card to be carried by the user.
	MustCarry *bool `xml:"MustCarry,omitempty" json:"MustCarry,omitempty"`
	// Whether the product  requires the user to register for an account for billing. +v1.1
	RequiresAccount *bool `xml:"RequiresAccount,omitempty" json:"RequiresAccount,omitempty"`
	// Whether the product is a supplement to another product.
	IsSupplement *bool `xml:"IsSupplement,omitempty" json:"IsSupplement,omitempty"`
	// Whether the product requires ENTITLEMENT REQUIRED other products.
	RequiresEntitlement *bool `xml:"RequiresEntitlement,omitempty" json:"RequiresEntitlement,omitempty"`
	// Whether the product grants ENTITLEMENT REQUIRED other products.
	GivesEntitlement *bool `xml:"GivesEntitlement,omitempty" json:"GivesEntitlement,omitempty"`
	// Restictions on which OPERATOR's services can be used.
	HasOperatorRestrictions *OperatorRestrictionsEnumeration `xml:"HasOperatorRestrictions,omitempty" json:"HasOperatorRestrictions,omitempty"`
	// Whether there are restictions on which routes can be used.
	HasTravelTimeRestrictions *bool `xml:"HasTravelTimeRestrictions,omitempty" json:"HasTravelTimeRestrictions,omitempty"`
	// Whether there are restictions on which routes can be used.
	HasRouteRestrictions *bool `xml:"HasRouteRestrictions,omitempty" json:"HasRouteRestrictions,omitempty"`
	// Restictions on which trains can be used.
	TrainRestrictions *TrainRestrictionsEnumeration `xml:"TrainRestrictions,omitempty" json:"TrainRestrictions,omitempty"`
	// Whether there are restictions on which zones can be used.
	HasZoneRestrictions *bool `xml:"HasZoneRestrictions,omitempty" json:"HasZoneRestrictions,omitempty"`
	// Whether the journey can be interrupted by a stay at an intermediate station.
	CanBreakJourney *bool `xml:"CanBreakJourney,omitempty" json:"CanBreakJourney,omitempty"`
	// Whether the return trip must also be purchased.
	ReturnTripsOnly *bool `xml:"ReturnTripsOnly,omitempty" json:"ReturnTripsOnly,omitempty"`
	// Whether the trip uses a night Train.
	NightTrain *bool `xml:"NightTrain,omitempty" json:"NightTrain,omitempty"`
	// Whether the class of usage can  subsequently be changed on a ticket.
	CanChangeClass *bool `xml:"CanChangeClass,omitempty" json:"CanChangeClass,omitempty"`
	// Whether the ticket can be refunded.
	IsRefundable *bool `xml:"IsRefundable,omitempty" json:"IsRefundable,omitempty"`
	// Whether the ticket can be exchanged.
	IsExchangable *bool `xml:"IsExchangable,omitempty" json:"IsExchangable,omitempty"`
	// Whether there is a charge for exchanges.
	HasExchangeFee *bool `xml:"HasExchangeFee,omitempty" json:"HasExchangeFee,omitempty"`
	// Whether there are any types of discounted fare for the FARE PRODUCT.
	HasDiscountedFares *bool `xml:"HasDiscountedFares,omitempty" json:"HasDiscountedFares,omitempty"`
	// Whether the product allows discounts to be compounded.
	AllowAdditionalDiscounts *bool `xml:"AllowAdditionalDiscounts,omitempty" json:"AllowAdditionalDiscounts,omitempty"`
	// Whether the product allows a companion discountt for eligible users.
	AllowCompanionDiscounts *bool `xml:"AllowCompanionDiscounts,omitempty" json:"AllowCompanionDiscounts,omitempty"`
	// Whether a minimum price applies to FARE PRODUCT.
	HasMinimumPrice *bool `xml:"HasMinimumPrice,omitempty" json:"HasMinimumPrice,omitempty"`
	// Whether if combined with  other products on the same smart card, requires an overall balance for any product to work. Eg a Travel Pass may be disabled if the Pay as you go for other areas in in arrears.
	RequiresPositiveBalance *bool `xml:"RequiresPositiveBalance,omitempty" json:"RequiresPositiveBalance,omitempty"`
	// Requires a deposit +v1.2.2
	RequiresDeposit *bool `xml:"RequiresDeposit,omitempty" json:"RequiresDeposit,omitempty"`
	// Cash payment not accepted +v1.2.2
	NoCashPayment *bool `xml:"NoCashPayment,omitempty" json:"NoCashPayment,omitempty"`
	// Whether the  product has purchase conditions.
	HasPurchaseConditions *bool `xml:"HasPurchaseConditions,omitempty" json:"HasPurchaseConditions,omitempty"`
	// Whether there is dynamic i.e. yield managed pricing for the product.
	HasDynamicPricing *bool `xml:"HasDynamicPricing,omitempty" json:"HasDynamicPricing,omitempty"`
	// Whether the product requires a reservation.
	RequiresReservation *bool `xml:"RequiresReservation,omitempty" json:"RequiresReservation,omitempty"`
	// Whether there is a charge for reservations.
	HasReservationFee *bool `xml:"HasReservationFee,omitempty" json:"HasReservationFee,omitempty"`
	// Whether the product has  quotas.
	HasQuota *bool `xml:"HasQuota,omitempty" json:"HasQuota,omitempty"`
	// Whether there is a penalty for travelling without a ticket, i.e. tickets can not be bought on-board. +v1.1
	PenaltyIfWithoutTicket *bool `xml:"PenaltyIfWithoutTicket,omitempty" json:"PenaltyIfWithoutTicket,omitempty"`
	// Whether the product is available on subscription. +v1.1
	AvailableOnSubscription *bool `xml:"AvailableOnSubscription,omitempty" json:"AvailableOnSubscription,omitempty"`
	// Whether mileage is unlimited. +v1.2.2
	UnlimitedMileage *bool `xml:"UnlimitedMileage,omitempty" json:"UnlimitedMileage,omitempty"`
	// Refuelling Policy +v1.2.2
	LikeForLikeRefuelling *bool `xml:"LikeForLikeRefuelling,omitempty" json:"LikeForLikeRefuelling,omitempty"`
	// Vehicle collection process +v1.2.2
	VehicleCollection *VehicleCollectionEnumeration `xml:"VehicleCollection,omitempty" json:"VehicleCollection,omitempty"`
}

// ConditionSummary represents the ConditionSummary element
// Summary description of PRODUCT.
type ConditionSummary struct {
	ConditionSummaryStructure
}

// FareProductsInFrameRelStructure represents the fareProductsInFrame_RelStructure element
// Type for containment in frame of FARE PRODUCT.
type FareProductsInFrameRelStructure struct {
	FrameContainmentStructure
	SupplementProduct []SupplementProduct `xml:"SupplementProduct,omitempty" json:"SupplementProduct,omitempty"`
	PreassignedFareProduct []PreassignedFareProduct `xml:"PreassignedFareProduct,omitempty" json:"PreassignedFareProduct,omitempty"`
	AmountOfPriceUnitProduct []AmountOfPriceUnitProduct `xml:"AmountOfPriceUnitProduct,omitempty" json:"AmountOfPriceUnitProduct,omitempty"`
	CappedDiscountRight []CappedDiscountRight `xml:"CappedDiscountRight,omitempty" json:"CappedDiscountRight,omitempty"`
	UsageDiscountRight []UsageDiscountRight `xml:"UsageDiscountRight,omitempty" json:"UsageDiscountRight,omitempty"`
	ThirdPartyProduct []ThirdPartyProduct `xml:"ThirdPartyProduct,omitempty" json:"ThirdPartyProduct,omitempty"`
	SaleDiscountRight []SaleDiscountRight `xml:"SaleDiscountRight,omitempty" json:"SaleDiscountRight,omitempty"`
}

// ServiceAccessRightVersionStructure represents the ServiceAccessRight_VersionStructure element
// Type for  SERVICE ACCESS RIGHT.
type ServiceAccessRightVersionStructure struct {
	PriceableObjectVersionStructure
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	// URL for further information.
	InfoUrl *string `xml:"InfoUrl,omitempty" json:"InfoUrl,omitempty"`
	// Timetable documents associated with the Product e.g pdf files
	DocumentLinks *InfoLinksRelStructure `xml:"documentLinks,omitempty" json:"documentLinks,omitempty"`
}

// FareProductVersionStructure represents the FareProduct_VersionStructure element
// Type for FARE PRODUCT.
type FareProductVersionStructure struct {
	ServiceAccessRightVersionStructure
	ChargingMomentRef *ChargingMomentRef `xml:"ChargingMomentRef,omitempty" json:"ChargingMomentRef,omitempty"`
	// Enumeration of standardised Charging moment values _v1.1
	ChargingMomentType *ChargingMomentEnumeration `xml:"ChargingMomentType,omitempty" json:"ChargingMomentType,omitempty"`
	TypeOfFareProductRef *TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	// Classifications of FARE PROFUDCT .
	TypesOfFareProduct *TypeOfFareProductRefsRelStructure `xml:"typesOfFareProduct,omitempty" json:"typesOfFareProduct,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	ConditionSummary *ConditionSummary `xml:"ConditionSummary,omitempty" json:"ConditionSummary,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	// VALIDITY PARAMETR ASSIGNMENTss for an element.
	ValidityParameterAssignments *GenericParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	// Optimisation: A single instance of a A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
	GenericParameterAssignment *GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	// Optimisation: Can be used without identity constraint A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
	GenericParameterAssignmentInContext *GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
	// VALIDABLE ELEMENTs making up FARE SERVICE ACCESS RIGHT.
	ValidableElements *ValidableElementsRelStructure `xml:"validableElements,omitempty" json:"validableElements,omitempty"`
	// Access rights given by product.
	AccessRightsInProduct *AccessRightsInProductRelStructure `xml:"accessRightsInProduct,omitempty" json:"accessRightsInProduct,omitempty"`
	// TARIFFs  used by FARE PRODUCT. These may be derived from lower level references.
	Tariffs *TariffRefsRelStructure `xml:"tariffs,omitempty" json:"tariffs,omitempty"`
	// PRICEs  making up FARE PRODUCT.
	Prices *FareProductPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// TypeOfFareProductsRelStructure represents the typeOfFareProducts_RelStructure element
// Type for a list of TYPE OF FARE PRODUCTs.
type TypeOfFareProductsRelStructure struct {
	ContainmentAggregationStructure
	TypeOfFareProductRef []TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	TypeOfFareProduct []TypeOfFareProduct `xml:"TypeOfFareProduct,omitempty" json:"TypeOfFareProduct,omitempty"`
}

// TypeOfFareProductVersionStructure represents the TypeOfFareProduct_VersionStructure element
// Type for TYPE OF FARE PRODUCT.
type TypeOfFareProductVersionStructure struct {
	TypeOfEntityVersionStructure
}

// SaleDiscountRightVersionStructure represents the SaleDiscountRight_VersionStructure element
// Type for SALES DISCOUNT RIGHT.
type SaleDiscountRightVersionStructure struct {
	FareProductVersionStructure
	// Classification of USAGE DISOCUNT RIGHT. +v1.1
	ProductType *SaleDiscountRightEnumeration `xml:"ProductType,omitempty" json:"ProductType,omitempty"`
	GeneralGroupOfEntitiesRef *GeneralGroupOfEntitiesRef `xml:"GeneralGroupOfEntitiesRef,omitempty" json:"GeneralGroupOfEntitiesRef,omitempty"`
	GeneralGroupOfEntities *GeneralGroupOfEntities `xml:"GeneralGroupOfEntities,omitempty" json:"GeneralGroupOfEntities,omitempty"`
}

// EntitlementProductVersionStructure represents the EntitlementProduct_VersionStructure element
// Type for ENTITLEMENT PRODUCT.
type EntitlementProductVersionStructure struct {
	ServiceAccessRightVersionStructure
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	// Prices for ENTITLEMENT PRODUCT.
	Prices *FareProductPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// ThirdPartyProductVersionStructure represents the ThirdPartyProduct_VersionStructure element
// Type for THIRD PARTY PRODUCT.
type ThirdPartyProductVersionStructure struct {
	FareProductVersionStructure
	GeneralGroupOfEntitiesRef *GeneralGroupOfEntitiesRef `xml:"GeneralGroupOfEntitiesRef,omitempty" json:"GeneralGroupOfEntitiesRef,omitempty"`
	GeneralGroupOfEntities *GeneralGroupOfEntities `xml:"GeneralGroupOfEntities,omitempty" json:"GeneralGroupOfEntities,omitempty"`
}

// CappedDiscountRightVersionStructure represents the CappedDiscountRight_VersionStructure element
// Type for CAPPED DISCOUNT RIGHT.
type CappedDiscountRightVersionStructure struct {
	SaleDiscountRightVersionStructure
	// Maximum fare to charge.
	CappingRules *CappingRulesRelStructure `xml:"cappingRules,omitempty" json:"cappingRules,omitempty"`
}

// CappingRulesRelStructure represents the cappingRules_RelStructure element
// Type for a list of CAPPING RULEs.
type CappingRulesRelStructure struct {
	StrictContainmentAggregationStructure
	CappingRule []CappingRule `xml:"CappingRule" json:"CappingRule"`
}

// CappingRuleVersionedChildStructure represents the CappingRule_VersionedChildStructure element
// Type for CAPPING RULE.
type CappingRuleVersionedChildStructure struct {
	PriceableObjectVersionStructure
	// Maximum Distance for distance based Capping.
	MaximumDistance *float64 `xml:"MaximumDistance,omitempty" json:"MaximumDistance,omitempty"`
	// Period with which capping accumulation is done. Default is 'day'. A USAGE VALIDITY PERIDO parameter can be used to add a more specific definition.
	CappingPeriod *CappingPeriodEnumeration `xml:"CappingPeriod,omitempty" json:"CappingPeriod,omitempty"`
	CappedDiscountRightRef []CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SupplementProductRef []SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef []PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	ValidableElementRef *ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	// VALIDITY PARAMETR ASSIGNMENTss for an element.
	ValidityParameterAssignments *GenericParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	// Optimisation: A single instance of a A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
	GenericParameterAssignment *GenericParameterAssignment `xml:"GenericParameterAssignment,omitempty" json:"GenericParameterAssignment,omitempty"`
	// Optimisation: Can be used without identity constraint A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL GenericATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
	GenericParameterAssignmentInContext *GenericParameterAssignmentInContext `xml:"GenericParameterAssignmentInContext,omitempty" json:"GenericParameterAssignmentInContext,omitempty"`
	// Maximum fare to charge.
	Prices *CappingRulePricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// UsageDiscountRightVersionStructure represents the UsageDiscountRight_VersionStructure element
// Type for USAGE DISCOUNT RIGHT.
type UsageDiscountRightVersionStructure struct {
	FareProductVersionStructure
	// Classification of USAGE DISOCUNT RIGHT. +v1.1
	ProductType *UsageDiscountRightEnumeration `xml:"ProductType,omitempty" json:"ProductType,omitempty"`
}

// AmountOfPriceUnitProductVersionStructure represents the AmountOfPriceUnitProduct_VersionStructure element
// Type for AMOUNT OF PRICE UNIT PRODUCT.
type AmountOfPriceUnitProductVersionStructure struct {
	FareProductVersionStructure
	// Classification of PEEASSIGNED FARE PRODUCT. +v1.1
	ProductType *AmountOfPriceUnitEnumeration `xml:"ProductType,omitempty" json:"ProductType,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// Number of units. If only ine. Otherwise use TARIFF with  FARE QUALITY FACTOR to specify a range
	Amount *float64 `xml:"Amount,omitempty" json:"Amount,omitempty"`
}

// PreassignedFareProductVersionStructure represents the PreassignedFareProduct_VersionStructure element
// Type for PREASSIGNED FARE PRODUCT.
type PreassignedFareProductVersionStructure struct {
	FareProductVersionStructure
	// Classification of PEEASSIGNED FARE PRODUCT. +v1.1
	ProductType *PreassignedFareProductEnumeration `xml:"ProductType,omitempty" json:"ProductType,omitempty"`
}

// SupplementProductVersionStructure represents the SupplementProduct_VersionStructure element
// Type for PREASSIGNED FARE PRODUCT.
type SupplementProductVersionStructure struct {
	PreassignedFareProductVersionStructure
	// Classification of SUPPLEMENT PRODUCT. +v1.1
	SupplementProductType *SupplementProductEnumeration `xml:"SupplementProductType,omitempty" json:"SupplementProductType,omitempty"`
	// FARE PRODUCT to which this SUPPLEMENT PRODUCT can be a a supplement.
	SupplementToFareProductRef *FareProductRefStructure `xml:"SupplementToFareProductRef,omitempty" json:"SupplementToFareProductRef,omitempty"`
	// FARE PRODUCTa to which this SUPPLEMENT PRODUCT can be a a supplement.
	SupplementTo *FareProductRefsRelStructure `xml:"supplementTo,omitempty" json:"supplementTo,omitempty"`
}

// AccessRightsInProductRelStructure represents the accessRightsInProduct_RelStructure element
// Type for a list of ACCESS RIGHT IN PRODUCTs.
type AccessRightsInProductRelStructure struct {
	StrictContainmentAggregationStructure
	AccessRightInProductRef []AccessRightInProductRef `xml:"AccessRightInProductRef,omitempty" json:"AccessRightInProductRef,omitempty"`
	AccessRightInProduct []AccessRightInProduct `xml:"AccessRightInProduct,omitempty" json:"AccessRightInProduct,omitempty"`
}

// AccessRightInProductVersionedChildStructure represents the AccessRightInProduct_VersionedChildStructure element
// Type for ACCESS RIGHT IN PRODUCT.
type AccessRightInProductVersionedChildStructure struct {
	FareElementInSequenceVersionedChildStructure
	ValidableElementRef *ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
}

// ChargingMomentValueStructure represents the ChargingMoment_ValueStructure element
// Type for a CHARGING MOMENT.
type ChargingMomentValueStructure struct {
	TypeOfValueVersionStructure
}

// FareProductPricesRelStructure represents the fareProductPrices_RelStructure element
// Type for a list of FARE PRODUCT PRICEs.
type FareProductPricesRelStructure struct {
	StrictContainmentAggregationStructure
	FareProductPriceRef []FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	FareProductPrice []FareProductPrice `xml:"FareProductPrice,omitempty" json:"FareProductPrice,omitempty"`
}

// FareProductPriceVersionedChildStructure represents the FareProductPrice_VersionedChildStructure element
// Type for a FARE PRODUCT PRICE.
type FareProductPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
}

// CappingRulePricesRelStructure represents the cappingRulePrices_RelStructure element
// Type for a list of CAPPING RULE PRICEs.
type CappingRulePricesRelStructure struct {
	StrictContainmentAggregationStructure
	CappingRulePriceRef []CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	CappingRulePrice []CappingRulePrice `xml:"CappingRulePrice,omitempty" json:"CappingRulePrice,omitempty"`
}

// CappingRulePriceVersionedChildStructure represents the CappingRulePrice_VersionedChildStructure element
// Type for a CAPPING RULE PRICE.
type CappingRulePriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	CappingRuleRef *CappingRuleRef `xml:"CappingRuleRef,omitempty" json:"CappingRuleRef,omitempty"`
}

// TypeOfFareProduct represents the TypeOfFareProduct element
// A classification of FARE PRODUCTs expressing their general functionalities and local functional characteristics specific to the operator. Types of FARE PRODUCTs like e.g. throw-away ticket, throw-away ticket unit, value card, electronic purse allowing access, public transport credit card etc. may be used to define these categories.
type TypeOfFareProduct struct {
	TypeOfFareProductVersionStructure
}

// SaleDiscountRight represents the SaleDiscountRight element
// A FARE PRODUCT allowing a customer to benefit from discounts when purchasing SALES OFFER PACKAGEs.
type SaleDiscountRight struct {
	SaleDiscountRightVersionStructure
}

// EntitlementProduct represents the EntitlementProduct element
// A precondition to access a service or to purchase a FARE PRODUCT issued by an organisation that may not be a PT operator (e.g. military card).
type EntitlementProduct struct {
	EntitlementProductVersionStructure
}

// ThirdPartyProduct represents the ThirdPartyProduct element
// A FARE PRODUCT that is marketed together with a Public Transport Fare Product.
type ThirdPartyProduct struct {
	ThirdPartyProductVersionStructure
}

// UsageDiscountRight represents the UsageDiscountRight element
// A FARE PRODUCT allowing a customer to benefit from discounts when consuming VALIDABLE ELEMENTs.
type UsageDiscountRight struct {
	UsageDiscountRightVersionStructure
}

// CappedDiscountRight represents the CappedDiscountRight element
// A FARE PRODUCT allowing a customer to benefit from discounts when consuming VALIDABLE ELEMENTs.
type CappedDiscountRight struct {
	CappedDiscountRightVersionStructure
}

// CappingRule represents the CappingRule element
// Rule about capping for a mode.
type CappingRule struct {
	CappingRuleVersionedChildStructure
}

// AmountOfPriceUnitProduct represents the AmountOfPriceUnitProduct element
// A FARE PRODUCT consisting in a stored value of PRICE UNITs: an amount of money on an electronic purse, amount of units on a value card etc.
type AmountOfPriceUnitProduct struct {
	AmountOfPriceUnitProductVersionStructure
}

// PreassignedFareProduct represents the PreassignedFareProduct element
// A FARE PRODUCT consisting of one or several VALIDABLE ELEMENTs, specific to a CHARGING MOMENT.
type PreassignedFareProduct struct {
	PreassignedFareProductVersionStructure
}

// SupplementProduct represents the SupplementProduct element
// A FARE PRODUCT consisting of one or several VALIDABLE ELEMENTs, specific to a CHARGING MOMENT.
type SupplementProduct struct {
	SupplementProductVersionStructure
}

// AccessRightInProduct represents the AccessRightInProduct element
// A VALIDABLE ELEMENT as a part of a PRE-ASSIGNED FARE PRODUCT, including its possible order in the set of all VALIDABLE ELEMENTs grouped together to define the access right assigned to that PRE-ASSIGNED FARE PRODUCT.
type AccessRightInProduct struct {
	AccessRightInProductVersionedChildStructure
}

// ChargingMoment represents the ChargingMoment element
// A classification of FARE PRODUCTs according to the payment method and the account location: pre-payment with cancellation (throw-away), pre-payment with debit on a value card, pre-payment without consumption registration (pass), post-payment etc.
type ChargingMoment struct {
	ChargingMomentValueStructure
}

// FareProductPrice represents the FareProductPrice element
// A set of all possible price features of a FARE PRODUCT default total price, discount in value or percentage etc.
type FareProductPrice struct {
	FareProductPriceVersionedChildStructure
}

// CappingRulePrice represents the CappingRulePrice element
// A set of all possible price features of a CAPPING RULE default total price, discount in value or percentage etc.
type CappingRulePrice struct {
	CappingRulePriceVersionedChildStructure
}

// ResellingVersionStructure represents the Reselling_VersionStructure element
// Type for RESELLING.
type ResellingVersionStructure struct {
	UsageParameterVersionStructure
	// Whether ticket can be resold (ie refunded or exchanged respectively)
	Allowed *ResellTypeEnumeration `xml:"Allowed,omitempty" json:"Allowed,omitempty"`
	// Whether transaction to change class of ticket is allowed.
	CanChangeClass *bool `xml:"CanChangeClass,omitempty" json:"CanChangeClass,omitempty"`
	// Whether only full tickets can be resold.
	UnusedTicketsOnly *bool `xml:"UnusedTicketsOnly,omitempty" json:"UnusedTicketsOnly,omitempty"`
	// Whether reselling can only be done in certain places.
	OnlyAtCertainDistributionPoints *bool `xml:"OnlyAtCertainDistributionPoints,omitempty" json:"OnlyAtCertainDistributionPoints,omitempty"`
	// Event marking when there is resell status of the ticket changes.
	ResellWhen *ResellWhenEnumeration `xml:"ResellWhen,omitempty" json:"ResellWhen,omitempty"`
	// Special value - Can be resold from any point after purchase.
	ExchangableFromAnyTime *EmptyType `xml:"ExchangableFromAnyTime,omitempty" json:"ExchangableFromAnyTime,omitempty"`
	// Duration to start of period before (negative) or after (positive) the trigger point (i.e. either Start of Validity or First Use ) after which ticket may be resold.
	ExchangableFromDuration *string `xml:"ExchangableFromDuration,omitempty" json:"ExchangableFromDuration,omitempty"`
	// Can be resold once a certain percentage of duration or use has been achieved. +v1.1
	ExchangableFromPercentUse *float64 `xml:"ExchangableFromPercentUse,omitempty" json:"ExchangableFromPercentUse,omitempty"`
	// Reference to arbitrary TimeInterval determining period from which reselling can be done relative to trigger point.
	ExchangableFromIntervalRef *TimeIntervalRefStructure `xml:"ExchangableFromIntervalRef,omitempty" json:"ExchangableFromIntervalRef,omitempty"`
	// Can be resold anyTime.
	ExchangableUntilAnyTime *EmptyType `xml:"ExchangableUntilAnyTime,omitempty" json:"ExchangableUntilAnyTime,omitempty"`
	// Duration to end of period before (negative) or after (positive) the trigger point (i.e. either Start of Validity or First Use ) or that ticket.
	ExchangableUntilDuration *string `xml:"ExchangableUntilDuration,omitempty" json:"ExchangableUntilDuration,omitempty"`
	// Can be resold until a certain percentage of duration or use has been achieved. +v1.1
	ExchangableUntilPercentUse *float64 `xml:"ExchangableUntilPercentUse,omitempty" json:"ExchangableUntilPercentUse,omitempty"`
	// Reference to arbitrary TimeInterval determining period up until which reselling can be done relative to trigger point.
	ExchangableUntilIntervalRef *TimeIntervalRefStructure `xml:"ExchangableUntilIntervalRef,omitempty" json:"ExchangableUntilIntervalRef,omitempty"`
	// Constraint on when change can be made +v1.1
	EffectiveFrom *EffectiveFromEnumeration `xml:"EffectiveFrom,omitempty" json:"EffectiveFrom,omitempty"`
	// Notice period needed before transaction can be made. + v1.1
	NotificationPeriod *string `xml:"NotificationPeriod,omitempty" json:"NotificationPeriod,omitempty"`
	// Whether these is a fee for a resale.
	HasFee *bool `xml:"HasFee,omitempty" json:"HasFee,omitempty"`
	// Basis on which resale is made.
	RefundBasis *PerBasisEnumeration `xml:"RefundBasis,omitempty" json:"RefundBasis,omitempty"`
	// PAYMENT METHODs allowed to pay fee or to make refund.
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
	// Other PAYMENT METHODs allowd to pay fee or to make refund.
	TypesOfPaymentMethodRef *TypeOfPaymentMethodRefsRelStructure `xml:"typesOfPaymentMethodRef,omitempty" json:"typesOfPaymentMethodRef,omitempty"`
}

// ExchangingVersionStructure represents the Exchanging_VersionStructure element
// Type for EXCHANGING.
type ExchangingVersionStructure struct {
	ResellingVersionStructure
	// Maximum number of exchanges allowed.
	NumberOfExchangesAllowed *int `xml:"NumberOfExchangesAllowed,omitempty" json:"NumberOfExchangesAllowed,omitempty"`
	// Fare class to which can exchange, if specifically limited.
	ToFareClass *FareClassEnumeration `xml:"ToFareClass,omitempty" json:"ToFareClass,omitempty"`
	// Fare class to which can exchange, if specifically limited.
	ToClassOfUseRef *ClassOfUseRefStructure `xml:"ToClassOfUseRef,omitempty" json:"ToClassOfUseRef,omitempty"`
	// Type of fare for which product can be exchanged.
	ExchangableTo *ExchangableToEnumeration `xml:"ExchangableTo,omitempty" json:"ExchangableTo,omitempty"`
}

// RefundingVersionStructure represents the Refunding_VersionStructure element
// Type for REFUNDING.
type RefundingVersionStructure struct {
	ResellingVersionStructure
	// Type of Refund.
	RefundType *RefundTypeEnumeration `xml:"RefundType,omitempty" json:"RefundType,omitempty"`
	// Reasons for giving refunds. +v1.1
	RefundPolicy *RefundPolicyEnumeration `xml:"RefundPolicy,omitempty" json:"RefundPolicy,omitempty"`
	// Basis on which partial refunds of period passes etc are calculated. +v1.1
	PartialRefundBasis *PartialRefundBasisEnumeration `xml:"PartialRefundBasis,omitempty" json:"PartialRefundBasis,omitempty"`
	// DEPRECATED - use  PaymentMethods on RESELLING
	PaymentMethod *PaymentMethodEnumeration `xml:"PaymentMethod,omitempty" json:"PaymentMethod,omitempty"`
}

// ReplacingVersionStructure represents the Replacing_VersionStructure element
// Type for REPLACING.
type ReplacingVersionStructure struct {
	ResellingVersionStructure
}

// TransferabilityVersionStructure represents the Transferability_VersionStructure element
// Type for TRANSFERABILITY.
type TransferabilityVersionStructure struct {
	UsageParameterVersionStructure
	// Whether ticket can be transferred to another.
	CanTransfer *bool `xml:"CanTransfer,omitempty" json:"CanTransfer,omitempty"`
	// If product can be used by a named group , eg  parents of a family, maximum number of named holders allowed.
	MaximumNumberOfNamedTransferees *int `xml:"MaximumNumberOfNamedTransferees,omitempty" json:"MaximumNumberOfNamedTransferees,omitempty"`
	// Whether there is a fee for transferring ticket or travel document.
	HasTransferFee *bool `xml:"HasTransferFee,omitempty" json:"HasTransferFee,omitempty"`
	// Indicates the nature of the permitted sharing, if any,  of products that can be shared, e.g.  trips from a multi-trip carnet. +v1.1
	SharedUsage *SharedUsageEnumeration `xml:"SharedUsage,omitempty" json:"SharedUsage,omitempty"`
}

// Reselling represents the Reselling element
// Common resale conditions (i.e. for exchange or refund)  attaching to the product
type Reselling struct {
	ResellingVersionStructure
}

// Exchanging represents the Exchanging element
// The number and characteristics of persons entitled to use the public transport service instead of the original customer.
type Exchanging struct {
	ExchangingVersionStructure
}

// Refunding represents the Refunding element
// Whether and how the product may be refunded.
type Refunding struct {
	RefundingVersionStructure
}

// Replacing represents the Replacing element
// Whether the product can be replaced if lost or stolen.
type Replacing struct {
	ReplacingVersionStructure
}

// Transferability represents the Transferability element
// The number and characteristics of persons entitled to use the public transport service instead of the original customer.
type Transferability struct {
	TransferabilityVersionStructure
}

// PurchaseWindowVersionStructure represents the PurchaseWindow_VersionStructure element
// Type for PURCHASE WINDOW.
type PurchaseWindowVersionStructure struct {
	UsageParameterVersionStructure
	// Action governed by Purchase Window. default is purchase. See allowed values.+v1.1
	PurchaseAction *PurchaseActionEnumeration `xml:"PurchaseAction,omitempty" json:"PurchaseAction,omitempty"`
	// When ticket can be purchased. See allowed values.
	PurchaseWhen *PurchaseWhenEnumeration `xml:"PurchaseWhen,omitempty" json:"PurchaseWhen,omitempty"`
	// Latest time on specified last day when ticket  can be purchased.
	LatestTime *string `xml:"LatestTime,omitempty" json:"LatestTime,omitempty"`
	// Minimum period before departure that purchase must be made.
	MinimumPeriodBeforeDeparture *string `xml:"MinimumPeriodBeforeDeparture,omitempty" json:"MinimumPeriodBeforeDeparture,omitempty"`
	// Minimum period before departure that purchase must be made - as arbitrary interval.
	MinimumPeriodIntervalRef *TimeIntervalRefStructure `xml:"MinimumPeriodIntervalRef,omitempty" json:"MinimumPeriodIntervalRef,omitempty"`
	// Maximum period before departure that purchase can be made.
	MaximumPeriodBeforeDeparture *string `xml:"MaximumPeriodBeforeDeparture,omitempty" json:"MaximumPeriodBeforeDeparture,omitempty"`
	// Maximum period before departure that purchase must be made - as arbitrary interval.
	MaximumPeriodIntervalRef *TimeIntervalRefStructure `xml:"MaximumPeriodIntervalRef,omitempty" json:"MaximumPeriodIntervalRef,omitempty"`
	// Permitted  moments of purchase. See allowed values +v1.1
	PurchaseMoment *PurchaseMomentEnumeration `xml:"PurchaseMoment,omitempty" json:"PurchaseMoment,omitempty"`
}

// BookingPolicyVersionStructure represents the BookingPolicy_VersionStructure element
// Type for BOOKING POLICY.
type BookingPolicyVersionStructure struct {
	UsageParameterVersionStructure
	// Booking methods allowed
	BookingMethods *BookingMethodEnumeration `xml:"BookingMethods,omitempty" json:"BookingMethods,omitempty"`
}

// ReservingVersionStructure represents the Reserving_VersionStructure element
// Type for RESERVING.
type ReservingVersionStructure struct {
	BookingPolicyVersionStructure
	// Nature of resrevation required.
	ReservingRequirements *ReservationEnumeration `xml:"ReservingRequirements,omitempty" json:"ReservingRequirements,omitempty"`
	// Minimum number of passengers required to be able to make a reservation.
	MinimumNumberToReserve *int `xml:"MinimumNumberToReserve,omitempty" json:"MinimumNumberToReserve,omitempty"`
	// Minimum number of passsengers required to be able to make a reservation.
	MaximumNumberToReserve *int `xml:"MaximumNumberToReserve,omitempty" json:"MaximumNumberToReserve,omitempty"`
	// Must Reserve a whole compartment. Default is 'false'.
	MustReserveWholeCompartment *bool `xml:"MustReserveWholeCompartment,omitempty" json:"MustReserveWholeCompartment,omitempty"`
	// Nature of reervation fee.
	ReservationChargeType *ReservationChargeTypeEnumeration `xml:"ReservationChargeType,omitempty" json:"ReservationChargeType,omitempty"`
	// Whether there is  a fee for reselling.
	FeeBasis *PerBasisEnumeration `xml:"FeeBasis,omitempty" json:"FeeBasis,omitempty"`
	// Whether there is an additional  fee for connecting reservations.
	HasFreeConnectingReservations *bool `xml:"HasFreeConnectingReservations,omitempty" json:"HasFreeConnectingReservations,omitempty"`
	// Whether there is an additional  fee for connecting reservations.
	NumberOfFreeConnectingReservations *int `xml:"NumberOfFreeConnectingReservations,omitempty" json:"NumberOfFreeConnectingReservations,omitempty"`
	// Whether reservation fees is refundable. +v1.1
	IsFeeRefundable *bool `xml:"IsFeeRefundable,omitempty" json:"IsFeeRefundable,omitempty"`
	// Booking Arrangements for Reservations.
	BookingArrangements *BookingArrangementsStructure `xml:"BookingArrangements,omitempty" json:"BookingArrangements,omitempty"`
	// Method of Seat allocation that is used. +V1.1
	SeatAllocationMethod *SeatAllocationMethodEnumeration `xml:"SeatAllocationMethod,omitempty" json:"SeatAllocationMethod,omitempty"`
	// Period after which reservation without  payment  will expire if not  paid for.  +v1.1
	ReservationExpiryPeriod *string `xml:"ReservationExpiryPeriod,omitempty" json:"ReservationExpiryPeriod,omitempty"`
}

// CancellingVersionStructure represents the Cancelling_VersionStructure element
// Type for CANCELLING.
type CancellingVersionStructure struct {
	UsageParameterVersionStructure
	// Booking Arrangements for Cancellations.
	BookingArrangements *BookingArrangementsStructure `xml:"BookingArrangements,omitempty" json:"BookingArrangements,omitempty"`
	// Whether Cancellation is allowed. +v1.2.2
	CancellationAllowed *bool `xml:"CancellationAllowed,omitempty" json:"CancellationAllowed,omitempty"`
	// Whether a booking deposit is refunded on cancellation.
	BookingDepositRefundable *bool `xml:"BookingDepositRefundable,omitempty" json:"BookingDepositRefundable,omitempty"`
}

// PurchaseWindow represents the PurchaseWindow element
// The number and characteristics of persons entitled to use the public transport service instead of the original customer.
type PurchaseWindow struct {
	PurchaseWindowVersionStructure
}

// BookingPolicy represents the BookingPolicy element
// The number and characteristics of persons entitled to use the public transport service instead of the original customer.
type BookingPolicy struct {
	BookingPolicyVersionStructure
}

// Reserving represents the Reserving element
// The number and characteristics of persons entitled to use the public transport service instead of the original customer.
type Reserving struct {
	ReservingVersionStructure
}

// Cancelling represents the Cancelling element
// The number and characteristics of persons entitled to use the public transport service instead of the original customer.
type Cancelling struct {
	CancellingVersionStructure
}

// ChargingPolicyVersionStructure represents the ChargingPolicy_VersionStructure element
// Type for CHARGING POLICY.
type ChargingPolicyVersionStructure struct {
	UsageParameterVersionStructure
	// Policy for traveling on credit.
	CreditPolicy *TravelCreditPolicyEnumeration `xml:"CreditPolicy,omitempty" json:"CreditPolicy,omitempty"`
	// Any expiry period on the right to  collec a rebate or adjustment.
	ExpireAfterPeriod *string `xml:"ExpireAfterPeriod,omitempty" json:"ExpireAfterPeriod,omitempty"`
	// Period after purchase by which time payment must be settled. +v1.1
	PaymentGracePeriod *string `xml:"PaymentGracePeriod,omitempty" json:"PaymentGracePeriod,omitempty"`
	// Policy for billing frequency.
	BillingPolicy *TravelBillingPolicyEnumeration `xml:"BillingPolicy,omitempty" json:"BillingPolicy,omitempty"`
	// Policy for deposits. +v1.2.2
	DepositPolicy *DepositPolicyEnumeration `xml:"DepositPolicy,omitempty" json:"DepositPolicy,omitempty"`
}

// PenaltyPolicyVersionStructure represents the PenaltyPolicy_VersionStructure element
// Type for PENALTY POLICY.
type PenaltyPolicyVersionStructure struct {
	UsageParameterVersionStructure
	// Type of PENALTY POLICY type.
	PenaltyPolicyType *PenaltyPolicyTypeEnumeration `xml:"PenaltyPolicyType,omitempty" json:"PenaltyPolicyType,omitempty"`
	// Policy on rentering at same station within a limited period.
	SameStationRentryPolicy *SameStationReentryPolicyEnumeration `xml:"SameStationRentryPolicy,omitempty" json:"SameStationRentryPolicy,omitempty"`
	// Minimum time before reentry at the same station.
	MinimumTimeBeforeReentry *string `xml:"MinimumTimeBeforeReentry,omitempty" json:"MinimumTimeBeforeReentry,omitempty"`
	// Lmit on the  number of fail-to-checkout events allowed before suspension. +v1.1
	MaximumNumberOfFailToCheckOutEvents *int `xml:"MaximumNumberOfFailToCheckOutEvents,omitempty" json:"MaximumNumberOfFailToCheckOutEvents,omitempty"`
}

// SubscribingVersionStructure represents the Subscribing_VersionStructure element
// Type for SUBSCRIBING.
type SubscribingVersionStructure struct {
	UsageParameterVersionStructure
	// Type of susbcription term, e.g. fixed, variable, etc.
	SubscriptionTermType *SubscriptionTermTypeEnumeration `xml:"SubscriptionTermType,omitempty" json:"SubscriptionTermType,omitempty"`
	// Minimum duration allowed for a subscription.
	MinimumSubscriptionPeriod *string `xml:"MinimumSubscriptionPeriod,omitempty" json:"MinimumSubscriptionPeriod,omitempty"`
	// Maximum duration allowed for a subscription.
	MaximumSubscriptionPeriod *string `xml:"MaximumSubscriptionPeriod,omitempty" json:"MaximumSubscriptionPeriod,omitempty"`
	// Subscription renewal policy.
	SubscriptionRenewalPolicy *SubscriptionRenewalPolicyEnumeration `xml:"SubscriptionRenewalPolicy,omitempty" json:"SubscriptionRenewalPolicy,omitempty"`
	// Allowed billing Intervals for payment in installment.
	PossibleInstallmenttIntervals *TimeIntervalRefsRelStructure `xml:"possibleInstallmenttIntervals,omitempty" json:"possibleInstallmenttIntervals,omitempty"`
	// Allowed means of payment of installations as standard value.
	InstallmentPaymentMethods *PaymentMethodEnumeration `xml:"InstallmentPaymentMethods,omitempty" json:"InstallmentPaymentMethods,omitempty"`
	// Allowed means of payment of installations as TYPE OF PAYMENT METHOD.
	InstallmentTypesOfPaymentMethod *TypeOfPaymentMethodRefsRelStructure `xml:"installmentTypesOfPaymentMethod,omitempty" json:"installmentTypesOfPaymentMethod,omitempty"`
}

// ChargingPolicy represents the ChargingPolicy element
// Policy regarding different aspects of charging such as credit limits.
type ChargingPolicy struct {
	ChargingPolicyVersionStructure
}

// PenaltyPolicy represents the PenaltyPolicy element
// Policy regarding different aspects of penalty charges, for example  repeated entry at the same station, no ticket etc.
type PenaltyPolicy struct {
	PenaltyPolicyVersionStructure
}

// Subscribing represents the Subscribing element
// Parameters relating to paying by Subscribing for a product. +v1.1
type Subscribing struct {
	SubscribingVersionStructure
}

// UserProfileVersionStructure represents the UserProfile_VersionStructure element
// Type for USER PROFILE.
type UserProfileVersionStructure struct {
	UsageParameterVersionStructure
	// Base Profile on which this User profile is based. Assume all properties from base that are not explicitly stated on subprofile.
	BaseUserProfileRef *UserProfileRefStructure `xml:"BaseUserProfileRef,omitempty" json:"BaseUserProfileRef,omitempty"`
	TypeOfConcessionRef *TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	// Classification of user profile.
	UserType *UserTypeEnumeration `xml:"UserType,omitempty" json:"UserType,omitempty"`
	// Minimum age to be eligible for profile.
	MinimumAge *int `xml:"MinimumAge,omitempty" json:"MinimumAge,omitempty"`
	// Maximum age to be eligible for profile.
	MaximumAge *int `xml:"MaximumAge,omitempty" json:"MaximumAge,omitempty"`
	// Date on which Age Applies, if fixed annually.
	MonthDayOnWhichAgeApplies *string `xml:"MonthDayOnWhichAgeApplies,omitempty" json:"MonthDayOnWhichAgeApplies,omitempty"`
	// Minimum height to be eligible for profile.
	MinimumHeight *float64 `xml:"MinimumHeight,omitempty" json:"MinimumHeight,omitempty"`
	// Maximum height to be eligible for profile.
	MaximumHeight *float64 `xml:"MaximumHeight,omitempty" json:"MaximumHeight,omitempty"`
	// Whether user must be Local Resident.
	LocalResident *bool `xml:"LocalResident,omitempty" json:"LocalResident,omitempty"`
	// Minimum and maximum numbers of users in each category  allowed on GROUP TICKET.
	Resides *ResidentialQualificationsRelStructure `xml:"resides,omitempty" json:"resides,omitempty"`
	GenderLimitation *GenderLimitation `xml:"GenderLimitation,omitempty" json:"GenderLimitation,omitempty"`
	// Type of document accepted as proof of eligibility.
	ProofRequired *ProofOfIdentityEnumeration `xml:"ProofRequired,omitempty" json:"ProofRequired,omitempty"`
	// Types of Document accepted as proof of identify - open values. +v1.2.2
	TypesOfProofRequiredRef *TypesOfProofRefsRelStructure `xml:"typesOfProofRequiredRef,omitempty" json:"typesOfProofRequiredRef,omitempty"`
	// Nature of discount for this profile.
	DiscountBasis *DiscountBasisEnumeration `xml:"DiscountBasis,omitempty" json:"DiscountBasis,omitempty"`
	// Minimum and maximum numbers of users in each category  allowed on GROUP TICKET.
	CompanionProfiles *CompanionProfilesRelStructure `xml:"companionProfiles,omitempty" json:"companionProfiles,omitempty"`
}

// CommercialProfileVersionStructure represents the CommercialProfile_VersionStructure element
// Type for COMMERCIAL PROFILE.
type CommercialProfileVersionStructure struct {
	UsageParameterVersionStructure
	TypeOfConcessionRef *TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	// Financial Factor.
	ConsumptionAmount *float64 `xml:"ConsumptionAmount,omitempty" json:"ConsumptionAmount,omitempty"`
	// Consumption Factor.
	ConsumptionUnits *float64 `xml:"ConsumptionUnits,omitempty" json:"ConsumptionUnits,omitempty"`
	GeneralGroupOfEntitiesRef *GeneralGroupOfEntitiesRef `xml:"GeneralGroupOfEntitiesRef,omitempty" json:"GeneralGroupOfEntitiesRef,omitempty"`
}

// GroupTicketVersionStructure represents the GroupTicket_VersionStructure element
// Type for GROUP TICKET.
type GroupTicketVersionStructure struct {
	UsageParameterVersionStructure
	TypeOfConcessionRef *TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	// Minimal number of persons overall allowed on GROUP TICKET.
	MinimumNumberOfPersons *int `xml:"MinimumNumberOfPersons,omitempty" json:"MinimumNumberOfPersons,omitempty"`
	// Maximum number of persons overall allowed on GROUP TICKET (card holders and companions).
	MaximumNumberOfPersons *int `xml:"MaximumNumberOfPersons,omitempty" json:"MaximumNumberOfPersons,omitempty"`
	// Minimum number of card holders needed on GROUP TICKET, if any.
	MinimumNumberOfCardHolders *int `xml:"MinimumNumberOfCardHolders,omitempty" json:"MinimumNumberOfCardHolders,omitempty"`
	// Minimum and maximum numbers of users in each category allowed on GROUP TICKET.
	CompanionProfiles *CompanionProfilesRelStructure `xml:"companionProfiles,omitempty" json:"companionProfiles,omitempty"`
	// Whether pricing is per person or for whole group.
	PricingBasis *PerBasisEnumeration `xml:"PricingBasis,omitempty" json:"PricingBasis,omitempty"`
	// Minimum number of free people allowed on ticket.
	MaximumPersonsFree *int `xml:"MaximumPersonsFree,omitempty" json:"MaximumPersonsFree,omitempty"`
	// Minimum number of discounted persons allowed on GROUP TICKET.
	MaximumPersonsDiscounted *int `xml:"MaximumPersonsDiscounted,omitempty" json:"MaximumPersonsDiscounted,omitempty"`
	// Whether there is only a discount for the first person in the group.
	DiscountOnlyForFirstPerson *bool `xml:"DiscountOnlyForFirstPerson,omitempty" json:"DiscountOnlyForFirstPerson,omitempty"`
	// Discount is given as one free place for  n people. Intermediate numbers are rounded down.
	OneForNpersons *int `xml:"OneForNPersons,omitempty" json:"OneForNPersons,omitempty"`
	// Possibilities for changiing the numbe of people in the group.
	GroupSizeChanges *GroupSizeChangesEnumeration `xml:"GroupSizeChanges,omitempty" json:"GroupSizeChanges,omitempty"`
	// Natute of tickets issued for group
	Ticketing *GroupTicketingEnumeration `xml:"Ticketing,omitempty" json:"Ticketing,omitempty"`
	// Whether the group must check in together.
	JointCheckIn *GroupCheckInEnumeration `xml:"JointCheckIn,omitempty" json:"JointCheckIn,omitempty"`
	GroupBookingFacility *GroupBookingFacility `xml:"GroupBookingFacility,omitempty" json:"GroupBookingFacility,omitempty"`
}

// CompanionProfilesRelStructure represents the companionProfiles_RelStructure element
// Type for  a list of COMPANION PROFILEs.
type CompanionProfilesRelStructure struct {
	OneToManyRelationshipStructure
	CompanionProfileRef []CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	// The number and characteristics of a category of users allowed on the ticket.
	CompanionProfile []CompanionProfile `xml:"CompanionProfile,omitempty" json:"CompanionProfile,omitempty"`
}

// CompanionProfileVersionStructure represents the CompanionProfile_VersionStructure element
// Type for COMPANION PROFILE.
type CompanionProfileVersionStructure struct {
	UsageParameterVersionStructure
	// Parent USER PROFILE or GROUP TICKET for which this  specifes the member rules.
	ParentRef *UsageParameterRefStructure `xml:"ParentRef,omitempty" json:"ParentRef,omitempty"`
	VehiclePoolerProfileRef *VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef *CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef *UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	// Required Relationship of companion to eliigble user +V1.1.
	CompanionRelationshipType *CompanionRelationshipEnumeration `xml:"CompanionRelationshipType,omitempty" json:"CompanionRelationshipType,omitempty"`
	// Minimum number of persons of this type allowed as companions..
	MinimumNumberOfPersons *int `xml:"MinimumNumberOfPersons,omitempty" json:"MinimumNumberOfPersons,omitempty"`
	// Maximum number of persons of this type allowed as companions.
	MaximumNumberOfPersons *int `xml:"MaximumNumberOfPersons,omitempty" json:"MaximumNumberOfPersons,omitempty"`
	// Nature of discount for this profile.
	DiscountBasis *DiscountBasisEnumeration `xml:"DiscountBasis,omitempty" json:"DiscountBasis,omitempty"`
}

// ResidentialQualificationsRelStructure represents the residentialQualifications_RelStructure element
// Type for  a list of RESIDENTIAL QUALIFICATIONs.
type ResidentialQualificationsRelStructure struct {
	OneToManyRelationshipStructure
	ResidentialQualificationRef []ResidentialQualificationRef `xml:"ResidentialQualificationRef,omitempty" json:"ResidentialQualificationRef,omitempty"`
	// The number and characteristics of a category of users allowed on the ticket.
	ResidentialQualification []ResidentialQualification `xml:"ResidentialQualification,omitempty" json:"ResidentialQualification,omitempty"`
}

// ResidentialQualificationVersionStructure represents the ResidentialQualification_VersionStructure element
// Type for RESIDENTIAL QUALIFICATION.
type ResidentialQualificationVersionStructure struct {
	VersionedChildStructure
	// Name of RESIDENTIAL QUALIFICATIO.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of RESIDENTIAL QUALIFICATIO.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Parent USER PROFILE  or GROUP TICKET for which this  specifes the member rules.
	ParentRef *UsageParameterRefStructure `xml:"ParentRef,omitempty" json:"ParentRef,omitempty"`
	// Whthere the user must reside or must not reside in given place.
	MustReside *bool `xml:"MustReside,omitempty" json:"MustReside,omitempty"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	// Classifcation of type of residence required, e.g. live, work, study.
	ResidenceType *ResidenceTypeEnumeration `xml:"ResidenceType,omitempty" json:"ResidenceType,omitempty"`
	// Minimum period of residency needed to qualify.
	MinimumDuration *string `xml:"MinimumDuration,omitempty" json:"MinimumDuration,omitempty"`
}

// TypeOfConcessionsRelStructure represents the typeOfConcessions_RelStructure element
// Type for a list of TYPE OF CONCESSIONs.
type TypeOfConcessionsRelStructure struct {
	ContainmentAggregationStructure
	TypeOfConcessionRef []TypeOfConcessionRef `xml:"TypeOfConcessionRef,omitempty" json:"TypeOfConcessionRef,omitempty"`
	// A TYPE OF CONCESSION specifying access rights for the FARE STRUCTURE ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	TypeOfConcession []TypeOfConcession `xml:"TypeOfConcession,omitempty" json:"TypeOfConcession,omitempty"`
}

// TypeOfConcessionVersionStructure represents the TypeOfConcession_VersionStructure element
// Type for TYPE OF CONCESSION.
type TypeOfConcessionVersionStructure struct {
	TypeOfValueVersionStructure
	// Alternative names for value.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
}

// TypeOfProofValueStructure represents the TypeOfProof_ValueStructure element
// Type for a TYPE OF PROOF.
type TypeOfProofValueStructure struct {
	TypeOfValueVersionStructure
}

// EligibilityChangePolicyVersionStructure represents the EligibilityChangePolicy_VersionStructure element
// Type for ELIGIBILITY CHANGE POLICY.
type EligibilityChangePolicyVersionStructure struct {
	UsageParameterVersionStructure
	// Policy to apply onproduct holder  becoming eligible.
	OnBecomingEligiblePolicy *OnBecomingEnumeration `xml:"OnBecomingEligiblePolicy,omitempty" json:"OnBecomingEligiblePolicy,omitempty"`
	// Policy to apply on product holder  ceasing to be eligible.
	OnCeasingToBeEligiblePolicy *OnCeasingEnumeration `xml:"OnCeasingToBeEligiblePolicy,omitempty" json:"OnCeasingToBeEligiblePolicy,omitempty"`
}

// UserProfile represents the UserProfile element
// The social profile of a passenger, based on age group, education, profession, social status, sex etc., often used for allowing discounts: 18-40 years old, graduates, drivers, unemployed, women etc.
type UserProfile struct {
	UserProfileVersionStructure
}

// CommercialProfile represents the CommercialProfile element
// A category of users depending on their commercial relations with the operator (frequency of use, amount of purchase etc.), often used for allowing discounts.
type CommercialProfile struct {
	CommercialProfileVersionStructure
}

// GroupTicket represents the GroupTicket element
// The number and characteristics of persons entitled to travel including the holder of the access right.
type GroupTicket struct {
	GroupTicketVersionStructure
}

// CompanionProfile represents the CompanionProfile element
// The number and characteristics (weight, volume) of luggage that a holder of an access right is entitled to carry.
type CompanionProfile struct {
	CompanionProfileVersionStructure
}

// ResidentialQualification represents the ResidentialQualification element
// The number and characteristics (weight, volume) of luggage that a holder of an access right is entitled to carry.
type ResidentialQualification struct {
	ResidentialQualificationVersionStructure
}

// TypeOfConcession represents the TypeOfConcession element
// Category of concession user
type TypeOfConcession struct {
	TypeOfConcessionVersionStructure
}

// TypeOfProof represents the TypeOfProof element
// Type of Proff of identity required. +v1.2.2
type TypeOfProof struct {
	TypeOfProofValueStructure
}

// EligibilityChangePolicy represents the EligibilityChangePolicy element
// The policy to apply  if ta user's eligibility as a USER PROFILE changes.
type EligibilityChangePolicy struct {
	EligibilityChangePolicyVersionStructure
}

// EntitlementGivenVersionStructure represents the EntitlementGiven_VersionStructure element
// Type for ENTITLEMENT GIVEN.
type EntitlementGivenVersionStructure struct {
	UsageParameterVersionStructure
	EntitlementProductRef *EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef *ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	// Minimum duration  that required  product must be held to be eligible.
	MinimumQualificationPeriod *string `xml:"MinimumQualificationPeriod,omitempty" json:"MinimumQualificationPeriod,omitempty"`
	// Limits on choices associated with entitlement +v1.1
	EntitlementConstraint *EntitlementConstraintStructure `xml:"EntitlementConstraint,omitempty" json:"EntitlementConstraint,omitempty"`
	// Type of Entitlement given.
	EntitlementType *EntitlementTypeEnumeration `xml:"EntitlementType,omitempty" json:"EntitlementType,omitempty"`
}

// EntitlementRequiredVersionStructure represents the EntitlementRequired_VersionStructure element
// Type for ENTITLEMENT REQUIRED.
type EntitlementRequiredVersionStructure struct {
	UsageParameterVersionStructure
	EntitlementProductRef *EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef *ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	// Minimum duration  that required  product must be held to be eligible.
	MinimumQualificationPeriod *string `xml:"MinimumQualificationPeriod,omitempty" json:"MinimumQualificationPeriod,omitempty"`
	// Limits on choices associated with entitlement +v1.1
	EntitlementConstraint *EntitlementConstraintStructure `xml:"EntitlementConstraint,omitempty" json:"EntitlementConstraint,omitempty"`
}

// EntitlementConstraintStructure represents the EntitlementConstraintStructure element
// Entitlement constraints related product or offe.  +v1.1.
type EntitlementConstraintStructure struct {
	// Constraints on  valdity period.
	PeriodConstraint *SamePeriodEnumeration `xml:"PeriodConstraint,omitempty" json:"PeriodConstraint,omitempty"`
	// Constraints on origin SCHEDULED STOP POINT
	OriginConstraint *SameStopEnumeration `xml:"OriginConstraint,omitempty" json:"OriginConstraint,omitempty"`
	// Constraints on  destination SCHEDULED STOP POINT
	DestinationConstraint *SameStopEnumeration `xml:"DestinationConstraint,omitempty" json:"DestinationConstraint,omitempty"`
	// Constraints on TARIFF ZONE.
	TariffZoneConstraint *SameZoneEnumeration `xml:"TariffZoneConstraint,omitempty" json:"TariffZoneConstraint,omitempty"`
	// Constraints on ROUTE
	RouteConstraint *SameRouteEnumeration `xml:"RouteConstraint,omitempty" json:"RouteConstraint,omitempty"`
	// Constraints on DIRECTION.
	DirectionConstraint *SameRouteEnumeration `xml:"DirectionConstraint,omitempty" json:"DirectionConstraint,omitempty"`
	// Constraints on OPERATOR.
	OperatorConstraint *SameOperatorEnumeration `xml:"OperatorConstraint,omitempty" json:"OperatorConstraint,omitempty"`
	// Constraints on  TYPE OF PRODUCT CATEGORY
	TypeOfProductCategoryConstraint *SameTypeOfProductCategoryEnumeration `xml:"TypeOfProductCategoryConstraint,omitempty" json:"TypeOfProductCategoryConstraint,omitempty"`
	// Constraints on CLASS OF USE.
	ClassOfUseConstraint *SameClassOfUseEnumeration `xml:"ClassOfUseConstraint,omitempty" json:"ClassOfUseConstraint,omitempty"`
	// Constraints on  TYPE OF TRAVEL DOCUMENT
	TypeOfTravelDocumentConstraint *SameTypeOfTravelDocumentEnumeration `xml:"TypeOfTravelDocumentConstraint,omitempty" json:"TypeOfTravelDocumentConstraint,omitempty"`
	// Constraints on   SERVICE JOURNEYs  to be used.
	JourneyConstraint *SameJourneyEnumeration `xml:"JourneyConstraint,omitempty" json:"JourneyConstraint,omitempty"`
	// Constraints on  USER. Default is samePerson.
	UserConstraint *SameUserEnumeration `xml:"UserConstraint,omitempty" json:"UserConstraint,omitempty"`
	// USER PROFILEs to which entitlement applies
	SpecificToProfiles *UserProfileRefsRelStructure `xml:"specificToProfiles,omitempty" json:"specificToProfiles,omitempty"`
}

// EntitlementGiven represents the EntitlementGiven element
// A right to a SERVICE ACCESS RIGHT is given by a FARE  PRODUCT.
type EntitlementGiven struct {
	EntitlementGivenVersionStructure
}

// EntitlementRequired represents the EntitlementRequired element
// A rerirement to a SERVICE ACCESS RIGHT in order to purchase or use PRODUCT.
type EntitlementRequired struct {
	EntitlementRequiredVersionStructure
}

// LuggageAllowanceVersionStructure represents the LuggageAllowance_VersionStructure element
// Type for LUGGAGE ALLOWANCE.
type LuggageAllowanceVersionStructure struct {
	UsageParameterVersionStructure
	// Type of Baggage use.
	BaggageUseType *BaggageUseTypeEnumeration `xml:"BaggageUseType,omitempty" json:"BaggageUseType,omitempty"`
	// Type of Baggage described by this allowance.
	BaggageType *BaggageTypeEnumeration `xml:"BaggageType,omitempty" json:"BaggageType,omitempty"`
	// Summary of luggage allowance type.
	LuggageAllowanceType *LuggageAllowanceTypeEnumeration `xml:"LuggageAllowanceType,omitempty" json:"LuggageAllowanceType,omitempty"`
	// Maximum number of items allowed for  hand luggage.
	MaximumNumberItems *int `xml:"MaximumNumberItems,omitempty" json:"MaximumNumberItems,omitempty"`
	// Maximum height of a bag.
	MaximumBagHeight *float64 `xml:"MaximumBagHeight,omitempty" json:"MaximumBagHeight,omitempty"`
	// Maximum width of a bag.
	MaximumBagWidth *float64 `xml:"MaximumBagWidth,omitempty" json:"MaximumBagWidth,omitempty"`
	// Maximum depth of a bag.
	MaximumBagDepth *float64 `xml:"MaximumBagDepth,omitempty" json:"MaximumBagDepth,omitempty"`
	// Maximum weight of a bag.
	MaximumBagWeight *float64 `xml:"MaximumBagWeight,omitempty" json:"MaximumBagWeight,omitempty"`
	// Maximum weight of a bag.
	TotalWeight *float64 `xml:"TotalWeight,omitempty" json:"TotalWeight,omitempty"`
	// Basis on which lugggage is charged.
	LuggageChargingBasis *LuggageChargingBasisEnumeration `xml:"LuggageChargingBasis,omitempty" json:"LuggageChargingBasis,omitempty"`
}

// LuggageAllowance represents the LuggageAllowance element
// The number and characteristics (weight, volume) of luggage that a holder of an access right is entitled to carry.
type LuggageAllowance struct {
	LuggageAllowanceVersionStructure
}

// RoundTripVersionStructure represents the RoundTrip_VersionStructure element
// Type for ROUND TRIP.
type RoundTripVersionStructure struct {
	UsageParameterVersionStructure
	// Type of trip. (Single, return, return only). default is single.
	TripType *RoundTripTypeEnumeration `xml:"TripType,omitempty" json:"TripType,omitempty"`
	// Whether fare for return trip is simply double the single fare.
	DoubleSingleFare *bool `xml:"DoubleSingleFare,omitempty" json:"DoubleSingleFare,omitempty"`
	// Whether trip is classified as a short trip for fare calculation.
	ShortTrip *bool `xml:"ShortTrip,omitempty" json:"ShortTrip,omitempty"`
	// Whether return trip is required.
	IsRequired *bool `xml:"IsRequired,omitempty" json:"IsRequired,omitempty"`
}

// RoutingVersionStructure represents the Routing_VersionStructure element
// Type for ROUTING.
type RoutingVersionStructure struct {
	UsageParameterVersionStructure
	// Whether restricted to certain toutes.
	IsRestricted *bool `xml:"IsRestricted,omitempty" json:"IsRestricted,omitempty"`
	// Whether return must be same as outward.
	ReturnRouteIdentical *bool `xml:"ReturnRouteIdentical,omitempty" json:"ReturnRouteIdentical,omitempty"`
	// Passenger may only take routes that proceed in a single direction. (They may not use product to achieve a return trip for the cost of a single trip by purchasing a circular route and a making a journe break).
	ForwardsOnly *bool `xml:"ForwardsOnly,omitempty" json:"ForwardsOnly,omitempty"`
	// Whether route crosses a border.
	CrossBorder *bool `xml:"CrossBorder,omitempty" json:"CrossBorder,omitempty"`
}

// StepLimitVersionStructure represents the StepLimit_VersionStructure element
// Type for STEP LIMIT.
type StepLimitVersionStructure struct {
	UsageParameterVersionStructure
	// Whether restricted to a number of stops.
	Restricted *bool `xml:"Restricted,omitempty" json:"Restricted,omitempty"`
	// Units in which steps atre counted.
	AdjustmentUnits *StepLimitUnitEnumeration `xml:"AdjustmentUnits,omitempty" json:"AdjustmentUnits,omitempty"`
	// Minimum number of steps allowed.
	MinimumNumberOfSteps *int `xml:"MinimumNumberOfSteps,omitempty" json:"MinimumNumberOfSteps,omitempty"`
	// Miaxmum number of steps allowed.
	MaximumNumberOfSteps *int `xml:"MaximumNumberOfSteps,omitempty" json:"MaximumNumberOfSteps,omitempty"`
	// Miaxmum number of Overall trips allowed.
	MaximumNumberOfTrips *int `xml:"MaximumNumberOfTrips,omitempty" json:"MaximumNumberOfTrips,omitempty"`
}

// FrequencyOfUseVersionStructure represents the FrequencyOfUse_VersionStructure element
// Type for FREQUENCY OF USE.
type FrequencyOfUseVersionStructure struct {
	UsageParameterVersionStructure
	// Nature of FREQUENCY OF USE Transfers.
	FrequencyOfUseType *FrequencyOfUseTypeEnumeration `xml:"FrequencyOfUseType,omitempty" json:"FrequencyOfUseType,omitempty"`
	// Minimum number of times product can be used.
	MinimalFrequency *int `xml:"MinimalFrequency,omitempty" json:"MinimalFrequency,omitempty"`
	// Maximum number of times  product can be used.
	MaximalFrequency *int `xml:"MaximalFrequency,omitempty" json:"MaximalFrequency,omitempty"`
	// Interval within which frequency is measured. If absent forever.
	FrequencyInterval *string `xml:"FrequencyInterval,omitempty" json:"FrequencyInterval,omitempty"`
	TimeIntervalRef *TimeIntervalRef `xml:"TimeIntervalRef,omitempty" json:"TimeIntervalRef,omitempty"`
	// Nature of discount for this profile.
	DiscountBasis *DiscountBasisEnumeration `xml:"DiscountBasis,omitempty" json:"DiscountBasis,omitempty"`
}

// UsageValidityPeriodVersionStructure represents the UsageValidityPeriod_VersionStructure element
// Type for USAGE VALIDITY PERIOD.
type UsageValidityPeriodVersionStructure struct {
	UsageParameterVersionStructure
	// Nature of USAGE VALIDITY PERIOD.
	ValidityPeriodType *UsageValidityTypeEnumeration `xml:"ValidityPeriodType,omitempty" json:"ValidityPeriodType,omitempty"`
	// Event triggering usage period.
	UsageTrigger *UsageTriggerEnumeration `xml:"UsageTrigger,omitempty" json:"UsageTrigger,omitempty"`
	// Event triggering end of usage period.
	UsageEnd *UsageEndEnumeration `xml:"UsageEnd,omitempty" json:"UsageEnd,omitempty"`
	// Duration of  USAGE VALIDITY PERIOD.
	StandardDuration *string `xml:"StandardDuration,omitempty" json:"StandardDuration,omitempty"`
	// Means of activatiing start of period.
	ActivationMeans *ActivationMeansEnumeration `xml:"ActivationMeans,omitempty" json:"ActivationMeans,omitempty"`
	// Start date of  USAGE VALIDITY PERIOD.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// Start time of  USAGE VALIDITY PERIOD.
	StartTime *string `xml:"StartTime,omitempty" json:"StartTime,omitempty"`
	// End Date of  USAGE VALIDITY PERIOD.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	// End time of  USAGE VALIDITY PERIOD.
	EndTime *string `xml:"EndTime,omitempty" json:"EndTime,omitempty"`
	// Whether start type of trip or pass  is  variable or fixed. +v1.1
	UsageStartConstraintType *UsageStartConstraintTypeEnumeration `xml:"UsageStartConstraintType,omitempty" json:"UsageStartConstraintType,omitempty"`
	// If UsageStartConstraintType is "fixed", then allowed days to start on can be indicated by a DAY TYPE, for example Monday, 1st of Month, Start of Quarter, etc. (Applies mainly  to Passes.)
	StartOnlyOn *DayTypesRelStructure `xml:"startOnlyOn,omitempty" json:"startOnlyOn,omitempty"`
	// If UsageStartConstraintType is "fixedWindow" , then can specify a window relative to booked train for alternative services that may be used. +v1.1
	FixedStartWindow *FixedStartWindowStructure `xml:"FixedStartWindow,omitempty" json:"FixedStartWindow,omitempty"`
	// Interaction with blackout periods.
	BlackoutUse *BlackoutStartEnumeration `xml:"BlackoutUse,omitempty" json:"BlackoutUse,omitempty"`
}

// FixedStartWindowStructure represents the FixedStartWindowStructure element
// Type for Fiexd Start WIndow.
type FixedStartWindowStructure struct {
	// If UsageStartConstraintType is "fixedWindow", maximum number of services before the booked train that may also be used. +v1.1
	MaximumServicesBefore *int `xml:"MaximumServicesBefore,omitempty" json:"MaximumServicesBefore,omitempty"`
	// If UsageStartConstraintType is "fixedWindow", maximum period before the booked train during which other trains may also be caught. +v1.1
	FlexiblePeriodBefore *string `xml:"FlexiblePeriodBefore,omitempty" json:"FlexiblePeriodBefore,omitempty"`
	// If UsageStartConstraintType is "fixedWindow", maximum number of services after the booked train that may also be used. +v1.1
	MaximumServicesAfter *int `xml:"MaximumServicesAfter,omitempty" json:"MaximumServicesAfter,omitempty"`
	// If UsageStartConstraintType is "fixedWindow", maximum period after the booked train during which other trains may also be caught. +v1.1
	FlexiblePeriodAfter *string `xml:"FlexiblePeriodAfter,omitempty" json:"FlexiblePeriodAfter,omitempty"`
}

// SuspendingVersionStructure represents the Suspending_VersionStructure element
// Type for SUSPENDING
type SuspendingVersionStructure struct {
	UsageParameterVersionStructure
	// Allowed policies for suspending term of product.
	SuspensionPolicy *SuspensionPolicyEnumeration `xml:"SuspensionPolicy,omitempty" json:"SuspensionPolicy,omitempty"`
	// Minimum duration that must have occurred before a suspension is allowed.
	QualificationPeriod *string `xml:"QualificationPeriod,omitempty" json:"QualificationPeriod,omitempty"`
	// Minimum proportion of term that must  have occurred before a suspension is allowed.
	QualificationPercent *float64 `xml:"QualificationPercent,omitempty" json:"QualificationPercent,omitempty"`
	// Minimum duration allowed for a suspension.
	MinimumSuspensionPeriod *string `xml:"MinimumSuspensionPeriod,omitempty" json:"MinimumSuspensionPeriod,omitempty"`
	// Maximum duration allowed for a suspension.
	MaximumSuspensionPeriod *string `xml:"MaximumSuspensionPeriod,omitempty" json:"MaximumSuspensionPeriod,omitempty"`
	// Maximum duration allowed for a suspension. with the term of the fare product or subscription.
	MaximumNumberOfSuspensionsPerTerm *int `xml:"MaximumNumberOfSuspensionsPerTerm,omitempty" json:"MaximumNumberOfSuspensionsPerTerm,omitempty"`
}

// InterchangingVersionStructure represents the Interchanging_VersionStructure element
// Type for INTERCHANGING.
type InterchangingVersionStructure struct {
	UsageParameterVersionStructure
	// Whether an Jinterchange can be made.
	CanInterchange *bool `xml:"CanInterchange,omitempty" json:"CanInterchange,omitempty"`
	// Mode from which interchange is made.
	FromMode *AllVehicleModesOfTransportEnumeration `xml:"FromMode,omitempty" json:"FromMode,omitempty"`
	// Mode to which interchange is made.
	ToMode *AllVehicleModesOfTransportEnumeration `xml:"ToMode,omitempty" json:"ToMode,omitempty"`
	// Maximum number of  interhanges between SERVICE JOURNEYs that can be made in a single TRIP.
	MaximumNumberOfInterchanges *int `xml:"MaximumNumberOfInterchanges,omitempty" json:"MaximumNumberOfInterchanges,omitempty"`
	// Whether fare for return trip is simply double the single fare.
	MaximumTimeToMakeAtransfer *string `xml:"MaximumTimeToMakeATransfer,omitempty" json:"MaximumTimeToMakeATransfer,omitempty"`
	// Whether the Journey can be interrupted, i.e. leave stop point and return.
	CanBreakJourney *bool `xml:"CanBreakJourney,omitempty" json:"CanBreakJourney,omitempty"`
	// Whether interchanging crosses a border.
	CrossBorder *bool `xml:"CrossBorder,omitempty" json:"CrossBorder,omitempty"`
	// Whether the Journey can be interrupted, i.e. leave stop point and return. +v1.1
	RegisterBreakOfJourney *RegisterBreakOfJourneyEnumeration `xml:"RegisterBreakOfJourney,omitempty" json:"RegisterBreakOfJourney,omitempty"`
}

// MinimumStayVersionStructure represents the MinimumStay_VersionStructure element
// Type for MINIMUM STAY.
type MinimumStayVersionStructure struct {
	UsageParameterVersionStructure
	// Nature of minimum stay  requirement.
	MinimumStayType *MinimumStayTypeEnumeration `xml:"MinimumStayType,omitempty" json:"MinimumStayType,omitempty"`
	// Days of Week that must be away.
	RequiresNightsAway *DayOfWeekEnumeration `xml:"RequiresNightsAway,omitempty" json:"RequiresNightsAway,omitempty"`
	// Minimum number of nighst away that must be spent.
	MinimumNumberOfNightsAway *int `xml:"MinimumNumberOfNightsAway,omitempty" json:"MinimumNumberOfNightsAway,omitempty"`
	// Minimum number of nighst that can be spent away on trip.
	MaximumNumberOfNightsAway *int `xml:"MaximumNumberOfNightsAway,omitempty" json:"MaximumNumberOfNightsAway,omitempty"`
}

// RoundTrip represents the RoundTrip element
// Properties relating to single or return trip use of a fare.
type RoundTrip struct {
	RoundTripVersionStructure
}

// Routing represents the Routing element
// Limitations on routing of a fare.
type Routing struct {
	RoutingVersionStructure
}

// StepLimit represents the StepLimit element
// Geographical parameter limiting the access rights by counts of stops, sections or zones.
type StepLimit struct {
	StepLimitVersionStructure
}

// FrequencyOfUse represents the FrequencyOfUse element
// The limits of usage frequency for a FARE PRODUCT (or one of its components) or a SALES OFFER PACKAGE during a specific VALIDITY PERIOD. There may be different tariffs depending on how often the right is consumed during the period.
type FrequencyOfUse struct {
	FrequencyOfUseVersionStructure
}

// UsageValidityPeriod represents the UsageValidityPeriod element
// A time limitation for validity of a FARE PRODUCT or a SALES OFFER PACKAGE. It may be composed of a standard duration (e.g. 3 days, 1 month) and/or fixed start/end dates and times.
type UsageValidityPeriod struct {
	UsageValidityPeriodVersionStructure
}

// Suspending represents the Suspending element
// Conditions governing suspension of a FARE PRODUCT, e.g.  period pass or subscription.
type Suspending struct {
	SuspendingVersionStructure
}

// Interchanging represents the Interchanging element
// Limitations on making changes within a trip.
type Interchanging struct {
	InterchangingVersionStructure
}

// MinimumStay represents the MinimumStay element
// Details of any minimum stay at the destination  required  to use the product.
type MinimumStay struct {
	MinimumStayVersionStructure
}

// DistributionChannelsInFrameRelStructure represents the distributionChannelsInFrame_RelStructure element
// Type for containment in frame of DISTRIBUTION CHANNEL.
type DistributionChannelsInFrameRelStructure struct {
	FrameContainmentStructure
	DistributionChannel []DistributionChannel `xml:"DistributionChannel" json:"DistributionChannel"`
}

// GroupsOfDistributionChannelsInFrameRelStructure represents the groupsOfDistributionChannelsInFrame_RelStructure element
// Type for containment in frame of DISTRIBUTION CHANNEL.
type GroupsOfDistributionChannelsInFrameRelStructure struct {
	FrameContainmentStructure
	GroupOfDistributionChannels []GroupOfDistributionChannels `xml:"GroupOfDistributionChannels" json:"GroupOfDistributionChannels"`
}

// FulfilmentMethodsInFrameRelStructure represents the fulfilmentMethodsInFrame_RelStructure element
// Type for containment in frame of FULFILMENT METHOD.
type FulfilmentMethodsInFrameRelStructure struct {
	FrameContainmentStructure
	FulfilmentMethod []FulfilmentMethod `xml:"FulfilmentMethod" json:"FulfilmentMethod"`
}

// DistributionChannelVersionStructure represents the DistributionChannel_VersionStructure element
// Type for DISTRIBUTION CHANNEL.
type DistributionChannelVersionStructure struct {
	TypeOfValueVersionStructure
	// SALES TRANSACTIONs in DISTRIBUTION CHANNEL.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// Classification of  DISTRIBUTION CHANNEL.
	DistributionChannelType *DistributionChannelTypeEnumeration `xml:"DistributionChannelType,omitempty" json:"DistributionChannelType,omitempty"`
	// Whether use of the channel is obligatory.
	IsObligatory *bool `xml:"IsObligatory,omitempty" json:"IsObligatory,omitempty"`
	// Whether use of the channel requries the pruchaser to have an email address.
	RequiresEmailAddress *bool `xml:"RequiresEmailAddress,omitempty" json:"RequiresEmailAddress,omitempty"`
	// Contact details for distribution channel
	ContactDetails *ContactStructure `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	// Payment methods allowed.
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
	// Additional methods for paymen + v1.1
	TypesOfPaymentMethod *TypeOfPaymentMethodRefsRelStructure `xml:"typesOfPaymentMethod,omitempty" json:"typesOfPaymentMethod,omitempty"`
	// Defaut distribution Rigts allowed by DISTRIBUTION CHANNEL.
	DistributionRights *DistributionRightsEnumeration `xml:"DistributionRights,omitempty" json:"DistributionRights,omitempty"`
	// List of specified points to which distribution is restricted, if any.
	DistributionPoints *PointRefsRelStructure `xml:"distributionPoints,omitempty" json:"distributionPoints,omitempty"`
	// Prefined Group of specified points to which  distribution is restricted, if any.
	DistributionGroupRef *GeneralGroupOfEntitiesRefStructure `xml:"DistributionGroupRef,omitempty" json:"DistributionGroupRef,omitempty"`
}

// GroupOfDistributionChannelsVersionStructure represents the GroupOfDistributionChannels_VersionStructure element
// Type for GROUP OF DISTRIBUTION CHANNELs.
type GroupOfDistributionChannelsVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// DISTRIBUTION CHANNELs in Group.
	Members *DistributionChannelRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// FulfilmentMethodsRelStructure represents the fulfilmentMethods_RelStructure element
// Type for a list of FULFILMENT METHODs.
type FulfilmentMethodsRelStructure struct {
	ContainmentAggregationStructure
	FulfilmentMethodRef []FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	// A sequence or set of CONTROLLABLE ELEMENTs to which rules for limitation of access rights and calculation of prices (DISTRIBUTION CHANNEL) are applied.
	FulfilmentMethod []FulfilmentMethod `xml:"FulfilmentMethod,omitempty" json:"FulfilmentMethod,omitempty"`
}

// FulfilmentMethodVersionStructure represents the FulfilmentMethod_VersionStructure element
// Type for FULFILMENT METHOD.
type FulfilmentMethodVersionStructure struct {
	PriceableObjectVersionStructure
	// Classification of fulfilment method.
	FulfilmentMethodType *FulfilmentMethodTypeEnumeration `xml:"FulfilmentMethodType,omitempty" json:"FulfilmentMethodType,omitempty"`
	// Whether use of of the method requires a credit or debit card.
	RequiresCard *bool `xml:"RequiresCard,omitempty" json:"RequiresCard,omitempty"`
	// Whether use of of the method requires  a booking reference.
	RequiresBookingReference *bool `xml:"RequiresBookingReference,omitempty" json:"RequiresBookingReference,omitempty"`
	// TYPES OF TRAVEL DOCUMENT associated with method.
	TypesOfTravelDocument *TypeOfTravelDocumentRefsRelStructure `xml:"typesOfTravelDocument,omitempty" json:"typesOfTravelDocument,omitempty"`
	// Prices for FULFILMENT METHOD.
	Prices *FulfilmentMethodPricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// FulfilmentMethodPricesRelStructure represents the fulfilmentMethodPrices_RelStructure element
// Type for a list of FULFILMENT METHOD PRICEs.
type FulfilmentMethodPricesRelStructure struct {
	StrictContainmentAggregationStructure
	FulfilmentMethodPriceRef []FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	// A set of all possible price features of a FARE STRUCTURE ELEMENT: default total price, discount in value or percentage etc.
	FulfilmentMethodPrice []FulfilmentMethodPriceVersionedChildStructure `xml:"FulfilmentMethodPrice,omitempty" json:"FulfilmentMethodPrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// FulfilmentMethodPriceVersionedChildStructure represents the FulfilmentMethodPrice_VersionedChildStructure element
// Type for a FULFILMENT METHOD PRICE.
type FulfilmentMethodPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	FulfilmentMethodRef *FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
}

// DistributionChannel represents the DistributionChannel element
// A type of outlet for selling a product.
type DistributionChannel struct {
	DistributionChannelVersionStructure
}

// GroupOfDistributionChannels represents the GroupOfDistributionChannels element
// A package to be sold as a whole, consisting of one or several FARE PRODUCTs materialised thanks to one or several TRAVEL DOCUMENTs. The FARE PRODUCTs may be either directly attached to the TRAVEL DOCUMENTs, or may be reloadable on the TRAVEL DOCUMENTs.
type GroupOfDistributionChannels struct {
	GroupOfDistributionChannelsVersionStructure
}

// FulfilmentMethod represents the FulfilmentMethod element
// The means by which the ticket is delivered to the Customer. e.g. online, collection, etc.
type FulfilmentMethod struct {
	FulfilmentMethodVersionStructure
}

// FulfilmentMethodPrice represents the FulfilmentMethodPrice element
// A set of all possible price features of a FULFILMENT METHOD: default total price, discount in value or percentage etc.
type FulfilmentMethodPrice struct {
	FulfilmentMethodPriceVersionedChildStructure
}

// SalesOfferPackageEntitlementGivenVersionStructure represents the SalesOfferPackageEntitlementGiven_VersionStructure element
// Type for SALES OFFER PACKAGE ENTITLEMENT GIVEN.
type SalesOfferPackageEntitlementGivenVersionStructure struct {
	UsageParameterVersionStructure
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	// Minimum duration  that required  product must be held to be eligible.
	MinimumQualificationPeriod *string `xml:"MinimumQualificationPeriod,omitempty" json:"MinimumQualificationPeriod,omitempty"`
	// Limits on choices associated with entitlement +v1.1
	EntitlementConstraint *EntitlementConstraintStructure `xml:"EntitlementConstraint,omitempty" json:"EntitlementConstraint,omitempty"`
	// Type of Entitlement given.
	EntitlementType *EntitlementTypeEnumeration `xml:"EntitlementType,omitempty" json:"EntitlementType,omitempty"`
}

// SalesOfferPackageEntitlementRequiredVersionStructure represents the SalesOfferPackageEntitlementRequired_VersionStructure element
// Type for SALES OFFER PACKAGE ENTITLEMENT REQUIRED.
type SalesOfferPackageEntitlementRequiredVersionStructure struct {
	UsageParameterVersionStructure
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	// Minimum duration  that required  product must be held to be eligible.
	MinimumQualificationPeriod *string `xml:"MinimumQualificationPeriod,omitempty" json:"MinimumQualificationPeriod,omitempty"`
	// Limits on choices associated with entitlement +v1.1
	EntitlementConstraint *EntitlementConstraintStructure `xml:"EntitlementConstraint,omitempty" json:"EntitlementConstraint,omitempty"`
}

// SalesOfferPackageEntitlementGiven represents the SalesOfferPackageEntitlementGiven element
// A right to a SALES OFFER PACKAGE    given by a SALES OFFER PACKAGE .
type SalesOfferPackageEntitlementGiven struct {
	SalesOfferPackageEntitlementGivenVersionStructure
}

// SalesOfferPackageEntitlementRequired represents the SalesOfferPackageEntitlementRequired element
// A rerirement to a SALES OFFER PACKAGE  in order to purchase or use PRODUCT.
type SalesOfferPackageEntitlementRequired struct {
	SalesOfferPackageEntitlementRequiredVersionStructure
}

// SalesOfferPackagesInFrameRelStructure represents the salesOfferPackagesInFrame_RelStructure element
// Type for containment in frame of SALES OFFER PACKAGE.
type SalesOfferPackagesInFrameRelStructure struct {
	FrameContainmentStructure
	SalesOfferPackage []SalesOfferPackage `xml:"SalesOfferPackage" json:"SalesOfferPackage"`
}

// SalesOfferPackageElementsInFrameRelStructure represents the salesOfferPackageElementsInFrame_RelStructure element
// Type for containment in frame of SALES OFFER PACKAGE Element.
type SalesOfferPackageElementsInFrameRelStructure struct {
	FrameContainmentStructure
	SalesOfferPackageElement []SalesOfferPackageElement `xml:"SalesOfferPackageElement" json:"SalesOfferPackageElement"`
}

// SalesOfferPackageSubstitutionsInFrameRelStructure represents the salesOfferPackageSubstitutionsInFrame_RelStructure element
// Type for containment in frame of SALES OFFER PACKAGE SUBSTITUTIONs.
type SalesOfferPackageSubstitutionsInFrameRelStructure struct {
	FrameContainmentStructure
	SalesOfferPackageSubstitution []SalesOfferPackageSubstitution `xml:"SalesOfferPackageSubstitution" json:"SalesOfferPackageSubstitution"`
}

// GroupsOfSalesOfferPackagesInFrameRelStructure represents the groupsOfSalesOfferPackagesInFrame_RelStructure element
// Type for containment in frame of GROUPs OF SALES OFFER PACKAGEs.
type GroupsOfSalesOfferPackagesInFrameRelStructure struct {
	FrameContainmentStructure
	GroupOfSalesOfferPackages []GroupOfSalesOfferPackages `xml:"GroupOfSalesOfferPackages" json:"GroupOfSalesOfferPackages"`
}

// DistributionAssignmentsInFrameRelStructure represents the distributionAssignmentsInFrame_RelStructure element
// Type for containment in frame of DISTRIBUTION ASSIGNMENT.
type DistributionAssignmentsInFrameRelStructure struct {
	FrameContainmentStructure
	DistributionAssignment []DistributionAssignment `xml:"DistributionAssignment" json:"DistributionAssignment"`
}

// SalesOfferPackageVersionStructure represents the SalesOfferPackage_VersionStructure element
// Type for SALES OFFER PACKAGE.
type SalesOfferPackageVersionStructure struct {
	PriceableObjectVersionStructure
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	TypeOfSalesOfferPackageRef *TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	ConditionSummary *ConditionSummary `xml:"ConditionSummary,omitempty" json:"ConditionSummary,omitempty"`
	// NOTICE ASSIGNMENTs for  SALES OFFER PACKAGE.
	ValidityParameterAssignments *GenericParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	DistributionAssignments *DistributionAssignmentsRelStructure `xml:"distributionAssignments,omitempty" json:"distributionAssignments,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	// PRICEs of SALES OFFER PACKAGE ELEMENT.
	Prices *SalesOfferPackagePricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
	// SALES OFFER PACKAGE ELEMENTs in SALES OFFER PACKAGE.
	SalesOfferPackageElements *SalesOfferPackageElementsRelStructure `xml:"salesOfferPackageElements,omitempty" json:"salesOfferPackageElements,omitempty"`
	GroupOfSalesOfferPackagesRef *GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
	// Reference to multiple GROUP of SALES OFFER PACKAGEs with whicj this SALES OFFER PACKAGE shares properties.
	GroupsOfSaleOfferPackages *GroupOfSalesOfferPackageRefsRelStructure `xml:"groupsOfSaleOfferPackages,omitempty" json:"groupsOfSaleOfferPackages,omitempty"`
	// SALES TRANSACTIONs in SALES OFFER PACKAGE.
	SalesOfferPackageSubstitutions *SalesOfferPackageSubstitutionsRelStructure `xml:"salesOfferPackageSubstitutions,omitempty" json:"salesOfferPackageSubstitutions,omitempty"`
}

// SalesOfferPackageElementsRelStructure represents the salesOfferPackageElements_RelStructure element
// Type for a list of SALES OFFER PACKAGE ELEMENTs.
type SalesOfferPackageElementsRelStructure struct {
	ContainmentAggregationStructure
	SalesOfferPackageElementRef []SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	// A sequence or set of CONTROLLABLE ELEMENTs to which rules for limitation of access rights and calculation of prices (SALES OFFER PACKAGE) are applied.
	SalesOfferPackageElement []SalesOfferPackageElement `xml:"SalesOfferPackageElement,omitempty" json:"SalesOfferPackageElement,omitempty"`
}

// SalesOfferPackageElementVersionStructure represents the SalesOfferPackageElement_VersionStructure element
// Type for SALES OFFER PACKAGE ELEMENT.
type SalesOfferPackageElementVersionStructure struct {
	PriceableObjectVersionStructure
	// Whether element requires validation  before it can be used.
	RequiresValidation *bool `xml:"RequiresValidation,omitempty" json:"RequiresValidation,omitempty"`
	ConditionSummary *ConditionSummary `xml:"ConditionSummary,omitempty" json:"ConditionSummary,omitempty"`
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	TypeOfTravelDocumentRef *TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	// VALIDITY PARAMETER ASSIGNMENTs associated with SALES OFFER PACKAGE ELEMENT.
	ValidityParameterAssignments *GenericParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	// PRICEs of SALES OFFER PACKAGE ELEMENT.
	Prices *SalesOfferPackagePricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
	// Relative order of element.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// SalesOfferPackagePricesRelStructure represents the salesOfferPackagePrices_RelStructure element
// Type for a list of SALES OFFER PACKAGE PRICEs.
type SalesOfferPackagePricesRelStructure struct {
	StrictContainmentAggregationStructure
	SalesOfferPackagePriceRef []SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	// A set of all possible price features of a SALES OFFER PACKAGE ELEMENT: default total price, discount in value or percentage etc.
	SalesOfferPackagePrice []SalesOfferPackagePriceVersionedChildStructure `xml:"SalesOfferPackagePrice,omitempty" json:"SalesOfferPackagePrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// SalesOfferPackagePriceVersionedChildStructure represents the SalesOfferPackagePrice_VersionedChildStructure element
// Type for a SALES OFFER PACKAGE PRICEs.
type SalesOfferPackagePriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	SalesOfferPackageElementRef *SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
}

// SalesOfferPackageSubstitutionsRelStructure represents the salesOfferPackageSubstitutions_RelStructure element
// Type for a list of SALES OFFER PACKAGE SUBSTITUTIONs.
type SalesOfferPackageSubstitutionsRelStructure struct {
	ContainmentAggregationStructure
	SalesOfferPackageSubstitutionRef []SalesOfferPackageSubstitutionRef `xml:"SalesOfferPackageSubstitutionRef,omitempty" json:"SalesOfferPackageSubstitutionRef,omitempty"`
	SalesOfferPackageSubstitution []SalesOfferPackageSubstitution `xml:"SalesOfferPackageSubstitution,omitempty" json:"SalesOfferPackageSubstitution,omitempty"`
}

// SalesOfferPackageSubstitutionVersionStructure represents the SalesOfferPackageSubstitution_VersionStructure element
// Type for SALES OFFER PACKAGE SUBSTITUTION.
type SalesOfferPackageSubstitutionVersionStructure struct {
	AssignmentVersionStructure1
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	// SALES OFFER PACKAGE  that may be used to subsitute base SALES OFFER PACKAGE.
	WithSalesOfferPackageRef SalesOfferPackageRefStructure `xml:"WithSalesOfferPackageRef" json:"WithSalesOfferPackageRef"`
}

// GroupOfSalesOfferPackagesVersionStructure represents the GroupOfSalesOfferPackages_VersionStructure element
// Type for GROUP OF SALES OFFER PACKAGEs.
type GroupOfSalesOfferPackagesVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// ALTERNATIVE NAMEs for PRICEABLE OBJECT.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// NOTICE ASSIGNMENTs for PRICEABLE OBJECT.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	PricingServiceRef *PricingServiceRef `xml:"PricingServiceRef,omitempty" json:"PricingServiceRef,omitempty"`
	LimitingRuleRef *LimitingRuleRef `xml:"LimitingRuleRef,omitempty" json:"LimitingRuleRef,omitempty"`
	DiscountingRuleRef *DiscountingRuleRef `xml:"DiscountingRuleRef,omitempty" json:"DiscountingRuleRef,omitempty"`
	PricingRuleRef *PricingRuleRef `xml:"PricingRuleRef,omitempty" json:"PricingRuleRef,omitempty"`
	// PRICE GROUPSs  making up FARE PRODUCT.
	PriceGroups *PriceGroupsRelStructure `xml:"priceGroups,omitempty" json:"priceGroups,omitempty"`
	// Other FARE TABLESs for DISTANCE MATRIX ELEMENT.
	FareTables *FareTablesRelStructure `xml:"fareTables,omitempty" json:"fareTables,omitempty"`
	TypeOfSalesOfferPackageRef *TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	ConditionSummary *ConditionSummary `xml:"ConditionSummary,omitempty" json:"ConditionSummary,omitempty"`
	// NOTICE ASSIGNMENTs for  SALES OFFER PACKAGE.
	ValidityParameterAssignments *GenericParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	DistributionAssignments *DistributionAssignmentsRelStructure `xml:"distributionAssignments,omitempty" json:"distributionAssignments,omitempty"`
	RoundingRef *RoundingRef `xml:"RoundingRef,omitempty" json:"RoundingRef,omitempty"`
	// PRICEs of SALES OFFER PACKAGE ELEMENT.
	Prices *SalesOfferPackagePricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
	// SALES OFFER PACKAGE ELEMENTs in SALES OFFER PACKAGE.
	SalesOfferPackageElements *SalesOfferPackageElementsRelStructure `xml:"salesOfferPackageElements,omitempty" json:"salesOfferPackageElements,omitempty"`
	// SALES OFFER PACKAGEs in Group.
	Members *SalesOfferPackageRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
}

// SalesNoticeAssignmentVersionStructure represents the SalesNoticeAssignment_VersionStructure element
// Type for SALES NOTICE ASSIGNMENT.
type SalesNoticeAssignmentVersionStructure struct {
	NoticeAssignmentVersionStructure
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	GroupOfSalesOfferPackagesRef *GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
}

// DistributionAssignmentsRelStructure represents the distributionAssignments_RelStructure element
// Type for a list of DISTRIBUTION ASSIGNMENTs.
type DistributionAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	DistributionAssignmentRef []DistributionAssignmentRef `xml:"DistributionAssignmentRef,omitempty" json:"DistributionAssignmentRef,omitempty"`
	DistributionAssignment []DistributionAssignment `xml:"DistributionAssignment,omitempty" json:"DistributionAssignment,omitempty"`
}

// DistributionAssignmentVersionStructure represents the DistributionAssignment_VersionStructure element
// Type for DISTRIBUTION ASSIGNMENT.
type DistributionAssignmentVersionStructure struct {
	AssignmentVersionStructure2
	EntitlementProductRef *EntitlementProductRef `xml:"EntitlementProductRef,omitempty" json:"EntitlementProductRef,omitempty"`
	SupplementProductRef *SupplementProductRef `xml:"SupplementProductRef,omitempty" json:"SupplementProductRef,omitempty"`
	PreassignedFareProductRef *PreassignedFareProductRef `xml:"PreassignedFareProductRef,omitempty" json:"PreassignedFareProductRef,omitempty"`
	AmountOfPriceUnitProductRef *AmountOfPriceUnitProductRef `xml:"AmountOfPriceUnitProductRef,omitempty" json:"AmountOfPriceUnitProductRef,omitempty"`
	UsageDiscountRightRef *UsageDiscountRightRef `xml:"UsageDiscountRightRef,omitempty" json:"UsageDiscountRightRef,omitempty"`
	ThirdPartyProductRef *ThirdPartyProductRef `xml:"ThirdPartyProductRef,omitempty" json:"ThirdPartyProductRef,omitempty"`
	CappedDiscountRightRef *CappedDiscountRightRef `xml:"CappedDiscountRightRef,omitempty" json:"CappedDiscountRightRef,omitempty"`
	SaleDiscountRightRef *SaleDiscountRightRef `xml:"SaleDiscountRightRef,omitempty" json:"SaleDiscountRightRef,omitempty"`
	FareProductRef *FareProductRef `xml:"FareProductRef,omitempty" json:"FareProductRef,omitempty"`
	ServiceAccessRightRef *ServiceAccessRightRef `xml:"ServiceAccessRightRef,omitempty" json:"ServiceAccessRightRef,omitempty"`
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	GroupOfSalesOfferPackagesRef *GroupOfSalesOfferPackagesRef `xml:"GroupOfSalesOfferPackagesRef,omitempty" json:"GroupOfSalesOfferPackagesRef,omitempty"`
	// Override the folloing   rights allowed by channel.
	DistributionRights *DistributionRightsEnumeration `xml:"DistributionRights,omitempty" json:"DistributionRights,omitempty"`
	AllCountriesRef *AllCountriesRef `xml:"AllCountriesRef,omitempty" json:"AllCountriesRef,omitempty"`
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	// Whether distribution is allowed or forbidden for given country.
	AllowedInCountry *bool `xml:"AllowedInCountry,omitempty" json:"AllowedInCountry,omitempty"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	AllDistributionChannelsRef *AllDistributionChannelsRef `xml:"AllDistributionChannelsRef,omitempty" json:"AllDistributionChannelsRef,omitempty"`
	GroupOfDistributionChannelsRef *GroupOfDistributionChannelsRef `xml:"GroupOfDistributionChannelsRef,omitempty" json:"GroupOfDistributionChannelsRef,omitempty"`
	DistributionChannelRef *DistributionChannelRef `xml:"DistributionChannelRef,omitempty" json:"DistributionChannelRef,omitempty"`
	// Classification of  DISTRIBUTION CHANNEL.
	DistributionChannelType *DistributionChannelTypeEnumeration `xml:"DistributionChannelType,omitempty" json:"DistributionChannelType,omitempty"`
	// Whether distribution is allowed or forbidden for given channel.
	AllowedInChannel *bool `xml:"AllowedInChannel,omitempty" json:"AllowedInChannel,omitempty"`
	// Whether distribution is restricted to a given country and / or channel.
	RestrictedToChannel *bool `xml:"RestrictedToChannel,omitempty" json:"RestrictedToChannel,omitempty"`
	// Whether product is mandatory, i.e.  must be provided.
	MandatoryProduct *bool `xml:"MandatoryProduct,omitempty" json:"MandatoryProduct,omitempty"`
	// Wehther initial carrer has rights.
	InitialCarrier *bool `xml:"InitialCarrier,omitempty" json:"InitialCarrier,omitempty"`
	// Whther intremediate transit carrier has rights.
	TransitCarrier *bool `xml:"TransitCarrier,omitempty" json:"TransitCarrier,omitempty"`
	// Whetehr final carrier has rights.
	FinalCarrier *bool `xml:"FinalCarrier,omitempty" json:"FinalCarrier,omitempty"`
	AllAuthoritiesRef *AllAuthoritiesRef `xml:"AllAuthoritiesRef,omitempty" json:"AllAuthoritiesRef,omitempty"`
	AllOperatorsRef *AllOperatorsRef `xml:"AllOperatorsRef,omitempty" json:"AllOperatorsRef,omitempty"`
	AllPublicTransportOrganisationsRef *AllPublicTransportOrganisationsRef `xml:"AllPublicTransportOrganisationsRef,omitempty" json:"AllPublicTransportOrganisationsRef,omitempty"`
	AllTransportOrganisationsRef *AllTransportOrganisationsRef `xml:"AllTransportOrganisationsRef,omitempty" json:"AllTransportOrganisationsRef,omitempty"`
	AllOrganisationsRef *AllOrganisationsRef `xml:"AllOrganisationsRef,omitempty" json:"AllOrganisationsRef,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	ResponsibilitySetRef *ResponsibilitySetRef `xml:"ResponsibilitySetRef,omitempty" json:"ResponsibilitySetRef,omitempty"`
	TicketingServiceFacilityList *TicketingServiceFacilityList `xml:"TicketingServiceFacilityList,omitempty" json:"TicketingServiceFacilityList,omitempty"`
	// Payment methods allowed. May override Channel to be more specific.
	PaymentMethods *PaymentMethodEnumeration `xml:"PaymentMethods,omitempty" json:"PaymentMethods,omitempty"`
	// Whetee fDistribution requires the user to register.
	RequiresRegistration *bool `xml:"RequiresRegistration,omitempty" json:"RequiresRegistration,omitempty"`
	FulfilmentMethodRef *FulfilmentMethodRef `xml:"FulfilmentMethodRef,omitempty" json:"FulfilmentMethodRef,omitempty"`
	// NOTICEs for  SALES PACKAGe.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// TypesOfSalesOfferPackageRelStructure represents the typesOfSalesOfferPackage_RelStructure element
// Type for a list of TYPE OF SALES OFFER PACKAGEs.
type TypesOfSalesOfferPackageRelStructure struct {
	ContainmentAggregationStructure
	TypeOfSalesOfferPackageRef []TypeOfSalesOfferPackageRef `xml:"TypeOfSalesOfferPackageRef,omitempty" json:"TypeOfSalesOfferPackageRef,omitempty"`
	// A TYPE OF SALES OFFER PACKAGE specifying access rights for the SALES OFFER PACKAGE ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	TypeOfSalesOfferPackage []TypeOfSalesOfferPackage `xml:"TypeOfSalesOfferPackage,omitempty" json:"TypeOfSalesOfferPackage,omitempty"`
}

// TypeOfSalesOfferPackageVersionStructure represents the TypeOfSalesOfferPackage_VersionStructure element
// Type for TYPE OF SALES OFFER PACKAGE.
type TypeOfSalesOfferPackageVersionStructure struct {
	TypeOfEntityVersionStructure
}

// SalesOfferPackage represents the SalesOfferPackage element
// A package to be sold as a whole, consisting of one or several FARE PRODUCTs materialised thanks to one or several TRAVEL DOCUMENTs. The FARE PRODUCTs may be either directly attached to the TRAVEL DOCUMENTs, or may be reloadable on the TRAVEL DOCUMENTs.
type SalesOfferPackage struct {
	SalesOfferPackageVersionStructure
}

// SalesOfferPackageElement represents the SalesOfferPackageElement element
// The assignment of a FARE PRODUCT to a TYPE OF TRAVEL DOCUMENT in order to define a SALES OFFER PACKAGE, realised as a fixed assignment (printing, magnetic storage etc.) or by the possibility for the FARE PRODUCT to be reloaded on the TYPE OF TRAVEL DOCUMENT.
type SalesOfferPackageElement struct {
	SalesOfferPackageElementVersionStructure
}

// SalesOfferPackagePrice represents the SalesOfferPackagePrice element
// A set of all possible price features of a SALES OFFER PACKAGE ELEMENT: default total price, discount in value or percentage etc.
type SalesOfferPackagePrice struct {
	SalesOfferPackagePriceVersionedChildStructure
}

// SalesOfferPackageSubstitution represents the SalesOfferPackageSubstitution element
// A particular tariff, described by a combination of parameters.
type SalesOfferPackageSubstitution struct {
	SalesOfferPackageSubstitutionVersionStructure
}

// GroupOfSalesOfferPackages represents the GroupOfSalesOfferPackages element
// A package to be sold as a whole, consisting of one or several FARE PRODUCTs materialised thanks to one or several TRAVEL DOCUMENTs. The FARE PRODUCTs may be either directly attached to the TRAVEL DOCUMENTs, or may be reloadable on the TRAVEL DOCUMENTs.
type GroupOfSalesOfferPackages struct {
	GroupOfSalesOfferPackagesVersionStructure
}

// SalesNoticeAssignment represents the SalesNoticeAssignment element
// The assignment of a NOTICE to a SALES OFFER PACKAGE or a GROUP OF SALES OFFER PACKAGEs.
type SalesNoticeAssignment struct {
	SalesNoticeAssignmentVersionStructure
}

// DistributionAssignment represents the DistributionAssignment element
// An assignment  of the  COUNTRY and/or  DISTRIBUTION CHANNEL through which a product may or may not be distributed.
type DistributionAssignment struct {
	DistributionAssignmentVersionStructure
}

// TypeOfSalesOfferPackage represents the TypeOfSalesOfferPackage element
// A classification of SALES OFFER PACKAGEs expressing their general functionalities and local functional characteristics specific to the operator. Types of SALES OFFER PACKAGEs like e.g. throw-away ticket, throw-away ticket unit, value card, electronic purse allowing access, public transport credit card etc. may be used to define these categories.
type TypeOfSalesOfferPackage struct {
	TypeOfSalesOfferPackageVersionStructure
}

// TypesOfTravelDocumentInFrameRelStructure represents the typesOfTravelDocumentInFrame_RelStructure element
// Type for containment in frame of TYPE OF TRAVEL DOCUMENT.
type TypesOfTravelDocumentInFrameRelStructure struct {
	FrameContainmentStructure
	TypeOfTravelDocument []TypeOfTravelDocument `xml:"TypeOfTravelDocument" json:"TypeOfTravelDocument"`
}

// TypesOfTravelDocumentsRelStructure represents the typesOfTravelDocuments_RelStructure element
// Type for a list of TYPE OF TRAVEL DOCUMENTs.
type TypesOfTravelDocumentsRelStructure struct {
	ContainmentAggregationStructure
	TypeOfTravelDocumentRef []TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	// A TYPE OF TRAVEL DOCUMENT specifying access rights for the TRAVEL DOCUMENT ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	TypeOfTravelDocument []TypeOfTravelDocument `xml:"TypeOfTravelDocument,omitempty" json:"TypeOfTravelDocument,omitempty"`
}

// TypeOfTravelDocumentVersionStructure represents the TypeOfTravelDocument_VersionStructure element
// Type for TYPE OF TRAVEL DOCUMENT.
type TypeOfTravelDocumentVersionStructure struct {
	TypeOfEntityVersionStructure
	// Whether  the  MACHINE READABILITY is a card.
	IsCard *bool `xml:"IsCard,omitempty" json:"IsCard,omitempty"`
	// Whether  the  MACHINE READABILITY can contain applications and or stored value.
	IsSmartCard *bool `xml:"IsSmartCard,omitempty" json:"IsSmartCard,omitempty"`
	// Whether the  MACHINE READABILITY has a photo.
	HasPhoto *bool `xml:"HasPhoto,omitempty" json:"HasPhoto,omitempty"`
	// Classification of the MACHINE READABILITY by Media Type.
	MediaType *MediaTypeEnumeration `xml:"MediaType,omitempty" json:"MediaType,omitempty"`
	// Classification of the MACHINE READABILITY by Machine Readable mechanism.
	MachineReadable *MachineReadableEnumeration `xml:"MachineReadable,omitempty" json:"MachineReadable,omitempty"`
	// Openended classiifcation of  machine readable capabilties compatible with TRAVEL DOCUMENT.
	TypesOfMachineReadabilities *TypesOfMachineReadabilitiesRelStructure `xml:"typesOfMachineReadabilities,omitempty" json:"typesOfMachineReadabilities,omitempty"`
	// ALTERNATIVE NAMES for MACHINE READABILITY.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
}

// TypesOfMachineReadabilitiesRelStructure represents the typesOfMachineReadabilities_RelStructure element
// Type for a list of TYPE OF MACHINE READABILITies
type TypesOfMachineReadabilitiesRelStructure struct {
	ContainmentAggregationStructure
	TypeOfMachineReadabilityRef []TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef" json:"TypeOfMachineReadabilityRef"`
}

// TypeOfMachineReadabilityVersionStructure represents the TypeOfMachineReadability_VersionStructure element
// Type for TYPE OF MACHINE READABILITY.
type TypeOfMachineReadabilityVersionStructure struct {
	TypeOfValueVersionStructure
}

// TypeOfTravelDocument represents the TypeOfTravelDocument element
// A classification of TRAVEL DOCUMENTs expressing their general functionalities and local functional characteristics specific to the operator. Types of TRAVEL DOCUMENTs like e.g. throw-away ticket, throw-away ticket unit, value card, electronic purse allowing access, public transport credit card etc. may be used to define these categories.
type TypeOfTravelDocument struct {
	TypeOfTravelDocumentVersionStructure
}

// TypeOfMachineReadability represents the TypeOfMachineReadability element
// A classification of MACHINE REDABILITY capabailities, used for example to indicate how a TRAVEL DOCUMENT may be read.
type TypeOfMachineReadability struct {
	TypeOfMachineReadabilityVersionStructure
}

// ObservedPassingTimesRelStructure represents the observedPassingTimes_RelStructure element
// Type for a list of OBSERVED PASSING TIME.
type ObservedPassingTimesRelStructure struct {
	StrictContainmentAggregationStructure
	ObservedPassingTime []ObservedPassingTime `xml:"ObservedPassingTime" json:"ObservedPassingTime"`
}

// ObservedPassingTimeVersionedChildStructure represents the ObservedPassingTime_VersionedChildStructure element
// Type for OBSERVED PASSING TIME.
type ObservedPassingTimeVersionedChildStructure struct {
	DatedPassingTimeVersionedChildStructure
	// Actual Arrival time.
	ActualArrivalTime *string `xml:"ActualArrivalTime,omitempty" json:"ActualArrivalTime,omitempty"`
	// Arrival Day Offset from start of JOURNEY.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	// Actual departure time.
	ActualDepartureTime *string `xml:"ActualDepartureTime,omitempty" json:"ActualDepartureTime,omitempty"`
	// Departure Day Offset from start of JOURNEY.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Actual waiting interval.
	ActualWaitingTime *string `xml:"ActualWaitingTime,omitempty" json:"ActualWaitingTime,omitempty"`
	// Actual PASSING TIME if doesn't stop at TIMING POINT.
	ActualNonstopPassingTime *string `xml:"ActualNonstopPassingTime,omitempty" json:"ActualNonstopPassingTime,omitempty"`
	// PASSING TIME Day Offset from start of JOURNEY.
	PassingTimeDayOffset *int `xml:"PassingTimeDayOffset,omitempty" json:"PassingTimeDayOffset,omitempty"`
	// Actual Frequency of service as a set of intervals.
	ActualHeadway *HeadwayIntervalStructure `xml:"ActualHeadway,omitempty" json:"ActualHeadway,omitempty"`
}

// EstimatedPassingTimesRelStructure represents the estimatedPassingTimes_RelStructure element
// Type for a list of ESTIMATED PASSING TIME.
type EstimatedPassingTimesRelStructure struct {
	StrictContainmentAggregationStructure
	EstimatedPassingTime []EstimatedPassingTime `xml:"EstimatedPassingTime" json:"EstimatedPassingTime"`
}

// EstimatedPassingTimeVersionedChildStructure represents the EstimatedPassingTime_VersionedChildStructure element
// Type for Estimate.
type EstimatedPassingTimeVersionedChildStructure struct {
	DatedPassingTimeVersionedChildStructure
	// Expected Arrival time.
	ExpectedArrivalTime *string `xml:"ExpectedArrivalTime,omitempty" json:"ExpectedArrivalTime,omitempty"`
	// Arrival Day Offset from start of JOURNEY.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	// Expected departure time.
	ExpectedDepartureTime *string `xml:"ExpectedDepartureTime,omitempty" json:"ExpectedDepartureTime,omitempty"`
	// Departure Day Offset from start of JOURNEY.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Expected waiting interval.
	ExpectedWaitingTime *string `xml:"ExpectedWaitingTime,omitempty" json:"ExpectedWaitingTime,omitempty"`
	// Expected PASSING TIME if doesn't stop at TIMING POINT.
	ExpectedNonstopPassingTime *string `xml:"ExpectedNonstopPassingTime,omitempty" json:"ExpectedNonstopPassingTime,omitempty"`
	// PASSING TIME Day Offset from start of JOURNEY.
	PassingTimeDayOffset *int `xml:"PassingTimeDayOffset,omitempty" json:"PassingTimeDayOffset,omitempty"`
	// Expected Frequency of service.
	ExpectedHeadway *HeadwayIntervalStructure `xml:"ExpectedHeadway,omitempty" json:"ExpectedHeadway,omitempty"`
}

// ObservedPassingTimeViewStructure represents the ObservedPassingTime_ViewStructure element
// Type for Simplified  OBSERVED PASSING TIME.
type ObservedPassingTimeViewStructure struct {
	PassingTimeViewStructure
	// Actual Arrival time.
	ActualArrivalTime *string `xml:"ActualArrivalTime,omitempty" json:"ActualArrivalTime,omitempty"`
	// Arrival Day Offset from start of JOURNEY.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	// Actual departure time.
	ActualDepartureTime *string `xml:"ActualDepartureTime,omitempty" json:"ActualDepartureTime,omitempty"`
	// Departure Day Offset from start of JOURNEY.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Actual waiting interval.
	ActualWaitingTime *string `xml:"ActualWaitingTime,omitempty" json:"ActualWaitingTime,omitempty"`
	// Actual PASSING TIME if doesn't stop at TIMING POINT.
	ActualNonstopPassingTime *string `xml:"ActualNonstopPassingTime,omitempty" json:"ActualNonstopPassingTime,omitempty"`
	// PASSING TIME Day Offset from start of JOURNEY.
	PassingTimeDayOffset *int `xml:"PassingTimeDayOffset,omitempty" json:"PassingTimeDayOffset,omitempty"`
	// Actual Frequency of service as a set of intervals.
	ActualHeadway *HeadwayIntervalStructure `xml:"ActualHeadway,omitempty" json:"ActualHeadway,omitempty"`
}

// EstimatedPassingTimeViewStructure represents the EstimatedPassingTime_ViewStructure element
// Type for Simplified  ESTIMATED PASSING TIME.
type EstimatedPassingTimeViewStructure struct {
	PassingTimeViewStructure
	// Expected Arrival time.
	ExpectedArrivalTime *string `xml:"ExpectedArrivalTime,omitempty" json:"ExpectedArrivalTime,omitempty"`
	// Arrival Day Offset from start of JOURNEY.
	ArrivalDayOffset *int `xml:"ArrivalDayOffset,omitempty" json:"ArrivalDayOffset,omitempty"`
	// Expected departure time.
	ExpectedDepartureTime *string `xml:"ExpectedDepartureTime,omitempty" json:"ExpectedDepartureTime,omitempty"`
	// Departure Day Offset from start of JOURNEY.
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	// Expected waiting interval.
	ExpectedWaitingTime *string `xml:"ExpectedWaitingTime,omitempty" json:"ExpectedWaitingTime,omitempty"`
	// Expected PASSING TIME if doesn't stop at TIMING POINT.
	ExpectedNonstopPassingTime *string `xml:"ExpectedNonstopPassingTime,omitempty" json:"ExpectedNonstopPassingTime,omitempty"`
	// PASSING TIME Day Offset from start of JOURNEY.
	PassingTimeDayOffset *int `xml:"PassingTimeDayOffset,omitempty" json:"PassingTimeDayOffset,omitempty"`
	// Expected Frequency of service.
	ExpectedHeadway *HeadwayIntervalStructure `xml:"ExpectedHeadway,omitempty" json:"ExpectedHeadway,omitempty"`
}

// ObservedPassingTime represents the ObservedPassingTime element
// OBSERVED PASSING TIME.
type ObservedPassingTime struct {
	ObservedPassingTimeVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// EstimatedPassingTime represents the EstimatedPassingTime element
// Estimated PASSING TIME.
type EstimatedPassingTime struct {
	EstimatedPassingTimeVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// ObservedPassingTimeView represents the ObservedPassingTimeView element
// Simplified OBSERVED PASSING TIME.
type ObservedPassingTimeView struct {
	ObservedPassingTimeViewStructure
}

// EstimatedPassingTimeView represents the EstimatedPassingTimeView element
// Simplified ESTIMATED PASSING TIME.
type EstimatedPassingTimeView struct {
	EstimatedPassingTimeViewStructure
}

// MonitoredCallsRelStructure represents the monitoredCalls_RelStructure element
// Type for List of MONITORED CALLs.
type MonitoredCallsRelStructure struct {
	StrictContainmentAggregationStructure
	MonitoredCall []MonitoredCall `xml:"MonitoredCall" json:"MonitoredCall"`
}

// MonitoredCallVersionedChildStructure represents the MonitoredCall_VersionedChildStructure element
// Data type for Monitored CALL.
type MonitoredCallVersionedChildStructure struct {
	CallVersionedChildStructure
	TargetPassingTimeView *TargetPassingTimeView `xml:"TargetPassingTimeView,omitempty" json:"TargetPassingTimeView,omitempty"`
	EstimatedPassingTimeView *EstimatedPassingTimeView `xml:"EstimatedPassingTimeView,omitempty" json:"EstimatedPassingTimeView,omitempty"`
	ObservedPassingTimeView *ObservedPassingTimeView `xml:"ObservedPassingTimeView,omitempty" json:"ObservedPassingTimeView,omitempty"`
	// Previous stops  in the SERVICE PATTERN.
	PreviousCalls *PreviousCallsRelStructure `xml:"previousCalls,omitempty" json:"previousCalls,omitempty"`
	// Onwards stops  in the SERVICE PATTERN.
	OnwardCalls *OnwardCallsRelStructure `xml:"onwardCalls,omitempty" json:"onwardCalls,omitempty"`
}

// OnwardCallsRelStructure represents the onwardCalls_RelStructure element
// Type for List of ONWARD CALLs.
type OnwardCallsRelStructure struct {
	StrictContainmentAggregationStructure
	// Onward class after the current call.
	OnwardCall []OnwardCall `xml:"OnwardCall,omitempty" json:"OnwardCall,omitempty"`
}

// OnwardCallVersionedChildStructure represents the OnwardCall_VersionedChildStructure element
// Data type for Onward  CALL.
type OnwardCallVersionedChildStructure struct {
	CallVersionedChildStructure
	TargetPassingTimeView *TargetPassingTimeView `xml:"TargetPassingTimeView,omitempty" json:"TargetPassingTimeView,omitempty"`
	EstimatedPassingTimeView *EstimatedPassingTimeView `xml:"EstimatedPassingTimeView,omitempty" json:"EstimatedPassingTimeView,omitempty"`
}

// PreviousCallsRelStructure represents the previousCalls_RelStructure element
// Type for List of PREVIOUS CALLs.
type PreviousCallsRelStructure struct {
	StrictContainmentAggregationStructure
	PreviousCall []PreviousCall `xml:"PreviousCall,omitempty" json:"PreviousCall,omitempty"`
}

// PreviousCallVersionedChildStructure represents the PreviousCall_VersionedChildStructure element
// Data type for Previous  CALL.
type PreviousCallVersionedChildStructure struct {
	CallVersionedChildStructure
	TargetPassingTimeView *TargetPassingTimeView `xml:"TargetPassingTimeView,omitempty" json:"TargetPassingTimeView,omitempty"`
	EstimatedPassingTimeView *EstimatedPassingTimeView `xml:"EstimatedPassingTimeView,omitempty" json:"EstimatedPassingTimeView,omitempty"`
}

// MonitoredCall represents the MonitoredCall element
// Current monitored real-tieme CALL.
type MonitoredCall struct {
	MonitoredCallVersionedChildStructure
}

// OnwardCall represents the OnwardCall element
type OnwardCall struct {
	OnwardCallVersionedChildStructure
}

// PreviousCall represents the PreviousCall element
// An already completed CALL of  a VEHICLE JOURNEY that occurred earlier in the the JOURNEY PATTERN before the current stop.
type PreviousCall struct {
	PreviousCallVersionedChildStructure
}

// ParkingTariffRefStructure represents the ParkingTariffRefStructure element
// Type for a reference to a PARKING TARIFF.
type ParkingTariffRefStructure struct {
	TariffRefStructure
}

// ParkingChargeBandRefStructure represents the ParkingChargeBandRefStructure element
// Type for a reference to a PARKING TARIFF CHARGE BAND.
type ParkingChargeBandRefStructure struct {
	TimeStructureFactorRefStructure
}

// ParkingPriceRefStructure represents the ParkingPriceRefStructure element
// Type for Reference to a PARKING TARIFF PRICE.
type ParkingPriceRefStructure struct {
	FarePriceRefStructure
}

// ParkingTariffRef represents the ParkingTariffRef element
// Reference to a PARKING TARIFF.
type ParkingTariffRef struct {
	ParkingTariffRefStructure
}

// ParkingChargeBandRef represents the ParkingChargeBandRef element
// Reference to a PARKING TARIFF CHARGE BAND.
type ParkingChargeBandRef struct {
	ParkingChargeBandRefStructure
}

// ParkingPriceRef represents the ParkingPriceRef element
// Reference to a PARKING TARIFF PRICE.
type ParkingPriceRef struct {
	ParkingPriceRefStructure
}

// ParkingTariffsInFrameRelStructure represents the parkingTariffsInFrame_RelStructure element
// Type for containment in frame of PARKING TARIFFs.
type ParkingTariffsInFrameRelStructure struct {
	ContainmentAggregationStructure
	// A designated path between two PLACEs. May include an Ordered sequence of references to PATH LINKS.
	ParkingTariff []ParkingTariff `xml:"ParkingTariff" json:"ParkingTariff"`
}

// ParkingTariffVersionStructure represents the ParkingTariff_VersionStructure element
// Type for a PARKING TARIFF.
type ParkingTariffVersionStructure struct {
	DataManagedObjectStructure
	// Name of TARIFF.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// ATERNATIVE NAMEs for TARIFF.
	AlternativeNames *AlternativeNamesRelStructure `xml:"alternativeNames,omitempty" json:"alternativeNames,omitempty"`
	// Description of TARIFF.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// NOTICE explaining TARIFF.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// Timetable documents associated with the Tariff  e.g pdf files +v1.1
	DocumentLinks *InfoLinksRelStructure `xml:"documentLinks,omitempty" json:"documentLinks,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	GroupOfOperatorsRef *GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	TimeUnitRef *TimeUnitRef `xml:"TimeUnitRef,omitempty" json:"TimeUnitRef,omitempty"`
	// VALIDITY PARAMETER ASSIGNMENTs making up TARIFF.
	TimeIntervals *TimeIntervalsRelStructure `xml:"timeIntervals,omitempty" json:"timeIntervals,omitempty"`
	// TIME STRUCTURE FACTORs making up TARIFF.
	TimeStructureFactors *TimeStructureFactorsRelStructure `xml:"timeStructureFactors,omitempty" json:"timeStructureFactors,omitempty"`
	// QUALITY STRUCTURE ELEMENTs making up TARIFF.
	QualityStructureFactors *QualityStructureFactorsRelStructure `xml:"qualityStructureFactors,omitempty" json:"qualityStructureFactors,omitempty"`
	// Type of users: disabled, all etc.
	ParkingUserType *ParkingUserEnumeration `xml:"ParkingUserType,omitempty" json:"ParkingUserType,omitempty"`
	// Nature of stay allowed in PARKING.
	ParkingStayType *ParkingStayEnumeration `xml:"ParkingStayType,omitempty" json:"ParkingStayType,omitempty"`
	// Type of Vehicle for which PARKING TARIFF applies.  Fixed values.
	ParkingVehicleTypes *ParkingVehicleEnumeration `xml:"ParkingVehicleTypes,omitempty" json:"ParkingVehicleTypes,omitempty"`
	// Opnen specifcation of VEHICLE TYPEs + v1.1
	VehicleTypes *TransportTypeRefsRelStructure `xml:"vehicleTypes,omitempty" json:"vehicleTypes,omitempty"`
	// PaARKIMNGs to which this tariff applies
	AppliesTo *ParkingRefsRelStructure `xml:"appliesTo,omitempty" json:"appliesTo,omitempty"`
	TypeOfTariffRef *TypeOfTariffRef `xml:"TypeOfTariffRef,omitempty" json:"TypeOfTariffRef,omitempty"`
	// Whether additional tax is charged.
	AdditionalTax *bool `xml:"AdditionalTax,omitempty" json:"AdditionalTax,omitempty"`
	// Charge bands for parking.
	ParkingChargeBands *ParkingChargeBandsRelStructure `xml:"parkingChargeBands,omitempty" json:"parkingChargeBands,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// QUALITY STRUCTURE ELEMENTs making up TARIFF.
	PriceGroups *PriceGroupsRelStructure `xml:"priceGroups,omitempty" json:"priceGroups,omitempty"`
	// QUALITY STRUCTURE ELEMENTs making up TARIFF.
	FareTables *FareTablesRelStructure `xml:"fareTables,omitempty" json:"fareTables,omitempty"`
}

// ParkingChargeBandsRelStructure represents the parkingChargeBands_RelStructure element
// Type for a list of PARKING TARIFF CHARGE BANDs.
type ParkingChargeBandsRelStructure struct {
	ContainmentAggregationStructure
	ParkingChargeBandRef []ParkingChargeBandRef `xml:"ParkingChargeBandRef,omitempty" json:"ParkingChargeBandRef,omitempty"`
	// An area within a Site. May be connected to Quays by PATH LINKs.
	ParkingChargeBand []ParkingChargeBand `xml:"ParkingChargeBand,omitempty" json:"ParkingChargeBand,omitempty"`
}

// ParkingChargeBandVersionStructure represents the ParkingChargeBand_VersionStructure element
// Type for a PARKING TARIFF CHARGE BAND.
type ParkingChargeBandVersionStructure struct {
	TimeStructureFactorVersionStructure
	ParkingPropertiesRef *ParkingPropertiesRef `xml:"ParkingPropertiesRef,omitempty" json:"ParkingPropertiesRef,omitempty"`
	// Type of vehicle for which this is the PARKING TARIFF CHARGE BAND.
	ParkingVehicleType *ParkingVehicleEnumeration `xml:"ParkingVehicleType,omitempty" json:"ParkingVehicleType,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
	// Maximum allowed stay duration for tariff amount.
	MaximumStay *string `xml:"MaximumStay,omitempty" json:"MaximumStay,omitempty"`
	// Prices for PARKING TARIFF CHARGE BAND.
	Prices *FarePricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
}

// ParkingPricesRelStructure represents the parkingPrices_RelStructure element
// Type for a list of PARKING TARIFF PRICEs.
type ParkingPricesRelStructure struct {
	StrictContainmentAggregationStructure
	ParkingPriceRef []ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	// A set of all possible price features of a PARKING TARIFF ELEMENT: default total price, discount in value or percentage etc.
	ParkingPrice []ParkingPriceVersionedChildStructure `xml:"ParkingPrice,omitempty" json:"ParkingPrice,omitempty"`
}

// ParkingPriceVersionedChildStructure represents the ParkingPrice_VersionedChildStructure element
// Type for a PARKING TARIFF PRICEs.
type ParkingPriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	ParkingTariffRef *ParkingTariffRef `xml:"ParkingTariffRef,omitempty" json:"ParkingTariffRef,omitempty"`
	ParkingChargeBand *ParkingChargeBand `xml:"ParkingChargeBand,omitempty" json:"ParkingChargeBand,omitempty"`
}

// ParkingTariff represents the ParkingTariff element
// A set of parking CHARGE BANDS that describe the cost if using a PARKING or PARKING AREA.
type ParkingTariff struct {
	ParkingTariffVersionStructure
}

// ParkingChargeBand represents the ParkingChargeBand element
// Parking charges that describe the cost of using a PARKING or PARKING AREA for a given period.
type ParkingChargeBand struct {
	ParkingChargeBandVersionStructure
}

// ParkingPrice represents the ParkingPrice element
// A set of all possible price features of a PARKING TARIFF ELEMENT: default total price, discount in value or percentage etc.
type ParkingPrice struct {
	ParkingPriceVersionedChildStructure
}

// FareFrameRefStructure represents the FareFrameRefStructure element
// Type for a reference to a FARE FRAME.
type FareFrameRefStructure struct {
	VersionFrameRefStructure
}

// FareFrameVersionFrameStructure represents the FareFrame_VersionFrameStructure element
// Type for a FARE FRAME.
type FareFrameVersionFrameStructure struct {
	CommonVersionFrameStructure
	// Default TRANSPORT MODE.
	Mode *AllVehicleModesOfTransportEnumeration `xml:"Mode,omitempty" json:"Mode,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	PricingParameterSet *PricingParameterSet `xml:"PricingParameterSet,omitempty" json:"PricingParameterSet,omitempty"`
	// NOTICEs in frame.
	Notices *NoticesInFrameRelStructure `xml:"notices,omitempty" json:"notices,omitempty"`
	// NOTICE ASSIGNMENTs in frame.
	NoticeAssignments *NoticeAssignmentsInFrameRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
	// BORDER POINTs in FRAME.
	BorderPoints *BorderPointsInFrameRelStructure `xml:"borderPoints,omitempty" json:"borderPoints,omitempty"`
	// FARE SCHEDULED STOP POINTs in FRAME.
	FareScheduledStopPoints *FareScheduledStopPointsInFrameRelStructure `xml:"fareScheduledStopPoints,omitempty" json:"fareScheduledStopPoints,omitempty"`
	// FARE ZONEs in FRAME.
	FareZones *FareZonesInFrameRelStructure `xml:"fareZones,omitempty" json:"fareZones,omitempty"`
	// FARE SECTIONs in FRAME.
	FareSections *FareSectionsInFrameRelStructure `xml:"fareSections,omitempty" json:"fareSections,omitempty"`
	// FARE PRODUCTs in FRAME.
	SeriesConstraints *FareSeriesInFrameRelStructure `xml:"seriesConstraints,omitempty" json:"seriesConstraints,omitempty"`
	// GEOGRAPHICAL UNITs in  Frame.
	GeographicalUnits *GeographicalUnitsRelStructure `xml:"geographicalUnits,omitempty" json:"geographicalUnits,omitempty"`
	// GEOGRAPHICAL INTERVALs in  Frame.
	GeographicalIntervals *GeographicalIntervalsRelStructure `xml:"geographicalIntervals,omitempty" json:"geographicalIntervals,omitempty"`
	// GEOGRAPHICAL STRUCTURE FACTORS in  Frame.
	GeographicalStructureFactors *GeographicalStructureFactorsRelStructure `xml:"geographicalStructureFactors,omitempty" json:"geographicalStructureFactors,omitempty"`
	// TIME UNITs in  Frame.
	TimeUnits *TimeUnitsRelStructure `xml:"timeUnits,omitempty" json:"timeUnits,omitempty"`
	// TIME INTERVALs in  Frame.
	TimeIntervals *TimeIntervalsRelStructure `xml:"timeIntervals,omitempty" json:"timeIntervals,omitempty"`
	// TIME STRUCTURE FACTORS in  Frame.
	TimeStructureFactors *TimeStructureFactorsRelStructure `xml:"timeStructureFactors,omitempty" json:"timeStructureFactors,omitempty"`
	// QUALITY STRUCTURE FACTORS in  Frame.
	QualityStructureFactors *QualityStructureFactorsRelStructure `xml:"qualityStructureFactors,omitempty" json:"qualityStructureFactors,omitempty"`
	// DISTANCE MATRIX ELEMENTs in Frame.
	DistanceMatrixElements *DistanceMatrixElementsRelStructure `xml:"distanceMatrixElements,omitempty" json:"distanceMatrixElements,omitempty"`
	// GROUPs OF DISTANCE MATRIX ELEMENTs in Frame.
	GroupsOfDistanceMatrixElements *GroupsOfDistanceMatrixElementsRelStructure `xml:"groupsOfDistanceMatrixElements,omitempty" json:"groupsOfDistanceMatrixElements,omitempty"`
	// FARE STRUCTURE ELEMENTs in FRAME.
	FareStructureElements *FareStructureElementsInFrameRelStructure `xml:"fareStructureElements,omitempty" json:"fareStructureElements,omitempty"`
	// TARIFFs in FRAME.
	Tariffs *TariffsInFrameRelStructure `xml:"tariffs,omitempty" json:"tariffs,omitempty"`
	// VALIDABLE ELEMENTs in FRAME.
	ValidableElements *ValidableElementsInFrameRelStructure `xml:"validableElements,omitempty" json:"validableElements,omitempty"`
	// CONTROLLABLE ELEMENTs in FRAME.
	ControllableElements *ControllableElementsInFrameRelStructure `xml:"controllableElements,omitempty" json:"controllableElements,omitempty"`
	// FARE USAGE PARAMETERS in FRAME.
	UsageParameters *UsageParametersInFrameRelStructure `xml:"usageParameters,omitempty" json:"usageParameters,omitempty"`
	// ACCESS RIGHT PARAMETER ASSIGNMENTs in frame.
	AccessRightParameterAssignments *AccessRightParameterAssignmentsInFrameRelStructure `xml:"accessRightParameterAssignments,omitempty" json:"accessRightParameterAssignments,omitempty"`
	// FARE PRODUCTs in FRAME.
	FareProducts *FareProductsInFrameRelStructure `xml:"fareProducts,omitempty" json:"fareProducts,omitempty"`
	// PRICE GROUPs in FRAME.
	PriceGroups *FarePricesInFrameRelStructure `xml:"priceGroups,omitempty" json:"priceGroups,omitempty"`
	// FARE TABLEs in FRAME.
	FareTables *FareTablesInFrameRelStructure `xml:"fareTables,omitempty" json:"fareTables,omitempty"`
	// DISTRIBUTION CHANNELS in FRAME.
	DistributionChannels *DistributionChannelsInFrameRelStructure `xml:"distributionChannels,omitempty" json:"distributionChannels,omitempty"`
	// DISTRIBUTION CHANNELS in FRAME.
	GroupsOfDistributionChannels *GroupsOfDistributionChannelsInFrameRelStructure `xml:"groupsOfDistributionChannels,omitempty" json:"groupsOfDistributionChannels,omitempty"`
	// FULFILMENT METHODS  in FRAME.
	FulfilmentMethods *FulfilmentMethodsInFrameRelStructure `xml:"fulfilmentMethods,omitempty" json:"fulfilmentMethods,omitempty"`
	// TYPE OF TRAVEL DOCUMENTs in FRAME.
	TypesOfTravelDocuments *TypesOfTravelDocumentInFrameRelStructure `xml:"typesOfTravelDocuments,omitempty" json:"typesOfTravelDocuments,omitempty"`
	// SALES OFFER PACKAGEs in FRAME.
	SalesOfferPackages *SalesOfferPackagesInFrameRelStructure `xml:"salesOfferPackages,omitempty" json:"salesOfferPackages,omitempty"`
	// SALES OFFER PACKAGEs in FRAME.
	SalesOfferPackageElements *SalesOfferPackageElementsInFrameRelStructure `xml:"salesOfferPackageElements,omitempty" json:"salesOfferPackageElements,omitempty"`
	// SALES OFFER PACKAGEs in FRAME.
	SalesOfferPackageSubstitutions *SalesOfferPackageSubstitutionsInFrameRelStructure `xml:"salesOfferPackageSubstitutions,omitempty" json:"salesOfferPackageSubstitutions,omitempty"`
	// GROUPS OF SALES OFFER PACKAGEs in FRAME.
	GroupsOfSalesOfferPackages *GroupsOfSalesOfferPackagesInFrameRelStructure `xml:"groupsOfSalesOfferPackages,omitempty" json:"groupsOfSalesOfferPackages,omitempty"`
	// DISTRIBUTION ASSIGNMENTS in FRAME.
	DistributionAssignments *DistributionAssignmentsInFrameRelStructure `xml:"distributionAssignments,omitempty" json:"distributionAssignments,omitempty"`
	// PARKING TARIFFs in frame.
	ParkingTariffs *ParkingTariffsInFrameRelStructure `xml:"parkingTariffs,omitempty" json:"parkingTariffs,omitempty"`
}

// FareFrameRef represents the FareFrameRef element
// Reference to a FARE FRAME.
type FareFrameRef struct {
	FareFrameRefStructure
}

// FareFrame represents the FareFrame element
// A coherent set of Vehicle Scheduling data to which the same VALIDITY CONDITIONs have been assigned.
type FareFrame struct {
	FareFrameVersionFrameStructure
}

// AccountStatusTypeEnumeration represents the AccountStatusTypeEnumeration enumeration
// Allowed values for Account Status.
type AccountStatusTypeEnumeration string

const (
	// AccountStatusTypeEnumerationUnused represents unused
	AccountStatusTypeEnumerationUnused AccountStatusTypeEnumeration = "unused"
	// AccountStatusTypeEnumerationUnverified represents unverified
	AccountStatusTypeEnumerationUnverified AccountStatusTypeEnumeration = "unverified"
	// AccountStatusTypeEnumerationActive represents active
	AccountStatusTypeEnumerationActive AccountStatusTypeEnumeration = "active"
	// AccountStatusTypeEnumerationDormant represents dormant
	AccountStatusTypeEnumerationDormant AccountStatusTypeEnumeration = "dormant"
	// AccountStatusTypeEnumerationSuspended represents suspended
	AccountStatusTypeEnumerationSuspended AccountStatusTypeEnumeration = "suspended"
	// AccountStatusTypeEnumerationArchived represents archived
	AccountStatusTypeEnumerationArchived AccountStatusTypeEnumeration = "archived"
	// AccountStatusTypeEnumerationClosed represents closed
	AccountStatusTypeEnumerationClosed AccountStatusTypeEnumeration = "closed"
)

// CustomerRefsRelStructure represents the customerRefs_RelStructure element
// Type for a list of references to CUSTOMER.
type CustomerRefsRelStructure struct {
	OneToManyRelationshipStructure
	CustomerRef []CustomerRef `xml:"CustomerRef" json:"CustomerRef"`
}

// CustomerRefStructure represents the CustomerRefStructure element
// Type for Reference to a CUSTOMER.
type CustomerRefStructure struct {
	VersionOfObjectRefStructure
}

// CustomerSecurityListingRefsRelStructure represents the CustomerSecurityListingRefs_RelStructure element
// Type for a list of CUSTOMER SECURITY LISTING.s.
type CustomerSecurityListingRefsRelStructure struct {
	OneToManyRelationshipStructure
	CustomerSecurityListingRef []CustomerSecurityListingRef `xml:"CustomerSecurityListingRef" json:"CustomerSecurityListingRef"`
}

// CustomerSecurityListingRefStructure represents the CustomerSecurityListingRefStructure element
// Type for Reference to a CUSTOMER SECURITY LISTING..
type CustomerSecurityListingRefStructure struct {
	SecurityListingRefStructure
}

// ContractRefsRelStructure represents the contractRefs_RelStructure element
// Type for a list of references to FARE CONTRACT.
type ContractRefsRelStructure struct {
	OneToManyRelationshipStructure
	FareContractRef []FareContractRef `xml:"FareContractRef" json:"FareContractRef"`
}

// FareContractRefStructure represents the FareContractRefStructure element
// Type for Reference to a FARE CONTRACT.
type FareContractRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfFareContractRefsRelStructure represents the typeOfFareContractRefs_RelStructure element
// Type for a list of TYPEs OF FARE CONTRACT.
type TypeOfFareContractRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfFareContractRef []TypeOfFareContractRef `xml:"TypeOfFareContractRef" json:"TypeOfFareContractRef"`
}

// TypeOfFareContractRefStructure represents the TypeOfFareContractRefStructure element
// Type for Reference to a TYPE OF FARE CONTRACT.
type TypeOfFareContractRefStructure struct {
	TypeOfValueRefStructure
}

// FareContractSecurityListingRefStructure represents the FareContractSecurityListingRefStructure element
// Type for Reference to a FARE CONTRACT SECURITY LISTING..
type FareContractSecurityListingRefStructure struct {
	SecurityListingRefStructure
}

// FareContractSecurityListingRefsRelStructure represents the FareContractSecurityListingRefs_RelStructure element
// Type for a list of FARE CONTRACT SECURITY LISTING.s.
type FareContractSecurityListingRefsRelStructure struct {
	OneToManyRelationshipStructure
	FareContractSecurityListingRef []FareContractSecurityListingRef `xml:"FareContractSecurityListingRef" json:"FareContractSecurityListingRef"`
}

// FareContractEntryRefStructure represents the FareContractEntryRefStructure element
// Type for Reference to a FARE CONTRACT ENTRY.
type FareContractEntryRefStructure struct {
	LogEntryRefStructure
}

// TypeOfFareContractEntryRefsRelStructure represents the typeOfFareContractEntryRefs_RelStructure element
// Type for a list of TYPEs OF FARE CONTRACT ENTRY.
type TypeOfFareContractEntryRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfFareContractEntryRef []TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef" json:"TypeOfFareContractEntryRef"`
}

// TypeOfFareContractEntryRefStructure represents the TypeOfFareContractEntryRefStructure element
// Type for Reference to a TYPE OF FARE CONTRACT ENTRY.
type TypeOfFareContractEntryRefStructure struct {
	TypeOfValueRefStructure
}

// CustomerAccountRefsRelStructure represents the customerAccountRefs_RelStructure element
// Type for a list of references to CUSTOMER ACCOUNT.
type CustomerAccountRefsRelStructure struct {
	OneToManyRelationshipStructure
	CustomerAccountRef []CustomerAccountRef `xml:"CustomerAccountRef" json:"CustomerAccountRef"`
}

// CustomerAccountRefStructure represents the CustomerAccountRefStructure element
// Type for Reference to a CUSTOMER ACCOUNT.
type CustomerAccountRefStructure struct {
	VersionOfObjectRefStructure
}

// CustomerAccountSecurityListingRefsRelStructure represents the customerAccountSecurityListingRefs_RelStructure element
// Type for a list of CUSTOMER ACCOUNT SECURITY LISTING.s.
type CustomerAccountSecurityListingRefsRelStructure struct {
	OneToManyRelationshipStructure
	CustomerAccountSecurityListingRef []CustomerAccountSecurityListingRef `xml:"CustomerAccountSecurityListingRef" json:"CustomerAccountSecurityListingRef"`
}

// CustomerAccountSecurityListingRefStructure represents the CustomerAccountSecurityListingRefStructure element
// Type for Reference to a CUSTOMER ACCOUNT SECURITY LISTING..
type CustomerAccountSecurityListingRefStructure struct {
	SecurityListingRefStructure
}

// TypeOfCustomerAccountRefsRelStructure represents the typeOfCustomerAccountRefs_RelStructure element
// Type for a list of TYPEs OF CUSTOMER ACCOUNT .
type TypeOfCustomerAccountRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfCustomerAccountRef []TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef" json:"TypeOfCustomerAccountRef"`
}

// TypeOfCustomerAccountRefStructure represents the TypeOfCustomerAccountRefStructure element
// Type for Reference to a TYPE OF CUSTOMER ACCOUNT .
type TypeOfCustomerAccountRefStructure struct {
	TypeOfValueRefStructure
}

// CustomerAccountStatusRefsRelStructure represents the customerAccountStatusRefs_RelStructure element
// Type for a list of CUSTOMER ACCOUNT STATUSES.
type CustomerAccountStatusRefsRelStructure struct {
	OneToManyRelationshipStructure
	CustomerAccountStatusRef []CustomerAccountStatusRef `xml:"CustomerAccountStatusRef" json:"CustomerAccountStatusRef"`
}

// CustomerAccountStatusRefStructure represents the CustomerAccountStatusRefStructure element
// Type for Reference to a CUSTOMER ACCOUNT STATUS .
type CustomerAccountStatusRefStructure struct {
	TypeOfValueRefStructure
}

// CustomerRef represents the CustomerRef element
// Reference to a CUSTOMER.
type CustomerRef struct {
	CustomerRefStructure
}

// CustomerSecurityListingRef represents the CustomerSecurityListingRef element
// Reference to a CUSTOMER SECURITY LISTING..
type CustomerSecurityListingRef struct {
	CustomerSecurityListingRefStructure
}

// FareContractRef represents the FareContractRef element
// Reference to a FARE CONTRACT.
type FareContractRef struct {
	FareContractRefStructure
}

// TypeOfFareContractRef represents the TypeOfFareContractRef element
// Reference to a TYPE OF FARE CONTRACT.
type TypeOfFareContractRef struct {
	TypeOfFareContractRefStructure
}

// FareContractSecurityListingRef represents the FareContractSecurityListingRef element
// Reference to a FARE CONTRACT SECURITY LISTING..
type FareContractSecurityListingRef struct {
	FareContractSecurityListingRefStructure
}

// FareContractEntryRef represents the FareContractEntryRef element
// Reference to a FARE CONTRACT ENTRY.
type FareContractEntryRef struct {
	FareContractEntryRefStructure
}

// TypeOfFareContractEntryRef represents the TypeOfFareContractEntryRef element
// Reference to a TYPE OF FARE CONTRACT ENTRY.
type TypeOfFareContractEntryRef struct {
	TypeOfFareContractEntryRefStructure
}

// CustomerAccountRef represents the CustomerAccountRef element
// Reference to a CUSTOMER ACCOUNT.
type CustomerAccountRef struct {
	CustomerAccountRefStructure
}

// CustomerAccountSecurityListingRef represents the CustomerAccountSecurityListingRef element
// Reference to a CUSTOMER ACCOUNT SECURITY LISTING..
type CustomerAccountSecurityListingRef struct {
	CustomerAccountSecurityListingRefStructure
}

// TypeOfCustomerAccountRef represents the TypeOfCustomerAccountRef element
// Reference to a TYPE OF CUSTOMER ACCOUNT .
type TypeOfCustomerAccountRef struct {
	TypeOfCustomerAccountRefStructure
}

// CustomerAccountStatusRef represents the CustomerAccountStatusRef element
// Reference to a CUSTOMER ACCOUNT STATUS .
type CustomerAccountStatusRef struct {
	CustomerAccountStatusRefStructure
}

// CustomerPurchasePackageStatusEnumeration represents the CustomerPurchasePackageStatusEnumeration enumeration
// Allowed values for CUSTOMER PURCHASE PACKAGE  Status. +v1.1
type CustomerPurchasePackageStatusEnumeration string

const (
	// CustomerPurchasePackageStatusEnumerationReserved represents reserved
	// Reserved but not paid for.
	CustomerPurchasePackageStatusEnumerationReserved CustomerPurchasePackageStatusEnumeration = "reserved"
	// CustomerPurchasePackageStatusEnumerationOrdered represents ordered
	// Purchased but not paid for.
	CustomerPurchasePackageStatusEnumerationOrdered CustomerPurchasePackageStatusEnumeration = "ordered"
	// CustomerPurchasePackageStatusEnumerationPaidFor represents paidFor
	// Paid for.
	CustomerPurchasePackageStatusEnumerationPaidFor CustomerPurchasePackageStatusEnumeration = "paidFor"
	// CustomerPurchasePackageStatusEnumerationUnused represents unused
	// Fulfilled but has not yet been used.
	CustomerPurchasePackageStatusEnumerationUnused CustomerPurchasePackageStatusEnumeration = "unused"
	// CustomerPurchasePackageStatusEnumerationActivated represents activated
	// Activated for use.
	CustomerPurchasePackageStatusEnumerationActivated CustomerPurchasePackageStatusEnumeration = "activated"
	// CustomerPurchasePackageStatusEnumerationPartiallyUsed represents partiallyUsed
	// Partially used.
	CustomerPurchasePackageStatusEnumerationPartiallyUsed CustomerPurchasePackageStatusEnumeration = "partiallyUsed"
	// CustomerPurchasePackageStatusEnumerationUsed represents used
	// Fully used.
	CustomerPurchasePackageStatusEnumerationUsed CustomerPurchasePackageStatusEnumeration = "used"
	// CustomerPurchasePackageStatusEnumerationArchived represents archived
	// Archived.
	CustomerPurchasePackageStatusEnumerationArchived CustomerPurchasePackageStatusEnumeration = "archived"
	// CustomerPurchasePackageStatusEnumerationOther represents other
	// Other status.
	CustomerPurchasePackageStatusEnumerationOther CustomerPurchasePackageStatusEnumeration = "other"
)

// MarkedAsEnumeration represents the MarkedAsEnumeration enumeration
// Allowed values for MarkedAs Status.++ +v1.1
type MarkedAsEnumeration string

const (
	// MarkedAsEnumerationUnused represents unused
	MarkedAsEnumerationUnused MarkedAsEnumeration = "unused"
	// MarkedAsEnumerationActivated represents activated
	MarkedAsEnumerationActivated MarkedAsEnumeration = "activated"
	// MarkedAsEnumerationMarked represents marked
	MarkedAsEnumerationMarked MarkedAsEnumeration = "marked"
	// MarkedAsEnumerationUsed represents used
	MarkedAsEnumerationUsed MarkedAsEnumeration = "used"
	// MarkedAsEnumerationExpired represents expired
	MarkedAsEnumerationExpired MarkedAsEnumeration = "expired"
)

// TravelSpecificationRefsRelStructure represents the travelSpecificationRefs_RelStructure element
// Type for a collection of one or more references to a TRAVEL SPECIFICATION.
type TravelSpecificationRefsRelStructure struct {
	OneToManyRelationshipStructure
	OfferedTravelSpecificationRef []OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	RequestedTravelSpecificationRef []RequestedTravelSpecificationRef `xml:"RequestedTravelSpecificationRef,omitempty" json:"RequestedTravelSpecificationRef,omitempty"`
	TravelSpecificationRef []TravelSpecificationRef `xml:"TravelSpecificationRef,omitempty" json:"TravelSpecificationRef,omitempty"`
}

// TravelSpecificationRefStructure represents the TravelSpecificationRefStructure element
// Type for Reference to a TRAVEL SPECIFICATION.
type TravelSpecificationRefStructure struct {
	FareContractEntryRefStructure
}

// RequestedTravelSpecificationRefStructure represents the RequestedTravelSpecificationRefStructure element
// Type for Reference to a REQUESTED TRAVEL SPECIFICATION.
type RequestedTravelSpecificationRefStructure struct {
	TravelSpecificationRefStructure
}

// OfferedTravelSpecificationRefStructure represents the OfferedTravelSpecificationRefStructure element
// Type for Reference to an OFFERED TRAVEL SPECIFICATION.
type OfferedTravelSpecificationRefStructure struct {
	TravelSpecificationRefStructure
}

// SpecificParameterAssignmentRefStructure represents the SpecificParameterAssignmentRefStructure element
// Type for Reference to a SPECIFIC PARAMETER ASIGNMENT..
type SpecificParameterAssignmentRefStructure struct {
	ValidityParameterAssignmentRefStructure
}

// CustomerPurchasePackageRefsRelStructure represents the customerPurchasePackageRefs_RelStructure element
// Type for a collection of one or more references to a CUSTOMER PURCHASE PACKAGE.
type CustomerPurchasePackageRefsRelStructure struct {
	OneToManyRelationshipStructure
	CustomerPurchasePackageRef []CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef" json:"CustomerPurchasePackageRef"`
}

// CustomerPurchasePackageRefStructure represents the CustomerPurchasePackageRefStructure element
// Type for Reference to a CUSTOMER PURCHASE PACKAGE.
type CustomerPurchasePackageRefStructure struct {
	PriceableObjectRefStructure
}

// CustomerPurchasePackageElementRefStructure represents the CustomerPurchasePackageElementRefStructure element
// Type for Reference to a CUSTOMER PURCHASE PACKAGE ELEMENT.
type CustomerPurchasePackageElementRefStructure struct {
	PriceableObjectRefStructure
}

// CustomerPurchasePackagePriceRefStructure represents the CustomerPurchasePackagePriceRefStructure element
// Type for Reference to a CUSTOMER PURCHASE PACKAGE PRICE.
type CustomerPurchasePackagePriceRefStructure struct {
	FarePriceRefStructure
}

// GroupOfcustomerPurchasePackageRefsRelStructure represents the groupOfcustomerPurchasePackageRefs_RelStructure element
// Type for a collection of one or more references to a CUSTOMER PURCHASE PACKAGE.
type GroupOfcustomerPurchasePackageRefsRelStructure struct {
	OneToManyRelationshipStructure
	GroupOfCustomerPurchasePackagesRef []GroupOfCustomerPurchasePackagesRef `xml:"GroupOfCustomerPurchasePackagesRef" json:"GroupOfCustomerPurchasePackagesRef"`
}

// GroupOfCustomerPurchasePackagesRefStructure represents the GroupOfCustomerPurchasePackagesRefStructure element
// Type for Reference to a GROUP OF CUSTOMER PURCHASE PACKAGEs.
type GroupOfCustomerPurchasePackagesRefStructure struct {
	GroupOfEntitiesRefStructure1
}

// CustomerPurchaseParameterAssignmentRefStructure represents the CustomerPurchaseParameterAssignmentRefStructure element
// Type for Reference to a CUSTOMER PURCHASE PARAMETER.
type CustomerPurchaseParameterAssignmentRefStructure struct {
	ValidityParameterAssignmentRefStructure
}

// CustomerPurchasePackageElementAccessRefStructure represents the CustomerPurchasePackageElementAccessRefStructure element
// Type for Reference to a CUSTOMER PURCHASE PACKAGE ELEMENT ACCESS.
type CustomerPurchasePackageElementAccessRefStructure struct {
	VersionOfObjectRefStructure
}

// TravelSpecificationRef represents the TravelSpecificationRef element
// Reference to a TRAVEL SPECIFICATION.
type TravelSpecificationRef struct {
	TravelSpecificationRefStructure
}

// RequestedTravelSpecificationRef represents the RequestedTravelSpecificationRef element
// Reference to a REQUESTED TRAVEL SPECIFICATION.
type RequestedTravelSpecificationRef struct {
	RequestedTravelSpecificationRefStructure
}

// OfferedTravelSpecificationRef represents the OfferedTravelSpecificationRef element
// Reference to an OFFERED TRAVEL SPECIFICATION.
type OfferedTravelSpecificationRef struct {
	OfferedTravelSpecificationRefStructure
}

// CustomerPurchasePackageRef represents the CustomerPurchasePackageRef element
// Reference to a CUSTOMER PURCHASE PACKAGE.
type CustomerPurchasePackageRef struct {
	CustomerPurchasePackageRefStructure
}

// CustomerPurchasePackageElementRef represents the CustomerPurchasePackageElementRef element
// Reference to a CUSTOMER PURCHASE PACKAGE ELEMENT.
type CustomerPurchasePackageElementRef struct {
	CustomerPurchasePackageElementRefStructure
}

// CustomerPurchasePackagePriceRef represents the CustomerPurchasePackagePriceRef element
// Reference to a CUSTOMER PURCHASE PACKAGE PRICE.
type CustomerPurchasePackagePriceRef struct {
	CustomerPurchasePackagePriceRefStructure
}

// GroupOfCustomerPurchasePackagesRef represents the GroupOfCustomerPurchasePackagesRef element
// Reference to a GROUP OF CUSTOMER PURCHASE PACKAGEs.
type GroupOfCustomerPurchasePackagesRef struct {
	GroupOfCustomerPurchasePackagesRefStructure
}

// RetailConsortiumRefsRelStructure represents the retailConsortiumRefs_RelStructure element
// Type for a list of referecnes to RETAIL CONSORTIUMs.
type RetailConsortiumRefsRelStructure struct {
	OneToManyRelationshipStructure
	RetailConsortiumRef []RetailConsortiumRef `xml:"RetailConsortiumRef" json:"RetailConsortiumRef"`
}

// RetailConsortiumRefStructure represents the RetailConsortiumRefStructure element
// Type for Reference to a RETAIL CONSORTIUM.
type RetailConsortiumRefStructure struct {
	OrganisationRefStructure
}

// RetailDeviceRefsRelStructure represents the retailDeviceRefs_RelStructure element
// Type for a list of references to RETAIL DEVICE.
type RetailDeviceRefsRelStructure struct {
	OneToManyRelationshipStructure
	RetailDeviceRef []RetailDeviceRef `xml:"RetailDeviceRef" json:"RetailDeviceRef"`
}

// RetailDeviceRefStructure represents the RetailDeviceRefStructure element
// Type for Reference to a RETAIL DEVICE.
type RetailDeviceRefStructure struct {
	EquipmentRefStructure
}

// TypeOfRetailDeviceRefsRelStructure represents the typeOfRetailDeviceRefs_RelStructure element
// Type for a list of TYPEs OF RETAIL DEVICE.
type TypeOfRetailDeviceRefsRelStructure struct {
	OneToManyRelationshipStructure
	TypeOfRetailDeviceRef []TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef" json:"TypeOfRetailDeviceRef"`
}

// TypeOfRetailDeviceRefStructure represents the TypeOfRetailDeviceRefStructure element
// Type for Reference to a TYPE OF RETAIL DEVICE.
type TypeOfRetailDeviceRefStructure struct {
	TypeOfValueRefStructure
}

// RetailDeviceSecurityListingRefsRelStructure represents the RetailDeviceSecurityListingRefs_RelStructure element
// Type for a list of RETAIL DEVICE SECURITY LISTING.s.
type RetailDeviceSecurityListingRefsRelStructure struct {
	OneToManyRelationshipStructure
	RetailDeviceSecurityListingRef []RetailDeviceSecurityListingRef `xml:"RetailDeviceSecurityListingRef" json:"RetailDeviceSecurityListingRef"`
}

// RetailDeviceSecurityListingRefStructure represents the RetailDeviceSecurityListingRefStructure element
// Type for Reference to a RETAIL DEVICE SECURITY LISTING..
type RetailDeviceSecurityListingRefStructure struct {
	SecurityListingRefStructure
}

// RetailConsortiumRef represents the RetailConsortiumRef element
// Reference to a RETAIL CONSORTIUM.
type RetailConsortiumRef struct {
	RetailConsortiumRefStructure
}

// RetailDeviceRef represents the RetailDeviceRef element
// Reference to a RETAIL DEVICE.
type RetailDeviceRef struct {
	RetailDeviceRefStructure
}

// TypeOfRetailDeviceRef represents the TypeOfRetailDeviceRef element
// Reference to a TYPE OF RETAIL DEVICE.
type TypeOfRetailDeviceRef struct {
	TypeOfRetailDeviceRefStructure
}

// RetailDeviceSecurityListingRef represents the RetailDeviceSecurityListingRef element
// Reference to a RETAIL DEVICE SECURITY LISTING..
type RetailDeviceSecurityListingRef struct {
	RetailDeviceSecurityListingRefStructure
}

// CustomerEligibilityRefsRelStructure represents the customerEligibilityRefs_RelStructure element
// Type for a list of USER PROFILE ELIGIBILITies.
type CustomerEligibilityRefsRelStructure struct {
	OneToManyRelationshipStructure
	ResidentialQualificationEligibilityRef []ResidentialQualificationEligibilityRef `xml:"ResidentialQualificationEligibilityRef,omitempty" json:"ResidentialQualificationEligibilityRef,omitempty"`
	CommercialProfileEligibilityRef []CommercialProfileEligibilityRef `xml:"CommercialProfileEligibilityRef,omitempty" json:"CommercialProfileEligibilityRef,omitempty"`
	UserProfileEligibilityRef []UserProfileEligibilityRef `xml:"UserProfileEligibilityRef,omitempty" json:"UserProfileEligibilityRef,omitempty"`
}

// CustomerEligibilityRefStructure represents the CustomerEligibilityRefStructure element
// Type for Reference to a CUSTOMER ELIGIBILITY.
type CustomerEligibilityRefStructure struct {
	VersionOfObjectRefStructure
}

// UserProfileEligibilityRefStructure represents the UserProfileEligibilityRefStructure element
// Type for Reference to a USER PROFILE ELIGIBILITY.
type UserProfileEligibilityRefStructure struct {
	CustomerEligibilityRefStructure
}

// CommercialProfileEligibilityRefStructure represents the CommercialProfileEligibilityRefStructure element
// Type for Reference to a COMMERCIAL PROFILE ELIGIBILITY.
type CommercialProfileEligibilityRefStructure struct {
	CustomerEligibilityRefStructure
}

// ResidentialQualificationEligibilityRefStructure represents the ResidentialQualificationEligibilityRefStructure element
// Type for Reference to a RESIDENTIAL QUALIFICATION ELIGIBILITY.
type ResidentialQualificationEligibilityRefStructure struct {
	CustomerEligibilityRefStructure
}

// CustomerEligibilityRef represents the CustomerEligibilityRef element
// Reference to a CUSTOMER ELIGIBILITY.
type CustomerEligibilityRef struct {
	CustomerEligibilityRefStructure
}

// UserProfileEligibilityRef represents the UserProfileEligibilityRef element
// Reference to a USER PROFILE ELIGIBILITY..
type UserProfileEligibilityRef struct {
	UserProfileEligibilityRefStructure
}

// CommercialProfileEligibilityRef represents the CommercialProfileEligibilityRef element
// Reference to a COMMERCIAL PROFILE ELIGIBILITY.
type CommercialProfileEligibilityRef struct {
	CommercialProfileEligibilityRefStructure
}

// ResidentialQualificationEligibilityRef represents the ResidentialQualificationEligibilityRef element
// Reference to a RESIDENTIAL QUALIFICATION ELIGIBILIT..
type ResidentialQualificationEligibilityRef struct {
	ResidentialQualificationEligibilityRefStructure
}

// CustomerEligibilitiesRelStructure represents the customerEligibilities_RelStructure element
// Type for a list of CUSTOMER ELIGIBILITY.s.
type CustomerEligibilitiesRelStructure struct {
	ContainmentAggregationStructure
	ResidentialQualificationEligibility []ResidentialQualificationEligibility `xml:"ResidentialQualificationEligibility,omitempty" json:"ResidentialQualificationEligibility,omitempty"`
	CommercialProfileEligibility []CommercialProfileEligibility `xml:"CommercialProfileEligibility,omitempty" json:"CommercialProfileEligibility,omitempty"`
	UserProfileEligibility []UserProfileEligibility `xml:"UserProfileEligibility,omitempty" json:"UserProfileEligibility,omitempty"`
}

// CustomerEligibilityVersionedChildStructure represents the CustomerEligibility_VersionedChildStructure element
// Type for CUSTOMER ELIGIBILITY.
type CustomerEligibilityVersionedChildStructure struct {
	VersionedChildStructure
	// Name of CUSTOMER ELIGIBILITY.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
}

// UserProfileEligibilityVersionedChildStructure represents the UserProfileEligibility_VersionedChildStructure element
// Type for USER PROFILE ELIGIBILITY.
type UserProfileEligibilityVersionedChildStructure struct {
	CustomerEligibilityVersionedChildStructure
	VehiclePoolerProfileRef *VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef *CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef *UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
}

// CommercialProfileEligibilityVersionedChildStructure represents the CommercialProfileEligibility_VersionedChildStructure element
// Type for COMMERCIAL PROFILE ELIGIBILITY.
type CommercialProfileEligibilityVersionedChildStructure struct {
	CustomerEligibilityVersionedChildStructure
	CommercialProfileRef *CommercialProfileRef `xml:"CommercialProfileRef,omitempty" json:"CommercialProfileRef,omitempty"`
}

// ResidentialQualificationEligibilityVersionedChildStructure represents the ResidentialQualificationEligibility_VersionedChildStructure element
// Type for RESIDENTIAL QUALIFICATION ELIGIBILITY.
type ResidentialQualificationEligibilityVersionedChildStructure struct {
	CustomerEligibilityVersionedChildStructure
	ResidentialQualificationRef *ResidentialQualificationRef `xml:"ResidentialQualificationRef,omitempty" json:"ResidentialQualificationRef,omitempty"`
	// Type of Residency. +v1.1
	ResidencyType *ResidenceTypeEnumeration `xml:"ResidencyType,omitempty" json:"ResidencyType,omitempty"`
	// Date residence started. +v1.1
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// Date residence started +v1.1.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
}

// UserProfileEligibility represents the UserProfileEligibility element
// Whether a specific TRANSPORT CUSTOMER is eligible for a FARE PRODUCT with a specific USER PROFILE as a validity parameter.
type UserProfileEligibility struct {
	UserProfileEligibilityVersionedChildStructure
}

// CommercialProfileEligibility represents the CommercialProfileEligibility element
// Whether a specific TRANSPORT CUSTOMER is eligible for a FARE PRODUCT with a specific COMMERCIAL PROFILE as a validity parameter.
type CommercialProfileEligibility struct {
	CommercialProfileEligibilityVersionedChildStructure
}

// ResidentialQualificationEligibility represents the ResidentialQualificationEligibility element
// Whether a specific TRANSPORT CUSTOMER is eligible for a FARE PRODUCT with a specific RESIDENTIAL QUALIFICATION as a validity parameter.
type ResidentialQualificationEligibility struct {
	ResidentialQualificationEligibilityVersionedChildStructure
}

// MediumAccessDeviceRefsRelStructure represents the mediumAccessDeviceRefs_RelStructure element
// Type for a list of MEDIUM ACCESS DEVICEs.
type MediumAccessDeviceRefsRelStructure struct {
	OneToManyRelationshipStructure
	MobileDeviceRef *MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef *EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef *SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
}

// MediumAccessDeviceRefStructure represents the MediumAccessDeviceRefStructure element
// Type for a reference to a MEDIUM ACCESS DEVICE.
type MediumAccessDeviceRefStructure struct {
	VersionOfObjectRefStructure
}

// SmartcardRefStructure represents the SmartcardRefStructure element
// Type for a reference to a SMARTCARD.
type SmartcardRefStructure struct {
	MediumAccessDeviceRefStructure
}

// EmvCardRefStructure represents the EmvCardRefStructure element
// Type for a reference to a EMV CARD.
type EmvCardRefStructure struct {
	MediumAccessDeviceRefStructure
}

// MobileDeviceRefStructure represents the MobileDeviceRefStructure element
// Type for a reference to a MOBILE DEVICE.
type MobileDeviceRefStructure struct {
	MediumAccessDeviceRefStructure
}

// MediumApplicationInstanceRefsRelStructure represents the mediumApplicationInstanceRefs_RelStructure element
// Type for a list of MEDIUM APPLICATION INSTANCEs.
type MediumApplicationInstanceRefsRelStructure struct {
	OneToManyRelationshipStructure
	MediumApplicationInstanceRef MediumApplicationInstanceRef `xml:"MediumApplicationInstanceRef" json:"MediumApplicationInstanceRef"`
}

// MediumApplicationInstanceRefStructure represents the MediumApplicationInstanceRefStructure element
// Type for a reference to a MEDIUM APPLICATION INSTANCE.
type MediumApplicationInstanceRefStructure struct {
	VersionOfObjectRefStructure
}

// TypeOfMediumAccessDeviceRefStructure represents the TypeOfMediumAccessDeviceRefStructure element
// Type for a reference to a TYPE OF MEDIUM ACCESS DEVICE.
type TypeOfMediumAccessDeviceRefStructure struct {
	TypeOfValueRefStructure
}

// MediumAccessDeviceSecurityListingRefsRelStructure represents the mediumAccessDeviceSecurityListingRefs_RelStructure element
// Type for a list of MEDIUM ACCESS DEVICE SECURITY LISTING.s.
type MediumAccessDeviceSecurityListingRefsRelStructure struct {
	OneToManyRelationshipStructure
	MediumAccessDeviceSecurityListingRef []MediumAccessDeviceSecurityListingRef `xml:"MediumAccessDeviceSecurityListingRef" json:"MediumAccessDeviceSecurityListingRef"`
}

// MediumAccessDeviceSecurityListingRefStructure represents the MediumAccessDeviceSecurityListingRefStructure element
// Type for Reference to a MEDIUM ACCESS DEVICE SECURITY LISTING.
type MediumAccessDeviceSecurityListingRefStructure struct {
	SecurityListingRefStructure
}

// MediumAccessDeviceRef represents the MediumAccessDeviceRef element
// Reference to a MEDIUM ACCESS DEVICE. +v1.2.2
type MediumAccessDeviceRef struct {
	MediumAccessDeviceRefStructure
}

// SmartcardRef represents the SmartcardRef element
// Reference to a SMARTCARD. +v1.2.2
type SmartcardRef struct {
	SmartcardRefStructure
}

// EmvCardRef represents the EmvCardRef element
// Reference to a EMV CARD. +v1.2.2
type EmvCardRef struct {
	EmvCardRefStructure
}

// MobileDeviceRef represents the MobileDeviceRef element
// Reference to a MOBILE DEVICE. +v1.2.2
type MobileDeviceRef struct {
	MobileDeviceRefStructure
}

// MediumApplicationInstanceRef represents the MediumApplicationInstanceRef element
// Reference to a MEDIUM APPLICATION INSTANCE. +v1.2.2
type MediumApplicationInstanceRef struct {
	MediumApplicationInstanceRefStructure
}

// TypeOfMediumAccessDeviceRef represents the TypeOfMediumAccessDeviceRef element
// Reference to a TYPE OF MEDIUM ACCESS DEVICE. +v1.2.2
type TypeOfMediumAccessDeviceRef struct {
	TypeOfMediumAccessDeviceRefStructure
}

// MediumAccessDeviceSecurityListingRef represents the MediumAccessDeviceSecurityListingRef element
// Reference to a MEDIUM ACCESS DEVICE SECURITY LISTING. +v1.2.2
type MediumAccessDeviceSecurityListingRef struct {
	MediumAccessDeviceSecurityListingRefStructure
}

// CustomerPaymentMeanRefsRelStructure represents the customerPaymentMeanRefs_RelStructure element
// Type for a list of CUSTOMER PAYMENT MEANS.
type CustomerPaymentMeanRefsRelStructure struct {
	OneToManyRelationshipStructure
	CustomerPaymentMeansRef []CustomerPaymentMeansRef `xml:"CustomerPaymentMeansRef" json:"CustomerPaymentMeansRef"`
}

// CustomerPaymentMeansRefStructure represents the CustomerPaymentMeansRefStructure element
// Type for a reference to a CUSTOMER PAYMENT MEANS .
type CustomerPaymentMeansRefStructure struct {
	VersionOfObjectRefStructure
}

// CustomerPaymentMeansRef represents the CustomerPaymentMeansRef element
// Reference to a CUSTOMER PAYMENT MEANS . +v1.2.2
type CustomerPaymentMeansRef struct {
	CustomerPaymentMeansRefStructure
}

// CustomerPaymentMeansRelStructure represents the customerPaymentMeans_RelStructure element
// Type for a list of a CUSTOMER PAYMENT MEANSs in Sequence
type CustomerPaymentMeansRelStructure struct {
	ContainmentAggregationStructure
	// A component (mobile phone, smart card, etc) with the necessary facilities (hardware and software) to host a CUSTOMER PAYMENT MEANS and communicate with a control device.
	//  +v1.2.2
	CustomerPaymentMeans []CustomerPaymentMeans `xml:"CustomerPaymentMeans" json:"CustomerPaymentMeans"`
}

// CustomerPaymentMeansVersionedChildStructure represents the CustomerPaymentMeans_VersionedChildStructure element
// Type for CUSTOMER PAYMENT MEANS restricts id.
type CustomerPaymentMeansVersionedChildStructure struct {
	VersionedChildStructure
	// Name of PAYMENT MEANS.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	CustomerAccountRef *CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	MobileDeviceRef *MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef *EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef *SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	// Method of payment used,
	PaymentMethod *PaymentMethodEnumeration `xml:"PaymentMethod,omitempty" json:"PaymentMethod,omitempty"`
	TypeOfPaymentMethodRef *TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	// Dat that means was last verified by an authentication process.
	LastVerifiedDate *time.Time `xml:"LastVerifiedDate,omitempty" json:"LastVerifiedDate,omitempty"`
}

// CustomerPaymentMeans represents the CustomerPaymentMeans element
// A registered means with which a TRANSPORT CUSTOMER wishes to make payments for a CUSTOMER ACCOUNT, e.g. by nominated EMV card,
type CustomerPaymentMeans struct {
	CustomerPaymentMeansVersionedChildStructure
}

// CustomersInFrameRelStructure represents the customersInFrame_RelStructure element
// Type for containment in frame of CUSTOMERs.
type CustomersInFrameRelStructure struct {
	FrameContainmentStructure
	Customer []Customer `xml:"Customer" json:"Customer"`
}

// FareContractsInFrameRelStructure represents the fareContractsInFrame_RelStructure element
// Type for containment in frame of SALES FARE CONTRACTs.
type FareContractsInFrameRelStructure struct {
	FrameContainmentStructure
	FareContract []FareContract `xml:"FareContract" json:"FareContract"`
}

// CustomerAccountsInFrameRelStructure represents the customerAccountsInFrame_RelStructure element
// Type for containment in frame of CUSTOMER ACCOUNTs.
type CustomerAccountsInFrameRelStructure struct {
	FrameContainmentStructure
	CustomerAccount []CustomerAccount `xml:"CustomerAccount" json:"CustomerAccount"`
}

// CustomersRelStructure represents the customers_RelStructure element
// Type for a list of CUSTOMERs.
type CustomersRelStructure struct {
	ContainmentAggregationStructure
	CustomerRef []CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	Customer []Customer `xml:"Customer,omitempty" json:"Customer,omitempty"`
}

// CustomerVersionStructure represents the Customer_VersionStructure element
// Type for CUSTOMER.
type CustomerVersionStructure struct {
	DataManagedObjectStructure
	// Curname of CUSTOMER.
	Surname *string `xml:"Surname,omitempty" json:"Surname,omitempty"`
	// First name of CUSTOMER.
	FirstName *string `xml:"FirstName,omitempty" json:"FirstName,omitempty"`
	// Title  of CUSTOMER.
	Title *string `xml:"Title,omitempty" json:"Title,omitempty"`
	// Date of birth of  CUSTOMER.
	DateOfBirth *time.Time `xml:"DateOfBirth,omitempty" json:"DateOfBirth,omitempty"`
	// Gender of CUSTOMER.
	Gender *GenderEnumeration `xml:"Gender,omitempty" json:"Gender,omitempty"`
	// Height of CUSTOMER.
	Height *float64 `xml:"Height,omitempty" json:"Height,omitempty"`
	// Photo of CUSTOMER.
	Photo *string `xml:"Photo,omitempty" json:"Photo,omitempty"`
	// Whether the customer likes to smoke. +1.2.2
	Smoker *bool `xml:"Smoker,omitempty" json:"Smoker,omitempty"`
	// Email address of CUSTOMER. +v1.1
	Email *string `xml:"Email,omitempty" json:"Email,omitempty"`
	// Email address of CUSTOMER last verified +v1.2.2
	EmailVerified *time.Time `xml:"EmailVerified,omitempty" json:"EmailVerified,omitempty"`
	// Phone number. (Usually personal  mobile phone).
	Phone *TelephoneContactStructure `xml:"Phone,omitempty" json:"Phone,omitempty"`
	// Phone of CUSTOMER last verified +v1.2.2
	PhoneVerified *time.Time `xml:"PhoneVerified,omitempty" json:"PhoneVerified,omitempty"`
	PostalAddress *PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	// Identifier of Identity document of CUSTOMER.
	IdentityDocumentRef *PrivateCodeStructure `xml:"IdentityDocumentRef,omitempty" json:"IdentityDocumentRef,omitempty"`
	// Eligibilities  for CUSTOMER.
	CustomerEligibilities *CustomerEligibilitiesRelStructure `xml:"customerEligibilities,omitempty" json:"customerEligibilities,omitempty"`
	// CUSTOMER ACCOUNTs belonging to customer.
	CustomerAccounts *CustomerAccountsRelStructure `xml:"customerAccounts,omitempty" json:"customerAccounts,omitempty"`
	// FARE CONTRACTs belonging to customer.
	FareContracts *FareContractsRelStructure `xml:"fareContracts,omitempty" json:"fareContracts,omitempty"`
}

// FareContractsRelStructure represents the fareContracts_RelStructure element
// Type for a list of FARE CONTRACTs.
type FareContractsRelStructure struct {
	ContainmentAggregationStructure
	FareContractRef []FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
	FareContract []FareContract `xml:"FareContract,omitempty" json:"FareContract,omitempty"`
}

// FareContractVersionStructure represents the FareContract_VersionStructure element
// Type for FARE CONTRACT.
type FareContractVersionStructure struct {
	DataManagedObjectStructure
	// Name of FARE CONTRACT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of FARE CONTRACT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Start Date of FARE CONTRACT.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// End Date of FARE CONTRACT.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	// Status of FARE CONTRACT.
	Status *string `xml:"Status,omitempty" json:"Status,omitempty"`
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	CustomerAccountRef *CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	TypeOfFareContractRef *TypeOfFareContractRef `xml:"TypeOfFareContractRef,omitempty" json:"TypeOfFareContractRef,omitempty"`
	// Events in CONTRACT.
	FareContractEntries *FareContractEntriesRelStructure `xml:"fareContractEntries,omitempty" json:"fareContractEntries,omitempty"`
}

// FareContractEntriesRelStructure represents the fareContractEntries_RelStructure element
// Type for a list of FARE CONTRACT ENTRYs.
type FareContractEntriesRelStructure struct {
	ContainmentAggregationStructure
	SalesTransactionRef []SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	OfferedTravelSpecificationRef []OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	RequestedTravelSpecificationRef []RequestedTravelSpecificationRef `xml:"RequestedTravelSpecificationRef,omitempty" json:"RequestedTravelSpecificationRef,omitempty"`
	TravelSpecificationRef []TravelSpecificationRef `xml:"TravelSpecificationRef,omitempty" json:"TravelSpecificationRef,omitempty"`
	FareContractEntryRef []FareContractEntryRef `xml:"FareContractEntryRef,omitempty" json:"FareContractEntryRef,omitempty"`
	SalesTransaction []SalesTransaction `xml:"SalesTransaction,omitempty" json:"SalesTransaction,omitempty"`
	OfferedTravelSpecification []OfferedTravelSpecification `xml:"OfferedTravelSpecification,omitempty" json:"OfferedTravelSpecification,omitempty"`
	RequestedTravelSpecification []RequestedTravelSpecification `xml:"RequestedTravelSpecification,omitempty" json:"RequestedTravelSpecification,omitempty"`
	TravelSpecification []TravelSpecification1 `xml:"TravelSpecification,omitempty" json:"TravelSpecification,omitempty"`
	NetexOrgUkNetexTravelSpecification []TravelSpecification2 `xml:"TravelSpecification_,omitempty" json:"TravelSpecification_,omitempty"`
	FareContractEntry []FareContractEntry `xml:"FareContractEntry_,omitempty" json:"FareContractEntry_,omitempty"`
}

// FareContractEntryVersionStructure represents the FareContractEntry_VersionStructure element
// Type for FARE CONTRACT ENTRY.
type FareContractEntryVersionStructure struct {
	LogEntryVersionStructure
	// Whether FARE CONTRACT ENTRY is valid.
	IsValid *bool `xml:"IsValid,omitempty" json:"IsValid,omitempty"`
	// A classifiication of FARE CONTRACT ENTRYs.
	TypeOfFareContractEntryRef *TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef,omitempty" json:"TypeOfFareContractEntryRef,omitempty"`
	FareContractRef *FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
}

// TypesOfFareContractRelStructure represents the typesOfFareContract_RelStructure element
// Type for a list of TYPE OF FARE CONTRACT s.
type TypesOfFareContractRelStructure struct {
	ContainmentAggregationStructure
	TypeOfFareContractRef []TypeOfFareContractRef `xml:"TypeOfFareContractRef,omitempty" json:"TypeOfFareContractRef,omitempty"`
	TypeOfFareContract []TypeOfFareContract `xml:"TypeOfFareContract,omitempty" json:"TypeOfFareContract,omitempty"`
}

// TypeOfFareContractVersionStructure represents the TypeOfFareContract_VersionStructure element
// Type for TYPE OF FARE CONTRACT.
type TypeOfFareContractVersionStructure struct {
	TypeOfEntityVersionStructure
}

// TypesOfFareContractEntryRelStructure represents the typesOfFareContractEntry_RelStructure element
// Type for a list of TYPE OF FARE CONTRACT ENTRYs.
type TypesOfFareContractEntryRelStructure struct {
	ContainmentAggregationStructure
	TypeOfFareContractEntryRef []TypeOfFareContractEntryRef `xml:"TypeOfFareContractEntryRef,omitempty" json:"TypeOfFareContractEntryRef,omitempty"`
	// A TYPE OF FARE CONTRACT ENTRY specifying access rights for the FARE CONTRACT ENTRY ELEMENTs within the range of this UNIT: 0-5 km, 4-6 zones etc.
	TypeOfFareContractEntry []TypeOfFareContractEntry `xml:"TypeOfFareContractEntry,omitempty" json:"TypeOfFareContractEntry,omitempty"`
}

// TypeOfFareContractEntryVersionStructure represents the TypeOfFareContractEntry_VersionStructure element
// Type for TYPE OF FARE CONTRACT ENTRY.
type TypeOfFareContractEntryVersionStructure struct {
	TypeOfEntityVersionStructure
}

// CustomerAccountsRelStructure represents the customerAccounts_RelStructure element
// Type for a list of CUSTOMER ACCOUNTs.
type CustomerAccountsRelStructure struct {
	ContainmentAggregationStructure
	CustomerAccountRef []CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	CustomerAccount []CustomerAccount `xml:"CustomerAccount,omitempty" json:"CustomerAccount,omitempty"`
}

// CustomerAccountVersionStructure represents the CustomerAccount_VersionStructure element
// Type for CUSTOMER ACCOUNT.
type CustomerAccountVersionStructure struct {
	DataManagedObjectStructure
	// Name of CUSTOMER ACCOUNT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of CUSTOMER ACCOUNT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Start Date of CUSTOMER ACCOUNT.
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	// End Date of CUSTOMER ACCOUNT.
	EndDate *time.Time `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	TypeOfCustomerAccountRef *TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef,omitempty" json:"TypeOfCustomerAccountRef,omitempty"`
	CustomerAccountStatusRef *CustomerAccountStatusRef `xml:"CustomerAccountStatusRef,omitempty" json:"CustomerAccountStatusRef,omitempty"`
	// Standard values for account status. +v1.1
	CustomerAccountStatusType *AccountStatusTypeEnumeration `xml:"CustomerAccountStatusType,omitempty" json:"CustomerAccountStatusType,omitempty"`
	// FARE CONTRACTs for CUSTOMER ACCOUNT +v1.1.
	FareContracts *FareContractsRelStructure `xml:"fareContracts,omitempty" json:"fareContracts,omitempty"`
	// CUSTOMER PURCHASE PACKAGES  for CUSTOMER ACCOUT.
	CustomerPurchasePackages *CustomerPurchasePackageRefsRelStructure `xml:"customerPurchasePackages,omitempty" json:"customerPurchasePackages,omitempty"`
	CustomerPaymentMeansRef *CustomerPaymentMeansRef `xml:"CustomerPaymentMeansRef,omitempty" json:"CustomerPaymentMeansRef,omitempty"`
	// PAYMENT MEANS for CUSTOMER ACCOUNT. +v1.2.2
	PaymentMeans *CustomerPaymentMeansRelStructure `xml:"paymentMeans,omitempty" json:"paymentMeans,omitempty"`
	// MEDIUM APPLICATION INSTANCES for CUSTOMER ACCOUNT. +v1.2.2
	MediumAccessDevices *MediumAccessDeviceRefsRelStructure `xml:"mediumAccessDevices,omitempty" json:"mediumAccessDevices,omitempty"`
}

// TypesOfCustomerAccountRelStructure represents the typesOfCustomerAccount_RelStructure element
// Type for a list of TYPE OF CUSTOMER ACCOUNTs.
type TypesOfCustomerAccountRelStructure struct {
	ContainmentAggregationStructure
	TypeOfCustomerAccountRef []TypeOfCustomerAccountRef `xml:"TypeOfCustomerAccountRef,omitempty" json:"TypeOfCustomerAccountRef,omitempty"`
	TypeOfCustomerAccount []TypeOfCustomerAccount `xml:"TypeOfCustomerAccount,omitempty" json:"TypeOfCustomerAccount,omitempty"`
}

// TypeOfCustomerAccountVersionStructure represents the TypeOfCustomerAccount_VersionStructure element
// Type for TYPE OF CUSTOMER ACCOUNT.
type TypeOfCustomerAccountVersionStructure struct {
	TypeOfEntityVersionStructure
}

// TypesOfAccountStatusRelStructure represents the typesOfAccountStatus_RelStructure element
// Type for a list of CUSTOMER ACCOUNT STATUSes.
type TypesOfAccountStatusRelStructure struct {
	ContainmentAggregationStructure
	CustomerAccountStatusRef []CustomerAccountStatusRef `xml:"CustomerAccountStatusRef,omitempty" json:"CustomerAccountStatusRef,omitempty"`
	CustomerAccountStatus []CustomerAccountStatus `xml:"CustomerAccountStatus,omitempty" json:"CustomerAccountStatus,omitempty"`
}

// CustomerAccountStatusVersionStructure represents the CustomerAccountStatus_VersionStructure element
// Type for CUSTOMER ACCOUNT STATUS.
type CustomerAccountStatusVersionStructure struct {
	TypeOfEntityVersionStructure
}

// CustomerAccountSecurityListingVersionedChildStructure represents the CustomerAccountSecurityListing_VersionedChildStructure element
// Type for CUSTOMER ACCOUNT SECURITY LISTING.
type CustomerAccountSecurityListingVersionedChildStructure struct {
	SecurityListingVersionedChildStructure
	CustomerAccountRef *CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
}

// CustomerSecurityListingVersionedChildStructure represents the CustomerSecurityListing_VersionedChildStructure element
// Type for CUSTOMER SECURITY LISTING.
type CustomerSecurityListingVersionedChildStructure struct {
	SecurityListingVersionedChildStructure
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
}

// FareContractSecurityListingVersionedChildStructure represents the FareContractSecurityListing_VersionedChildStructure element
// Type for FARE CONTRACT SECURITY LISTING.
type FareContractSecurityListingVersionedChildStructure struct {
	SecurityListingVersionedChildStructure
	FareContractRef *FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
}

// Customer represents the Customer element
// An identified person or organisation involved in a fare process. There may be a FARE CONTRACT between the CUSTOMER and the OPERATOR or the AUTHORITY ruling the consumption of services.
type Customer struct {
	CustomerVersionStructure
}

// FareContract represents the FareContract element
// A contract with a particular (but possibly anonymous) customer, ruling the consumption of transport services (and joint services). A FARE CONTRACT may be designed for a fixed SALES OFFER PACKAGE (e.g. ticket) or to allow successive purchases of SALES OFFER PACKAGEs.
type FareContract struct {
	FareContractVersionStructure
}

// FareContractEntry represents the FareContractEntry_ element
// Dummy type for FARE CONTRACT ENTRY.
type FareContractEntry struct {
	DataManagedObjectStructure
}

// TypeOfFareContract represents the TypeOfFareContract element
// A classification of FARE CONTRACT.
type TypeOfFareContract struct {
	TypeOfFareContractVersionStructure
}

// TypeOfFareContractEntry represents the TypeOfFareContractEntry element
// A classification of a FARE CONTRACT ENTRY.
type TypeOfFareContractEntry struct {
	TypeOfFareContractEntryVersionStructure
}

// CustomerAccount represents the CustomerAccount element
// A contract with a particular (but possibly anonymous) customer, ruling the consumption of transport services (and joint services). A CUSTOMER ACCOUNT may be designed for a fixed SALES OFFER PACKAGE (e.g. ticket) or to allow successive purchases of SALES OFFER PACKAGEs.
type CustomerAccount struct {
	CustomerAccountVersionStructure
}

// TypeOfCustomerAccount represents the TypeOfCustomerAccount element
// A classification of a CUSTOMER ACCOUNT.
type TypeOfCustomerAccount struct {
	TypeOfCustomerAccountVersionStructure
}

// CustomerAccountStatus represents the CustomerAccountStatus element
// A classification of a CUSTOMER ACCOUNT.
type CustomerAccountStatus struct {
	CustomerAccountStatusVersionStructure
}

// CustomerAccountSecurityListing represents the CustomerAccountSecurityListing element
// A listing of a CUSTOMER ACCOUNT on a SECURITY LIST.
type CustomerAccountSecurityListing struct {
	CustomerAccountSecurityListingVersionedChildStructure
}

// CustomerSecurityListing represents the CustomerSecurityListing element
// A listing of a CUSTOMER on a SECURITY LIST.
type CustomerSecurityListing struct {
	CustomerSecurityListingVersionedChildStructure
}

// FareContractSecurityListing represents the FareContractSecurityListing element
// A listing of a FARE CONTRACT on a SECURITY LIST.
type FareContractSecurityListing struct {
	FareContractSecurityListingVersionedChildStructure
}

// RetailDevicesInFrameRelStructure represents the retailDevicesInFrame_RelStructure element
// Type for containment in frame of CUSTOMERs.
type RetailDevicesInFrameRelStructure struct {
	FrameContainmentStructure
	RetailDevice []RetailDevice `xml:"RetailDevice" json:"RetailDevice"`
}

// RetailConsortiumsInFrameRelStructure represents the retailConsortiumsInFrame_RelStructure element
// Type for containment in frame of  RETAIL CONSORTIUMs.
type RetailConsortiumsInFrameRelStructure struct {
	FrameContainmentStructure
	RetailConsortium []RetailConsortium `xml:"RetailConsortium" json:"RetailConsortium"`
}

// RetailConsortiumsRelStructure represents the retailConsortiums_RelStructure element
// Type for a list of RETAIL CONSORTIUMs.
type RetailConsortiumsRelStructure struct {
	ContainmentAggregationStructure
	RetailConsortiumRef []RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	RetailConsortium []RetailConsortium `xml:"RetailConsortium,omitempty" json:"RetailConsortium,omitempty"`
}

// RetailConsortiumVersionStructure represents the RetailConsortium_VersionStructure element
// Type for RETAIL CONSORTIUM.
type RetailConsortiumVersionStructure struct {
	OrganisationVersionStructure
	PostalAddress *PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	// RETAIL DEVICEs used by to RETAIL CONSORTIUM.
	Members *OrganisationRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	// BLACKLISTs used by RETAIL CONSORTIUM.
	BlacklistRefs *BlacklistRefsRelStructure `xml:"blacklistRefs,omitempty" json:"blacklistRefs,omitempty"`
	// WHITELISTs used by RETAIL CONSORTIUM.
	WhitelistRefs *WhitelistRefsRelStructure `xml:"whitelistRefs,omitempty" json:"whitelistRefs,omitempty"`
	// RETAIL DEVICEs used by RETAIL CONSORTIUM.
	RetailDevices *RetailDevicesRelStructure `xml:"retailDevices,omitempty" json:"retailDevices,omitempty"`
}

// RetailDevicesRelStructure represents the RetailDevices_RelStructure element
// Type for a list of RETAIL DEVICEs.
type RetailDevicesRelStructure struct {
	ContainmentAggregationStructure
	RetailDeviceRef []RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
	RetailDevice []RetailDevice `xml:"RetailDevice,omitempty" json:"RetailDevice,omitempty"`
}

// RetailDeviceVersionStructure represents the RetailDevice_VersionStructure element
// Type for RETAIL DEVICE.
type RetailDeviceVersionStructure struct {
	InstalledEquipmentVersionStructure
	// Status of Retail device.
	Status *string `xml:"Status,omitempty" json:"Status,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	TypeOfRetailDeviceRef *TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef,omitempty" json:"TypeOfRetailDeviceRef,omitempty"`
}

// TypesOfRetailDeviceRelStructure represents the typesOfRetailDevice_RelStructure element
// Type for a list of TYPE OF RETAIL DEVICEs.
type TypesOfRetailDeviceRelStructure struct {
	ContainmentAggregationStructure
	TypeOfRetailDeviceRef []TypeOfRetailDeviceRef `xml:"TypeOfRetailDeviceRef,omitempty" json:"TypeOfRetailDeviceRef,omitempty"`
	TypeOfRetailDevice []TypeOfRetailDevice `xml:"TypeOfRetailDevice,omitempty" json:"TypeOfRetailDevice,omitempty"`
}

// TypeOfRetailDeviceVersionStructure represents the TypeOfRetailDevice_VersionStructure element
// Type for TYPE OF RETAIL DEVICE.
type TypeOfRetailDeviceVersionStructure struct {
	TypeOfEntityVersionStructure
}

// RetailDeviceSecurityListingVersionedChildStructure represents the RetailDeviceSecurityListing_VersionedChildStructure element
// Type for  RETAIL DEVICE SECURITY LISTING.
type RetailDeviceSecurityListingVersionedChildStructure struct {
	SecurityListingVersionedChildStructure
	RetailDeviceRef *RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
}

// RetailConsortium represents the RetailConsortium element
// A group of ORGANISATIONs formally incorporated as a retailer of fare products.
type RetailConsortium struct {
	RetailConsortiumVersionStructure
}

// RetailDevice represents the RetailDevice element
// A retail device used to sell fare products. Can be used to record fulfilment.
type RetailDevice struct {
	RetailDeviceVersionStructure
}

// TypeOfRetailDevice represents the TypeOfRetailDevice element
// A classification of RETAIL DEVICEs.
type TypeOfRetailDevice struct {
	TypeOfRetailDeviceVersionStructure
}

// RetailDeviceSecurityListing represents the RetailDeviceSecurityListing element
// A listing of a RETAIL DEVICE on a sSECURITY LIST.
type RetailDeviceSecurityListing struct {
	RetailDeviceSecurityListingVersionedChildStructure
}

// SalesTransactionRefsRelStructure represents the salesTransactionRefs_RelStructure element
// Type for a collection of one or more references to a SALES TRANSACTION.
type SalesTransactionRefsRelStructure struct {
	OneToManyRelationshipStructure
	SalesTransactionRef []SalesTransactionRef `xml:"SalesTransactionRef" json:"SalesTransactionRef"`
}

// SalesTransactionRefStructure represents the SalesTransactionRefStructure element
// Type for Reference to a SALES TRANSACTION.
type SalesTransactionRefStructure struct {
	FareContractEntryRefStructure
}

// SalesTransactionRef represents the SalesTransactionRef element
// Reference to a SALES TRANSACTION.
type SalesTransactionRef struct {
	SalesTransactionRefStructure
}

// PassengerInformationRequestRefStructure represents the PassengerInformationRequestRefStructure element
// Type for Reference to a PASSENGER INFORMATION REQUEST.
type PassengerInformationRequestRefStructure struct {
	VersionOfObjectRefStructure
}

// TripPlanRequestRefStructure represents the TripPlanRequestRefStructure element
// Type for Reference to a TRIP PLAN REQUEST.
type TripPlanRequestRefStructure struct {
	PassengerInformationRequestRefStructure
}

// ScheduleRequestRefStructure represents the ScheduleRequestRefStructure element
// Type for Reference to a SCHEDULE REQUEST.
type ScheduleRequestRefStructure struct {
	PassengerInformationRequestRefStructure
}

// StopEventRequestRefStructure represents the StopEventRequestRefStructure element
// Type for Reference to a STOP EVENT REQUEST.
type StopEventRequestRefStructure struct {
	PassengerInformationRequestRefStructure
}

// StopFinderRequestRefStructure represents the StopFinderRequestRefStructure element
// Type for Reference to a STOP FINDER REQUEST.
type StopFinderRequestRefStructure struct {
	PassengerInformationRequestRefStructure
}

// FareRequestRefStructure represents the FareRequestRefStructure element
// Type for Reference to a FARE REQUEST.
type FareRequestRefStructure struct {
	PassengerInformationRequestRefStructure
}

// SingleTripFareRequestRefStructure represents the SingleTripFareRequestRefStructure element
// Type for Reference to a SINGLE TRIP FARE REQUEST.
type SingleTripFareRequestRefStructure struct {
	FareRequestRefStructure
}

// RepeatedTripFareRequestRefStructure represents the RepeatedTripFareRequestRefStructure element
// Type for Reference to a REPEATED TRIP FARE REQUEST.
type RepeatedTripFareRequestRefStructure struct {
	FareRequestRefStructure
}

// PassengerInformationRequestRef represents the PassengerInformationRequestRef element
// Reference to a PASSENGER INFORMATION REQUEST.
type PassengerInformationRequestRef struct {
	PassengerInformationRequestRefStructure
}

// TripPlanRequestRef represents the TripPlanRequestRef element
// Reference to a TRIP PLAN REQUEST.
type TripPlanRequestRef struct {
	TripPlanRequestRefStructure
}

// ScheduleRequestRef represents the ScheduleRequestRef element
// Reference to a SCHEDULE REQUEST.
type ScheduleRequestRef struct {
	ScheduleRequestRefStructure
}

// StopEventRequestRef represents the StopEventRequestRef element
// Reference to a STOP EVENT REQUEST.
type StopEventRequestRef struct {
	StopEventRequestRefStructure
}

// StopFinderRequestRef represents the StopFinderRequestRef element
// Reference to a STOP FINDER REQUEST.
type StopFinderRequestRef struct {
	StopFinderRequestRefStructure
}

// FareRequestRef represents the FareRequestRef element
// Reference to a FARE REQUEST.
type FareRequestRef struct {
	FareRequestRefStructure
}

// SingleTripFareRequestRef represents the SingleTripFareRequestRef element
// Reference to a SINGLE TRIP FARE REQUEST.
type SingleTripFareRequestRef struct {
	SingleTripFareRequestRefStructure
}

// RepeatedTripFareRequestRef represents the RepeatedTripFareRequestRef element
// Reference to a REPEATED TRIP FARE REQUEST.
type RepeatedTripFareRequestRef struct {
	RepeatedTripFareRequestRefStructure
}

// TravelSpecificationSummaryViewStructure represents the TravelSpecificationSummaryViewStructure element
// Summary of key aspects of TRAVEL SPECIFICATION. +V1.1. This data should all be derivable from the detailed specification. v+1.1
type TravelSpecificationSummaryViewStructure struct {
	// Origin of Travel.  Note that for a point-to-point TARIFF the origin is assigned with a DISTANCE MATRIX ELEMENT.
	Origin *TravelSpecificationSummaryEndpointStructure `xml:"Origin,omitempty" json:"Origin,omitempty"`
	// Destination of Travel. Note that for a point-to-point TARIFF the origin is assigned with a DISTANCE MATRIX ELEMENT.
	Destination *TravelSpecificationSummaryEndpointStructure `xml:"Destination,omitempty" json:"Destination,omitempty"`
	// Start timw for trip or pass.
	Start *time.Time `xml:"Start,omitempty" json:"Start,omitempty"`
	// End time for trip or pass.
	End *time.Time `xml:"End,omitempty" json:"End,omitempty"`
	// DUration for trip or pass
	Duration *string `xml:"Duration,omitempty" json:"Duration,omitempty"`
	// Specified journeys for trip.
	Journeys *TravelSpecificationJourneyRefsRelStructure `xml:"journeys,omitempty" json:"journeys,omitempty"`
	// Routig for trip
	SeriesConstraints *SeriesConstraintRefsRelStructure `xml:"seriesConstraints,omitempty" json:"seriesConstraints,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	GroupOfOperatorsRef *GroupOfOperatorsRef `xml:"GroupOfOperatorsRef,omitempty" json:"GroupOfOperatorsRef,omitempty"`
	TypeOfProductCategoryRef *TypeOfProductCategoryRef `xml:"TypeOfProductCategoryRef,omitempty" json:"TypeOfProductCategoryRef,omitempty"`
	TypeOfFareProductRef *TypeOfFareProductRef `xml:"TypeOfFareProductRef,omitempty" json:"TypeOfFareProductRef,omitempty"`
	FareClass *FareClass `xml:"FareClass,omitempty" json:"FareClass,omitempty"`
	ClassOfUseRef *ClassOfUseRef `xml:"ClassOfUseRef,omitempty" json:"ClassOfUseRef,omitempty"`
	VehiclePoolerProfileRef *VehiclePoolerProfileRef `xml:"VehiclePoolerProfileRef,omitempty" json:"VehiclePoolerProfileRef,omitempty"`
	CompanionProfileRef *CompanionProfileRef `xml:"CompanionProfileRef,omitempty" json:"CompanionProfileRef,omitempty"`
	UserProfileRef *UserProfileRef `xml:"UserProfileRef,omitempty" json:"UserProfileRef,omitempty"`
	GroupTicketRef *GroupTicketRef `xml:"GroupTicketRef,omitempty" json:"GroupTicketRef,omitempty"`
	// Maimum number of users on a GROUP TICKET.
	MaximumNumberOfUsers *int `xml:"MaximumNumberOfUsers,omitempty" json:"MaximumNumberOfUsers,omitempty"`
	TrainElementRef *TrainElementRef `xml:"TrainElementRef,omitempty" json:"TrainElementRef,omitempty"`
	TrainComponentLabelAssignmentRef *TrainComponentLabelAssignmentRef `xml:"TrainComponentLabelAssignmentRef,omitempty" json:"TrainComponentLabelAssignmentRef,omitempty"`
	PassengerSeatRef *PassengerSeatRef `xml:"PassengerSeatRef,omitempty" json:"PassengerSeatRef,omitempty"`
	ServiceFacilitySet *ServiceFacilitySet `xml:"ServiceFacilitySet,omitempty" json:"ServiceFacilitySet,omitempty"`
	RetailDeviceRef *RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	ActivatedEquipmentRef *ActivatedEquipmentRef `xml:"ActivatedEquipmentRef,omitempty" json:"ActivatedEquipmentRef,omitempty"`
	BatteryEquipmentRef *BatteryEquipmentRef `xml:"BatteryEquipmentRef,omitempty" json:"BatteryEquipmentRef,omitempty"`
	RefuellingEquipmentRef *RefuellingEquipmentRef `xml:"RefuellingEquipmentRef,omitempty" json:"RefuellingEquipmentRef,omitempty"`
	VehicleChargingEquipmentRef *VehicleChargingEquipmentRef `xml:"VehicleChargingEquipmentRef,omitempty" json:"VehicleChargingEquipmentRef,omitempty"`
	AssistanceBookingServiceRef *AssistanceBookingServiceRef `xml:"AssistanceBookingServiceRef,omitempty" json:"AssistanceBookingServiceRef,omitempty"`
	CateringServiceRef *CateringServiceRef `xml:"CateringServiceRef,omitempty" json:"CateringServiceRef,omitempty"`
	RetailServiceRef *RetailServiceRef `xml:"RetailServiceRef,omitempty" json:"RetailServiceRef,omitempty"`
	MoneyServiceRef *MoneyServiceRef `xml:"MoneyServiceRef,omitempty" json:"MoneyServiceRef,omitempty"`
	HireServiceRef *HireServiceRef `xml:"HireServiceRef,omitempty" json:"HireServiceRef,omitempty"`
	CommunicationServiceRef *CommunicationServiceRef `xml:"CommunicationServiceRef,omitempty" json:"CommunicationServiceRef,omitempty"`
	MeetingPointServiceRef *MeetingPointServiceRef `xml:"MeetingPointServiceRef,omitempty" json:"MeetingPointServiceRef,omitempty"`
	LeftLuggageServiceRef *LeftLuggageServiceRef `xml:"LeftLuggageServiceRef,omitempty" json:"LeftLuggageServiceRef,omitempty"`
	LuggageServiceRef *LuggageServiceRef `xml:"LuggageServiceRef,omitempty" json:"LuggageServiceRef,omitempty"`
	LostPropertyServiceRef *LostPropertyServiceRef `xml:"LostPropertyServiceRef,omitempty" json:"LostPropertyServiceRef,omitempty"`
	ComplaintsServiceRef *ComplaintsServiceRef `xml:"ComplaintsServiceRef,omitempty" json:"ComplaintsServiceRef,omitempty"`
	CustomerServiceRef *CustomerServiceRef `xml:"CustomerServiceRef,omitempty" json:"CustomerServiceRef,omitempty"`
	AssistanceServiceRef *AssistanceServiceRef `xml:"AssistanceServiceRef,omitempty" json:"AssistanceServiceRef,omitempty"`
	TicketingServiceRef *TicketingServiceRef `xml:"TicketingServiceRef,omitempty" json:"TicketingServiceRef,omitempty"`
	LocalServiceRef *LocalServiceRef `xml:"LocalServiceRef,omitempty" json:"LocalServiceRef,omitempty"`
	VehicleReleaseEquipmentRef *VehicleReleaseEquipmentRef `xml:"VehicleReleaseEquipmentRef,omitempty" json:"VehicleReleaseEquipmentRef,omitempty"`
	TicketValidatorEquipmentRef *TicketValidatorEquipmentRef `xml:"TicketValidatorEquipmentRef,omitempty" json:"TicketValidatorEquipmentRef,omitempty"`
	TicketingEquipmentRef *TicketingEquipmentRef `xml:"TicketingEquipmentRef,omitempty" json:"TicketingEquipmentRef,omitempty"`
	PassengerInformationEquipmentRef *PassengerInformationEquipmentRef `xml:"PassengerInformationEquipmentRef,omitempty" json:"PassengerInformationEquipmentRef,omitempty"`
	CycleStorageEquipmentRef *CycleStorageEquipmentRef `xml:"CycleStorageEquipmentRef,omitempty" json:"CycleStorageEquipmentRef,omitempty"`
	TrolleyStandEquipmentRef *TrolleyStandEquipmentRef `xml:"TrolleyStandEquipmentRef,omitempty" json:"TrolleyStandEquipmentRef,omitempty"`
	SeatingEquipmentRef *SeatingEquipmentRef `xml:"SeatingEquipmentRef,omitempty" json:"SeatingEquipmentRef,omitempty"`
	ShelterEquipmentRef *ShelterEquipmentRef `xml:"ShelterEquipmentRef,omitempty" json:"ShelterEquipmentRef,omitempty"`
	LuggageLockerEquipmentRef *LuggageLockerEquipmentRef `xml:"LuggageLockerEquipmentRef,omitempty" json:"LuggageLockerEquipmentRef,omitempty"`
	WaitingRoomEquipmentRef *WaitingRoomEquipmentRef `xml:"WaitingRoomEquipmentRef,omitempty" json:"WaitingRoomEquipmentRef,omitempty"`
	WaitingEquipmentRef *WaitingEquipmentRef `xml:"WaitingEquipmentRef,omitempty" json:"WaitingEquipmentRef,omitempty"`
	SiteEquipmentRef *SiteEquipmentRef `xml:"SiteEquipmentRef,omitempty" json:"SiteEquipmentRef,omitempty"`
	PlaceLightingEquipmentRef *PlaceLightingEquipmentRef `xml:"PlaceLightingEquipmentRef,omitempty" json:"PlaceLightingEquipmentRef,omitempty"`
	RoughSurfaceRef *RoughSurfaceRef `xml:"RoughSurfaceRef,omitempty" json:"RoughSurfaceRef,omitempty"`
	StaircaseEquipmentRef *StaircaseEquipmentRef `xml:"StaircaseEquipmentRef,omitempty" json:"StaircaseEquipmentRef,omitempty"`
	QueueingEquipmentRef *QueueingEquipmentRef `xml:"QueueingEquipmentRef,omitempty" json:"QueueingEquipmentRef,omitempty"`
	TravelatorEquipmentRef *TravelatorEquipmentRef `xml:"TravelatorEquipmentRef,omitempty" json:"TravelatorEquipmentRef,omitempty"`
	EscalatorEquipmentRef *EscalatorEquipmentRef `xml:"EscalatorEquipmentRef,omitempty" json:"EscalatorEquipmentRef,omitempty"`
	LiftCallEquipmentRef *LiftCallEquipmentRef `xml:"LiftCallEquipmentRef,omitempty" json:"LiftCallEquipmentRef,omitempty"`
	LiftEquipmentRef *LiftEquipmentRef `xml:"LiftEquipmentRef,omitempty" json:"LiftEquipmentRef,omitempty"`
	CrossingEquipmentRef *CrossingEquipmentRef `xml:"CrossingEquipmentRef,omitempty" json:"CrossingEquipmentRef,omitempty"`
	RampEquipmentRef *RampEquipmentRef `xml:"RampEquipmentRef,omitempty" json:"RampEquipmentRef,omitempty"`
	EntranceEquipmentRef *EntranceEquipmentRef `xml:"EntranceEquipmentRef,omitempty" json:"EntranceEquipmentRef,omitempty"`
	HeadingSignRef *HeadingSignRef `xml:"HeadingSignRef,omitempty" json:"HeadingSignRef,omitempty"`
	GeneralSignRef *GeneralSignRef `xml:"GeneralSignRef,omitempty" json:"GeneralSignRef,omitempty"`
	PlaceSignRef *PlaceSignRef `xml:"PlaceSignRef,omitempty" json:"PlaceSignRef,omitempty"`
	SignEquipmentRef *SignEquipmentRef `xml:"SignEquipmentRef,omitempty" json:"SignEquipmentRef,omitempty"`
	RubbishDisposalEquipmentRef *RubbishDisposalEquipmentRef `xml:"RubbishDisposalEquipmentRef,omitempty" json:"RubbishDisposalEquipmentRef,omitempty"`
	PassengerBeaconEquipmentRef *PassengerBeaconEquipmentRef `xml:"PassengerBeaconEquipmentRef,omitempty" json:"PassengerBeaconEquipmentRef,omitempty"`
	HelpPointEquipmentRef *HelpPointEquipmentRef `xml:"HelpPointEquipmentRef,omitempty" json:"HelpPointEquipmentRef,omitempty"`
	PassengerSafetyEquipmentRef *PassengerSafetyEquipmentRef `xml:"PassengerSafetyEquipmentRef,omitempty" json:"PassengerSafetyEquipmentRef,omitempty"`
	SanitaryEquipmentRef *SanitaryEquipmentRef `xml:"SanitaryEquipmentRef,omitempty" json:"SanitaryEquipmentRef,omitempty"`
	WheelchairVehicleRef *WheelchairVehicleRef `xml:"WheelchairVehicleRef,omitempty" json:"WheelchairVehicleRef,omitempty"`
	AccessVehicleEquipmentRef *AccessVehicleEquipmentRef `xml:"AccessVehicleEquipmentRef,omitempty" json:"AccessVehicleEquipmentRef,omitempty"`
	VehicleEquipmentRef *VehicleEquipmentRef `xml:"VehicleEquipmentRef,omitempty" json:"VehicleEquipmentRef,omitempty"`
	PassengerEquipmentRef *PassengerEquipmentRef `xml:"PassengerEquipmentRef,omitempty" json:"PassengerEquipmentRef,omitempty"`
	EquipmentRef *EquipmentRef `xml:"EquipmentRef,omitempty" json:"EquipmentRef,omitempty"`
}

// TravelSpecificationSummaryEndpointStructure represents the TravelSpecificationSummaryEndpointStructure element
// Origin or destnation elements for TRAVEL SPECIFICATION Summary View.
type TravelSpecificationSummaryEndpointStructure struct {
	TopographicPlaceView *TopographicPlaceView `xml:"TopographicPlaceView,omitempty" json:"TopographicPlaceView,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	PostalAddressRef *PostalAddressRef `xml:"PostalAddressRef,omitempty" json:"PostalAddressRef,omitempty"`
	RoadAddressRef *RoadAddressRef `xml:"RoadAddressRef,omitempty" json:"RoadAddressRef,omitempty"`
	AddressRef *AddressRef `xml:"AddressRef,omitempty" json:"AddressRef,omitempty"`
	ScheduledStopPointView *ScheduledStopPointView `xml:"ScheduledStopPointView,omitempty" json:"ScheduledStopPointView,omitempty"`
	VehicleMeetingPointRef *VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	TariffZoneRef []TariffZoneRef `xml:"TariffZoneRef,omitempty" json:"TariffZoneRef,omitempty"`
}

// TravelSpecificationJourneyRefsRelStructure represents the travelSpecificationJourneyRefs_RelStructure element
// Type for a list of JOURNEYs.
type TravelSpecificationJourneyRefsRelStructure struct {
	OneToManyRelationshipStructure
	TemplateServiceJourneyRef []TemplateServiceJourneyRef `xml:"TemplateServiceJourneyRef,omitempty" json:"TemplateServiceJourneyRef,omitempty"`
	ServiceJourneyRef []ServiceJourneyRef `xml:"ServiceJourneyRef,omitempty" json:"ServiceJourneyRef,omitempty"`
	SingleJourneyRef []SingleJourneyRef `xml:"SingleJourneyRef,omitempty" json:"SingleJourneyRef,omitempty"`
	TrainNumberRef []TrainNumberRef `xml:"TrainNumberRef,omitempty" json:"TrainNumberRef,omitempty"`
}

// TravelSpecificationSummaryView represents the TravelSpecificationSummaryView element
// Summary of key aspects of TRAVEL SPECIFICATION. +V1.1. This data should all be derivable from the PARAMATER ASSIGNMENTs.  v+1.1
type TravelSpecificationSummaryView struct {
	TravelSpecificationSummaryViewStructure
}

// TravelDocumentRefStructure represents the TravelDocumentRefStructure element
// Type for Reference to a TRAVEL DOCUMENT.
type TravelDocumentRefStructure struct {
	VersionOfObjectRefStructure
}

// TravelDocumentSecurityListingRefsRelStructure represents the TravelDocumentSecurityListingRefs_RelStructure element
// Type for a list of TRAVEL DOCUMENT SECURITY LISTING.s.
type TravelDocumentSecurityListingRefsRelStructure struct {
	OneToManyRelationshipStructure
	TravelDocumentSecurityListingRef []TravelDocumentSecurityListingRef `xml:"TravelDocumentSecurityListingRef" json:"TravelDocumentSecurityListingRef"`
}

// TravelDocumentSecurityListingRefStructure represents the TravelDocumentSecurityListingRefStructure element
// Type for Reference to a TRAVEL DOCUMENT SECURITY LISTING..
type TravelDocumentSecurityListingRefStructure struct {
	SecurityListingRefStructure
}

// TravelDocumentRef represents the TravelDocumentRef element
// Reference to a TRAVEL DOCUMENT.
type TravelDocumentRef struct {
	TravelDocumentRefStructure
}

// TravelDocumentSecurityListingRef represents the TravelDocumentSecurityListingRef element
// Reference to a TRAVEL DOCUMENT SECURITY LISTING..
type TravelDocumentSecurityListingRef struct {
	TravelDocumentSecurityListingRefStructure
}

// TravelDocumentsInFrameRelStructure represents the travelDocumentsInFrame_RelStructure element
// Type for containment in frame of TRAVEL DOCUMENT.
type TravelDocumentsInFrameRelStructure struct {
	FrameContainmentStructure
	TravelDocument []TravelDocument `xml:"TravelDocument" json:"TravelDocument"`
}

// TravelDocumentVersionStructure represents the TravelDocument_VersionStructure element
// Type for TRAVEL DOCUMENT.
type TravelDocumentVersionStructure struct {
	DataManagedObjectStructure
	// Name of TRAVEL DOCUMENT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of TRAVEL DOCUMENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	TypeOfTravelDocumentRef *TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	CustomerPurchasePackageRef *CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	// Usage status of the TRAVEL DOCUMENT+v1.1
	MarkedAs *MarkedAsEnumeration `xml:"MarkedAs,omitempty" json:"MarkedAs,omitempty"`
}

// TravelDocumentSecurityListingVersionedChildStructure represents the TravelDocumentSecurityListing_VersionedChildStructure element
// Type for TRAVEL DOCUMENT SECURITY LISTING.
type TravelDocumentSecurityListingVersionedChildStructure struct {
	SecurityListingVersionedChildStructure
	ServiceAccessCodeRef *ServiceAccessCodeRef `xml:"ServiceAccessCodeRef,omitempty" json:"ServiceAccessCodeRef,omitempty"`
	TravelDocumentRef *TravelDocumentRef `xml:"TravelDocumentRef,omitempty" json:"TravelDocumentRef,omitempty"`
}

// TravelDocument represents the TravelDocument element
// A particular physical support (ticket, card...) to be held by a customer, allowing the right to travel or to consume joint-services, to proof a payment (including possible discount rights), to store a subset of the FARE CONTRACT liabilities or a combination of those.
type TravelDocument struct {
	TravelDocumentVersionStructure
}

// TravelDocumentSecurityListing represents the TravelDocumentSecurityListing element
// A listing of a TRAVEL DOCUMENT on a SECURITY LIST.
type TravelDocumentSecurityListing struct {
	TravelDocumentSecurityListingVersionedChildStructure
}

// DrivingStyleEnumeration represents the DrivingStyleEnumeration enumeration
// Allowed values for DrivingStyle. +v1.2.2
type DrivingStyleEnumeration string

const (
	// DrivingStyleEnumerationSedate represents sedate
	DrivingStyleEnumerationSedate DrivingStyleEnumeration = "sedate"
	// DrivingStyleEnumerationModerate represents moderate
	DrivingStyleEnumerationModerate DrivingStyleEnumeration = "moderate"
	// DrivingStyleEnumerationFast represents fast
	DrivingStyleEnumerationFast DrivingStyleEnumeration = "fast"
	// DrivingStyleEnumerationOther represents other
	DrivingStyleEnumerationOther DrivingStyleEnumeration = "other"
)

// IndividualTravellerRefsRelStructure represents the individualTravellerRefs_RelStructure element
// Type for a list of INDIVIDUAL TRAVELLERs.
type IndividualTravellerRefsRelStructure struct {
	OneToManyRelationshipStructure
	IndividualTravellerRef IndividualTravellerRef `xml:"IndividualTravellerRef" json:"IndividualTravellerRef"`
}

// IndividualTravellerRefStructure represents the IndividualTravellerRefStructure element
// Type for a reference to a INDIVIDUAL TRAVELLER.
type IndividualTravellerRefStructure struct {
	VersionOfObjectRefStructure
}

// VehiclePoolingDriverInfoRefsRelStructure represents the vehiclePoolingDriverInfoRefs_RelStructure element
// Type for a list of VEHICLE POOLING DRIVER INFOs.
type VehiclePoolingDriverInfoRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehiclePoolingDriverInfoRef VehiclePoolingDriverInfoRef `xml:"VehiclePoolingDriverInfoRef" json:"VehiclePoolingDriverInfoRef"`
}

// VehiclePoolingDriverInfoRefStructure represents the VehiclePoolingDriverInfoRefStructure element
// Type for a reference to a VEHICLE POOLING DRIVER INFO.
type VehiclePoolingDriverInfoRefStructure struct {
	VersionOfObjectRefStructure
}

// IndividualPassengerInfoRefsRelStructure represents the IndividualPassengerInfoRefs_RelStructure element
// Type for a list of INDIVIDUAL PASSENGER  INFOs.
type IndividualPassengerInfoRefsRelStructure struct {
	OneToManyRelationshipStructure
	IndividualPassengerInfoRef IndividualPassengerInfoRef `xml:"IndividualPassengerInfoRef" json:"IndividualPassengerInfoRef"`
}

// IndividualPassengerInfoRefStructure represents the IndividualPassengerInfoRefStructure element
// Type for a reference to a INDIVIDUAL PASSENGER INFO.
type IndividualPassengerInfoRefStructure struct {
	VersionOfObjectRefStructure
}

// IndividualTravellerRef represents the IndividualTravellerRef element
// Reference to a INDIVIDUAL TRAVELLER. +v1.2.2
type IndividualTravellerRef struct {
	IndividualTravellerRefStructure
}

// VehiclePoolingDriverInfoRef represents the VehiclePoolingDriverInfoRef element
// Reference to a VEHICLE POOLING DRIVER INFO. +v1.2.2
type VehiclePoolingDriverInfoRef struct {
	VehiclePoolingDriverInfoRefStructure
}

// IndividualPassengerInfoRef represents the IndividualPassengerInfoRef element
// Reference to a INDIVIDUAL PASSENGER  INFO. +v1.2.2
type IndividualPassengerInfoRef struct {
	IndividualPassengerInfoRefStructure
}

// ServiceAccessCodeRefsRelStructure represents the serviceAccessCodeRefs_RelStructure element
// Type for a list of SERVICE ACCESS CODEs.
type ServiceAccessCodeRefsRelStructure struct {
	OneToManyRelationshipStructure
	ServiceAccessCodeRef ServiceAccessCodeRef `xml:"ServiceAccessCodeRef" json:"ServiceAccessCodeRef"`
}

// ServiceAccessCodeRefStructure represents the ServiceAccessCodeRefStructure element
// Type for a reference to a SERVICE ACCESS CODE.
type ServiceAccessCodeRefStructure struct {
	TravelDocumentRefStructure
}

// VehicleAccessCredentialsAssignmentRefsRelStructure represents the vehicleAccessCredentialsAssignmentRefs_RelStructure element
// Type for a list of VEHICLE ACCESS CREDENTIALS ASSIGNMENTs. +v1.2.2
type VehicleAccessCredentialsAssignmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehicleAccessCredentialsAssignmentRef VehicleAccessCredentialsAssignmentRef `xml:"VehicleAccessCredentialsAssignmentRef" json:"VehicleAccessCredentialsAssignmentRef"`
}

// VehicleAccessCredentialsAssignmentRefStructure represents the VehicleAccessCredentialsAssignmentRefStructure element
// Type for a reference to a VEHICLE ACCESS CREDENTIALS ASSIGNMENT. +v1.2.2
type VehicleAccessCredentialsAssignmentRefStructure struct {
	AssignmentRefStructure
}

// ServiceAccessCodeRef represents the ServiceAccessCodeRef element
// Reference to a SERVICE ACCESS CODE. +v1.2.2
type ServiceAccessCodeRef struct {
	ServiceAccessCodeRefStructure
}

// VehicleAccessCredentialsAssignmentRef represents the VehicleAccessCredentialsAssignmentRef element
// Reference to a VEHICLE ACCESS CREDENTIALS ASSIGNMENT. +v1.2.2
type VehicleAccessCredentialsAssignmentRef struct {
	VehicleAccessCredentialsAssignmentRefStructure
}

// ServiceAccessCodeVersionStructure represents the ServiceAccessCode_VersionStructure element
// Type for SERVICE ACCESS CODE restricts id.
type ServiceAccessCodeVersionStructure struct {
	TravelDocumentVersionStructure
	// ACCESS Code value
	AccessCode string `xml:"AccessCode" json:"AccessCode"`
	// Expiry timpestamp for code.
	ExpiryDate *time.Time `xml:"ExpiryDate,omitempty" json:"ExpiryDate,omitempty"`
	VehicleAccessCredentialsAssignmentRef *VehicleAccessCredentialsAssignmentRef `xml:"VehicleAccessCredentialsAssignmentRef,omitempty" json:"VehicleAccessCredentialsAssignmentRef,omitempty"`
}

// VehicleAccessCredentialAssignmentsRelStructure represents the vehicleAccessCredentialAssignments_RelStructure element
// Type for a list of references to a VEHICLE ACCESS CREDENTIALs ASSIGNMENT
type VehicleAccessCredentialAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	VehicleAccessCredentialsAssignment []VehicleAccessCredentialsAssignment `xml:"VehicleAccessCredentialsAssignment,omitempty" json:"VehicleAccessCredentialsAssignment,omitempty"`
}

// VehicleAccessCredentialsAssignmentVersionStructure represents the VehicleAccessCredentialsAssignment_VersionStructure element
// Type for VEHICLE ACCESS CREDENTIALs ASSIGNMENT restricts id.
type VehicleAccessCredentialsAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	VehicleRef *VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	MobileDeviceRef *MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef *EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef *SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	ServiceAccessCodeRef ServiceAccessCodeRef `xml:"ServiceAccessCodeRef" json:"ServiceAccessCodeRef"`
}

// ServiceAccessCode represents the ServiceAccessCode element
// Code to access a service, can be numerical code, barcode, flashcode, etc.
//  +V1.2.2
type ServiceAccessCode struct {
	ServiceAccessCodeVersionStructure
}

// VehicleAccessCredentialsAssignment represents the VehicleAccessCredentialsAssignment element
// The allocation of a MEDIUM ACCESS DEVICE to a specific VEHICLE, to allow the user (TRANSPORT CUSTOMER) to access the vehicle (tyically for VEHICLE SHARING or VEHICLE RENTAL). This allocation may have validity limitations. +V1.2.2
type VehicleAccessCredentialsAssignment struct {
	VehicleAccessCredentialsAssignmentVersionStructure
}

// TripPatternRefStructure represents the TripPatternRefStructure element
// Type for Reference to a TRIP PATTERN.
type TripPatternRefStructure struct {
	LinkSequenceRefStructure
}

// TripRefStructure represents the TripRefStructure element
// Type for Reference to a TRIP.
type TripRefStructure struct {
	LinkSequenceRefStructure
}

// TripLegRefStructure represents the TripLegRefStructure element
// Type for Reference to a TRIP LEG.
type TripLegRefStructure struct {
	VersionOfObjectRefStructure
}

// TripPatternTripRef represents the TripPatternTripRef element
// Reference to a TRIP PATTERN.
type TripPatternTripRef struct {
	TripPatternRefStructure
}

// TripRef represents the TripRef element
// Reference to a TRIP.
type TripRef struct {
	TripRefStructure
}

// TripLegRef represents the TripLegRef element
// Reference to a TRIP LEG.
type TripLegRef struct {
	TripLegRefStructure
}

// CustomerPurchasePackagesInFrameRelStructure represents the customerPurchasePackagesInFrame_RelStructure element
// Type for containment in frame of CUSTOMER PURCHASE PACKAGE.
type CustomerPurchasePackagesInFrameRelStructure struct {
	FrameContainmentStructure
	CustomerPurchasePackage []CustomerPurchasePackage `xml:"CustomerPurchasePackage" json:"CustomerPurchasePackage"`
}

// TravelSpecificationsInFrameRelStructure represents the travelSpecificationsInFrame_RelStructure element
// Type for containment in frame of SALES TRANSACTIONs.
type TravelSpecificationsInFrameRelStructure struct {
	FrameContainmentStructure
	TravelSpecification []TravelSpecification1 `xml:"TravelSpecification" json:"TravelSpecification"`
}

// TravelDocumentsRelStructure represents the travelDocuments_RelStructure element
// Type for containment in frame of TRAVEL DOCUMENT.
type TravelDocumentsRelStructure struct {
	FrameContainmentStructure
	ServiceAccessCodeRef []ServiceAccessCodeRef `xml:"ServiceAccessCodeRef,omitempty" json:"ServiceAccessCodeRef,omitempty"`
	TravelDocumentRef []TravelDocumentRef `xml:"TravelDocumentRef,omitempty" json:"TravelDocumentRef,omitempty"`
	TravelDocument []TravelDocument `xml:"TravelDocument,omitempty" json:"TravelDocument,omitempty"`
	ServiceAccessCode []ServiceAccessCode `xml:"ServiceAccessCode,omitempty" json:"ServiceAccessCode,omitempty"`
}

// TravelSpecificationsRelStructure represents the travelSpecifications_RelStructure element
// Type for a list of TRAVEL SPECIFICATIONs.
type TravelSpecificationsRelStructure struct {
	ContainmentAggregationStructure
	OfferedTravelSpecificationRef []OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	RequestedTravelSpecificationRef []RequestedTravelSpecificationRef `xml:"RequestedTravelSpecificationRef,omitempty" json:"RequestedTravelSpecificationRef,omitempty"`
	TravelSpecificationRef []TravelSpecificationRef `xml:"TravelSpecificationRef,omitempty" json:"TravelSpecificationRef,omitempty"`
	OfferedTravelSpecification []OfferedTravelSpecification `xml:"OfferedTravelSpecification,omitempty" json:"OfferedTravelSpecification,omitempty"`
	RequestedTravelSpecification []RequestedTravelSpecification `xml:"RequestedTravelSpecification,omitempty" json:"RequestedTravelSpecification,omitempty"`
	TravelSpecification []TravelSpecification1 `xml:"TravelSpecification,omitempty" json:"TravelSpecification,omitempty"`
	NetexOrgUkNetexTravelSpecification []TravelSpecification2 `xml:"TravelSpecification_,omitempty" json:"TravelSpecification_,omitempty"`
}

// TravelSpecificationVersionStructure represents the TravelSpecification_VersionStructure element
// Type for TRAVEL SPECIFICATION.
type TravelSpecificationVersionStructure struct {
	FareContractEntryVersionStructure
	SalesTransactionRef *SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	RepeatedTripFareRequestRef *RepeatedTripFareRequestRef `xml:"RepeatedTripFareRequestRef,omitempty" json:"RepeatedTripFareRequestRef,omitempty"`
	SingleTripFareRequestRef *SingleTripFareRequestRef `xml:"SingleTripFareRequestRef,omitempty" json:"SingleTripFareRequestRef,omitempty"`
	FareRequestRef *FareRequestRef `xml:"FareRequestRef,omitempty" json:"FareRequestRef,omitempty"`
	StopFinderRequestRef *StopFinderRequestRef `xml:"StopFinderRequestRef,omitempty" json:"StopFinderRequestRef,omitempty"`
	StopEventRequestRef *StopEventRequestRef `xml:"StopEventRequestRef,omitempty" json:"StopEventRequestRef,omitempty"`
	ScheduleRequestRef *ScheduleRequestRef `xml:"ScheduleRequestRef,omitempty" json:"ScheduleRequestRef,omitempty"`
	TripPlanRequestRef *TripPlanRequestRef `xml:"TripPlanRequestRef,omitempty" json:"TripPlanRequestRef,omitempty"`
	CustomerPurchasePackagePriceRef *CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	ParkingPriceRef *ParkingPriceRef `xml:"ParkingPriceRef,omitempty" json:"ParkingPriceRef,omitempty"`
	TimeIntervalPriceRef *TimeIntervalPriceRef `xml:"TimeIntervalPriceRef,omitempty" json:"TimeIntervalPriceRef,omitempty"`
	TimeUnitPriceRef *TimeUnitPriceRef `xml:"TimeUnitPriceRef,omitempty" json:"TimeUnitPriceRef,omitempty"`
	QualityStructureFactorPriceRef *QualityStructureFactorPriceRef `xml:"QualityStructureFactorPriceRef,omitempty" json:"QualityStructureFactorPriceRef,omitempty"`
	ControllableElementPriceRef *ControllableElementPriceRef `xml:"ControllableElementPriceRef,omitempty" json:"ControllableElementPriceRef,omitempty"`
	ValidableElementPriceRef *ValidableElementPriceRef `xml:"ValidableElementPriceRef,omitempty" json:"ValidableElementPriceRef,omitempty"`
	GeographicalIntervalPriceRef *GeographicalIntervalPriceRef `xml:"GeographicalIntervalPriceRef,omitempty" json:"GeographicalIntervalPriceRef,omitempty"`
	GeographicalUnitPriceRef *GeographicalUnitPriceRef `xml:"GeographicalUnitPriceRef,omitempty" json:"GeographicalUnitPriceRef,omitempty"`
	UsageParameterPriceRef *UsageParameterPriceRef `xml:"UsageParameterPriceRef,omitempty" json:"UsageParameterPriceRef,omitempty"`
	SeriesConstraintPriceRef *SeriesConstraintPriceRef `xml:"SeriesConstraintPriceRef,omitempty" json:"SeriesConstraintPriceRef,omitempty"`
	SalesOfferPackagePriceRef *SalesOfferPackagePriceRef `xml:"SalesOfferPackagePriceRef,omitempty" json:"SalesOfferPackagePriceRef,omitempty"`
	DistanceMatrixElementPriceRef *DistanceMatrixElementPriceRef `xml:"DistanceMatrixElementPriceRef,omitempty" json:"DistanceMatrixElementPriceRef,omitempty"`
	FareStructureElementPriceRef *FareStructureElementPriceRef `xml:"FareStructureElementPriceRef,omitempty" json:"FareStructureElementPriceRef,omitempty"`
	FulfilmentMethodPriceRef *FulfilmentMethodPriceRef `xml:"FulfilmentMethodPriceRef,omitempty" json:"FulfilmentMethodPriceRef,omitempty"`
	CappingRulePriceRef *CappingRulePriceRef `xml:"CappingRulePriceRef,omitempty" json:"CappingRulePriceRef,omitempty"`
	FareProductPriceRef *FareProductPriceRef `xml:"FareProductPriceRef,omitempty" json:"FareProductPriceRef,omitempty"`
	FarePriceRef *FarePriceRef `xml:"FarePriceRef,omitempty" json:"FarePriceRef,omitempty"`
	CellRef *CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
	// PRICE amount. in specified currency.
	Amount *float64 `xml:"Amount,omitempty" json:"Amount,omitempty"`
	// Currency of Price ISO 4217.
	Currency *string `xml:"Currency,omitempty" json:"Currency,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// Other units for PRICE (If not in a currency).
	Units *float64 `xml:"Units,omitempty" json:"Units,omitempty"`
	// Interim amounts for any pricing rules  applied to derive price , for example VAT amount  charged.  +v1.1
	RuleStepResults *PriceRuleStepResultsRelStructure `xml:"ruleStepResults,omitempty" json:"ruleStepResults,omitempty"`
	// Method of payment used,
	PaymentMethod *PaymentMethodEnumeration `xml:"PaymentMethod,omitempty" json:"PaymentMethod,omitempty"`
	TypeOfPaymentMethodRef *TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	// Start Validity of Purchased PRODUCT.
	StartOfValidity *time.Time `xml:"StartOfValidity,omitempty" json:"StartOfValidity,omitempty"`
	// End Validity of Purchased PRODUCT.
	EndOfValidity *time.Time `xml:"EndOfValidity,omitempty" json:"EndOfValidity,omitempty"`
	// Summary of key aspects of TRAVEL SPECIFICATION. +V1.1. This data should all be derivable from the detailed parameter assignments of the v+1.1
	TravelSpecificationSummaryView *TravelSpecificationSummaryView `xml:"TravelSpecificationSummaryView,omitempty" json:"TravelSpecificationSummaryView,omitempty"`
	// SPECIFIC PARAMETER ASSIGNMENTS for  TRAVEL SPECIFICATION.
	SpecificParameterAssignments *SpecificParameterAssignmentsRelStructure `xml:"specificParameterAssignments,omitempty" json:"specificParameterAssignments,omitempty"`
	// NOTICE  ASSIGNMENTS  applying to TRAVEL SPECIFICATION.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// RequestedTravelSpecificationVersionStructure represents the RequestedTravelSpecification_VersionStructure element
// Type for REQUESTED TRAVEL SPECIFICATION.
type RequestedTravelSpecificationVersionStructure struct {
	TravelSpecificationVersionStructure
}

// OfferedTravelSpecificationsRelStructure represents the offeredTravelSpecifications_RelStructure element
// Type for a list of TRAVEL SPECIFICATIONs.
type OfferedTravelSpecificationsRelStructure struct {
	ContainmentAggregationStructure
	OfferedTravelSpecificationRef []OfferedTravelSpecificationRef `xml:"OfferedTravelSpecificationRef,omitempty" json:"OfferedTravelSpecificationRef,omitempty"`
	OfferedTravelSpecification []OfferedTravelSpecification `xml:"OfferedTravelSpecification,omitempty" json:"OfferedTravelSpecification,omitempty"`
}

// OfferedTravelSpecificationVersionStructure represents the OfferedTravelSpecification_VersionStructure element
// Type for OFFERED TRAVEL SPECIFICATION.
type OfferedTravelSpecificationVersionStructure struct {
	TravelSpecificationVersionStructure
}

// SpecificParameterAssignmentsRelStructure represents the specificParameterAssignments_RelStructure element
// Type for a list of SPECIFIC ACCESS RIGHT PARAMETERs.
type SpecificParameterAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	SpecificParameterAssignment []SpecificParameterAssignment `xml:"SpecificParameterAssignment" json:"SpecificParameterAssignment"`
}

// SpecificParameterAssignmentVersionStructure represents the SpecificParameterAssignment_VersionStructure element
// Type for SPECIFIC PARAMETER ASSIGNMENT.
type SpecificParameterAssignmentVersionStructure struct {
	ValidityParameterAssignmentVersionStructure
	// Access number of this specific instance.
	AccessNumber *int `xml:"AccessNumber,omitempty" json:"AccessNumber,omitempty"`
	// Operator for Grouping Scope Elements. Default is OR.
	IncludesGroupingType *LogicalOperationEnumeration `xml:"IncludesGroupingType,omitempty" json:"IncludesGroupingType,omitempty"`
	// Assignments Logically  included in this group. Groups are combined acording to the Operator.
	Includes *SpecificParameterAssignmentsRelStructure `xml:"includes,omitempty" json:"includes,omitempty"`
	DistributionAssignmentRef *DistributionAssignmentRef `xml:"DistributionAssignmentRef,omitempty" json:"DistributionAssignmentRef,omitempty"`
	// Organizatio that sold product. instance.
	RetailingOrganizationRef *OrganisationRefStructure `xml:"RetailingOrganizationRef,omitempty" json:"RetailingOrganizationRef,omitempty"`
	// Point at which to collect  travel document.
	CollectionPointRef *PointRefStructure `xml:"CollectionPointRef,omitempty" json:"CollectionPointRef,omitempty"`
}

// CustomerPurchasePackagesRelStructure represents the customerPurchasePackages_RelStructure element
// Type for containment in frame of CUSTOMER PURCHASE PACKAGE.
type CustomerPurchasePackagesRelStructure struct {
	OneToManyRelationshipStructure
	CustomerPurchasePackage []CustomerPurchasePackage `xml:"CustomerPurchasePackage,omitempty" json:"CustomerPurchasePackage,omitempty"`
	CustomerPurchasePackageRef []CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
}

// CustomerPurchasePackageVersionStructure represents the CustomerPurchasePackage_VersionStructure element
// Type for CUSTOMER PURCHASE PACKAGE.
type CustomerPurchasePackageVersionStructure struct {
	PriceableObjectVersionStructure
	PrivateCode *PrivateCode `xml:"PrivateCode,omitempty" json:"PrivateCode,omitempty"`
	SalesOfferPackageRef *SalesOfferPackageRef `xml:"SalesOfferPackageRef,omitempty" json:"SalesOfferPackageRef,omitempty"`
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	CustomerAccountRef *CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	FareContractRef *FareContractRef `xml:"FareContractRef,omitempty" json:"FareContractRef,omitempty"`
	// Status of CUSTOMER PURCHASE PACKAGE +v1.1
	CustomerPurchasePackageStatus *CustomerPurchasePackageStatusEnumeration `xml:"CustomerPurchasePackageStatus,omitempty" json:"CustomerPurchasePackageStatus,omitempty"`
	TravelSpecificationSummaryView *TravelSpecificationSummaryView `xml:"TravelSpecificationSummaryView,omitempty" json:"TravelSpecificationSummaryView,omitempty"`
	// TRAVEL SPEECIFICATIONs for FARE CONTRACT.
	TravelSpecifications *TravelSpecificationsRelStructure `xml:"travelSpecifications,omitempty" json:"travelSpecifications,omitempty"`
	// PARAMETER ASSIGNMENTs applying to whole CUSTOMER PURCHASE PACKAGE.
	ValidityParameterAssignments *CustomerPurchaseParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	// DiISTRIBUTION ASSIGNMENTS for  CUSTOMER PURCHASE PACKAGE.
	DistributionAssignments *DistributionAssignmentsRelStructure `xml:"distributionAssignments,omitempty" json:"distributionAssignments,omitempty"`
	// CUSTOMER PURCHASE PACKAGE ELEMENTs in CUSTOMER PURCHASE PACKAGE.
	CustomerPurchasePackageElements *CustomerPurchasePackageElementsRelStructure `xml:"customerPurchasePackageElements,omitempty" json:"customerPurchasePackageElements,omitempty"`
	SalesTransactionRef *SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	// SALES TRANSACTIONs for CUSTOMER PURCHASE PACKAGE.
	SalesTransactions *SalesTransactionRefsRelStructure `xml:"salesTransactions,omitempty" json:"salesTransactions,omitempty"`
	// PRICEs of CUSTOMER PURCHASE PACKAGE ELEMENT.
	Prices *CustomerPurchasePackagePricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
	// TRAVEL DOCUMENTs associated with package
	TravelDocuments *TravelDocumentsRelStructure `xml:"travelDocuments,omitempty" json:"travelDocuments,omitempty"`
	MobileDeviceRef *MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef *EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef *SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	MediumApplicationInstanceRef *MediumApplicationInstanceRef `xml:"MediumApplicationInstanceRef,omitempty" json:"MediumApplicationInstanceRef,omitempty"`
}

// CustomerPurchasePackageElementsRelStructure represents the customerPurchasePackageElements_RelStructure element
// Type for a list of CUSTOMER PURCHASE PACKAGE ELEMENTs.
type CustomerPurchasePackageElementsRelStructure struct {
	ContainmentAggregationStructure
	CustomerPurchasePackageElement []CustomerPurchasePackageElement `xml:"CustomerPurchasePackageElement" json:"CustomerPurchasePackageElement"`
}

// CustomerPurchasePackageElementVersionStructure represents the CustomerPurchasePackageElement_VersionStructure element
// Type for CUSTOMER PURCHASE PACKAGE ELEMENT.
type CustomerPurchasePackageElementVersionStructure struct {
	PriceableObjectVersionStructure
	CustomerPurchasePackageRef *CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	SalesOfferPackageElementRef *SalesOfferPackageElementRef `xml:"SalesOfferPackageElementRef,omitempty" json:"SalesOfferPackageElementRef,omitempty"`
	// Usage status of the element. +v1.1
	MarkedAs *MarkedAsEnumeration `xml:"MarkedAs,omitempty" json:"MarkedAs,omitempty"`
	// Whether the element has been blocked+v1.1
	Blocked *bool `xml:"Blocked,omitempty" json:"Blocked,omitempty"`
	// VALIDABLE ELEMENTs for  CUSTOMER PURCHASE PACKAGE.
	ElementAccesses *CustomerPurchasePackageElementAccessesRelStructure `xml:"elementAccesses,omitempty" json:"elementAccesses,omitempty"`
	// VALIDITY PARAMETER ASSIGNMENTs applying to CUSTOMER PURCHASE PACKAGE ELEMENT..
	ValidityParameterAssignments *CustomerPurchaseParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
	// PRICEs of CUSTOMER PURCHASE PACKAGE ELEMENT.
	Prices *CustomerPurchasePackagePricesRelStructure `xml:"prices,omitempty" json:"prices,omitempty"`
	// Relative order of element.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// CustomerPurchasePackageElementAccessesRelStructure represents the customerPurchasePackageElementAccesses_RelStructure element
// Type for a list of CUSTOMER PURCHASE PACKAGE ELEMENT ACCESS..
type CustomerPurchasePackageElementAccessesRelStructure struct {
	StrictContainmentAggregationStructure
	CustomerPurchasePackageElementAccess []CustomerPurchasePackageElementAccess `xml:"CustomerPurchasePackageElementAccess" json:"CustomerPurchasePackageElementAccess"`
}

// CustomerPurchasePackageElementAccessVersionedChildStructure represents the CustomerPurchasePackageElementAccess_VersionedChildStructure element
// Type for a CUSTOMER PURCHASE PACKAGE ELEMENT ACCESS.  +v1.1
type CustomerPurchasePackageElementAccessVersionedChildStructure struct {
	VersionedChildStructure
	CustomerPurchasePackageElementRef *CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
	ValidableElementRef *ValidableElementRef `xml:"ValidableElementRef,omitempty" json:"ValidableElementRef,omitempty"`
	FareStructureElementRef *FareStructureElementRef `xml:"FareStructureElementRef,omitempty" json:"FareStructureElementRef,omitempty"`
	FareStructureElementInSequenceRef *FareStructureElementInSequenceRef `xml:"FareStructureElementInSequenceRef,omitempty" json:"FareStructureElementInSequenceRef,omitempty"`
	// Whether the element has been used
	MarkedAs *MarkedAsEnumeration `xml:"MarkedAs,omitempty" json:"MarkedAs,omitempty"`
	// Access number of instance +V1.2.2.
	AccessNumber *int `xml:"AccessNumber,omitempty" json:"AccessNumber,omitempty"`
	// PARAMETER ASSIGNMENTs applying to  CUSTOMER PURCHASE PACKAGE ELEMENT ACCESS.
	ValidityParameterAssignments *CustomerPurchaseParameterAssignmentsRelStructure `xml:"validityParameterAssignments,omitempty" json:"validityParameterAssignments,omitempty"`
}

// CustomerPurchasePackagePricesRelStructure represents the customerPurchasePackagePrices_RelStructure element
// Type for a list of CUSTOMER PURCHASE PACKAGE PRICEs.
type CustomerPurchasePackagePricesRelStructure struct {
	StrictContainmentAggregationStructure
	CustomerPurchasePackagePriceRef []CustomerPurchasePackagePriceRef `xml:"CustomerPurchasePackagePriceRef,omitempty" json:"CustomerPurchasePackagePriceRef,omitempty"`
	// A set of all possible price features of a CUSTOMER PURCHASE PACKAGE ELEMENT: default total price, discount in value or percentage etc.
	CustomerPurchasePackagePrice []CustomerPurchasePackagePriceVersionedChildStructure `xml:"CustomerPurchasePackagePrice,omitempty" json:"CustomerPurchasePackagePrice,omitempty"`
	CellRef []CellRef `xml:"CellRef,omitempty" json:"CellRef,omitempty"`
}

// CustomerPurchasePackagePriceVersionedChildStructure represents the CustomerPurchasePackagePrice_VersionedChildStructure element
// Type for a CUSTOMER PURCHASE PACKAGE PRICEs.
type CustomerPurchasePackagePriceVersionedChildStructure struct {
	FarePriceVersionedChildStructure
	CustomerPurchasePackageRef *CustomerPurchasePackageRef `xml:"CustomerPurchasePackageRef,omitempty" json:"CustomerPurchasePackageRef,omitempty"`
	CustomerPurchasePackageElementRef *CustomerPurchasePackageElementRef `xml:"CustomerPurchasePackageElementRef,omitempty" json:"CustomerPurchasePackageElementRef,omitempty"`
}

// CustomerPurchaseParameterAssignmentsRelStructure represents the customerPurchaseParameterAssignments_RelStructure element
// Type for a list of CUSTOMER PURCHASE PARAMETER ASSIGNMENT.
type CustomerPurchaseParameterAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	// A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters for a CUSTOMER PURCHASE PACKAGE, chosen from those available for a given fare structure (e.g. the origin or destination zone in a zone-counting system).
	CustomerPurchaseParameterAssignment []CustomerPurchaseParameterAssignment `xml:"CustomerPurchaseParameterAssignment" json:"CustomerPurchaseParameterAssignment"`
}

// CustomerPurchaseParameterAssignmentVersionStructure represents the CustomerPurchaseParameterAssignment_VersionStructure element
// Type for CustomerPurchase PARAMETER ASSIGNMENT.
type CustomerPurchaseParameterAssignmentVersionStructure struct {
	ValidityParameterAssignmentVersionStructure
	IndividualTravellerRef *IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	VehiclePoolingDriverInfoRef *VehiclePoolingDriverInfoRef `xml:"VehiclePoolingDriverInfoRef,omitempty" json:"VehiclePoolingDriverInfoRef,omitempty"`
	TripRef *TripRef `xml:"TripRef,omitempty" json:"TripRef,omitempty"`
	TripLegRef *TripLegRef `xml:"TripLegRef,omitempty" json:"TripLegRef,omitempty"`
}

// RequestedTravelSpecification represents the RequestedTravelSpecification element
// The recording of a specification by a customer of parameters giving details of an intended consumption (e.g. origin and destination of a travel).
type RequestedTravelSpecification struct {
	RequestedTravelSpecificationVersionStructure
}

// OfferedTravelSpecification represents the OfferedTravelSpecification element
// A set of parameters giving details of the intended  consumption of access rights associated with an offer or a purchase. (e.g. origin and destination of a travel, class of travel, etc.).
// .
type OfferedTravelSpecification struct {
	OfferedTravelSpecificationVersionStructure
}

// SpecificParameterAssignment represents the SpecificParameterAssignment element
// A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters during a TRAVEL SPECIFICATION, within a given fare structure (e.g. the origin or destination zone in a zone-counting system).
type SpecificParameterAssignment struct {
	SpecificParameterAssignmentVersionStructure
}

// CustomerPurchasePackage represents the CustomerPurchasePackage element
// A purchase of a SALES OFFER PACKAGE by a CUSTOMER, giving access rights to one or several FARE PRODUCTs materialised as one or several TRAVEL DOCUMENTs.
type CustomerPurchasePackage struct {
	CustomerPurchasePackageVersionStructure
}

// CustomerPurchasePackageElement represents the CustomerPurchasePackageElement element
// The assignment of a  SALES OFFER PACKAGE ELEMENT, for use in a CUSTOMER SALES PACKAGE.
type CustomerPurchasePackageElement struct {
	CustomerPurchasePackageElementVersionStructure
}

// CustomerPurchasePackageElementAccess represents the CustomerPurchasePackageElementAccess element
// Access to a VALIDABLE ELEMENT by a specific CUSTOMER PURCHASE PACKAGE  through use of CUSTOMER PURCHASE PACKAGE. This is needed for validation of complex SALES OFFER PACKAGEs containing tariffs structures that have FARE STRUCTURE ELEMENTs IN SEQUENCE, in such a case a given SALES PACKAGE ELEMENT may have multiple VALIDABLE ELEMENTs associated with it, each of which can be separately validated and marked. +v1.1
type CustomerPurchasePackageElementAccess struct {
	CustomerPurchasePackageElementAccessVersionedChildStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// CustomerPurchasePackagePrice represents the CustomerPurchasePackagePrice element
// A set of all possible price features of a CUSTOMER PURCHASE PACKAGE ELEMENT: default total price, discount in value or percentage etc.
type CustomerPurchasePackagePrice struct {
	CustomerPurchasePackagePriceVersionedChildStructure
}

// CustomerPurchaseParameterAssignment represents the CustomerPurchaseParameterAssignment element
// A VALIDITY PARAMETER ASSIGNMENT specifying practical parameters for use in a  CUSTOMER PURCHASE PACKAGE.
type CustomerPurchaseParameterAssignment struct {
	CustomerPurchaseParameterAssignmentVersionStructure
}

// SalesTransactionsInFrameRelStructure represents the salesTransactionsInFrame_RelStructure element
// Type for containment in frame of SALES TRANSACTIONs.
type SalesTransactionsInFrameRelStructure struct {
	FrameContainmentStructure
	SalesTransaction []SalesTransaction `xml:"SalesTransaction" json:"SalesTransaction"`
}

// SalesTransactionsRelStructure represents the salesTransactions_RelStructure element
// Type for a list of SALES TRANSACTIONs.
type SalesTransactionsRelStructure struct {
	ContainmentAggregationStructure
	SalesTransactionRef []SalesTransactionRef `xml:"SalesTransactionRef,omitempty" json:"SalesTransactionRef,omitempty"`
	SalesTransaction []SalesTransaction `xml:"SalesTransaction,omitempty" json:"SalesTransaction,omitempty"`
}

// SalesTransactionVersionStructure represents the SalesTransaction_VersionStructure element
// Type for SALES TRANSACTION.
type SalesTransactionVersionStructure struct {
	FareContractEntryVersionStructure
	// PRICE amount. in specified currency.
	Amount *float64 `xml:"Amount,omitempty" json:"Amount,omitempty"`
	// Currency of Price ISO 4217.
	Currency *string `xml:"Currency,omitempty" json:"Currency,omitempty"`
	PriceUnitRef *PriceUnitRef `xml:"PriceUnitRef,omitempty" json:"PriceUnitRef,omitempty"`
	// Other units for PRICE (If not in a currency).
	Units *float64 `xml:"Units,omitempty" json:"Units,omitempty"`
	// Interim amounts for any pricing rules  applied to derive price , for example VAT amount  charged.  +v1.1
	RuleStepResults *PriceRuleStepResultsRelStructure `xml:"ruleStepResults,omitempty" json:"ruleStepResults,omitempty"`
	// Method of payment used,
	PaymentMethod *PaymentMethodEnumeration `xml:"PaymentMethod,omitempty" json:"PaymentMethod,omitempty"`
	TypeOfPaymentMethodRef *TypeOfPaymentMethodRef `xml:"TypeOfPaymentMethodRef,omitempty" json:"TypeOfPaymentMethodRef,omitempty"`
	// Card number used,
	CardNumber *PrivateCodeStructure `xml:"CardNumber,omitempty" json:"CardNumber,omitempty"`
	// Travel Specifcations bought  by Salles Transaction
	TravelSpecifications *TravelSpecificationsRelStructure `xml:"travelSpecifications,omitempty" json:"travelSpecifications,omitempty"`
	// Customer Pucrhase PAckages ought by Salles Transaction
	CustomerPurchasePackages *CustomerPurchasePackagesRelStructure `xml:"customerPurchasePackages,omitempty" json:"customerPurchasePackages,omitempty"`
	// TRAVEL DOCUMENTS materialising SALES TRANSACTION.
	TravelDocuments *TravelDocumentsRelStructure `xml:"travelDocuments,omitempty" json:"travelDocuments,omitempty"`
	// Point at which to be collected.
	CollectionPointRef *PointVersionStructure `xml:"CollectionPointRef,omitempty" json:"CollectionPointRef,omitempty"`
	// Note on how to collect.
	CollectionNote *MultilingualString `xml:"CollectionNote,omitempty" json:"CollectionNote,omitempty"`
	OrganisationalUnitRef *OrganisationalUnitRef `xml:"OrganisationalUnitRef,omitempty" json:"OrganisationalUnitRef,omitempty"`
	RetailDeviceRef *RetailDeviceRef `xml:"RetailDeviceRef,omitempty" json:"RetailDeviceRef,omitempty"`
}

// SalesTransaction represents the SalesTransaction element
// A SALE OF a FIXED PACKAGE or a SALE OF a RELOADABLE PACKAGE.
type SalesTransaction struct {
	SalesTransactionVersionStructure
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// MediumAccessDevicesInFrameRelStructure represents the mediumAccessDevicesInFrame_RelStructure element
// Type for containment in frame of CUSTOMER PURCHASE PACKAGE.
type MediumAccessDevicesInFrameRelStructure struct {
	FrameContainmentStructure
	EmvCard []EmvCard `xml:"EmvCard,omitempty" json:"EmvCard,omitempty"`
	Smartcard []Smartcard `xml:"Smartcard,omitempty" json:"Smartcard,omitempty"`
	MobileDevice []MobileDevice `xml:"MobileDevice,omitempty" json:"MobileDevice,omitempty"`
}

// MediumAccessDeviceVersionStructure represents the MediumAccessDevice_VersionStructure element
// Type for MEDIUM ACCESS DEVICE restricts id.
type MediumAccessDeviceVersionStructure struct {
	DataManagedObjectStructure
	// Name for device
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	// Secure token used to identify MEDIUM ACCESS DEVICE.
	IdentityToken *string `xml:"IdentityToken,omitempty" json:"IdentityToken,omitempty"`
	TypeOfMediumAccessDeviceRef *TypeOfMediumAccessDeviceRef `xml:"TypeOfMediumAccessDeviceRef,omitempty" json:"TypeOfMediumAccessDeviceRef,omitempty"`
	// MEDIUM APPLICATION INSTANCES for device.
	ApplicationInstances *MediumApplicationInstanceRelStructure `xml:"applicationInstances,omitempty" json:"applicationInstances,omitempty"`
}

// MobileDeviceVersionStructure represents the MobileDevice_VersionStructure element
// Type for MOBILE DEVICE restricts id.
type MobileDeviceVersionStructure struct {
	MediumAccessDeviceVersionStructure
}

// EmvCardVersionStructure represents the EmvCard_VersionStructure element
// Type for EMV CARD restricts id.
type EmvCardVersionStructure struct {
	MediumAccessDeviceVersionStructure
}

// SmartcardVersionStructure represents the Smartcard_VersionStructure element
// Type for SMARTCARD restricts id.
type SmartcardVersionStructure struct {
	MediumAccessDeviceVersionStructure
}

// MediumApplicationInstanceRelStructure represents the mediumApplicationInstance_RelStructure element
// Type for a list of a MEDIUM APPLICATION INSTANCEs in Sequence
type MediumApplicationInstanceRelStructure struct {
	ContainmentAggregationStructure
	// A component (mobile phone, smart card, etc) with the necessary facilities (hardware and software) to host a MEDIUM APPLICATION INSTANCE and communicate with a control device.
	//  +v1.2.2
	MediumApplicationInstance []MediumApplicationInstance `xml:"MediumApplicationInstance" json:"MediumApplicationInstance"`
}

// MediumApplicationInstanceVersionedChildStructure represents the MediumApplicationInstance_VersionedChildStructure element
// Type for MEDIUM APPLICATION INSTANCE restricts id.
type MediumApplicationInstanceVersionedChildStructure struct {
	VersionedChildStructure
	// Name for application instance.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Secure token used to identify MEDIUM APPLICATION INSTANCE DEVICE.
	IdentityToken *string `xml:"IdentityToken,omitempty" json:"IdentityToken,omitempty"`
	MobileDeviceRef *MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef *EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef *SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
	CustomerAccountRef *CustomerAccountRef `xml:"CustomerAccountRef,omitempty" json:"CustomerAccountRef,omitempty"`
	TypeOfTravelDocumentRef *TypeOfTravelDocumentRef `xml:"TypeOfTravelDocumentRef,omitempty" json:"TypeOfTravelDocumentRef,omitempty"`
	ServiceAccessCodeRef *ServiceAccessCodeRef `xml:"ServiceAccessCodeRef,omitempty" json:"ServiceAccessCodeRef,omitempty"`
	TravelDocumentRef *TravelDocumentRef `xml:"TravelDocumentRef,omitempty" json:"TravelDocumentRef,omitempty"`
}

// MediumAccessDeviceSecurityListingVersionedChildStructure represents the MediumAccessDeviceSecurityListing_VersionedChildStructure element
// Type for MEDIUM ACCESS DEVICE SECURITY LISTING.
type MediumAccessDeviceSecurityListingVersionedChildStructure struct {
	SecurityListingVersionedChildStructure
	MobileDeviceRef *MobileDeviceRef `xml:"MobileDeviceRef,omitempty" json:"MobileDeviceRef,omitempty"`
	EmvCardRef *EmvCardRef `xml:"EmvCardRef,omitempty" json:"EmvCardRef,omitempty"`
	SmartcardRef *SmartcardRef `xml:"SmartcardRef,omitempty" json:"SmartcardRef,omitempty"`
}

// TypeOfMediumAccessDeviceValueStructure represents the TypeOfMediumAccessDevice_ValueStructure element
// Type for a TYPE OF MEDIUM ACCESS DEVICE.
type TypeOfMediumAccessDeviceValueStructure struct {
	TypeOfValueVersionStructure
	TypeOfMachineReadabilityRef *TypeOfMachineReadabilityRef `xml:"TypeOfMachineReadabilityRef,omitempty" json:"TypeOfMachineReadabilityRef,omitempty"`
}

// MediumAccessDevice represents the MediumAccessDevice element
// A component (mobile phone, smart card, etc) with the necessary facilities (hardware and software) to host a MEDIUM APPLICATION INSTANCE and communicate with a control device. +v1.2.2.
type MediumAccessDevice struct {
	MediumAccessDeviceVersionStructure
}

// MobileDevice represents the MobileDevice element
// A mobile device (mobile phone, tablet, etc) with the necessary facilities (hardware and software) to host a MEDIUM APPLICATION INSTANCE and communicate with a control device.
//   +v1.2.2
type MobileDevice struct {
	MobileDeviceVersionStructure
}

// EmvCard represents the EmvCard element
// A standardised payment card (Europay MasterCard Visa etc) , capable of being used as token for an ABT system +v1.2.2
type EmvCard struct {
	EmvCardVersionStructure
}

// Smartcard represents the Smartcard element
// A  smart card with the necessary facilities (hardware and software) are) to host a  MEDIUM APPLICATION INSTANCE and communicate with a control device. +v1.2.2
type Smartcard struct {
	SmartcardVersionStructure
}

// MediumApplicationInstance represents the MediumApplicationInstance element
// Initialized instance of a software  application that runs on a MEDIUM ACCESS DEVICE. +v1.2.2
type MediumApplicationInstance struct {
	MediumApplicationInstanceVersionedChildStructure
}

// MediumAccessDeviceSecurityListing represents the MediumAccessDeviceSecurityListing element
// A listing of a MEDIUM ACCESS DEVICE on a SECURITY LIST. +v1.2.2
type MediumAccessDeviceSecurityListing struct {
	MediumAccessDeviceSecurityListingVersionedChildStructure
}

// TypeOfMediumAccessDevice represents the TypeOfMediumAccessDevice element
// A classification for a TYPE OF MEDIUM ACCESS DEVICE.  +v1.2.2
type TypeOfMediumAccessDevice struct {
	TypeOfMediumAccessDeviceValueStructure
}

// SalesTransactionFrameRefStructure represents the SalesTransactionFrameRefStructure element
// Type for a reference to a SALES TRANSACTION FRAME.
type SalesTransactionFrameRefStructure struct {
	VersionFrameRefStructure
}

// SalesTransactionFrameVersionFrameStructure represents the SalesTransactionFrame_VersionFrameStructure element
// Type for a SALES TRANSACTION FRAME.
type SalesTransactionFrameVersionFrameStructure struct {
	CommonVersionFrameStructure
	// CUSTOMERs in FRAME.
	RetailConsortiums *RetailConsortiumsInFrameRelStructure `xml:"retailConsortiums,omitempty" json:"retailConsortiums,omitempty"`
	// RETAIL CONSORTIUMS in FRAME.
	RetailDevices *RetailDevicesInFrameRelStructure `xml:"retailDevices,omitempty" json:"retailDevices,omitempty"`
	// CUSTOMERs in FRAME.
	Customers *CustomersInFrameRelStructure `xml:"customers,omitempty" json:"customers,omitempty"`
	// CUSTOMER ACCOUNTs  in FRAME.
	CustomerAccounts *CustomerAccountsInFrameRelStructure `xml:"customerAccounts,omitempty" json:"customerAccounts,omitempty"`
	// FARE CONTRACTs  in FRAME.
	FareContracts *FareContractsInFrameRelStructure `xml:"fareContracts,omitempty" json:"fareContracts,omitempty"`
	// MEDIUM ACCESS DEVICES s in FRAME.
	MediumAccessDevices *MediumAccessDevicesInFrameRelStructure `xml:"mediumAccessDevices,omitempty" json:"mediumAccessDevices,omitempty"`
	// BLACK LISTs in FRAME.
	Blacklists *BlacklistsInFrameRelStructure `xml:"blacklists,omitempty" json:"blacklists,omitempty"`
	// WHITE LISTs in FRAME.
	Whitelists *WhitelistsInFrameRelStructure `xml:"whitelists,omitempty" json:"whitelists,omitempty"`
	// SALES TRANSACTIONs in FRAME.
	TravelSpecifications *TravelSpecificationsInFrameRelStructure `xml:"travelSpecifications,omitempty" json:"travelSpecifications,omitempty"`
	// SALES TRANSACTIONs in FRAME.
	SalesTransactions *SalesTransactionsInFrameRelStructure `xml:"salesTransactions,omitempty" json:"salesTransactions,omitempty"`
	// TYPE OF TRAVEL DOCUMENTs in FRAME.
	TypesOfTravelDocuments *TypesOfTravelDocumentInFrameRelStructure `xml:"typesOfTravelDocuments,omitempty" json:"typesOfTravelDocuments,omitempty"`
	// TRAVEL DOCUMENTs in FRAME.
	TravelDocuments *TravelDocumentsInFrameRelStructure `xml:"travelDocuments,omitempty" json:"travelDocuments,omitempty"`
	// CUSTOMER PURCHASE PACKAGEs in FRAME.
	CustomerPurchasePackages *CustomerPurchasePackagesInFrameRelStructure `xml:"customerPurchasePackages,omitempty" json:"customerPurchasePackages,omitempty"`
}

// SalesTransactionFrameRef represents the SalesTransactionFrameRef element
// Reference to a SALES TRANSACTION FRAME.
type SalesTransactionFrameRef struct {
	SalesTransactionFrameRefStructure
}

// SalesTransactionFrame represents the SalesTransactionFrame element
// A coherent set of Vehicle Scheduling data to which the same VALIDITY CONDITIONs have been assigned.
type SalesTransactionFrame struct {
	SalesTransactionFrameVersionFrameStructure
}

// MobilityServicesRelStructure represents the mobilityServices_RelStructure element
// Type for a list of MOBILITY SERVICEs.
type MobilityServicesRelStructure struct {
	ContainmentAggregationStructure
	OnlineService []OnlineService `xml:"OnlineService,omitempty" json:"OnlineService,omitempty"`
	VehicleRentalService []VehicleRentalService `xml:"VehicleRentalService,omitempty" json:"VehicleRentalService,omitempty"`
	VehicleSharingService []VehicleSharingService `xml:"VehicleSharingService,omitempty" json:"VehicleSharingService,omitempty"`
	ChauffeuredVehicleService []ChauffeuredVehicleService `xml:"ChauffeuredVehicleService,omitempty" json:"ChauffeuredVehicleService,omitempty"`
	CarPoolingService []CarPoolingService `xml:"CarPoolingService,omitempty" json:"CarPoolingService,omitempty"`
	TaxiService []TaxiService `xml:"TaxiService,omitempty" json:"TaxiService,omitempty"`
}

// MobilityServiceVersionStructure represents the MobilityService_VersionStructure element
// Type for a MOBILITY SERVICE.
type MobilityServiceVersionStructure struct {
	EquipmentVersionStructure
	// Short Name for service
	ShortName *MultilingualString `xml:"ShortName,omitempty" json:"ShortName,omitempty"`
	// Start date from when services are available
	StartDate *time.Time `xml:"StartDate,omitempty" json:"StartDate,omitempty"`
	TypeOfMobilityServiceRef *TypeOfMobilityServiceRef `xml:"TypeOfMobilityServiceRef,omitempty" json:"TypeOfMobilityServiceRef,omitempty"`
	RetailConsortiumRef *RetailConsortiumRef `xml:"RetailConsortiumRef,omitempty" json:"RetailConsortiumRef,omitempty"`
	OnlineServiceOperatorRef *OnlineServiceOperatorRef `xml:"OnlineServiceOperatorRef,omitempty" json:"OnlineServiceOperatorRef,omitempty"`
	GeneralOrganisationRef *GeneralOrganisationRef `xml:"GeneralOrganisationRef,omitempty" json:"GeneralOrganisationRef,omitempty"`
	ManagementAgentRef *ManagementAgentRef `xml:"ManagementAgentRef,omitempty" json:"ManagementAgentRef,omitempty"`
	ServicedOrganisationRef *ServicedOrganisationRef `xml:"ServicedOrganisationRef,omitempty" json:"ServicedOrganisationRef,omitempty"`
	TravelAgentRef *TravelAgentRef `xml:"TravelAgentRef,omitempty" json:"TravelAgentRef,omitempty"`
	OtherOrganisationRef *OtherOrganisationRef `xml:"OtherOrganisationRef,omitempty" json:"OtherOrganisationRef,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	OrganisationRef *OrganisationRef `xml:"OrganisationRef,omitempty" json:"OrganisationRef,omitempty"`
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	// Booking Arrangements for service.
	ServiceBookingArrangements *ServiceBookingArrangementsStructure `xml:"ServiceBookingArrangements,omitempty" json:"ServiceBookingArrangements,omitempty"`
}

// CommonVehicleServiceVersionStructure represents the CommonVehicleService_VersionStructure element
// Type for COMMON VEHICLE SERVICE.
type CommonVehicleServiceVersionStructure struct {
	MobilityServiceVersionStructure
	// Whether booking is required.
	BookingRequired *bool `xml:"BookingRequired,omitempty" json:"BookingRequired,omitempty"`
	// Whether registration is required.
	RegistrationRequired *bool `xml:"RegistrationRequired,omitempty" json:"RegistrationRequired,omitempty"`
	// Online servicies proposing this service,
	ProposedByServices *OnlineServiceRefsRelStructure `xml:"proposedByServices,omitempty" json:"proposedByServices,omitempty"`
}

// VehiclePoolingServiceVersionStructure represents the VehiclePoolingService_VersionStructure element
// Type for VEHICLE POOLING SERVICE.
type VehiclePoolingServiceVersionStructure struct {
	CommonVehicleServiceVersionStructure
	VehiclePoolingRef VehiclePoolingRef `xml:"VehiclePoolingRef" json:"VehiclePoolingRef"`
	// URL for info on Pooling policy.
	PoolingPolicyUrl *string `xml:"PoolingPolicyUrl,omitempty" json:"PoolingPolicyUrl,omitempty"`
}

// TaxiServiceVersionStructure represents the TaxiService_VersionStructure element
// Type for TAXI SERVICE.
type TaxiServiceVersionStructure struct {
	VehiclePoolingServiceVersionStructure
}

// CarPoolingServiceVersionStructure represents the CarPoolingService_VersionStructure element
// Type for CAR POOLING SERVICE.
type CarPoolingServiceVersionStructure struct {
	VehiclePoolingServiceVersionStructure
}

// ChauffeuredVehicleServiceVersionStructure represents the ChauffeuredVehicleService_VersionStructure element
// Type for ChauffeuredVehicle SERVICE.
type ChauffeuredVehicleServiceVersionStructure struct {
	VehiclePoolingServiceVersionStructure
}

// VehicleSharingServiceVersionStructure represents the VehicleSharingService_VersionStructure element
// Type for VEHICLE SHARING SERVICE.
type VehicleSharingServiceVersionStructure struct {
	CommonVehicleServiceVersionStructure
	VehicleSharingRef VehicleSharingRef `xml:"VehicleSharingRef" json:"VehicleSharingRef"`
	// URL for info on Sharing policy.
	SharingPolicyUrl *string `xml:"SharingPolicyUrl,omitempty" json:"SharingPolicyUrl,omitempty"`
	// Minmum time period for sharing.
	MinimumSharingPeriod *string `xml:"MinimumSharingPeriod,omitempty" json:"MinimumSharingPeriod,omitempty"`
	// Maximum time period for sharing.
	MaximumSharingPeriod *string `xml:"MaximumSharingPeriod,omitempty" json:"MaximumSharingPeriod,omitempty"`
	// Whether vehicles are floating of issued from fixed stations.
	FloatingVehicles *bool `xml:"FloatingVehicles,omitempty" json:"FloatingVehicles,omitempty"`
	// FLEETs used by service
	Fleets *FleetRefsRelStructure `xml:"fleets,omitempty" json:"fleets,omitempty"`
}

// VehicleRentalServiceVersionStructure represents the VehicleRentalService_VersionStructure element
// Type for VEHICLE RENTAL SERVICE.
type VehicleRentalServiceVersionStructure struct {
	CommonVehicleServiceVersionStructure
	VehicleRentalRef VehicleRentalRef `xml:"VehicleRentalRef" json:"VehicleRentalRef"`
	// Maximum time period for rental;
	MaximumRentalPeriod *string `xml:"MaximumRentalPeriod,omitempty" json:"MaximumRentalPeriod,omitempty"`
	// Minmum time period for rental;
	MinimumRentalPeriod *string `xml:"MinimumRentalPeriod,omitempty" json:"MinimumRentalPeriod,omitempty"`
	// Rental policy URL.
	RentalPolicyUrl *string `xml:"RentalPolicyUrl,omitempty" json:"RentalPolicyUrl,omitempty"`
	// fleets used by service
	Fleets *FleetRefsRelStructure `xml:"fleets,omitempty" json:"fleets,omitempty"`
}

// TypeOfMobilityServiceValueStructure represents the TypeOfMobilityService_ValueStructure element
// Type for a TYPE OF MobilityService.
type TypeOfMobilityServiceValueStructure struct {
	TypeOfEntityVersionStructure
}

// TaxiService represents the TaxiService element
// A type of VEHICLE POOLING SERVICE where the service may be regulated according to a particular taxi policy.
// .  +v1.2.2
type TaxiService struct {
	TaxiServiceVersionStructure
}

// CarPoolingService represents the CarPoolingService element
// A transport service that connects users (driver and passenger(s)) for carrying out trips.  +v1.2.2
type CarPoolingService struct {
	CarPoolingServiceVersionStructure
}

// ChauffeuredVehicleService represents the ChauffeuredVehicleService element
// A type of VEHICLE POOLING SERVICE which can only be used by prior arrangement and where the driver has a commercial agreement with the user. +v1.2.2
type ChauffeuredVehicleService struct {
	ChauffeuredVehicleServiceVersionStructure
}

// VehicleSharingService represents the VehicleSharingService element
// A transport service offer related to VEHICLE SHARING. +v1.2.2
type VehicleSharingService struct {
	VehicleSharingServiceVersionStructure
}

// VehicleRentalService represents the VehicleRentalService element
// A transport service offer related to VEHICLE RENTAL. +v1.2.2
type VehicleRentalService struct {
	VehicleRentalServiceVersionStructure
}

// TypeOfMobilityService represents the TypeOfMobilityService element
// A classification of a MOBILITY SERVICE according to its functional purpose.  +v1.2.2
type TypeOfMobilityService struct {
	TypeOfMobilityServiceValueStructure
}

// OnlineServiceOperatorVersionStructure represents the OnlineServiceOperator_VersionStructure element
// Type for an ONLINE SERVICE OPERATOR.
type OnlineServiceOperatorVersionStructure struct {
	OrganisationVersionStructure
	CountryRef *CountryRef `xml:"CountryRef,omitempty" json:"CountryRef,omitempty"`
	PostalAddress *PostalAddress `xml:"PostalAddress,omitempty" json:"PostalAddress,omitempty"`
	RoadAddress *RoadAddress `xml:"RoadAddress,omitempty" json:"RoadAddress,omitempty"`
	// Address of TRANSPORT ORGANISATION.
	Address *Address `xml:"Address,omitempty" json:"Address,omitempty"`
	// ONLIEN SERVICES managed by ONLIEN OPERATOR,
	Services *OnlineServiceRefsRelStructure `xml:"services,omitempty" json:"services,omitempty"`
}

// Address3 represents the Address3 element
type Address3 struct {
	PostalAddressVersionStructure
	// POINTs in GROUP OF POINTs.
	Members interface{} `xml:"members,omitempty" json:"members,omitempty"`
	// A list of alternative Key values for an element.
	KeyList interface{} `xml:"keyList,omitempty" json:"keyList,omitempty"`
	Extensions interface{} `xml:"Extensions,omitempty" json:"Extensions,omitempty"`
	BrandingRef interface{} `xml:"BrandingRef,omitempty" json:"BrandingRef,omitempty"`
	// VALIDITY CONDITIONs conditioning entity.
	ValidityConditions interface{} `xml:"validityConditions,omitempty" json:"validityConditions,omitempty"`
	ValidBetween interface{} `xml:"ValidBetween,omitempty" json:"ValidBetween,omitempty"`
	// Additional Translations of text  elements.
	AlternativeTexts interface{} `xml:"alternativeTexts,omitempty" json:"alternativeTexts,omitempty"`
}

// OnlineServicesRelStructure represents the onlineServices_RelStructure element
// Type for a list of MOBILITY SERVICEs.
type OnlineServicesRelStructure struct {
	ContainmentAggregationStructure
	OnlineService []OnlineService `xml:"OnlineService" json:"OnlineService"`
}

// OnlineServiceVersionStructure represents the OnlineService_VersionStructure element
// Type for ONLINE SERVICE.
type OnlineServiceVersionStructure struct {
	MobilityServiceVersionStructure
	// Whether login  is required to use service.
	LogInRequired *bool `xml:"LogInRequired,omitempty" json:"LogInRequired,omitempty"`
	ProposingServices *MobilityServiceRefsRelStructure `xml:"proposingServices,omitempty" json:"proposingServices,omitempty"`
}

// OnlineServiceOperator represents the OnlineServiceOperator element
// An organisation that provides online access to an ONLINE SERVICE without operating transportation services of travellers.  +v1.2.2
type OnlineServiceOperator struct {
	OnlineServiceOperatorVersionStructure
}

// OnlineService represents the OnlineService element
// Any remotely accessible service providing access to any mode of transportation and/or information related to transportation services. +v1.2.2
type OnlineService struct {
	OnlineServiceVersionStructure
}

// VehicleMeetingPointsInFrameRelStructure represents the vehicleMeetingPointsInFrame_RelStructure element
// Type for a list of references to a VEHICLE MEETING POINTs. in Frame
type VehicleMeetingPointsInFrameRelStructure struct {
	ContainmentAggregationStructure
	VehicleMeetingPoint []VehicleMeetingPoint `xml:"VehicleMeetingPoint" json:"VehicleMeetingPoint"`
}

// VehicleMeetingPointsRelStructure represents the vehicleMeetingPoints_RelStructure element
// Type for a list of references to a VEHICLE MEETING POINTs.
type VehicleMeetingPointsRelStructure struct {
	ContainmentAggregationStructure
	VehicleMeetingPointRef []VehicleMeetingPointRef `xml:"VehicleMeetingPointRef,omitempty" json:"VehicleMeetingPointRef,omitempty"`
	VehicleMeetingPoint []VehicleMeetingPoint `xml:"VehicleMeetingPoint,omitempty" json:"VehicleMeetingPoint,omitempty"`
}

// VehicleMeetingPointVersionStructure represents the VehicleMeetingPoint_VersionStructure element
// Type for VEHICLE MEETING POINT restricts id.
type VehicleMeetingPointVersionStructure struct {
	PointVersionStructure
}

// VehicleMeetingLinksInFrameRelStructure represents the vehicleMeetingLinksInFrame_RelStructure element
// Type for a list of references to a VEHICLE MEETING LINKs.
type VehicleMeetingLinksInFrameRelStructure struct {
	ContainmentAggregationStructure
	VehicleMeetingLink []VehicleMeetingLink `xml:"VehicleMeetingLink" json:"VehicleMeetingLink"`
}

// VehicleMeetingLinkVersionStructure represents the VehicleMeetingLink_VersionStructure element
// Type for VEHICLE MEETING LINK.
type VehicleMeetingLinkVersionStructure struct {
	LinkVersionStructure
	// Identifier of VEHICLE MEETING POINT from which Link starts.
	FromPointRef VehicleMeetingPointRefStructure `xml:"FromPointRef" json:"FromPointRef"`
	// Identifier of VEHICLE MEETING POINT at which Link ends.
	ToPointRef VehicleMeetingPointRefStructure `xml:"ToPointRef" json:"ToPointRef"`
}

// VehicleMeetingPoint represents the VehicleMeetingPoint element
// A POINT where passengers can board or alight from vehicles.  +v1.2.2
type VehicleMeetingPoint struct {
	VehicleMeetingPointVersionStructure
}

// VehicleMeetingLink represents the VehicleMeetingLink element
// A LINK between an ordered pair of STOP POINTs.  VEHICLE MEETING LINKs are directional - there will be separate links for each direction of a route.  +v1.2.2
type VehicleMeetingLink struct {
	VehicleMeetingLinkVersionStructure
}

// VehicleMeetingPlacesRelStructure represents the vehicleMeetingPlaces_RelStructure element
// Type for a list of references to a VEHICLE MEETING PLACE.
type VehicleMeetingPlacesRelStructure struct {
	ContainmentAggregationStructure
	VehiclePoolingMeetingPlace []VehiclePoolingMeetingPlace `xml:"VehiclePoolingMeetingPlace,omitempty" json:"VehiclePoolingMeetingPlace,omitempty"`
	VehicleMeetingPlace []VehicleMeetingPlace2 `xml:"VehicleMeetingPlace_,omitempty" json:"VehicleMeetingPlace_,omitempty"`
}

// VehicleMeetingPlaceVersionStructure represents the VehicleMeetingPlace_VersionStructure element
// Type for VEHICLE MEETING PLACE.
type VehicleMeetingPlaceVersionStructure struct {
	AddressablePlaceVersionStructure
	TopographicPlaceRef *TopographicPlaceRef `xml:"TopographicPlaceRef,omitempty" json:"TopographicPlaceRef,omitempty"`
	VehicleStoppingPositionRef *VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef *VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef *AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef *StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef *VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef *ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef *PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef *StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef *StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef *ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef *ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef *ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef *PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef *PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef *VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef *EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef *SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef *SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
}

// VehiclePoolingMeetingPlaceVersionStructure represents the VehiclePoolingMeetingPlace_VersionStructure element
// Type for VEHICLE POOLING MEETING PLACE.
type VehiclePoolingMeetingPlaceVersionStructure struct {
	VehicleMeetingPlaceVersionStructure
}

// VehicleSharingParkingAreaVersionStructure represents the VehicleSharingParkingArea_VersionStructure element
// Type for VEHICLE SHARING PARKING AREA.
type VehicleSharingParkingAreaVersionStructure struct {
	ParkingAreaVersionStructure
}

// VehiclePoolingParkingAreaVersionStructure represents the VehiclePoolingParkingArea_VersionStructure element
// Type for VEHICLE POOLING PARKING AREA.
type VehiclePoolingParkingAreaVersionStructure struct {
	ParkingAreaVersionStructure
}

// VehicleSharingParkingBayVersionStructure represents the VehicleSharingParkingBay_VersionStructure element
// Type for VEHICLE SHARING PARKING BAY.
type VehicleSharingParkingBayVersionStructure struct {
	ParkingBayVersionStructure
}

// VehiclePoolingParkingBayVersionStructure represents the VehiclePoolingParkingBay_VersionStructure element
// Type for VEHICLE POOLING PARKING BAY.
type VehiclePoolingParkingBayVersionStructure struct {
	ParkingBayVersionStructure
}

// VehiclePoolingMeetingPlace represents the VehiclePoolingMeetingPlace element
// A place where  vehicles/passengers meet to change mode of transportation, for boarding, alighting, pick-up, drop-off, etc.  +v1.2.2
type VehiclePoolingMeetingPlace struct {
	VehiclePoolingMeetingPlaceVersionStructure
}

// VehicleSharingParkingArea represents the VehicleSharingParkingArea element
// A dedicated part of the PARKING AREA for vehicle sharing or rental which is composed of one or more VEHICLE SHARING PARKING BAYs. +v1.2.2
type VehicleSharingParkingArea struct {
	VehicleSharingParkingAreaVersionStructure
}

// VehiclePoolingParkingArea represents the VehiclePoolingParkingArea element
// A dedicated space of a PARKING AREA for either vehicles active in a pooling service or  vehicles of a pooling service users  where vehicles are left for a longer time.  +v1.2.2
type VehiclePoolingParkingArea struct {
	VehiclePoolingParkingAreaVersionStructure
}

// VehicleSharingParkingBay represents the VehicleSharingParkingBay element
// A spot in the PARKING AREA dedicated to vehicle sharing or rental. 	+v1.2.2
type VehicleSharingParkingBay struct {
	VehicleSharingParkingBayVersionStructure
}

// VehiclePoolingParkingBay represents the VehiclePoolingParkingBay element
// A dedicated space of a PARKING AREA for either vehicles active in a pooling service or  vehicles of a pooling service users  where vehicles are left for a longer time.  +v1.2.2
type VehiclePoolingParkingBay struct {
	VehiclePoolingParkingBayVersionStructure
}

// MeetingUsageEnumeration represents the MeetingUsageEnumeration enumeration
// Allowed values for meeting usage of VEHICLE MEETING POINTs. +v1.2.2
type MeetingUsageEnumeration string

const (
	// MeetingUsageEnumerationPickUp represents pickUp
	MeetingUsageEnumerationPickUp MeetingUsageEnumeration = "pickUp"
	// MeetingUsageEnumerationSetDown represents setDown
	MeetingUsageEnumerationSetDown MeetingUsageEnumeration = "setDown"
	// MeetingUsageEnumerationAll represents all
	MeetingUsageEnumerationAll MeetingUsageEnumeration = "all"
)

// VehicleMeetingPointAssignmentRefsRelStructure represents the vehicleMeetingPointAssignmentRefs_RelStructure element
// Type for a list of VEHICLE MEETING POINT ASSIGNMENTs.
type VehicleMeetingPointAssignmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	DynamicVehicleMeetingPointAssignmentRef *DynamicVehicleMeetingPointAssignmentRef `xml:"DynamicVehicleMeetingPointAssignmentRef,omitempty" json:"DynamicVehicleMeetingPointAssignmentRef,omitempty"`
	VehicleMeetingPointAssignmentRef *VehicleMeetingPointAssignmentRef `xml:"VehicleMeetingPointAssignmentRef,omitempty" json:"VehicleMeetingPointAssignmentRef,omitempty"`
}

// VehicleMeetingPointAssignmentRefStructure represents the VehicleMeetingPointAssignmentRefStructure element
// Type for a reference to a VEHICLE MEETING POINT ASSIGNMENT.
type VehicleMeetingPointAssignmentRefStructure struct {
	AssignmentRefStructure
}

// DynamicVehicleMeetingPointAssignmentRefsRelStructure represents the dynamicVehicleMeetingPointAssignmentRefs_RelStructure element
// Type for a list of DYNAMIC VEHICLE MEETING POINT ASSIGNMENTs.
type DynamicVehicleMeetingPointAssignmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	DynamicVehicleMeetingPointAssignmentRef DynamicVehicleMeetingPointAssignmentRef `xml:"DynamicVehicleMeetingPointAssignmentRef" json:"DynamicVehicleMeetingPointAssignmentRef"`
}

// DynamicVehicleMeetingPointAssignmentRefStructure represents the DynamicVehicleMeetingPointAssignmentRefStructure element
// Type for a reference to a DYNAMIC VEHICLE MEETING POINT ASSIGNMENT.
type DynamicVehicleMeetingPointAssignmentRefStructure struct {
	VehicleMeetingPointAssignmentRefStructure
}

// VehicleMeetingPointAssignmentRef represents the VehicleMeetingPointAssignmentRef element
// Reference to a VEHICLE MEETING POINT ASSIGNMENT. +v1.2.2
type VehicleMeetingPointAssignmentRef struct {
	VehicleMeetingPointAssignmentRefStructure
}

// DynamicVehicleMeetingPointAssignmentRef represents the DynamicVehicleMeetingPointAssignmentRef element
// Reference to a DYNAMIC VEHICLE MEETING POINT ASSIGNMENT. +v1.2.2
type DynamicVehicleMeetingPointAssignmentRef struct {
	DynamicVehicleMeetingPointAssignmentRefStructure
}

// VehicleMeetingPointAssignmentsInFrameRelStructure represents the vehicleMeetingPointAssignmentsInFrame_RelStructure element
// Type for a list of references to a VEHICLE MEETING POINT ASSIGNMENT.
type VehicleMeetingPointAssignmentsInFrameRelStructure struct {
	ContainmentAggregationStructure
	VehicleMeetingPointAssignment []VehicleMeetingPointAssignment1 `xml:"VehicleMeetingPointAssignment,omitempty" json:"VehicleMeetingPointAssignment,omitempty"`
}

// VehicleMeetingPointAssignmentsRelStructure represents the vehicleMeetingPointAssignments_RelStructure element
// Type for a list of references to a VEHICLE MEETING POINT ASSIGNMENT.
type VehicleMeetingPointAssignmentsRelStructure struct {
	ContainmentAggregationStructure
	DynamicVehicleMeetingPointAssignmentRef []DynamicVehicleMeetingPointAssignmentRef `xml:"DynamicVehicleMeetingPointAssignmentRef,omitempty" json:"DynamicVehicleMeetingPointAssignmentRef,omitempty"`
	VehicleMeetingPointAssignmentRef []VehicleMeetingPointAssignmentRef `xml:"VehicleMeetingPointAssignmentRef,omitempty" json:"VehicleMeetingPointAssignmentRef,omitempty"`
	VehicleMeetingPointAssignment []VehicleMeetingPointAssignment1 `xml:"VehicleMeetingPointAssignment,omitempty" json:"VehicleMeetingPointAssignment,omitempty"`
}

// VehicleMeetingPointAssignmentVersionStructure represents the VehicleMeetingPointAssignment_VersionStructure element
// Type for VEHICLE MEETING POINT ASSIGNMENT restricts id.
type VehicleMeetingPointAssignmentVersionStructure struct {
	AssignmentVersionStructure1
	VehicleMeetingPointRef VehicleMeetingPointRef `xml:"VehicleMeetingPointRef" json:"VehicleMeetingPointRef"`
	VehiclePoolingMeetingPlaceRef *VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehicleMeetingPlaceRef *VehicleMeetingPlaceRef `xml:"VehicleMeetingPlaceRef,omitempty" json:"VehicleMeetingPlaceRef,omitempty"`
	GarageRef *GarageRef `xml:"GarageRef,omitempty" json:"GarageRef,omitempty"`
	VehicleStoppingPositionRef *VehicleStoppingPositionRef `xml:"VehicleStoppingPositionRef,omitempty" json:"VehicleStoppingPositionRef,omitempty"`
	VehicleStoppingPlaceRef *VehicleStoppingPlaceRef `xml:"VehicleStoppingPlaceRef,omitempty" json:"VehicleStoppingPlaceRef,omitempty"`
	BoardingPositionRef *BoardingPositionRef `xml:"BoardingPositionRef,omitempty" json:"BoardingPositionRef,omitempty"`
	AccessSpaceRef *AccessSpaceRef `xml:"AccessSpaceRef,omitempty" json:"AccessSpaceRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	QuayRef *QuayRef `xml:"QuayRef,omitempty" json:"QuayRef,omitempty"`
	StopPlaceSpaceRef *StopPlaceSpaceRef `xml:"StopPlaceSpaceRef,omitempty" json:"StopPlaceSpaceRef,omitempty"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehicleSharingParkingAreaRef *VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef,omitempty" json:"VehicleSharingParkingAreaRef,omitempty"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	ParkingAreaRef *ParkingAreaRef `xml:"ParkingAreaRef,omitempty" json:"ParkingAreaRef,omitempty"`
	PointOfInterestSpaceRef *PointOfInterestSpaceRef `xml:"PointOfInterestSpaceRef,omitempty" json:"PointOfInterestSpaceRef,omitempty"`
	StopPlaceVehicleEntranceRef *StopPlaceVehicleEntranceRef `xml:"StopPlaceVehicleEntranceRef,omitempty" json:"StopPlaceVehicleEntranceRef,omitempty"`
	StopPlaceEntranceRef *StopPlaceEntranceRef `xml:"StopPlaceEntranceRef,omitempty" json:"StopPlaceEntranceRef,omitempty"`
	ParkingEntranceForVehiclesRef *ParkingEntranceForVehiclesRef `xml:"ParkingEntranceForVehiclesRef,omitempty" json:"ParkingEntranceForVehiclesRef,omitempty"`
	ParkingPassengerEntranceRef *ParkingPassengerEntranceRef `xml:"ParkingPassengerEntranceRef,omitempty" json:"ParkingPassengerEntranceRef,omitempty"`
	ParkingEntranceRef *ParkingEntranceRef `xml:"ParkingEntranceRef,omitempty" json:"ParkingEntranceRef,omitempty"`
	PointOfInterestVehicleEntranceRef *PointOfInterestVehicleEntranceRef `xml:"PointOfInterestVehicleEntranceRef,omitempty" json:"PointOfInterestVehicleEntranceRef,omitempty"`
	PointOfInterestEntranceRef *PointOfInterestEntranceRef `xml:"PointOfInterestEntranceRef,omitempty" json:"PointOfInterestEntranceRef,omitempty"`
	VehicleEntranceRef *VehicleEntranceRef `xml:"VehicleEntranceRef,omitempty" json:"VehicleEntranceRef,omitempty"`
	EntranceRef *EntranceRef `xml:"EntranceRef,omitempty" json:"EntranceRef,omitempty"`
	SiteComponentRef *SiteComponentRef `xml:"SiteComponentRef,omitempty" json:"SiteComponentRef,omitempty"`
	TaxiRankRef *TaxiRankRef `xml:"TaxiRankRef,omitempty" json:"TaxiRankRef,omitempty"`
	StopPlaceRef *StopPlaceRef `xml:"StopPlaceRef,omitempty" json:"StopPlaceRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	PointOfInterestRef *PointOfInterestRef `xml:"PointOfInterestRef,omitempty" json:"PointOfInterestRef,omitempty"`
	ServiceSiteRef *ServiceSiteRef `xml:"ServiceSiteRef,omitempty" json:"ServiceSiteRef,omitempty"`
	SiteRef *SiteRef `xml:"SiteRef,omitempty" json:"SiteRef,omitempty"`
	SiteElementRef *SiteElementRef `xml:"SiteElementRef,omitempty" json:"SiteElementRef,omitempty"`
	AddressablePlaceRef *AddressablePlaceRef `xml:"AddressablePlaceRef,omitempty" json:"AddressablePlaceRef,omitempty"`
	Usage *MeetingUsageEnumeration `xml:"Usage,omitempty" json:"Usage,omitempty"`
}

// DynamicVehicleMeetingPointAssignmentVersionStructure represents the DynamicVehicleMeetingPointAssignment_VersionStructure element
// Type for DYNAMIC VEHICLE MEETING POINT ASSIGNMENT restricts id.
type DynamicVehicleMeetingPointAssignmentVersionStructure struct {
	VehicleMeetingPointAssignmentVersionStructure
	DynamicVehicleMeetingPointAssignmentRef *DynamicVehicleMeetingPointAssignmentRef `xml:"DynamicVehicleMeetingPointAssignmentRef,omitempty" json:"DynamicVehicleMeetingPointAssignmentRef,omitempty"`
	VehicleMeetingPointAssignmentRef *VehicleMeetingPointAssignmentRef `xml:"VehicleMeetingPointAssignmentRef,omitempty" json:"VehicleMeetingPointAssignmentRef,omitempty"`
}

// DynamicVehicleMeetingPointAssignment represents the DynamicVehicleMeetingPointAssignment element
// Dynamic allocation of a VEHICLE MEETING ASSIGNMENT. +v1.2.2
type DynamicVehicleMeetingPointAssignment struct {
	DynamicVehicleMeetingPointAssignmentVersionStructure
}

// VehicleServicePlaceAssignmentRefsRelStructure represents the vehicleServicePlaceAssignmentRefs_RelStructure element
// Type for a list of VEHICLE SERVICE PLACE ASSIGNMENTs. +v1.2.2
type VehicleServicePlaceAssignmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehiclePoolingPlaceAssignmentRef *VehiclePoolingPlaceAssignmentRef `xml:"VehiclePoolingPlaceAssignmentRef,omitempty" json:"VehiclePoolingPlaceAssignmentRef,omitempty"`
	VehicleSharingPlaceAssignmentRef *VehicleSharingPlaceAssignmentRef `xml:"VehicleSharingPlaceAssignmentRef,omitempty" json:"VehicleSharingPlaceAssignmentRef,omitempty"`
	TaxiServicePlaceAssignmentRef *TaxiServicePlaceAssignmentRef `xml:"TaxiServicePlaceAssignmentRef,omitempty" json:"TaxiServicePlaceAssignmentRef,omitempty"`
	VehicleServicePlaceAssignmentRef *VehicleServicePlaceAssignmentRef `xml:"VehicleServicePlaceAssignmentRef,omitempty" json:"VehicleServicePlaceAssignmentRef,omitempty"`
}

// VehicleServicePlaceAssignmentRefStructure represents the VehicleServicePlaceAssignmentRefStructure element
// Type for a reference to a VEHICLE SERVICE PLACE ASSIGNMENT. +v1.2.2
type VehicleServicePlaceAssignmentRefStructure struct {
	AssignmentRefStructure
}

// TaxiServicePlaceAssignmentRefsRelStructure represents the TaxiServicePlaceAssignmentRefs_RelStructure element
// Type for a list of TAXI SERVICE PLACE ASSIGNMENTs.  +v1.2.2
type TaxiServicePlaceAssignmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	TaxiServicePlaceAssignmentRef TaxiServicePlaceAssignmentRef `xml:"TaxiServicePlaceAssignmentRef" json:"TaxiServicePlaceAssignmentRef"`
}

// TaxiServicePlaceAssignmentRefStructure represents the TaxiServicePlaceAssignmentRefStructure element
// Type for a reference to a TAXI SERVICE PLACE ASSIGNMENT.
type TaxiServicePlaceAssignmentRefStructure struct {
	VehicleServicePlaceAssignmentRefStructure
}

// VehicleSharingPlaceAssignmentRefsRelStructure represents the VehicleSharingPlaceAssignmentRefs_RelStructure element
// Type for a list of VEHICLE SHARING PLACE ASSIGNMENTs. +v1.2.2
type VehicleSharingPlaceAssignmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehicleSharingPlaceAssignmentRef VehicleSharingPlaceAssignmentRef `xml:"VehicleSharingPlaceAssignmentRef" json:"VehicleSharingPlaceAssignmentRef"`
}

// VehicleSharingPlaceAssignmentRefStructure represents the VehicleSharingPlaceAssignmentRefStructure element
// Type for a reference to a VEHICLE SHARING PLACE ASSIGNMENT.
type VehicleSharingPlaceAssignmentRefStructure struct {
	VehicleServicePlaceAssignmentRefStructure
}

// VehiclePoolingPlaceAssignmentRefsRelStructure represents the VehiclePoolingPlaceAssignmentRefs_RelStructure element
// Type for a list of VEHICLE POOLING PLACE ASSIGNMENTs. +v1.2.2
type VehiclePoolingPlaceAssignmentRefsRelStructure struct {
	OneToManyRelationshipStructure
	VehiclePoolingPlaceAssignmentRef VehiclePoolingPlaceAssignmentRef `xml:"VehiclePoolingPlaceAssignmentRef" json:"VehiclePoolingPlaceAssignmentRef"`
}

// VehiclePoolingPlaceAssignmentRefStructure represents the VehiclePoolingPlaceAssignmentRefStructure element
// Type for a reference to a VEHICLE POOLING PLACE ASSIGNMENT.
type VehiclePoolingPlaceAssignmentRefStructure struct {
	VehicleServicePlaceAssignmentRefStructure
}

// VehicleServicePlaceAssignmentRef represents the VehicleServicePlaceAssignmentRef element
// Reference to a VEHICLE SERVICE PLACE ASSIGNMENT. +v1.2.2
type VehicleServicePlaceAssignmentRef struct {
	VehicleServicePlaceAssignmentRefStructure
}

// TaxiServicePlaceAssignmentRef represents the TaxiServicePlaceAssignmentRef element
// Reference to a TAXI SERVICE PLACE ASSIGNMENT. +v1.2.2
type TaxiServicePlaceAssignmentRef struct {
	TaxiServicePlaceAssignmentRefStructure
}

// VehicleSharingPlaceAssignmentRef represents the VehicleSharingPlaceAssignmentRef element
// Reference to a VEHICLE SHARING PLACE ASSIGNMENT. +v1.2.2
type VehicleSharingPlaceAssignmentRef struct {
	VehicleSharingPlaceAssignmentRefStructure
}

// VehiclePoolingPlaceAssignmentRef represents the VehiclePoolingPlaceAssignmentRef element
// Reference to a VEHICLE POOLING PLACE ASSIGNMENT. +v1.2.2
type VehiclePoolingPlaceAssignmentRef struct {
	VehiclePoolingPlaceAssignmentRefStructure
}

// VehicleServicePlaceAssignmentsRelStructure represents the vehicleServicePlaceAssignments_RelStructure element
// Type for a list of VEHICLE SERVICE PLACE  ASSIGNMENTs. +v1.2.2
type VehicleServicePlaceAssignmentsRelStructure struct {
	OneToManyRelationshipStructure
	VehicleSharingPlaceAssignment []VehicleSharingPlaceAssignment `xml:"VehicleSharingPlaceAssignment,omitempty" json:"VehicleSharingPlaceAssignment,omitempty"`
	VehiclePoolingPlaceAssignment []VehiclePoolingPlaceAssignment `xml:"VehiclePoolingPlaceAssignment,omitempty" json:"VehiclePoolingPlaceAssignment,omitempty"`
	TaxiServicePlaceAssignment []TaxiServicePlaceAssignment `xml:"TaxiServicePlaceAssignment,omitempty" json:"TaxiServicePlaceAssignment,omitempty"`
}

// VehicleServicePlaceAssignmentVersionStructure represents the VehicleServicePlaceAssignment_VersionStructure element
// Type for VEHICLE SERVICE PLACE ASSIGNMENT restricts id.
type VehicleServicePlaceAssignmentVersionStructure struct {
	AssignmentVersionStructure1
}

// TaxiServicePlaceAssignmentVersionStructure represents the TaxiServicePlaceAssignment_VersionStructure element
// Type for TAXI SERVICE PLACE ASSIGNMENT restricts id.
type TaxiServicePlaceAssignmentVersionStructure struct {
	VehicleServicePlaceAssignmentVersionStructure
	TaxiServiceRef TaxiServiceRef `xml:"TaxiServiceRef" json:"TaxiServiceRef"`
	TaxiParkingAreaRef *TaxiParkingAreaRef `xml:"TaxiParkingAreaRef,omitempty" json:"TaxiParkingAreaRef,omitempty"`
	TaxiStandRef *TaxiStandRef `xml:"TaxiStandRef,omitempty" json:"TaxiStandRef,omitempty"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
}

// VehiclePoolingPlaceAssignmentVersionStructure represents the VehiclePoolingPlaceAssignment_VersionStructure element
// Type for VEHICLE POOLING PLACE ASSIGNMENT restricts id.
type VehiclePoolingPlaceAssignmentVersionStructure struct {
	VehicleServicePlaceAssignmentVersionStructure
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	VehiclePoolingMeetingPlaceRef *VehiclePoolingMeetingPlaceRef `xml:"VehiclePoolingMeetingPlaceRef,omitempty" json:"VehiclePoolingMeetingPlaceRef,omitempty"`
	VehiclePoolingParkingAreaRef *VehiclePoolingParkingAreaRef `xml:"VehiclePoolingParkingAreaRef,omitempty" json:"VehiclePoolingParkingAreaRef,omitempty"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
}

// VehicleSharingPlaceAssignmentVersionStructure represents the VehicleSharingPlaceAssignment_VersionStructure element
// Type for VEHICLE SHARING PLACE ASSIGNMENT restricts id.
type VehicleSharingPlaceAssignmentVersionStructure struct {
	VehicleServicePlaceAssignmentVersionStructure
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	VehicleSharingParkingAreaRef VehicleSharingParkingAreaRef `xml:"VehicleSharingParkingAreaRef" json:"VehicleSharingParkingAreaRef"`
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
}

// TaxiServicePlaceAssignment represents the TaxiServicePlaceAssignment element
// The allocation of a TAXI SERVICE to a TAXI PARKING or a TAXI STAND.  +V1.2.2
type TaxiServicePlaceAssignment struct {
	TaxiServicePlaceAssignmentVersionStructure
}

// VehiclePoolingPlaceAssignment represents the VehiclePoolingPlaceAssignment element
// The allocation of a VEHICLE POOLING SERVICE to a VEHICLE POOLING PARKING AREA or a VEHICLE POOLING MEETING PLACE.  +V1.2.2
type VehiclePoolingPlaceAssignment struct {
	VehiclePoolingPlaceAssignmentVersionStructure
}

// VehicleSharingPlaceAssignment represents the VehicleSharingPlaceAssignment element
// The allocation of a VEHICLE SHARING AREA to any vehicle sharing or rental service. +V1.2.2
type VehicleSharingPlaceAssignment struct {
	VehicleSharingPlaceAssignmentVersionStructure
}

// ParkingBayStatusEnumeration represents the ParkingBayStatusEnumeration enumeration
// Allowed values for PARKING BAY STATUS.
type ParkingBayStatusEnumeration string

const (
	// ParkingBayStatusEnumerationAvailable represents available
	ParkingBayStatusEnumerationAvailable ParkingBayStatusEnumeration = "available"
	// ParkingBayStatusEnumerationInUse represents inUse
	ParkingBayStatusEnumerationInUse ParkingBayStatusEnumeration = "inUse"
	// ParkingBayStatusEnumerationOutOfService represents outOfService
	ParkingBayStatusEnumerationOutOfService ParkingBayStatusEnumeration = "outOfService"
	// ParkingBayStatusEnumerationReserved represents reserved
	ParkingBayStatusEnumerationReserved ParkingBayStatusEnumeration = "reserved"
	// ParkingBayStatusEnumerationUnknown represents unknown
	ParkingBayStatusEnumerationUnknown ParkingBayStatusEnumeration = "unknown"
)

// MonitoredVehicleSharingParkingBayRefStructure represents the MonitoredVehicleSharingParkingBayRefStructure element
// Type for a reference to a MONITORED VEHICLE SHARING PARKING BAY.
type MonitoredVehicleSharingParkingBayRefStructure struct {
	VehicleSharingParkingBayRefStructure
}

// ParkingBayStatusRefStructure represents the ParkingBayStatusRefStructure element
// Type for a reference to a PARKING BAY STATUS.
type ParkingBayStatusRefStructure struct {
	TypeOfValueRefStructure
}

// RentalAvailabilityRefStructure represents the RentalAvailabilityRefStructure element
// Type for a reference to a RENTAL AVAILABILITY.
type RentalAvailabilityRefStructure struct {
	VersionOfObjectRefStructure
}

// ParkingBayConditionRefStructure represents the ParkingBayConditionRefStructure element
// Type for a reference to a PPARKING BAY CONDITION.
type ParkingBayConditionRefStructure struct {
	LogEntryRefStructure
}

// MonitoredVehicleSharingParkingBayRef represents the MonitoredVehicleSharingParkingBayRef element
// Reference to a MONITORED VEHICLE SHARING PARKING BAY. +v1.2.2
type MonitoredVehicleSharingParkingBayRef struct {
	MonitoredVehicleSharingParkingBayRefStructure
}

// ParkingBayStatusRef represents the ParkingBayStatusRef element
// Reference to a PARKING BAY STATUS. +v1.2.2
type ParkingBayStatusRef struct {
	ParkingBayStatusRefStructure
}

// RentalAvailabilityRef represents the RentalAvailabilityRef element
// Reference to a RENTAL AVAILABILITY. +v1.2.2
type RentalAvailabilityRef struct {
	ParkingBayStatusRefStructure
}

// ParkingBayConditionRef represents the ParkingBayConditionRef element
// Reference to a PARKING BAY CONDITION. +v1.2.2
type ParkingBayConditionRef struct {
	ParkingBayStatusRefStructure
}

// ParkingLogEntriesRelStructure represents the parkingLogEntries_RelStructure element
// Type for a list of PARKING LOG ENTRYs.
type ParkingLogEntriesRelStructure struct {
	ContainmentAggregationStructure
	ParkingBayConditionRef []ParkingBayConditionRef `xml:"ParkingBayConditionRef,omitempty" json:"ParkingBayConditionRef,omitempty"`
	RentalAvailabilityRef []RentalAvailabilityRef `xml:"RentalAvailabilityRef,omitempty" json:"RentalAvailabilityRef,omitempty"`
	ParkingBayCondition []ParkingBayCondition `xml:"ParkingBayCondition,omitempty" json:"ParkingBayCondition,omitempty"`
	RentalAvailability []RentalAvailability `xml:"RentalAvailability,omitempty" json:"RentalAvailability,omitempty"`
}

// ParkingLogEntriesInFrameRelStructure represents the parkingLogEntriesInFrame_RelStructure element
// Type for a list of PARKING LOG ENTRYs in a frame.
type ParkingLogEntriesInFrameRelStructure struct {
	ContainmentAggregationStructure
	ParkingBayCondition []ParkingBayCondition `xml:"ParkingBayCondition,omitempty" json:"ParkingBayCondition,omitempty"`
	RentalAvailability []RentalAvailability `xml:"RentalAvailability,omitempty" json:"RentalAvailability,omitempty"`
}

// MonitoredVehicleSharingParkingBayVersionStructure represents the MonitoredVehicleSharingParkingBay_VersionStructure element
// Type for MONITORED VEHICLE SHARING  PARKING BAY.
type MonitoredVehicleSharingParkingBayVersionStructure struct {
	VehicleSharingParkingBayVersionStructure
	// Current status
	Status *ParkingBayStatusEnumeration `xml:"Status,omitempty" json:"Status,omitempty"`
	ParkingBayStatusRef *ParkingBayStatusRef `xml:"ParkingBayStatusRef,omitempty" json:"ParkingBayStatusRef,omitempty"`
}

// ParkingBayStatusValueStructure represents the ParkingBayStatus_ValueStructure element
// Type for a PARKING BAY STATUS.
type ParkingBayStatusValueStructure struct {
	TypeOfValueVersionStructure
	// Current status
	Status *ParkingBayStatusEnumeration `xml:"Status,omitempty" json:"Status,omitempty"`
}

// RentalAvailabilityVersionStructure represents the RentalAvailability_VersionStructure element
// Type for a RENTAL AVAILABILITY.
type RentalAvailabilityVersionStructure struct {
	LogEntryVersionStructure
	ParkingRef ParkingRef `xml:"ParkingRef" json:"ParkingRef"`
	// Whether the parking is zurrently operational.
	IsOperational *bool `xml:"IsOperational,omitempty" json:"IsOperational,omitempty"`
	// Whether the parking is currently renting out vehicles.
	IsRenting *bool `xml:"IsRenting,omitempty" json:"IsRenting,omitempty"`
	// Whether the parking is currently accepting returned vehicles.
	IsAcceptingReturns *bool `xml:"IsAcceptingReturns,omitempty" json:"IsAcceptingReturns,omitempty"`
	// Number of vehicles  available for rental at the site.
	AvailableVehicles *int `xml:"AvailableVehicles,omitempty" json:"AvailableVehicles,omitempty"`
	// Number of disabled vehicles not available for rental at the site.
	DisabledVehicles *int `xml:"DisabledVehicles,omitempty" json:"DisabledVehicles,omitempty"`
	// Number of docks available to accept vehicle returns.
	AvailableDocks *int `xml:"AvailableDocks,omitempty" json:"AvailableDocks,omitempty"`
	// Number of empty but disabled dock points at the site.
	DisabledDocks *int `xml:"DisabledDocks,omitempty" json:"DisabledDocks,omitempty"`
}

// ParkingBayConditionVersionStructure represents the ParkingBayCondition_VersionStructure element
// Type for a PARKING BAY CONDITION..
type ParkingBayConditionVersionStructure struct {
	LogEntryVersionStructure
	VehiclePoolingParkingBayRef *VehiclePoolingParkingBayRef `xml:"VehiclePoolingParkingBayRef,omitempty" json:"VehiclePoolingParkingBayRef,omitempty"`
	MonitoredVehicleSharingParkingBayRef *MonitoredVehicleSharingParkingBayRef `xml:"MonitoredVehicleSharingParkingBayRef,omitempty" json:"MonitoredVehicleSharingParkingBayRef,omitempty"`
	VehicleSharingParkingBayRef *VehicleSharingParkingBayRef `xml:"VehicleSharingParkingBayRef,omitempty" json:"VehicleSharingParkingBayRef,omitempty"`
	ParkingBayRef *ParkingBayRef `xml:"ParkingBayRef,omitempty" json:"ParkingBayRef,omitempty"`
	// Current status
	Status *ParkingBayStatusEnumeration `xml:"Status,omitempty" json:"Status,omitempty"`
	ParkingBayStatusRef *ParkingBayStatusRef `xml:"ParkingBayStatusRef,omitempty" json:"ParkingBayStatusRef,omitempty"`
}

// ParkingLogEntry represents the ParkingLogEntry_ element
// Dummy type for  Parking Log ENTRY.
type ParkingLogEntry struct {
	DataManagedObjectStructure
}

// MonitoredVehicleSharingParkingBay represents the MonitoredVehicleSharingParkingBay element
// A spot in the PARKING AREA dedicated to MONITORED VEHICLE SHARING  or rental. 	+v1.2.2
type MonitoredVehicleSharingParkingBay struct {
	MonitoredVehicleSharingParkingBayVersionStructure
}

// ParkingBayStatus represents the ParkingBayStatus element
// A categorisation of the  availability of the parking spot, such as being temporarily closed, unavailable, available. +v1.2.2
// 
// .  +v1.2.2
type ParkingBayStatus struct {
	ParkingBayStatusValueStructure
}

// RentalAvailability represents the RentalAvailability element
// A summary of the status of the rental at a  SITE  at a given point on time.  +v1.2.2
type RentalAvailability struct {
	RentalAvailabilityVersionStructure
}

// ParkingBayCondition represents the ParkingBayCondition element
// A record of the status of the PARKING BAY at a given moment in time.  +v1.2.2
type ParkingBayCondition struct {
	ParkingBayConditionVersionStructure
}

// SingleJourneyPathsRelStructure represents the singleJourneyPaths_RelStructure element
// Type for a list of references to a SINGLE JOURNEY PATH.
type SingleJourneyPathsRelStructure struct {
	ContainmentAggregationStructure
	SingleJourneyPath []SingleJourneyPath `xml:"SingleJourneyPath,omitempty" json:"SingleJourneyPath,omitempty"`
}

// SingleJourneyPathVersionStructure represents the SingleJourneyPath_VersionStructure element
// Type for SINGLE JOURNEY PATH. +v1.2.2
type SingleJourneyPathVersionStructure struct {
	LinkSequenceVersionStructure
	RouteRef *RouteRef `xml:"RouteRef,omitempty" json:"RouteRef,omitempty"`
	PointsInSequence *VehicleMeetingPointsInSequenceRelStructure `xml:"pointsInSequence,omitempty" json:"pointsInSequence,omitempty"`
}

// VehicleMeetingPointsInSequenceRelStructure represents the vehicleMeetingPointsInSequence_RelStructure element
// Type for a list of a VEHICLE MEETING POINTS in Sequence
type VehicleMeetingPointsInSequenceRelStructure struct {
	ContainmentAggregationStructure
	// A group of VEHICLE JOURNEYs following the same JOURNEY PATTERN having the same HEADWAY INTERVAL between a specified start and end time (for example, every 10 min). This is especially useful for passenger information.
	VehicleMeetingPointInPath []VehicleMeetingPointInPath `xml:"VehicleMeetingPointInPath" json:"VehicleMeetingPointInPath"`
}

// VehicleMeetingPointInPathVersionStructure represents the VehicleMeetingPointInPath_VersionStructure element
// Type for VEHICLE MEETING POINT IN SINGLE JOURNEY PATH .
type VehicleMeetingPointInPathVersionStructure struct {
	PointInJourneyPatternVersionedChildStructure
	OnwardVehicleMeetingLinkRef *OnwardVehicleMeetingLinkRef `xml:"OnwardVehicleMeetingLinkRef,omitempty" json:"OnwardVehicleMeetingLinkRef,omitempty"`
}

// SingleJourneyPath represents the SingleJourneyPath element
// The planned movement of a public transport vehicle on a DAY TYPE from the start point to the end point of a JOURNEY PATTERN on a specified ROUTE.  +v1.2.2
type SingleJourneyPath struct {
	SingleJourneyPathVersionStructure
}

// VehicleMeetingPointInPath represents the VehicleMeetingPointInPath element
// The planned movement of a public transport vehicle on a DAY TYPE from the start point to the end point of a JOURNEY PATTERN on a specified ROUTE.  +v1.2.2
type VehicleMeetingPointInPath struct {
	VehicleMeetingPointInPathVersionStructure
}

// SingleJourneysRelStructure represents the singleJourneys_RelStructure element
// Type for a list of references to a SINGLE JOURNEY.
type SingleJourneysRelStructure struct {
	ContainmentAggregationStructure
	SingleJourney []SingleJourney `xml:"SingleJourney,omitempty" json:"SingleJourney,omitempty"`
}

// SingleJourneyVersionStructure represents the SingleJourney_VersionStructure element
// Type for SINGLE JOURNEY.
type SingleJourneyVersionStructure struct {
	JourneyVersionStructure
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	VehicleRef *VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
	SingleJourneyPathRef *SingleJourneyPathRef `xml:"SingleJourneyPathRef,omitempty" json:"SingleJourneyPathRef,omitempty"`
	// Departure time.
	DepartureTime *string `xml:"DepartureTime,omitempty" json:"DepartureTime,omitempty"`
	// Departure Time Day Offset
	DepartureDayOffset *int `xml:"DepartureDayOffset,omitempty" json:"DepartureDayOffset,omitempty"`
	OperatingDayRef *OperatingDayRef `xml:"OperatingDayRef,omitempty" json:"OperatingDayRef,omitempty"`
	// DATED PASSING TIMEsfor SINGLE JOURNEY
	DatedPassingTimes *TargetPassingTimesRelStructure `xml:"datedPassingTimes,omitempty" json:"datedPassingTimes,omitempty"`
	// MEETING POINT ASSIGNMENTS for SINGLE JOURNEY
	MeetingPointAssignments *VehicleMeetingPointAssignmentsRelStructure `xml:"meetingPointAssignments,omitempty" json:"meetingPointAssignments,omitempty"`
}

// GroupsOfSingleJourneysRelStructure represents the groupsOfSingleJourneys_RelStructure element
// Type for a list of references to GROUPs OF SINGLE JOURNEYs.
type GroupsOfSingleJourneysRelStructure struct {
	ContainmentAggregationStructure
	GroupOfSingleJourneys []GroupOfSingleJourneys `xml:"GroupOfSingleJourneys,omitempty" json:"GroupOfSingleJourneys,omitempty"`
}

// GroupOfSingleJourneysVersionStructure represents the GroupOfSingleJourneys_VersionStructure element
// Type for a GROUP OF SINGLE JOURNEYs.
type GroupOfSingleJourneysVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// Services in GROUP.
	Members *SingleJourneyRefsRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	// NOTICEs  relevant for the whole GROUP OF SINGLE JOURNEYs.
	NoticeAssignments *NoticeAssignmentsRelStructure `xml:"noticeAssignments,omitempty" json:"noticeAssignments,omitempty"`
}

// SingleJourney represents the SingleJourney element
// The planned movement of a public transport vehicle on a DAY TYPE from the start point to the end point of a JOURNEY PATTERN on a specified ROUTE.  +v1.2.2
type SingleJourney struct {
	SingleJourneyVersionStructure
}

// GroupOfSingleJourneys represents the GroupOfSingleJourneys element
// A GROUP OF SINGLE JOURNEYs, often known to its users by a name or a number. +v1.2.2
type GroupOfSingleJourneys struct {
	GroupOfSingleJourneysVersionStructure
}

// IndividualTravellersInFrameRelStructure represents the individualTravellersInFrame_RelStructure element
// Type for containment in frame of INDIVIDUAL TRAVELLERs.
type IndividualTravellersInFrameRelStructure struct {
	FrameContainmentStructure
	IndividualTraveller []IndividualTraveller `xml:"IndividualTraveller" json:"IndividualTraveller"`
}

// IndividualTravellersRelStructure represents the individualTravellers_RelStructure element
// Type for a list of INDIVIDUAL TRAVELLERs.
type IndividualTravellersRelStructure struct {
	ContainmentAggregationStructure
	IndividualTravellerRef []IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	IndividualTraveller []IndividualTraveller `xml:"IndividualTraveller,omitempty" json:"IndividualTraveller,omitempty"`
}

// IndividualTravellerVersionStructure represents the IndividualTraveller_VersionStructure element
// Type for INDIVIDUAL TRAVELLER.
type IndividualTravellerVersionStructure struct {
	DataManagedObjectStructure
	// Name of Traveller
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	CustomerRef *CustomerRef `xml:"CustomerRef,omitempty" json:"CustomerRef,omitempty"`
	// Whether traveller'ss identify has been verified. has been
	IdentityVerified *bool `xml:"IdentityVerified,omitempty" json:"IdentityVerified,omitempty"`
	// Rating for traveller
	Ranking *int `xml:"Ranking,omitempty" json:"Ranking,omitempty"`
	// Gender of traveller.
	Gender *GenderEnumeration `xml:"Gender,omitempty" json:"Gender,omitempty"`
	// Whether traveller likes to talk.
	Talkative *bool `xml:"Talkative,omitempty" json:"Talkative,omitempty"`
	// Whether traveller  likes to talk.
	Smoker *bool `xml:"Smoker,omitempty" json:"Smoker,omitempty"`
	// Languages spoken
	Languages *string `xml:"Languages,omitempty" json:"Languages,omitempty"`
	// VEHICLE POOLING DRIVER INFOrs for Traveller
	VehiclePoolingDriverInfos *VehiclePoolingDriverInfosRelStructure `xml:"vehiclePoolingDriverInfos,omitempty" json:"vehiclePoolingDriverInfos,omitempty"`
	// INDIVIDUAL PASSENGER INFOrs for Traveller
	IndividualPassengerInfos *IndividualPassengerInfosRelStructure `xml:"individualPassengerInfos,omitempty" json:"individualPassengerInfos,omitempty"`
}

// VehiclePoolingDriverInfosRelStructure represents the vehiclePoolingDriverInfos_RelStructure element
// Type for a list of VEHICLE POOLING DRIVER INFOs.
type VehiclePoolingDriverInfosRelStructure struct {
	ContainmentAggregationStructure
	VehiclePoolingDriverInfo []VehiclePoolingDriverInfo `xml:"VehiclePoolingDriverInfo" json:"VehiclePoolingDriverInfo"`
}

// VehiclePoolingDriverInfoVersionStructure represents the VehiclePoolingDriverInfo_VersionStructure element
// Type for VEHICLE POOLING DRIVER INFO.
type VehiclePoolingDriverInfoVersionStructure struct {
	DataManagedObjectStructure
	IndividualTravellerRef *IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	// Rating for driver.
	Ranking *int `xml:"Ranking,omitempty" json:"Ranking,omitempty"`
	// Date of last trip.
	LastTripDate *time.Time `xml:"LastTripDate,omitempty" json:"LastTripDate,omitempty"`
	// Comments on driver.
	CommentsAbout *MultilingualString `xml:"CommentsAbout,omitempty" json:"CommentsAbout,omitempty"`
	// Whether driver has pet.
	TravellingWithPet *bool `xml:"TravellingWithPet,omitempty" json:"TravellingWithPet,omitempty"`
	// Whether driving licence has been verified.
	DrivingLicenceVerified *bool `xml:"DrivingLicenceVerified,omitempty" json:"DrivingLicenceVerified,omitempty"`
	// Whether insurance has been verified.
	InsuranceVerified *bool `xml:"InsuranceVerified,omitempty" json:"InsuranceVerified,omitempty"`
	// Preferrred style of driving.
	DrivingStyle *DrivingStyleEnumeration `xml:"DrivingStyle,omitempty" json:"DrivingStyle,omitempty"`
	// Number of trips proposed
	NumberOfProposedTrips *int `xml:"NumberOfProposedTrips,omitempty" json:"NumberOfProposedTrips,omitempty"`
	// Number of travellers carried
	NumberOfTravellersCarried *int `xml:"NumberOfTravellersCarried,omitempty" json:"NumberOfTravellersCarried,omitempty"`
	VehicleRef *VehicleRef `xml:"VehicleRef,omitempty" json:"VehicleRef,omitempty"`
}

// IndividualPassengerInfosRelStructure represents the individualPassengerInfos_RelStructure element
// Type for a list of INDIVIDUAL PASSENGER INFOs.
type IndividualPassengerInfosRelStructure struct {
	ContainmentAggregationStructure
	IndividualPassengerInfo []IndividualPassengerInfo `xml:"IndividualPassengerInfo" json:"IndividualPassengerInfo"`
}

// IndividualPassengerInfoVersionStructure represents the IndividualPassengerInfo_VersionStructure element
// Type for INDIVIDUAL PASSENGER INFO.
type IndividualPassengerInfoVersionStructure struct {
	DataManagedObjectStructure
	IndividualTravellerRef *IndividualTravellerRef `xml:"IndividualTravellerRef,omitempty" json:"IndividualTravellerRef,omitempty"`
	// Rating for driver.
	Ranking *int `xml:"Ranking,omitempty" json:"Ranking,omitempty"`
	// Date of last trip.
	LastTripDate *time.Time `xml:"LastTripDate,omitempty" json:"LastTripDate,omitempty"`
	// Comments on passenger.
	CommentsAbout *MultilingualString `xml:"CommentsAbout,omitempty" json:"CommentsAbout,omitempty"`
	// Whether  travelling with Pet.
	TravellingWithPet *bool `xml:"TravellingWithPet,omitempty" json:"TravellingWithPet,omitempty"`
}

// IndividualTraveller represents the IndividualTraveller element
// Individual travelling person.  +v1.2.2
type IndividualTraveller struct {
	IndividualTravellerVersionStructure
}

// VehiclePoolingDriverInfo represents the VehiclePoolingDriverInfo element
// Information characterising an INDIVIDUAL TRAVELER as a driver of a VEHICLE POOLING SERVICE.
//   +v1.2.2
type VehiclePoolingDriverInfo struct {
	VehiclePoolingDriverInfoVersionStructure
}

// IndividualPassengerInfo represents the IndividualPassengerInfo element
// Information characterising an INDIVIDUAL TRAVELER as a driver of a VEHICLE POOLING SERVICE.
//   +v1.2.2
type IndividualPassengerInfo struct {
	IndividualPassengerInfoVersionStructure
}

// VehiclePoolerProfileRefStructure represents the VehiclePoolerProfileRefStructure element
// Type for Reference to a VEHICLE POOLER PROFILE usage parameter
type VehiclePoolerProfileRefStructure struct {
	UserProfileRefStructure
}

// VehiclePoolerProfileRef represents the VehiclePoolerProfileRef element
// Reference to a VEHICLE POOLER PROFILE usage parameter. +v1.2.2
type VehiclePoolerProfileRef struct {
	VehiclePoolerProfileRefStructure
}

// VehiclePoolerProfileVersionStructure represents the VehiclePoolerProfile_VersionStructure element
// Type for VEHICLE POOLER PROFILE.
type VehiclePoolerProfileVersionStructure struct {
	UserProfileVersionStructure
	// Host uder profile offering these pooler prferences
	HostUserProfileRef *UserProfileRefStructure `xml:"HostUserProfileRef,omitempty" json:"HostUserProfileRef,omitempty"`
	// Whether pets are  is allowed by the host pooler.
	SmokingAllowed *bool `xml:"SmokingAllowed,omitempty" json:"SmokingAllowed,omitempty"`
	// Whether smoking  is allowed by the host pooler.
	PetsAllowed *bool `xml:"PetsAllowed,omitempty" json:"PetsAllowed,omitempty"`
	// Whether the pooler is prepared to carry luggage for the passenger. The nature of the luggage accepted can be specified by one or more separate LUGGAGE ALLOWANCE elements. (It may be different on different journeys)
	LuggageAllowed *bool `xml:"LuggageAllowed,omitempty" json:"LuggageAllowed,omitempty"`
	// Whether the pooler is prepared to make a detour.
	DetourAccepted *bool `xml:"DetourAccepted,omitempty" json:"DetourAccepted,omitempty"`
}

// VehiclePoolerProfile represents the VehiclePoolerProfile element
// A set of USER PARAMETERS characterising access rights to VEHICLE POOLING SERVICE. +v1.2.2
type VehiclePoolerProfile struct {
	VehiclePoolerProfileVersionStructure
}

// RentalPenaltyPolicyTypeEnumeration represents the RentalPenaltyPolicyTypeEnumeration enumeration
// Allowed values for RENTAL PENALTY POLICY Type.
type RentalPenaltyPolicyTypeEnumeration string

const (
	// RentalPenaltyPolicyTypeEnumerationRefuelling represents refuelling
	RentalPenaltyPolicyTypeEnumerationRefuelling RentalPenaltyPolicyTypeEnumeration = "refuelling"
	// RentalPenaltyPolicyTypeEnumerationVehicleTransfer represents vehicleTransfer
	RentalPenaltyPolicyTypeEnumerationVehicleTransfer RentalPenaltyPolicyTypeEnumeration = "vehicleTransfer"
	// RentalPenaltyPolicyTypeEnumerationLateVehicleReturn represents lateVehicleReturn
	RentalPenaltyPolicyTypeEnumerationLateVehicleReturn RentalPenaltyPolicyTypeEnumeration = "lateVehicleReturn"
	// RentalPenaltyPolicyTypeEnumerationNoVehicleReturn represents noVehicleReturn
	RentalPenaltyPolicyTypeEnumerationNoVehicleReturn RentalPenaltyPolicyTypeEnumeration = "noVehicleReturn"
	// RentalPenaltyPolicyTypeEnumerationDamageToVehicle represents damageToVehicle
	RentalPenaltyPolicyTypeEnumerationDamageToVehicle RentalPenaltyPolicyTypeEnumeration = "damageToVehicle"
	// RentalPenaltyPolicyTypeEnumerationDamageToEquipment represents damageToEquipment
	RentalPenaltyPolicyTypeEnumerationDamageToEquipment RentalPenaltyPolicyTypeEnumeration = "damageToEquipment"
	// RentalPenaltyPolicyTypeEnumerationLossOfEquipment represents lossOfEquipment
	RentalPenaltyPolicyTypeEnumerationLossOfEquipment RentalPenaltyPolicyTypeEnumeration = "lossOfEquipment"
	// RentalPenaltyPolicyTypeEnumerationZoneTransgression represents zoneTransgression
	RentalPenaltyPolicyTypeEnumerationZoneTransgression RentalPenaltyPolicyTypeEnumeration = "zoneTransgression"
	// RentalPenaltyPolicyTypeEnumerationTrafficFine represents trafficFine
	RentalPenaltyPolicyTypeEnumerationTrafficFine RentalPenaltyPolicyTypeEnumeration = "trafficFine"
	// RentalPenaltyPolicyTypeEnumerationHandlingFeeForFine represents handlingFeeForFine
	RentalPenaltyPolicyTypeEnumerationHandlingFeeForFine RentalPenaltyPolicyTypeEnumeration = "handlingFeeForFine"
	// RentalPenaltyPolicyTypeEnumerationOther represents other
	RentalPenaltyPolicyTypeEnumerationOther RentalPenaltyPolicyTypeEnumeration = "other"
)

// AdditionalDriverTypeEnumeration represents the AdditionalDriverTypeEnumeration enumeration
// Allowed values for ADDITIONAL DRIVER   Type
type AdditionalDriverTypeEnumeration string

const (
	// AdditionalDriverTypeEnumerationNone represents none
	AdditionalDriverTypeEnumerationNone AdditionalDriverTypeEnumeration = "none"
	// AdditionalDriverTypeEnumerationNamed represents named
	AdditionalDriverTypeEnumerationNamed AdditionalDriverTypeEnumeration = "named"
	// AdditionalDriverTypeEnumerationAny represents any
	AdditionalDriverTypeEnumerationAny AdditionalDriverTypeEnumeration = "any"
	// AdditionalDriverTypeEnumerationOther represents other
	AdditionalDriverTypeEnumerationOther AdditionalDriverTypeEnumeration = "other"
)

// DriverTypeFeeBasisEnumeration represents the DriverTypeFeeBasisEnumeration enumeration
// Allowed values for DROVER FEE BASIS  Type
type DriverTypeFeeBasisEnumeration string

const (
	// DriverTypeFeeBasisEnumerationFree represents free
	DriverTypeFeeBasisEnumerationFree DriverTypeFeeBasisEnumeration = "free"
	// DriverTypeFeeBasisEnumerationPerAddtionalDriver represents perAddtionalDriver
	DriverTypeFeeBasisEnumerationPerAddtionalDriver DriverTypeFeeBasisEnumeration = "perAddtionalDriver"
	// DriverTypeFeeBasisEnumerationOther represents other
	DriverTypeFeeBasisEnumerationOther DriverTypeFeeBasisEnumeration = "other"
)

// RentalPenaltyPolicyRefStructure represents the RentalPenaltyPolicyRefStructure element
// Type for Reference to a RENTAL PENALTY POLICY usage parameter.
type RentalPenaltyPolicyRefStructure struct {
	UsageParameterRefStructure
}

// RentalOptionRefStructure represents the RentalOptionRefStructure element
// Type for Reference to a RENTAL OPTION usage parameter.
type RentalOptionRefStructure struct {
	UsageParameterRefStructure
}

// AdditionalDriverOptionRefStructure represents the AdditionalDriverOptionRefStructure element
// Type for Reference to a ADDITIONAL DRIVER OPTION usage parameter.
type AdditionalDriverOptionRefStructure struct {
	RentalOptionRefStructure
}

// RentalPenaltyPolicyRef represents the RentalPenaltyPolicyRef element
// Reference to a RENTAL PENALTY POLICY usage parameter. +v1.2.2
type RentalPenaltyPolicyRef struct {
	RentalPenaltyPolicyRefStructure
}

// RentalOptionRef represents the RentalOptionRef element
// Reference to a RENTAL OPTION usage parameter. +v1.2.2
type RentalOptionRef struct {
	RentalOptionRefStructure
}

// AdditionalDriverOptionRef represents the AdditionalDriverOptionRef element
// Reference to a ADDITIONAL DRIVER OPTION usage parameter. +v1.2.2
type AdditionalDriverOptionRef struct {
	AdditionalDriverOptionRefStructure
}

// RentalPenaltyPolicyVersionStructure represents the RentalPenaltyPolicy_VersionStructure element
// Type for RENTAL PENALTY POLICY.
type RentalPenaltyPolicyVersionStructure struct {
	UsageParameterVersionStructure
	// Type of RENTAL PENALTY POLICY type.
	RentalPenaltyPolicyType *RentalPenaltyPolicyTypeEnumeration `xml:"RentalPenaltyPolicyType,omitempty" json:"RentalPenaltyPolicyType,omitempty"`
	// Transgression results in penalty fee.
	PenaltyFee *bool `xml:"PenaltyFee,omitempty" json:"PenaltyFee,omitempty"`
	// Transgression results in Immobilisation.
	Immobilisation *bool `xml:"Immobilisation,omitempty" json:"Immobilisation,omitempty"`
	// Transgression results in loss of membership.
	Disbarring *bool `xml:"Disbarring,omitempty" json:"Disbarring,omitempty"`
	// Transgression results in suspension of membership.
	Suspension *bool `xml:"Suspension,omitempty" json:"Suspension,omitempty"`
}

// RentalOptionVersionStructure represents the RentalOption_VersionStructure element
// Type for RENTAL OPTION.
type RentalOptionVersionStructure struct {
	UsageParameterVersionStructure
}

// AdditionalDriverOptionVersionStructure represents the AdditionalDriverOption_VersionStructure element
// Type for ADDITIONAL DRIVER OPTION.
type AdditionalDriverOptionVersionStructure struct {
	RentalOptionVersionStructure
	// Additional driver options.
	AdditionalDriver *AdditionalDriverTypeEnumeration `xml:"AdditionalDriver,omitempty" json:"AdditionalDriver,omitempty"`
	// Additional driver options.
	DriverFeeBasis *DriverTypeFeeBasisEnumeration `xml:"DriverFeeBasis,omitempty" json:"DriverFeeBasis,omitempty"`
	// Maximimum Number of drivers allwoed.
	NumberOfdrivers *int `xml:"NumberOFDrivers,omitempty" json:"NumberOFDrivers,omitempty"`
}

// RentalPenaltyPolicy represents the RentalPenaltyPolicy element
// Policy regarding different aspects of RENTAL service penalty charges, for example loss of vehicle.
type RentalPenaltyPolicy struct {
	RentalPenaltyPolicyVersionStructure
}

// RentalOption represents the RentalOption element
// Parameters relating to paying by RentalOption for a product. +v1.1
type RentalOption struct {
	RentalOptionVersionStructure
}

// AdditionalDriverOption represents the AdditionalDriverOption element
// Parameters relating to paying by AdditionalDriverOption for a product. +v1.1
type AdditionalDriverOption struct {
	AdditionalDriverOptionVersionStructure
}

// FleetsRelStructure represents the fleets_RelStructure element
// Type for a list of  FLEETs.
type FleetsRelStructure struct {
	ContainmentAggregationStructure
	Fleet []Fleet `xml:"Fleet" json:"Fleet"`
}

// FleetVersionStructure represents the Fleet_VersionStructure element
// Type for a  FLEET.
type FleetVersionStructure struct {
	GroupOfEntitiesVersionStructure
	// VEHICLEs in FLEET,
	Members *VehiclesRelStructure `xml:"members,omitempty" json:"members,omitempty"`
	AuthorityRef *AuthorityRef `xml:"AuthorityRef,omitempty" json:"AuthorityRef,omitempty"`
	OperatorRef *OperatorRef `xml:"OperatorRef,omitempty" json:"OperatorRef,omitempty"`
	TypeOfFleetRef *TypeOfFleetRef `xml:"TypeOfFleetRef,omitempty" json:"TypeOfFleetRef,omitempty"`
	// VEHICLE TYPEs used in FLEET..
	TransportTypes *TransportTypeRefsRelStructure `xml:"transportTypes,omitempty" json:"transportTypes,omitempty"`
}

// TypeOfFleetValueStructure represents the TypeOfFleet_ValueStructure element
// Type for a TYPE OF FLEET.
type TypeOfFleetValueStructure struct {
	TypeOfValueVersionStructure
}

// Fleet represents the Fleet element
// A set of vehicles of any type.  +v1.2.2
type Fleet struct {
	FleetVersionStructure
}

// TypeOfFleet represents the TypeOfFleet element
// A classification for a FLEET of VEHICLEs.  +v1.2.2
type TypeOfFleet struct {
	TypeOfFleetValueStructure
}

// MobilityServiceConstraintZonesInFrameRelStructure represents the mobilityServiceConstraintZonesInFrame_RelStructure element
// Type for a list of references to a MOBILITY SERVICE CONSTRAINT ZONEs. in Frame
type MobilityServiceConstraintZonesInFrameRelStructure struct {
	ContainmentAggregationStructure
	MobilityServiceConstraintZone []MobilityServiceConstraintZone `xml:"MobilityServiceConstraintZone" json:"MobilityServiceConstraintZone"`
}

// MobilityServiceConstraintZonesRelStructure represents the mobilityServiceConstraintZones_RelStructure element
// Type for a list of references to a MOBILITY SERVICE CONSTRAINT ZONEs.
type MobilityServiceConstraintZonesRelStructure struct {
	ContainmentAggregationStructure
	MobilityServiceConstraintZoneRef []MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	MobilityServiceConstraintZone []MobilityServiceConstraintZone `xml:"MobilityServiceConstraintZone,omitempty" json:"MobilityServiceConstraintZone,omitempty"`
}

// MobilityServiceConstraintZoneVersionStructure represents the MobilityServiceConstraintZone_VersionStructure element
// Type for MOBILITY SERVICE CONSTRAINT ZONE restricts id.
type MobilityServiceConstraintZoneVersionStructure struct {
	ZoneVersionStructure
	// Applicability of rule inside (defaut) or outside of zone
	RuleApplicability *ZoneRuleApplicabilityEnumeration `xml:"RuleApplicability,omitempty" json:"RuleApplicability,omitempty"`
	// How ZONE may be used.
	ZoneUse *TransportZoneUseEnumeration `xml:"ZoneUse,omitempty" json:"ZoneUse,omitempty"`
	// Maximum speed  in  ZONE.
	MaximumSpeed *float64 `xml:"MaximumSpeed,omitempty" json:"MaximumSpeed,omitempty"`
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	// Vehclie restrictions in Zone
	VehicleRestrictions *VehicleTypeZoneRestrictionsRelStructure `xml:"vehicleRestrictions,omitempty" json:"vehicleRestrictions,omitempty"`
}

// VehicleTypeZoneRestrictionsRelStructure represents the vehicleTypeZoneRestrictions_RelStructure element
// Type for a list of references to a VEHICLE TYPE ZONE RESTRICTIONs.
type VehicleTypeZoneRestrictionsRelStructure struct {
	ContainmentAggregationStructure
	VehicleTypeZoneRestriction []VehicleTypeZoneRestriction `xml:"VehicleTypeZoneRestriction,omitempty" json:"VehicleTypeZoneRestriction,omitempty"`
}

// VehicleTypeZoneRestrictionVersionStructure represents the VehicleTypeZoneRestriction_VersionStructure element
// Type for VEHICLE TYPE ZONE RESTRICTION restricts id.
type VehicleTypeZoneRestrictionVersionStructure struct {
	VersionedChildStructure
	// How ZONE may be used.
	ZoneUse *TransportZoneUseEnumeration `xml:"ZoneUse,omitempty" json:"ZoneUse,omitempty"`
	// Maximum speed  in  ZONE.
	MaximumSpeed *float64 `xml:"MaximumSpeed,omitempty" json:"MaximumSpeed,omitempty"`
	SimpleVehicleTypeRef *SimpleVehicleTypeRef `xml:"SimpleVehicleTypeRef,omitempty" json:"SimpleVehicleTypeRef,omitempty"`
	CompoundTrainRef *CompoundTrainRef `xml:"CompoundTrainRef,omitempty" json:"CompoundTrainRef,omitempty"`
	TrainRef *TrainRef `xml:"TrainRef,omitempty" json:"TrainRef,omitempty"`
	VehicleTypeRef *VehicleTypeRef `xml:"VehicleTypeRef,omitempty" json:"VehicleTypeRef,omitempty"`
	TransportTypeRef *TransportTypeRef `xml:"TransportTypeRef,omitempty" json:"TransportTypeRef,omitempty"`
}

// PoolOfVehiclesRelStructure represents the poolOfVehicles_RelStructure element
// Type for a list of references to a POOL OF VEHICLEs.
type PoolOfVehiclesRelStructure struct {
	ContainmentAggregationStructure
	// A set of vehicles assigned to a specific PARKING, PARKING AREAs, PARKING BAYs, p lace  or MOBILITY CONSTRAINT ZONE that must be  picked up and returned to the same area.
	// .  +v1.2.2
	PoolOfVehicles []PoolOfVehicles `xml:"PoolOfVehicles,omitempty" json:"PoolOfVehicles,omitempty"`
}

// PoolOfVehiclesVersionStructure represents the PoolOfVehicles_VersionStructure element
// Type for POOL OF VEHICLEs restricts id.
type PoolOfVehiclesVersionStructure struct {
	GroupOfEntitiesVersionStructure
	OnlineServiceRef *OnlineServiceRef `xml:"OnlineServiceRef,omitempty" json:"OnlineServiceRef,omitempty"`
	VehicleRentalServiceRef *VehicleRentalServiceRef `xml:"VehicleRentalServiceRef,omitempty" json:"VehicleRentalServiceRef,omitempty"`
	VehicleSharingServiceRef *VehicleSharingServiceRef `xml:"VehicleSharingServiceRef,omitempty" json:"VehicleSharingServiceRef,omitempty"`
	ChauffeuredVehicleServiceRef *ChauffeuredVehicleServiceRef `xml:"ChauffeuredVehicleServiceRef,omitempty" json:"ChauffeuredVehicleServiceRef,omitempty"`
	TaxiServiceRef *TaxiServiceRef `xml:"TaxiServiceRef,omitempty" json:"TaxiServiceRef,omitempty"`
	CarPoolingServiceRef *CarPoolingServiceRef `xml:"CarPoolingServiceRef,omitempty" json:"CarPoolingServiceRef,omitempty"`
	MobilityServiceConstraintZoneRef *MobilityServiceConstraintZoneRef `xml:"MobilityServiceConstraintZoneRef,omitempty" json:"MobilityServiceConstraintZoneRef,omitempty"`
	ParkingRef *ParkingRef `xml:"ParkingRef,omitempty" json:"ParkingRef,omitempty"`
	// Vehclie restrictions in Zone
	ParkingComponents *ParkingComponentRefsRelStructure `xml:"parkingComponents,omitempty" json:"parkingComponents,omitempty"`
	// Whether a VEICLE must be returned to same bay as it was was taken from.
	MustReturnToSameBay *bool `xml:"MustReturnToSameBay,omitempty" json:"MustReturnToSameBay,omitempty"`
	// VEHICLEs in POOL OF VEHICLEs.
	Vehicles *VehicleRefsRelStructure `xml:"vehicles,omitempty" json:"vehicles,omitempty"`
}

// MobilityServiceConstraintZone represents the MobilityServiceConstraintZone element
// ZONE defining a restriction on used of a MOBILITY SERVICE, e.g. no entry, no drop off, etc, etc   +v1.2.2
type MobilityServiceConstraintZone struct {
	MobilityServiceConstraintZoneVersionStructure
}

// VehicleTypeZoneRestriction represents the VehicleTypeZoneRestriction element
// A POINT where passengers can board or alight from vehicles.  +v1.2.2
type VehicleTypeZoneRestriction struct {
	VehicleTypeZoneRestrictionVersionStructure
}

// PoolOfVehicles represents the PoolOfVehicles element
// A set of vehicles assigned to a specific PARKING, PARKING AREAs, PARKING BAYs, p lace  or MOBILITY CONSTRAINT ZONE that must be  picked up and returned to the same area.
//   +v1.2.2
type PoolOfVehicles struct {
	PoolOfVehiclesVersionStructure
}

// MobilityServiceFrameRefStructure represents the MobilityServiceFrameRefStructure element
// Type for a reference to a MOBILITY SERVICE FRAME.
type MobilityServiceFrameRefStructure struct {
	VersionFrameRefStructure
}

// MobilityServiceVersionFrameStructure represents the MobilityService_VersionFrameStructure element
// Type for a MOBILITY SERVICE FRAME.
type MobilityServiceVersionFrameStructure struct {
	CommonVersionFrameStructure
	// FLEETs in Frame
	Fleets *FleetsRelStructure `xml:"fleets,omitempty" json:"fleets,omitempty"`
	// POOLs OF VEHICLEs in Frame
	PoolsOfVehicles *PoolOfVehiclesRelStructure `xml:"poolsOfVehicles,omitempty" json:"poolsOfVehicles,omitempty"`
	// MODEs of OPERATION
	ModesOfOperation *ModesOfOperationRelStructure `xml:"modesOfOperation,omitempty" json:"modesOfOperation,omitempty"`
	// MOBILITY SERVICEs in frame.
	MobilityServices *MobilityServicesRelStructure `xml:"mobilityServices,omitempty" json:"mobilityServices,omitempty"`
	// ONLINE  SERVICEs in frame.
	OnlineServices *OnlineServicesRelStructure `xml:"onlineServices,omitempty" json:"onlineServices,omitempty"`
	// VEHICLE MEETING POINTs in frame.
	VehicleMeetingPoints *VehicleMeetingPointsInFrameRelStructure `xml:"vehicleMeetingPoints,omitempty" json:"vehicleMeetingPoints,omitempty"`
	// VEHICLE MEETING POINTs in frame.
	VehicleMeetingLinks *VehicleMeetingLinksInFrameRelStructure `xml:"vehicleMeetingLinks,omitempty" json:"vehicleMeetingLinks,omitempty"`
	// VEHICLE MEETING POINT ASSIGNMENTs in frame.
	VehicleMeetingPointAssignments *VehicleMeetingPointAssignmentsInFrameRelStructure `xml:"vehicleMeetingPointAssignments,omitempty" json:"vehicleMeetingPointAssignments,omitempty"`
	// VEHICLE MEETIN.G PLACES  in frame.
	VehicleMeetingPlaces *VehicleMeetingPlacesRelStructure `xml:"vehicleMeetingPlaces,omitempty" json:"vehicleMeetingPlaces,omitempty"`
	// VEHICLE SERVICE PLACE ASSIGNMENTs in frame.
	VehicleMeetingPlaceAssignments *VehicleServicePlaceAssignmentsRelStructure `xml:"vehicleMeetingPlaceAssignments,omitempty" json:"vehicleMeetingPlaceAssignments,omitempty"`
	// Zone use restrictions in FRAME.
	MobilityServiceConstraintZones *MobilityServiceConstraintZonesInFrameRelStructure `xml:"mobilityServiceConstraintZones,omitempty" json:"mobilityServiceConstraintZones,omitempty"`
}

// MobilityServiceFrameRef represents the MobilityServiceFrameRef element
// Reference to a MOBILITY SERVICE FRAME.
type MobilityServiceFrameRef struct {
	MobilityServiceFrameRefStructure
}

// MobilityServiceFrame represents the MobilityServiceFrame element
// A coherent set of MOBILITY SERVICE data to which the same frame VALIDITY CONDITIONs have been assigned. +v1.2.2
type MobilityServiceFrame struct {
	MobilityServiceVersionFrameStructure
}

// MobilityJourneyFrameRefStructure represents the MobilityJourneyFrameRefStructure element
// Type for a reference to a MOBILITY JOURNEY FRAME.
type MobilityJourneyFrameRefStructure struct {
	VersionFrameRefStructure
}

// MobilityJourneyVersionFrameStructure represents the MobilityJourney_VersionFrameStructure element
// Type for a MOBILITY JOURNEY FRAME.
type MobilityJourneyVersionFrameStructure struct {
	CommonVersionFrameStructure
	// SINGLE JOURNEY PATHss in frame.
	SingleJourneyPaths *SingleJourneyPathsRelStructure `xml:"singleJourneyPaths,omitempty" json:"singleJourneyPaths,omitempty"`
	// GROUPS OF SINGLE JOURNEYs in frame.
	GroupsOfSingleJourneys *GroupsOfSingleJourneysRelStructure `xml:"groupsOfSingleJourneys,omitempty" json:"groupsOfSingleJourneys,omitempty"`
	// SINGLE JOURNEYs in frame.
	SingleJourneys *SingleJourneysRelStructure `xml:"singleJourneys,omitempty" json:"singleJourneys,omitempty"`
	// INDIVIDUAL TRAVELLERs in Frame.
	IndividualTravellers *IndividualTravellersInFrameRelStructure `xml:"individualTravellers,omitempty" json:"individualTravellers,omitempty"`
	// VEHICLE MEETING POINTs in frame.
	VehicleAccessCredentials *VehicleAccessCredentialAssignmentsRelStructure `xml:"vehicleAccessCredentials,omitempty" json:"vehicleAccessCredentials,omitempty"`
	// VEHICLE MEETING POINTs in frame.
	ParkingLogEntries *ParkingLogEntriesInFrameRelStructure `xml:"parkingLogEntries,omitempty" json:"parkingLogEntries,omitempty"`
}

// MobilityJourneyFrameRef represents the MobilityJourneyFrameRef element
// Reference to a MOBILITY JOURNEY FRAME.
type MobilityJourneyFrameRef struct {
	MobilityJourneyFrameRefStructure
}

// MobilityJourneyFrame represents the MobilityJourneyFrame element
// A coherent set of MOBILITY JOURNEY data to which the same frame VALIDITY CONDITIONs have been assigned.
type MobilityJourneyFrame struct {
	MobilityJourneyVersionFrameStructure
}

// PublicationRequestStructure represents the PublicationRequestStructure element
// Type for Publication Request.
type PublicationRequestStructure struct {
	// Time of request.
	RequestTimestamp time.Time `xml:"RequestTimestamp" json:"RequestTimestamp"`
	ParticipantRef *ParticipantRef `xml:"ParticipantRef,omitempty" json:"ParticipantRef,omitempty"`
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// One or more Request filters that specify tthe data to be included in output. Multiple filters are logically ANDed.
	Topics *Topics `xml:"topics,omitempty" json:"topics,omitempty"`
	// Policies to apply when fetching data specified by Topics.
	RequestPolicy *NetworkFrameRequestPolicyStructure `xml:"RequestPolicy,omitempty" json:"RequestPolicy,omitempty"`
	// Policy to use when processing Network Subscriptions.
	SubscriptionPolicy *NetworkFrameSubscriptionPolicyStructure `xml:"SubscriptionPolicy,omitempty" json:"SubscriptionPolicy,omitempty"`
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
}

// Topics2 represents the topics2 element
type Topics2 struct {
	// Vaues to use select Network Objects.
	NetworkFrameTopic []NetworkFrameTopicStructure `xml:"NetworkFrameTopic" json:"NetworkFrameTopic"`
}

// PublicationDeliveryStructure represents the PublicationDeliveryStructure element
// Type for Publication Delivery.
type PublicationDeliveryStructure struct {
	// Time of output of data.
	PublicationTimestamp time.Time `xml:"PublicationTimestamp" json:"PublicationTimestamp"`
	ParticipantRef ParticipantRef `xml:"ParticipantRef" json:"ParticipantRef"`
	// Echo Request used to create bulk response.
	PublicationRequest *PublicationRequestStructure `xml:"PublicationRequest,omitempty" json:"PublicationRequest,omitempty"`
	// How often data in publication is refreshed.
	PublicationRefreshInterval *string `xml:"PublicationRefreshInterval,omitempty" json:"PublicationRefreshInterval,omitempty"`
	// Description of contents.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// NeTEx Entities of any type.
	DataObjects *DataObjectsRelStructure `xml:"dataObjects,omitempty" json:"dataObjects,omitempty"`
	Version *string `xml:"version,attr,omitempty" json:"version,omitempty"`
}

// ParticipantRef represents the ParticipantRef element
// Identifier of system requesting Data.
type ParticipantRef struct {
	Value string `xml:",chardata" json:"value"`
}

// PublicationRequest represents the PublicationRequest element
// A bulk publication request for NeTEx objects specifying which elements should be returned. Can be echoed back in a publication response.
type PublicationRequest struct {
	PublicationRequestStructure
}

// PublicationDelivery represents the PublicationDelivery element
// A set of NeTEx objects as assembled by a publication request or other service. Provides a general purpose wrapper for NeTEx data content.
type PublicationDelivery struct {
	PublicationDeliveryStructure
}

// NilReasonEnumerationValue represents the NilReasonEnumeration_value enumeration
type NilReasonEnumerationValue string

const (
	// NilReasonEnumerationValueInapplicable represents inapplicable
	NilReasonEnumerationValueInapplicable NilReasonEnumerationValue = "inapplicable"
	// NilReasonEnumerationValueMissing represents missing
	NilReasonEnumerationValueMissing NilReasonEnumerationValue = "missing"
	// NilReasonEnumerationValueTemplate represents template
	NilReasonEnumerationValueTemplate NilReasonEnumerationValue = "template"
	// NilReasonEnumerationValueUnknown represents unknown
	NilReasonEnumerationValueUnknown NilReasonEnumerationValue = "unknown"
	// NilReasonEnumerationValueWithheld represents withheld
	NilReasonEnumerationValueWithheld NilReasonEnumerationValue = "withheld"
)

// PointOfInterestSpaceVersionStructureAccessSpaceType represents the PointOfInterestSpace_VersionStructure_AccessSpaceType enumeration
type PointOfInterestSpaceVersionStructureAccessSpaceType string

const (
	// PointOfInterestSpaceVersionStructureAccessSpaceTypeOther represents other
	PointOfInterestSpaceVersionStructureAccessSpaceTypeOther PointOfInterestSpaceVersionStructureAccessSpaceType = "other"
)

// PointOfInterestSpaceAccessSpaceType represents the PointOfInterestSpace_AccessSpaceType enumeration
type PointOfInterestSpaceAccessSpaceType string

const (
	// PointOfInterestSpaceAccessSpaceTypeOther represents other
	PointOfInterestSpaceAccessSpaceTypeOther PointOfInterestSpaceAccessSpaceType = "other"
)

// GroupOfEntitiesRefStructure1 represents the GroupOfEntitiesRefStructure_1 element
// Extending Type for a reference to a GROUP OF ENTITies.
type GroupOfEntitiesRefStructure1 struct {
	GroupOfEntitiesRefStructure2
}

// GroupOfEntitiesRefStructure2 represents the GroupOfEntitiesRefStructure__2 element
// Extending Type for a reference to a GROUP OF ENTITies.
type GroupOfEntitiesRefStructure2 struct {
	VersionOfObjectRefStructure
	// Name of member class if homogeneous.
	NameOfMemberClass *string `xml:"nameOfMemberClass,attr,omitempty" json:"nameOfMemberClass,omitempty"`
}

// GroupOfEntitiesRef1 represents the GroupOfEntitiesRef_1 element
// Reference to a GROUP OF ENTITies.
type GroupOfEntitiesRef1 struct {
	GroupOfEntitiesRefStructure1
}

// GroupOfEntitiesRef2 represents the GroupOfEntitiesRef__2 element
// Reference to a GROUP OF ENTITies.
type GroupOfEntitiesRef2 struct {
	VersionOfObjectRefStructure
}

// OrganisationRefAbstract represents the OrganisationRef__abstract element
// Reference to an ORGANISATION.
type OrganisationRefAbstract struct {
	OrganisationRefStructure
}

// ValidityConditionAbstract represents the ValidityCondition__abstract element
// Condition used in order to characterise a given VERSION of a VERSION FRAME. A VALIDITY CONDITION consists of a parameter (e.g. date, triggering event, etc) and its type of application (e.g. for, from, until, etc.).
type ValidityConditionAbstract struct {
	DataManagedObjectStructure
}

// PointOnLinkRefStructure1 represents the PointOnLinkRefStructure_1 element
// Type for a reference to a POINT ON LINK.
type PointOnLinkRefStructure1 struct {
	PointOnLinkRefStructure2
}

// PointOnLinkRefStructure2 represents the PointOnLinkRefStructure__2 element
// Type for a reference to a POINT ON LINK.
type PointOnLinkRefStructure2 struct {
	PointRefStructure
	// Order of point on link.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// GroupOfPointsRef1 represents the GroupOfPointsRef_1 element
// Reference to a GROUP OF POINTs.
type GroupOfPointsRef1 struct {
	GroupOfPointsRefStructure
}

// GroupOfPointsRef2 represents the GroupOfPointsRef__2 element
type GroupOfPointsRef2 struct {
	GroupOfEntitiesRefStructure1
}

// TariffZoneRefAbstract represents the TariffZoneRef__abstract element
// Dummy type Reference to a TARIFF ZONE.
type TariffZoneRefAbstract struct {
	ZoneRefStructure
}

// PlaceRefAbstract represents the PlaceRef__abstract element
// Reference to a PLACE.
type PlaceRefAbstract struct {
	VersionOfObjectRefStructure
}

// DayTypeAbstract represents the DayType__abstract element
// Dummy Supertype for DAY TYPE.
type DayTypeAbstract struct {
	DataManagedObjectStructure
}

// AssignmentVersionStructure1 represents the Assignment_VersionStructure_1 element
// Type for ASSIGNMENT.
type AssignmentVersionStructure1 struct {
	AssignmentVersionStructure2
}

// AssignmentVersionStructure2 represents the Assignment_VersionStructure__2 element
// Type for ASSIGNMENT.
type AssignmentVersionStructure2 struct {
	DataManagedObjectStructure
	// Name of ASSIGNMENT.
	Name *MultilingualString `xml:"Name,omitempty" json:"Name,omitempty"`
	// Description of ASSIGNMENT.
	Description *MultilingualString `xml:"Description,omitempty" json:"Description,omitempty"`
	// Order in which to show an ASSIGNMENT. In some rare cases order makes no sense. The convention should be that order="1" is set then for all elements.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// Assignment1 represents the Assignment_1 element
// A set of properties to be applied to an another element. It has a name and an order.
type Assignment1 struct {
	AssignmentVersionStructure1
}

// Assignment2 represents the Assignment__2 element
// Dummy Abstract Assignment. An Assignment assigns a property to an other element. It has a name and an order.
type Assignment2 struct {
	DataManagedObjectStructure
}

// OperatingPeriodAbstract represents the OperatingPeriod__abstract element
// Dummy Operating Period
type OperatingPeriodAbstract struct {
	DataManagedObjectStructure
}

// TariffZoneAbstract represents the TariffZone__abstract element
// Dummy TARIFF ZONE  to workaround xML spy Substitution Group limitations
type TariffZoneAbstract struct {
	ZoneVersionStructure
}

// Organisation1 represents the Organisation_1 element
// An legally incorporated body associated with any aspect of the transport system.
type Organisation1 struct {
	OrganisationVersionStructure
}

// Organisation2 represents the Organisation__2 element
// Dummy supertype for ORGANISATION.
type Organisation2 struct {
	DataManagedObjectStructure
}

// OrganisationPartAbstract represents the OrganisationPart__abstract element
// Dummy supertype for ORGANISATION PART.
type OrganisationPartAbstract struct {
	DataManagedObjectStructure
}

// AdministrativeZoneAbstract represents the AdministrativeZone__abstract element
// Dummy supertype for ADMINISTRATIVE ZONE.
type AdministrativeZoneAbstract struct {
	ZoneVersionStructure
}

// Section1 represents the Section_1 element
// A shared sequence of LINKS or POINTs.  +v1.1.
type Section1 struct {
	SectionVersionStructure
}

// Section2 represents the Section__2 element
// Dummy Supertype for SECTION  +v1.1.
type Section2 struct {
	LinkSequenceVersionStructure
}

// PointOnSectionAbstract represents the PointOnSection__abstract element
// DUmmy Supertype for Point On SECTION.  +v1.1.
type PointOnSectionAbstract struct {
	PointInLinkSequenceVersionedChildStructure
}

// TransportOrganisation1 represents the TransportOrganisation_1 element
// A company  providing transport services.
type TransportOrganisation1 struct {
	TransportOrganisationVersionStructure
}

// TransportOrganisation2 represents the TransportOrganisation__2 element
// A company  providing public transport services.
type TransportOrganisation2 struct {
	OrganisationVersionStructure
}

// NoticeAssignmentAbstract represents the NoticeAssignment__abstract element
// Dummy abstract NOTICE ASSIGNMENT.
type NoticeAssignmentAbstract struct {
	DataManagedObjectStructure
}

// LineAbstract represents the Line__abstract element
// Dummy Supertype for LINE &amp; FLEXIBLE LINe.
type LineAbstract struct {
	DataManagedObjectStructure
}

// ParkingBayAbstract represents the ParkingBay__abstract element
// Dummy Type to get round SG limitations
type ParkingBayAbstract struct {
	SiteComponentVersionStructure
}

// ParkingAreaAbstract represents the ParkingArea__abstract element
// Dummy Type to get round SG limitations
type ParkingAreaAbstract struct {
	SiteComponentVersionStructure
}

// StopPlaceAbstract represents the StopPlace__abstract element
// Dummy Type to get round SG limitations. Can be a STOP PLACE, VEHICLE MEETING POINT, TAXI RANK.
type StopPlaceAbstract struct {
	SiteVersionStructure
}

// QuayAbstract represents the Quay__abstract element
// Dummy Type to get round SG limitations
type QuayAbstract struct {
	SiteVersionStructure
}

// TransportTypeAbstract represents the TransportType__abstract element
// Dummy type to work around SG limitations
type TransportTypeAbstract struct {
	DataManagedObjectStructure
}

// ModeOfOperation1 represents the ModeOfOperation_1 element
// The use of any kind of vehicle to perform a trip using any mode of operation, this can be a CONVENTIONAL, ALTERNATIVE  or a PERSONAL MODE OF OPERATION. +v1.2.2
type ModeOfOperation1 struct {
	ModeOfOperationValueStructure
}

// ModeOfOperation2 represents the ModeOfOperation__2 element
// Dummy type to work around SG limitations.
type ModeOfOperation2 struct {
	DataManagedObjectStructure
}

// ConventionalModeOfOperation1 represents the ConventionalModeOfOperation_1 element
// Legacy mode of operation which is provided as a scheduled and/or flexible publicly advertised transport offer. +v1.2.2
type ConventionalModeOfOperation1 struct {
	ConventionalModeOfOperationValueStructure
}

// ConventionalModeOfOperation2 represents the ConventionalModeOfOperation__2 element
// Dummy type to work around SG limitations.
type ConventionalModeOfOperation2 struct {
	DataManagedObjectStructure
}

// AlternativeModeOfOperationAbstract represents the AlternativeModeOfOperation__abstract element
// Dummy type to work around SG limitations.
type AlternativeModeOfOperationAbstract struct {
	DataManagedObjectStructure
}

// SecurityListing1 represents the SecurityListing_1 element
// The presence of an identified Entity on a SECURITY LIST.
type SecurityListing1 struct {
	SecurityListingVersionedChildStructure
}

// SecurityListing2 represents the SecurityListing__2 element
// DUMMY type for SECIRITY LISTING.
type SecurityListing2 struct {
	VersionedChildStructure
}

// ActivationPointAbstract represents the ActivationPoint__abstract element
// A POINT where a control process is activated when a vehicle passes it. EQUIPMENT may be needed for the activation.
type ActivationPointAbstract struct {
	PointVersionStructure
}

// InfrastructureLink1 represents the InfrastructureLink_1 element
// A supertype including all LINKs of the physical network (e.g. RAILWAY ELEMENT). Infrastructure  links are directional - there will be separate links for each direction of a network.
type InfrastructureLink1 struct {
	InfrastructureLinkVersionStructure
}

// InfrastructureLink2 represents the InfrastructureLink__2 element
// A Dummy Supertype for Infrastructure Link Types.
type InfrastructureLink2 struct {
	LinkVersionStructure
}

// TimingPointAbstract represents the TimingPoint__abstract element
// A POINT against which the timing information necessary to build schedules may be recorded.
type TimingPointAbstract struct {
	PointVersionStructure
}

// ReliefPointAbstract represents the ReliefPoint__abstract element
// A TIMING POINT where a relief is possible, i.e. a driver may take on or hand over a vehicle. The vehicle may sometimes be left unattended.
type ReliefPointAbstract struct {
	TimingPointVersionStructure
}

// ParkingPointAbstract represents the ParkingPoint__abstract element
// A TIMING POINT where vehicles may stay unattended for a long time. A vehicle's return to park at a PARKING POINT marks the end of a BLOCK.
type ParkingPointAbstract struct {
	ReliefPointVersionStructure
}

// RouteAbstract represents the Route__abstract element
// Dummy supertype for Route.
type RouteAbstract struct {
	LinkSequenceVersionStructure
}

// JourneyPatternAbstract represents the JourneyPattern__abstract element
// Dummy Supertype for JOURNEY PATTERN.
type JourneyPatternAbstract struct {
	LinkSequenceVersionStructure
}

// Journey1 represents the Journey_1 element
// Common properties of a JOURNEY.
type Journey1 struct {
	JourneyVersionStructure
}

// Journey2 represents the Journey__2 element
// Dummy supertype for Journey.
type Journey2 struct {
	LinkSequenceVersionStructure
}

// Interchange1 represents the Interchange_1 element
// The scheduled possibility for transfer of passengers between two SERVICE JOURNEYs at the same or different STOP POINTs.
type Interchange1 struct {
	InterchangeVersionStructure
}

// Interchange2 represents the Interchange__2 element
// Dummy supertype for INTERCHANGe.
type Interchange2 struct {
	DataManagedObjectStructure
}

// CallAbstract represents the Call__abstract element
// Dummy CALL.
type CallAbstract struct {
	VersionedChildStructure
}

// VehicleJourneyAbstract represents the VehicleJourney__abstract element
// Dummy VEHICLE JOURNEY supertype.
type VehicleJourneyAbstract struct {
	JourneyVersionStructure
}

// ServiceJourneyAbstract represents the ServiceJourney__abstract element
// Dummy SERVICE JOURNEY Supertype.
type ServiceJourneyAbstract struct {
	JourneyVersionStructure
}

// PricingRuleAbstract represents the PricingRule__abstract element
// Dumm abstact type of Pricing rule.
type PricingRuleAbstract struct {
	DataManagedObjectStructure
}

// CellRefAbstract represents the CellRef__abstract element
// Dummy Reference to a FARE TABLE CELL.
type CellRefAbstract struct {
	VersionOfObjectRefStructure
}

// PriceableObject1 represents the PriceableObject_1 element
// An element that may have a FARE PRICE.
type PriceableObject1 struct {
	PriceableObjectVersionStructure
}

// PriceableObject2 represents the PriceableObject__2 element
// Dummy Abstract price.
type PriceableObject2 struct {
	DataManagedObjectStructure
}

// FareTableAbstract represents the FareTable__abstract element
// A grouping of prices that may be associated with a DISTANCE MATRIX ELEMENT, FARE STRUCTURE ELEMENT or  other PRICEABLE OBJECT.
type FareTableAbstract struct {
	GroupOfEntitiesVersionStructure
}

// FarePrice1 represents the FarePrice_1 element
// A set of all possible price features for a Fare element.
type FarePrice1 struct {
	FarePriceVersionedChildStructure
}

// FarePrice2 represents the FarePrice__2 element
// Dummy Abstract PRICE.
type FarePrice2 struct {
	VersionedChildStructure
}

// PriceGroupAbstract represents the PriceGroup__abstract element
// A grouping of prices, allowing the grouping of numerous possible consumption elements into a limited number of price references, or to apply grouped increase, in value or percentage.
type PriceGroupAbstract struct {
	GroupOfEntitiesVersionStructure
}

// SeriesConstraintRefStructure1 represents the SeriesConstraintRefStructure_1 element
// Type for Reference to a SERIES CONSTRAINT.
type SeriesConstraintRefStructure1 struct {
	SeriesConstraintRefStructure2
}

// SeriesConstraintRefStructure2 represents the SeriesConstraintRefStructure__2 element
// Extending type for Reference to a SERIES CONSTRAINT.
type SeriesConstraintRefStructure2 struct {
	PriceableObjectRefStructure
	// order of constraint.
	Order *int `xml:"order,attr,omitempty" json:"order,omitempty"`
}

// CellAbstract represents the Cell__abstract element
// Dummy Abstract CELL.
type CellAbstract struct {
	VersionedChildStructure
}

// UsageParameter1 represents the UsageParameter_1 element
// A parameter used to specify the use of a fare system.
type UsageParameter1 struct {
	UsageParameterVersionStructure
}

// UsageParameter2 represents the UsageParameter__2 element
// Dummy Supertype: A parameter used to specify the use of a fare system.
type UsageParameter2 struct {
	DataManagedObjectStructure
}

// AccessRightParameterAssignmentAbstract represents the AccessRightParameterAssignment__abstract element
// The assignment of a fare parameter (referring to geography, time, quality or usage) to an element of a fare system (access right, validated access, control mean, etc.).
type AccessRightParameterAssignmentAbstract struct {
	DataManagedObjectStructure
}

// QualityStructureFactorAbstract represents the QualityStructureFactor__abstract element
// Dummy type.
type QualityStructureFactorAbstract struct {
	DataManagedObjectStructure
}

// ServiceAccessRight1 represents the ServiceAccessRight_1 element
// An immaterial marketable element dedicated to accessing some services.
type ServiceAccessRight1 struct {
	ServiceAccessRightVersionStructure
}

// ServiceAccessRight2 represents the ServiceAccessRight__2 element
// An immaterial marketable element
type ServiceAccessRight2 struct {
	DataManagedObjectStructure
}

// FareProduct1 represents the FareProduct_1 element
// An immaterial marketable element (access rights, discount rights etc), specific to a CHARGING MOMENT.
type FareProduct1 struct {
	FareProductVersionStructure
}

// FareProduct2 represents the FareProduct__2 element
// An immaterial marketable element (access rights, discount rights etc), specific to a CHARGING MOMENT.
type FareProduct2 struct {
	DataManagedObjectStructure
}

// CustomerEligibility1 represents the CustomerEligibility_1 element
// Whether a specific TRANSPORT CUSTOMER is eligible for a FARE PRODUCT with a specific validity Parameter. This may be subject to a particular VALIDITY CONDITION.
type CustomerEligibility1 struct {
	CustomerEligibilityVersionedChildStructure
}

// CustomerEligibility2 represents the CustomerEligibility__2 element
// Dummy Type for Customer Eligibility.
type CustomerEligibility2 struct {
	VersionedChildStructure
}

// FareContractEntryAbstract represents the FareContractEntry_abstract element
// A log entry describing an event referring to the life of a FARE CONTRACT: initial contracting, sales, validation entries, etc. A subset of a FARE CONTRACT ENTRY is often materialised on a TRAVEL DOCUMENT.
type FareContractEntryAbstract struct {
	FareContractEntryVersionStructure
}

// TravelSpecification1 represents the TravelSpecification_1 element
// The recording of a specification by a customer of parameters giving details of an intended consumption (e.g. origin and destination of a travel).
type TravelSpecification1 struct {
	TravelSpecificationVersionStructure
}

// TravelSpecification2 represents the TravelSpecification__2 element
// Dummy type for FARE CONTRACT ENTRY.
type TravelSpecification2 struct {
	DataManagedObjectStructure
}

// MediumAccessDeviceAbstract represents the MediumAccessDevice__abstract element
// A component (mobile phone, smart card, etc) with the necessary facilities (hardware and software) to host a MEDIUM APPLICATION INSTANCE and communicate with a control device. +v1.2.2.
type MediumAccessDeviceAbstract struct {
	DataManagedObjectStructure
}

// MobilityService1 represents the MobilityService_1 element
// A named service  available over  a widespread area, for example car pooling, rental, etc. The service may be accessible at designated SITES it for which it can be considered as a n additional form of immaterial EQUIPMENT.  +v1.2.2
type MobilityService1 struct {
	MobilityServiceVersionStructure
}

// MobilityService2 represents the MobilityService__2 element
// Dummy type to work around SG limitation.
type MobilityService2 struct {
	EquipmentVersionStructure
}

// CommonVehicleService1 represents the CommonVehicleService_1 element
// A transport service offer related to VEHICLEs. +v1.2.2
type CommonVehicleService1 struct {
	CommonVehicleServiceVersionStructure
}

// CommonVehicleService2 represents the CommonVehicleService__2 element
// Dummy type to work around SG limitation.
type CommonVehicleService2 struct {
	EquipmentVersionStructure
}

// VehiclePoolingService1 represents the VehiclePoolingService_1 element
// A transport service that connects users (driver and passenger(s)) for carrying out trips.  +v1.2.2
type VehiclePoolingService1 struct {
	VehiclePoolingServiceVersionStructure
}

// VehiclePoolingService2 represents the VehiclePoolingService__2 element
// Dummy type to work around SG limitation.
type VehiclePoolingService2 struct {
	MobilityServiceVersionStructure
}

// VehicleMeetingPlace1 represents the VehicleMeetingPlace_1 element
// A place where  vehicles/passengers meet to change mode of transportation, for boarding, alighting, pick-up, drop-off, etc.  +v1.2.2
type VehicleMeetingPlace1 struct {
	VehicleMeetingPlaceVersionStructure
}

// VehicleMeetingPlace2 represents the VehicleMeetingPlace__2 element
// DUMMY type to workaround SG limitation.
type VehicleMeetingPlace2 struct {
	AddressablePlaceVersionStructure
}

// VehicleMeetingPointAssignment1 represents the VehicleMeetingPointAssignment_1 element
// The allocation of a VEHICLE MEETING POINT to a SITE COMPONENT  or ADDRESSABLE PLACE (for vehicle pooling or vehicle sharing purposes).  +v1.2.2
type VehicleMeetingPointAssignment1 struct {
	VehicleMeetingPointAssignmentVersionStructure
}

// VehicleMeetingPointAssignment2 represents the VehicleMeetingPointAssignment__2 element
// Dummy Type to work round SG restrictions.
type VehicleMeetingPointAssignment2 struct {
	AssignmentVersionStructure1
}

// VehicleServicePlaceAssignment1 represents the VehicleServicePlaceAssignment_1 element
// The allocation of a place to a MOBILITY SERVICE. +V1.2.2
type VehicleServicePlaceAssignment1 struct {
	VehicleServicePlaceAssignmentVersionStructure
}

// VehicleServicePlaceAssignment2 represents the VehicleServicePlaceAssignment__2 element
// Dummy Type to work round SG restrfictions.
type VehicleServicePlaceAssignment2 struct {
	AssignmentVersionStructure1
}